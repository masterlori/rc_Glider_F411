
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009518  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f88  08009f88  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f90  08009f90  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08009f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000009a0  20000104  0800a09c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800a09c  00020aa4  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00030000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00030000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019921  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ea2  00000000  00000000  00039a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e0  00000000  00000000  0003d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001470  00000000  00000000  0003eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001abab  00000000  00000000  00040348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cceb  00000000  00000000  0005aef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009fa5f  00000000  00000000  00077bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0011763d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005b8c  00000000  00000000  00117690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009690 	.word	0x08009690

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08009690 	.word	0x08009690

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
 80004f8:	e010      	b.n	800051c <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <autopilot_Timer+0x44>)
 80004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d007      	beq.n	8000516 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <autopilot_Timer+0x44>)
 800050a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050e:	3a01      	subs	r2, #1
 8000510:	4907      	ldr	r1, [pc, #28]	; (8000530 <autopilot_Timer+0x44>)
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3301      	adds	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d9eb      	bls.n	80004fa <autopilot_Timer+0xe>
		}
	}

	return;
 8000522:	bf00      	nop
}
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000120 	.word	0x20000120

08000534 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <autopilot_InitTask+0x6c>)
 800053a:	22ff      	movs	r2, #255	; 0xff
 800053c:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <autopilot_InitTask+0x70>)
 8000540:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000544:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <autopilot_InitTask+0x70>)
 8000548:	2200      	movs	r2, #0
 800054a:	735a      	strb	r2, [r3, #13]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <autopilot_InitTask+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <autopilot_InitTask+0x74>)
 8000554:	4a15      	ldr	r2, [pc, #84]	; (80005ac <autopilot_InitTask+0x78>)
 8000556:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <autopilot_InitTask+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <autopilot_InitTask+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <autopilot_InitTask+0x74>)
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <autopilot_InitTask+0x7c>)
 8000568:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <autopilot_InitTask+0x74>)
 800056c:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <autopilot_InitTask+0x80>)
 800056e:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <autopilot_InitTask+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <autopilot_InitTask+0x74>)
 8000578:	220a      	movs	r2, #10
 800057a:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <autopilot_InitTask+0x74>)
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <autopilot_InitTask+0x84>)
 8000580:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <autopilot_InitTask+0x74>)
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <autopilot_InitTask+0x88>)
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <autopilot_InitTask+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <autopilot_InitTask+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c

	return;
 8000594:	bf00      	nop
}
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000170 	.word	0x20000170
 80005a4:	20000120 	.word	0x20000120
 80005a8:	20000140 	.word	0x20000140
 80005ac:	080006ad 	.word	0x080006ad
 80005b0:	080006bb 	.word	0x080006bb
 80005b4:	080006c9 	.word	0x080006c9
 80005b8:	080007d9 	.word	0x080007d9
 80005bc:	080007f9 	.word	0x080007f9

080005c0 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <autopilot_Task+0x54>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2bff      	cmp	r3, #255	; 0xff
 80005cc:	d107      	bne.n	80005de <autopilot_Task+0x1e>
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <autopilot_Task+0x58>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f822 	bl	8000620 <autopilot_gotoState>
 80005dc:	e017      	b.n	800060e <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <autopilot_Task+0x54>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d813      	bhi.n	8000610 <autopilot_Task+0x50>
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <autopilot_Task+0x54>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <autopilot_Task+0x5c>)
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	4413      	add	r3, r2
 80005f4:	3304      	adds	r3, #4
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d009      	beq.n	8000610 <autopilot_Task+0x50>
			autopilot_states[_cur_ap_state].main_func();
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <autopilot_Task+0x54>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4a06      	ldr	r2, [pc, #24]	; (800061c <autopilot_Task+0x5c>)
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	4413      	add	r3, r2
 8000608:	3304      	adds	r3, #4
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4798      	blx	r3
		}
	}


	return;
 800060e:	bf00      	nop
 8000610:	bf00      	nop
}
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000170 	.word	0x20000170
 8000618:	20000120 	.word	0x20000120
 800061c:	20000140 	.word	0x20000140

08000620 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d833      	bhi.n	8000698 <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <autopilot_gotoState+0x80>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b02      	cmp	r3, #2
 8000638:	d812      	bhi.n	8000660 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <autopilot_gotoState+0x80>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <autopilot_gotoState+0x84>)
 8000642:	011b      	lsls	r3, r3, #4
 8000644:	4413      	add	r3, r2
 8000646:	3308      	adds	r3, #8
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d008      	beq.n	8000660 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <autopilot_gotoState+0x80>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <autopilot_gotoState+0x84>)
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	4413      	add	r3, r2
 800065a:	3308      	adds	r3, #8
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <autopilot_gotoState+0x84>)
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	4413      	add	r3, r2
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d005      	beq.n	800067a <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <autopilot_gotoState+0x84>)
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <autopilot_gotoState+0x84>)
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	4413      	add	r3, r2
 8000682:	330c      	adds	r3, #12
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <autopilot_gotoState+0x88>)
 8000688:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <autopilot_gotoState+0x80>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 8000690:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <autopilot_gotoState+0x88>)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	7313      	strb	r3, [r2, #12]

	return;
 8000696:	e000      	b.n	800069a <autopilot_gotoState+0x7a>
		return;
 8000698:	bf00      	nop
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000170 	.word	0x20000170
 80006a4:	20000140 	.word	0x20000140
 80006a8:	20000120 	.word	0x20000120

080006ac <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	autopilot_gotoState(AP_STATE_FULLMANUAL);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ffb5 	bl	8000620 <autopilot_gotoState>

	return;
 80006b6:	bf00      	nop
}
 80006b8:	bd80      	pop	{r7, pc}

080006ba <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0


	return;
 80006be:	bf00      	nop
}
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d13c      	bne.n	800074e <autopilot_stateFullManMain+0x86>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 80006d4:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <autopilot_stateFullManMain+0x100>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4a3c      	ldr	r2, [pc, #240]	; (80007cc <autopilot_stateFullManMain+0x104>)
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	4413      	add	r3, r2
 80006e0:	330c      	adds	r3, #12
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a37      	ldr	r2, [pc, #220]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 80006e6:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 80006e8:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 80006ea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d129      	bne.n	8000748 <autopilot_stateFullManMain+0x80>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 80006f4:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 80006f6:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	2000      	movs	r0, #0
 8000700:	f004 f918 	bl	8004934 <servo_setPercnet>
			servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 8000704:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 8000706:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800070a:	b25b      	sxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	f004 f910 	bl	8004934 <servo_setPercnet>
			//Motor
			if( (rc_info.axis_l_x > 0) && (autopilot_info.armed_flag == 1) ){
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 8000716:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800071a:	b25b      	sxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	dd0e      	ble.n	800073e <autopilot_stateFullManMain+0x76>
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 8000722:	7b5b      	ldrb	r3, [r3, #13]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b01      	cmp	r3, #1
 8000728:	d109      	bne.n	800073e <autopilot_stateFullManMain+0x76>
				motor_setTorque(MOTOR_MAIN, (uint8_t)rc_info.axis_l_x);
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 800072c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000730:	b25b      	sxtb	r3, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	2000      	movs	r0, #0
 8000738:	f003 f9ec 	bl	8003b14 <motor_setTorque>
 800073c:	e007      	b.n	800074e <autopilot_stateFullManMain+0x86>
			}
			else{
				motor_setTorque(MOTOR_MAIN, 0);
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f003 f9e7 	bl	8003b14 <motor_setTorque>
 8000746:	e002      	b.n	800074e <autopilot_stateFullManMain+0x86>
			}
		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ff69 	bl	8000620 <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 8000750:	7b5b      	ldrb	r3, [r3, #13]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d132      	bne.n	80007be <autopilot_stateFullManMain+0xf6>
	{
		if(rc_info.connected == 1)
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 800075a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b01      	cmp	r3, #1
 8000762:	d12c      	bne.n	80007be <autopilot_stateFullManMain+0xf6>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <autopilot_stateFullManMain+0x10c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <autopilot_stateFullManMain+0xc2>
			{
				if( rc_info.axis_l_x == -100 )
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 800076e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000772:	b25b      	sxtb	r3, r3
 8000774:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000778:	d121      	bne.n	80007be <autopilot_stateFullManMain+0xf6>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 800077c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000780:	609a      	str	r2, [r3, #8]
					_ap_arm_st = 1;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <autopilot_stateFullManMain+0x10c>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]
		}
	}



	return;
 8000788:	e019      	b.n	80007be <autopilot_stateFullManMain+0xf6>
			else if( _ap_arm_st == 1 )
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <autopilot_stateFullManMain+0x10c>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d115      	bne.n	80007be <autopilot_stateFullManMain+0xf6>
				if( rc_info.axis_l_x != -100 ){
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <autopilot_stateFullManMain+0x108>)
 8000794:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000798:	b25b      	sxtb	r3, r3
 800079a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800079e:	d003      	beq.n	80007a8 <autopilot_stateFullManMain+0xe0>
					_ap_arm_st = 0;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <autopilot_stateFullManMain+0x10c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	return;
 80007a6:	e00a      	b.n	80007be <autopilot_stateFullManMain+0xf6>
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d106      	bne.n	80007be <autopilot_stateFullManMain+0xf6>
						autopilot_info.armed_flag = 1;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <autopilot_stateFullManMain+0xfc>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	735a      	strb	r2, [r3, #13]
						_ap_arm_st = 0;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <autopilot_stateFullManMain+0x10c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	return;
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
}
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000120 	.word	0x20000120
 80007c8:	20000170 	.word	0x20000170
 80007cc:	20000140 	.word	0x20000140
 80007d0:	20000874 	.word	0x20000874
 80007d4:	2000013c 	.word	0x2000013c

080007d8 <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2000      	movs	r0, #0
 80007e0:	f004 f8a8 	bl	8004934 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2001      	movs	r0, #1
 80007e8:	f004 f8a4 	bl	8004934 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f003 f990 	bl	8003b14 <motor_setTorque>

	return;
 80007f4:	bf00      	nop
}
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <autopilot_stateFailsafeMain+0x1c>)
 80007fe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b01      	cmp	r3, #1
 8000806:	d103      	bne.n	8000810 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff09 	bl	8000620 <autopilot_gotoState>
	}
	return;
 800080e:	bf00      	nop
 8000810:	bf00      	nop
}
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000874 	.word	0x20000874

08000818 <cfg_NodeApVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <cfg_NodeApVarProp+0x1a>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d003      	beq.n	8000838 <cfg_NodeApVarProp+0x20>
 8000830:	e005      	b.n	800083e <cfg_NodeApVarProp+0x26>
	{
		case AUTOPILOT_STATE:	str = "State"; break;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <cfg_NodeApVarProp+0x88>)
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e004      	b.n	8000842 <cfg_NodeApVarProp+0x2a>
		case AUTOPILOT_ARMED:	str = "Armed"; break;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <cfg_NodeApVarProp+0x8c>)
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e001      	b.n	8000842 <cfg_NodeApVarProp+0x2a>
		default: return CFG_ERROR_VARID;
 800083e:	2302      	movs	r3, #2
 8000840:	e027      	b.n	8000892 <cfg_NodeApVarProp+0x7a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00f      	beq.n	8000868 <cfg_NodeApVarProp+0x50>
 8000848:	e007      	b.n	800085a <cfg_NodeApVarProp+0x42>
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	1c53      	adds	r3, r2, #1
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1c59      	adds	r1, r3, #1
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f3      	bne.n	800084a <cfg_NodeApVarProp+0x32>
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00f      	beq.n	800088e <cfg_NodeApVarProp+0x76>
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <cfg_NodeApVarProp+0x62>
 8000874:	2b01      	cmp	r3, #1
 8000876:	d004      	beq.n	8000882 <cfg_NodeApVarProp+0x6a>
 8000878:	e007      	b.n	800088a <cfg_NodeApVarProp+0x72>
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	801a      	strh	r2, [r3, #0]
 8000880:	e006      	b.n	8000890 <cfg_NodeApVarProp+0x78>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2203      	movs	r2, #3
 8000886:	801a      	strh	r2, [r3, #0]
 8000888:	e002      	b.n	8000890 <cfg_NodeApVarProp+0x78>
		default: return CFG_ERROR_VARID;
 800088a:	2302      	movs	r3, #2
 800088c:	e001      	b.n	8000892 <cfg_NodeApVarProp+0x7a>
	}
	return CFG_ERROR_NONE;
 800088e:	bf00      	nop
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	371c      	adds	r7, #28
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	080096b0 	.word	0x080096b0
 80008a4:	080096b8 	.word	0x080096b8

080008a8 <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d015      	beq.n	80008e6 <cfg_NodeApVarGet+0x3e>
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <cfg_NodeApVarGet+0x1e>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d007      	beq.n	80008d4 <cfg_NodeApVarGet+0x2c>
 80008c4:	e00d      	b.n	80008e2 <cfg_NodeApVarGet+0x3a>
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <cfg_NodeApVarGet+0x50>)
 80008c8:	7b1b      	ldrb	r3, [r3, #12]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	e009      	b.n	80008e8 <cfg_NodeApVarGet+0x40>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <cfg_NodeApVarGet+0x50>)
 80008d6:	7b5b      	ldrb	r3, [r3, #13]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e002      	b.n	80008e8 <cfg_NodeApVarGet+0x40>
		default: return CFG_ERROR_VARID;
 80008e2:	2302      	movs	r3, #2
 80008e4:	e001      	b.n	80008ea <cfg_NodeApVarGet+0x42>
	}
	return CFG_ERROR_NONE;
 80008e6:	bf00      	nop
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000120 	.word	0x20000120

080008fc <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d013      	beq.n	8000936 <cfg_NodeApVarSet+0x3a>
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d002      	beq.n	800091a <cfg_NodeApVarSet+0x1e>
 8000914:	2b01      	cmp	r3, #1
 8000916:	d006      	beq.n	8000926 <cfg_NodeApVarSet+0x2a>
 8000918:	e00b      	b.n	8000932 <cfg_NodeApVarSet+0x36>
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <cfg_NodeApVarSet+0x4c>)
 8000922:	731a      	strb	r2, [r3, #12]
 8000924:	e008      	b.n	8000938 <cfg_NodeApVarSet+0x3c>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <cfg_NodeApVarSet+0x4c>)
 800092e:	735a      	strb	r2, [r3, #13]
 8000930:	e002      	b.n	8000938 <cfg_NodeApVarSet+0x3c>
		default: return CFG_ERROR_VARID;
 8000932:	2302      	movs	r3, #2
 8000934:	e001      	b.n	800093a <cfg_NodeApVarSet+0x3e>
	}
	return CFG_ERROR_NONE;
 8000936:	bf00      	nop
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000120 	.word	0x20000120

0800094c <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <battery_Timer+0x34>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <battery_Timer+0x34>)
 800095e:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <battery_Timer+0x38>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <battery_Timer+0x28>
		battery_info.timer--;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <battery_Timer+0x38>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <battery_Timer+0x38>)
 8000970:	6013      	str	r3, [r2, #0]
	}

	return;
 8000972:	bf00      	nop
 8000974:	bf00      	nop
}
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	200001a0 	.word	0x200001a0
 8000984:	20000174 	.word	0x20000174

08000988 <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b63      	cmp	r3, #99	; 0x63
 8000994:	d801      	bhi.n	800099a <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 8000996:	2364      	movs	r3, #100	; 0x64
 8000998:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <battery_InitTask+0x34>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <battery_InitTask+0x34>)
 80009a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009a6:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <battery_InitTask+0x34>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	711a      	strb	r2, [r3, #4]

	return;
 80009ae:	bf00      	nop
}
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000174 	.word	0x20000174

080009c0 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 80009c6:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <battery_Task+0xd8>)
 80009c8:	7b5b      	ldrb	r3, [r3, #13]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d15e      	bne.n	8000a8e <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <battery_Task+0xd8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 80009d6:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <battery_Task+0xd8>)
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d109      	bne.n	80009f4 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <battery_Task+0xd8>)
 80009e2:	89db      	ldrh	r3, [r3, #14]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f858 	bl	8000a9c <battery_filterInit>
			battery_info.init_flag = 0;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <battery_Task+0xd8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 80009f2:	e04c      	b.n	8000a8e <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <battery_Task+0xd8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d148      	bne.n	8000a8e <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <battery_Task+0xd8>)
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <battery_Task+0xd8>)
 8000a02:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <battery_Task+0xd8>)
 8000a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	425a      	negs	r2, r3
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	f002 0207 	and.w	r2, r2, #7
 8000a18:	bf58      	it	pl
 8000a1a:	4253      	negpl	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <battery_Task+0xd8>)
 8000a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <battery_Task+0xd8>)
 8000a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <battery_Task+0xd8>)
 8000a30:	89db      	ldrh	r3, [r3, #14]
 8000a32:	b299      	uxth	r1, r3
 8000a34:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <battery_Task+0xd8>)
 8000a36:	f100 0308 	add.w	r3, r0, #8
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	460a      	mov	r2, r1
 8000a40:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8000a46:	2300      	movs	r3, #0
 8000a48:	70fb      	strb	r3, [r7, #3]
 8000a4a:	e00d      	b.n	8000a68 <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <battery_Task+0xd8>)
 8000a50:	3308      	adds	r3, #8
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	3301      	adds	r3, #1
 8000a66:	70fb      	strb	r3, [r7, #3]
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b07      	cmp	r3, #7
 8000a6c:	d9ee      	bls.n	8000a4c <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <battery_Task+0xd8>)
 8000a76:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <battery_Task+0xd8>)
 8000a7a:	8a1b      	ldrh	r3, [r3, #16]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f838 	bl	8000af4 <battery_calcPerc>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <battery_Task+0xd8>)
 8000a8a:	749a      	strb	r2, [r3, #18]
	return;
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
}
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000174 	.word	0x20000174

08000a9c <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e009      	b.n	8000ac0 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <battery_filterInit+0x54>)
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	88fa      	ldrh	r2, [r7, #6]
 8000ab8:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	3301      	adds	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	2b07      	cmp	r3, #7
 8000ac4:	d9f2      	bls.n	8000aac <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <battery_filterInit+0x54>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <battery_filterInit+0x54>)
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <battery_filterInit+0x54>)
 8000ad6:	8a1b      	ldrh	r3, [r3, #16]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f80a 	bl	8000af4 <battery_calcPerc>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <battery_filterInit+0x54>)
 8000ae6:	749a      	strb	r2, [r3, #18]

	return;
 8000ae8:	bf00      	nop
}
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000174 	.word	0x20000174

08000af4 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d802      	bhi.n	8000b16 <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b12:	885b      	ldrh	r3, [r3, #2]
 8000b14:	e041      	b.n	8000b9a <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b1a:	88fa      	ldrh	r2, [r7, #6]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d302      	bcc.n	8000b26 <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000b24:	e039      	b.n	8000b9a <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e011      	b.n	8000b50 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b30:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000b34:	88fa      	ldrh	r2, [r7, #6]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d307      	bcc.n	8000b4a <battery_calcPerc+0x56>
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b40:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000b44:	88fa      	ldrh	r2, [r7, #6]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d906      	bls.n	8000b58 <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	2b0a      	cmp	r3, #10
 8000b54:	d9ea      	bls.n	8000b2c <battery_calcPerc+0x38>
 8000b56:	e000      	b.n	8000b5a <battery_calcPerc+0x66>
		{
			break;
 8000b58:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8000b5a:	88f8      	ldrh	r0, [r7, #6]
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b60:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000b64:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b6c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8000b70:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8000b7c:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <battery_calcPerc+0xb0>)
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	462b      	mov	r3, r5
 8000b8e:	4622      	mov	r2, r4
 8000b90:	f000 f80a 	bl	8000ba8 <analog_map>
 8000b94:	4603      	mov	r3, r0
 8000b96:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 8000b98:	89bb      	ldrh	r3, [r7, #12]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	69b9      	ldr	r1, [r7, #24]
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	1a8a      	subs	r2, r1, r2
 8000bc2:	fb03 f202 	mul.w	r2, r3, r2
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1acb      	subs	r3, r1, r3
 8000bcc:	fb92 f2f3 	sdiv	r2, r2, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4413      	add	r3, r2
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d00c      	beq.n	8000c0e <cfg_NodeBatVarProp+0x2e>
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	dc0d      	bgt.n	8000c14 <cfg_NodeBatVarProp+0x34>
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <cfg_NodeBatVarProp+0x22>
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d003      	beq.n	8000c08 <cfg_NodeBatVarProp+0x28>
 8000c00:	e008      	b.n	8000c14 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <cfg_NodeBatVarProp+0xa4>)
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e007      	b.n	8000c18 <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <cfg_NodeBatVarProp+0xa8>)
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e004      	b.n	8000c18 <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <cfg_NodeBatVarProp+0xac>)
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e001      	b.n	8000c18 <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 8000c14:	2302      	movs	r3, #2
 8000c16:	e02f      	b.n	8000c78 <cfg_NodeBatVarProp+0x98>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00f      	beq.n	8000c3e <cfg_NodeBatVarProp+0x5e>
 8000c1e:	e007      	b.n	8000c30 <cfg_NodeBatVarProp+0x50>
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	1c53      	adds	r3, r2, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1c59      	adds	r1, r3, #1
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f3      	bne.n	8000c20 <cfg_NodeBatVarProp+0x40>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d017      	beq.n	8000c74 <cfg_NodeBatVarProp+0x94>
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d00e      	beq.n	8000c68 <cfg_NodeBatVarProp+0x88>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	dc10      	bgt.n	8000c70 <cfg_NodeBatVarProp+0x90>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <cfg_NodeBatVarProp+0x78>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d004      	beq.n	8000c60 <cfg_NodeBatVarProp+0x80>
 8000c56:	e00b      	b.n	8000c70 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2212      	movs	r2, #18
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	e00a      	b.n	8000c76 <cfg_NodeBatVarProp+0x96>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2212      	movs	r2, #18
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	e006      	b.n	8000c76 <cfg_NodeBatVarProp+0x96>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2212      	movs	r2, #18
 8000c6c:	801a      	strh	r2, [r3, #0]
 8000c6e:	e002      	b.n	8000c76 <cfg_NodeBatVarProp+0x96>
		default: return CFG_ERROR_VARID;
 8000c70:	2302      	movs	r3, #2
 8000c72:	e001      	b.n	8000c78 <cfg_NodeBatVarProp+0x98>
	}
	return CFG_ERROR_NONE;
 8000c74:	bf00      	nop
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	080096c0 	.word	0x080096c0
 8000c88:	080096c8 	.word	0x080096c8
 8000c8c:	080096dc 	.word	0x080096dc

08000c90 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d020      	beq.n	8000ce4 <cfg_NodeBatVarGet+0x54>
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d014      	beq.n	8000cd2 <cfg_NodeBatVarGet+0x42>
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	dc19      	bgt.n	8000ce0 <cfg_NodeBatVarGet+0x50>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <cfg_NodeBatVarGet+0x26>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d007      	beq.n	8000cc4 <cfg_NodeBatVarGet+0x34>
 8000cb4:	e014      	b.n	8000ce0 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <cfg_NodeBatVarGet+0x64>)
 8000cb8:	89db      	ldrh	r3, [r3, #14]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e010      	b.n	8000ce6 <cfg_NodeBatVarGet+0x56>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <cfg_NodeBatVarGet+0x64>)
 8000cc6:	8a1b      	ldrh	r3, [r3, #16]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e009      	b.n	8000ce6 <cfg_NodeBatVarGet+0x56>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <cfg_NodeBatVarGet+0x64>)
 8000cd4:	7c9b      	ldrb	r3, [r3, #18]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e002      	b.n	8000ce6 <cfg_NodeBatVarGet+0x56>
		default: return CFG_ERROR_VARID;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e001      	b.n	8000ce8 <cfg_NodeBatVarGet+0x58>
	}
	return CFG_ERROR_NONE;
 8000ce4:	bf00      	nop
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20000174 	.word	0x20000174

08000cf8 <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00a      	beq.n	8000d20 <cfg_NodeBatVarSet+0x28>
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d009      	beq.n	8000d24 <cfg_NodeBatVarSet+0x2c>
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	dc03      	bgt.n	8000d1c <cfg_NodeBatVarSet+0x24>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d007      	beq.n	8000d28 <cfg_NodeBatVarSet+0x30>
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d007      	beq.n	8000d2c <cfg_NodeBatVarSet+0x34>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e007      	b.n	8000d30 <cfg_NodeBatVarSet+0x38>
	}
	return CFG_ERROR_NONE;
 8000d20:	bf00      	nop
 8000d22:	e004      	b.n	8000d2e <cfg_NodeBatVarSet+0x36>
		case BAT_CHG_PERC:			break;
 8000d24:	bf00      	nop
 8000d26:	e002      	b.n	8000d2e <cfg_NodeBatVarSet+0x36>
		case BAT_VOLTAGE:			break;
 8000d28:	bf00      	nop
 8000d2a:	e000      	b.n	8000d2e <cfg_NodeBatVarSet+0x36>
		case BAT_FILTERED_VOLTAGE:	break;
 8000d2c:	bf00      	nop
	return CFG_ERROR_NONE;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <cfg_GetNodeName>:
	{ NODE_AUTOPILOT, NODE_MAIN, AUTOPILOT_VAR_NUM, cfg_NodeApVarGet, cfg_NodeApVarSet, cfg_NodeApVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	f242 72dc 	movw	r2, #10204	; 0x27dc
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	dc38      	bgt.n	8000dc4 <cfg_GetNodeName+0x88>
 8000d52:	f242 72d9 	movw	r2, #10201	; 0x27d9
 8000d56:	4293      	cmp	r3, r2
 8000d58:	da0c      	bge.n	8000d74 <cfg_GetNodeName+0x38>
 8000d5a:	2b67      	cmp	r3, #103	; 0x67
 8000d5c:	d02f      	beq.n	8000dbe <cfg_GetNodeName+0x82>
 8000d5e:	2b67      	cmp	r3, #103	; 0x67
 8000d60:	dc30      	bgt.n	8000dc4 <cfg_GetNodeName+0x88>
 8000d62:	2b66      	cmp	r3, #102	; 0x66
 8000d64:	d01c      	beq.n	8000da0 <cfg_GetNodeName+0x64>
 8000d66:	2b66      	cmp	r3, #102	; 0x66
 8000d68:	dc2c      	bgt.n	8000dc4 <cfg_GetNodeName+0x88>
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d012      	beq.n	8000d94 <cfg_GetNodeName+0x58>
 8000d6e:	2b65      	cmp	r3, #101	; 0x65
 8000d70:	d013      	beq.n	8000d9a <cfg_GetNodeName+0x5e>
		case NODE_SERVO    	: str = "Servo"; break;
		case NODE_MOTOR    	: str = "Motor"; break;
		case NODE_RC    	: str = "RC"; break;
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		default:break;
 8000d72:	e027      	b.n	8000dc4 <cfg_GetNodeName+0x88>
	switch( nodeid )
 8000d74:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 8000d78:	3b19      	subs	r3, #25
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d822      	bhi.n	8000dc4 <cfg_GetNodeName+0x88>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <cfg_GetNodeName+0x48>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000da7 	.word	0x08000da7
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000db3 	.word	0x08000db3
 8000d90:	08000db9 	.word	0x08000db9
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <cfg_GetNodeName+0xc0>)
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	e015      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_FW		: str = "Firmware"; break;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <cfg_GetNodeName+0xc4>)
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	e012      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <cfg_GetNodeName+0xc8>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00f      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_SERVO    	: str = "Servo"; break;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <cfg_GetNodeName+0xcc>)
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	e00c      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_MOTOR    	: str = "Motor"; break;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <cfg_GetNodeName+0xd0>)
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e009      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_RC    	: str = "RC"; break;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <cfg_GetNodeName+0xd4>)
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e006      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_BAT    	: str = "Battery"; break;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <cfg_GetNodeName+0xd8>)
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e003      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <cfg_GetNodeName+0xdc>)
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	e000      	b.n	8000dc6 <cfg_GetNodeName+0x8a>
		default:break;
 8000dc4:	bf00      	nop
	}
	if( name )
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00f      	beq.n	8000dec <cfg_GetNodeName+0xb0>
	{
		while( *str ){
 8000dcc:	e007      	b.n	8000dde <cfg_GetNodeName+0xa2>
			*name++ = *str++;
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	1c53      	adds	r3, r2, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	1c59      	adds	r1, r3, #1
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	701a      	strb	r2, [r3, #0]
		while( *str ){
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f3      	bne.n	8000dce <cfg_GetNodeName+0x92>
		}
		*name = 0;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	080096e8 	.word	0x080096e8
 8000e00:	080096f4 	.word	0x080096f4
 8000e04:	08009700 	.word	0x08009700
 8000e08:	08009714 	.word	0x08009714
 8000e0c:	0800971c 	.word	0x0800971c
 8000e10:	08009724 	.word	0x08009724
 8000e14:	08009728 	.word	0x08009728
 8000e18:	08009730 	.word	0x08009730

08000e1c <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <cfg_GetNode+0x58>)
 8000e28:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	817b      	strh	r3, [r7, #10]
 8000e2e:	e005      	b.n	8000e3c <cfg_GetNode+0x20>
 8000e30:	897b      	ldrh	r3, [r7, #10]
 8000e32:	3301      	adds	r3, #1
 8000e34:	817b      	strh	r3, [r7, #10]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3314      	adds	r3, #20
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <cfg_GetNode+0x5c>)
 8000e3e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	897a      	ldrh	r2, [r7, #10]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d204      	bcs.n	8000e54 <cfg_GetNode+0x38>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d1ed      	bne.n	8000e30 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <cfg_GetNode+0x5c>)
 8000e56:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	897a      	ldrh	r2, [r7, #10]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d001      	beq.n	8000e66 <cfg_GetNode+0x4a>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	e000      	b.n	8000e68 <cfg_GetNode+0x4c>
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000030 	.word	0x20000030
 8000e78:	200001a4 	.word	0x200001a4

08000e7c <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 8000e8a:	89fb      	ldrh	r3, [r7, #14]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <cfg_NodeFwVarProp+0x70>)
 8000e92:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2214      	movs	r2, #20
 8000e98:	801a      	strh	r2, [r3, #0]
 8000e9a:	e00d      	b.n	8000eb8 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d105      	bne.n	8000eae <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <cfg_NodeFwVarProp+0x74>)
 8000ea4:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	801a      	strh	r2, [r3, #0]
 8000eac:	e004      	b.n	8000eb8 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <cfg_NodeFwVarProp+0x78>)
 8000eb0:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2215      	movs	r2, #21
 8000eb6:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00f      	beq.n	8000ede <cfg_NodeFwVarProp+0x62>
 8000ebe:	e007      	b.n	8000ed0 <cfg_NodeFwVarProp+0x54>
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	1c53      	adds	r3, r2, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f3      	bne.n	8000ec0 <cfg_NodeFwVarProp+0x44>
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	0800973c 	.word	0x0800973c
 8000ef0:	08009744 	.word	0x08009744
 8000ef4:	0800975c 	.word	0x0800975c

08000ef8 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d103      	bne.n	8000f12 <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <cfg_NodeFwVarGet+0x40>)
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e00a      	b.n	8000f28 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d103      	bne.n	8000f20 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	e003      	b.n	8000f28 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f04f 32ff 	mov.w	r2, #4294967295
 8000f26:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	3f666666 	.word	0x3f666666

08000f3c <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d106      	bne.n	8000f5c <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d012      	beq.n	8000f7c <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 8000f56:	f001 f919 	bl	800218c <cfg_ClearFwBuf>
 8000f5a:	e00f      	b.n	8000f7c <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f60:	d805      	bhi.n	8000f6e <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 f928 	bl	80021bc <cfg_WriteFwData>
 8000f6c:	e006      	b.n	8000f7c <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	2b31      	cmp	r3, #49	; 0x31
 8000f72:	d103      	bne.n	8000f7c <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <cfg_NodeFwVarSet+0x4c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
	}
	return CFG_ERROR_NONE;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001a4 	.word	0x200001a4

08000f8c <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d817      	bhi.n	8000fd0 <cfg_NodeMainVarProp+0x44>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <cfg_NodeMainVarProp+0x1c>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	08000fbf 	.word	0x08000fbf
 8000fb0:	08000fc5 	.word	0x08000fc5
 8000fb4:	08000fcb 	.word	0x08000fcb
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8000fb8:	4b25      	ldr	r3, [pc, #148]	; (8001050 <cfg_NodeMainVarProp+0xc4>)
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <cfg_NodeMainVarProp+0xc8>)
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e007      	b.n	8000fd4 <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <cfg_NodeMainVarProp+0xcc>)
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e004      	b.n	8000fd4 <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <cfg_NodeMainVarProp+0xd0>)
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e001      	b.n	8000fd4 <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e037      	b.n	8001044 <cfg_NodeMainVarProp+0xb8>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00f      	beq.n	8000ffa <cfg_NodeMainVarProp+0x6e>
 8000fda:	e007      	b.n	8000fec <cfg_NodeMainVarProp+0x60>
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	1c53      	adds	r3, r2, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1c59      	adds	r1, r3, #1
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f3      	bne.n	8000fdc <cfg_NodeMainVarProp+0x50>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01f      	beq.n	8001040 <cfg_NodeMainVarProp+0xb4>
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d81a      	bhi.n	800103c <cfg_NodeMainVarProp+0xb0>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <cfg_NodeMainVarProp+0x80>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	0800101d 	.word	0x0800101d
 8001010:	08001025 	.word	0x08001025
 8001014:	0800102d 	.word	0x0800102d
 8001018:	08001035 	.word	0x08001035
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2222      	movs	r2, #34	; 0x22
 8001020:	801a      	strh	r2, [r3, #0]
 8001022:	e00e      	b.n	8001042 <cfg_NodeMainVarProp+0xb6>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2217      	movs	r2, #23
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	e00a      	b.n	8001042 <cfg_NodeMainVarProp+0xb6>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	e006      	b.n	8001042 <cfg_NodeMainVarProp+0xb6>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	801a      	strh	r2, [r3, #0]
 800103a:	e002      	b.n	8001042 <cfg_NodeMainVarProp+0xb6>
		default: return CFG_ERROR_VARID;
 800103c:	2302      	movs	r3, #2
 800103e:	e001      	b.n	8001044 <cfg_NodeMainVarProp+0xb8>
	}
	return CFG_ERROR_NONE;
 8001040:	bf00      	nop
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	08009764 	.word	0x08009764
 8001054:	08009770 	.word	0x08009770
 8001058:	08009780 	.word	0x08009780
 800105c:	08009790 	.word	0x08009790

08001060 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d026      	beq.n	80010c0 <cfg_NodeMainVarGet+0x60>
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d821      	bhi.n	80010bc <cfg_NodeMainVarGet+0x5c>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <cfg_NodeMainVarGet+0x20>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	08001091 	.word	0x08001091
 8001084:	080010a1 	.word	0x080010a1
 8001088:	080010ad 	.word	0x080010ad
 800108c:	080010b5 	.word	0x080010b5
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <cfg_NodeMainVarGet+0x6c>)
 8001092:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8001096:	b29b      	uxth	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e010      	b.n	80010c2 <cfg_NodeMainVarGet+0x62>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 80010a0:	f004 f9a2 	bl	80053e8 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e00a      	b.n	80010c2 <cfg_NodeMainVarGet+0x62>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e006      	b.n	80010c2 <cfg_NodeMainVarGet+0x62>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e002      	b.n	80010c2 <cfg_NodeMainVarGet+0x62>
		default: return CFG_ERROR_VARID;
 80010bc:	2302      	movs	r3, #2
 80010be:	e001      	b.n	80010c4 <cfg_NodeMainVarGet+0x64>
	}
	return CFG_ERROR_NONE;
 80010c0:	bf00      	nop
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200001a4 	.word	0x200001a4

080010d0 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d025      	beq.n	800112e <cfg_NodeMainVarSet+0x5e>
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d820      	bhi.n	800112a <cfg_NodeMainVarSet+0x5a>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <cfg_NodeMainVarSet+0x20>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001101 	.word	0x08001101
 80010f4:	08001133 	.word	0x08001133
 80010f8:	0800110d 	.word	0x0800110d
 80010fc:	0800111b 	.word	0x0800111b
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <cfg_NodeMainVarSet+0x78>)
 8001106:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
 800110a:	e017      	b.n	800113c <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d010      	beq.n	8001136 <cfg_NodeMainVarSet+0x66>
 8001114:	f000 fe64 	bl	8001de0 <cfg_SaveSettings>
 8001118:	e00d      	b.n	8001136 <cfg_NodeMainVarSet+0x66>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00b      	beq.n	800113a <cfg_NodeMainVarSet+0x6a>
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <cfg_NodeMainVarSet+0x7c>)
 8001124:	2201      	movs	r2, #1
 8001126:	705a      	strb	r2, [r3, #1]
 8001128:	e007      	b.n	800113a <cfg_NodeMainVarSet+0x6a>
		default: return CFG_ERROR_VARID;
 800112a:	2302      	movs	r3, #2
 800112c:	e007      	b.n	800113e <cfg_NodeMainVarSet+0x6e>
	}
	return CFG_ERROR_NONE;
 800112e:	bf00      	nop
 8001130:	e004      	b.n	800113c <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
 8001132:	bf00      	nop
 8001134:	e002      	b.n	800113c <cfg_NodeMainVarSet+0x6c>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001136:	bf00      	nop
 8001138:	e000      	b.n	800113c <cfg_NodeMainVarSet+0x6c>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 800113a:	bf00      	nop
	return CFG_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001a4 	.word	0x200001a4
 800114c:	20000a6c 	.word	0x20000a6c

08001150 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e023      	b.n	80011a6 <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 800115e:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <cfg_Timer+0x68>)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001166:	fb01 f303 	mul.w	r3, r1, r3
 800116a:	4413      	add	r3, r2
 800116c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d014      	beq.n	80011a0 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <cfg_Timer+0x68>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <cfg_Timer+0x68>)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001194:	fb00 f303 	mul.w	r3, r0, r3
 8001198:	440b      	add	r3, r1
 800119a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800119e:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0d8      	beq.n	800115e <cfg_Timer+0xe>
		}
	}

	return;
 80011ac:	bf00      	nop
}
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	200001a4 	.word	0x200001a4

080011bc <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <cfg_InitTask+0xb8>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <cfg_InitTask+0xb8>)
 80011cc:	2208      	movs	r2, #8
 80011ce:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	e040      	b.n	800125a <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 80011d8:	4a26      	ldr	r2, [pc, #152]	; (8001274 <cfg_InitTask+0xb8>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <cfg_InitTask+0xb8>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	3302      	adds	r3, #2
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <cfg_InitTask+0xb8>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800120a:	fb01 f303 	mul.w	r3, r1, r3
 800120e:	4413      	add	r3, r2
 8001210:	3304      	adds	r3, #4
 8001212:	2200      	movs	r2, #0
 8001214:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <cfg_InitTask+0xb8>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800121e:	fb01 f303 	mul.w	r3, r1, r3
 8001222:	4413      	add	r3, r2
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <cfg_InitTask+0xb8>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	4413      	add	r3, r2
 8001236:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 800123e:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <cfg_InitTask+0xb8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0bb      	beq.n	80011d8 <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <cfg_InitTask+0xb8>)
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <cfg_InitTask+0xbc>)
 8001264:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	cfg_LoadSettings();
 8001268:	f000 fee2 	bl	8002030 <cfg_LoadSettings>

	return;
 800126c:	bf00      	nop
}
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001a4 	.word	0x200001a4
 8001278:	080025d9 	.word	0x080025d9

0800127c <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b099      	sub	sp, #100	; 0x64
 8001280:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80012aa:	2300      	movs	r3, #0
 80012ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012ae:	e3f3      	b.n	8001a98 <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 80012b0:	4ab8      	ldr	r2, [pc, #736]	; (8001594 <cfg_Task+0x318>)
 80012b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	4413      	add	r3, r2
 80012be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d069      	beq.n	800139c <cfg_Task+0x120>
 80012c8:	4ab2      	ldr	r2, [pc, #712]	; (8001594 <cfg_Task+0x318>)
 80012ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012cc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80012d0:	fb01 f303 	mul.w	r3, r1, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d15d      	bne.n	800139c <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 80012e0:	4aac      	ldr	r2, [pc, #688]	; (8001594 <cfg_Task+0x318>)
 80012e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80012e8:	fb01 f303 	mul.w	r3, r1, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012f2:	220a      	movs	r2, #10
 80012f4:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 80012f6:	4aa7      	ldr	r2, [pc, #668]	; (8001594 <cfg_Task+0x318>)
 80012f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	4413      	add	r3, r2
 8001304:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d91c      	bls.n	8001348 <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 800130e:	4aa1      	ldr	r2, [pc, #644]	; (8001594 <cfg_Task+0x318>)
 8001310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001312:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001324:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001328:	fb01 f202 	mul.w	r2, r1, r2
 800132c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001330:	4998      	ldr	r1, [pc, #608]	; (8001594 <cfg_Task+0x318>)
 8001332:	440a      	add	r2, r1
 8001334:	210a      	movs	r1, #10
 8001336:	4610      	mov	r0, r2
 8001338:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 800133a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133c:	b29b      	uxth	r3, r3
 800133e:	210a      	movs	r1, #10
 8001340:	4618      	mov	r0, r3
 8001342:	f001 f89f 	bl	8002484 <cfg_RemTxData>
 8001346:	e029      	b.n	800139c <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8001348:	4a92      	ldr	r2, [pc, #584]	; (8001594 <cfg_Task+0x318>)
 800134a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800134c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	4413      	add	r3, r2
 8001356:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800135e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001362:	fb01 f202 	mul.w	r2, r1, r2
 8001366:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800136a:	498a      	ldr	r1, [pc, #552]	; (8001594 <cfg_Task+0x318>)
 800136c:	1850      	adds	r0, r2, r1
 800136e:	4989      	ldr	r1, [pc, #548]	; (8001594 <cfg_Task+0x318>)
 8001370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001372:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8001376:	fb04 f202 	mul.w	r2, r4, r2
 800137a:	440a      	add	r2, r1
 800137c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4611      	mov	r1, r2
 8001384:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8001386:	4a83      	ldr	r2, [pc, #524]	; (8001594 <cfg_Task+0x318>)
 8001388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800138a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 800139c:	4a7d      	ldr	r2, [pc, #500]	; (8001594 <cfg_Task+0x318>)
 800139e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 836e 	beq.w	8001a92 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 80013b6:	4a77      	ldr	r2, [pc, #476]	; (8001594 <cfg_Task+0x318>)
 80013b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	4971      	ldr	r1, [pc, #452]	; (8001594 <cfg_Task+0x318>)
 80013ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80013d4:	fb00 f303 	mul.w	r3, r0, r3
 80013d8:	440b      	add	r3, r1
 80013da:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80013de:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 80013e0:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 80013e4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 80013e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80013f0:	2202      	movs	r2, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 ff08 	bl	8002208 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 80013f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2202      	movs	r2, #2
 80013fe:	4966      	ldr	r1, [pc, #408]	; (8001598 <cfg_Task+0x31c>)
 8001400:	4618      	mov	r0, r3
 8001402:	f000 ff01 	bl	8002208 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8001406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001408:	b298      	uxth	r0, r3
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	f203 2315 	addw	r3, r3, #533	; 0x215
 8001418:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <cfg_Task+0x318>)
 800141a:	4413      	add	r3, r2
 800141c:	3304      	adds	r3, #4
 800141e:	2201      	movs	r2, #1
 8001420:	4619      	mov	r1, r3
 8001422:	f000 fef1 	bl	8002208 <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <cfg_Task+0x318>)
 8001428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800142e:	fb01 f303 	mul.w	r3, r1, r3
 8001432:	4413      	add	r3, r2
 8001434:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d107      	bne.n	8001450 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8001440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001442:	b29b      	uxth	r3, r3
 8001444:	2202      	movs	r2, #2
 8001446:	4955      	ldr	r1, [pc, #340]	; (800159c <cfg_Task+0x320>)
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fedd 	bl	8002208 <cfg_AddTxData>
 800144e:	e2db      	b.n	8001a08 <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8001450:	4a50      	ldr	r2, [pc, #320]	; (8001594 <cfg_Task+0x318>)
 8001452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001454:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	4413      	add	r3, r2
 800145e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	f040 809c 	bne.w	80015a4 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 800146c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	f203 2316 	addw	r3, r3, #534	; 0x216
 800147a:	4a46      	ldr	r2, [pc, #280]	; (8001594 <cfg_Task+0x318>)
 800147c:	4413      	add	r3, r2
 800147e:	3304      	adds	r3, #4
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <cfg_Task+0x318>)
 800148a:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800148e:	b29a      	uxth	r2, r3
 8001490:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001494:	429a      	cmp	r2, r3
 8001496:	d957      	bls.n	8001548 <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8001498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800149a:	b29b      	uxth	r3, r3
 800149c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80014a0:	2202      	movs	r2, #2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 feb0 	bl	8002208 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 80014a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014aa:	b298      	uxth	r0, r3
 80014ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4a39      	ldr	r2, [pc, #228]	; (80015a0 <cfg_Task+0x324>)
 80014bc:	4413      	add	r3, r2
 80014be:	2202      	movs	r2, #2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f000 fea1 	bl	8002208 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 80014c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c8:	b298      	uxth	r0, r3
 80014ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80014ce:	461a      	mov	r2, r3
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <cfg_Task+0x324>)
 80014da:	4413      	add	r3, r2
 80014dc:	3302      	adds	r3, #2
 80014de:	2202      	movs	r2, #2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f000 fe91 	bl	8002208 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 80014e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e8:	b298      	uxth	r0, r3
 80014ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80014ee:	461a      	mov	r2, r3
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <cfg_Task+0x324>)
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	2202      	movs	r2, #2
 8001500:	4619      	mov	r1, r3
 8001502:	f000 fe81 	bl	8002208 <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8001506:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800150a:	4619      	mov	r1, r3
 800150c:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <cfg_Task+0x324>)
 800150e:	460b      	mov	r3, r1
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	1d3a      	adds	r2, r7, #4
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc0c 	bl	8000d3c <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fe56 	bl	80001d8 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8001536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001538:	b29b      	uxth	r3, r3
 800153a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800153e:	1d39      	adds	r1, r7, #4
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fe61 	bl	8002208 <cfg_AddTxData>
 8001546:	e25f      	b.n	8001a08 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001548:	4a12      	ldr	r2, [pc, #72]	; (8001594 <cfg_Task+0x318>)
 800154a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001562:	b2d8      	uxtb	r0, r3
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <cfg_Task+0x318>)
 8001566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001568:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001576:	4602      	mov	r2, r0
 8001578:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 800157a:	2302      	movs	r3, #2
 800157c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001582:	b29b      	uxth	r3, r3
 8001584:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001588:	2201      	movs	r2, #1
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fe3c 	bl	8002208 <cfg_AddTxData>
 8001590:	e23a      	b.n	8001a08 <cfg_Task+0x78c>
 8001592:	bf00      	nop
 8001594:	200001a4 	.word	0x200001a4
 8001598:	200004c0 	.word	0x200004c0
 800159c:	200004c8 	.word	0x200004c8
 80015a0:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 80015a4:	4ab0      	ldr	r2, [pc, #704]	; (8001868 <cfg_Task+0x5ec>)
 80015a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	f203 2319 	addw	r3, r3, #537	; 0x219
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	f040 80a8 	bne.w	8001710 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 80015c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	f203 2316 	addw	r3, r3, #534	; 0x216
 80015ce:	4aa6      	ldr	r2, [pc, #664]	; (8001868 <cfg_Task+0x5ec>)
 80015d0:	4413      	add	r3, r2
 80015d2:	3304      	adds	r3, #4
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 80015dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015de:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80015ea:	4a9f      	ldr	r2, [pc, #636]	; (8001868 <cfg_Task+0x5ec>)
 80015ec:	4413      	add	r3, r2
 80015ee:	3304      	adds	r3, #4
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 80015f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc0d 	bl	8000e1c <cfg_GetNode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05e      	beq.n	80016c6 <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8001608:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fc05 	bl	8000e1c <cfg_GetNode>
 8001612:	4603      	mov	r3, r0
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800161a:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800161e:	1d39      	adds	r1, r7, #4
 8001620:	4798      	blx	r3
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d129      	bne.n	800167c <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8001628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162a:	b29b      	uxth	r3, r3
 800162c:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8001630:	2202      	movs	r2, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fde8 	bl	8002208 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8001638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163a:	b29b      	uxth	r3, r3
 800163c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001640:	2202      	movs	r2, #2
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fde0 	bl	8002208 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 8001648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800164a:	b29b      	uxth	r3, r3
 800164c:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8001650:	2202      	movs	r2, #2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fdd8 	bl	8002208 <cfg_AddTxData>
						name_len = strlen(name) + 1;
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fdbc 	bl	80001d8 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3301      	adds	r3, #1
 8001666:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 800166a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166c:	b29b      	uxth	r3, r3
 800166e:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001672:	1d39      	adds	r1, r7, #4
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fdc7 	bl	8002208 <cfg_AddTxData>
 800167a:	e1c5      	b.n	8001a08 <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 800167c:	4a7a      	ldr	r2, [pc, #488]	; (8001868 <cfg_Task+0x5ec>)
 800167e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001680:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001696:	b2d8      	uxtb	r0, r3
 8001698:	4a73      	ldr	r2, [pc, #460]	; (8001868 <cfg_Task+0x5ec>)
 800169a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80016aa:	4602      	mov	r2, r0
 80016ac:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 80016ae:	2304      	movs	r3, #4
 80016b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80016b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80016bc:	2201      	movs	r2, #1
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fda2 	bl	8002208 <cfg_AddTxData>
 80016c4:	e1a0      	b.n	8001a08 <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 80016c6:	4a68      	ldr	r2, [pc, #416]	; (8001868 <cfg_Task+0x5ec>)
 80016c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ca:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016e0:	b2d8      	uxtb	r0, r3
 80016e2:	4a61      	ldr	r2, [pc, #388]	; (8001868 <cfg_Task+0x5ec>)
 80016e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80016f4:	4602      	mov	r2, r0
 80016f6:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80016fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001700:	b29b      	uxth	r3, r3
 8001702:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001706:	2201      	movs	r2, #1
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fd7d 	bl	8002208 <cfg_AddTxData>
 800170e:	e17b      	b.n	8001a08 <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8001710:	4a55      	ldr	r2, [pc, #340]	; (8001868 <cfg_Task+0x5ec>)
 8001712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001714:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b10      	cmp	r3, #16
 8001728:	f040 80a0 	bne.w	800186c <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 800172c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	f203 2316 	addw	r3, r3, #534	; 0x216
 800173a:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <cfg_Task+0x5ec>)
 800173c:	4413      	add	r3, r2
 800173e:	3304      	adds	r3, #4
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8001748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001756:	4a44      	ldr	r2, [pc, #272]	; (8001868 <cfg_Task+0x5ec>)
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8001764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001766:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8001772:	4a3d      	ldr	r2, [pc, #244]	; (8001868 <cfg_Task+0x5ec>)
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8001780:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fb49 	bl	8000e1c <cfg_GetNode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d046      	beq.n	800181e <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8001790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001792:	b29b      	uxth	r3, r3
 8001794:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8001798:	2202      	movs	r2, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fd34 	bl	8002208 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80017a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017a8:	2202      	movs	r2, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fd2c 	bl	8002208 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80017b6:	e021      	b.n	80017fc <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 80017b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb2d 	bl	8000e1c <cfg_GetNode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80017ca:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80017ce:	440a      	add	r2, r1
 80017d0:	b292      	uxth	r2, r2
 80017d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80017d6:	4610      	mov	r0, r2
 80017d8:	4798      	blx	r3
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d114      	bne.n	800180a <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 80017e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80017e8:	2204      	movs	r2, #4
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fd0c 	bl	8002208 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80017f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017f4:	3301      	adds	r3, #1
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80017fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001800:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001804:	429a      	cmp	r2, r3
 8001806:	d3d7      	bcc.n	80017b8 <cfg_Task+0x53c>
 8001808:	e000      	b.n	800180c <cfg_Task+0x590>
						}
						else{
							break;
 800180a:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800180c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180e:	b298      	uxth	r0, r3
 8001810:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8001814:	2302      	movs	r3, #2
 8001816:	2109      	movs	r1, #9
 8001818:	f000 fd48 	bl	80022ac <cfg_IntertTxData>
 800181c:	e0f4      	b.n	8001a08 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <cfg_Task+0x5ec>)
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001838:	b2d8      	uxtb	r0, r3
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <cfg_Task+0x5ec>)
 800183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800184c:	4602      	mov	r2, r0
 800184e:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8001850:	2303      	movs	r3, #3
 8001852:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001858:	b29b      	uxth	r3, r3
 800185a:	f107 0157 	add.w	r1, r7, #87	; 0x57
 800185e:	2201      	movs	r2, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fcd1 	bl	8002208 <cfg_AddTxData>
 8001866:	e0cf      	b.n	8001a08 <cfg_Task+0x78c>
 8001868:	200001a4 	.word	0x200001a4
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 800186c:	4a8e      	ldr	r2, [pc, #568]	; (8001aa8 <cfg_Task+0x82c>)
 800186e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001870:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	f203 2319 	addw	r3, r3, #537	; 0x219
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b11      	cmp	r3, #17
 8001884:	f040 80c0 	bne.w	8001a08 <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8001888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001896:	4a84      	ldr	r2, [pc, #528]	; (8001aa8 <cfg_Task+0x82c>)
 8001898:	4413      	add	r3, r2
 800189a:	3304      	adds	r3, #4
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 80018a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80018b2:	4a7d      	ldr	r2, [pc, #500]	; (8001aa8 <cfg_Task+0x82c>)
 80018b4:	4413      	add	r3, r2
 80018b6:	3304      	adds	r3, #4
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 80018c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	f203 231a 	addw	r3, r3, #538	; 0x21a
 80018ce:	4a76      	ldr	r2, [pc, #472]	; (8001aa8 <cfg_Task+0x82c>)
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 80018dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa9b 	bl	8000e1c <cfg_GetNode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d069      	beq.n	80019c0 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 80018ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f107 0152 	add.w	r1, r7, #82	; 0x52
 80018f4:	2202      	movs	r2, #2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fc86 	bl	8002208 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80018fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001904:	2202      	movs	r2, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fc7e 	bl	8002208 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800190c:	2300      	movs	r3, #0
 800190e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001912:	e046      	b.n	80019a2 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 8001914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001918:	3303      	adds	r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800191e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001922:	fb01 f202 	mul.w	r2, r1, r2
 8001926:	4413      	add	r3, r2
 8001928:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800192c:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <cfg_Task+0x82c>)
 800192e:	4413      	add	r3, r2
 8001930:	3304      	adds	r3, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8001936:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa6e 	bl	8000e1c <cfg_GetNode>
 8001940:	4603      	mov	r3, r0
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001948:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800194c:	440a      	add	r2, r1
 800194e:	b292      	uxth	r2, r2
 8001950:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001954:	4610      	mov	r0, r2
 8001956:	4798      	blx	r3
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d127      	bne.n	80019ae <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 800195e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fa5a 	bl	8000e1c <cfg_GetNode>
 8001968:	4603      	mov	r3, r0
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001970:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001974:	440a      	add	r2, r1
 8001976:	b292      	uxth	r2, r2
 8001978:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800197c:	4610      	mov	r0, r2
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d113      	bne.n	80019ae <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8001986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001988:	b29b      	uxth	r3, r3
 800198a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800198e:	2204      	movs	r2, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fc39 	bl	8002208 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8001996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800199a:	3301      	adds	r3, #1
 800199c:	b29b      	uxth	r3, r3
 800199e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80019a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80019a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3b2      	bcc.n	8001914 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 80019ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b0:	b298      	uxth	r0, r3
 80019b2:	f107 0246 	add.w	r2, r7, #70	; 0x46
 80019b6:	2302      	movs	r3, #2
 80019b8:	2109      	movs	r1, #9
 80019ba:	f000 fc77 	bl	80022ac <cfg_IntertTxData>
 80019be:	e023      	b.n	8001a08 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 80019c0:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <cfg_Task+0x82c>)
 80019c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019da:	b2d8      	uxtb	r0, r3
 80019dc:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <cfg_Task+0x82c>)
 80019de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80019ee:	4602      	mov	r2, r0
 80019f0:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80019f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001a00:	2201      	movs	r2, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fc00 	bl	8002208 <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <cfg_Task+0x82c>)
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001a10:	fb01 f303 	mul.w	r3, r1, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 8001a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2104      	movs	r1, #4
 8001a32:	f000 fc3b 	bl	80022ac <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8001a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a38:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001a44:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <cfg_Task+0x82c>)
 8001a46:	441a      	add	r2, r3
 8001a48:	4917      	ldr	r1, [pc, #92]	; (8001aa8 <cfg_Task+0x82c>)
 8001a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001a50:	fb00 f303 	mul.w	r3, r0, r3
 8001a54:	440b      	add	r3, r1
 8001a56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f000 fdc7 	bl	80025f4 <crc16_calc>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a74:	2202      	movs	r2, #2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fbc6 	bl	8002208 <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <cfg_Task+0x82c>)
 8001a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a80:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	3301      	adds	r3, #1
 8001a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f43f ac08 	beq.w	80012b0 <cfg_Task+0x34>
		}
	}

	return;
 8001aa0:	bf00      	nop
}
 8001aa2:	3764      	adds	r7, #100	; 0x64
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	200001a4 	.word	0x200001a4

08001aac <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	80fb      	strh	r3, [r7, #6]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 8164 	bne.w	8001d8c <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	49b4      	ldr	r1, [pc, #720]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001aca:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001ace:	fb00 f202 	mul.w	r2, r0, r2
 8001ad2:	440a      	add	r2, r1
 8001ad4:	3204      	adds	r2, #4
 8001ad6:	8812      	ldrh	r2, [r2, #0]
 8001ad8:	b292      	uxth	r2, r2
 8001ada:	3201      	adds	r2, #1
 8001adc:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8001ade:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8001ae0:	b2c9      	uxtb	r1, r1
 8001ae2:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8001ae4:	49ad      	ldr	r1, [pc, #692]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001ae6:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001aea:	fb00 f202 	mul.w	r2, r0, r2
 8001aee:	440a      	add	r2, r1
 8001af0:	3204      	adds	r2, #4
 8001af2:	4621      	mov	r1, r4
 8001af4:	8011      	strh	r1, [r2, #0]
 8001af6:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8001af8:	4aa8      	ldr	r2, [pc, #672]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001afa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	4403      	add	r3, r0
 8001b06:	3308      	adds	r3, #8
 8001b08:	797a      	ldrb	r2, [r7, #5]
 8001b0a:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4aa3      	ldr	r2, [pc, #652]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001b10:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d17b      	bne.n	8001c1a <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	4a9b      	ldr	r2, [pc, #620]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001b30:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4999      	ldr	r1, [pc, #612]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001b36:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001b3a:	fb00 f303 	mul.w	r3, r0, r3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3304      	adds	r3, #4
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b04      	subs	r3, #4
 8001b48:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f000 f927 	bl	8001da4 <cfg_ringBufRead16b>
 8001b56:	4603      	mov	r3, r0
 8001b58:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	3308      	adds	r3, #8
 8001b66:	4a8d      	ldr	r2, [pc, #564]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001b68:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	498b      	ldr	r1, [pc, #556]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001b6e:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001b72:	fb00 f303 	mul.w	r3, r0, r3
 8001b76:	440b      	add	r3, r1
 8001b78:	3304      	adds	r3, #4
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b02      	subs	r3, #2
 8001b80:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f000 f90b 	bl	8001da4 <cfg_ringBufRead16b>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	f040 80f9 	bne.w	8001d90 <cfg_RcvData+0x2e4>
 8001b9e:	4b7f      	ldr	r3, [pc, #508]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001ba0:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	893a      	ldrh	r2, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 80f1 	bne.w	8001d90 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001bb2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	b290      	uxth	r0, r2
 8001bcc:	4a73      	ldr	r2, [pc, #460]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001bce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	4602      	mov	r2, r0
 8001bdc:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 8001bde:	797b      	ldrb	r3, [r7, #5]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <cfg_RcvData+0x2f4>)
 8001be8:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 8001bea:	797b      	ldrb	r3, [r7, #5]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	3205      	adds	r2, #5
 8001bf2:	b290      	uxth	r0, r2
 8001bf4:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001bf6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3306      	adds	r3, #6
 8001c02:	4602      	mov	r2, r0
 8001c04:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4a64      	ldr	r2, [pc, #400]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001c0a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8001c18:	e0ba      	b.n	8001d90 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001c1e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f040 80af 	bne.w	8001d90 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <cfg_RcvData+0x2f4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	b291      	uxth	r1, r2
 8001c3a:	4a59      	ldr	r2, [pc, #356]	; (8001da0 <cfg_RcvData+0x2f4>)
 8001c3c:	8011      	strh	r1, [r2, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 80a8 	bne.w	8001d94 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001c48:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	3308      	adds	r3, #8
 8001c62:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001c64:	1898      	adds	r0, r3, r2
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001c6a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3302      	adds	r3, #2
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001c7e:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8001c82:	fb04 f303 	mul.w	r3, r4, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3306      	adds	r3, #6
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	23ff      	movs	r3, #255	; 0xff
 8001c90:	f000 fcda 	bl	8002648 <crc16_RingBuf>
 8001c94:	4603      	mov	r3, r0
 8001c96:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	4a3d      	ldr	r2, [pc, #244]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001ca6:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	493c      	ldr	r1, [pc, #240]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001cac:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001cb0:	fb00 f303 	mul.w	r3, r0, r3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f000 f86c 	bl	8001da4 <cfg_ringBufRead16b>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d15c      	bne.n	8001d90 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001cda:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d150      	bne.n	8001d90 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8001cee:	2300      	movs	r3, #0
 8001cf0:	81fb      	strh	r3, [r7, #14]
 8001cf2:	e028      	b.n	8001d46 <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8001cf4:	88f8      	ldrh	r0, [r7, #6]
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001cfa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3302      	adds	r3, #2
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	89fb      	ldrh	r3, [r7, #14]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8001d16:	4c21      	ldr	r4, [pc, #132]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001d18:	f44f 7547 	mov.w	r5, #796	; 0x31c
 8001d1c:	fb05 f000 	mul.w	r0, r5, r0
 8001d20:	4420      	add	r0, r4
 8001d22:	4401      	add	r1, r0
 8001d24:	3108      	adds	r1, #8
 8001d26:	7809      	ldrb	r1, [r1, #0]
 8001d28:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 8001d2a:	491c      	ldr	r1, [pc, #112]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001d2c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001d30:	fb00 f202 	mul.w	r2, r0, r2
 8001d34:	440a      	add	r2, r1
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	3301      	adds	r3, #1
 8001d44:	81fb      	strh	r3, [r7, #14]
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001d4a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3306      	adds	r3, #6
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	89fa      	ldrh	r2, [r7, #14]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3c9      	bcc.n	8001cf4 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001d64:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3306      	adds	r3, #6
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4610      	mov	r0, r2
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <cfg_RcvData+0x2f0>)
 8001d7a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001d88:	6018      	str	r0, [r3, #0]
	return;
 8001d8a:	e001      	b.n	8001d90 <cfg_RcvData+0x2e4>
		return;
 8001d8c:	bf00      	nop
 8001d8e:	e002      	b.n	8001d96 <cfg_RcvData+0x2ea>
	return;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <cfg_RcvData+0x2ea>
			return;
 8001d94:	bf00      	nop
}
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9c:	200001a4 	.word	0x200001a4
 8001da0:	200004dc 	.word	0x200004dc

08001da4 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	440b      	add	r3, r1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8001de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de4:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001df2:	f102 020a 	add.w	r2, r2, #10
 8001df6:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001dfe:	f102 020e 	add.w	r2, r2, #14
 8001e02:	8013      	strh	r3, [r2, #0]
 8001e04:	e079      	b.n	8001efa <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8001e06:	2300      	movs	r3, #0
 8001e08:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e0c:	f102 020c 	add.w	r2, r2, #12
 8001e10:	8013      	strh	r3, [r2, #0]
 8001e12:	e053      	b.n	8001ebc <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8001e14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e18:	f103 030e 	add.w	r3, r3, #14
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	4981      	ldr	r1, [pc, #516]	; (8002024 <cfg_SaveSettings+0x244>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3310      	adds	r3, #16
 8001e2c:	681e      	ldr	r6, [r3, #0]
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	3b0e      	subs	r3, #14
 8001e34:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e38:	f102 020c 	add.w	r2, r2, #12
 8001e3c:	8810      	ldrh	r0, [r2, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2100      	movs	r1, #0
 8001e42:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d028      	beq.n	8001ea6 <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 8001e54:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e58:	f103 030e 	add.w	r3, r3, #14
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	4971      	ldr	r1, [pc, #452]	; (8002024 <cfg_SaveSettings+0x244>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e72:	f103 030a 	add.w	r3, r3, #10
 8001e76:	8819      	ldrh	r1, [r3, #0]
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	3b0c      	subs	r3, #12
 8001e7e:	0089      	lsls	r1, r1, #2
 8001e80:	4419      	add	r1, r3
 8001e82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e86:	f103 030c 	add.w	r3, r3, #12
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4790      	blx	r2
				var_cnt += 1;
 8001e90:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e94:	f103 030a 	add.w	r3, r3, #10
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001ea0:	f102 020a 	add.w	r2, r2, #10
 8001ea4:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8001ea6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001eaa:	f103 030c 	add.w	r3, r3, #12
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001eb6:	f102 020c 	add.w	r2, r2, #12
 8001eba:	8013      	strh	r3, [r2, #0]
 8001ebc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ec0:	f103 030e 	add.w	r3, r3, #14
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4957      	ldr	r1, [pc, #348]	; (8002024 <cfg_SaveSettings+0x244>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001eda:	f102 020c 	add.w	r2, r2, #12
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d397      	bcc.n	8001e14 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 8001ee4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ee8:	f103 030e 	add.w	r3, r3, #14
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001ef4:	f102 020e 	add.w	r2, r2, #14
 8001ef8:	8013      	strh	r3, [r2, #0]
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <cfg_SaveSettings+0x248>)
 8001efc:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f06:	f102 020e 	add.w	r2, r2, #14
 8001f0a:	8812      	ldrh	r2, [r2, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f4ff af7a 	bcc.w	8001e06 <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8001f12:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f16:	f103 030a 	add.w	r3, r3, #10
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d07a      	beq.n	8002016 <cfg_SaveSettings+0x236>
 8001f20:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f24:	f103 030a 	add.w	r3, r3, #10
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d871      	bhi.n	8002016 <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 8001f32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f36:	f103 030a 	add.w	r3, r3, #10
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	3b0c      	subs	r3, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 fbb7 	bl	80026b8 <crc32_calc>
 8001f4a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f4e:	f103 0304 	add.w	r3, r3, #4
 8001f52:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 8001f54:	f004 f8ba 	bl	80060cc <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 8001f58:	2102      	movs	r1, #2
 8001f5a:	2007      	movs	r0, #7
 8001f5c:	f004 fa28 	bl	80063b0 <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 8001f60:	4932      	ldr	r1, [pc, #200]	; (800202c <cfg_SaveSettings+0x24c>)
 8001f62:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f66:	f103 030a 	add.w	r3, r3, #10
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	469a      	mov	sl, r3
 8001f70:	4693      	mov	fp, r2
 8001f72:	4652      	mov	r2, sl
 8001f74:	465b      	mov	r3, fp
 8001f76:	2002      	movs	r0, #2
 8001f78:	f004 f854 	bl	8006024 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <cfg_SaveSettings+0x24c>)
 8001f7e:	1d19      	adds	r1, r3, #4
 8001f80:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f84:	f103 0304 	add.w	r3, r3, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	4691      	mov	r9, r2
 8001f90:	4642      	mov	r2, r8
 8001f92:	464b      	mov	r3, r9
 8001f94:	2002      	movs	r0, #2
 8001f96:	f004 f845 	bl	8006024 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001fa0:	f102 020e 	add.w	r2, r2, #14
 8001fa4:	8013      	strh	r3, [r2, #0]
 8001fa6:	e027      	b.n	8001ff8 <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 8001fa8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fac:	f103 030e 	add.w	r3, r3, #14
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <cfg_SaveSettings+0x24c>)
 8001fb8:	3308      	adds	r3, #8
 8001fba:	18d1      	adds	r1, r2, r3
 8001fbc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fc0:	f103 030e 	add.w	r3, r3, #14
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f107 0210 	add.w	r2, r7, #16
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	461c      	mov	r4, r3
 8001fd6:	4615      	mov	r5, r2
 8001fd8:	4622      	mov	r2, r4
 8001fda:	462b      	mov	r3, r5
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f004 f821 	bl	8006024 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8001fe2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fe6:	f103 030e 	add.w	r3, r3, #14
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001ff2:	f102 020e 	add.w	r2, r2, #14
 8001ff6:	8013      	strh	r3, [r2, #0]
 8001ff8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ffc:	f103 030e 	add.w	r3, r3, #14
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002006:	f103 030a 	add.w	r3, r3, #10
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3cb      	bcc.n	8001fa8 <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 8002010:	f004 f87e 	bl	8006110 <HAL_FLASH_Lock>

	}

	return;
 8002014:	bf00      	nop
 8002016:	bf00      	nop
}
 8002018:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002024:	20000030 	.word	0x20000030
 8002028:	200001a4 	.word	0x200001a4
 800202c:	08060000 	.word	0x08060000

08002030 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <cfg_LoadSettings+0x14c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <cfg_LoadSettings+0x14c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 808e 	beq.w	8002172 <cfg_LoadSettings+0x142>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800205c:	4293      	cmp	r3, r2
 800205e:	f200 8088 	bhi.w	8002172 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 8002062:	2300      	movs	r3, #0
 8002064:	82fb      	strh	r3, [r7, #22]
 8002066:	e029      	b.n	80020bc <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002068:	2300      	movs	r3, #0
 800206a:	82bb      	strh	r3, [r7, #20]
 800206c:	e017      	b.n	800209e <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 800206e:	8afa      	ldrh	r2, [r7, #22]
 8002070:	4943      	ldr	r1, [pc, #268]	; (8002180 <cfg_LoadSettings+0x150>)
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3310      	adds	r3, #16
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1dba      	adds	r2, r7, #6
 8002082:	8ab8      	ldrh	r0, [r7, #20]
 8002084:	2100      	movs	r1, #0
 8002086:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <cfg_LoadSettings+0x68>
					var_cnt += 1;
 8002092:	8a7b      	ldrh	r3, [r7, #18]
 8002094:	3301      	adds	r3, #1
 8002096:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002098:	8abb      	ldrh	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	82bb      	strh	r3, [r7, #20]
 800209e:	8afa      	ldrh	r2, [r7, #22]
 80020a0:	4937      	ldr	r1, [pc, #220]	; (8002180 <cfg_LoadSettings+0x150>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3304      	adds	r3, #4
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	8aba      	ldrh	r2, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3db      	bcc.n	800206e <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 80020b6:	8afb      	ldrh	r3, [r7, #22]
 80020b8:	3301      	adds	r3, #1
 80020ba:	82fb      	strh	r3, [r7, #22]
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <cfg_LoadSettings+0x154>)
 80020be:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	8afa      	ldrh	r2, [r7, #22]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3ce      	bcc.n	8002068 <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 80020ca:	8a7b      	ldrh	r3, [r7, #18]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d14f      	bne.n	8002172 <cfg_LoadSettings+0x142>
 80020d2:	8a7b      	ldrh	r3, [r7, #18]
 80020d4:	461a      	mov	r2, r3
 80020d6:	492c      	ldr	r1, [pc, #176]	; (8002188 <cfg_LoadSettings+0x158>)
 80020d8:	2000      	movs	r0, #0
 80020da:	f000 faed 	bl	80026b8 <crc32_calc>
 80020de:	4602      	mov	r2, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d145      	bne.n	8002172 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 80020e6:	2300      	movs	r3, #0
 80020e8:	82fb      	strh	r3, [r7, #22]
 80020ea:	e03a      	b.n	8002162 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80020ec:	2300      	movs	r3, #0
 80020ee:	82bb      	strh	r3, [r7, #20]
 80020f0:	e028      	b.n	8002144 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80020f2:	8afa      	ldrh	r2, [r7, #22]
 80020f4:	4922      	ldr	r1, [pc, #136]	; (8002180 <cfg_LoadSettings+0x150>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3310      	adds	r3, #16
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1dba      	adds	r2, r7, #6
 8002106:	8ab8      	ldrh	r0, [r7, #20]
 8002108:	2100      	movs	r1, #0
 800210a:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d013      	beq.n	800213e <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 8002116:	8afa      	ldrh	r2, [r7, #22]
 8002118:	4919      	ldr	r1, [pc, #100]	; (8002180 <cfg_LoadSettings+0x150>)
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	330c      	adds	r3, #12
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	8a3a      	ldrh	r2, [r7, #16]
 800212a:	3202      	adds	r2, #2
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	4913      	ldr	r1, [pc, #76]	; (800217c <cfg_LoadSettings+0x14c>)
 8002130:	4411      	add	r1, r2
 8002132:	8aba      	ldrh	r2, [r7, #20]
 8002134:	4610      	mov	r0, r2
 8002136:	4798      	blx	r3
						load_var_cnt += 1;
 8002138:	8a3b      	ldrh	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800213e:	8abb      	ldrh	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	82bb      	strh	r3, [r7, #20]
 8002144:	8afa      	ldrh	r2, [r7, #22]
 8002146:	490e      	ldr	r1, [pc, #56]	; (8002180 <cfg_LoadSettings+0x150>)
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3304      	adds	r3, #4
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	8aba      	ldrh	r2, [r7, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	d3ca      	bcc.n	80020f2 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 800215c:	8afb      	ldrh	r3, [r7, #22]
 800215e:	3301      	adds	r3, #1
 8002160:	82fb      	strh	r3, [r7, #22]
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <cfg_LoadSettings+0x154>)
 8002164:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002168:	b29b      	uxth	r3, r3
 800216a:	8afa      	ldrh	r2, [r7, #22]
 800216c:	429a      	cmp	r2, r3
 800216e:	d3bd      	bcc.n	80020ec <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 8002170:	bf00      	nop
 8002172:	bf00      	nop
}
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	08060000 	.word	0x08060000
 8002180:	20000030 	.word	0x20000030
 8002184:	200001a4 	.word	0x200001a4
 8002188:	08060008 	.word	0x08060008

0800218c <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002190:	f003 ff9c 	bl	80060cc <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8002194:	2102      	movs	r1, #2
 8002196:	2006      	movs	r0, #6
 8002198:	f004 f90a 	bl	80063b0 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 800219c:	f003 ffb8 	bl	8006110 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 80021a0:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <cfg_ClearFwBuf+0x24>)
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <cfg_ClearFwBuf+0x28>)
 80021a4:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <cfg_ClearFwBuf+0x2c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

	return;
 80021ac:	bf00      	nop
}
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	08040000 	.word	0x08040000
 80021b4:	200004d4 	.word	0x200004d4
 80021b8:	200004d8 	.word	0x200004d8

080021bc <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 80021c4:	f003 ff82 	bl	80060cc <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <cfg_WriteFwData+0x44>)
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	461c      	mov	r4, r3
 80021d2:	4615      	mov	r5, r2
 80021d4:	4622      	mov	r2, r4
 80021d6:	462b      	mov	r3, r5
 80021d8:	2002      	movs	r0, #2
 80021da:	f003 ff23 	bl	8006024 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80021de:	f003 ff97 	bl	8006110 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <cfg_WriteFwData+0x44>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <cfg_WriteFwData+0x44>)
 80021ea:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <cfg_WriteFwData+0x48>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <cfg_WriteFwData+0x48>)
 80021f4:	6013      	str	r3, [r2, #0]

	return;
 80021f6:	bf00      	nop
}
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdb0      	pop	{r4, r5, r7, pc}
 80021fe:	bf00      	nop
 8002200:	200004d4 	.word	0x200004d4
 8002204:	200004d8 	.word	0x200004d8

08002208 <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8002216:	89fb      	ldrh	r3, [r7, #14]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13e      	bne.n	800229a <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 800221c:	89fb      	ldrh	r3, [r7, #14]
 800221e:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <cfg_AddTxData+0xa0>)
 8002220:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	d831      	bhi.n	800229e <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 800223a:	89fa      	ldrh	r2, [r7, #14]
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	491a      	ldr	r1, [pc, #104]	; (80022a8 <cfg_AddTxData+0xa0>)
 8002240:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002244:	fb00 f303 	mul.w	r3, r0, r3
 8002248:	440b      	add	r3, r1
 800224a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002254:	fb01 f202 	mul.w	r2, r1, r2
 8002258:	4413      	add	r3, r2
 800225a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <cfg_AddTxData+0xa0>)
 8002260:	4413      	add	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f007 f9fc 	bl	8009664 <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <cfg_AddTxData+0xa0>)
 8002270:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800227e:	6819      	ldr	r1, [r3, #0]
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	440a      	add	r2, r1
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <cfg_AddTxData+0xa0>)
 8002288:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800228c:	fb00 f303 	mul.w	r3, r0, r3
 8002290:	440b      	add	r3, r1
 8002292:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002296:	601a      	str	r2, [r3, #0]

	return;
 8002298:	e002      	b.n	80022a0 <cfg_AddTxData+0x98>
		return;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <cfg_AddTxData+0x98>
		return;
 800229e:	bf00      	nop
}
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200001a4 	.word	0x200001a4

080022ac <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b0c5      	sub	sp, #276	; 0x114
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4604      	mov	r4, r0
 80022b4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80022b8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80022bc:	6001      	str	r1, [r0, #0]
 80022be:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80022c2:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80022c6:	600a      	str	r2, [r1, #0]
 80022c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022cc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022d6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80022da:	4622      	mov	r2, r4
 80022dc:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 80022de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022e2:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 80c0 	bne.w	800246e <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 80022ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022f2:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	4a61      	ldr	r2, [pc, #388]	; (8002480 <cfg_IntertTxData+0x1d4>)
 80022fa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800230e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002312:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	f200 80aa 	bhi.w	8002472 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 800231e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	f200 80a4 	bhi.w	8002476 <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 800232e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002332:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800233c:	fb03 f202 	mul.w	r2, r3, r2
 8002340:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002350:	4a4b      	ldr	r2, [pc, #300]	; (8002480 <cfg_IntertTxData+0x1d4>)
 8002352:	1899      	adds	r1, r3, r2
 8002354:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002358:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4a48      	ldr	r2, [pc, #288]	; (8002480 <cfg_IntertTxData+0x1d4>)
 8002360:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	4413      	add	r3, r2
 800236a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1ad2      	subs	r2, r2, r3
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f007 f96f 	bl	8009664 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8002386:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800238a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002394:	fb03 f202 	mul.w	r2, r3, r2
 8002398:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800239c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80023a8:	4a35      	ldr	r2, [pc, #212]	; (8002480 <cfg_IntertTxData+0x1d4>)
 80023aa:	1898      	adds	r0, r3, r2
 80023ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023b0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80023b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	f007 f950 	bl	8009664 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 80023c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023c8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023d2:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80023d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023de:	6809      	ldr	r1, [r1, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	440b      	add	r3, r1
 80023e4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023e8:	fb01 f202 	mul.w	r2, r1, r2
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <cfg_IntertTxData+0x1d4>)
 80023f4:	1898      	adds	r0, r3, r2
 80023f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023fa:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <cfg_IntertTxData+0x1d4>)
 8002402:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1ad2      	subs	r2, r2, r3
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	4619      	mov	r1, r3
 8002424:	f007 f91e 	bl	8009664 <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800242c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <cfg_IntertTxData+0x1d4>)
 8002434:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002448:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002452:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	440a      	add	r2, r1
 800245a:	4909      	ldr	r1, [pc, #36]	; (8002480 <cfg_IntertTxData+0x1d4>)
 800245c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002460:	fb00 f303 	mul.w	r3, r0, r3
 8002464:	440b      	add	r3, r1
 8002466:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800246a:	601a      	str	r2, [r3, #0]

	return;
 800246c:	e004      	b.n	8002478 <cfg_IntertTxData+0x1cc>
		return;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <cfg_IntertTxData+0x1cc>
		return;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <cfg_IntertTxData+0x1cc>
		return;
 8002476:	bf00      	nop
}
 8002478:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	200001a4 	.word	0x200001a4

08002484 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0c2      	sub	sp, #264	; 0x108
 8002488:	af00      	add	r7, sp, #0
 800248a:	4602      	mov	r2, r0
 800248c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002494:	6019      	str	r1, [r3, #0]
 8002496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800249a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800249e:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 80024a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024a4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	4a4a      	ldr	r2, [pc, #296]	; (80025d4 <cfg_RemTxData+0x150>)
 80024ac:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80024c0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d87f      	bhi.n	80025ca <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 80024ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d078      	beq.n	80025ca <cfg_RemTxData+0x146>
 80024d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024dc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	4a3c      	ldr	r2, [pc, #240]	; (80025d4 <cfg_RemTxData+0x150>)
 80024e4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d068      	beq.n	80025ca <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 80024f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024fc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <cfg_RemTxData+0x150>)
 8002504:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002518:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002522:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	1a8a      	subs	r2, r1, r2
 800252a:	492a      	ldr	r1, [pc, #168]	; (80025d4 <cfg_RemTxData+0x150>)
 800252c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002530:	fb00 f303 	mul.w	r3, r0, r3
 8002534:	440b      	add	r3, r1
 8002536:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800253a:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 800253c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002540:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800254a:	fb03 f202 	mul.w	r2, r3, r2
 800254e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <cfg_RemTxData+0x150>)
 8002560:	1899      	adds	r1, r3, r2
 8002562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002566:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <cfg_RemTxData+0x150>)
 800256e:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002572:	fb00 f303 	mul.w	r3, r0, r3
 8002576:	4413      	add	r3, r2
 8002578:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	4618      	mov	r0, r3
 8002584:	f007 f86e 	bl	8009664 <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8002588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800258c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800259e:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <cfg_RemTxData+0x150>)
 80025a0:	1898      	adds	r0, r3, r2
 80025a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80025a6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <cfg_RemTxData+0x150>)
 80025ae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4619      	mov	r1, r3
 80025c4:	f007 f84e 	bl	8009664 <memcpy>
	//free(tmp_buf);

	return;
 80025c8:	e000      	b.n	80025cc <cfg_RemTxData+0x148>
		return;
 80025ca:	bf00      	nop
}
 80025cc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200001a4 	.word	0x200001a4

080025d8 <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	2001      	movs	r0, #1
 80025e8:	f001 f836 	bl	8003658 <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 80025ec:	bf00      	nop
}
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8002604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002608:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800260a:	e00e      	b.n	800262a <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 800260c:	897b      	ldrh	r3, [r7, #10]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	b29a      	uxth	r2, r3
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	b2d9      	uxtb	r1, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1c58      	adds	r0, r3, #1
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	404b      	eors	r3, r1
 8002620:	4908      	ldr	r1, [pc, #32]	; (8002644 <crc16_calc+0x50>)
 8002622:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002626:	4053      	eors	r3, r2
 8002628:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	807a      	strh	r2, [r7, #2]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1eb      	bne.n	800260c <crc16_calc+0x18>
	return crc;
 8002634:	897b      	ldrh	r3, [r7, #10]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	08009970 	.word	0x08009970

08002648 <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 8002662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002666:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 8002668:	e017      	b.n	800269a <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 800266a:	8afb      	ldrh	r3, [r7, #22]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	b29a      	uxth	r2, r3
 8002670:	8afb      	ldrh	r3, [r7, #22]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	4401      	add	r1, r0
 800267a:	7809      	ldrb	r1, [r1, #0]
 800267c:	404b      	eors	r3, r1
 800267e:	490d      	ldr	r1, [pc, #52]	; (80026b4 <crc16_RingBuf+0x6c>)
 8002680:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002684:	4053      	eors	r3, r2
 8002686:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	3301      	adds	r3, #1
 800268c:	b29b      	uxth	r3, r3
 800268e:	b21a      	sxth	r2, r3
 8002690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	b21b      	sxth	r3, r3
 8002698:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	813a      	strh	r2, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e2      	bne.n	800266a <crc16_RingBuf+0x22>
	}
	return crc;
 80026a4:	8afb      	ldrh	r3, [r7, #22]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	08009970 	.word	0x08009970

080026b8 <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	80fb      	strh	r3, [r7, #6]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	60fb      	str	r3, [r7, #12]
  while (len--)
 80026cc:	e00f      	b.n	80026ee <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	0e19      	lsrs	r1, r3, #24
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	404b      	eors	r3, r1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	490a      	ldr	r1, [pc, #40]	; (8002708 <crc32_calc+0x50>)
 80026e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026e4:	4053      	eors	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
      buf++;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	3304      	adds	r3, #4
 80026ec:	603b      	str	r3, [r7, #0]
  while (len--)
 80026ee:	88bb      	ldrh	r3, [r7, #4]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	80ba      	strh	r2, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ea      	bne.n	80026ce <crc32_calc+0x16>
    }
  return crc;
 80026f8:	68fb      	ldr	r3, [r7, #12]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	08009b70 	.word	0x08009b70

0800270c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f002 fe34 	bl	800537c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f000 f812 	bl	800273c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002718:	f000 f9bc 	bl	8002a94 <MX_GPIO_Init>
  MX_I2C1_Init();
 800271c:	f000 f8c8 	bl	80028b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002720:	f000 f964 	bl	80029ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002724:	f000 f98c 	bl	8002a40 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002728:	f000 f8f0 	bl	800290c <MX_TIM3_Init>
  MX_ADC1_Init();
 800272c:	f000 f86e 	bl	800280c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 8002730:	f002 fcd2 	bl	80050d8 <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 8002734:	f002 fcf8 	bl	8005128 <system_Task>
 8002738:	e7fc      	b.n	8002734 <main+0x28>
	...

0800273c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b094      	sub	sp, #80	; 0x50
 8002740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002742:	f107 0320 	add.w	r3, r7, #32
 8002746:	2230      	movs	r2, #48	; 0x30
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f006 ff98 	bl	8009680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <SystemClock_Config+0xc8>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <SystemClock_Config+0xc8>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	; 0x40
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <SystemClock_Config+0xc8>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	4b21      	ldr	r3, [pc, #132]	; (8002808 <SystemClock_Config+0xcc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a20      	ldr	r2, [pc, #128]	; (8002808 <SystemClock_Config+0xcc>)
 8002786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <SystemClock_Config+0xcc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002798:	2301      	movs	r3, #1
 800279a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800279c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a2:	2302      	movs	r3, #2
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80027ac:	230c      	movs	r3, #12
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80027b0:	2360      	movs	r3, #96	; 0x60
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b4:	2302      	movs	r3, #2
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027b8:	2304      	movs	r3, #4
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fa1b 	bl	8006bfc <HAL_RCC_OscConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027cc:	f000 fa64 	bl	8002c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d0:	230f      	movs	r3, #15
 80027d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d4:	2302      	movs	r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2103      	movs	r1, #3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 fc7d 	bl	80070ec <HAL_RCC_ClockConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027f8:	f000 fa4e 	bl	8002c98 <Error_Handler>
  }
}
 80027fc:	bf00      	nop
 80027fe:	3750      	adds	r7, #80	; 0x50
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000

0800280c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002812:	463b      	mov	r3, r7
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002820:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <MX_ADC1_Init+0x9c>)
 8002822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002826:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800282a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <MX_ADC1_Init+0x98>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <MX_ADC1_Init+0x98>)
 800283a:	2200      	movs	r2, #0
 800283c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002848:	2200      	movs	r2, #0
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <MX_ADC1_Init+0x98>)
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <MX_ADC1_Init+0xa0>)
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <MX_ADC1_Init+0x98>)
 800285a:	2201      	movs	r2, #1
 800285c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_ADC1_Init+0x98>)
 8002868:	2201      	movs	r2, #1
 800286a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <MX_ADC1_Init+0x98>)
 800286e:	f002 fdc7 	bl	8005400 <HAL_ADC_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002878:	f000 fa0e 	bl	8002c98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002880:	2301      	movs	r3, #1
 8002882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002888:	463b      	mov	r3, r7
 800288a:	4619      	mov	r1, r3
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_ADC1_Init+0x98>)
 800288e:	f002 ffeb 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002898:	f000 f9fe 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200004e0 	.word	0x200004e0
 80028a8:	40012000 	.word	0x40012000
 80028ac:	0f000001 	.word	0x0f000001

080028b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_I2C1_Init+0x50>)
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <MX_I2C1_Init+0x54>)
 80028b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_I2C1_Init+0x50>)
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <MX_I2C1_Init+0x58>)
 80028be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_I2C1_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_I2C1_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_I2C1_Init+0x50>)
 80028ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_I2C1_Init+0x50>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_I2C1_Init+0x50>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <MX_I2C1_Init+0x50>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_I2C1_Init+0x50>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <MX_I2C1_Init+0x50>)
 80028ee:	f004 f841 	bl	8006974 <HAL_I2C_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028f8:	f000 f9ce 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000528 	.word	0x20000528
 8002904:	40005400 	.word	0x40005400
 8002908:	000186a0 	.word	0x000186a0

0800290c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002912:	f107 0320 	add.w	r3, r7, #32
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <MX_TIM3_Init+0xd8>)
 8002930:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <MX_TIM3_Init+0xdc>)
 8002932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <MX_TIM3_Init+0xd8>)
 8002936:	22c7      	movs	r2, #199	; 0xc7
 8002938:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <MX_TIM3_Init+0xd8>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <MX_TIM3_Init+0xd8>)
 8002942:	f242 720f 	movw	r2, #9999	; 0x270f
 8002946:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002948:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <MX_TIM3_Init+0xd8>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <MX_TIM3_Init+0xd8>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002954:	4823      	ldr	r0, [pc, #140]	; (80029e4 <MX_TIM3_Init+0xd8>)
 8002956:	f004 fe97 	bl	8007688 <HAL_TIM_PWM_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002960:	f000 f99a 	bl	8002c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	4619      	mov	r1, r3
 8002972:	481c      	ldr	r0, [pc, #112]	; (80029e4 <MX_TIM3_Init+0xd8>)
 8002974:	f005 fbac 	bl	80080d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800297e:	f000 f98b 	bl	8002c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002982:	2360      	movs	r3, #96	; 0x60
 8002984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	2200      	movs	r2, #0
 8002996:	4619      	mov	r1, r3
 8002998:	4812      	ldr	r0, [pc, #72]	; (80029e4 <MX_TIM3_Init+0xd8>)
 800299a:	f005 f87d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80029a4:	f000 f978 	bl	8002c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2204      	movs	r2, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	480d      	ldr	r0, [pc, #52]	; (80029e4 <MX_TIM3_Init+0xd8>)
 80029b0:	f005 f872 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80029ba:	f000 f96d 	bl	8002c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2208      	movs	r2, #8
 80029c2:	4619      	mov	r1, r3
 80029c4:	4807      	ldr	r0, [pc, #28]	; (80029e4 <MX_TIM3_Init+0xd8>)
 80029c6:	f005 f867 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80029d0:	f000 f962 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <MX_TIM3_Init+0xd8>)
 80029d6:	f000 fa43 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000057c 	.word	0x2000057c
 80029e8:	40000400 	.word	0x40000400

080029ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <MX_USART1_UART_Init+0x50>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 80029f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_USART1_UART_Init+0x4c>)
 8002a24:	f005 fbd6 	bl	80081d4 <HAL_UART_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a2e:	f000 f933 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200005c4 	.word	0x200005c4
 8002a3c:	40011000 	.word	0x40011000

08002a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <MX_USART2_UART_Init+0x50>)
 8002a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a66:	220c      	movs	r2, #12
 8002a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_USART2_UART_Init+0x4c>)
 8002a78:	f005 fbac 	bl	80081d4 <HAL_UART_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a82:	f000 f909 	bl	8002c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000608 	.word	0x20000608
 8002a90:	40004400 	.word	0x40004400

08002a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <MX_GPIO_Init+0x128>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b20:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <MX_GPIO_Init+0x12c>)
 8002b22:	f003 ff0d 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b2c:	4825      	ldr	r0, [pc, #148]	; (8002bc4 <MX_GPIO_Init+0x130>)
 8002b2e:	f003 ff07 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8002b32:	2201      	movs	r2, #1
 8002b34:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002b38:	4823      	ldr	r0, [pc, #140]	; (8002bc8 <MX_GPIO_Init+0x134>)
 8002b3a:	f003 ff01 	bl	8006940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	481a      	ldr	r0, [pc, #104]	; (8002bc0 <MX_GPIO_Init+0x12c>)
 8002b58:	f003 fc72 	bl	8006440 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 8002b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <MX_GPIO_Init+0x130>)
 8002b76:	f003 fc63 	bl	8006440 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 8002b7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	480e      	ldr	r0, [pc, #56]	; (8002bc8 <MX_GPIO_Init+0x134>)
 8002b90:	f003 fc56 	bl	8006440 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 8002b94:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <MX_GPIO_Init+0x134>)
 8002bae:	f003 fc47 	bl	8006440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	; 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020800 	.word	0x40020800
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020000 	.word	0x40020000

08002bcc <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <MX_USART1_UART_Init115200+0x50>)
 8002bd4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bdc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_USART1_UART_Init115200+0x4c>)
 8002c04:	f005 fae6 	bl	80081d4 <HAL_UART_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 8002c0e:	f000 f843 	bl	8002c98 <Error_Handler>
	}
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200005c4 	.word	0x200005c4
 8002c1c:	40011000 	.word	0x40011000

08002c20 <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f002 fb59 	bl	80052e0 <system_UART_RxCpltCallback>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <MX_UARTReInit>:

void MX_UARTReInit()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <MX_UARTReInit+0x14>)
 8002c3e:	f005 fb16 	bl	800826e <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 8002c42:	f7ff fed3 	bl	80029ec <MX_USART1_UART_Init>
	return;
 8002c46:	bf00      	nop
}
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200005c4 	.word	0x200005c4

08002c50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f002 fb0b 	bl	8005274 <system_ADC_ConvCpltCallback>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c7a:	f002 fba1 	bl	80053c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 8002c7e:	f002 fbb3 	bl	80053e8 <HAL_GetTick>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 f9e5 	bl	8005054 <system_Timer>
  /* USER CODE END Callback 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40000800 	.word	0x40000800

08002c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9c:	b672      	cpsid	i
}
 8002c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <Error_Handler+0x8>
	...

08002ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_MspInit+0x4c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_ADC_MspInit+0x8c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d12f      	bne.n	8002d76 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_ADC_MspInit+0x90>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_ADC_MspInit+0x90>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_ADC_MspInit+0x90>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_ADC_MspInit+0x90>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_ADC_MspInit+0x90>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_ADC_MspInit+0x90>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d52:	2303      	movs	r3, #3
 8002d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_ADC_MspInit+0x94>)
 8002d62:	f003 fb6d 	bl	8006440 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2012      	movs	r0, #18
 8002d6c:	f003 f890 	bl	8005e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d70:	2012      	movs	r0, #18
 8002d72:	f003 f8a9 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012000 	.word	0x40012000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_I2C_MspInit+0x84>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12b      	bne.n	8002e06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 8002dca:	23c0      	movs	r3, #192	; 0xc0
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dce:	2312      	movs	r3, #18
 8002dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	480c      	ldr	r0, [pc, #48]	; (8002e18 <HAL_I2C_MspInit+0x8c>)
 8002de6:	f003 fb2b 	bl	8006440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_I2C_MspInit+0x88>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e06:	bf00      	nop
 8002e08:	3728      	adds	r7, #40	; 0x28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40005400 	.word	0x40005400
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020400 	.word	0x40020400

08002e1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0b      	ldr	r2, [pc, #44]	; (8002e58 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10d      	bne.n	8002e4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_TIM_PWM_MspInit+0x40>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_TIM_PWM_MspInit+0x40>)
 8002e38:	f043 0302 	orr.w	r3, r3, #2
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_TIM_PWM_MspInit+0x40>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40023800 	.word	0x40023800

08002e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <HAL_TIM_MspPostInit+0x68>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d11d      	bne.n	8002ebe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_TIM_MspPostInit+0x6c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_TIM_MspPostInit+0x6c>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_TIM_MspPostInit+0x6c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 8002e9e:	2331      	movs	r3, #49	; 0x31
 8002ea0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <HAL_TIM_MspPostInit+0x70>)
 8002eba:	f003 fac1 	bl	8006440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020400 	.word	0x40020400

08002ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a36      	ldr	r2, [pc, #216]	; (8002fcc <HAL_UART_MspInit+0xf8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d135      	bne.n	8002f62 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f00:	f043 0310 	orr.w	r3, r3, #16
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 8002f2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f40:	2307      	movs	r3, #7
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4822      	ldr	r0, [pc, #136]	; (8002fd4 <HAL_UART_MspInit+0x100>)
 8002f4c:	f003 fa78 	bl	8006440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2025      	movs	r0, #37	; 0x25
 8002f56:	f002 ff9b 	bl	8005e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f5a:	2025      	movs	r0, #37	; 0x25
 8002f5c:	f002 ffb4 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f60:	e030      	b.n	8002fc4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_UART_MspInit+0x104>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d12b      	bne.n	8002fc4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_UART_MspInit+0xfc>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8002fa4:	230c      	movs	r3, #12
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fb4:	2307      	movs	r3, #7
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_UART_MspInit+0x100>)
 8002fc0:	f003 fa3e 	bl	8006440 <HAL_GPIO_Init>
}
 8002fc4:	bf00      	nop
 8002fc6:	3730      	adds	r7, #48	; 0x30
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40011000 	.word	0x40011000
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40004400 	.word	0x40004400

08002fdc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a12      	ldr	r2, [pc, #72]	; (8003034 <HAL_UART_MspDeInit+0x58>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10e      	bne.n	800300c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_UART_MspDeInit+0x5c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HAL_UART_MspDeInit+0x5c>)
 8002ff4:	f023 0310 	bic.w	r3, r3, #16
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 8002ffa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ffe:	480f      	ldr	r0, [pc, #60]	; (800303c <HAL_UART_MspDeInit+0x60>)
 8003000:	f003 fba2 	bl	8006748 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003004:	2025      	movs	r0, #37	; 0x25
 8003006:	f002 ff6d 	bl	8005ee4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800300a:	e00e      	b.n	800302a <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <HAL_UART_MspDeInit+0x64>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d109      	bne.n	800302a <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_UART_MspDeInit+0x5c>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_UART_MspDeInit+0x5c>)
 800301c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 8003022:	210c      	movs	r1, #12
 8003024:	4805      	ldr	r0, [pc, #20]	; (800303c <HAL_UART_MspDeInit+0x60>)
 8003026:	f003 fb8f 	bl	8006748 <HAL_GPIO_DeInit>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40011000 	.word	0x40011000
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40004400 	.word	0x40004400

08003044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	; 0x38
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_InitTick+0xe4>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_InitTick+0xe4>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_InitTick+0xe4>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003070:	f107 0210 	add.w	r2, r7, #16
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f004 fa16 	bl	80074ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800308a:	f004 f9e7 	bl	800745c <HAL_RCC_GetPCLK1Freq>
 800308e:	6378      	str	r0, [r7, #52]	; 0x34
 8003090:	e004      	b.n	800309c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003092:	f004 f9e3 	bl	800745c <HAL_RCC_GetPCLK1Freq>
 8003096:	4603      	mov	r3, r0
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	4a23      	ldr	r2, [pc, #140]	; (800312c <HAL_InitTick+0xe8>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	3b01      	subs	r3, #1
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80030aa:	4b21      	ldr	r3, [pc, #132]	; (8003130 <HAL_InitTick+0xec>)
 80030ac:	4a21      	ldr	r2, [pc, #132]	; (8003134 <HAL_InitTick+0xf0>)
 80030ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <HAL_InitTick+0xec>)
 80030b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030b6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_InitTick+0xec>)
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_InitTick+0xec>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_InitTick+0xec>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_InitTick+0xec>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80030d0:	4817      	ldr	r0, [pc, #92]	; (8003130 <HAL_InitTick+0xec>)
 80030d2:	f004 fa1d 	bl	8007510 <HAL_TIM_Base_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80030dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11b      	bne.n	800311c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80030e4:	4812      	ldr	r0, [pc, #72]	; (8003130 <HAL_InitTick+0xec>)
 80030e6:	f004 fa6d 	bl	80075c4 <HAL_TIM_Base_Start_IT>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80030f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030f8:	201e      	movs	r0, #30
 80030fa:	f002 fee5 	bl	8005ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d808      	bhi.n	8003116 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003104:	2200      	movs	r2, #0
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	201e      	movs	r0, #30
 800310a:	f002 fec1 	bl	8005e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_InitTick+0xf4>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e002      	b.n	800311c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800311c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003120:	4618      	mov	r0, r3
 8003122:	3738      	adds	r7, #56	; 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	431bde83 	.word	0x431bde83
 8003130:	2000064c 	.word	0x2000064c
 8003134:	40000800 	.word	0x40000800
 8003138:	200000d4 	.word	0x200000d4

0800313c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <NMI_Handler+0x4>

08003142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003146:	e7fe      	b.n	8003146 <HardFault_Handler+0x4>

08003148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800314c:	e7fe      	b.n	800314c <MemManage_Handler+0x4>

0800314e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003152:	e7fe      	b.n	8003152 <BusFault_Handler+0x4>

08003154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <UsageFault_Handler+0x4>

0800315a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <ADC_IRQHandler+0x10>)
 800319a:	f002 fa33 	bl	8005604 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200004e0 	.word	0x200004e0

080031a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM4_IRQHandler+0x10>)
 80031ae:	f004 fb6b 	bl	8007888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000064c 	.word	0x2000064c

080031bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <USART1_IRQHandler+0x10>)
 80031c2:	f005 fa59 	bl	8008678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200005c4 	.word	0x200005c4

080031d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <SystemInit+0x20>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <SystemInit+0x20>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e010      	b.n	8003224 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <modem_Timer+0x44>)
 8003206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <modem_Timer+0x2a>
			modem_info.timer[i]--;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <modem_Timer+0x44>)
 8003212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003216:	3a01      	subs	r2, #1
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <modem_Timer+0x44>)
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	3301      	adds	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d9eb      	bls.n	8003202 <modem_Timer+0xe>
		}
	}

	return;
 800322a:	bf00      	nop
}
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000694 	.word	0x20000694

0800323c <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003246:	480c      	ldr	r0, [pc, #48]	; (8003278 <modem_InitTask+0x3c>)
 8003248:	f003 fb7a 	bl	8006940 <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <modem_InitTask+0x40>)
 800324e:	2200      	movs	r2, #0
 8003250:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <modem_InitTask+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <modem_InitTask+0x40>)
 800325c:	2200      	movs	r2, #0
 800325e:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <modem_InitTask+0x40>)
 8003262:	2200      	movs	r2, #0
 8003264:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <modem_InitTask+0x40>)
 8003268:	2200      	movs	r2, #0
 800326a:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <modem_InitTask+0x40>)
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8003274:	bf00      	nop
}
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40020000 	.word	0x40020000
 800327c:	20000694 	.word	0x20000694

08003280 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <modem_Task+0x20c>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d110      	bne.n	80032b0 <modem_Task+0x30>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 800328e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003292:	487f      	ldr	r0, [pc, #508]	; (8003490 <modem_Task+0x210>)
 8003294:	f003 fb3c 	bl	8006910 <HAL_GPIO_ReadPin>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	f040 80b0 	bne.w	8003400 <modem_Task+0x180>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 80032a0:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <modem_Task+0x214>)
 80032a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a6:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <modem_Task+0x20c>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e0a7      	b.n	8003400 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 80032b0:	4b76      	ldr	r3, [pc, #472]	; (800348c <modem_Task+0x20c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d11e      	bne.n	80032f6 <modem_Task+0x76>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 80032b8:	4b76      	ldr	r3, [pc, #472]	; (8003494 <modem_Task+0x214>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 809f 	bne.w	8003400 <modem_Task+0x180>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 80032c2:	23c2      	movs	r3, #194	; 0xc2
 80032c4:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 80032c6:	23ff      	movs	r3, #255	; 0xff
 80032c8:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 80032ca:	23ff      	movs	r3, #255	; 0xff
 80032cc:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 80032ce:	233d      	movs	r3, #61	; 0x3d
 80032d0:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 80032d2:	2306      	movs	r3, #6
 80032d4:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 80032d6:	2344      	movs	r3, #68	; 0x44
 80032d8:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 80032da:	1d39      	adds	r1, r7, #4
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	2206      	movs	r2, #6
 80032e2:	486d      	ldr	r0, [pc, #436]	; (8003498 <modem_Task+0x218>)
 80032e4:	f004 fff2 	bl	80082cc <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <modem_Task+0x214>)
 80032ea:	2264      	movs	r2, #100	; 0x64
 80032ec:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 80032ee:	4b67      	ldr	r3, [pc, #412]	; (800348c <modem_Task+0x20c>)
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e084      	b.n	8003400 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <modem_Task+0x20c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d114      	bne.n	8003328 <modem_Task+0xa8>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <modem_Task+0x214>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d17c      	bne.n	8003400 <modem_Task+0x180>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8003306:	23c1      	movs	r3, #193	; 0xc1
 8003308:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 800330a:	23c1      	movs	r3, #193	; 0xc1
 800330c:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 800330e:	23c1      	movs	r3, #193	; 0xc1
 8003310:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8003312:	1d39      	adds	r1, r7, #4
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	2203      	movs	r2, #3
 800331a:	485f      	ldr	r0, [pc, #380]	; (8003498 <modem_Task+0x218>)
 800331c:	f004 ffd6 	bl	80082cc <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8003320:	4b5a      	ldr	r3, [pc, #360]	; (800348c <modem_Task+0x20c>)
 8003322:	2203      	movs	r2, #3
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e06b      	b.n	8003400 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8003328:	4b58      	ldr	r3, [pc, #352]	; (800348c <modem_Task+0x20c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d115      	bne.n	800335c <modem_Task+0xdc>
	{
		if( _modem_par_flag == 1 )
 8003330:	4b5a      	ldr	r3, [pc, #360]	; (800349c <modem_Task+0x21c>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d163      	bne.n	8003400 <modem_Task+0x180>
		{
			_modem_par_flag = 0;
 8003338:	4b58      	ldr	r3, [pc, #352]	; (800349c <modem_Task+0x21c>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 800333e:	2200      	movs	r2, #0
 8003340:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003344:	4852      	ldr	r0, [pc, #328]	; (8003490 <modem_Task+0x210>)
 8003346:	f003 fafb 	bl	8006940 <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 800334a:	f001 ff47 	bl	80051dc <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <modem_Task+0x214>)
 8003350:	2264      	movs	r2, #100	; 0x64
 8003352:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <modem_Task+0x20c>)
 8003356:	2204      	movs	r2, #4
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e051      	b.n	8003400 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy )
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <modem_Task+0x20c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <modem_Task+0xf4>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8003364:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <modem_Task+0x214>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d149      	bne.n	8003400 <modem_Task+0x180>
			_modem_cur_state = modem_ready;
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <modem_Task+0x20c>)
 800336e:	2205      	movs	r2, #5
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e045      	b.n	8003400 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8003374:	4b45      	ldr	r3, [pc, #276]	; (800348c <modem_Task+0x20c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b05      	cmp	r3, #5
 800337a:	d141      	bne.n	8003400 <modem_Task+0x180>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 800337c:	4b45      	ldr	r3, [pc, #276]	; (8003494 <modem_Task+0x214>)
 800337e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <modem_Task+0x150>
 8003386:	4b43      	ldr	r3, [pc, #268]	; (8003494 <modem_Task+0x214>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d120      	bne.n	80033d0 <modem_Task+0x150>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <modem_Task+0x214>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8003394:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <modem_Task+0x214>)
 8003396:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800339a:	2b14      	cmp	r3, #20
 800339c:	d90a      	bls.n	80033b4 <modem_Task+0x134>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	2214      	movs	r2, #20
 80033a4:	493e      	ldr	r1, [pc, #248]	; (80034a0 <modem_Task+0x220>)
 80033a6:	483c      	ldr	r0, [pc, #240]	; (8003498 <modem_Task+0x218>)
 80033a8:	f004 ff90 	bl	80082cc <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 80033ac:	2014      	movs	r0, #20
 80033ae:	f000 f9db 	bl	8003768 <modem_RemTxData>
 80033b2:	e00d      	b.n	80033d0 <modem_Task+0x150>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <modem_Task+0x214>)
 80033b6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	f04f 33ff 	mov.w	r3, #4294967295
 80033c0:	4937      	ldr	r1, [pc, #220]	; (80034a0 <modem_Task+0x220>)
 80033c2:	4835      	ldr	r0, [pc, #212]	; (8003498 <modem_Task+0x218>)
 80033c4:	f004 ff82 	bl	80082cc <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <modem_Task+0x214>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 80033d0:	4b30      	ldr	r3, [pc, #192]	; (8003494 <modem_Task+0x214>)
 80033d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <modem_Task+0x180>
		{
			_modem_led_start = 1;
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <modem_Task+0x224>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 80033e0:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <modem_Task+0x214>)
 80033e2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80033e6:	b2d8      	uxtb	r0, r3
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <modem_Task+0x214>)
 80033ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80033ee:	3b01      	subs	r3, #1
 80033f0:	461a      	mov	r2, r3
 80033f2:	492d      	ldr	r1, [pc, #180]	; (80034a8 <modem_Task+0x228>)
 80033f4:	f001 ff08 	bl	8005208 <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <modem_Task+0x214>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <modem_Task+0x22c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <modem_Task+0x19e>
	{
		if( _modem_led_start == 1 )
 8003408:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <modem_Task+0x224>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d138      	bne.n	8003482 <modem_Task+0x202>
		{
			_modem_led_start = 0;
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <modem_Task+0x224>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <modem_Task+0x22c>)
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 800341c:	e031      	b.n	8003482 <modem_Task+0x202>
	else if( _modem_led_state == 1 )
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <modem_Task+0x22c>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10c      	bne.n	8003440 <modem_Task+0x1c0>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8003426:	2201      	movs	r2, #1
 8003428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800342c:	4820      	ldr	r0, [pc, #128]	; (80034b0 <modem_Task+0x230>)
 800342e:	f003 fa87 	bl	8006940 <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <modem_Task+0x214>)
 8003434:	2214      	movs	r2, #20
 8003436:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8003438:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <modem_Task+0x22c>)
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
	return;
 800343e:	e020      	b.n	8003482 <modem_Task+0x202>
	else if( _modem_led_state == 2 )
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <modem_Task+0x22c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d110      	bne.n	800346a <modem_Task+0x1ea>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <modem_Task+0x214>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d118      	bne.n	8003482 <modem_Task+0x202>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003456:	4816      	ldr	r0, [pc, #88]	; (80034b0 <modem_Task+0x230>)
 8003458:	f003 fa72 	bl	8006940 <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <modem_Task+0x214>)
 800345e:	2232      	movs	r2, #50	; 0x32
 8003460:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <modem_Task+0x22c>)
 8003464:	2203      	movs	r2, #3
 8003466:	701a      	strb	r2, [r3, #0]
	return;
 8003468:	e00b      	b.n	8003482 <modem_Task+0x202>
	else if( _modem_led_state == 3 )
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <modem_Task+0x22c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d107      	bne.n	8003482 <modem_Task+0x202>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <modem_Task+0x214>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <modem_Task+0x202>
			_modem_led_state = 0;
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <modem_Task+0x22c>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
	return;
 8003480:	bf00      	nop
 8003482:	bf00      	nop
}
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	2000083c 	.word	0x2000083c
 8003490:	40020000 	.word	0x40020000
 8003494:	20000694 	.word	0x20000694
 8003498:	200005c4 	.word	0x200005c4
 800349c:	2000084b 	.word	0x2000084b
 80034a0:	200007ac 	.word	0x200007ac
 80034a4:	2000084c 	.word	0x2000084c
 80034a8:	20000729 	.word	0x20000729
 80034ac:	2000084d 	.word	0x2000084d
 80034b0:	40020400 	.word	0x40020400

080034b4 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <modem_RcvData+0x188>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d01a      	beq.n	80034fc <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 80034c6:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <modem_RcvData+0x18c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f040 80b1 	bne.w	8003632 <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 80034d0:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <modem_RcvData+0x190>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	b2d1      	uxtb	r1, r2
 80034d8:	4a5a      	ldr	r2, [pc, #360]	; (8003644 <modem_RcvData+0x190>)
 80034da:	7011      	strb	r1, [r2, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	4a5a      	ldr	r2, [pc, #360]	; (8003648 <modem_RcvData+0x194>)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 80034e4:	4b57      	ldr	r3, [pc, #348]	; (8003644 <modem_RcvData+0x190>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	f040 80a2 	bne.w	8003632 <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 80034ee:	4b55      	ldr	r3, [pc, #340]	; (8003644 <modem_RcvData+0x190>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 80034f4:	4b52      	ldr	r3, [pc, #328]	; (8003640 <modem_RcvData+0x18c>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 80034fa:	e09a      	b.n	8003632 <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <modem_RcvData+0x198>)
 80034fe:	8a1b      	ldrh	r3, [r3, #16]
 8003500:	b29b      	uxth	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350a:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <modem_RcvData+0x198>)
 800350e:	4611      	mov	r1, r2
 8003510:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <modem_RcvData+0x198>)
 8003514:	4413      	add	r3, r2
 8003516:	79fa      	ldrb	r2, [r7, #7]
 8003518:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 800351a:	4b4c      	ldr	r3, [pc, #304]	; (800364c <modem_RcvData+0x198>)
 800351c:	7b1b      	ldrb	r3, [r3, #12]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d12a      	bne.n	800357a <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <modem_RcvData+0x198>)
 8003526:	8a1b      	ldrh	r3, [r3, #16]
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b02      	subs	r3, #2
 800352c:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 800352e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003532:	b29b      	uxth	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	4846      	ldr	r0, [pc, #280]	; (8003650 <modem_RcvData+0x19c>)
 8003538:	f000 f8ce 	bl	80036d8 <modem_ringBufRead16b>
 800353c:	4603      	mov	r3, r0
 800353e:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 8003540:	897b      	ldrh	r3, [r7, #10]
 8003542:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003546:	4293      	cmp	r3, r2
 8003548:	d173      	bne.n	8003632 <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 800354a:	4b40      	ldr	r3, [pc, #256]	; (800364c <modem_RcvData+0x198>)
 800354c:	8a1b      	ldrh	r3, [r3, #16]
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b02      	subs	r3, #2
 8003552:	b29b      	uxth	r3, r3
 8003554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003558:	b29a      	uxth	r2, r3
 800355a:	4b3c      	ldr	r3, [pc, #240]	; (800364c <modem_RcvData+0x198>)
 800355c:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	b29a      	uxth	r2, r3
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <modem_RcvData+0x1a0>)
 8003564:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b02      	subs	r3, #2
 800356c:	b29a      	uxth	r2, r3
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <modem_RcvData+0x198>)
 8003570:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <modem_RcvData+0x198>)
 8003574:	2201      	movs	r2, #1
 8003576:	731a      	strb	r2, [r3, #12]
	return;
 8003578:	e05b      	b.n	8003632 <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <modem_RcvData+0x198>)
 800357c:	7b1b      	ldrb	r3, [r3, #12]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d156      	bne.n	8003632 <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <modem_RcvData+0x1a0>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <modem_RcvData+0x1a0>)
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	4b30      	ldr	r3, [pc, #192]	; (8003654 <modem_RcvData+0x1a0>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d14c      	bne.n	8003632 <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <modem_RcvData+0x198>)
 800359a:	2200      	movs	r2, #0
 800359c:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <modem_RcvData+0x198>)
 80035a0:	89db      	ldrh	r3, [r3, #14]
 80035a2:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <modem_RcvData+0x198>)
 80035a6:	8a5b      	ldrh	r3, [r3, #18]
 80035a8:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 80035aa:	3303      	adds	r3, #3
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	237f      	movs	r3, #127	; 0x7f
 80035b0:	4827      	ldr	r0, [pc, #156]	; (8003650 <modem_RcvData+0x19c>)
 80035b2:	f7ff f849 	bl	8002648 <crc16_RingBuf>
 80035b6:	4603      	mov	r3, r0
 80035b8:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <modem_RcvData+0x198>)
 80035bc:	8a1b      	ldrh	r3, [r3, #16]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 80035c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4619      	mov	r1, r3
 80035cc:	4820      	ldr	r0, [pc, #128]	; (8003650 <modem_RcvData+0x19c>)
 80035ce:	f000 f883 	bl	80036d8 <modem_ringBufRead16b>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	89bb      	ldrh	r3, [r7, #12]
 80035d8:	4293      	cmp	r3, r2
 80035da:	d12a      	bne.n	8003632 <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <modem_RcvData+0x198>)
 80035de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d125      	bne.n	8003632 <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 80035e6:	2300      	movs	r3, #0
 80035e8:	81fb      	strh	r3, [r7, #14]
 80035ea:	e014      	b.n	8003616 <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80035ec:	4b17      	ldr	r3, [pc, #92]	; (800364c <modem_RcvData+0x198>)
 80035ee:	89db      	ldrh	r3, [r3, #14]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1cda      	adds	r2, r3, #3
 80035f4:	89fb      	ldrh	r3, [r7, #14]
 80035f6:	4413      	add	r3, r2
 80035f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 80035fc:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80035fe:	4913      	ldr	r1, [pc, #76]	; (800364c <modem_RcvData+0x198>)
 8003600:	440a      	add	r2, r1
 8003602:	7d12      	ldrb	r2, [r2, #20]
 8003604:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 8003606:	4a11      	ldr	r2, [pc, #68]	; (800364c <modem_RcvData+0x198>)
 8003608:	4413      	add	r3, r2
 800360a:	460a      	mov	r2, r1
 800360c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8003610:	89fb      	ldrh	r3, [r7, #14]
 8003612:	3301      	adds	r3, #1
 8003614:	81fb      	strh	r3, [r7, #14]
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <modem_RcvData+0x198>)
 8003618:	8a5b      	ldrh	r3, [r3, #18]
 800361a:	b29b      	uxth	r3, r3
 800361c:	89fa      	ldrh	r2, [r7, #14]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3e4      	bcc.n	80035ec <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <modem_RcvData+0x198>)
 8003624:	8a5b      	ldrh	r3, [r3, #18]
 8003626:	b29b      	uxth	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <modem_RcvData+0x198>)
 800362c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 8003630:	bf00      	nop
 8003632:	bf00      	nop
}
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2000083c 	.word	0x2000083c
 8003640:	2000084b 	.word	0x2000084b
 8003644:	2000084a 	.word	0x2000084a
 8003648:	20000840 	.word	0x20000840
 800364c:	20000694 	.word	0x20000694
 8003650:	200006a8 	.word	0x200006a8
 8003654:	2000084e 	.word	0x2000084e

08003658 <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 8003666:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800366a:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 800366c:	f107 0316 	add.w	r3, r7, #22
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f850 	bl	8003718 <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	3303      	adds	r3, #3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8003682:	f107 0315 	add.w	r3, r7, #21
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f845 	bl	8003718 <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8003692:	f107 0315 	add.w	r3, r7, #21
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f83d 	bl	8003718 <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	68b8      	ldr	r0, [r7, #8]
 80036a2:	f000 f839 	bl	8003718 <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <modem_TrmData+0x78>)
 80036a8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4619      	mov	r1, r3
 80036b0:	4808      	ldr	r0, [pc, #32]	; (80036d4 <modem_TrmData+0x7c>)
 80036b2:	f7fe ff9f 	bl	80025f4 <crc16_calc>
 80036b6:	4603      	mov	r3, r0
 80036b8:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 80036ba:	f107 0316 	add.w	r3, r7, #22
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f829 	bl	8003718 <modem_AddTxData>

	return;
 80036c6:	bf00      	nop
}
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000694 	.word	0x20000694
 80036d4:	200007ac 	.word	0x200007ac

080036d8 <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 80036f4:	89fb      	ldrh	r3, [r7, #14]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	440b      	add	r3, r1
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	4413      	add	r3, r2
 8003706:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8003708:	89fb      	ldrh	r3, [r7, #14]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <modem_AddTxData+0x4c>)
 8003724:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003728:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d814      	bhi.n	800375c <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <modem_AddTxData+0x4c>)
 8003734:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003738:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800373c:	4a09      	ldr	r2, [pc, #36]	; (8003764 <modem_AddTxData+0x4c>)
 800373e:	4413      	add	r3, r2
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	f005 ff8d 	bl	8009664 <memcpy>
	modem_info.tx_buf_bytes += len;
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <modem_AddTxData+0x4c>)
 800374c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a03      	ldr	r2, [pc, #12]	; (8003764 <modem_AddTxData+0x4c>)
 8003756:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 800375a:	e000      	b.n	800375e <modem_AddTxData+0x46>
		return;
 800375c:	bf00      	nop
}
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000694 	.word	0x20000694

08003768 <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0a2      	sub	sp, #136	; 0x88
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <modem_RemTxData+0x6c>)
 8003772:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d826      	bhi.n	80037ca <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <modem_RemTxData+0x62>
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <modem_RemTxData+0x6c>)
 8003784:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01e      	beq.n	80037ca <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <modem_RemTxData+0x6c>)
 800378e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <modem_RemTxData+0x6c>)
 8003798:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <modem_RemTxData+0x6c>)
 80037a4:	1899      	adds	r1, r3, r2
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <modem_RemTxData+0x6c>)
 80037a8:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80037ac:	f107 0308 	add.w	r3, r7, #8
 80037b0:	4618      	mov	r0, r3
 80037b2:	f005 ff57 	bl	8009664 <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <modem_RemTxData+0x6c>)
 80037b8:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80037bc:	f107 0308 	add.w	r3, r7, #8
 80037c0:	4619      	mov	r1, r3
 80037c2:	4805      	ldr	r0, [pc, #20]	; (80037d8 <modem_RemTxData+0x70>)
 80037c4:	f005 ff4e 	bl	8009664 <memcpy>

	return;
 80037c8:	e000      	b.n	80037cc <modem_RemTxData+0x64>
		return;
 80037ca:	bf00      	nop
}
 80037cc:	3788      	adds	r7, #136	; 0x88
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000694 	.word	0x20000694
 80037d8:	200007ac 	.word	0x200007ac

080037dc <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e016      	b.n	8003818 <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <motor_Timer+0x50>)
 80037ee:	3304      	adds	r3, #4
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <motor_Timer+0x36>
			motor_info.timer[i]--;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	490b      	ldr	r1, [pc, #44]	; (800382c <motor_Timer+0x50>)
 80037fe:	1d13      	adds	r3, r2, #4
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	4808      	ldr	r0, [pc, #32]	; (800382c <motor_Timer+0x50>)
 800380a:	1d13      	adds	r3, r2, #4
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4403      	add	r3, r0
 8003810:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3301      	adds	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0e5      	beq.n	80037ea <motor_Timer+0xe>
		}
	}

	return;
 800381e:	bf00      	nop
}
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000850 	.word	0x20000850

08003830 <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <motor_InitTask+0x90>)
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <motor_InitTask+0x94>)
 800383a:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 800383c:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <motor_InitTask+0x90>)
 800383e:	2208      	movs	r2, #8
 8003840:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <motor_InitTask+0x90>)
 8003844:	2200      	movs	r2, #0
 8003846:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <motor_InitTask+0x90>)
 800384a:	f240 2217 	movw	r2, #535	; 0x217
 800384e:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <motor_InitTask+0x90>)
 8003852:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003856:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <motor_InitTask+0x90>)
 800385a:	89db      	ldrh	r3, [r3, #14]
 800385c:	b29a      	uxth	r2, r3
 800385e:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <motor_InitTask+0x90>)
 8003860:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 1000;
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <motor_InitTask+0x90>)
 8003864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003868:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <motor_InitTask+0x90>)
 800386c:	2201      	movs	r2, #1
 800386e:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8003870:	2300      	movs	r3, #0
 8003872:	71fb      	strb	r3, [r7, #7]
 8003874:	e016      	b.n	80038a4 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 8003876:	79fa      	ldrb	r2, [r7, #7]
 8003878:	4911      	ldr	r1, [pc, #68]	; (80038c0 <motor_InitTask+0x90>)
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	79fa      	ldrb	r2, [r7, #7]
 8003888:	490d      	ldr	r1, [pc, #52]	; (80038c0 <motor_InitTask+0x90>)
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3304      	adds	r3, #4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	f003 ff45 	bl	8007728 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	3301      	adds	r3, #1
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0e5      	beq.n	8003876 <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <motor_InitTask+0x90>)
 80038ac:	7b1b      	ldrb	r3, [r3, #12]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4619      	mov	r1, r3
 80038b2:	2000      	movs	r0, #0
 80038b4:	f000 f92e 	bl	8003b14 <motor_setTorque>

	return;
 80038b8:	bf00      	nop
}
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000850 	.word	0x20000850
 80038c4:	2000057c 	.word	0x2000057c

080038c8 <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 80038cc:	bf00      	nop
}
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	460a      	mov	r2, r1
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8109 	bne.w	8003b02 <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 80038f0:	79fa      	ldrb	r2, [r7, #7]
 80038f2:	4987      	ldr	r1, [pc, #540]	; (8003b10 <motor_setEnable+0x238>)
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3308      	adds	r3, #8
 8003900:	79ba      	ldrb	r2, [r7, #6]
 8003902:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 8003904:	79fa      	ldrb	r2, [r7, #7]
 8003906:	4982      	ldr	r1, [pc, #520]	; (8003b10 <motor_setEnable+0x238>)
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3308      	adds	r3, #8
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d178      	bne.n	8003a0e <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800391c:	79fa      	ldrb	r2, [r7, #7]
 800391e:	497c      	ldr	r1, [pc, #496]	; (8003b10 <motor_setEnable+0x238>)
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3304      	adds	r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d115      	bne.n	800395e <motor_setEnable+0x86>
 8003932:	79fa      	ldrb	r2, [r7, #7]
 8003934:	4976      	ldr	r1, [pc, #472]	; (8003b10 <motor_setEnable+0x238>)
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	330a      	adds	r3, #10
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b298      	uxth	r0, r3
 8003946:	79fa      	ldrb	r2, [r7, #7]
 8003948:	4971      	ldr	r1, [pc, #452]	; (8003b10 <motor_setEnable+0x238>)
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4602      	mov	r2, r0
 800395a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 800395c:	e0d2      	b.n	8003b04 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800395e:	79fa      	ldrb	r2, [r7, #7]
 8003960:	496b      	ldr	r1, [pc, #428]	; (8003b10 <motor_setEnable+0x238>)
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3304      	adds	r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d115      	bne.n	80039a0 <motor_setEnable+0xc8>
 8003974:	79fa      	ldrb	r2, [r7, #7]
 8003976:	4966      	ldr	r1, [pc, #408]	; (8003b10 <motor_setEnable+0x238>)
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	330a      	adds	r3, #10
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b298      	uxth	r0, r3
 8003988:	79fa      	ldrb	r2, [r7, #7]
 800398a:	4961      	ldr	r1, [pc, #388]	; (8003b10 <motor_setEnable+0x238>)
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4603      	mov	r3, r0
 800399c:	6393      	str	r3, [r2, #56]	; 0x38
 800399e:	e0af      	b.n	8003b00 <motor_setEnable+0x228>
 80039a0:	79fa      	ldrb	r2, [r7, #7]
 80039a2:	495b      	ldr	r1, [pc, #364]	; (8003b10 <motor_setEnable+0x238>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3304      	adds	r3, #4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d115      	bne.n	80039e2 <motor_setEnable+0x10a>
 80039b6:	79fa      	ldrb	r2, [r7, #7]
 80039b8:	4955      	ldr	r1, [pc, #340]	; (8003b10 <motor_setEnable+0x238>)
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	330a      	adds	r3, #10
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b298      	uxth	r0, r3
 80039ca:	79fa      	ldrb	r2, [r7, #7]
 80039cc:	4950      	ldr	r1, [pc, #320]	; (8003b10 <motor_setEnable+0x238>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4603      	mov	r3, r0
 80039de:	63d3      	str	r3, [r2, #60]	; 0x3c
 80039e0:	e08e      	b.n	8003b00 <motor_setEnable+0x228>
 80039e2:	79fa      	ldrb	r2, [r7, #7]
 80039e4:	494a      	ldr	r1, [pc, #296]	; (8003b10 <motor_setEnable+0x238>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	330a      	adds	r3, #10
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b298      	uxth	r0, r3
 80039f6:	79fa      	ldrb	r2, [r7, #7]
 80039f8:	4945      	ldr	r1, [pc, #276]	; (8003b10 <motor_setEnable+0x238>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4603      	mov	r3, r0
 8003a0a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8003a0c:	e07a      	b.n	8003b04 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	493f      	ldr	r1, [pc, #252]	; (8003b10 <motor_setEnable+0x238>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d115      	bne.n	8003a50 <motor_setEnable+0x178>
 8003a24:	79fa      	ldrb	r2, [r7, #7]
 8003a26:	493a      	ldr	r1, [pc, #232]	; (8003b10 <motor_setEnable+0x238>)
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	330e      	adds	r3, #14
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b298      	uxth	r0, r3
 8003a38:	79fa      	ldrb	r2, [r7, #7]
 8003a3a:	4935      	ldr	r1, [pc, #212]	; (8003b10 <motor_setEnable+0x238>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8003a4e:	e059      	b.n	8003b04 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8003a50:	79fa      	ldrb	r2, [r7, #7]
 8003a52:	492f      	ldr	r1, [pc, #188]	; (8003b10 <motor_setEnable+0x238>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3304      	adds	r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d115      	bne.n	8003a92 <motor_setEnable+0x1ba>
 8003a66:	79fa      	ldrb	r2, [r7, #7]
 8003a68:	4929      	ldr	r1, [pc, #164]	; (8003b10 <motor_setEnable+0x238>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	330e      	adds	r3, #14
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b298      	uxth	r0, r3
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	4924      	ldr	r1, [pc, #144]	; (8003b10 <motor_setEnable+0x238>)
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8003a90:	e038      	b.n	8003b04 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8003a92:	79fa      	ldrb	r2, [r7, #7]
 8003a94:	491e      	ldr	r1, [pc, #120]	; (8003b10 <motor_setEnable+0x238>)
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d115      	bne.n	8003ad4 <motor_setEnable+0x1fc>
 8003aa8:	79fa      	ldrb	r2, [r7, #7]
 8003aaa:	4919      	ldr	r1, [pc, #100]	; (8003b10 <motor_setEnable+0x238>)
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	330e      	adds	r3, #14
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b298      	uxth	r0, r3
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	4914      	ldr	r1, [pc, #80]	; (8003b10 <motor_setEnable+0x238>)
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4603      	mov	r3, r0
 8003ad0:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8003ad2:	e017      	b.n	8003b04 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8003ad4:	79fa      	ldrb	r2, [r7, #7]
 8003ad6:	490e      	ldr	r1, [pc, #56]	; (8003b10 <motor_setEnable+0x238>)
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	330e      	adds	r3, #14
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b298      	uxth	r0, r3
 8003ae8:	79fa      	ldrb	r2, [r7, #7]
 8003aea:	4909      	ldr	r1, [pc, #36]	; (8003b10 <motor_setEnable+0x238>)
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4603      	mov	r3, r0
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8003afe:	e001      	b.n	8003b04 <motor_setEnable+0x22c>
 8003b00:	e000      	b.n	8003b04 <motor_setEnable+0x22c>
		return;
 8003b02:	bf00      	nop
}
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000850 	.word	0x20000850

08003b14 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	71fb      	strb	r3, [r7, #7]
 8003b20:	4613      	mov	r3, r2
 8003b22:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80d9 	bne.w	8003cde <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 8003b2c:	79fa      	ldrb	r2, [r7, #7]
 8003b2e:	496f      	ldr	r1, [pc, #444]	; (8003cec <motor_setTorque+0x1d8>)
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	79ba      	ldrb	r2, [r7, #6]
 8003b3e:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d114      	bne.n	8003b70 <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 8003b46:	79f9      	ldrb	r1, [r7, #7]
 8003b48:	79fa      	ldrb	r2, [r7, #7]
 8003b4a:	4868      	ldr	r0, [pc, #416]	; (8003cec <motor_setTorque+0x1d8>)
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4403      	add	r3, r0
 8003b56:	330e      	adds	r3, #14
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b298      	uxth	r0, r3
 8003b5c:	4963      	ldr	r1, [pc, #396]	; (8003cec <motor_setTorque+0x1d8>)
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	330a      	adds	r3, #10
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e031      	b.n	8003bd4 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8003b70:	79fa      	ldrb	r2, [r7, #7]
 8003b72:	495e      	ldr	r1, [pc, #376]	; (8003cec <motor_setTorque+0x1d8>)
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	330c      	adds	r3, #12
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 8003b86:	79fa      	ldrb	r2, [r7, #7]
 8003b88:	4958      	ldr	r1, [pc, #352]	; (8003cec <motor_setTorque+0x1d8>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3310      	adds	r3, #16
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8003b9a:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 8003b9c:	79fa      	ldrb	r2, [r7, #7]
 8003b9e:	4953      	ldr	r1, [pc, #332]	; (8003cec <motor_setTorque+0x1d8>)
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3312      	adds	r3, #18
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	2264      	movs	r2, #100	; 0x64
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	f000 f89a 	bl	8003cf0 <motor_map>
 8003bbc:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 8003bbe:	79fa      	ldrb	r2, [r7, #7]
 8003bc0:	b298      	uxth	r0, r3
 8003bc2:	494a      	ldr	r1, [pc, #296]	; (8003cec <motor_setTorque+0x1d8>)
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	330a      	adds	r3, #10
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8003bd4:	79fa      	ldrb	r2, [r7, #7]
 8003bd6:	4945      	ldr	r1, [pc, #276]	; (8003cec <motor_setTorque+0x1d8>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3308      	adds	r3, #8
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d17a      	bne.n	8003ce2 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8003bec:	79fa      	ldrb	r2, [r7, #7]
 8003bee:	493f      	ldr	r1, [pc, #252]	; (8003cec <motor_setTorque+0x1d8>)
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <motor_setTorque+0x11a>
 8003c02:	79fa      	ldrb	r2, [r7, #7]
 8003c04:	4939      	ldr	r1, [pc, #228]	; (8003cec <motor_setTorque+0x1d8>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	330a      	adds	r3, #10
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b298      	uxth	r0, r3
 8003c16:	79fa      	ldrb	r2, [r7, #7]
 8003c18:	4934      	ldr	r1, [pc, #208]	; (8003cec <motor_setTorque+0x1d8>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4602      	mov	r2, r0
 8003c2a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8003c2c:	e059      	b.n	8003ce2 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8003c2e:	79fa      	ldrb	r2, [r7, #7]
 8003c30:	492e      	ldr	r1, [pc, #184]	; (8003cec <motor_setTorque+0x1d8>)
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d115      	bne.n	8003c70 <motor_setTorque+0x15c>
 8003c44:	79fa      	ldrb	r2, [r7, #7]
 8003c46:	4929      	ldr	r1, [pc, #164]	; (8003cec <motor_setTorque+0x1d8>)
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	330a      	adds	r3, #10
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b298      	uxth	r0, r3
 8003c58:	79fa      	ldrb	r2, [r7, #7]
 8003c5a:	4924      	ldr	r1, [pc, #144]	; (8003cec <motor_setTorque+0x1d8>)
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8003c6e:	e038      	b.n	8003ce2 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8003c70:	79fa      	ldrb	r2, [r7, #7]
 8003c72:	491e      	ldr	r1, [pc, #120]	; (8003cec <motor_setTorque+0x1d8>)
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3304      	adds	r3, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d115      	bne.n	8003cb2 <motor_setTorque+0x19e>
 8003c86:	79fa      	ldrb	r2, [r7, #7]
 8003c88:	4918      	ldr	r1, [pc, #96]	; (8003cec <motor_setTorque+0x1d8>)
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	330a      	adds	r3, #10
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b298      	uxth	r0, r3
 8003c9a:	79fa      	ldrb	r2, [r7, #7]
 8003c9c:	4913      	ldr	r1, [pc, #76]	; (8003cec <motor_setTorque+0x1d8>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4603      	mov	r3, r0
 8003cae:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8003cb0:	e017      	b.n	8003ce2 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8003cb2:	79fa      	ldrb	r2, [r7, #7]
 8003cb4:	490d      	ldr	r1, [pc, #52]	; (8003cec <motor_setTorque+0x1d8>)
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	330a      	adds	r3, #10
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b298      	uxth	r0, r3
 8003cc6:	79fa      	ldrb	r2, [r7, #7]
 8003cc8:	4908      	ldr	r1, [pc, #32]	; (8003cec <motor_setTorque+0x1d8>)
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8003cdc:	e001      	b.n	8003ce2 <motor_setTorque+0x1ce>
		return;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <motor_setTorque+0x1d0>
	return;
 8003ce2:	bf00      	nop
}
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000850 	.word	0x20000850

08003cf0 <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	1a8a      	subs	r2, r1, r2
 8003d0a:	fb03 f202 	mul.w	r2, r3, r2
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	fb92 f2f3 	sdiv	r2, r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4413      	add	r3, r2
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d821      	bhi.n	8003d80 <cfg_NodeMotorVarProp+0x58>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <cfg_NodeMotorVarProp+0x1c>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d5d 	.word	0x08003d5d
 8003d48:	08003d63 	.word	0x08003d63
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	08003d6f 	.word	0x08003d6f
 8003d54:	08003d75 	.word	0x08003d75
 8003d58:	08003d7b 	.word	0x08003d7b
	{
		case MOTOR_ENA:				str = "Enable"; break;
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <cfg_NodeMotorVarProp+0xf0>)
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e010      	b.n	8003d84 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 8003d62:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <cfg_NodeMotorVarProp+0xf4>)
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e00d      	b.n	8003d84 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 8003d68:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <cfg_NodeMotorVarProp+0xf8>)
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e00a      	b.n	8003d84 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <cfg_NodeMotorVarProp+0xfc>)
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e007      	b.n	8003d84 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 8003d74:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <cfg_NodeMotorVarProp+0x100>)
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e004      	b.n	8003d84 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 8003d7a:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <cfg_NodeMotorVarProp+0x104>)
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e001      	b.n	8003d84 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 8003d80:	2302      	movs	r3, #2
 8003d82:	e043      	b.n	8003e0c <cfg_NodeMotorVarProp+0xe4>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00f      	beq.n	8003daa <cfg_NodeMotorVarProp+0x82>
 8003d8a:	e007      	b.n	8003d9c <cfg_NodeMotorVarProp+0x74>
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	1c53      	adds	r3, r2, #1
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1c59      	adds	r1, r3, #1
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f3      	bne.n	8003d8c <cfg_NodeMotorVarProp+0x64>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02b      	beq.n	8003e08 <cfg_NodeMotorVarProp+0xe0>
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d826      	bhi.n	8003e04 <cfg_NodeMotorVarProp+0xdc>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <cfg_NodeMotorVarProp+0x94>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dd5 	.word	0x08003dd5
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	08003de5 	.word	0x08003de5
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003df5 	.word	0x08003df5
 8003dd0:	08003dfd 	.word	0x08003dfd
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2223      	movs	r2, #35	; 0x23
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e016      	b.n	8003e0a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e012      	b.n	8003e0a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2212      	movs	r2, #18
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	e00e      	b.n	8003e0a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2222      	movs	r2, #34	; 0x22
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e00a      	b.n	8003e0a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2222      	movs	r2, #34	; 0x22
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e006      	b.n	8003e0a <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2222      	movs	r2, #34	; 0x22
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e002      	b.n	8003e0a <cfg_NodeMotorVarProp+0xe2>
		default: return CFG_ERROR_VARID;
 8003e04:	2302      	movs	r3, #2
 8003e06:	e001      	b.n	8003e0c <cfg_NodeMotorVarProp+0xe4>
	}
	return CFG_ERROR_NONE;
 8003e08:	bf00      	nop
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	080097a0 	.word	0x080097a0
 8003e1c:	080097a8 	.word	0x080097a8
 8003e20:	080097b8 	.word	0x080097b8
 8003e24:	080097c4 	.word	0x080097c4
 8003e28:	080097d0 	.word	0x080097d0
 8003e2c:	080097d8 	.word	0x080097d8

08003e30 <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03e      	beq.n	8003ec0 <cfg_NodeMotorVarGet+0x90>
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d839      	bhi.n	8003ebc <cfg_NodeMotorVarGet+0x8c>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <cfg_NodeMotorVarGet+0x20>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e69 	.word	0x08003e69
 8003e54:	08003e77 	.word	0x08003e77
 8003e58:	08003e85 	.word	0x08003e85
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003ea1 	.word	0x08003ea1
 8003e64:	08003eaf 	.word	0x08003eaf
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <cfg_NodeMotorVarGet+0xa0>)
 8003e6a:	7a1b      	ldrb	r3, [r3, #8]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e025      	b.n	8003ec2 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <cfg_NodeMotorVarGet+0xa0>)
 8003e78:	7b1b      	ldrb	r3, [r3, #12]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e01e      	b.n	8003ec2 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <cfg_NodeMotorVarGet+0xa0>)
 8003e86:	895b      	ldrh	r3, [r3, #10]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e017      	b.n	8003ec2 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <cfg_NodeMotorVarGet+0xa0>)
 8003e94:	89db      	ldrh	r3, [r3, #14]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e010      	b.n	8003ec2 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <cfg_NodeMotorVarGet+0xa0>)
 8003ea2:	8a1b      	ldrh	r3, [r3, #16]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e009      	b.n	8003ec2 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <cfg_NodeMotorVarGet+0xa0>)
 8003eb0:	8a5b      	ldrh	r3, [r3, #18]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e002      	b.n	8003ec2 <cfg_NodeMotorVarGet+0x92>
		default: return CFG_ERROR_VARID;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e001      	b.n	8003ec4 <cfg_NodeMotorVarGet+0x94>
	}
	return CFG_ERROR_NONE;
 8003ec0:	bf00      	nop
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000850 	.word	0x20000850

08003ed4 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d036      	beq.n	8003f54 <cfg_NodeMotorVarSet+0x80>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d831      	bhi.n	8003f50 <cfg_NodeMotorVarSet+0x7c>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <cfg_NodeMotorVarSet+0x20>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f0d 	.word	0x08003f0d
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f59 	.word	0x08003f59
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f45 	.word	0x08003f45
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	4619      	mov	r1, r3
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7ff fcdf 	bl	80038d8 <motor_setEnable>
 8003f1a:	e01e      	b.n	8003f5a <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7ff fdf5 	bl	8003b14 <motor_setTorque>
 8003f2a:	e016      	b.n	8003f5a <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <cfg_NodeMotorVarSet+0x90>)
 8003f34:	81da      	strh	r2, [r3, #14]
 8003f36:	e010      	b.n	8003f5a <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <cfg_NodeMotorVarSet+0x90>)
 8003f40:	821a      	strh	r2, [r3, #16]
 8003f42:	e00a      	b.n	8003f5a <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <cfg_NodeMotorVarSet+0x90>)
 8003f4c:	825a      	strh	r2, [r3, #18]
 8003f4e:	e004      	b.n	8003f5a <cfg_NodeMotorVarSet+0x86>
		default: return CFG_ERROR_VARID;
 8003f50:	2302      	movs	r3, #2
 8003f52:	e003      	b.n	8003f5c <cfg_NodeMotorVarSet+0x88>
	}
	return CFG_ERROR_NONE;
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
 8003f58:	bf00      	nop
	return CFG_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000850 	.word	0x20000850

08003f68 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8003f70:	2300      	movs	r3, #0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e010      	b.n	8003f98 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <rc_Timer+0x44>)
 8003f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <rc_Timer+0x2a>
			rc_info.timer[i]--;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	4a09      	ldr	r2, [pc, #36]	; (8003fac <rc_Timer+0x44>)
 8003f86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	4907      	ldr	r1, [pc, #28]	; (8003fac <rc_Timer+0x44>)
 8003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3301      	adds	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d9eb      	bls.n	8003f76 <rc_Timer+0xe>
		}
	}

	return;
 8003f9e:	bf00      	nop
}
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000874 	.word	0x20000874

08003fb0 <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <rc_InitTask+0x4c>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <rc_InitTask+0x4c>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <rc_InitTask+0x4c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <rc_InitTask+0x4c>)
 8003fce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <rc_InitTask+0x4c>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <rc_InitTask+0x4c>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <rc_InitTask+0x4c>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <rc_InitTask+0x4c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	721a      	strb	r2, [r3, #8]

	return;
 8003ff0:	bf00      	nop
}
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000874 	.word	0x20000874

08004000 <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 8004006:	4b53      	ldr	r3, [pc, #332]	; (8004154 <rc_Task+0x154>)
 8004008:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800400c:	2b00      	cmp	r3, #0
 800400e:	d047      	beq.n	80040a0 <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <rc_Task+0x154>)
 8004012:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004016:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <rc_Task+0x154>)
 8004018:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 800401a:	4b4e      	ldr	r3, [pc, #312]	; (8004154 <rc_Task+0x154>)
 800401c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <rc_Task+0x2e>
			rc_info.connected = 1;
 8004026:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <rc_Task+0x154>)
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 800402e:	4b49      	ldr	r3, [pc, #292]	; (8004154 <rc_Task+0x154>)
 8004030:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004034:	b2db      	uxtb	r3, r3
 8004036:	b25a      	sxtb	r2, r3
 8004038:	4b46      	ldr	r3, [pc, #280]	; (8004154 <rc_Task+0x154>)
 800403a:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 800403e:	4b45      	ldr	r3, [pc, #276]	; (8004154 <rc_Task+0x154>)
 8004040:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004044:	b2db      	uxtb	r3, r3
 8004046:	b25a      	sxtb	r2, r3
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <rc_Task+0x154>)
 800404a:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 800404e:	4b41      	ldr	r3, [pc, #260]	; (8004154 <rc_Task+0x154>)
 8004050:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004054:	b2db      	uxtb	r3, r3
 8004056:	b25a      	sxtb	r2, r3
 8004058:	4b3e      	ldr	r3, [pc, #248]	; (8004154 <rc_Task+0x154>)
 800405a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 800405e:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <rc_Task+0x154>)
 8004060:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004064:	b2db      	uxtb	r3, r3
 8004066:	b25a      	sxtb	r2, r3
 8004068:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <rc_Task+0x154>)
 800406a:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <rc_Task+0x154>)
 8004070:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b37      	ldr	r3, [pc, #220]	; (8004154 <rc_Task+0x154>)
 8004078:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 800407c:	4b35      	ldr	r3, [pc, #212]	; (8004154 <rc_Task+0x154>)
 800407e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004082:	b2da      	uxtb	r2, r3
 8004084:	4b33      	ldr	r3, [pc, #204]	; (8004154 <rc_Task+0x154>)
 8004086:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 800408a:	4b32      	ldr	r3, [pc, #200]	; (8004154 <rc_Task+0x154>)
 800408c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004090:	3301      	adds	r3, #1
 8004092:	4a30      	ldr	r2, [pc, #192]	; (8004154 <rc_Task+0x154>)
 8004094:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <rc_Task+0x154>)
 800409a:	2200      	movs	r2, #0
 800409c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <rc_Task+0x154>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <rc_Task+0xbc>
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <rc_Task+0x154>)
 80040aa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d103      	bne.n	80040bc <rc_Task+0xbc>
		rc_info.connected = 0;
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <rc_Task+0x154>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <rc_Task+0x154>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d142      	bne.n	800414a <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <rc_Task+0x154>)
 80040c6:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d13c      	bne.n	800414a <rc_Task+0x14a>
 80040d0:	4b20      	ldr	r3, [pc, #128]	; (8004154 <rc_Task+0x154>)
 80040d2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d136      	bne.n	800414a <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <rc_Task+0x154>)
 80040de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040e2:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 80040e4:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 80040e8:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f904 	bl	80042fc <rc_AddTxData>
		tmp_u8 = 5;
 80040f4:	2305      	movs	r3, #5
 80040f6:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f8fd 	bl	80042fc <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8004102:	4b15      	ldr	r3, [pc, #84]	; (8004158 <rc_Task+0x158>)
 8004104:	7b5b      	ldrb	r3, [r3, #13]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f8f4 	bl	80042fc <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <rc_Task+0x15c>)
 8004116:	89db      	ldrh	r3, [r3, #14]
 8004118:	b29b      	uxth	r3, r3
 800411a:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f8eb 	bl	80042fc <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <rc_Task+0x160>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	480d      	ldr	r0, [pc, #52]	; (8004164 <rc_Task+0x164>)
 8004130:	f7fe fa60 	bl	80025f4 <crc16_calc>
 8004134:	4603      	mov	r3, r0
 8004136:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	2102      	movs	r1, #2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f8dd 	bl	80042fc <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <rc_Task+0x160>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
	}

	return;
 8004148:	bf00      	nop
 800414a:	bf00      	nop
}
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000874 	.word	0x20000874
 8004158:	20000120 	.word	0x20000120
 800415c:	20000174 	.word	0x20000174
 8004160:	20000a24 	.word	0x20000a24
 8004164:	200009a4 	.word	0x200009a4

08004168 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004172:	4b4f      	ldr	r3, [pc, #316]	; (80042b0 <rc_RcvData+0x148>)
 8004174:	899b      	ldrh	r3, [r3, #12]
 8004176:	b29b      	uxth	r3, r3
 8004178:	3301      	adds	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004180:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8004182:	4b4b      	ldr	r3, [pc, #300]	; (80042b0 <rc_RcvData+0x148>)
 8004184:	4611      	mov	r1, r2
 8004186:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004188:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <rc_RcvData+0x148>)
 800418a:	4413      	add	r3, r2
 800418c:	79fa      	ldrb	r2, [r7, #7]
 800418e:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8004190:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <rc_RcvData+0x148>)
 8004192:	7a1b      	ldrb	r3, [r3, #8]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d12a      	bne.n	80041f0 <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 800419a:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <rc_RcvData+0x148>)
 800419c:	899b      	ldrh	r3, [r3, #12]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b02      	subs	r3, #2
 80041a2:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 80041a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	4841      	ldr	r0, [pc, #260]	; (80042b4 <rc_RcvData+0x14c>)
 80041ae:	f000 f885 	bl	80042bc <rc_ringBufRead16b>
 80041b2:	4603      	mov	r3, r0
 80041b4:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 80041bc:	4293      	cmp	r3, r2
 80041be:	d173      	bne.n	80042a8 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 80041c0:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <rc_RcvData+0x148>)
 80041c2:	899b      	ldrh	r3, [r3, #12]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b02      	subs	r3, #2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <rc_RcvData+0x148>)
 80041d2:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <rc_RcvData+0x150>)
 80041da:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b02      	subs	r3, #2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <rc_RcvData+0x148>)
 80041e6:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <rc_RcvData+0x148>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 80041ee:	e05b      	b.n	80042a8 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 80041f0:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <rc_RcvData+0x148>)
 80041f2:	7a1b      	ldrb	r3, [r3, #8]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d156      	bne.n	80042a8 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <rc_RcvData+0x150>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <rc_RcvData+0x150>)
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <rc_RcvData+0x150>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d14c      	bne.n	80042a8 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <rc_RcvData+0x148>)
 8004210:	2200      	movs	r2, #0
 8004212:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004214:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <rc_RcvData+0x148>)
 8004216:	895b      	ldrh	r3, [r3, #10]
 8004218:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <rc_RcvData+0x148>)
 800421c:	89db      	ldrh	r3, [r3, #14]
 800421e:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004220:	3303      	adds	r3, #3
 8004222:	b29a      	uxth	r2, r3
 8004224:	237f      	movs	r3, #127	; 0x7f
 8004226:	4823      	ldr	r0, [pc, #140]	; (80042b4 <rc_RcvData+0x14c>)
 8004228:	f7fe fa0e 	bl	8002648 <crc16_RingBuf>
 800422c:	4603      	mov	r3, r0
 800422e:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8004230:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <rc_RcvData+0x148>)
 8004232:	899b      	ldrh	r3, [r3, #12]
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 800423a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423e:	b29b      	uxth	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	481c      	ldr	r0, [pc, #112]	; (80042b4 <rc_RcvData+0x14c>)
 8004244:	f000 f83a 	bl	80042bc <rc_ringBufRead16b>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	89bb      	ldrh	r3, [r7, #12]
 800424e:	4293      	cmp	r3, r2
 8004250:	d12a      	bne.n	80042a8 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <rc_RcvData+0x148>)
 8004254:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004258:	2b00      	cmp	r3, #0
 800425a:	d125      	bne.n	80042a8 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 800425c:	2300      	movs	r3, #0
 800425e:	81fb      	strh	r3, [r7, #14]
 8004260:	e014      	b.n	800428c <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <rc_RcvData+0x148>)
 8004264:	895b      	ldrh	r3, [r3, #10]
 8004266:	b29b      	uxth	r3, r3
 8004268:	1cda      	adds	r2, r3, #3
 800426a:	89fb      	ldrh	r3, [r7, #14]
 800426c:	4413      	add	r3, r2
 800426e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8004272:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004274:	490e      	ldr	r1, [pc, #56]	; (80042b0 <rc_RcvData+0x148>)
 8004276:	440a      	add	r2, r1
 8004278:	7c12      	ldrb	r2, [r2, #16]
 800427a:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 800427c:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <rc_RcvData+0x148>)
 800427e:	4413      	add	r3, r2
 8004280:	460a      	mov	r2, r1
 8004282:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	3301      	adds	r3, #1
 800428a:	81fb      	strh	r3, [r7, #14]
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <rc_RcvData+0x148>)
 800428e:	89db      	ldrh	r3, [r3, #14]
 8004290:	b29b      	uxth	r3, r3
 8004292:	89fa      	ldrh	r2, [r7, #14]
 8004294:	429a      	cmp	r2, r3
 8004296:	d3e4      	bcc.n	8004262 <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <rc_RcvData+0x148>)
 800429a:	89db      	ldrh	r3, [r3, #14]
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <rc_RcvData+0x148>)
 80042a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
}
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000874 	.word	0x20000874
 80042b4:	20000884 	.word	0x20000884
 80042b8:	20000a28 	.word	0x20000a28

080042bc <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 80042d8:	89fb      	ldrh	r3, [r7, #14]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	b29a      	uxth	r2, r3
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	440b      	add	r3, r1
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	81fb      	strh	r3, [r7, #14]

	return tmp;
 80042ec:	89fb      	ldrh	r3, [r7, #14]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <rc_AddTxData+0x40>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d80f      	bhi.n	8004334 <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <rc_AddTxData+0x40>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a09      	ldr	r2, [pc, #36]	; (8004340 <rc_AddTxData+0x44>)
 800431a:	4413      	add	r3, r2
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f005 f99f 	bl	8009664 <memcpy>
	_rc_tx_buf_len += len;
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <rc_AddTxData+0x40>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	4413      	add	r3, r2
 800432e:	4a03      	ldr	r2, [pc, #12]	; (800433c <rc_AddTxData+0x40>)
 8004330:	6013      	str	r3, [r2, #0]

	return;
 8004332:	e000      	b.n	8004336 <rc_AddTxData+0x3a>
		return;
 8004334:	bf00      	nop
}
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000a24 	.word	0x20000a24
 8004340:	200009a4 	.word	0x200009a4

08004344 <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	2b09      	cmp	r3, #9
 8004356:	d835      	bhi.n	80043c4 <cfg_NodeRcVarProp+0x80>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <cfg_NodeRcVarProp+0x1c>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004389 	.word	0x08004389
 8004364:	0800438f 	.word	0x0800438f
 8004368:	08004395 	.word	0x08004395
 800436c:	0800439b 	.word	0x0800439b
 8004370:	080043a1 	.word	0x080043a1
 8004374:	080043a7 	.word	0x080043a7
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043b3 	.word	0x080043b3
 8004380:	080043b9 	.word	0x080043b9
 8004384:	080043bf 	.word	0x080043bf
	{
		case RC_ENA:				str = "Enable"; break;
 8004388:	4b40      	ldr	r3, [pc, #256]	; (800448c <cfg_NodeRcVarProp+0x148>)
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e01c      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 800438e:	4b40      	ldr	r3, [pc, #256]	; (8004490 <cfg_NodeRcVarProp+0x14c>)
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e019      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <cfg_NodeRcVarProp+0x150>)
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e016      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <cfg_NodeRcVarProp+0x154>)
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e013      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 80043a0:	4b3e      	ldr	r3, [pc, #248]	; (800449c <cfg_NodeRcVarProp+0x158>)
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e010      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <cfg_NodeRcVarProp+0x15c>)
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e00d      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 80043ac:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <cfg_NodeRcVarProp+0x160>)
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e00a      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 80043b2:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <cfg_NodeRcVarProp+0x164>)
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e007      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 80043b8:	4b3c      	ldr	r3, [pc, #240]	; (80044ac <cfg_NodeRcVarProp+0x168>)
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e004      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <cfg_NodeRcVarProp+0x16c>)
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e001      	b.n	80043c8 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 80043c4:	2302      	movs	r3, #2
 80043c6:	e05b      	b.n	8004480 <cfg_NodeRcVarProp+0x13c>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00f      	beq.n	80043ee <cfg_NodeRcVarProp+0xaa>
 80043ce:	e007      	b.n	80043e0 <cfg_NodeRcVarProp+0x9c>
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	1c53      	adds	r3, r2, #1
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1c59      	adds	r1, r3, #1
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f3      	bne.n	80043d0 <cfg_NodeRcVarProp+0x8c>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d043      	beq.n	800447c <cfg_NodeRcVarProp+0x138>
 80043f4:	89fb      	ldrh	r3, [r7, #14]
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d83e      	bhi.n	8004478 <cfg_NodeRcVarProp+0x134>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <cfg_NodeRcVarProp+0xbc>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004429 	.word	0x08004429
 8004404:	08004431 	.word	0x08004431
 8004408:	08004439 	.word	0x08004439
 800440c:	08004441 	.word	0x08004441
 8004410:	08004449 	.word	0x08004449
 8004414:	08004451 	.word	0x08004451
 8004418:	08004459 	.word	0x08004459
 800441c:	08004461 	.word	0x08004461
 8004420:	08004469 	.word	0x08004469
 8004424:	08004471 	.word	0x08004471
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2223      	movs	r2, #35	; 0x23
 800442c:	801a      	strh	r2, [r3, #0]
 800442e:	e026      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2222      	movs	r2, #34	; 0x22
 8004434:	801a      	strh	r2, [r3, #0]
 8004436:	e022      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2223      	movs	r2, #35	; 0x23
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e01e      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2212      	movs	r2, #18
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e01a      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2211      	movs	r2, #17
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	e016      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2211      	movs	r2, #17
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	e012      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2211      	movs	r2, #17
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e00e      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2211      	movs	r2, #17
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	e00a      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2213      	movs	r2, #19
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	e006      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2213      	movs	r2, #19
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e002      	b.n	800447e <cfg_NodeRcVarProp+0x13a>
		default: return CFG_ERROR_VARID;
 8004478:	2302      	movs	r3, #2
 800447a:	e001      	b.n	8004480 <cfg_NodeRcVarProp+0x13c>
	}
	return CFG_ERROR_NONE;
 800447c:	bf00      	nop
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	080097e0 	.word	0x080097e0
 8004490:	080097e8 	.word	0x080097e8
 8004494:	08009800 	.word	0x08009800
 8004498:	08009810 	.word	0x08009810
 800449c:	08009820 	.word	0x08009820
 80044a0:	0800982c 	.word	0x0800982c
 80044a4:	08009838 	.word	0x08009838
 80044a8:	08009848 	.word	0x08009848
 80044ac:	08009858 	.word	0x08009858
 80044b0:	08009864 	.word	0x08009864

080044b4 <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d06a      	beq.n	800459c <cfg_NodeRcVarGet+0xe8>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d865      	bhi.n	8004598 <cfg_NodeRcVarGet+0xe4>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <cfg_NodeRcVarGet+0x20>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	0800451d 	.word	0x0800451d
 80044e0:	0800452d 	.word	0x0800452d
 80044e4:	08004539 	.word	0x08004539
 80044e8:	08004549 	.word	0x08004549
 80044ec:	08004559 	.word	0x08004559
 80044f0:	08004569 	.word	0x08004569
 80044f4:	08004579 	.word	0x08004579
 80044f8:	08004589 	.word	0x08004589
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 80044fe:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e048      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800450e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e040      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800451e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e038      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 800452c:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800452e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e032      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 8004538:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800453a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800453e:	b25b      	sxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e02a      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 8004548:	4b18      	ldr	r3, [pc, #96]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800454a:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800454e:	b25b      	sxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e022      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800455a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800455e:	b25b      	sxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e01a      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800456a:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800456e:	b25b      	sxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e012      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800457a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e00a      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <cfg_NodeRcVarGet+0xf8>)
 800458a:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e002      	b.n	800459e <cfg_NodeRcVarGet+0xea>
		default: return CFG_ERROR_VARID;
 8004598:	2302      	movs	r3, #2
 800459a:	e001      	b.n	80045a0 <cfg_NodeRcVarGet+0xec>
	}
	return CFG_ERROR_NONE;
 800459c:	bf00      	nop
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000874 	.word	0x20000874

080045b0 <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d031      	beq.n	8004626 <cfg_NodeRcVarSet+0x76>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b09      	cmp	r3, #9
 80045c6:	d82c      	bhi.n	8004622 <cfg_NodeRcVarSet+0x72>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <cfg_NodeRcVarSet+0x20>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004615 	.word	0x08004615
 80045dc:	0800462b 	.word	0x0800462b
 80045e0:	0800462b 	.word	0x0800462b
 80045e4:	0800462b 	.word	0x0800462b
 80045e8:	0800462b 	.word	0x0800462b
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	0800462b 	.word	0x0800462b
 80045f4:	0800462b 	.word	0x0800462b
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <cfg_NodeRcVarSet+0x8c>)
 8004600:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004604:	e012      	b.n	800462c <cfg_NodeRcVarSet+0x7c>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <cfg_NodeRcVarSet+0x8c>)
 800460e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8004612:	e00b      	b.n	800462c <cfg_NodeRcVarSet+0x7c>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <cfg_NodeRcVarSet+0x8c>)
 800461c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004620:	e004      	b.n	800462c <cfg_NodeRcVarSet+0x7c>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 8004622:	2302      	movs	r3, #2
 8004624:	e003      	b.n	800462e <cfg_NodeRcVarSet+0x7e>
	}
	return CFG_ERROR_NONE;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <cfg_NodeRcVarSet+0x7c>
		case RC_RX_PKT_CNT:			break;
 800462a:	bf00      	nop
	return CFG_ERROR_NONE;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000874 	.word	0x20000874

08004640 <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
 800464c:	e014      	b.n	8004678 <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <servo_Timer+0x4c>)
 8004652:	330c      	adds	r3, #12
 8004654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <servo_Timer+0x32>
			servo_info.timer[i]--;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	490b      	ldr	r1, [pc, #44]	; (800468c <servo_Timer+0x4c>)
 8004660:	f103 020c 	add.w	r2, r3, #12
 8004664:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004668:	3a01      	subs	r2, #1
 800466a:	4908      	ldr	r1, [pc, #32]	; (800468c <servo_Timer+0x4c>)
 800466c:	330c      	adds	r3, #12
 800466e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	3301      	adds	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0e7      	beq.n	800464e <servo_Timer+0xe>
		}
	}

	return;
 800467e:	bf00      	nop
}
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000a2c 	.word	0x20000a2c

08004690 <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 8004696:	4b3d      	ldr	r3, [pc, #244]	; (800478c <servo_InitTask+0xfc>)
 8004698:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <servo_InitTask+0x100>)
 800469a:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <servo_InitTask+0xfc>)
 800469e:	2200      	movs	r2, #0
 80046a0:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 80046a2:	4b3a      	ldr	r3, [pc, #232]	; (800478c <servo_InitTask+0xfc>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <servo_InitTask+0xfc>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 80046ae:	4b37      	ldr	r3, [pc, #220]	; (800478c <servo_InitTask+0xfc>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 0;
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <servo_InitTask+0xfc>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 90;
 80046ba:	4b34      	ldr	r3, [pc, #208]	; (800478c <servo_InitTask+0xfc>)
 80046bc:	225a      	movs	r2, #90	; 0x5a
 80046be:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 180;
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <servo_InitTask+0xfc>)
 80046c2:	22b4      	movs	r2, #180	; 0xb4
 80046c4:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <servo_InitTask+0xfc>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 80046cc:	4b2f      	ldr	r3, [pc, #188]	; (800478c <servo_InitTask+0xfc>)
 80046ce:	4a30      	ldr	r2, [pc, #192]	; (8004790 <servo_InitTask+0x100>)
 80046d0:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <servo_InitTask+0xfc>)
 80046d4:	2204      	movs	r2, #4
 80046d6:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <servo_InitTask+0xfc>)
 80046da:	2200      	movs	r2, #0
 80046dc:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 80046de:	4b2b      	ldr	r3, [pc, #172]	; (800478c <servo_InitTask+0xfc>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 80046e4:	4b29      	ldr	r3, [pc, #164]	; (800478c <servo_InitTask+0xfc>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 0;
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <servo_InitTask+0xfc>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <servo_InitTask+0xfc>)
 80046f4:	225a      	movs	r2, #90	; 0x5a
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 180;
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <servo_InitTask+0xfc>)
 80046fa:	22b4      	movs	r2, #180	; 0xb4
 80046fc:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <servo_InitTask+0xfc>)
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8004706:	2300      	movs	r3, #0
 8004708:	71fb      	strb	r3, [r7, #7]
 800470a:	e02a      	b.n	8004762 <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 800470c:	79fa      	ldrb	r2, [r7, #7]
 800470e:	491f      	ldr	r1, [pc, #124]	; (800478c <servo_InitTask+0xfc>)
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	440b      	add	r3, r1
 800471a:	330a      	adds	r3, #10
 800471c:	2200      	movs	r2, #0
 800471e:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 8004720:	79fa      	ldrb	r2, [r7, #7]
 8004722:	491a      	ldr	r1, [pc, #104]	; (800478c <servo_InitTask+0xfc>)
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	440b      	add	r3, r1
 800472e:	330c      	adds	r3, #12
 8004730:	2200      	movs	r2, #0
 8004732:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 8004734:	79fa      	ldrb	r2, [r7, #7]
 8004736:	4915      	ldr	r1, [pc, #84]	; (800478c <servo_InitTask+0xfc>)
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	440b      	add	r3, r1
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	79fa      	ldrb	r2, [r7, #7]
 8004746:	4911      	ldr	r1, [pc, #68]	; (800478c <servo_InitTask+0xfc>)
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3304      	adds	r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	f002 ffe6 	bl	8007728 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	3301      	adds	r3, #1
 8004760:	71fb      	strb	r3, [r7, #7]
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d9d1      	bls.n	800470c <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <servo_InitTask+0xfc>)
 800476a:	8a5b      	ldrh	r3, [r3, #18]
 800476c:	b29b      	uxth	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	2000      	movs	r0, #0
 8004772:	f000 f82b 	bl	80047cc <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <servo_InitTask+0xfc>)
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	4619      	mov	r1, r3
 800477e:	2001      	movs	r0, #1
 8004780:	f000 f824 	bl	80047cc <servo_setAng>

	return;
 8004784:	bf00      	nop
}
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000a2c 	.word	0x20000a2c
 8004790:	2000057c 	.word	0x2000057c

08004794 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 8004798:	bf00      	nop
}
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4603      	mov	r3, r0
 80047aa:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	461a      	mov	r2, r3
 80047b0:	0052      	lsls	r2, r2, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	33f5      	adds	r3, #245	; 0xf5
 80047ba:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 80047bc:	89fb      	ldrh	r3, [r7, #14]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	460a      	mov	r2, r1
 80047d6:	71fb      	strb	r3, [r7, #7]
 80047d8:	4613      	mov	r3, r2
 80047da:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	f200 809f 	bhi.w	8004922 <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 80047e4:	79fa      	ldrb	r2, [r7, #7]
 80047e6:	4952      	ldr	r1, [pc, #328]	; (8004930 <servo_setAng+0x164>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	4413      	add	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	440b      	add	r3, r1
 80047f2:	330c      	adds	r3, #12
 80047f4:	88ba      	ldrh	r2, [r7, #4]
 80047f6:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 80047f8:	79fc      	ldrb	r4, [r7, #7]
 80047fa:	88bb      	ldrh	r3, [r7, #4]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ffd0 	bl	80047a2 <servo_angToPWM>
 8004802:	4603      	mov	r3, r0
 8004804:	4619      	mov	r1, r3
 8004806:	4a4a      	ldr	r2, [pc, #296]	; (8004930 <servo_setAng+0x164>)
 8004808:	4623      	mov	r3, r4
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4423      	add	r3, r4
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	330a      	adds	r3, #10
 8004814:	460a      	mov	r2, r1
 8004816:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 8004818:	79fa      	ldrb	r2, [r7, #7]
 800481a:	4945      	ldr	r1, [pc, #276]	; (8004930 <servo_setAng+0x164>)
 800481c:	4613      	mov	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	440b      	add	r3, r1
 8004826:	3308      	adds	r3, #8
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d17a      	bne.n	8004926 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8004830:	79fa      	ldrb	r2, [r7, #7]
 8004832:	493f      	ldr	r1, [pc, #252]	; (8004930 <servo_setAng+0x164>)
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	440b      	add	r3, r1
 800483e:	3304      	adds	r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <servo_setAng+0xa6>
 8004846:	79fa      	ldrb	r2, [r7, #7]
 8004848:	4939      	ldr	r1, [pc, #228]	; (8004930 <servo_setAng+0x164>)
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	330a      	adds	r3, #10
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b298      	uxth	r0, r3
 800485a:	79fa      	ldrb	r2, [r7, #7]
 800485c:	4934      	ldr	r1, [pc, #208]	; (8004930 <servo_setAng+0x164>)
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	440b      	add	r3, r1
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4602      	mov	r2, r0
 800486e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8004870:	e059      	b.n	8004926 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8004872:	79fa      	ldrb	r2, [r7, #7]
 8004874:	492e      	ldr	r1, [pc, #184]	; (8004930 <servo_setAng+0x164>)
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	3304      	adds	r3, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d115      	bne.n	80048b4 <servo_setAng+0xe8>
 8004888:	79fa      	ldrb	r2, [r7, #7]
 800488a:	4929      	ldr	r1, [pc, #164]	; (8004930 <servo_setAng+0x164>)
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	330a      	adds	r3, #10
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b298      	uxth	r0, r3
 800489c:	79fa      	ldrb	r2, [r7, #7]
 800489e:	4924      	ldr	r1, [pc, #144]	; (8004930 <servo_setAng+0x164>)
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4603      	mov	r3, r0
 80048b0:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 80048b2:	e038      	b.n	8004926 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 80048b4:	79fa      	ldrb	r2, [r7, #7]
 80048b6:	491e      	ldr	r1, [pc, #120]	; (8004930 <servo_setAng+0x164>)
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	3304      	adds	r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d115      	bne.n	80048f6 <servo_setAng+0x12a>
 80048ca:	79fa      	ldrb	r2, [r7, #7]
 80048cc:	4918      	ldr	r1, [pc, #96]	; (8004930 <servo_setAng+0x164>)
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	330a      	adds	r3, #10
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b298      	uxth	r0, r3
 80048de:	79fa      	ldrb	r2, [r7, #7]
 80048e0:	4913      	ldr	r1, [pc, #76]	; (8004930 <servo_setAng+0x164>)
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	440b      	add	r3, r1
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4603      	mov	r3, r0
 80048f2:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 80048f4:	e017      	b.n	8004926 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 80048f6:	79fa      	ldrb	r2, [r7, #7]
 80048f8:	490d      	ldr	r1, [pc, #52]	; (8004930 <servo_setAng+0x164>)
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	330a      	adds	r3, #10
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b298      	uxth	r0, r3
 800490a:	79fa      	ldrb	r2, [r7, #7]
 800490c:	4908      	ldr	r1, [pc, #32]	; (8004930 <servo_setAng+0x164>)
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4603      	mov	r3, r0
 800491e:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004920:	e001      	b.n	8004926 <servo_setAng+0x15a>
		return;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <servo_setAng+0x15c>
	return;
 8004926:	bf00      	nop
}
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}
 800492e:	bf00      	nop
 8004930:	20000a2c 	.word	0x20000a2c

08004934 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b087      	sub	sp, #28
 8004938:	af02      	add	r7, sp, #8
 800493a:	4603      	mov	r3, r0
 800493c:	460a      	mov	r2, r1
 800493e:	71fb      	strb	r3, [r7, #7]
 8004940:	4613      	mov	r3, r2
 8004942:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d854      	bhi.n	80049f4 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 800494a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800494e:	2b64      	cmp	r3, #100	; 0x64
 8004950:	dc52      	bgt.n	80049f8 <servo_setPercnet+0xc4>
 8004952:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004956:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800495a:	db4d      	blt.n	80049f8 <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 800495c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	db1f      	blt.n	80049a4 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8004964:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8004968:	79fa      	ldrb	r2, [r7, #7]
 800496a:	4925      	ldr	r1, [pc, #148]	; (8004a00 <servo_setPercnet+0xcc>)
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	440b      	add	r3, r1
 8004976:	3312      	adds	r3, #18
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800497c:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 800497e:	79fa      	ldrb	r2, [r7, #7]
 8004980:	491f      	ldr	r1, [pc, #124]	; (8004a00 <servo_setPercnet+0xcc>)
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	3314      	adds	r3, #20
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4623      	mov	r3, r4
 8004996:	2264      	movs	r2, #100	; 0x64
 8004998:	2100      	movs	r1, #0
 800499a:	f000 f929 	bl	8004bf0 <servo_map>
 800499e:	4603      	mov	r3, r0
 80049a0:	81fb      	strh	r3, [r7, #14]
 80049a2:	e020      	b.n	80049e6 <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 80049a4:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 80049a8:	79fa      	ldrb	r2, [r7, #7]
 80049aa:	4915      	ldr	r1, [pc, #84]	; (8004a00 <servo_setPercnet+0xcc>)
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	3312      	adds	r3, #18
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 80049bc:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 80049be:	79fa      	ldrb	r2, [r7, #7]
 80049c0:	490f      	ldr	r1, [pc, #60]	; (8004a00 <servo_setPercnet+0xcc>)
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	3310      	adds	r3, #16
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4623      	mov	r3, r4
 80049d6:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80049da:	f04f 31ff 	mov.w	r1, #4294967295
 80049de:	f000 f907 	bl	8004bf0 <servo_map>
 80049e2:	4603      	mov	r3, r0
 80049e4:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 80049e6:	89fa      	ldrh	r2, [r7, #14]
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff feed 	bl	80047cc <servo_setAng>

	return;
 80049f2:	e002      	b.n	80049fa <servo_setPercnet+0xc6>
		return;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <servo_setPercnet+0xc6>
		return;
 80049f8:	bf00      	nop
}
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd90      	pop	{r4, r7, pc}
 8004a00:	20000a2c 	.word	0x20000a2c

08004a04 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	71fb      	strb	r3, [r7, #7]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	f200 80e1 	bhi.w	8004bde <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 8004a1c:	79fa      	ldrb	r2, [r7, #7]
 8004a1e:	4973      	ldr	r1, [pc, #460]	; (8004bec <servo_setEnable+0x1e8>)
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	440b      	add	r3, r1
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	79ba      	ldrb	r2, [r7, #6]
 8004a2e:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 8004a30:	79fa      	ldrb	r2, [r7, #7]
 8004a32:	496e      	ldr	r1, [pc, #440]	; (8004bec <servo_setEnable+0x1e8>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3308      	adds	r3, #8
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d178      	bne.n	8004b3a <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8004a48:	79fa      	ldrb	r2, [r7, #7]
 8004a4a:	4968      	ldr	r1, [pc, #416]	; (8004bec <servo_setEnable+0x1e8>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	4413      	add	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	440b      	add	r3, r1
 8004a56:	3304      	adds	r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <servo_setEnable+0x86>
 8004a5e:	79fa      	ldrb	r2, [r7, #7]
 8004a60:	4962      	ldr	r1, [pc, #392]	; (8004bec <servo_setEnable+0x1e8>)
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	330a      	adds	r3, #10
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b298      	uxth	r0, r3
 8004a72:	79fa      	ldrb	r2, [r7, #7]
 8004a74:	495d      	ldr	r1, [pc, #372]	; (8004bec <servo_setEnable+0x1e8>)
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4602      	mov	r2, r0
 8004a86:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 8004a88:	e0aa      	b.n	8004be0 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8004a8a:	79fa      	ldrb	r2, [r7, #7]
 8004a8c:	4957      	ldr	r1, [pc, #348]	; (8004bec <servo_setEnable+0x1e8>)
 8004a8e:	4613      	mov	r3, r2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	4413      	add	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	3304      	adds	r3, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d115      	bne.n	8004acc <servo_setEnable+0xc8>
 8004aa0:	79fa      	ldrb	r2, [r7, #7]
 8004aa2:	4952      	ldr	r1, [pc, #328]	; (8004bec <servo_setEnable+0x1e8>)
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	440b      	add	r3, r1
 8004aae:	330a      	adds	r3, #10
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b298      	uxth	r0, r3
 8004ab4:	79fa      	ldrb	r2, [r7, #7]
 8004ab6:	494d      	ldr	r1, [pc, #308]	; (8004bec <servo_setEnable+0x1e8>)
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	440b      	add	r3, r1
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	6393      	str	r3, [r2, #56]	; 0x38
 8004aca:	e087      	b.n	8004bdc <servo_setEnable+0x1d8>
 8004acc:	79fa      	ldrb	r2, [r7, #7]
 8004ace:	4947      	ldr	r1, [pc, #284]	; (8004bec <servo_setEnable+0x1e8>)
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d115      	bne.n	8004b0e <servo_setEnable+0x10a>
 8004ae2:	79fa      	ldrb	r2, [r7, #7]
 8004ae4:	4941      	ldr	r1, [pc, #260]	; (8004bec <servo_setEnable+0x1e8>)
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	440b      	add	r3, r1
 8004af0:	330a      	adds	r3, #10
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b298      	uxth	r0, r3
 8004af6:	79fa      	ldrb	r2, [r7, #7]
 8004af8:	493c      	ldr	r1, [pc, #240]	; (8004bec <servo_setEnable+0x1e8>)
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4603      	mov	r3, r0
 8004b0a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004b0c:	e066      	b.n	8004bdc <servo_setEnable+0x1d8>
 8004b0e:	79fa      	ldrb	r2, [r7, #7]
 8004b10:	4936      	ldr	r1, [pc, #216]	; (8004bec <servo_setEnable+0x1e8>)
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	330a      	adds	r3, #10
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b298      	uxth	r0, r3
 8004b22:	79fa      	ldrb	r2, [r7, #7]
 8004b24:	4931      	ldr	r1, [pc, #196]	; (8004bec <servo_setEnable+0x1e8>)
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4603      	mov	r3, r0
 8004b36:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004b38:	e052      	b.n	8004be0 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8004b3a:	79fa      	ldrb	r2, [r7, #7]
 8004b3c:	492b      	ldr	r1, [pc, #172]	; (8004bec <servo_setEnable+0x1e8>)
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	440b      	add	r3, r1
 8004b48:	3304      	adds	r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <servo_setEnable+0x164>
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	4926      	ldr	r1, [pc, #152]	; (8004bec <servo_setEnable+0x1e8>)
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	440b      	add	r3, r1
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8004b66:	e03b      	b.n	8004be0 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8004b68:	79fa      	ldrb	r2, [r7, #7]
 8004b6a:	4920      	ldr	r1, [pc, #128]	; (8004bec <servo_setEnable+0x1e8>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	440b      	add	r3, r1
 8004b76:	3304      	adds	r3, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d10b      	bne.n	8004b96 <servo_setEnable+0x192>
 8004b7e:	79fa      	ldrb	r2, [r7, #7]
 8004b80:	491a      	ldr	r1, [pc, #104]	; (8004bec <servo_setEnable+0x1e8>)
 8004b82:	4613      	mov	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	440b      	add	r3, r1
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8004b94:	e024      	b.n	8004be0 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8004b96:	79fa      	ldrb	r2, [r7, #7]
 8004b98:	4914      	ldr	r1, [pc, #80]	; (8004bec <servo_setEnable+0x1e8>)
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d10b      	bne.n	8004bc4 <servo_setEnable+0x1c0>
 8004bac:	79fa      	ldrb	r2, [r7, #7]
 8004bae:	490f      	ldr	r1, [pc, #60]	; (8004bec <servo_setEnable+0x1e8>)
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	440b      	add	r3, r1
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004bc2:	e00d      	b.n	8004be0 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8004bc4:	79fa      	ldrb	r2, [r7, #7]
 8004bc6:	4909      	ldr	r1, [pc, #36]	; (8004bec <servo_setEnable+0x1e8>)
 8004bc8:	4613      	mov	r3, r2
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4413      	add	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	440b      	add	r3, r1
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004bda:	e001      	b.n	8004be0 <servo_setEnable+0x1dc>
 8004bdc:	e000      	b.n	8004be0 <servo_setEnable+0x1dc>
		return;
 8004bde:	bf00      	nop
}
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000a2c 	.word	0x20000a2c

08004bf0 <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	69b9      	ldr	r1, [r7, #24]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	1a8a      	subs	r2, r1, r2
 8004c0a:	fb03 f202 	mul.w	r2, r3, r2
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	1acb      	subs	r3, r1, r3
 8004c14:	fb92 f2f3 	sdiv	r2, r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4413      	add	r3, r2
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	2b0d      	cmp	r3, #13
 8004c3a:	d849      	bhi.n	8004cd0 <cfg_NodeServoVarProp+0xa8>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <cfg_NodeServoVarProp+0x1c>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c7d 	.word	0x08004c7d
 8004c48:	08004c83 	.word	0x08004c83
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c8f 	.word	0x08004c8f
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	08004c9b 	.word	0x08004c9b
 8004c5c:	08004ca1 	.word	0x08004ca1
 8004c60:	08004ca7 	.word	0x08004ca7
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cb3 	.word	0x08004cb3
 8004c6c:	08004cb9 	.word	0x08004cb9
 8004c70:	08004cbf 	.word	0x08004cbf
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004ccb 	.word	0x08004ccb
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 8004c7c:	4b52      	ldr	r3, [pc, #328]	; (8004dc8 <cfg_NodeServoVarProp+0x1a0>)
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e028      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 8004c82:	4b52      	ldr	r3, [pc, #328]	; (8004dcc <cfg_NodeServoVarProp+0x1a4>)
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e025      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 8004c88:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <cfg_NodeServoVarProp+0x1a8>)
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e022      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 8004c8e:	4b51      	ldr	r3, [pc, #324]	; (8004dd4 <cfg_NodeServoVarProp+0x1ac>)
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e01f      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 8004c94:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <cfg_NodeServoVarProp+0x1b0>)
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	e01c      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 8004c9a:	4b50      	ldr	r3, [pc, #320]	; (8004ddc <cfg_NodeServoVarProp+0x1b4>)
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e019      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 8004ca0:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <cfg_NodeServoVarProp+0x1b8>)
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e016      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <cfg_NodeServoVarProp+0x1bc>)
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e013      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 8004cac:	4b4e      	ldr	r3, [pc, #312]	; (8004de8 <cfg_NodeServoVarProp+0x1c0>)
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e010      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 8004cb2:	4b4e      	ldr	r3, [pc, #312]	; (8004dec <cfg_NodeServoVarProp+0x1c4>)
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e00d      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <cfg_NodeServoVarProp+0x1c8>)
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e00a      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 8004cbe:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <cfg_NodeServoVarProp+0x1cc>)
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e007      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 8004cc4:	4b4c      	ldr	r3, [pc, #304]	; (8004df8 <cfg_NodeServoVarProp+0x1d0>)
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e004      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 8004cca:	4b4c      	ldr	r3, [pc, #304]	; (8004dfc <cfg_NodeServoVarProp+0x1d4>)
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e001      	b.n	8004cd4 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e073      	b.n	8004dbc <cfg_NodeServoVarProp+0x194>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00f      	beq.n	8004cfa <cfg_NodeServoVarProp+0xd2>
 8004cda:	e007      	b.n	8004cec <cfg_NodeServoVarProp+0xc4>
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	1c53      	adds	r3, r2, #1
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1c59      	adds	r1, r3, #1
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f3      	bne.n	8004cdc <cfg_NodeServoVarProp+0xb4>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d05b      	beq.n	8004db8 <cfg_NodeServoVarProp+0x190>
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	2b0d      	cmp	r3, #13
 8004d04:	d856      	bhi.n	8004db4 <cfg_NodeServoVarProp+0x18c>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <cfg_NodeServoVarProp+0xe4>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d45 	.word	0x08004d45
 8004d10:	08004d4d 	.word	0x08004d4d
 8004d14:	08004d55 	.word	0x08004d55
 8004d18:	08004d5d 	.word	0x08004d5d
 8004d1c:	08004d65 	.word	0x08004d65
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004d75 	.word	0x08004d75
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004d85 	.word	0x08004d85
 8004d30:	08004d8d 	.word	0x08004d8d
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004da5 	.word	0x08004da5
 8004d40:	08004dad 	.word	0x08004dad
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2223      	movs	r2, #35	; 0x23
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	e036      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	e032      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2212      	movs	r2, #18
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	e02e      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	e02a      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2222      	movs	r2, #34	; 0x22
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	e026      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2222      	movs	r2, #34	; 0x22
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e022      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2222      	movs	r2, #34	; 0x22
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e01e      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2223      	movs	r2, #35	; 0x23
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	e01a      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	e016      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2212      	movs	r2, #18
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	e012      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e00e      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2222      	movs	r2, #34	; 0x22
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e00a      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2222      	movs	r2, #34	; 0x22
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e006      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2222      	movs	r2, #34	; 0x22
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e002      	b.n	8004dba <cfg_NodeServoVarProp+0x192>
		default: return CFG_ERROR_VARID;
 8004db4:	2302      	movs	r3, #2
 8004db6:	e001      	b.n	8004dbc <cfg_NodeServoVarProp+0x194>
	}
	return CFG_ERROR_NONE;
 8004db8:	bf00      	nop
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	08009874 	.word	0x08009874
 8004dcc:	08009880 	.word	0x08009880
 8004dd0:	08009894 	.word	0x08009894
 8004dd4:	080098a8 	.word	0x080098a8
 8004dd8:	080098bc 	.word	0x080098bc
 8004ddc:	080098cc 	.word	0x080098cc
 8004de0:	080098e0 	.word	0x080098e0
 8004de4:	080098f0 	.word	0x080098f0
 8004de8:	08009900 	.word	0x08009900
 8004dec:	08009914 	.word	0x08009914
 8004df0:	08009928 	.word	0x08009928
 8004df4:	0800993c 	.word	0x0800993c
 8004df8:	0800994c 	.word	0x0800994c
 8004dfc:	08009960 	.word	0x08009960

08004e00 <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	6039      	str	r1, [r7, #0]
 8004e0a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 808a 	beq.w	8004f28 <cfg_NodeServoVarGet+0x128>
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	2b0d      	cmp	r3, #13
 8004e18:	f200 8084 	bhi.w	8004f24 <cfg_NodeServoVarGet+0x124>
 8004e1c:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <cfg_NodeServoVarGet+0x24>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e6b 	.word	0x08004e6b
 8004e2c:	08004e79 	.word	0x08004e79
 8004e30:	08004e87 	.word	0x08004e87
 8004e34:	08004e95 	.word	0x08004e95
 8004e38:	08004ea3 	.word	0x08004ea3
 8004e3c:	08004eb1 	.word	0x08004eb1
 8004e40:	08004ebf 	.word	0x08004ebf
 8004e44:	08004ecf 	.word	0x08004ecf
 8004e48:	08004edd 	.word	0x08004edd
 8004e4c:	08004eeb 	.word	0x08004eeb
 8004e50:	08004efb 	.word	0x08004efb
 8004e54:	08004f09 	.word	0x08004f09
 8004e58:	08004f17 	.word	0x08004f17
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 8004e5c:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004e5e:	7a1b      	ldrb	r3, [r3, #8]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e05f      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 8004e6a:	4b33      	ldr	r3, [pc, #204]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004e6c:	899b      	ldrh	r3, [r3, #12]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e058      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 8004e78:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004e7a:	895b      	ldrh	r3, [r3, #10]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e051      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 8004e86:	4b2c      	ldr	r3, [pc, #176]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004e88:	7b9b      	ldrb	r3, [r3, #14]
 8004e8a:	b25b      	sxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e04a      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 8004e94:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004e96:	8a1b      	ldrh	r3, [r3, #16]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e043      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 8004ea2:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004ea4:	8a5b      	ldrh	r3, [r3, #18]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e03c      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004eb2:	8a9b      	ldrh	r3, [r3, #20]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e035      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e02d      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 8004ece:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004ed0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e026      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 8004edc:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004ede:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e01f      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 8004eea:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004eec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e017      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 8004efa:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	e010      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e009      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <cfg_NodeServoVarGet+0x138>)
 8004f18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <cfg_NodeServoVarGet+0x12a>
		default: return CFG_ERROR_VARID;
 8004f24:	2302      	movs	r3, #2
 8004f26:	e001      	b.n	8004f2c <cfg_NodeServoVarGet+0x12c>
	}
	return CFG_ERROR_NONE;
 8004f28:	bf00      	nop
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000a2c 	.word	0x20000a2c

08004f3c <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	6039      	str	r1, [r7, #0]
 8004f46:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d078      	beq.n	8005040 <cfg_NodeServoVarSet+0x104>
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b0d      	cmp	r3, #13
 8004f52:	d873      	bhi.n	800503c <cfg_NodeServoVarSet+0x100>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <cfg_NodeServoVarSet+0x20>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004fa5 	.word	0x08004fa5
 8004f64:	08005045 	.word	0x08005045
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fd1 	.word	0x08004fd1
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004fe9 	.word	0x08004fe9
 8004f7c:	08004ff9 	.word	0x08004ff9
 8004f80:	08005045 	.word	0x08005045
 8004f84:	08005009 	.word	0x08005009
 8004f88:	08005019 	.word	0x08005019
 8004f8c:	08005025 	.word	0x08005025
 8004f90:	08005031 	.word	0x08005031
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7ff fd31 	bl	8004a04 <servo_setEnable>
 8004fa2:	e050      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4619      	mov	r1, r3
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7ff fc0d 	bl	80047cc <servo_setAng>
 8004fb2:	e048      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	4619      	mov	r1, r3
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7ff fcb9 	bl	8004934 <servo_setPercnet>
 8004fc2:	e040      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	4b21      	ldr	r3, [pc, #132]	; (8005050 <cfg_NodeServoVarSet+0x114>)
 8004fcc:	821a      	strh	r2, [r3, #16]
 8004fce:	e03a      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <cfg_NodeServoVarSet+0x114>)
 8004fd8:	825a      	strh	r2, [r3, #18]
 8004fda:	e034      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <cfg_NodeServoVarSet+0x114>)
 8004fe4:	829a      	strh	r2, [r3, #20]
 8004fe6:	e02e      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	4619      	mov	r1, r3
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f7ff fd07 	bl	8004a04 <servo_setEnable>
 8004ff6:	e026      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4619      	mov	r1, r3
 8005000:	2001      	movs	r0, #1
 8005002:	f7ff fbe3 	bl	80047cc <servo_setAng>
 8005006:	e01e      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b25b      	sxtb	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	2001      	movs	r0, #1
 8005012:	f7ff fc8f 	bl	8004934 <servo_setPercnet>
 8005016:	e016      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	b29a      	uxth	r2, r3
 800501e:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <cfg_NodeServoVarSet+0x114>)
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28
 8005022:	e010      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	b29a      	uxth	r2, r3
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <cfg_NodeServoVarSet+0x114>)
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800502e:	e00a      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b29a      	uxth	r2, r3
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <cfg_NodeServoVarSet+0x114>)
 8005038:	859a      	strh	r2, [r3, #44]	; 0x2c
 800503a:	e004      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		default: return CFG_ERROR_VARID;
 800503c:	2302      	movs	r3, #2
 800503e:	e003      	b.n	8005048 <cfg_NodeServoVarSet+0x10c>
	}
	return CFG_ERROR_NONE;
 8005040:	bf00      	nop
 8005042:	e000      	b.n	8005046 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
 8005044:	bf00      	nop
	return CFG_ERROR_NONE;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000a2c 	.word	0x20000a2c

08005054 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <system_Timer+0x7c>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	4a1a      	ldr	r2, [pc, #104]	; (80050d0 <system_Timer+0x7c>)
 8005066:	6013      	str	r3, [r2, #0]
	//leds_Timer(res);
	cfg_Timer(res);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fc f871 	bl	8001150 <cfg_Timer>
	modem_Timer(res);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fe f8c0 	bl	80031f4 <modem_Timer>
	servo_Timer(res);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fae3 	bl	8004640 <servo_Timer>
	motor_Timer(res);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fe fbae 	bl	80037dc <motor_Timer>
	rc_Timer(res);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fe ff71 	bl	8003f68 <rc_Timer>
	battery_Timer(res);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fc60 	bl	800094c <battery_Timer>
	autopilot_Timer(res);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fb fa2d 	bl	80004ec <autopilot_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 8005092:	2300      	movs	r3, #0
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e013      	b.n	80050c0 <system_Timer+0x6c>
	{
		if( system_info.timer[i] != 0 ){
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <system_Timer+0x80>)
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <system_Timer+0x66>
			system_info.timer[i]--;
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	490a      	ldr	r1, [pc, #40]	; (80050d4 <system_Timer+0x80>)
 80050aa:	0093      	lsls	r3, r2, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	1e59      	subs	r1, r3, #1
 80050b2:	4808      	ldr	r0, [pc, #32]	; (80050d4 <system_Timer+0x80>)
 80050b4:	0093      	lsls	r3, r2, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	3301      	adds	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d9e8      	bls.n	8005098 <system_Timer+0x44>
		}
	}
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000a78 	.word	0x20000a78
 80050d4:	20000a6c 	.word	0x20000a6c

080050d8 <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 80050dc:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <system_Init+0x40>)
 80050de:	2200      	movs	r2, #0
 80050e0:	705a      	strb	r2, [r3, #1]
	//leds_InitTask();

	modem_InitTask();
 80050e2:	f7fe f8ab 	bl	800323c <modem_InitTask>
	servo_InitTask();
 80050e6:	f7ff fad3 	bl	8004690 <servo_InitTask>
	motor_InitTask();
 80050ea:	f7fe fba1 	bl	8003830 <motor_InitTask>
	rc_InitTask();
 80050ee:	f7fe ff5f 	bl	8003fb0 <rc_InitTask>
	battery_InitTask(10000);
 80050f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80050f6:	f7fb fc47 	bl	8000988 <battery_InitTask>
	autopilot_InitTask();
 80050fa:	f7fb fa1b 	bl	8000534 <autopilot_InitTask>
	cfg_InitTask();
 80050fe:	f7fc f85d 	bl	80011bc <cfg_InitTask>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 8005102:	2201      	movs	r2, #1
 8005104:	4905      	ldr	r1, [pc, #20]	; (800511c <system_Init+0x44>)
 8005106:	4806      	ldr	r0, [pc, #24]	; (8005120 <system_Init+0x48>)
 8005108:	f003 f972 	bl	80083f0 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 800510c:	4805      	ldr	r0, [pc, #20]	; (8005124 <system_Init+0x4c>)
 800510e:	f000 f9bb 	bl	8005488 <HAL_ADC_Start_IT>
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000a6c 	.word	0x20000a6c
 800511c:	20000a7c 	.word	0x20000a7c
 8005120:	200005c4 	.word	0x200005c4
 8005124:	200004e0 	.word	0x200004e0

08005128 <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	//leds_Task();
	cfg_Task();
 800512c:	f7fc f8a6 	bl	800127c <cfg_Task>
	modem_Task();
 8005130:	f7fe f8a6 	bl	8003280 <modem_Task>
	motor_Task();
 8005134:	f7fe fbc8 	bl	80038c8 <motor_Task>
	servo_Task();
 8005138:	f7ff fb2c 	bl	8004794 <servo_Task>
	rc_Task();
 800513c:	f7fe ff60 	bl	8004000 <rc_Task>
	battery_Task();
 8005140:	f7fb fc3e 	bl	80009c0 <battery_Task>
	autopilot_Task();
 8005144:	f7fb fa3c 	bl	80005c0 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 8005148:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <system_Task+0xa0>)
 800514a:	789b      	ldrb	r3, [r3, #2]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d109      	bne.n	8005166 <system_Task+0x3e>
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <system_Task+0xa0>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d105      	bne.n	8005166 <system_Task+0x3e>
	{
		system_info.adc_cplt = 0;
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <system_Task+0xa0>)
 800515c:	2200      	movs	r2, #0
 800515e:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 8005160:	481a      	ldr	r0, [pc, #104]	; (80051cc <system_Task+0xa4>)
 8005162:	f000 f991 	bl	8005488 <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 8005166:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <system_Task+0xa8>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10f      	bne.n	8005190 <system_Task+0x68>
	{
		_system_restart_uart = 0;
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <system_Task+0xa8>)
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 8005176:	f7fd fd5f 	bl	8002c38 <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800517a:	2201      	movs	r2, #1
 800517c:	4915      	ldr	r1, [pc, #84]	; (80051d4 <system_Task+0xac>)
 800517e:	4816      	ldr	r0, [pc, #88]	; (80051d8 <system_Task+0xb0>)
 8005180:	f003 f936 	bl	80083f0 <HAL_UART_Receive_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <system_Task+0x68>
			_system_restart_uart = 1;
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <system_Task+0xa8>)
 800518c:	2201      	movs	r2, #1
 800518e:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//System reset
	if( system_info.reset_req == 1 )
 8005190:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <system_Task+0xa0>)
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d106      	bne.n	80051a8 <system_Task+0x80>
	{
		system_info.reset_req = 2;
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <system_Task+0xa0>)
 800519c:	2202      	movs	r2, #2
 800519e:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <system_Task+0xa0>)
 80051a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051a6:	605a      	str	r2, [r3, #4]
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <system_Task+0xa0>)
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d108      	bne.n	80051c4 <system_Task+0x9c>
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <system_Task+0xa0>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <system_Task+0x9c>
	{
		system_info.reset_req = 0;
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <system_Task+0xa0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	705a      	strb	r2, [r3, #1]
		system_Reset();
 80051c0:	f004 fa72 	bl	80096a8 <__system_Reset_veneer>
	}
}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000a6c 	.word	0x20000a6c
 80051cc:	200004e0 	.word	0x200004e0
 80051d0:	20000a7d 	.word	0x20000a7d
 80051d4:	20000a7c 	.word	0x20000a7c
 80051d8:	200005c4 	.word	0x200005c4

080051dc <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 80051e0:	4807      	ldr	r0, [pc, #28]	; (8005200 <system_UARTmodemSet115200+0x24>)
 80051e2:	f003 f935 	bl	8008450 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 80051e6:	4806      	ldr	r0, [pc, #24]	; (8005200 <system_UARTmodemSet115200+0x24>)
 80051e8:	f003 f841 	bl	800826e <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 80051ec:	f7fd fcee 	bl	8002bcc <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 80051f0:	2201      	movs	r2, #1
 80051f2:	4904      	ldr	r1, [pc, #16]	; (8005204 <system_UARTmodemSet115200+0x28>)
 80051f4:	4802      	ldr	r0, [pc, #8]	; (8005200 <system_UARTmodemSet115200+0x24>)
 80051f6:	f003 f8fb 	bl	80083f0 <HAL_UART_Receive_IT>
	return;
 80051fa:	bf00      	nop
}
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	200005c4 	.word	0x200005c4
 8005204:	20000a7c 	.word	0x20000a7c

08005208 <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d112      	bne.n	8005242 <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e00a      	b.n	8005238 <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	2000      	movs	r0, #0
 800522e:	f7fc fc3d 	bl	8001aac <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	3301      	adds	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d3f0      	bcc.n	8005222 <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 8005240:	e014      	b.n	800526c <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d111      	bne.n	800526c <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e009      	b.n	8005262 <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe ff86 	bl	8004168 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3301      	adds	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3f1      	bcc.n	800524e <system_ModemRxCallback+0x46>
	return;
 800526a:	bf00      	nop
 800526c:	bf00      	nop
}
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a14      	ldr	r2, [pc, #80]	; (80052d0 <system_ADC_ConvCpltCallback+0x5c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d120      	bne.n	80052c6 <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 8005284:	4812      	ldr	r0, [pc, #72]	; (80052d0 <system_ADC_ConvCpltCallback+0x5c>)
 8005286:	f000 facd 	bl	8005824 <HAL_ADC_GetValue>
 800528a:	ee07 0a90 	vmov	s15, r0
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80052d4 <system_ADC_ConvCpltCallback+0x60>
 8005296:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 800529a:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800529e:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 80052a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a6:	ee17 3a90 	vmov	r3, s15
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <system_ADC_ConvCpltCallback+0x64>)
 80052ae:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <system_ADC_ConvCpltCallback+0x64>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <system_ADC_ConvCpltCallback+0x68>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <system_ADC_ConvCpltCallback+0x68>)
 80052be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052c2:	609a      	str	r2, [r3, #8]
	}

	return;
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
}
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200004e0 	.word	0x200004e0
 80052d4:	3f4e4ce5 	.word	0x3f4e4ce5
 80052d8:	20000174 	.word	0x20000174
 80052dc:	20000a6c 	.word	0x20000a6c

080052e0 <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <system_UART_RxCpltCallback+0x3c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d110      	bne.n	8005312 <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <system_UART_RxCpltCallback+0x40>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe f8dc 	bl	80034b4 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 80052fc:	2201      	movs	r2, #1
 80052fe:	4908      	ldr	r1, [pc, #32]	; (8005320 <system_UART_RxCpltCallback+0x40>)
 8005300:	4806      	ldr	r0, [pc, #24]	; (800531c <system_UART_RxCpltCallback+0x3c>)
 8005302:	f003 f875 	bl	80083f0 <HAL_UART_Receive_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <system_UART_RxCpltCallback+0x44>)
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200005c4 	.word	0x200005c4
 8005320:	20000a7c 	.word	0x20000a7c
 8005324:	20000a7d 	.word	0x20000a7d

08005328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800532c:	480d      	ldr	r0, [pc, #52]	; (8005364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800532e:	490e      	ldr	r1, [pc, #56]	; (8005368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005330:	4a0e      	ldr	r2, [pc, #56]	; (800536c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005334:	e002      	b.n	800533c <LoopCopyDataInit>

08005336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800533a:	3304      	adds	r3, #4

0800533c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800533c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800533e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005340:	d3f9      	bcc.n	8005336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005342:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005344:	4c0b      	ldr	r4, [pc, #44]	; (8005374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005348:	e001      	b.n	800534e <LoopFillZerobss>

0800534a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800534a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800534c:	3204      	adds	r2, #4

0800534e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800534e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005350:	d3fb      	bcc.n	800534a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005352:	f7fd ff3d 	bl	80031d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005356:	f004 f961 	bl	800961c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800535a:	f7fd f9d7 	bl	800270c <main>
  bx  lr    
 800535e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005368:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800536c:	08009f98 	.word	0x08009f98
  ldr r2, =_sbss
 8005370:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8005374:	20000aa4 	.word	0x20000aa4

08005378 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005378:	e7fe      	b.n	8005378 <DMA1_Stream0_IRQHandler>
	...

0800537c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005380:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <HAL_Init+0x40>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <HAL_Init+0x40>)
 8005386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800538a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_Init+0x40>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_Init+0x40>)
 8005392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005398:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_Init+0x40>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a07      	ldr	r2, [pc, #28]	; (80053bc <HAL_Init+0x40>)
 800539e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053a4:	2003      	movs	r0, #3
 80053a6:	f000 fd68 	bl	8005e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053aa:	200f      	movs	r0, #15
 80053ac:	f7fd fe4a 	bl	8003044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053b0:	f7fd fc78 	bl	8002ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40023c00 	.word	0x40023c00

080053c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_IncTick+0x20>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_IncTick+0x24>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4413      	add	r3, r2
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_IncTick+0x24>)
 80053d2:	6013      	str	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200000d8 	.word	0x200000d8
 80053e4:	20000a80 	.word	0x20000a80

080053e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return uwTick;
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_GetTick+0x14>)
 80053ee:	681b      	ldr	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000a80 	.word	0x20000a80

08005400 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e033      	b.n	800547e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd fc68 	bl	8002cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	d118      	bne.n	8005470 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005446:	f023 0302 	bic.w	r3, r3, #2
 800544a:	f043 0202 	orr.w	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fb3a 	bl	8005acc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	f043 0201 	orr.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
 800546e:	e001      	b.n	8005474 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_ADC_Start_IT+0x1a>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0a1      	b.n	80055e6 <HAL_ADC_Start_IT+0x15e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d018      	beq.n	80054ea <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80054c8:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <HAL_ADC_Start_IT+0x16c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a4a      	ldr	r2, [pc, #296]	; (80055f8 <HAL_ADC_Start_IT+0x170>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0c9a      	lsrs	r2, r3, #18
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80054dc:	e002      	b.n	80054e4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f9      	bne.n	80054de <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d169      	bne.n	80055cc <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005536:	d106      	bne.n	8005546 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f023 0206 	bic.w	r2, r3, #6
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	645a      	str	r2, [r3, #68]	; 0x44
 8005544:	e002      	b.n	800554c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005554:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_ADC_Start_IT+0x174>)
 8005556:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005560:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005570:	f043 0320 	orr.w	r3, r3, #32
 8005574:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10f      	bne.n	80055a2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d129      	bne.n	80055e4 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	e020      	b.n	80055e4 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_ADC_Start_IT+0x178>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d11b      	bne.n	80055e4 <HAL_ADC_Start_IT+0x15c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d114      	bne.n	80055e4 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	e00b      	b.n	80055e4 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	f043 0210 	orr.w	r2, r3, #16
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	f043 0201 	orr.w	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	200000d0 	.word	0x200000d0
 80055f8:	431bde83 	.word	0x431bde83
 80055fc:	40012300 	.word	0x40012300
 8005600:	40012000 	.word	0x40012000

08005604 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d049      	beq.n	80056ce <HAL_ADC_IRQHandler+0xca>
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d046      	beq.n	80056ce <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d12b      	bne.n	80056be <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800566a:	2b00      	cmp	r3, #0
 800566c:	d127      	bne.n	80056be <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005686:	2b00      	cmp	r3, #0
 8005688:	d119      	bne.n	80056be <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0220 	bic.w	r2, r2, #32
 8005698:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d105      	bne.n	80056be <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd fac6 	bl	8002c50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0212 	mvn.w	r2, #18
 80056cc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d057      	beq.n	8005794 <HAL_ADC_IRQHandler+0x190>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d054      	beq.n	8005794 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d139      	bne.n	8005784 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005728:	2b00      	cmp	r3, #0
 800572a:	d12b      	bne.n	8005784 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005736:	2b00      	cmp	r3, #0
 8005738:	d124      	bne.n	8005784 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11d      	bne.n	8005784 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800574c:	2b00      	cmp	r3, #0
 800574e:	d119      	bne.n	8005784 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800575e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fa9d 	bl	8005cc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 020c 	mvn.w	r2, #12
 8005792:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <HAL_ADC_IRQHandler+0x1d6>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d014      	beq.n	80057da <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10d      	bne.n	80057da <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f837 	bl	800583e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0201 	mvn.w	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057e8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_ADC_IRQHandler+0x218>
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d012      	beq.n	800581c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f043 0202 	orr.w	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f06f 0220 	mvn.w	r2, #32
 800580a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f820 	bl	8005852 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0220 	mvn.w	r2, #32
 800581a:	601a      	str	r2, [r3, #0]
  }
}
 800581c:	bf00      	nop
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x1c>
 8005880:	2302      	movs	r3, #2
 8005882:	e113      	b.n	8005aac <HAL_ADC_ConfigChannel+0x244>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b09      	cmp	r3, #9
 8005892:	d925      	bls.n	80058e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68d9      	ldr	r1, [r3, #12]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	3b1e      	subs	r3, #30
 80058aa:	2207      	movs	r2, #7
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43da      	mvns	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	400a      	ands	r2, r1
 80058b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68d9      	ldr	r1, [r3, #12]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4618      	mov	r0, r3
 80058cc:	4603      	mov	r3, r0
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4403      	add	r3, r0
 80058d2:	3b1e      	subs	r3, #30
 80058d4:	409a      	lsls	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e022      	b.n	8005926 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6919      	ldr	r1, [r3, #16]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	4613      	mov	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	2207      	movs	r2, #7
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43da      	mvns	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	400a      	ands	r2, r1
 8005902:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6919      	ldr	r1, [r3, #16]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	4618      	mov	r0, r3
 8005916:	4603      	mov	r3, r0
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4403      	add	r3, r0
 800591c:	409a      	lsls	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b06      	cmp	r3, #6
 800592c:	d824      	bhi.n	8005978 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	3b05      	subs	r3, #5
 8005940:	221f      	movs	r2, #31
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43da      	mvns	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	400a      	ands	r2, r1
 800594e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	4618      	mov	r0, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	3b05      	subs	r3, #5
 800596a:	fa00 f203 	lsl.w	r2, r0, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	635a      	str	r2, [r3, #52]	; 0x34
 8005976:	e04c      	b.n	8005a12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b0c      	cmp	r3, #12
 800597e:	d824      	bhi.n	80059ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	3b23      	subs	r3, #35	; 0x23
 8005992:	221f      	movs	r2, #31
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43da      	mvns	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	400a      	ands	r2, r1
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	4618      	mov	r0, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	3b23      	subs	r3, #35	; 0x23
 80059bc:	fa00 f203 	lsl.w	r2, r0, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
 80059c8:	e023      	b.n	8005a12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	3b41      	subs	r3, #65	; 0x41
 80059dc:	221f      	movs	r2, #31
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	400a      	ands	r2, r1
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4618      	mov	r0, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	3b41      	subs	r3, #65	; 0x41
 8005a06:	fa00 f203 	lsl.w	r2, r0, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <HAL_ADC_ConfigChannel+0x250>)
 8005a14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a28      	ldr	r2, [pc, #160]	; (8005abc <HAL_ADC_ConfigChannel+0x254>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10f      	bne.n	8005a40 <HAL_ADC_ConfigChannel+0x1d8>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b12      	cmp	r3, #18
 8005a26:	d10b      	bne.n	8005a40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_ADC_ConfigChannel+0x254>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d12b      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x23a>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <HAL_ADC_ConfigChannel+0x258>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <HAL_ADC_ConfigChannel+0x1f4>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b11      	cmp	r3, #17
 8005a5a:	d122      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a11      	ldr	r2, [pc, #68]	; (8005ac0 <HAL_ADC_ConfigChannel+0x258>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d111      	bne.n	8005aa2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <HAL_ADC_ConfigChannel+0x25c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <HAL_ADC_ConfigChannel+0x260>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	0c9a      	lsrs	r2, r3, #18
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a94:	e002      	b.n	8005a9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f9      	bne.n	8005a96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40012300 	.word	0x40012300
 8005abc:	40012000 	.word	0x40012000
 8005ac0:	10000012 	.word	0x10000012
 8005ac4:	200000d0 	.word	0x200000d0
 8005ac8:	431bde83 	.word	0x431bde83

08005acc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ad4:	4b79      	ldr	r3, [pc, #484]	; (8005cbc <ADC_Init+0x1f0>)
 8005ad6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	021a      	lsls	r2, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	4a58      	ldr	r2, [pc, #352]	; (8005cc0 <ADC_Init+0x1f4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6899      	ldr	r1, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	e00f      	b.n	8005bca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0202 	bic.w	r2, r2, #2
 8005bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	7e1b      	ldrb	r3, [r3, #24]
 8005be4:	005a      	lsls	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01b      	beq.n	8005c30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6859      	ldr	r1, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	3b01      	subs	r3, #1
 8005c24:	035a      	lsls	r2, r3, #13
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	e007      	b.n	8005c40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	051a      	lsls	r2, r3, #20
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c82:	025a      	lsls	r2, r3, #9
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6899      	ldr	r1, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	029a      	lsls	r2, r3, #10
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40012300 	.word	0x40012300
 8005cc0:	0f000001 	.word	0x0f000001

08005cc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <__NVIC_SetPriorityGrouping+0x44>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d0a:	4a04      	ldr	r2, [pc, #16]	; (8005d1c <__NVIC_SetPriorityGrouping+0x44>)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	60d3      	str	r3, [r2, #12]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	e000ed00 	.word	0xe000ed00

08005d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <__NVIC_GetPriorityGrouping+0x18>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	f003 0307 	and.w	r3, r3, #7
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	db0b      	blt.n	8005d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	f003 021f 	and.w	r2, r3, #31
 8005d54:	4907      	ldr	r1, [pc, #28]	; (8005d74 <__NVIC_EnableIRQ+0x38>)
 8005d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	e000e100 	.word	0xe000e100

08005d78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db12      	blt.n	8005db0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	f003 021f 	and.w	r2, r3, #31
 8005d90:	490a      	ldr	r1, [pc, #40]	; (8005dbc <__NVIC_DisableIRQ+0x44>)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2001      	movs	r0, #1
 8005d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d9e:	3320      	adds	r3, #32
 8005da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005da4:	f3bf 8f4f 	dsb	sy
}
 8005da8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005daa:	f3bf 8f6f 	isb	sy
}
 8005dae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000e100 	.word	0xe000e100

08005dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	6039      	str	r1, [r7, #0]
 8005dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db0a      	blt.n	8005dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	490c      	ldr	r1, [pc, #48]	; (8005e0c <__NVIC_SetPriority+0x4c>)
 8005dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dde:	0112      	lsls	r2, r2, #4
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	440b      	add	r3, r1
 8005de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005de8:	e00a      	b.n	8005e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	4908      	ldr	r1, [pc, #32]	; (8005e10 <__NVIC_SetPriority+0x50>)
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	3b04      	subs	r3, #4
 8005df8:	0112      	lsls	r2, r2, #4
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	761a      	strb	r2, [r3, #24]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	e000e100 	.word	0xe000e100
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	; 0x24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f1c3 0307 	rsb	r3, r3, #7
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	bf28      	it	cs
 8005e32:	2304      	movcs	r3, #4
 8005e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d902      	bls.n	8005e44 <NVIC_EncodePriority+0x30>
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3b03      	subs	r3, #3
 8005e42:	e000      	b.n	8005e46 <NVIC_EncodePriority+0x32>
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43da      	mvns	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	401a      	ands	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	43d9      	mvns	r1, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e6c:	4313      	orrs	r3, r2
         );
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3724      	adds	r7, #36	; 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff ff28 	bl	8005cd8 <__NVIC_SetPriorityGrouping>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ea2:	f7ff ff3d 	bl	8005d20 <__NVIC_GetPriorityGrouping>
 8005ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	6978      	ldr	r0, [r7, #20]
 8005eae:	f7ff ffb1 	bl	8005e14 <NVIC_EncodePriority>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ff80 	bl	8005dc0 <__NVIC_SetPriority>
}
 8005ec0:	bf00      	nop
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff ff30 	bl	8005d3c <__NVIC_EnableIRQ>
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff ff40 	bl	8005d78 <__NVIC_DisableIRQ>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f0e:	f7ff fa6b 	bl	80053e8 <HAL_GetTick>
 8005f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d008      	beq.n	8005f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2280      	movs	r2, #128	; 0x80
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e052      	b.n	8005fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0216 	bic.w	r2, r2, #22
 8005f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <HAL_DMA_Abort+0x62>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0208 	bic.w	r2, r2, #8
 8005f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f82:	e013      	b.n	8005fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f84:	f7ff fa30 	bl	80053e8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	d90c      	bls.n	8005fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e015      	b.n	8005fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e4      	bne.n	8005f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbe:	223f      	movs	r2, #63	; 0x3f
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d004      	beq.n	8005ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2280      	movs	r2, #128	; 0x80
 8005ff8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00c      	b.n	8006018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2205      	movs	r2, #5
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006036:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <HAL_FLASH_Program+0xa0>)
 8006038:	7e1b      	ldrb	r3, [r3, #24]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_FLASH_Program+0x1e>
 800603e:	2302      	movs	r3, #2
 8006040:	e03b      	b.n	80060ba <HAL_FLASH_Program+0x96>
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_FLASH_Program+0xa0>)
 8006044:	2201      	movs	r2, #1
 8006046:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006048:	f24c 3050 	movw	r0, #50000	; 0xc350
 800604c:	f000 f870 	bl	8006130 <FLASH_WaitForLastOperation>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d12b      	bne.n	80060b2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006060:	783b      	ldrb	r3, [r7, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 f91b 	bl	80062a0 <FLASH_Program_Byte>
 800606a:	e016      	b.n	800609a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006072:	883b      	ldrh	r3, [r7, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	68b8      	ldr	r0, [r7, #8]
 8006078:	f000 f8ee 	bl	8006258 <FLASH_Program_HalfWord>
 800607c:	e00d      	b.n	800609a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d105      	bne.n	8006090 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	68b8      	ldr	r0, [r7, #8]
 800608a:	f000 f8c3 	bl	8006214 <FLASH_Program_Word>
 800608e:	e004      	b.n	800609a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006094:	68b8      	ldr	r0, [r7, #8]
 8006096:	f000 f88b 	bl	80061b0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800609a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800609e:	f000 f847 	bl	8006130 <FLASH_WaitForLastOperation>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <HAL_FLASH_Program+0xa4>)
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	4a07      	ldr	r2, [pc, #28]	; (80060c8 <HAL_FLASH_Program+0xa4>)
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <HAL_FLASH_Program+0xa0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000a84 	.word	0x20000a84
 80060c8:	40023c00 	.word	0x40023c00

080060cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_FLASH_Unlock+0x38>)
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da0b      	bge.n	80060f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <HAL_FLASH_Unlock+0x38>)
 80060e0:	4a09      	ldr	r2, [pc, #36]	; (8006108 <HAL_FLASH_Unlock+0x3c>)
 80060e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <HAL_FLASH_Unlock+0x38>)
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_FLASH_Unlock+0x40>)
 80060e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_FLASH_Unlock+0x38>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da01      	bge.n	80060f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80060f6:	79fb      	ldrb	r3, [r7, #7]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	40023c00 	.word	0x40023c00
 8006108:	45670123 	.word	0x45670123
 800610c:	cdef89ab 	.word	0xcdef89ab

08006110 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_FLASH_Lock+0x1c>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <HAL_FLASH_Lock+0x1c>)
 800611a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800611e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40023c00 	.word	0x40023c00

08006130 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <FLASH_WaitForLastOperation+0x78>)
 800613e:	2200      	movs	r2, #0
 8006140:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006142:	f7ff f951 	bl	80053e8 <HAL_GetTick>
 8006146:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006148:	e010      	b.n	800616c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d00c      	beq.n	800616c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <FLASH_WaitForLastOperation+0x38>
 8006158:	f7ff f946 	bl	80053e8 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	d201      	bcs.n	800616c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e019      	b.n	80061a0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <FLASH_WaitForLastOperation+0x7c>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e8      	bne.n	800614a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006178:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <FLASH_WaitForLastOperation+0x7c>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006184:	4b09      	ldr	r3, [pc, #36]	; (80061ac <FLASH_WaitForLastOperation+0x7c>)
 8006186:	2201      	movs	r2, #1
 8006188:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <FLASH_WaitForLastOperation+0x7c>)
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006196:	f000 f8a5 	bl	80062e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
  
}  
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000a84 	.word	0x20000a84
 80061ac:	40023c00 	.word	0x40023c00

080061b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061bc:	4b14      	ldr	r3, [pc, #80]	; (8006210 <FLASH_Program_DoubleWord+0x60>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	4a13      	ldr	r2, [pc, #76]	; (8006210 <FLASH_Program_DoubleWord+0x60>)
 80061c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <FLASH_Program_DoubleWord+0x60>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4a10      	ldr	r2, [pc, #64]	; (8006210 <FLASH_Program_DoubleWord+0x60>)
 80061ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80061d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <FLASH_Program_DoubleWord+0x60>)
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <FLASH_Program_DoubleWord+0x60>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80061e6:	f3bf 8f6f 	isb	sy
}
 80061ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80061ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	000a      	movs	r2, r1
 80061fa:	2300      	movs	r3, #0
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	3104      	adds	r1, #4
 8006200:	4613      	mov	r3, r2
 8006202:	600b      	str	r3, [r1, #0]
}
 8006204:	bf00      	nop
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	40023c00 	.word	0x40023c00

08006214 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800621e:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <FLASH_Program_Word+0x40>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <FLASH_Program_Word+0x40>)
 8006224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006228:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <FLASH_Program_Word+0x40>)
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <FLASH_Program_Word+0x40>)
 8006230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006234:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <FLASH_Program_Word+0x40>)
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	4a06      	ldr	r2, [pc, #24]	; (8006254 <FLASH_Program_Word+0x40>)
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	601a      	str	r2, [r3, #0]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40023c00 	.word	0x40023c00

08006258 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006264:	4b0d      	ldr	r3, [pc, #52]	; (800629c <FLASH_Program_HalfWord+0x44>)
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	4a0c      	ldr	r2, [pc, #48]	; (800629c <FLASH_Program_HalfWord+0x44>)
 800626a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <FLASH_Program_HalfWord+0x44>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	4a09      	ldr	r2, [pc, #36]	; (800629c <FLASH_Program_HalfWord+0x44>)
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <FLASH_Program_HalfWord+0x44>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	4a06      	ldr	r2, [pc, #24]	; (800629c <FLASH_Program_HalfWord+0x44>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	887a      	ldrh	r2, [r7, #2]
 800628c:	801a      	strh	r2, [r3, #0]
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40023c00 	.word	0x40023c00

080062a0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <FLASH_Program_Byte+0x40>)
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	4a0b      	ldr	r2, [pc, #44]	; (80062e0 <FLASH_Program_Byte+0x40>)
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <FLASH_Program_Byte+0x40>)
 80062ba:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <FLASH_Program_Byte+0x40>)
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <FLASH_Program_Byte+0x40>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	4a06      	ldr	r2, [pc, #24]	; (80062e0 <FLASH_Program_Byte+0x40>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	701a      	strb	r2, [r3, #0]
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40023c00 	.word	0x40023c00

080062e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80062e8:	4b2f      	ldr	r3, [pc, #188]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f043 0310 	orr.w	r3, r3, #16
 80062fc:	4a2b      	ldr	r2, [pc, #172]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 80062fe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006300:	4b29      	ldr	r3, [pc, #164]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006302:	2210      	movs	r2, #16
 8006304:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006306:	4b28      	ldr	r3, [pc, #160]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006312:	4b26      	ldr	r3, [pc, #152]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f043 0308 	orr.w	r3, r3, #8
 800631a:	4a24      	ldr	r2, [pc, #144]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 800631c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800631e:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006320:	2220      	movs	r2, #32
 8006322:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006324:	4b20      	ldr	r3, [pc, #128]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f043 0304 	orr.w	r3, r3, #4
 8006338:	4a1c      	ldr	r2, [pc, #112]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 800633a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800633c:	4b1a      	ldr	r3, [pc, #104]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006342:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800634e:	4b17      	ldr	r3, [pc, #92]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f043 0302 	orr.w	r3, r3, #2
 8006356:	4a15      	ldr	r2, [pc, #84]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 8006358:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800635a:	4b13      	ldr	r3, [pc, #76]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 800635c:	2280      	movs	r2, #128	; 0x80
 800635e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006360:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 8006376:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 800637a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006380:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f043 0320 	orr.w	r3, r3, #32
 8006394:	4a05      	ldr	r2, [pc, #20]	; (80063ac <FLASH_SetErrorCode+0xc8>)
 8006396:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <FLASH_SetErrorCode+0xc4>)
 800639a:	2202      	movs	r2, #2
 800639c:	60da      	str	r2, [r3, #12]
  }
}
 800639e:	bf00      	nop
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40023c00 	.word	0x40023c00
 80063ac:	20000a84 	.word	0x20000a84

080063b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e010      	b.n	80063ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d103      	bne.n	80063da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80063d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e009      	b.n	80063ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d103      	bne.n	80063e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80063e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e002      	b.n	80063ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80063e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063ee:	4b13      	ldr	r3, [pc, #76]	; (800643c <FLASH_Erase_Sector+0x8c>)
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <FLASH_Erase_Sector+0x8c>)
 80063f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <FLASH_Erase_Sector+0x8c>)
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	490f      	ldr	r1, [pc, #60]	; (800643c <FLASH_Erase_Sector+0x8c>)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <FLASH_Erase_Sector+0x8c>)
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <FLASH_Erase_Sector+0x8c>)
 800640c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006410:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <FLASH_Erase_Sector+0x8c>)
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4313      	orrs	r3, r2
 800641c:	4a07      	ldr	r2, [pc, #28]	; (800643c <FLASH_Erase_Sector+0x8c>)
 800641e:	f043 0302 	orr.w	r3, r3, #2
 8006422:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <FLASH_Erase_Sector+0x8c>)
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <FLASH_Erase_Sector+0x8c>)
 800642a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642e:	6113      	str	r3, [r2, #16]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40023c00 	.word	0x40023c00

08006440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006440:	b480      	push	{r7}
 8006442:	b089      	sub	sp, #36	; 0x24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	e159      	b.n	8006710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800645c:	2201      	movs	r2, #1
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4013      	ands	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	429a      	cmp	r2, r3
 8006476:	f040 8148 	bne.w	800670a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b01      	cmp	r3, #1
 8006484:	d005      	beq.n	8006492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800648e:	2b02      	cmp	r3, #2
 8006490:	d130      	bne.n	80064f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	2203      	movs	r2, #3
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4013      	ands	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c8:	2201      	movs	r2, #1
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4013      	ands	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	f003 0201 	and.w	r2, r3, #1
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d017      	beq.n	8006530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	2203      	movs	r2, #3
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4013      	ands	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d123      	bne.n	8006584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	08da      	lsrs	r2, r3, #3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3208      	adds	r2, #8
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	220f      	movs	r2, #15
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	fa02 f303 	lsl.w	r3, r2, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4313      	orrs	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	08da      	lsrs	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3208      	adds	r2, #8
 800657e:	69b9      	ldr	r1, [r7, #24]
 8006580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	2203      	movs	r2, #3
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 0203 	and.w	r2, r3, #3
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80a2 	beq.w	800670a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	4b57      	ldr	r3, [pc, #348]	; (8006728 <HAL_GPIO_Init+0x2e8>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	4a56      	ldr	r2, [pc, #344]	; (8006728 <HAL_GPIO_Init+0x2e8>)
 80065d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d4:	6453      	str	r3, [r2, #68]	; 0x44
 80065d6:	4b54      	ldr	r3, [pc, #336]	; (8006728 <HAL_GPIO_Init+0x2e8>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065e2:	4a52      	ldr	r2, [pc, #328]	; (800672c <HAL_GPIO_Init+0x2ec>)
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	3302      	adds	r3, #2
 80065ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	220f      	movs	r2, #15
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_GPIO_Init+0x2f0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d019      	beq.n	8006642 <HAL_GPIO_Init+0x202>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a48      	ldr	r2, [pc, #288]	; (8006734 <HAL_GPIO_Init+0x2f4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_GPIO_Init+0x1fe>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a47      	ldr	r2, [pc, #284]	; (8006738 <HAL_GPIO_Init+0x2f8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00d      	beq.n	800663a <HAL_GPIO_Init+0x1fa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a46      	ldr	r2, [pc, #280]	; (800673c <HAL_GPIO_Init+0x2fc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <HAL_GPIO_Init+0x1f6>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a45      	ldr	r2, [pc, #276]	; (8006740 <HAL_GPIO_Init+0x300>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_GPIO_Init+0x1f2>
 800662e:	2304      	movs	r3, #4
 8006630:	e008      	b.n	8006644 <HAL_GPIO_Init+0x204>
 8006632:	2307      	movs	r3, #7
 8006634:	e006      	b.n	8006644 <HAL_GPIO_Init+0x204>
 8006636:	2303      	movs	r3, #3
 8006638:	e004      	b.n	8006644 <HAL_GPIO_Init+0x204>
 800663a:	2302      	movs	r3, #2
 800663c:	e002      	b.n	8006644 <HAL_GPIO_Init+0x204>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <HAL_GPIO_Init+0x204>
 8006642:	2300      	movs	r3, #0
 8006644:	69fa      	ldr	r2, [r7, #28]
 8006646:	f002 0203 	and.w	r2, r2, #3
 800664a:	0092      	lsls	r2, r2, #2
 800664c:	4093      	lsls	r3, r2
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4313      	orrs	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006654:	4935      	ldr	r1, [pc, #212]	; (800672c <HAL_GPIO_Init+0x2ec>)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	089b      	lsrs	r3, r3, #2
 800665a:	3302      	adds	r3, #2
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006662:	4b38      	ldr	r3, [pc, #224]	; (8006744 <HAL_GPIO_Init+0x304>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006686:	4a2f      	ldr	r2, [pc, #188]	; (8006744 <HAL_GPIO_Init+0x304>)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800668c:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <HAL_GPIO_Init+0x304>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	43db      	mvns	r3, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4013      	ands	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066b0:	4a24      	ldr	r2, [pc, #144]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066b6:	4b23      	ldr	r3, [pc, #140]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066da:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066e0:	4b18      	ldr	r3, [pc, #96]	; (8006744 <HAL_GPIO_Init+0x304>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006704:	4a0f      	ldr	r2, [pc, #60]	; (8006744 <HAL_GPIO_Init+0x304>)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3301      	adds	r3, #1
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	f67f aea2 	bls.w	800645c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	3724      	adds	r7, #36	; 0x24
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40023800 	.word	0x40023800
 800672c:	40013800 	.word	0x40013800
 8006730:	40020000 	.word	0x40020000
 8006734:	40020400 	.word	0x40020400
 8006738:	40020800 	.word	0x40020800
 800673c:	40020c00 	.word	0x40020c00
 8006740:	40021000 	.word	0x40021000
 8006744:	40013c00 	.word	0x40013c00

08006748 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800675a:	2300      	movs	r3, #0
 800675c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e0bb      	b.n	80068dc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006764:	2201      	movs	r2, #1
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4013      	ands	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	f040 80ab 	bne.w	80068d6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006780:	4a5c      	ldr	r2, [pc, #368]	; (80068f4 <HAL_GPIO_DeInit+0x1ac>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	3302      	adds	r3, #2
 8006788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	220f      	movs	r2, #15
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	4013      	ands	r3, r2
 80067a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a54      	ldr	r2, [pc, #336]	; (80068f8 <HAL_GPIO_DeInit+0x1b0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d019      	beq.n	80067de <HAL_GPIO_DeInit+0x96>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a53      	ldr	r2, [pc, #332]	; (80068fc <HAL_GPIO_DeInit+0x1b4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <HAL_GPIO_DeInit+0x92>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a52      	ldr	r2, [pc, #328]	; (8006900 <HAL_GPIO_DeInit+0x1b8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00d      	beq.n	80067d6 <HAL_GPIO_DeInit+0x8e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a51      	ldr	r2, [pc, #324]	; (8006904 <HAL_GPIO_DeInit+0x1bc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <HAL_GPIO_DeInit+0x8a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a50      	ldr	r2, [pc, #320]	; (8006908 <HAL_GPIO_DeInit+0x1c0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d101      	bne.n	80067ce <HAL_GPIO_DeInit+0x86>
 80067ca:	2304      	movs	r3, #4
 80067cc:	e008      	b.n	80067e0 <HAL_GPIO_DeInit+0x98>
 80067ce:	2307      	movs	r3, #7
 80067d0:	e006      	b.n	80067e0 <HAL_GPIO_DeInit+0x98>
 80067d2:	2303      	movs	r3, #3
 80067d4:	e004      	b.n	80067e0 <HAL_GPIO_DeInit+0x98>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e002      	b.n	80067e0 <HAL_GPIO_DeInit+0x98>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <HAL_GPIO_DeInit+0x98>
 80067de:	2300      	movs	r3, #0
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	f002 0203 	and.w	r2, r2, #3
 80067e6:	0092      	lsls	r2, r2, #2
 80067e8:	4093      	lsls	r3, r2
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d132      	bne.n	8006856 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80067f0:	4b46      	ldr	r3, [pc, #280]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	4944      	ldr	r1, [pc, #272]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80067fe:	4b43      	ldr	r3, [pc, #268]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	43db      	mvns	r3, r3
 8006806:	4941      	ldr	r1, [pc, #260]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 8006808:	4013      	ands	r3, r2
 800680a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800680c:	4b3f      	ldr	r3, [pc, #252]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	43db      	mvns	r3, r3
 8006814:	493d      	ldr	r1, [pc, #244]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 8006816:	4013      	ands	r3, r2
 8006818:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800681a:	4b3c      	ldr	r3, [pc, #240]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	43db      	mvns	r3, r3
 8006822:	493a      	ldr	r1, [pc, #232]	; (800690c <HAL_GPIO_DeInit+0x1c4>)
 8006824:	4013      	ands	r3, r2
 8006826:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	220f      	movs	r2, #15
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006838:	4a2e      	ldr	r2, [pc, #184]	; (80068f4 <HAL_GPIO_DeInit+0x1ac>)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	089b      	lsrs	r3, r3, #2
 800683e:	3302      	adds	r3, #2
 8006840:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	43da      	mvns	r2, r3
 8006848:	482a      	ldr	r0, [pc, #168]	; (80068f4 <HAL_GPIO_DeInit+0x1ac>)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	089b      	lsrs	r3, r3, #2
 800684e:	400a      	ands	r2, r1
 8006850:	3302      	adds	r3, #2
 8006852:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	2103      	movs	r1, #3
 8006860:	fa01 f303 	lsl.w	r3, r1, r3
 8006864:	43db      	mvns	r3, r3
 8006866:	401a      	ands	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	08da      	lsrs	r2, r3, #3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3208      	adds	r2, #8
 8006874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	220f      	movs	r2, #15
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	08d2      	lsrs	r2, r2, #3
 800688c:	4019      	ands	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3208      	adds	r2, #8
 8006892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	2103      	movs	r1, #3
 80068a0:	fa01 f303 	lsl.w	r3, r1, r3
 80068a4:	43db      	mvns	r3, r3
 80068a6:	401a      	ands	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	2101      	movs	r1, #1
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	43db      	mvns	r3, r3
 80068ba:	401a      	ands	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	2103      	movs	r1, #3
 80068ca:	fa01 f303 	lsl.w	r3, r1, r3
 80068ce:	43db      	mvns	r3, r3
 80068d0:	401a      	ands	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	3301      	adds	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b0f      	cmp	r3, #15
 80068e0:	f67f af40 	bls.w	8006764 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40013800 	.word	0x40013800
 80068f8:	40020000 	.word	0x40020000
 80068fc:	40020400 	.word	0x40020400
 8006900:	40020800 	.word	0x40020800
 8006904:	40020c00 	.word	0x40020c00
 8006908:	40021000 	.word	0x40021000
 800690c:	40013c00 	.word	0x40013c00

08006910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	887b      	ldrh	r3, [r7, #2]
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	e001      	b.n	8006932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	807b      	strh	r3, [r7, #2]
 800694c:	4613      	mov	r3, r2
 800694e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006950:	787b      	ldrb	r3, [r7, #1]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006956:	887a      	ldrh	r2, [r7, #2]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800695c:	e003      	b.n	8006966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800695e:	887b      	ldrh	r3, [r7, #2]
 8006960:	041a      	lsls	r2, r3, #16
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	619a      	str	r2, [r3, #24]
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e12b      	b.n	8006bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc f9f6 	bl	8002d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2224      	movs	r2, #36	; 0x24
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0201 	bic.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069d8:	f000 fd40 	bl	800745c <HAL_RCC_GetPCLK1Freq>
 80069dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4a81      	ldr	r2, [pc, #516]	; (8006be8 <HAL_I2C_Init+0x274>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d807      	bhi.n	80069f8 <HAL_I2C_Init+0x84>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4a80      	ldr	r2, [pc, #512]	; (8006bec <HAL_I2C_Init+0x278>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	bf94      	ite	ls
 80069f0:	2301      	movls	r3, #1
 80069f2:	2300      	movhi	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	e006      	b.n	8006a06 <HAL_I2C_Init+0x92>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a7d      	ldr	r2, [pc, #500]	; (8006bf0 <HAL_I2C_Init+0x27c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	bf94      	ite	ls
 8006a00:	2301      	movls	r3, #1
 8006a02:	2300      	movhi	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e0e7      	b.n	8006bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4a78      	ldr	r2, [pc, #480]	; (8006bf4 <HAL_I2C_Init+0x280>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	0c9b      	lsrs	r3, r3, #18
 8006a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4a6a      	ldr	r2, [pc, #424]	; (8006be8 <HAL_I2C_Init+0x274>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d802      	bhi.n	8006a48 <HAL_I2C_Init+0xd4>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	3301      	adds	r3, #1
 8006a46:	e009      	b.n	8006a5c <HAL_I2C_Init+0xe8>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	4a69      	ldr	r2, [pc, #420]	; (8006bf8 <HAL_I2C_Init+0x284>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	099b      	lsrs	r3, r3, #6
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	495c      	ldr	r1, [pc, #368]	; (8006be8 <HAL_I2C_Init+0x274>)
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	d819      	bhi.n	8006ab0 <HAL_I2C_Init+0x13c>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1e59      	subs	r1, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a8a:	1c59      	adds	r1, r3, #1
 8006a8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a90:	400b      	ands	r3, r1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_I2C_Init+0x138>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1e59      	subs	r1, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aaa:	e051      	b.n	8006b50 <HAL_I2C_Init+0x1dc>
 8006aac:	2304      	movs	r3, #4
 8006aae:	e04f      	b.n	8006b50 <HAL_I2C_Init+0x1dc>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d111      	bne.n	8006adc <HAL_I2C_Init+0x168>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	1e58      	subs	r0, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6859      	ldr	r1, [r3, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	440b      	add	r3, r1
 8006ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aca:	3301      	adds	r3, #1
 8006acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2301      	moveq	r3, #1
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	e012      	b.n	8006b02 <HAL_I2C_Init+0x18e>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	1e58      	subs	r0, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6859      	ldr	r1, [r3, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	0099      	lsls	r1, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006af2:	3301      	adds	r3, #1
 8006af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf0c      	ite	eq
 8006afc:	2301      	moveq	r3, #1
 8006afe:	2300      	movne	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_I2C_Init+0x196>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e022      	b.n	8006b50 <HAL_I2C_Init+0x1dc>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10e      	bne.n	8006b30 <HAL_I2C_Init+0x1bc>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1e58      	subs	r0, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6859      	ldr	r1, [r3, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	440b      	add	r3, r1
 8006b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b24:	3301      	adds	r3, #1
 8006b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2e:	e00f      	b.n	8006b50 <HAL_I2C_Init+0x1dc>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	1e58      	subs	r0, r3, #1
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	0099      	lsls	r1, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b46:	3301      	adds	r3, #1
 8006b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	6809      	ldr	r1, [r1, #0]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6911      	ldr	r1, [r2, #16]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68d2      	ldr	r2, [r2, #12]
 8006b8a:	4311      	orrs	r1, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	000186a0 	.word	0x000186a0
 8006bec:	001e847f 	.word	0x001e847f
 8006bf0:	003d08ff 	.word	0x003d08ff
 8006bf4:	431bde83 	.word	0x431bde83
 8006bf8:	10624dd3 	.word	0x10624dd3

08006bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e267      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d075      	beq.n	8006d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c1a:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 030c 	and.w	r3, r3, #12
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d00c      	beq.n	8006c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c26:	4b85      	ldr	r3, [pc, #532]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d112      	bne.n	8006c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c32:	4b82      	ldr	r3, [pc, #520]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c3e:	d10b      	bne.n	8006c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c40:	4b7e      	ldr	r3, [pc, #504]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d05b      	beq.n	8006d04 <HAL_RCC_OscConfig+0x108>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d157      	bne.n	8006d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e242      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d106      	bne.n	8006c70 <HAL_RCC_OscConfig+0x74>
 8006c62:	4b76      	ldr	r3, [pc, #472]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a75      	ldr	r2, [pc, #468]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e01d      	b.n	8006cac <HAL_RCC_OscConfig+0xb0>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCC_OscConfig+0x98>
 8006c7a:	4b70      	ldr	r3, [pc, #448]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6f      	ldr	r2, [pc, #444]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	4b6d      	ldr	r3, [pc, #436]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a6c      	ldr	r2, [pc, #432]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e00b      	b.n	8006cac <HAL_RCC_OscConfig+0xb0>
 8006c94:	4b69      	ldr	r3, [pc, #420]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a68      	ldr	r2, [pc, #416]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	4b66      	ldr	r3, [pc, #408]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a65      	ldr	r2, [pc, #404]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d013      	beq.n	8006cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb4:	f7fe fb98 	bl	80053e8 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cbc:	f7fe fb94 	bl	80053e8 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b64      	cmp	r3, #100	; 0x64
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e207      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	4b5b      	ldr	r3, [pc, #364]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0xc0>
 8006cda:	e014      	b.n	8006d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cdc:	f7fe fb84 	bl	80053e8 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ce4:	f7fe fb80 	bl	80053e8 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	; 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e1f3      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf6:	4b51      	ldr	r3, [pc, #324]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f0      	bne.n	8006ce4 <HAL_RCC_OscConfig+0xe8>
 8006d02:	e000      	b.n	8006d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d063      	beq.n	8006dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d12:	4b4a      	ldr	r3, [pc, #296]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d11c      	bne.n	8006d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d2a:	4b44      	ldr	r3, [pc, #272]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d116      	bne.n	8006d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d36:	4b41      	ldr	r3, [pc, #260]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_RCC_OscConfig+0x152>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d001      	beq.n	8006d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e1c7      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4e:	4b3b      	ldr	r3, [pc, #236]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4937      	ldr	r1, [pc, #220]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d62:	e03a      	b.n	8006dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d6c:	4b34      	ldr	r3, [pc, #208]	; (8006e40 <HAL_RCC_OscConfig+0x244>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d72:	f7fe fb39 	bl	80053e8 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d7a:	f7fe fb35 	bl	80053e8 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e1a8      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f0      	beq.n	8006d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d98:	4b28      	ldr	r3, [pc, #160]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4925      	ldr	r1, [pc, #148]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	600b      	str	r3, [r1, #0]
 8006dac:	e015      	b.n	8006dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_RCC_OscConfig+0x244>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fe fb18 	bl	80053e8 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dbc:	f7fe fb14 	bl	80053e8 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e187      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dce:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d036      	beq.n	8006e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dee:	4b15      	ldr	r3, [pc, #84]	; (8006e44 <HAL_RCC_OscConfig+0x248>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df4:	f7fe faf8 	bl	80053e8 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dfc:	f7fe faf4 	bl	80053e8 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e167      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_RCC_OscConfig+0x240>)
 8006e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCC_OscConfig+0x200>
 8006e1a:	e01b      	b.n	8006e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <HAL_RCC_OscConfig+0x248>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e22:	f7fe fae1 	bl	80053e8 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e28:	e00e      	b.n	8006e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e2a:	f7fe fadd 	bl	80053e8 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d907      	bls.n	8006e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e150      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	42470000 	.word	0x42470000
 8006e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e48:	4b88      	ldr	r3, [pc, #544]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1ea      	bne.n	8006e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8097 	beq.w	8006f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e66:	4b81      	ldr	r3, [pc, #516]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]
 8006e76:	4b7d      	ldr	r3, [pc, #500]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	4a7c      	ldr	r2, [pc, #496]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e80:	6413      	str	r3, [r2, #64]	; 0x40
 8006e82:	4b7a      	ldr	r3, [pc, #488]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e92:	4b77      	ldr	r3, [pc, #476]	; (8007070 <HAL_RCC_OscConfig+0x474>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d118      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e9e:	4b74      	ldr	r3, [pc, #464]	; (8007070 <HAL_RCC_OscConfig+0x474>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a73      	ldr	r2, [pc, #460]	; (8007070 <HAL_RCC_OscConfig+0x474>)
 8006ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eaa:	f7fe fa9d 	bl	80053e8 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb2:	f7fe fa99 	bl	80053e8 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e10c      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec4:	4b6a      	ldr	r3, [pc, #424]	; (8007070 <HAL_RCC_OscConfig+0x474>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d106      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x2ea>
 8006ed8:	4b64      	ldr	r3, [pc, #400]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	4a63      	ldr	r2, [pc, #396]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee4:	e01c      	b.n	8006f20 <HAL_RCC_OscConfig+0x324>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x30c>
 8006eee:	4b5f      	ldr	r3, [pc, #380]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	4a5e      	ldr	r2, [pc, #376]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006ef4:	f043 0304 	orr.w	r3, r3, #4
 8006ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8006efa:	4b5c      	ldr	r3, [pc, #368]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	4a5b      	ldr	r2, [pc, #364]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	6713      	str	r3, [r2, #112]	; 0x70
 8006f06:	e00b      	b.n	8006f20 <HAL_RCC_OscConfig+0x324>
 8006f08:	4b58      	ldr	r3, [pc, #352]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	4a57      	ldr	r2, [pc, #348]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	6713      	str	r3, [r2, #112]	; 0x70
 8006f14:	4b55      	ldr	r3, [pc, #340]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	4a54      	ldr	r2, [pc, #336]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f1a:	f023 0304 	bic.w	r3, r3, #4
 8006f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d015      	beq.n	8006f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f28:	f7fe fa5e 	bl	80053e8 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2e:	e00a      	b.n	8006f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f30:	f7fe fa5a 	bl	80053e8 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e0cb      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f46:	4b49      	ldr	r3, [pc, #292]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0ee      	beq.n	8006f30 <HAL_RCC_OscConfig+0x334>
 8006f52:	e014      	b.n	8006f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f54:	f7fe fa48 	bl	80053e8 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f5a:	e00a      	b.n	8006f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f5c:	f7fe fa44 	bl	80053e8 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e0b5      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f72:	4b3e      	ldr	r3, [pc, #248]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1ee      	bne.n	8006f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d105      	bne.n	8006f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f84:	4b39      	ldr	r3, [pc, #228]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	4a38      	ldr	r2, [pc, #224]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80a1 	beq.w	80070dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f9a:	4b34      	ldr	r3, [pc, #208]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d05c      	beq.n	8007060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d141      	bne.n	8007032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_RCC_OscConfig+0x478>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb4:	f7fe fa18 	bl	80053e8 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fbc:	f7fe fa14 	bl	80053e8 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e087      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fce:	4b27      	ldr	r3, [pc, #156]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69da      	ldr	r2, [r3, #28]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	019b      	lsls	r3, r3, #6
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	041b      	lsls	r3, r3, #16
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	061b      	lsls	r3, r3, #24
 8006ffe:	491b      	ldr	r1, [pc, #108]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8007000:	4313      	orrs	r3, r2
 8007002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007004:	4b1b      	ldr	r3, [pc, #108]	; (8007074 <HAL_RCC_OscConfig+0x478>)
 8007006:	2201      	movs	r2, #1
 8007008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700a:	f7fe f9ed 	bl	80053e8 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007012:	f7fe f9e9 	bl	80053e8 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e05c      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x416>
 8007030:	e054      	b.n	80070dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007032:	4b10      	ldr	r3, [pc, #64]	; (8007074 <HAL_RCC_OscConfig+0x478>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007038:	f7fe f9d6 	bl	80053e8 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007040:	f7fe f9d2 	bl	80053e8 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e045      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_RCC_OscConfig+0x470>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0x444>
 800705e:	e03d      	b.n	80070dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d107      	bne.n	8007078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e038      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
 800706c:	40023800 	.word	0x40023800
 8007070:	40007000 	.word	0x40007000
 8007074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007078:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <HAL_RCC_OscConfig+0x4ec>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d028      	beq.n	80070d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007090:	429a      	cmp	r2, r3
 8007092:	d121      	bne.n	80070d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709e:	429a      	cmp	r2, r3
 80070a0:	d11a      	bne.n	80070d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070a8:	4013      	ands	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d111      	bne.n	80070d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	3b01      	subs	r3, #1
 80070c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d107      	bne.n	80070d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d001      	beq.n	80070dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800

080070ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0cc      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007100:	4b68      	ldr	r3, [pc, #416]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d90c      	bls.n	8007128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710e:	4b65      	ldr	r3, [pc, #404]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007116:	4b63      	ldr	r3, [pc, #396]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0b8      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d020      	beq.n	8007176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007140:	4b59      	ldr	r3, [pc, #356]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4a58      	ldr	r2, [pc, #352]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800714a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007158:	4b53      	ldr	r3, [pc, #332]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a52      	ldr	r2, [pc, #328]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007164:	4b50      	ldr	r3, [pc, #320]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	494d      	ldr	r1, [pc, #308]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	4313      	orrs	r3, r2
 8007174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d044      	beq.n	800720c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800718a:	4b47      	ldr	r3, [pc, #284]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d119      	bne.n	80071ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e07f      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d003      	beq.n	80071aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d107      	bne.n	80071ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071aa:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e06f      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ba:	4b3b      	ldr	r3, [pc, #236]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e067      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ca:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f023 0203 	bic.w	r2, r3, #3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	4934      	ldr	r1, [pc, #208]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071dc:	f7fe f904 	bl	80053e8 <HAL_GetTick>
 80071e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e2:	e00a      	b.n	80071fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e4:	f7fe f900 	bl	80053e8 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e04f      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071fa:	4b2b      	ldr	r3, [pc, #172]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 020c 	and.w	r2, r3, #12
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	429a      	cmp	r2, r3
 800720a:	d1eb      	bne.n	80071e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	429a      	cmp	r2, r3
 8007218:	d20c      	bcs.n	8007234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800721a:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007222:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d001      	beq.n	8007234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e032      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007240:	4b19      	ldr	r3, [pc, #100]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4916      	ldr	r1, [pc, #88]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	4313      	orrs	r3, r2
 8007250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800725e:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	490e      	ldr	r1, [pc, #56]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	4313      	orrs	r3, r2
 8007270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007272:	f000 f821 	bl	80072b8 <HAL_RCC_GetSysClockFreq>
 8007276:	4602      	mov	r2, r0
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	490a      	ldr	r1, [pc, #40]	; (80072ac <HAL_RCC_ClockConfig+0x1c0>)
 8007284:	5ccb      	ldrb	r3, [r1, r3]
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7fb fed6 	bl	8003044 <HAL_InitTick>

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40023c00 	.word	0x40023c00
 80072a8:	40023800 	.word	0x40023800
 80072ac:	08009f70 	.word	0x08009f70
 80072b0:	200000d0 	.word	0x200000d0
 80072b4:	200000d4 	.word	0x200000d4

080072b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072bc:	b090      	sub	sp, #64	; 0x40
 80072be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34
 80072c4:	2300      	movs	r3, #0
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c8:	2300      	movs	r3, #0
 80072ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072d0:	4b59      	ldr	r3, [pc, #356]	; (8007438 <HAL_RCC_GetSysClockFreq+0x180>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 030c 	and.w	r3, r3, #12
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d00d      	beq.n	80072f8 <HAL_RCC_GetSysClockFreq+0x40>
 80072dc:	2b08      	cmp	r3, #8
 80072de:	f200 80a1 	bhi.w	8007424 <HAL_RCC_GetSysClockFreq+0x16c>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_RCC_GetSysClockFreq+0x34>
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d003      	beq.n	80072f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80072ea:	e09b      	b.n	8007424 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072ec:	4b53      	ldr	r3, [pc, #332]	; (800743c <HAL_RCC_GetSysClockFreq+0x184>)
 80072ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072f0:	e09b      	b.n	800742a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072f2:	4b53      	ldr	r3, [pc, #332]	; (8007440 <HAL_RCC_GetSysClockFreq+0x188>)
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072f6:	e098      	b.n	800742a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072f8:	4b4f      	ldr	r3, [pc, #316]	; (8007438 <HAL_RCC_GetSysClockFreq+0x180>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007302:	4b4d      	ldr	r3, [pc, #308]	; (8007438 <HAL_RCC_GetSysClockFreq+0x180>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d028      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800730e:	4b4a      	ldr	r3, [pc, #296]	; (8007438 <HAL_RCC_GetSysClockFreq+0x180>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	099b      	lsrs	r3, r3, #6
 8007314:	2200      	movs	r2, #0
 8007316:	623b      	str	r3, [r7, #32]
 8007318:	627a      	str	r2, [r7, #36]	; 0x24
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007320:	2100      	movs	r1, #0
 8007322:	4b47      	ldr	r3, [pc, #284]	; (8007440 <HAL_RCC_GetSysClockFreq+0x188>)
 8007324:	fb03 f201 	mul.w	r2, r3, r1
 8007328:	2300      	movs	r3, #0
 800732a:	fb00 f303 	mul.w	r3, r0, r3
 800732e:	4413      	add	r3, r2
 8007330:	4a43      	ldr	r2, [pc, #268]	; (8007440 <HAL_RCC_GetSysClockFreq+0x188>)
 8007332:	fba0 1202 	umull	r1, r2, r0, r2
 8007336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007338:	460a      	mov	r2, r1
 800733a:	62ba      	str	r2, [r7, #40]	; 0x28
 800733c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800733e:	4413      	add	r3, r2
 8007340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	2200      	movs	r2, #0
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	61fa      	str	r2, [r7, #28]
 800734a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800734e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007352:	f7f8 ff49 	bl	80001e8 <__aeabi_uldivmod>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4613      	mov	r3, r2
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735e:	e053      	b.n	8007408 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007360:	4b35      	ldr	r3, [pc, #212]	; (8007438 <HAL_RCC_GetSysClockFreq+0x180>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	099b      	lsrs	r3, r3, #6
 8007366:	2200      	movs	r2, #0
 8007368:	613b      	str	r3, [r7, #16]
 800736a:	617a      	str	r2, [r7, #20]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007372:	f04f 0b00 	mov.w	fp, #0
 8007376:	4652      	mov	r2, sl
 8007378:	465b      	mov	r3, fp
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	0159      	lsls	r1, r3, #5
 8007384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007388:	0150      	lsls	r0, r2, #5
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	ebb2 080a 	subs.w	r8, r2, sl
 8007392:	eb63 090b 	sbc.w	r9, r3, fp
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80073a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80073a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80073aa:	ebb2 0408 	subs.w	r4, r2, r8
 80073ae:	eb63 0509 	sbc.w	r5, r3, r9
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	00eb      	lsls	r3, r5, #3
 80073bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073c0:	00e2      	lsls	r2, r4, #3
 80073c2:	4614      	mov	r4, r2
 80073c4:	461d      	mov	r5, r3
 80073c6:	eb14 030a 	adds.w	r3, r4, sl
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	eb45 030b 	adc.w	r3, r5, fp
 80073d0:	607b      	str	r3, [r7, #4]
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073de:	4629      	mov	r1, r5
 80073e0:	028b      	lsls	r3, r1, #10
 80073e2:	4621      	mov	r1, r4
 80073e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073e8:	4621      	mov	r1, r4
 80073ea:	028a      	lsls	r2, r1, #10
 80073ec:	4610      	mov	r0, r2
 80073ee:	4619      	mov	r1, r3
 80073f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f2:	2200      	movs	r2, #0
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	60fa      	str	r2, [r7, #12]
 80073f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073fc:	f7f8 fef4 	bl	80001e8 <__aeabi_uldivmod>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4613      	mov	r3, r2
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <HAL_RCC_GetSysClockFreq+0x180>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	3301      	adds	r3, #1
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007422:	e002      	b.n	800742a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <HAL_RCC_GetSysClockFreq+0x184>)
 8007426:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800742c:	4618      	mov	r0, r3
 800742e:	3740      	adds	r7, #64	; 0x40
 8007430:	46bd      	mov	sp, r7
 8007432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007436:	bf00      	nop
 8007438:	40023800 	.word	0x40023800
 800743c:	00f42400 	.word	0x00f42400
 8007440:	017d7840 	.word	0x017d7840

08007444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007448:	4b03      	ldr	r3, [pc, #12]	; (8007458 <HAL_RCC_GetHCLKFreq+0x14>)
 800744a:	681b      	ldr	r3, [r3, #0]
}
 800744c:	4618      	mov	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200000d0 	.word	0x200000d0

0800745c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007460:	f7ff fff0 	bl	8007444 <HAL_RCC_GetHCLKFreq>
 8007464:	4602      	mov	r2, r0
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	0a9b      	lsrs	r3, r3, #10
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	4903      	ldr	r1, [pc, #12]	; (8007480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007472:	5ccb      	ldrb	r3, [r1, r3]
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40023800 	.word	0x40023800
 8007480:	08009f80 	.word	0x08009f80

08007484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007488:	f7ff ffdc 	bl	8007444 <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	0b5b      	lsrs	r3, r3, #13
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4903      	ldr	r1, [pc, #12]	; (80074a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40023800 	.word	0x40023800
 80074a8:	08009f80 	.word	0x08009f80

080074ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	220f      	movs	r2, #15
 80074ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074bc:	4b12      	ldr	r3, [pc, #72]	; (8007508 <HAL_RCC_GetClockConfig+0x5c>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0203 	and.w	r2, r3, #3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074c8:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <HAL_RCC_GetClockConfig+0x5c>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074d4:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <HAL_RCC_GetClockConfig+0x5c>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074e0:	4b09      	ldr	r3, [pc, #36]	; (8007508 <HAL_RCC_GetClockConfig+0x5c>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <HAL_RCC_GetClockConfig+0x60>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0207 	and.w	r2, r3, #7
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	601a      	str	r2, [r3, #0]
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40023800 	.word	0x40023800
 800750c:	40023c00 	.word	0x40023c00

08007510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e041      	b.n	80075a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f839 	bl	80075ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f000 fb8c 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d001      	beq.n	80075dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e044      	b.n	8007666 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1e      	ldr	r2, [pc, #120]	; (8007674 <HAL_TIM_Base_Start_IT+0xb0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d018      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0x6c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007606:	d013      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0x6c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1a      	ldr	r2, [pc, #104]	; (8007678 <HAL_TIM_Base_Start_IT+0xb4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00e      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0x6c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a19      	ldr	r2, [pc, #100]	; (800767c <HAL_TIM_Base_Start_IT+0xb8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d009      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0x6c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a17      	ldr	r2, [pc, #92]	; (8007680 <HAL_TIM_Base_Start_IT+0xbc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0x6c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a16      	ldr	r2, [pc, #88]	; (8007684 <HAL_TIM_Base_Start_IT+0xc0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d111      	bne.n	8007654 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b06      	cmp	r3, #6
 8007640:	d010      	beq.n	8007664 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0201 	orr.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007652:	e007      	b.n	8007664 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40010000 	.word	0x40010000
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40014000 	.word	0x40014000

08007688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e041      	b.n	800771e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fb fbb4 	bl	8002e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f000 fad0 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <HAL_TIM_PWM_Start+0x24>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	bf14      	ite	ne
 8007744:	2301      	movne	r3, #1
 8007746:	2300      	moveq	r3, #0
 8007748:	b2db      	uxtb	r3, r3
 800774a:	e022      	b.n	8007792 <HAL_TIM_PWM_Start+0x6a>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b04      	cmp	r3, #4
 8007750:	d109      	bne.n	8007766 <HAL_TIM_PWM_Start+0x3e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	bf14      	ite	ne
 800775e:	2301      	movne	r3, #1
 8007760:	2300      	moveq	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	e015      	b.n	8007792 <HAL_TIM_PWM_Start+0x6a>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d109      	bne.n	8007780 <HAL_TIM_PWM_Start+0x58>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b01      	cmp	r3, #1
 8007776:	bf14      	ite	ne
 8007778:	2301      	movne	r3, #1
 800777a:	2300      	moveq	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	e008      	b.n	8007792 <HAL_TIM_PWM_Start+0x6a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e068      	b.n	800786c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d104      	bne.n	80077aa <HAL_TIM_PWM_Start+0x82>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077a8:	e013      	b.n	80077d2 <HAL_TIM_PWM_Start+0xaa>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d104      	bne.n	80077ba <HAL_TIM_PWM_Start+0x92>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b8:	e00b      	b.n	80077d2 <HAL_TIM_PWM_Start+0xaa>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d104      	bne.n	80077ca <HAL_TIM_PWM_Start+0xa2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077c8:	e003      	b.n	80077d2 <HAL_TIM_PWM_Start+0xaa>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2201      	movs	r2, #1
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fc52 	bl	8008084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a23      	ldr	r2, [pc, #140]	; (8007874 <HAL_TIM_PWM_Start+0x14c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d107      	bne.n	80077fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1d      	ldr	r2, [pc, #116]	; (8007874 <HAL_TIM_PWM_Start+0x14c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d018      	beq.n	8007836 <HAL_TIM_PWM_Start+0x10e>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780c:	d013      	beq.n	8007836 <HAL_TIM_PWM_Start+0x10e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a19      	ldr	r2, [pc, #100]	; (8007878 <HAL_TIM_PWM_Start+0x150>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00e      	beq.n	8007836 <HAL_TIM_PWM_Start+0x10e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a17      	ldr	r2, [pc, #92]	; (800787c <HAL_TIM_PWM_Start+0x154>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d009      	beq.n	8007836 <HAL_TIM_PWM_Start+0x10e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a16      	ldr	r2, [pc, #88]	; (8007880 <HAL_TIM_PWM_Start+0x158>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d004      	beq.n	8007836 <HAL_TIM_PWM_Start+0x10e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a14      	ldr	r2, [pc, #80]	; (8007884 <HAL_TIM_PWM_Start+0x15c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d111      	bne.n	800785a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b06      	cmp	r3, #6
 8007846:	d010      	beq.n	800786a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007858:	e007      	b.n	800786a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0201 	orr.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40014000 	.word	0x40014000

08007888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0202 	mvn.w	r2, #2
 80078b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9b0 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9a2 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9b3 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d122      	bne.n	8007938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d11b      	bne.n	8007938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0204 	mvn.w	r2, #4
 8007908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f986 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007924:	e005      	b.n	8007932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f978 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f989 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b08      	cmp	r3, #8
 8007944:	d122      	bne.n	800798c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b08      	cmp	r3, #8
 8007952:	d11b      	bne.n	800798c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f06f 0208 	mvn.w	r2, #8
 800795c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2204      	movs	r2, #4
 8007962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f95c 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007978:	e005      	b.n	8007986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f94e 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f95f 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0310 	and.w	r3, r3, #16
 8007996:	2b10      	cmp	r3, #16
 8007998:	d122      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d11b      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f06f 0210 	mvn.w	r2, #16
 80079b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2208      	movs	r2, #8
 80079b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f932 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 80079cc:	e005      	b.n	80079da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f924 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f935 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10e      	bne.n	8007a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d107      	bne.n	8007a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f06f 0201 	mvn.w	r2, #1
 8007a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fb f92e 	bl	8002c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d10e      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a24:	2b80      	cmp	r3, #128	; 0x80
 8007a26:	d107      	bne.n	8007a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fbc4 	bl	80081c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d10e      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d107      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f8fa 	bl	8007c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d10e      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d107      	bne.n	8007a90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0220 	mvn.w	r2, #32
 8007a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fb8e 	bl	80081ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e0ae      	b.n	8007c14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b0c      	cmp	r3, #12
 8007ac2:	f200 809f 	bhi.w	8007c04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ac6:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007b01 	.word	0x08007b01
 8007ad0:	08007c05 	.word	0x08007c05
 8007ad4:	08007c05 	.word	0x08007c05
 8007ad8:	08007c05 	.word	0x08007c05
 8007adc:	08007b41 	.word	0x08007b41
 8007ae0:	08007c05 	.word	0x08007c05
 8007ae4:	08007c05 	.word	0x08007c05
 8007ae8:	08007c05 	.word	0x08007c05
 8007aec:	08007b83 	.word	0x08007b83
 8007af0:	08007c05 	.word	0x08007c05
 8007af4:	08007c05 	.word	0x08007c05
 8007af8:	08007c05 	.word	0x08007c05
 8007afc:	08007bc3 	.word	0x08007bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f930 	bl	8007d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0208 	orr.w	r2, r2, #8
 8007b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0204 	bic.w	r2, r2, #4
 8007b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6999      	ldr	r1, [r3, #24]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	691a      	ldr	r2, [r3, #16]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	619a      	str	r2, [r3, #24]
      break;
 8007b3e:	e064      	b.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f976 	bl	8007e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6999      	ldr	r1, [r3, #24]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	021a      	lsls	r2, r3, #8
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	619a      	str	r2, [r3, #24]
      break;
 8007b80:	e043      	b.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 f9c1 	bl	8007f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0208 	orr.w	r2, r2, #8
 8007b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0204 	bic.w	r2, r2, #4
 8007bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69d9      	ldr	r1, [r3, #28]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	691a      	ldr	r2, [r3, #16]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	61da      	str	r2, [r3, #28]
      break;
 8007bc0:	e023      	b.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fa0b 	bl	8007fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69da      	ldr	r2, [r3, #28]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69d9      	ldr	r1, [r3, #28]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	021a      	lsls	r2, r3, #8
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	61da      	str	r2, [r3, #28]
      break;
 8007c02:	e002      	b.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a34      	ldr	r2, [pc, #208]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00f      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8a:	d00b      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a31      	ldr	r2, [pc, #196]	; (8007d54 <TIM_Base_SetConfig+0xe8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d007      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a30      	ldr	r2, [pc, #192]	; (8007d58 <TIM_Base_SetConfig+0xec>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <TIM_Base_SetConfig+0xf0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a25      	ldr	r2, [pc, #148]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01b      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d017      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <TIM_Base_SetConfig+0xe8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a21      	ldr	r2, [pc, #132]	; (8007d58 <TIM_Base_SetConfig+0xec>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00f      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <TIM_Base_SetConfig+0xf0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <TIM_Base_SetConfig+0xf4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <TIM_Base_SetConfig+0xf8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <TIM_Base_SetConfig+0xfc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d108      	bne.n	8007d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	615a      	str	r2, [r3, #20]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f023 0302 	bic.w	r3, r3, #2
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <TIM_OC1_SetConfig+0xc8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d10c      	bne.n	8007de2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 0308 	bic.w	r3, r3, #8
 8007dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f023 0304 	bic.w	r3, r3, #4
 8007de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <TIM_OC1_SetConfig+0xc8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d111      	bne.n	8007e0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	40010000 	.word	0x40010000

08007e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f023 0210 	bic.w	r2, r3, #16
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0320 	bic.w	r3, r3, #32
 8007e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <TIM_OC2_SetConfig+0xd4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10d      	bne.n	8007eb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a15      	ldr	r2, [pc, #84]	; (8007f0c <TIM_OC2_SetConfig+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d113      	bne.n	8007ee4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000

08007f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <TIM_OC3_SetConfig+0xd0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10d      	bne.n	8007f8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a14      	ldr	r2, [pc, #80]	; (8007fe0 <TIM_OC3_SetConfig+0xd0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d113      	bne.n	8007fba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40010000 	.word	0x40010000

08007fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800802e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	031b      	lsls	r3, r3, #12
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a10      	ldr	r2, [pc, #64]	; (8008080 <TIM_OC4_SetConfig+0x9c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d109      	bne.n	8008058 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	019b      	lsls	r3, r3, #6
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000

08008084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2201      	movs	r2, #1
 8008098:	fa02 f303 	lsl.w	r3, r2, r3
 800809c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	43db      	mvns	r3, r3
 80080a6:	401a      	ands	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a1a      	ldr	r2, [r3, #32]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 031f 	and.w	r3, r3, #31
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	431a      	orrs	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e050      	b.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d018      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008134:	d013      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a18      	ldr	r2, [pc, #96]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00e      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a16      	ldr	r2, [pc, #88]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d009      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d004      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d10c      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	4313      	orrs	r3, r2
 800816e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	40010000 	.word	0x40010000
 800819c:	40000400 	.word	0x40000400
 80081a0:	40000800 	.word	0x40000800
 80081a4:	40000c00 	.word	0x40000c00
 80081a8:	40014000 	.word	0x40014000

080081ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e03f      	b.n	8008266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fa fe6a 	bl	8002ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2224      	movs	r2, #36	; 0x24
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 ff8b 	bl	8009134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800822c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695a      	ldr	r2, [r3, #20]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800823c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800824c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e021      	b.n	80082c4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2224      	movs	r2, #36	; 0x24
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008296:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7fa fe9f 	bl	8002fdc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	; 0x28
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d17c      	bne.n	80083e6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_UART_Transmit+0x2c>
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e075      	b.n	80083e8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_UART_Transmit+0x3e>
 8008306:	2302      	movs	r3, #2
 8008308:	e06e      	b.n	80083e8 <HAL_UART_Transmit+0x11c>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2221      	movs	r2, #33	; 0x21
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008320:	f7fd f862 	bl	80053e8 <HAL_GetTick>
 8008324:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	d108      	bne.n	800834e <HAL_UART_Transmit+0x82>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	61bb      	str	r3, [r7, #24]
 800834c:	e003      	b.n	8008356 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800835e:	e02a      	b.n	80083b6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2200      	movs	r2, #0
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fc3c 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e036      	b.n	80083e8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800838e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	3302      	adds	r3, #2
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	e007      	b.n	80083a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	781a      	ldrb	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	3301      	adds	r3, #1
 80083a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1cf      	bne.n	8008360 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2200      	movs	r2, #0
 80083c8:	2140      	movs	r1, #64	; 0x40
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fc0c 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e006      	b.n	80083e8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e000      	b.n	80083e8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b20      	cmp	r3, #32
 8008408:	d11d      	bne.n	8008446 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <HAL_UART_Receive_IT+0x26>
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e016      	b.n	8008448 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_UART_Receive_IT+0x38>
 8008424:	2302      	movs	r3, #2
 8008426:	e00f      	b.n	8008448 <HAL_UART_Receive_IT+0x58>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	461a      	mov	r2, r3
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fc41 	bl	8008cc4 <UART_Start_Receive_IT>
 8008442:	4603      	mov	r3, r0
 8008444:	e000      	b.n	8008448 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008446:	2302      	movs	r3, #2
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b0a2      	sub	sp, #136	; 0x88
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8008458:	2301      	movs	r3, #1
 800845a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800846e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008470:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8008474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	330c      	adds	r3, #12
 800847e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008484:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e3      	bne.n	800845e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3314      	adds	r3, #20
 800849c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80084b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e5      	bne.n	8008496 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d119      	bne.n	8008506 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	330c      	adds	r3, #12
 80084d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	f023 0310 	bic.w	r3, r3, #16
 80084e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084f2:	647a      	str	r2, [r7, #68]	; 0x44
 80084f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e5      	bne.n	80084d2 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008518:	2b80      	cmp	r3, #128	; 0x80
 800851a:	d104      	bne.n	8008526 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	4a53      	ldr	r2, [pc, #332]	; (8008670 <HAL_UART_Abort_IT+0x220>)
 8008522:	651a      	str	r2, [r3, #80]	; 0x50
 8008524:	e003      	b.n	800852e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	2200      	movs	r2, #0
 800852c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00f      	beq.n	8008556 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d104      	bne.n	800854e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	4a4a      	ldr	r2, [pc, #296]	; (8008674 <HAL_UART_Abort_IT+0x224>)
 800854a:	651a      	str	r2, [r3, #80]	; 0x50
 800854c:	e003      	b.n	8008556 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	2200      	movs	r2, #0
 8008554:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008560:	2b80      	cmp	r3, #128	; 0x80
 8008562:	d12d      	bne.n	80085c0 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	623b      	str	r3, [r7, #32]
   return(result);
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800857a:	677b      	str	r3, [r7, #116]	; 0x74
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3314      	adds	r3, #20
 8008582:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008584:	633a      	str	r2, [r7, #48]	; 0x30
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800858a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e5      	bne.n	8008564 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00f      	beq.n	80085c0 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fd fd1b 	bl	8005fe0 <HAL_DMA_Abort_IT>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	2200      	movs	r2, #0
 80085b6:	651a      	str	r2, [r3, #80]	; 0x50
 80085b8:	e002      	b.n	80085c0 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b40      	cmp	r3, #64	; 0x40
 80085cc:	d130      	bne.n	8008630 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3314      	adds	r3, #20
 80085d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e4:	673b      	str	r3, [r7, #112]	; 0x70
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80085ee:	61fa      	str	r2, [r7, #28]
 80085f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	69b9      	ldr	r1, [r7, #24]
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	617b      	str	r3, [r7, #20]
   return(result);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	2b00      	cmp	r3, #0
 8008608:	d012      	beq.n	8008630 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	4618      	mov	r0, r3
 8008610:	f7fd fce6 	bl	8005fe0 <HAL_DMA_Abort_IT>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	2200      	movs	r2, #0
 8008620:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8008622:	2301      	movs	r3, #1
 8008624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008628:	e002      	b.n	8008630 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800862a:	2300      	movs	r3, #0
 800862c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8008630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008634:	2b01      	cmp	r3, #1
 8008636:	d116      	bne.n	8008666 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 faab 	bl	8008bbc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3788      	adds	r7, #136	; 0x88
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	08008e2f 	.word	0x08008e2f
 8008674:	08008e8f 	.word	0x08008e8f

08008678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b0ba      	sub	sp, #232	; 0xe8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80086b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10f      	bne.n	80086de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_UART_IRQHandler+0x66>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fc71 	bl	8008fbe <UART_Receive_IT>
      return;
 80086dc:	e256      	b.n	8008b8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80de 	beq.w	80088a4 <HAL_UART_IRQHandler+0x22c>
 80086e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80d1 	beq.w	80088a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <HAL_UART_IRQHandler+0xae>
 800870e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008716:	2b00      	cmp	r3, #0
 8008718:	d005      	beq.n	8008726 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	f043 0201 	orr.w	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <HAL_UART_IRQHandler+0xd2>
 8008732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f043 0202 	orr.w	r2, r3, #2
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800874a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <HAL_UART_IRQHandler+0xf6>
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	f043 0204 	orr.w	r2, r3, #4
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d011      	beq.n	800879e <HAL_UART_IRQHandler+0x126>
 800877a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d005      	beq.n	800879e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	f043 0208 	orr.w	r2, r3, #8
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 81ed 	beq.w	8008b82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <HAL_UART_IRQHandler+0x14e>
 80087b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b8:	f003 0320 	and.w	r3, r3, #32
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fbfc 	bl	8008fbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	bf0c      	ite	eq
 80087d4:	2301      	moveq	r3, #1
 80087d6:	2300      	movne	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	f003 0308 	and.w	r3, r3, #8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <HAL_UART_IRQHandler+0x17a>
 80087ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d04f      	beq.n	8008892 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 faa4 	bl	8008d40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d141      	bne.n	800888a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3314      	adds	r3, #20
 800880c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800881c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3314      	adds	r3, #20
 800882e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800883e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800884a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1d9      	bne.n	8008806 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	2b00      	cmp	r3, #0
 8008858:	d013      	beq.n	8008882 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	4a7d      	ldr	r2, [pc, #500]	; (8008a54 <HAL_UART_IRQHandler+0x3dc>)
 8008860:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd fbba 	bl	8005fe0 <HAL_DMA_Abort_IT>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d016      	beq.n	80088a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	e00e      	b.n	80088a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f990 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008888:	e00a      	b.n	80088a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f98c 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008890:	e006      	b.n	80088a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f988 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800889e:	e170      	b.n	8008b82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a0:	bf00      	nop
    return;
 80088a2:	e16e      	b.n	8008b82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	f040 814a 	bne.w	8008b42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8143 	beq.w	8008b42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 813c 	beq.w	8008b42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ca:	2300      	movs	r3, #0
 80088cc:	60bb      	str	r3, [r7, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	f040 80b4 	bne.w	8008a58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8140 	beq.w	8008b86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800890a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800890e:	429a      	cmp	r2, r3
 8008910:	f080 8139 	bcs.w	8008b86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800891a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008926:	f000 8088 	beq.w	8008a3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	330c      	adds	r3, #12
 8008930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800895a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800896e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1d9      	bne.n	800892a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3314      	adds	r3, #20
 800897c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008988:	f023 0301 	bic.w	r3, r3, #1
 800898c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3314      	adds	r3, #20
 8008996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800899a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800899e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80089a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80089ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e1      	bne.n	8008976 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3314      	adds	r3, #20
 80089b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3314      	adds	r3, #20
 80089d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e3      	bne.n	80089b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	330c      	adds	r3, #12
 80089fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a0a:	f023 0310 	bic.w	r3, r3, #16
 8008a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	330c      	adds	r3, #12
 8008a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e3      	bne.n	80089f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fd fa63 	bl	8005f00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f8c0 	bl	8008bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a50:	e099      	b.n	8008b86 <HAL_UART_IRQHandler+0x50e>
 8008a52:	bf00      	nop
 8008a54:	08008e07 	.word	0x08008e07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 808b 	beq.w	8008b8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8086 	beq.w	8008b8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	330c      	adds	r3, #12
 8008a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008aa2:	647a      	str	r2, [r7, #68]	; 0x44
 8008aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e3      	bne.n	8008a7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3314      	adds	r3, #20
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ada:	633a      	str	r2, [r7, #48]	; 0x30
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e3      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	330c      	adds	r3, #12
 8008b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0310 	bic.w	r3, r3, #16
 8008b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b20:	61fa      	str	r2, [r7, #28]
 8008b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	69b9      	ldr	r1, [r7, #24]
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	e841 2300 	strex	r3, r2, [r1]
 8008b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1e3      	bne.n	8008afc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f848 	bl	8008bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b40:	e023      	b.n	8008b8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <HAL_UART_IRQHandler+0x4ea>
 8008b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f9c7 	bl	8008eee <UART_Transmit_IT>
    return;
 8008b60:	e014      	b.n	8008b8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00e      	beq.n	8008b8c <HAL_UART_IRQHandler+0x514>
 8008b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d008      	beq.n	8008b8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa07 	bl	8008f8e <UART_EndTransmit_IT>
    return;
 8008b80:	e004      	b.n	8008b8c <HAL_UART_IRQHandler+0x514>
    return;
 8008b82:	bf00      	nop
 8008b84:	e002      	b.n	8008b8c <HAL_UART_IRQHandler+0x514>
      return;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <HAL_UART_IRQHandler+0x514>
      return;
 8008b8a:	bf00      	nop
  }
}
 8008b8c:	37e8      	adds	r7, #232	; 0xe8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop

08008b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b090      	sub	sp, #64	; 0x40
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf8:	e050      	b.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d04c      	beq.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d007      	beq.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c08:	f7fc fbee 	bl	80053e8 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d241      	bcs.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	330c      	adds	r3, #12
 8008c36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c38:	637a      	str	r2, [r7, #52]	; 0x34
 8008c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e5      	bne.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3314      	adds	r3, #20
 8008c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3314      	adds	r3, #20
 8008c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c6c:	623a      	str	r2, [r7, #32]
 8008c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	69f9      	ldr	r1, [r7, #28]
 8008c72:	6a3a      	ldr	r2, [r7, #32]
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e5      	bne.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e00f      	b.n	8008cbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d09f      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3740      	adds	r7, #64	; 0x40
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2222      	movs	r2, #34	; 0x22
 8008cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	695a      	ldr	r2, [r3, #20]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f042 0201 	orr.w	r2, r2, #1
 8008d20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0220 	orr.w	r2, r2, #32
 8008d30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b095      	sub	sp, #84	; 0x54
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d68:	643a      	str	r2, [r7, #64]	; 0x40
 8008d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e5      	bne.n	8008d48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3314      	adds	r3, #20
 8008d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f023 0301 	bic.w	r3, r3, #1
 8008d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3314      	adds	r3, #20
 8008d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e5      	bne.n	8008d7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d119      	bne.n	8008dec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f023 0310 	bic.w	r3, r3, #16
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dd8:	61ba      	str	r2, [r7, #24]
 8008dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ddc:	6979      	ldr	r1, [r7, #20]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	e841 2300 	strex	r3, r2, [r1]
 8008de4:	613b      	str	r3, [r7, #16]
   return(result);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1e5      	bne.n	8008db8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008dfa:	bf00      	nop
 8008dfc:	3754      	adds	r7, #84	; 0x54
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff fec1 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	2200      	movs	r2, #0
 8008e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d117      	bne.n	8008e86 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff fe9c 	bl	8008bbc <HAL_UART_AbortCpltCallback>
 8008e84:	e000      	b.n	8008e88 <UART_DMATxAbortCallback+0x5a>
      return;
 8008e86:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d004      	beq.n	8008eb6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d117      	bne.n	8008ee6 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fe6c 	bl	8008bbc <HAL_UART_AbortCpltCallback>
 8008ee4:	e000      	b.n	8008ee8 <UART_DMARxAbortCallback+0x5a>
      return;
 8008ee6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b21      	cmp	r3, #33	; 0x21
 8008f00:	d13e      	bne.n	8008f80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0a:	d114      	bne.n	8008f36 <UART_Transmit_IT+0x48>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d110      	bne.n	8008f36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	1c9a      	adds	r2, r3, #2
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	621a      	str	r2, [r3, #32]
 8008f34:	e008      	b.n	8008f48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	1c59      	adds	r1, r3, #1
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6211      	str	r1, [r2, #32]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	4619      	mov	r1, r3
 8008f56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10f      	bne.n	8008f7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e000      	b.n	8008f82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f80:	2302      	movs	r3, #2
  }
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff fdf0 	bl	8008b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b08c      	sub	sp, #48	; 0x30
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b22      	cmp	r3, #34	; 0x22
 8008fd0:	f040 80ab 	bne.w	800912a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fdc:	d117      	bne.n	800900e <UART_Receive_IT+0x50>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d113      	bne.n	800900e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	1c9a      	adds	r2, r3, #2
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	629a      	str	r2, [r3, #40]	; 0x28
 800900c:	e026      	b.n	800905c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009014:	2300      	movs	r3, #0
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009020:	d007      	beq.n	8009032 <UART_Receive_IT+0x74>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <UART_Receive_IT+0x82>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	b2da      	uxtb	r2, r3
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	701a      	strb	r2, [r3, #0]
 800903e:	e008      	b.n	8009052 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904c:	b2da      	uxtb	r2, r3
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29b      	uxth	r3, r3
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4619      	mov	r1, r3
 800906a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800906c:	2b00      	cmp	r3, #0
 800906e:	d15a      	bne.n	8009126 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0220 	bic.w	r2, r2, #32
 800907e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68da      	ldr	r2, [r3, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800908e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695a      	ldr	r2, [r3, #20]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0201 	bic.w	r2, r2, #1
 800909e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d135      	bne.n	800911c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	330c      	adds	r3, #12
 80090bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	613b      	str	r3, [r7, #16]
   return(result);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f023 0310 	bic.w	r3, r3, #16
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	330c      	adds	r3, #12
 80090d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d6:	623a      	str	r2, [r7, #32]
 80090d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	69f9      	ldr	r1, [r7, #28]
 80090dc:	6a3a      	ldr	r2, [r7, #32]
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e5      	bne.n	80090b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0310 	and.w	r3, r3, #16
 80090f4:	2b10      	cmp	r3, #16
 80090f6:	d10a      	bne.n	800910e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff fd5b 	bl	8008bd0 <HAL_UARTEx_RxEventCallback>
 800911a:	e002      	b.n	8009122 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7f9 fd7f 	bl	8002c20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	e002      	b.n	800912c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	e000      	b.n	800912c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800912a:	2302      	movs	r3, #2
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	3730      	adds	r7, #48	; 0x30
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009138:	b0c0      	sub	sp, #256	; 0x100
 800913a:	af00      	add	r7, sp, #0
 800913c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	68d9      	ldr	r1, [r3, #12]
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	ea40 0301 	orr.w	r3, r0, r1
 800915c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800915e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	431a      	orrs	r2, r3
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	431a      	orrs	r2, r3
 8009174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	4313      	orrs	r3, r2
 800917c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800918c:	f021 010c 	bic.w	r1, r1, #12
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800919a:	430b      	orrs	r3, r1
 800919c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800919e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ae:	6999      	ldr	r1, [r3, #24]
 80091b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	ea40 0301 	orr.w	r3, r0, r1
 80091ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	4b8f      	ldr	r3, [pc, #572]	; (8009400 <UART_SetConfig+0x2cc>)
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d005      	beq.n	80091d4 <UART_SetConfig+0xa0>
 80091c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	4b8d      	ldr	r3, [pc, #564]	; (8009404 <UART_SetConfig+0x2d0>)
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d104      	bne.n	80091de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091d4:	f7fe f956 	bl	8007484 <HAL_RCC_GetPCLK2Freq>
 80091d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091dc:	e003      	b.n	80091e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091de:	f7fe f93d 	bl	800745c <HAL_RCC_GetPCLK1Freq>
 80091e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f0:	f040 810c 	bne.w	800940c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009206:	4622      	mov	r2, r4
 8009208:	462b      	mov	r3, r5
 800920a:	1891      	adds	r1, r2, r2
 800920c:	65b9      	str	r1, [r7, #88]	; 0x58
 800920e:	415b      	adcs	r3, r3
 8009210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009216:	4621      	mov	r1, r4
 8009218:	eb12 0801 	adds.w	r8, r2, r1
 800921c:	4629      	mov	r1, r5
 800921e:	eb43 0901 	adc.w	r9, r3, r1
 8009222:	f04f 0200 	mov.w	r2, #0
 8009226:	f04f 0300 	mov.w	r3, #0
 800922a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800922e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009236:	4690      	mov	r8, r2
 8009238:	4699      	mov	r9, r3
 800923a:	4623      	mov	r3, r4
 800923c:	eb18 0303 	adds.w	r3, r8, r3
 8009240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009244:	462b      	mov	r3, r5
 8009246:	eb49 0303 	adc.w	r3, r9, r3
 800924a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800925a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800925e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009262:	460b      	mov	r3, r1
 8009264:	18db      	adds	r3, r3, r3
 8009266:	653b      	str	r3, [r7, #80]	; 0x50
 8009268:	4613      	mov	r3, r2
 800926a:	eb42 0303 	adc.w	r3, r2, r3
 800926e:	657b      	str	r3, [r7, #84]	; 0x54
 8009270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009278:	f7f6 ffb6 	bl	80001e8 <__aeabi_uldivmod>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4b61      	ldr	r3, [pc, #388]	; (8009408 <UART_SetConfig+0x2d4>)
 8009282:	fba3 2302 	umull	r2, r3, r3, r2
 8009286:	095b      	lsrs	r3, r3, #5
 8009288:	011c      	lsls	r4, r3, #4
 800928a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009294:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	1891      	adds	r1, r2, r2
 80092a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80092a4:	415b      	adcs	r3, r3
 80092a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092ac:	4641      	mov	r1, r8
 80092ae:	eb12 0a01 	adds.w	sl, r2, r1
 80092b2:	4649      	mov	r1, r9
 80092b4:	eb43 0b01 	adc.w	fp, r3, r1
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	f04f 0300 	mov.w	r3, #0
 80092c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092cc:	4692      	mov	sl, r2
 80092ce:	469b      	mov	fp, r3
 80092d0:	4643      	mov	r3, r8
 80092d2:	eb1a 0303 	adds.w	r3, sl, r3
 80092d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092da:	464b      	mov	r3, r9
 80092dc:	eb4b 0303 	adc.w	r3, fp, r3
 80092e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092f8:	460b      	mov	r3, r1
 80092fa:	18db      	adds	r3, r3, r3
 80092fc:	643b      	str	r3, [r7, #64]	; 0x40
 80092fe:	4613      	mov	r3, r2
 8009300:	eb42 0303 	adc.w	r3, r2, r3
 8009304:	647b      	str	r3, [r7, #68]	; 0x44
 8009306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800930a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800930e:	f7f6 ff6b 	bl	80001e8 <__aeabi_uldivmod>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4611      	mov	r1, r2
 8009318:	4b3b      	ldr	r3, [pc, #236]	; (8009408 <UART_SetConfig+0x2d4>)
 800931a:	fba3 2301 	umull	r2, r3, r3, r1
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	2264      	movs	r2, #100	; 0x64
 8009322:	fb02 f303 	mul.w	r3, r2, r3
 8009326:	1acb      	subs	r3, r1, r3
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800932e:	4b36      	ldr	r3, [pc, #216]	; (8009408 <UART_SetConfig+0x2d4>)
 8009330:	fba3 2302 	umull	r2, r3, r3, r2
 8009334:	095b      	lsrs	r3, r3, #5
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800933c:	441c      	add	r4, r3
 800933e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009342:	2200      	movs	r2, #0
 8009344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009348:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800934c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	1891      	adds	r1, r2, r2
 8009356:	63b9      	str	r1, [r7, #56]	; 0x38
 8009358:	415b      	adcs	r3, r3
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800935c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009360:	4641      	mov	r1, r8
 8009362:	1851      	adds	r1, r2, r1
 8009364:	6339      	str	r1, [r7, #48]	; 0x30
 8009366:	4649      	mov	r1, r9
 8009368:	414b      	adcs	r3, r1
 800936a:	637b      	str	r3, [r7, #52]	; 0x34
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009378:	4659      	mov	r1, fp
 800937a:	00cb      	lsls	r3, r1, #3
 800937c:	4651      	mov	r1, sl
 800937e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009382:	4651      	mov	r1, sl
 8009384:	00ca      	lsls	r2, r1, #3
 8009386:	4610      	mov	r0, r2
 8009388:	4619      	mov	r1, r3
 800938a:	4603      	mov	r3, r0
 800938c:	4642      	mov	r2, r8
 800938e:	189b      	adds	r3, r3, r2
 8009390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009394:	464b      	mov	r3, r9
 8009396:	460a      	mov	r2, r1
 8009398:	eb42 0303 	adc.w	r3, r2, r3
 800939c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093b4:	460b      	mov	r3, r1
 80093b6:	18db      	adds	r3, r3, r3
 80093b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ba:	4613      	mov	r3, r2
 80093bc:	eb42 0303 	adc.w	r3, r2, r3
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093ca:	f7f6 ff0d 	bl	80001e8 <__aeabi_uldivmod>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <UART_SetConfig+0x2d4>)
 80093d4:	fba3 1302 	umull	r1, r3, r3, r2
 80093d8:	095b      	lsrs	r3, r3, #5
 80093da:	2164      	movs	r1, #100	; 0x64
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	3332      	adds	r3, #50	; 0x32
 80093e6:	4a08      	ldr	r2, [pc, #32]	; (8009408 <UART_SetConfig+0x2d4>)
 80093e8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ec:	095b      	lsrs	r3, r3, #5
 80093ee:	f003 0207 	and.w	r2, r3, #7
 80093f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4422      	add	r2, r4
 80093fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093fc:	e105      	b.n	800960a <UART_SetConfig+0x4d6>
 80093fe:	bf00      	nop
 8009400:	40011000 	.word	0x40011000
 8009404:	40011400 	.word	0x40011400
 8009408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800940c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009410:	2200      	movs	r2, #0
 8009412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800941a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800941e:	4642      	mov	r2, r8
 8009420:	464b      	mov	r3, r9
 8009422:	1891      	adds	r1, r2, r2
 8009424:	6239      	str	r1, [r7, #32]
 8009426:	415b      	adcs	r3, r3
 8009428:	627b      	str	r3, [r7, #36]	; 0x24
 800942a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800942e:	4641      	mov	r1, r8
 8009430:	1854      	adds	r4, r2, r1
 8009432:	4649      	mov	r1, r9
 8009434:	eb43 0501 	adc.w	r5, r3, r1
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	00eb      	lsls	r3, r5, #3
 8009442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009446:	00e2      	lsls	r2, r4, #3
 8009448:	4614      	mov	r4, r2
 800944a:	461d      	mov	r5, r3
 800944c:	4643      	mov	r3, r8
 800944e:	18e3      	adds	r3, r4, r3
 8009450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009454:	464b      	mov	r3, r9
 8009456:	eb45 0303 	adc.w	r3, r5, r3
 800945a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800945e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800946a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800946e:	f04f 0200 	mov.w	r2, #0
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800947a:	4629      	mov	r1, r5
 800947c:	008b      	lsls	r3, r1, #2
 800947e:	4621      	mov	r1, r4
 8009480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009484:	4621      	mov	r1, r4
 8009486:	008a      	lsls	r2, r1, #2
 8009488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800948c:	f7f6 feac 	bl	80001e8 <__aeabi_uldivmod>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4b60      	ldr	r3, [pc, #384]	; (8009618 <UART_SetConfig+0x4e4>)
 8009496:	fba3 2302 	umull	r2, r3, r3, r2
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	011c      	lsls	r4, r3, #4
 800949e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094b0:	4642      	mov	r2, r8
 80094b2:	464b      	mov	r3, r9
 80094b4:	1891      	adds	r1, r2, r2
 80094b6:	61b9      	str	r1, [r7, #24]
 80094b8:	415b      	adcs	r3, r3
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094c0:	4641      	mov	r1, r8
 80094c2:	1851      	adds	r1, r2, r1
 80094c4:	6139      	str	r1, [r7, #16]
 80094c6:	4649      	mov	r1, r9
 80094c8:	414b      	adcs	r3, r1
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	f04f 0300 	mov.w	r3, #0
 80094d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094d8:	4659      	mov	r1, fp
 80094da:	00cb      	lsls	r3, r1, #3
 80094dc:	4651      	mov	r1, sl
 80094de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094e2:	4651      	mov	r1, sl
 80094e4:	00ca      	lsls	r2, r1, #3
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	4603      	mov	r3, r0
 80094ec:	4642      	mov	r2, r8
 80094ee:	189b      	adds	r3, r3, r2
 80094f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094f4:	464b      	mov	r3, r9
 80094f6:	460a      	mov	r2, r1
 80094f8:	eb42 0303 	adc.w	r3, r2, r3
 80094fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	67bb      	str	r3, [r7, #120]	; 0x78
 800950a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	f04f 0300 	mov.w	r3, #0
 8009514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009518:	4649      	mov	r1, r9
 800951a:	008b      	lsls	r3, r1, #2
 800951c:	4641      	mov	r1, r8
 800951e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009522:	4641      	mov	r1, r8
 8009524:	008a      	lsls	r2, r1, #2
 8009526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800952a:	f7f6 fe5d 	bl	80001e8 <__aeabi_uldivmod>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4b39      	ldr	r3, [pc, #228]	; (8009618 <UART_SetConfig+0x4e4>)
 8009534:	fba3 1302 	umull	r1, r3, r3, r2
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	2164      	movs	r1, #100	; 0x64
 800953c:	fb01 f303 	mul.w	r3, r1, r3
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	3332      	adds	r3, #50	; 0x32
 8009546:	4a34      	ldr	r2, [pc, #208]	; (8009618 <UART_SetConfig+0x4e4>)
 8009548:	fba2 2303 	umull	r2, r3, r2, r3
 800954c:	095b      	lsrs	r3, r3, #5
 800954e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009552:	441c      	add	r4, r3
 8009554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009558:	2200      	movs	r2, #0
 800955a:	673b      	str	r3, [r7, #112]	; 0x70
 800955c:	677a      	str	r2, [r7, #116]	; 0x74
 800955e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009562:	4642      	mov	r2, r8
 8009564:	464b      	mov	r3, r9
 8009566:	1891      	adds	r1, r2, r2
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	415b      	adcs	r3, r3
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009572:	4641      	mov	r1, r8
 8009574:	1851      	adds	r1, r2, r1
 8009576:	6039      	str	r1, [r7, #0]
 8009578:	4649      	mov	r1, r9
 800957a:	414b      	adcs	r3, r1
 800957c:	607b      	str	r3, [r7, #4]
 800957e:	f04f 0200 	mov.w	r2, #0
 8009582:	f04f 0300 	mov.w	r3, #0
 8009586:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800958a:	4659      	mov	r1, fp
 800958c:	00cb      	lsls	r3, r1, #3
 800958e:	4651      	mov	r1, sl
 8009590:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009594:	4651      	mov	r1, sl
 8009596:	00ca      	lsls	r2, r1, #3
 8009598:	4610      	mov	r0, r2
 800959a:	4619      	mov	r1, r3
 800959c:	4603      	mov	r3, r0
 800959e:	4642      	mov	r2, r8
 80095a0:	189b      	adds	r3, r3, r2
 80095a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80095a4:	464b      	mov	r3, r9
 80095a6:	460a      	mov	r2, r1
 80095a8:	eb42 0303 	adc.w	r3, r2, r3
 80095ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	663b      	str	r3, [r7, #96]	; 0x60
 80095b8:	667a      	str	r2, [r7, #100]	; 0x64
 80095ba:	f04f 0200 	mov.w	r2, #0
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095c6:	4649      	mov	r1, r9
 80095c8:	008b      	lsls	r3, r1, #2
 80095ca:	4641      	mov	r1, r8
 80095cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095d0:	4641      	mov	r1, r8
 80095d2:	008a      	lsls	r2, r1, #2
 80095d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095d8:	f7f6 fe06 	bl	80001e8 <__aeabi_uldivmod>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <UART_SetConfig+0x4e4>)
 80095e2:	fba3 1302 	umull	r1, r3, r3, r2
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	2164      	movs	r1, #100	; 0x64
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	3332      	adds	r3, #50	; 0x32
 80095f4:	4a08      	ldr	r2, [pc, #32]	; (8009618 <UART_SetConfig+0x4e4>)
 80095f6:	fba2 2303 	umull	r2, r3, r2, r3
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4422      	add	r2, r4
 8009608:	609a      	str	r2, [r3, #8]
}
 800960a:	bf00      	nop
 800960c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009610:	46bd      	mov	sp, r7
 8009612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009616:	bf00      	nop
 8009618:	51eb851f 	.word	0x51eb851f

0800961c <__libc_init_array>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4d0d      	ldr	r5, [pc, #52]	; (8009654 <__libc_init_array+0x38>)
 8009620:	4c0d      	ldr	r4, [pc, #52]	; (8009658 <__libc_init_array+0x3c>)
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	2600      	movs	r6, #0
 8009628:	42a6      	cmp	r6, r4
 800962a:	d109      	bne.n	8009640 <__libc_init_array+0x24>
 800962c:	4d0b      	ldr	r5, [pc, #44]	; (800965c <__libc_init_array+0x40>)
 800962e:	4c0c      	ldr	r4, [pc, #48]	; (8009660 <__libc_init_array+0x44>)
 8009630:	f000 f82e 	bl	8009690 <_init>
 8009634:	1b64      	subs	r4, r4, r5
 8009636:	10a4      	asrs	r4, r4, #2
 8009638:	2600      	movs	r6, #0
 800963a:	42a6      	cmp	r6, r4
 800963c:	d105      	bne.n	800964a <__libc_init_array+0x2e>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	f855 3b04 	ldr.w	r3, [r5], #4
 8009644:	4798      	blx	r3
 8009646:	3601      	adds	r6, #1
 8009648:	e7ee      	b.n	8009628 <__libc_init_array+0xc>
 800964a:	f855 3b04 	ldr.w	r3, [r5], #4
 800964e:	4798      	blx	r3
 8009650:	3601      	adds	r6, #1
 8009652:	e7f2      	b.n	800963a <__libc_init_array+0x1e>
 8009654:	08009f90 	.word	0x08009f90
 8009658:	08009f90 	.word	0x08009f90
 800965c:	08009f90 	.word	0x08009f90
 8009660:	08009f94 	.word	0x08009f94

08009664 <memcpy>:
 8009664:	440a      	add	r2, r1
 8009666:	4291      	cmp	r1, r2
 8009668:	f100 33ff 	add.w	r3, r0, #4294967295
 800966c:	d100      	bne.n	8009670 <memcpy+0xc>
 800966e:	4770      	bx	lr
 8009670:	b510      	push	{r4, lr}
 8009672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800967a:	4291      	cmp	r1, r2
 800967c:	d1f9      	bne.n	8009672 <memcpy+0xe>
 800967e:	bd10      	pop	{r4, pc}

08009680 <memset>:
 8009680:	4402      	add	r2, r0
 8009682:	4603      	mov	r3, r0
 8009684:	4293      	cmp	r3, r2
 8009686:	d100      	bne.n	800968a <memset+0xa>
 8009688:	4770      	bx	lr
 800968a:	f803 1b01 	strb.w	r1, [r3], #1
 800968e:	e7f9      	b.n	8009684 <memset+0x4>

08009690 <_init>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr

0800969c <_fini>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr

080096a8 <__system_Reset_veneer>:
 80096a8:	f85f f000 	ldr.w	pc, [pc]	; 80096ac <__system_Reset_veneer+0x4>
 80096ac:	200000dd 	.word	0x200000dd

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 08001061 080010d1     ........a.......
20000040:	08000f8d 00010065 00000030 08000ef9     ....e...0.......
20000050:	08000f3d 08000e7d 00010066 00000000     =...}...f.......
	...
2000006c:	006627d9 0000000e 08004e01 08004f3d     .'f......N..=O..
2000007c:	08004c29 006627da 00000006 08003e31     )L...'f.....1>..
2000008c:	08003ed5 08003d29 006627db 0000000a     .>..)=...'f.....
2000009c:	080044b5 080045b1 08004345 006627dc     .D...E..EC...'f.
200000ac:	00000003 08000c91 08000cf9 08000be1     ................
200000bc:	00010067 00000002 080008a9 080008fd     g...............
200000cc:	08000819                                ....

200000d0 <SystemCoreClock>:
200000d0:	00f42400                                .$..

200000d4 <uwTickPrio>:
200000d4:	00000010                                ....

200000d8 <uwTickFreq>:
200000d8:	00000001                                ....

200000dc <system_Reset>:

__ramfunc void system_Reset()
{
200000dc:	b480      	push	{r7}
200000de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
200000e0:	b672      	cpsid	i
}
200000e2:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200000e4:	4b05      	ldr	r3, [pc, #20]	; (200000fc <system_Reset+0x20>)
200000e6:	68db      	ldr	r3, [r3, #12]
200000e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200000ec:	4903      	ldr	r1, [pc, #12]	; (200000fc <system_Reset+0x20>)
200000ee:	4b04      	ldr	r3, [pc, #16]	; (20000100 <system_Reset+0x24>)
200000f0:	4313      	orrs	r3, r2
200000f2:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
200000f4:	f3bf 8f4f 	dsb	sy
}
200000f8:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
200000fa:	e7fe      	b.n	200000fa <system_Reset+0x1e>
200000fc:	e000ed00 	.word	0xe000ed00
20000100:	05fa0004 	.word	0x05fa0004
