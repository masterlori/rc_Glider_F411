
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d70  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009cc  08010f08  08010f08  00020f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118d4  080118d4  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080118d4  080118d4  000218d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118dc  080118dc  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118dc  080118dc  000218dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118e0  080118e0  000218e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080118e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002970  20000208  08011aec  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b78  08011aec  00032b78  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00040000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 15 .debug_info   00023414  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005dc1  00000000  00000000  0005368f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001db0  00000000  00000000  00059450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000016f5  00000000  00000000  0005b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001e371  00000000  00000000  0005c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029c74  00000000  00000000  0007ac66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000a4414  00000000  00000000  000a48da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007d30  00000000  00000000  00148cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  00150a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000208 	.word	0x20000208
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08010ee8 	.word	0x08010ee8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000020c 	.word	0x2000020c
 80001d4:	08010ee8 	.word	0x08010ee8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b970 	b.w	8000d1c <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9e08      	ldr	r6, [sp, #32]
 8000a5a:	460d      	mov	r5, r1
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	460f      	mov	r7, r1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d14a      	bne.n	8000afa <__udivmoddi4+0xa6>
 8000a64:	428a      	cmp	r2, r1
 8000a66:	4694      	mov	ip, r2
 8000a68:	d965      	bls.n	8000b36 <__udivmoddi4+0xe2>
 8000a6a:	fab2 f382 	clz	r3, r2
 8000a6e:	b143      	cbz	r3, 8000a82 <__udivmoddi4+0x2e>
 8000a70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a74:	f1c3 0220 	rsb	r2, r3, #32
 8000a78:	409f      	lsls	r7, r3
 8000a7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a7e:	4317      	orrs	r7, r2
 8000a80:	409c      	lsls	r4, r3
 8000a82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a86:	fa1f f58c 	uxth.w	r5, ip
 8000a8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a8e:	0c22      	lsrs	r2, r4, #16
 8000a90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a98:	fb01 f005 	mul.w	r0, r1, r5
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	d90a      	bls.n	8000ab6 <__udivmoddi4+0x62>
 8000aa0:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000aa8:	f080 811c 	bcs.w	8000ce4 <__udivmoddi4+0x290>
 8000aac:	4290      	cmp	r0, r2
 8000aae:	f240 8119 	bls.w	8000ce4 <__udivmoddi4+0x290>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4462      	add	r2, ip
 8000ab6:	1a12      	subs	r2, r2, r0
 8000ab8:	b2a4      	uxth	r4, r4
 8000aba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000abe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ac2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac6:	fb00 f505 	mul.w	r5, r0, r5
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	d90a      	bls.n	8000ae4 <__udivmoddi4+0x90>
 8000ace:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad6:	f080 8107 	bcs.w	8000ce8 <__udivmoddi4+0x294>
 8000ada:	42a5      	cmp	r5, r4
 8000adc:	f240 8104 	bls.w	8000ce8 <__udivmoddi4+0x294>
 8000ae0:	4464      	add	r4, ip
 8000ae2:	3802      	subs	r0, #2
 8000ae4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ae8:	1b64      	subs	r4, r4, r5
 8000aea:	2100      	movs	r1, #0
 8000aec:	b11e      	cbz	r6, 8000af6 <__udivmoddi4+0xa2>
 8000aee:	40dc      	lsrs	r4, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	e9c6 4300 	strd	r4, r3, [r6]
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0xbc>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	f000 80ed 	beq.w	8000cde <__udivmoddi4+0x28a>
 8000b04:	2100      	movs	r1, #0
 8000b06:	e9c6 0500 	strd	r0, r5, [r6]
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b10:	fab3 f183 	clz	r1, r3
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d149      	bne.n	8000bac <__udivmoddi4+0x158>
 8000b18:	42ab      	cmp	r3, r5
 8000b1a:	d302      	bcc.n	8000b22 <__udivmoddi4+0xce>
 8000b1c:	4282      	cmp	r2, r0
 8000b1e:	f200 80f8 	bhi.w	8000d12 <__udivmoddi4+0x2be>
 8000b22:	1a84      	subs	r4, r0, r2
 8000b24:	eb65 0203 	sbc.w	r2, r5, r3
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4617      	mov	r7, r2
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d0e2      	beq.n	8000af6 <__udivmoddi4+0xa2>
 8000b30:	e9c6 4700 	strd	r4, r7, [r6]
 8000b34:	e7df      	b.n	8000af6 <__udivmoddi4+0xa2>
 8000b36:	b902      	cbnz	r2, 8000b3a <__udivmoddi4+0xe6>
 8000b38:	deff      	udf	#255	; 0xff
 8000b3a:	fab2 f382 	clz	r3, r2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8090 	bne.w	8000c64 <__udivmoddi4+0x210>
 8000b44:	1a8a      	subs	r2, r1, r2
 8000b46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	2101      	movs	r1, #1
 8000b50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b54:	fb07 2015 	mls	r0, r7, r5, r2
 8000b58:	0c22      	lsrs	r2, r4, #16
 8000b5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b5e:	fb0e f005 	mul.w	r0, lr, r5
 8000b62:	4290      	cmp	r0, r2
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x124>
 8000b66:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x122>
 8000b70:	4290      	cmp	r0, r2
 8000b72:	f200 80cb 	bhi.w	8000d0c <__udivmoddi4+0x2b8>
 8000b76:	4645      	mov	r5, r8
 8000b78:	1a12      	subs	r2, r2, r0
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b80:	fb07 2210 	mls	r2, r7, r0, r2
 8000b84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b88:	fb0e fe00 	mul.w	lr, lr, r0
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x14e>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x14c>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f200 80bb 	bhi.w	8000d16 <__udivmoddi4+0x2c2>
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	eba4 040e 	sub.w	r4, r4, lr
 8000ba6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000baa:	e79f      	b.n	8000aec <__udivmoddi4+0x98>
 8000bac:	f1c1 0720 	rsb	r7, r1, #32
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bba:	fa05 f401 	lsl.w	r4, r5, r1
 8000bbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000bc2:	40fd      	lsrs	r5, r7
 8000bc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bce:	fa1f fe8c 	uxth.w	lr, ip
 8000bd2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bd6:	0c1c      	lsrs	r4, r3, #16
 8000bd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bdc:	fb08 f50e 	mul.w	r5, r8, lr
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	fa02 f201 	lsl.w	r2, r2, r1
 8000be6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b0>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf4:	f080 8088 	bcs.w	8000d08 <__udivmoddi4+0x2b4>
 8000bf8:	42a5      	cmp	r5, r4
 8000bfa:	f240 8085 	bls.w	8000d08 <__udivmoddi4+0x2b4>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	4464      	add	r4, ip
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	b29d      	uxth	r5, r3
 8000c08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1da>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c24:	d26c      	bcs.n	8000d00 <__udivmoddi4+0x2ac>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	d96a      	bls.n	8000d00 <__udivmoddi4+0x2ac>
 8000c2a:	3b02      	subs	r3, #2
 8000c2c:	4464      	add	r4, ip
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fba3 9502 	umull	r9, r5, r3, r2
 8000c36:	eba4 040e 	sub.w	r4, r4, lr
 8000c3a:	42ac      	cmp	r4, r5
 8000c3c:	46c8      	mov	r8, r9
 8000c3e:	46ae      	mov	lr, r5
 8000c40:	d356      	bcc.n	8000cf0 <__udivmoddi4+0x29c>
 8000c42:	d053      	beq.n	8000cec <__udivmoddi4+0x298>
 8000c44:	b156      	cbz	r6, 8000c5c <__udivmoddi4+0x208>
 8000c46:	ebb0 0208 	subs.w	r2, r0, r8
 8000c4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c52:	40ca      	lsrs	r2, r1
 8000c54:	40cc      	lsrs	r4, r1
 8000c56:	4317      	orrs	r7, r2
 8000c58:	e9c6 7400 	strd	r7, r4, [r6]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	f1c3 0120 	rsb	r1, r3, #32
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c70:	fa25 f101 	lsr.w	r1, r5, r1
 8000c74:	409d      	lsls	r5, r3
 8000c76:	432a      	orrs	r2, r5
 8000c78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c84:	fb07 1510 	mls	r5, r7, r0, r1
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c92:	428d      	cmp	r5, r1
 8000c94:	fa04 f403 	lsl.w	r4, r4, r3
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x258>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca2:	d22f      	bcs.n	8000d04 <__udivmoddi4+0x2b0>
 8000ca4:	428d      	cmp	r5, r1
 8000ca6:	d92d      	bls.n	8000d04 <__udivmoddi4+0x2b0>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1b49      	subs	r1, r1, r5
 8000cae:	b292      	uxth	r2, r2
 8000cb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc0:	4291      	cmp	r1, r2
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x282>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ccc:	d216      	bcs.n	8000cfc <__udivmoddi4+0x2a8>
 8000cce:	4291      	cmp	r1, r2
 8000cd0:	d914      	bls.n	8000cfc <__udivmoddi4+0x2a8>
 8000cd2:	3d02      	subs	r5, #2
 8000cd4:	4462      	add	r2, ip
 8000cd6:	1a52      	subs	r2, r2, r1
 8000cd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cdc:	e738      	b.n	8000b50 <__udivmoddi4+0xfc>
 8000cde:	4631      	mov	r1, r6
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	e708      	b.n	8000af6 <__udivmoddi4+0xa2>
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e6e6      	b.n	8000ab6 <__udivmoddi4+0x62>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	e6fb      	b.n	8000ae4 <__udivmoddi4+0x90>
 8000cec:	4548      	cmp	r0, r9
 8000cee:	d2a9      	bcs.n	8000c44 <__udivmoddi4+0x1f0>
 8000cf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	e7a3      	b.n	8000c44 <__udivmoddi4+0x1f0>
 8000cfc:	4645      	mov	r5, r8
 8000cfe:	e7ea      	b.n	8000cd6 <__udivmoddi4+0x282>
 8000d00:	462b      	mov	r3, r5
 8000d02:	e794      	b.n	8000c2e <__udivmoddi4+0x1da>
 8000d04:	4640      	mov	r0, r8
 8000d06:	e7d1      	b.n	8000cac <__udivmoddi4+0x258>
 8000d08:	46d0      	mov	r8, sl
 8000d0a:	e77b      	b.n	8000c04 <__udivmoddi4+0x1b0>
 8000d0c:	3d02      	subs	r5, #2
 8000d0e:	4462      	add	r2, ip
 8000d10:	e732      	b.n	8000b78 <__udivmoddi4+0x124>
 8000d12:	4608      	mov	r0, r1
 8000d14:	e70a      	b.n	8000b2c <__udivmoddi4+0xd8>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e742      	b.n	8000ba2 <__udivmoddi4+0x14e>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e010      	b.n	8000d50 <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <autopilot_Timer+0x44>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <autopilot_Timer+0x44>)
 8000d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d42:	3a01      	subs	r2, #1
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <autopilot_Timer+0x44>)
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d9eb      	bls.n	8000d2e <autopilot_Timer+0xe>
		}
	}

	return;
 8000d56:	bf00      	nop
}
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000224 	.word	0x20000224

08000d68 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <autopilot_InitTask+0x84>)
 8000d6e:	22ff      	movs	r2, #255	; 0xff
 8000d70:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <autopilot_InitTask+0x88>)
 8000d74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d78:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <autopilot_InitTask+0x88>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	755a      	strb	r2, [r3, #21]
	autopilot_info.astart_elevator_en = 0;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <autopilot_InitTask+0x88>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	761a      	strb	r2, [r3, #24]
	autopilot_info.astart_motor_en = 0;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <autopilot_InitTask+0x88>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_val = -80;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <autopilot_InitTask+0x88>)
 8000d8e:	22b0      	movs	r2, #176	; 0xb0
 8000d90:	769a      	strb	r2, [r3, #26]
	autopilot_info.astart_motor_val = 90;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <autopilot_InitTask+0x88>)
 8000d94:	225a      	movs	r2, #90	; 0x5a
 8000d96:	76da      	strb	r2, [r3, #27]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000da0:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <autopilot_InitTask+0x90>)
 8000da2:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <autopilot_InitTask+0x94>)
 8000db4:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000db8:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <autopilot_InitTask+0x98>)
 8000dba:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <autopilot_InitTask+0x9c>)
 8000dcc:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <autopilot_InitTask+0xa0>)
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <autopilot_InitTask+0x8c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c

	return;
 8000de0:	bf00      	nop
}
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000280 	.word	0x20000280
 8000df0:	20000224 	.word	0x20000224
 8000df4:	20000250 	.word	0x20000250
 8000df8:	08000ef9 	.word	0x08000ef9
 8000dfc:	08000f09 	.word	0x08000f09
 8000e00:	08000f2d 	.word	0x08000f2d
 8000e04:	080011bd 	.word	0x080011bd
 8000e08:	080011dd 	.word	0x080011dd

08000e0c <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <autopilot_Task+0x54>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2bff      	cmp	r3, #255	; 0xff
 8000e18:	d107      	bne.n	8000e2a <autopilot_Task+0x1e>
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <autopilot_Task+0x58>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f822 	bl	8000e6c <autopilot_gotoState>
 8000e28:	e017      	b.n	8000e5a <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <autopilot_Task+0x54>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d813      	bhi.n	8000e5c <autopilot_Task+0x50>
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <autopilot_Task+0x54>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <autopilot_Task+0x5c>)
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	3304      	adds	r3, #4
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d009      	beq.n	8000e5c <autopilot_Task+0x50>
			autopilot_states[_cur_ap_state].main_func();
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <autopilot_Task+0x54>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <autopilot_Task+0x5c>)
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4798      	blx	r3
		}
	}


	return;
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
}
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000280 	.word	0x20000280
 8000e64:	20000224 	.word	0x20000224
 8000e68:	20000250 	.word	0x20000250

08000e6c <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d833      	bhi.n	8000ee4 <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <autopilot_gotoState+0x80>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d812      	bhi.n	8000eac <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <autopilot_gotoState+0x80>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <autopilot_gotoState+0x84>)
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	4413      	add	r3, r2
 8000e92:	3308      	adds	r3, #8
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d008      	beq.n	8000eac <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <autopilot_gotoState+0x80>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <autopilot_gotoState+0x84>)
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <autopilot_gotoState+0x84>)
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <autopilot_gotoState+0x84>)
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	4413      	add	r3, r2
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <autopilot_gotoState+0x84>)
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	330c      	adds	r3, #12
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <autopilot_gotoState+0x88>)
 8000ed4:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <autopilot_gotoState+0x80>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <autopilot_gotoState+0x88>)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	7513      	strb	r3, [r2, #20]

	return;
 8000ee2:	e000      	b.n	8000ee6 <autopilot_gotoState+0x7a>
		return;
 8000ee4:	bf00      	nop
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000280 	.word	0x20000280
 8000ef0:	20000250 	.word	0x20000250
 8000ef4:	20000224 	.word	0x20000224

08000ef8 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	autopilot_gotoState(AP_STATE_FULLMANUAL);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff ffb5 	bl	8000e6c <autopilot_gotoState>

	return;
 8000f02:	bf00      	nop
}
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 8000f08:	b4b0      	push	{r4, r5, r7}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from STM32!\r\n";
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <autopilot_stateFullManStart+0x20>)
 8000f10:	1d3c      	adds	r4, r7, #4
 8000f12:	461d      	mov	r5, r3
 8000f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	6023      	str	r3, [r4, #0]
	//CDC_Transmit_FS(data, sizeof(data));

	return;
 8000f1c:	bf00      	nop
}
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bcb0      	pop	{r4, r5, r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	08010f08 	.word	0x08010f08

08000f2c <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 8000f32:	4b9a      	ldr	r3, [pc, #616]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 8091 	bne.w	800105e <autopilot_stateFullManMain+0x132>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 8000f3c:	4b98      	ldr	r3, [pc, #608]	; (80011a0 <autopilot_stateFullManMain+0x274>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4a98      	ldr	r2, [pc, #608]	; (80011a4 <autopilot_stateFullManMain+0x278>)
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	330c      	adds	r3, #12
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a93      	ldr	r2, [pc, #588]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000f4e:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 8000f50:	4b95      	ldr	r3, [pc, #596]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8000f52:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d17d      	bne.n	8001058 <autopilot_stateFullManMain+0x12c>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 8000f5c:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8000f5e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	4619      	mov	r1, r3
 8000f66:	2000      	movs	r0, #0
 8000f68:	f004 fe8a 	bl	8005c80 <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 8000f6c:	4b8b      	ldr	r3, [pc, #556]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000f6e:	7e1b      	ldrb	r3, [r3, #24]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d108      	bne.n	8000f88 <autopilot_stateFullManMain+0x5c>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 8000f76:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8000f78:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2001      	movs	r0, #1
 8000f82:	f004 fe7d 	bl	8005c80 <servo_setPercnet>
 8000f86:	e013      	b.n	8000fb0 <autopilot_stateFullManMain+0x84>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 8000f88:	4b84      	ldr	r3, [pc, #528]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000f8a:	7e9b      	ldrb	r3, [r3, #26]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2001      	movs	r0, #1
 8000f92:	f004 fe75 	bl	8005c80 <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 8000f96:	4b84      	ldr	r3, [pc, #528]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8000f98:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bfb8      	it	lt
 8000fa2:	425b      	neglt	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b32      	cmp	r3, #50	; 0x32
 8000fa8:	d902      	bls.n	8000fb0 <autopilot_stateFullManMain+0x84>
					autopilot_info.astart_elevator_en = 0;
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8000fb2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dc04      	bgt.n	8000fc6 <autopilot_stateFullManMain+0x9a>
 8000fbc:	4b77      	ldr	r3, [pc, #476]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000fbe:	7e5b      	ldrb	r3, [r3, #25]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d133      	bne.n	800102e <autopilot_stateFullManMain+0x102>
 8000fc6:	4b75      	ldr	r3, [pc, #468]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000fc8:	7d5b      	ldrb	r3, [r3, #21]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d12e      	bne.n	800102e <autopilot_stateFullManMain+0x102>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 8000fd0:	4b72      	ldr	r3, [pc, #456]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000fd2:	7e5b      	ldrb	r3, [r3, #25]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10e      	bne.n	8000ff8 <autopilot_stateFullManMain+0xcc>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 8000fda:	4b73      	ldr	r3, [pc, #460]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8000fdc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	f000 f907 	bl	8001200 <autopilot_expRunningAverage>
 8000ff2:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 8000ff6:	e021      	b.n	800103c <autopilot_stateFullManMain+0x110>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <autopilot_stateFullManMain+0x270>)
 8000ffa:	7edb      	ldrb	r3, [r3, #27]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	f000 f8f9 	bl	8001200 <autopilot_expRunningAverage>
 800100e:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 8001012:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8001014:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001018:	b25b      	sxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	bfb8      	it	lt
 800101e:	425b      	neglt	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b32      	cmp	r3, #50	; 0x32
 8001024:	d90a      	bls.n	800103c <autopilot_stateFullManMain+0x110>
						autopilot_info.astart_motor_en = 0;
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001028:	2200      	movs	r2, #0
 800102a:	765a      	strb	r2, [r3, #25]
				if( autopilot_info.astart_motor_en == 0 ){
 800102c:	e006      	b.n	800103c <autopilot_stateFullManMain+0x110>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 800102e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80011ac <autopilot_stateFullManMain+0x280>
 8001032:	f000 f8e5 	bl	8001200 <autopilot_expRunningAverage>
 8001036:	ed87 0a03 	vstr	s0, [r7, #12]
 800103a:	e000      	b.n	800103e <autopilot_stateFullManMain+0x112>
				if( autopilot_info.astart_motor_en == 0 ){
 800103c:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 800103e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	edc7 7a01 	vstr	s15, [r7, #4]
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2000      	movs	r0, #0
 8001052:	f003 fab9 	bl	80045c8 <motor_setTorque>
 8001056:	e002      	b.n	800105e <autopilot_stateFullManMain+0x132>

		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff ff07 	bl	8000e6c <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001060:	7d5b      	ldrb	r3, [r3, #21]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d131      	bne.n	80010cc <autopilot_stateFullManMain+0x1a0>
	{
		if(rc_info.connected == 1)
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 800106a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d12b      	bne.n	80010cc <autopilot_stateFullManMain+0x1a0>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8001074:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <autopilot_stateFullManMain+0x284>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10e      	bne.n	800109a <autopilot_stateFullManMain+0x16e>
			{
				if( rc_info.axis_l_x < -70 )
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 800107e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001082:	b25b      	sxtb	r3, r3
 8001084:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001088:	da20      	bge.n	80010cc <autopilot_stateFullManMain+0x1a0>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <autopilot_stateFullManMain+0x270>)
 800108c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001090:	609a      	str	r2, [r3, #8]
					_ap_arm_st = 1;
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <autopilot_stateFullManMain+0x284>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	e018      	b.n	80010cc <autopilot_stateFullManMain+0x1a0>
				}
			}
			else if( _ap_arm_st == 1 )
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <autopilot_stateFullManMain+0x284>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d114      	bne.n	80010cc <autopilot_stateFullManMain+0x1a0>
			{
				if( rc_info.axis_l_x >= -70 ){
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 80010a4:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80010ae:	db03      	blt.n	80010b8 <autopilot_stateFullManMain+0x18c>
					_ap_arm_st = 0;
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <autopilot_stateFullManMain+0x284>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e009      	b.n	80010cc <autopilot_stateFullManMain+0x1a0>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <autopilot_stateFullManMain+0x270>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d105      	bne.n	80010cc <autopilot_stateFullManMain+0x1a0>
					{
						autopilot_info.armed_flag = 1;
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <autopilot_stateFullManMain+0x270>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	755a      	strb	r2, [r3, #21]
						_ap_arm_st = 0;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <autopilot_stateFullManMain+0x284>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 80010cc:	4b33      	ldr	r3, [pc, #204]	; (800119c <autopilot_stateFullManMain+0x270>)
 80010ce:	7e1b      	ldrb	r3, [r3, #24]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d129      	bne.n	800112a <autopilot_stateFullManMain+0x1fe>
	{
		if( astart_elev_state == 0 )
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <autopilot_stateFullManMain+0x288>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <autopilot_stateFullManMain+0x1ce>
		{
			if( rc_info.button_r == 1 )
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 80010e0:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d11f      	bne.n	800112a <autopilot_stateFullManMain+0x1fe>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <autopilot_stateFullManMain+0x270>)
 80010ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010f0:	611a      	str	r2, [r3, #16]
				astart_elev_state = 1;
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <autopilot_stateFullManMain+0x288>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e017      	b.n	800112a <autopilot_stateFullManMain+0x1fe>
			}
		}
		else if( astart_elev_state == 1 )
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <autopilot_stateFullManMain+0x288>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d113      	bne.n	800112a <autopilot_stateFullManMain+0x1fe>
		{
			if( rc_info.button_r != 1 ){
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8001104:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d003      	beq.n	8001116 <autopilot_stateFullManMain+0x1ea>
				astart_elev_state = 0;
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <autopilot_stateFullManMain+0x288>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e009      	b.n	800112a <autopilot_stateFullManMain+0x1fe>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <autopilot_stateFullManMain+0x1fe>
				{
					autopilot_info.astart_elevator_en = 1;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001120:	2201      	movs	r2, #1
 8001122:	761a      	strb	r2, [r3, #24]
					astart_elev_state = 0;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <autopilot_stateFullManMain+0x288>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <autopilot_stateFullManMain+0x270>)
 800112c:	7e5b      	ldrb	r3, [r3, #25]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d12f      	bne.n	8001194 <autopilot_stateFullManMain+0x268>
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001136:	7d5b      	ldrb	r3, [r3, #21]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12a      	bne.n	8001194 <autopilot_stateFullManMain+0x268>
	{
		if( astart_mot_state == 0 )
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <autopilot_stateFullManMain+0x28c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10d      	bne.n	8001162 <autopilot_stateFullManMain+0x236>
		{
			if( rc_info.button_l == 1 )
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 8001148:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d120      	bne.n	8001194 <autopilot_stateFullManMain+0x268>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001154:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001158:	60da      	str	r2, [r3, #12]
				astart_mot_state = 1;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <autopilot_stateFullManMain+0x28c>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8001160:	e018      	b.n	8001194 <autopilot_stateFullManMain+0x268>
		else if( astart_mot_state == 1 )
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <autopilot_stateFullManMain+0x28c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d114      	bne.n	8001194 <autopilot_stateFullManMain+0x268>
			if( rc_info.button_l != 1 ){
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <autopilot_stateFullManMain+0x27c>)
 800116c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d003      	beq.n	800117e <autopilot_stateFullManMain+0x252>
				astart_mot_state = 0;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <autopilot_stateFullManMain+0x28c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
	return;
 800117c:	e00a      	b.n	8001194 <autopilot_stateFullManMain+0x268>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <autopilot_stateFullManMain+0x268>
					autopilot_info.astart_motor_en = 1;
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <autopilot_stateFullManMain+0x270>)
 8001188:	2201      	movs	r2, #1
 800118a:	765a      	strb	r2, [r3, #25]
					astart_mot_state = 0;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <autopilot_stateFullManMain+0x28c>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	return;
 8001192:	bf00      	nop
 8001194:	bf00      	nop
}
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000224 	.word	0x20000224
 80011a0:	20000280 	.word	0x20000280
 80011a4:	20000250 	.word	0x20000250
 80011a8:	20000ca4 	.word	0x20000ca4
 80011ac:	00000000 	.word	0x00000000
 80011b0:	2000024c 	.word	0x2000024c
 80011b4:	20000281 	.word	0x20000281
 80011b8:	20000282 	.word	0x20000282

080011bc <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f004 fd5c 	bl	8005c80 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	2001      	movs	r0, #1
 80011cc:	f004 fd58 	bl	8005c80 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2000      	movs	r0, #0
 80011d4:	f003 f9f8 	bl	80045c8 <motor_setTorque>

	return;
 80011d8:	bf00      	nop
}
 80011da:	bd80      	pop	{r7, pc}

080011dc <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <autopilot_stateFailsafeMain+0x1c>)
 80011e2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d103      	bne.n	80011f4 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fe3d 	bl	8000e6c <autopilot_gotoState>
	}
	return;
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
}
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000ca4 	.word	0x20000ca4
 80011fc:	00000000 	.word	0x00000000

08001200 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 800120a:	edd7 7a01 	vldr	s15, [r7, #4]
 800120e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001216:	d104      	bne.n	8001222 <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <autopilot_expRunningAverage+0x88>)
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e025      	b.n	800126e <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <autopilot_expRunningAverage+0x88>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f942 	bl	80004b0 <__aeabi_f2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <autopilot_expRunningAverage+0x88>)
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	ed97 7a01 	vldr	s14, [r7, #4]
 800123a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123e:	ee17 0a90 	vmov	r0, s15
 8001242:	f7ff f935 	bl	80004b0 <__aeabi_f2d>
 8001246:	a30e      	add	r3, pc, #56	; (adr r3, 8001280 <autopilot_expRunningAverage+0x80>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f988 	bl	8000560 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7fe ffcc 	bl	80001f4 <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fb8e 	bl	8000984 <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <autopilot_expRunningAverage+0x88>)
 800126c:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <autopilot_expRunningAverage+0x88>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	ee07 3a90 	vmov	s15, r3
}
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bdb0      	pop	{r4, r5, r7, pc}
 8001280:	9999999a 	.word	0x9999999a
 8001284:	3fb99999 	.word	0x3fb99999
 8001288:	20000284 	.word	0x20000284

0800128c <cfg_NodeApVarProp>:

*/
/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <cfg_NodeApVarProp+0x1a>
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d003      	beq.n	80012ac <cfg_NodeApVarProp+0x20>
 80012a4:	e005      	b.n	80012b2 <cfg_NodeApVarProp+0x26>
	{
		case AUTOPILOT_STATE:	str = "State"; break;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <cfg_NodeApVarProp+0x84>)
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e004      	b.n	80012b6 <cfg_NodeApVarProp+0x2a>
		case AUTOPILOT_ARMED:	str = "Armed"; break;
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <cfg_NodeApVarProp+0x88>)
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	e001      	b.n	80012b6 <cfg_NodeApVarProp+0x2a>
		default: return CFG_ERROR_VARID;
 80012b2:	2302      	movs	r3, #2
 80012b4:	e026      	b.n	8001304 <cfg_NodeApVarProp+0x78>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00f      	beq.n	80012dc <cfg_NodeApVarProp+0x50>
 80012bc:	e007      	b.n	80012ce <cfg_NodeApVarProp+0x42>
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	1c53      	adds	r3, r2, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c59      	adds	r1, r3, #1
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f3      	bne.n	80012be <cfg_NodeApVarProp+0x32>
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00f      	beq.n	8001302 <cfg_NodeApVarProp+0x76>
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <cfg_NodeApVarProp+0x62>
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d004      	beq.n	80012f6 <cfg_NodeApVarProp+0x6a>
 80012ec:	e007      	b.n	80012fe <cfg_NodeApVarProp+0x72>
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	e005      	b.n	8001302 <cfg_NodeApVarProp+0x76>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	801a      	strh	r2, [r3, #0]
 80012fc:	e001      	b.n	8001302 <cfg_NodeApVarProp+0x76>
		default: return CFG_ERROR_VARID;
 80012fe:	2302      	movs	r3, #2
 8001300:	e000      	b.n	8001304 <cfg_NodeApVarProp+0x78>
	}
	return CFG_ERROR_NONE;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	08010f1c 	.word	0x08010f1c
 8001314:	08010f24 	.word	0x08010f24

08001318 <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <cfg_NodeApVarGet+0x3e>
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <cfg_NodeApVarGet+0x1e>
 8001330:	2b01      	cmp	r3, #1
 8001332:	d007      	beq.n	8001344 <cfg_NodeApVarGet+0x2c>
 8001334:	e00d      	b.n	8001352 <cfg_NodeApVarGet+0x3a>
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <cfg_NodeApVarGet+0x4c>)
 8001338:	7d1b      	ldrb	r3, [r3, #20]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e008      	b.n	8001356 <cfg_NodeApVarGet+0x3e>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <cfg_NodeApVarGet+0x4c>)
 8001346:	7d5b      	ldrb	r3, [r3, #21]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e001      	b.n	8001356 <cfg_NodeApVarGet+0x3e>
		default: return CFG_ERROR_VARID;
 8001352:	2302      	movs	r3, #2
 8001354:	e000      	b.n	8001358 <cfg_NodeApVarGet+0x40>
	}
	return CFG_ERROR_NONE;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000224 	.word	0x20000224

08001368 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d013      	beq.n	80013a2 <cfg_NodeApVarSet+0x3a>
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <cfg_NodeApVarSet+0x1e>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d006      	beq.n	8001392 <cfg_NodeApVarSet+0x2a>
 8001384:	e00b      	b.n	800139e <cfg_NodeApVarSet+0x36>
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <cfg_NodeApVarSet+0x48>)
 800138e:	751a      	strb	r2, [r3, #20]
 8001390:	e007      	b.n	80013a2 <cfg_NodeApVarSet+0x3a>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <cfg_NodeApVarSet+0x48>)
 800139a:	755a      	strb	r2, [r3, #21]
 800139c:	e001      	b.n	80013a2 <cfg_NodeApVarSet+0x3a>
		default: return CFG_ERROR_VARID;
 800139e:	2302      	movs	r3, #2
 80013a0:	e000      	b.n	80013a4 <cfg_NodeApVarSet+0x3c>
	}
	return CFG_ERROR_NONE;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	20000224 	.word	0x20000224

080013b4 <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <battery_Timer+0x34>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <battery_Timer+0x34>)
 80013c6:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <battery_Timer+0x38>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <battery_Timer+0x28>
		battery_info.timer--;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <battery_Timer+0x38>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <battery_Timer+0x38>)
 80013d8:	6013      	str	r3, [r2, #0]
	}

	return;
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
}
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	200002b4 	.word	0x200002b4
 80013ec:	20000288 	.word	0x20000288

080013f0 <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b63      	cmp	r3, #99	; 0x63
 80013fc:	d801      	bhi.n	8001402 <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 80013fe:	2364      	movs	r3, #100	; 0x64
 8001400:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <battery_InitTask+0x34>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <battery_InitTask+0x34>)
 800140a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800140e:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <battery_InitTask+0x34>)
 8001412:	2201      	movs	r2, #1
 8001414:	711a      	strb	r2, [r3, #4]

	return;
 8001416:	bf00      	nop
}
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000288 	.word	0x20000288

08001428 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <battery_Task+0xd8>)
 8001430:	7b5b      	ldrb	r3, [r3, #13]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d15e      	bne.n	80014f6 <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <battery_Task+0xd8>)
 800143a:	2200      	movs	r2, #0
 800143c:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <battery_Task+0xd8>)
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d109      	bne.n	800145c <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 8001448:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <battery_Task+0xd8>)
 800144a:	89db      	ldrh	r3, [r3, #14]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f858 	bl	8001504 <battery_filterInit>
			battery_info.init_flag = 0;
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <battery_Task+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 800145a:	e04c      	b.n	80014f6 <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <battery_Task+0xd8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d148      	bne.n	80014f6 <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <battery_Task+0xd8>)
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	4a25      	ldr	r2, [pc, #148]	; (8001500 <battery_Task+0xd8>)
 800146a:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <battery_Task+0xd8>)
 800146e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3301      	adds	r3, #1
 8001476:	425a      	negs	r2, r3
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	f002 0207 	and.w	r2, r2, #7
 8001480:	bf58      	it	pl
 8001482:	4253      	negpl	r3, r2
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <battery_Task+0xd8>)
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <battery_Task+0xd8>)
 800148e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <battery_Task+0xd8>)
 8001498:	89db      	ldrh	r3, [r3, #14]
 800149a:	b299      	uxth	r1, r3
 800149c:	4a18      	ldr	r2, [pc, #96]	; (8001500 <battery_Task+0xd8>)
 800149e:	f100 0308 	add.w	r3, r0, #8
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	460a      	mov	r2, r1
 80014a8:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80014ae:	2300      	movs	r3, #0
 80014b0:	70fb      	strb	r3, [r7, #3]
 80014b2:	e00d      	b.n	80014d0 <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <battery_Task+0xd8>)
 80014b8:	3308      	adds	r3, #8
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	889b      	ldrh	r3, [r3, #4]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	3301      	adds	r3, #1
 80014ce:	70fb      	strb	r3, [r7, #3]
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	d9ee      	bls.n	80014b4 <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <battery_Task+0xd8>)
 80014de:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <battery_Task+0xd8>)
 80014e2:	8a1b      	ldrh	r3, [r3, #16]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f838 	bl	800155c <battery_calcPerc>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <battery_Task+0xd8>)
 80014f2:	749a      	strb	r2, [r3, #18]
	return;
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000288 	.word	0x20000288

08001504 <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e009      	b.n	8001528 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <battery_filterInit+0x54>)
 8001518:	3308      	adds	r3, #8
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	88fa      	ldrh	r2, [r7, #6]
 8001520:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b07      	cmp	r3, #7
 800152c:	d9f2      	bls.n	8001514 <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <battery_filterInit+0x54>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <battery_filterInit+0x54>)
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <battery_filterInit+0x54>)
 800153e:	8a1b      	ldrh	r3, [r3, #16]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f80a 	bl	800155c <battery_calcPerc>
 8001548:	4603      	mov	r3, r0
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <battery_filterInit+0x54>)
 800154e:	749a      	strb	r2, [r3, #18]

	return;
 8001550:	bf00      	nop
}
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000288 	.word	0x20000288

0800155c <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <battery_calcPerc+0xb0>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	88fa      	ldrh	r2, [r7, #6]
 8001574:	429a      	cmp	r2, r3
 8001576:	d802      	bhi.n	800157e <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <battery_calcPerc+0xb0>)
 800157a:	885b      	ldrh	r3, [r3, #2]
 800157c:	e041      	b.n	8001602 <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <battery_calcPerc+0xb0>)
 8001580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	429a      	cmp	r2, r3
 8001586:	d302      	bcc.n	800158e <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <battery_calcPerc+0xb0>)
 800158a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800158c:	e039      	b.n	8001602 <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e011      	b.n	80015b8 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	4a1d      	ldr	r2, [pc, #116]	; (800160c <battery_calcPerc+0xb0>)
 8001598:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d307      	bcc.n	80015b2 <battery_calcPerc+0x56>
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <battery_calcPerc+0xb0>)
 80015a8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015ac:	88fa      	ldrh	r2, [r7, #6]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d906      	bls.n	80015c0 <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	3301      	adds	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d9ea      	bls.n	8001594 <battery_calcPerc+0x38>
 80015be:	e000      	b.n	80015c2 <battery_calcPerc+0x66>
		{
			break;
 80015c0:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015c2:	88f8      	ldrh	r0, [r7, #6]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <battery_calcPerc+0xb0>)
 80015c8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015cc:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <battery_calcPerc+0xb0>)
 80015d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015d8:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <battery_calcPerc+0xb0>)
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015e4:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <battery_calcPerc+0xb0>)
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	462b      	mov	r3, r5
 80015f6:	4622      	mov	r2, r4
 80015f8:	f000 f80a 	bl	8001610 <analog_map>
 80015fc:	4603      	mov	r3, r0
 80015fe:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 8001600:	89bb      	ldrh	r3, [r7, #12]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bdb0      	pop	{r4, r5, r7, pc}
 800160a:	bf00      	nop
 800160c:	20000000 	.word	0x20000000

08001610 <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	69b9      	ldr	r1, [r7, #24]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	1a8a      	subs	r2, r1, r2
 800162a:	fb03 f202 	mul.w	r2, r3, r2
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	fb92 f2f3 	sdiv	r2, r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4413      	add	r3, r2
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d00c      	beq.n	8001676 <cfg_NodeBatVarProp+0x2e>
 800165c:	2b02      	cmp	r3, #2
 800165e:	dc0d      	bgt.n	800167c <cfg_NodeBatVarProp+0x34>
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <cfg_NodeBatVarProp+0x22>
 8001664:	2b01      	cmp	r3, #1
 8001666:	d003      	beq.n	8001670 <cfg_NodeBatVarProp+0x28>
 8001668:	e008      	b.n	800167c <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <cfg_NodeBatVarProp+0xa4>)
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e007      	b.n	8001680 <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <cfg_NodeBatVarProp+0xa8>)
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e004      	b.n	8001680 <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <cfg_NodeBatVarProp+0xac>)
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e001      	b.n	8001680 <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 800167c:	2302      	movs	r3, #2
 800167e:	e02e      	b.n	80016de <cfg_NodeBatVarProp+0x96>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00f      	beq.n	80016a6 <cfg_NodeBatVarProp+0x5e>
 8001686:	e007      	b.n	8001698 <cfg_NodeBatVarProp+0x50>
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	1c53      	adds	r3, r2, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f3      	bne.n	8001688 <cfg_NodeBatVarProp+0x40>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d017      	beq.n	80016dc <cfg_NodeBatVarProp+0x94>
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d00e      	beq.n	80016d0 <cfg_NodeBatVarProp+0x88>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	dc10      	bgt.n	80016d8 <cfg_NodeBatVarProp+0x90>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <cfg_NodeBatVarProp+0x78>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d004      	beq.n	80016c8 <cfg_NodeBatVarProp+0x80>
 80016be:	e00b      	b.n	80016d8 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2212      	movs	r2, #18
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	e009      	b.n	80016dc <cfg_NodeBatVarProp+0x94>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2212      	movs	r2, #18
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	e005      	b.n	80016dc <cfg_NodeBatVarProp+0x94>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2212      	movs	r2, #18
 80016d4:	801a      	strh	r2, [r3, #0]
 80016d6:	e001      	b.n	80016dc <cfg_NodeBatVarProp+0x94>
		default: return CFG_ERROR_VARID;
 80016d8:	2302      	movs	r3, #2
 80016da:	e000      	b.n	80016de <cfg_NodeBatVarProp+0x96>
	}
	return CFG_ERROR_NONE;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	08010f2c 	.word	0x08010f2c
 80016f0:	08010f34 	.word	0x08010f34
 80016f4:	08010f48 	.word	0x08010f48

080016f8 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d020      	beq.n	800174c <cfg_NodeBatVarGet+0x54>
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d014      	beq.n	800173a <cfg_NodeBatVarGet+0x42>
 8001710:	2b02      	cmp	r3, #2
 8001712:	dc19      	bgt.n	8001748 <cfg_NodeBatVarGet+0x50>
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <cfg_NodeBatVarGet+0x26>
 8001718:	2b01      	cmp	r3, #1
 800171a:	d007      	beq.n	800172c <cfg_NodeBatVarGet+0x34>
 800171c:	e014      	b.n	8001748 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <cfg_NodeBatVarGet+0x64>)
 8001720:	89db      	ldrh	r3, [r3, #14]
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e00f      	b.n	800174c <cfg_NodeBatVarGet+0x54>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <cfg_NodeBatVarGet+0x64>)
 800172e:	8a1b      	ldrh	r3, [r3, #16]
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e008      	b.n	800174c <cfg_NodeBatVarGet+0x54>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <cfg_NodeBatVarGet+0x64>)
 800173c:	7c9b      	ldrb	r3, [r3, #18]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e001      	b.n	800174c <cfg_NodeBatVarGet+0x54>
		default: return CFG_ERROR_VARID;
 8001748:	2302      	movs	r3, #2
 800174a:	e000      	b.n	800174e <cfg_NodeBatVarGet+0x56>
	}
	return CFG_ERROR_NONE;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000288 	.word	0x20000288

08001760 <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <cfg_NodeBatVarSet+0x32>
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d007      	beq.n	8001788 <cfg_NodeBatVarSet+0x28>
 8001778:	2b02      	cmp	r3, #2
 800177a:	dc03      	bgt.n	8001784 <cfg_NodeBatVarSet+0x24>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <cfg_NodeBatVarSet+0x2c>
 8001780:	2b01      	cmp	r3, #1
 8001782:	d005      	beq.n	8001790 <cfg_NodeBatVarSet+0x30>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 8001784:	2302      	movs	r3, #2
 8001786:	e005      	b.n	8001794 <cfg_NodeBatVarSet+0x34>
		case BAT_CHG_PERC:			break;
 8001788:	bf00      	nop
 800178a:	e002      	b.n	8001792 <cfg_NodeBatVarSet+0x32>
		case BAT_VOLTAGE:			break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <cfg_NodeBatVarSet+0x32>
		case BAT_FILTERED_VOLTAGE:	break;
 8001790:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <cfg_GetNodeName>:
	{ NODE_AUTOPILOT, NODE_MAIN, AUTOPILOT_VAR_NUM, cfg_NodeApVarGet, cfg_NodeApVarSet, cfg_NodeApVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	f242 72dd 	movw	r2, #10205	; 0x27dd
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dc3d      	bgt.n	8001832 <cfg_GetNodeName+0x92>
 80017b6:	f242 72d9 	movw	r2, #10201	; 0x27d9
 80017ba:	4293      	cmp	r3, r2
 80017bc:	da0c      	bge.n	80017d8 <cfg_GetNodeName+0x38>
 80017be:	2b67      	cmp	r3, #103	; 0x67
 80017c0:	d034      	beq.n	800182c <cfg_GetNodeName+0x8c>
 80017c2:	2b67      	cmp	r3, #103	; 0x67
 80017c4:	dc35      	bgt.n	8001832 <cfg_GetNodeName+0x92>
 80017c6:	2b66      	cmp	r3, #102	; 0x66
 80017c8:	d01e      	beq.n	8001808 <cfg_GetNodeName+0x68>
 80017ca:	2b66      	cmp	r3, #102	; 0x66
 80017cc:	dc31      	bgt.n	8001832 <cfg_GetNodeName+0x92>
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d014      	beq.n	80017fc <cfg_GetNodeName+0x5c>
 80017d2:	2b65      	cmp	r3, #101	; 0x65
 80017d4:	d015      	beq.n	8001802 <cfg_GetNodeName+0x62>
		case NODE_MOTOR    	: str = "Motor"; break;
		case NODE_RC    	: str = "RC"; break;
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_SENS    	: str = "Sensors"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		default:break;
 80017d6:	e02c      	b.n	8001832 <cfg_GetNodeName+0x92>
	switch( nodeid )
 80017d8:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 80017dc:	3b19      	subs	r3, #25
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d827      	bhi.n	8001832 <cfg_GetNodeName+0x92>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <cfg_GetNodeName+0x48>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	0800180f 	.word	0x0800180f
 80017ec:	08001815 	.word	0x08001815
 80017f0:	0800181b 	.word	0x0800181b
 80017f4:	08001821 	.word	0x08001821
 80017f8:	08001827 	.word	0x08001827
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <cfg_GetNodeName+0xc8>)
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e018      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_FW		: str = "Firmware"; break;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <cfg_GetNodeName+0xcc>)
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e015      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <cfg_GetNodeName+0xd0>)
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e012      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_SERVO    	: str = "Servo"; break;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <cfg_GetNodeName+0xd4>)
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e00f      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_MOTOR    	: str = "Motor"; break;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <cfg_GetNodeName+0xd8>)
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e00c      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_RC    	: str = "RC"; break;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <cfg_GetNodeName+0xdc>)
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e009      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_BAT    	: str = "Battery"; break;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <cfg_GetNodeName+0xe0>)
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e006      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_SENS    	: str = "Sensors"; break;
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <cfg_GetNodeName+0xe4>)
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e003      	b.n	8001834 <cfg_GetNodeName+0x94>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <cfg_GetNodeName+0xe8>)
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e000      	b.n	8001834 <cfg_GetNodeName+0x94>
		default:break;
 8001832:	bf00      	nop
	}
	if( name )
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00f      	beq.n	800185a <cfg_GetNodeName+0xba>
	{
		while( *str ){
 800183a:	e007      	b.n	800184c <cfg_GetNodeName+0xac>
			*name++ = *str++;
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	1c53      	adds	r3, r2, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	1c59      	adds	r1, r3, #1
 8001846:	6039      	str	r1, [r7, #0]
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	701a      	strb	r2, [r3, #0]
		while( *str ){
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f3      	bne.n	800183c <cfg_GetNodeName+0x9c>
		}
		*name = 0;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	08010f54 	.word	0x08010f54
 800186c:	08010f60 	.word	0x08010f60
 8001870:	08010f6c 	.word	0x08010f6c
 8001874:	08010f80 	.word	0x08010f80
 8001878:	08010f88 	.word	0x08010f88
 800187c:	08010f90 	.word	0x08010f90
 8001880:	08010f94 	.word	0x08010f94
 8001884:	08010f9c 	.word	0x08010f9c
 8001888:	08010fa4 	.word	0x08010fa4

0800188c <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <cfg_GetNode+0x58>)
 8001898:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 800189a:	2300      	movs	r3, #0
 800189c:	817b      	strh	r3, [r7, #10]
 800189e:	e005      	b.n	80018ac <cfg_GetNode+0x20>
 80018a0:	897b      	ldrh	r3, [r7, #10]
 80018a2:	3301      	adds	r3, #1
 80018a4:	817b      	strh	r3, [r7, #10]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3314      	adds	r3, #20
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <cfg_GetNode+0x5c>)
 80018ae:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	897a      	ldrh	r2, [r7, #10]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d204      	bcs.n	80018c4 <cfg_GetNode+0x38>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1ed      	bne.n	80018a0 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <cfg_GetNode+0x5c>)
 80018c6:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	897a      	ldrh	r2, [r7, #10]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <cfg_GetNode+0x4a>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	e000      	b.n	80018d8 <cfg_GetNode+0x4c>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000030 	.word	0x20000030
 80018e8:	200002b8 	.word	0x200002b8

080018ec <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <cfg_NodeFwVarProp+0x70>)
 8001902:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2214      	movs	r2, #20
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	e00d      	b.n	8001928 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <cfg_NodeFwVarProp+0x74>)
 8001914:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	e004      	b.n	8001928 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <cfg_NodeFwVarProp+0x78>)
 8001920:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2215      	movs	r2, #21
 8001926:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <cfg_NodeFwVarProp+0x62>
 800192e:	e007      	b.n	8001940 <cfg_NodeFwVarProp+0x54>
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	1c53      	adds	r3, r2, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c59      	adds	r1, r3, #1
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f3      	bne.n	8001930 <cfg_NodeFwVarProp+0x44>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	08010fb0 	.word	0x08010fb0
 8001960:	08010fb8 	.word	0x08010fb8
 8001964:	08010fd0 	.word	0x08010fd0

08001968 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <cfg_NodeFwVarGet+0x40>)
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e00a      	b.n	8001998 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d103      	bne.n	8001990 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e003      	b.n	8001998 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f04f 32ff 	mov.w	r2, #4294967295
 8001996:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	3f666666 	.word	0x3f666666

080019ac <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 80019c6:	f001 f91d 	bl	8002c04 <cfg_ClearFwBuf>
 80019ca:	e00f      	b.n	80019ec <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	2b2f      	cmp	r3, #47	; 0x2f
 80019d0:	d805      	bhi.n	80019de <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f92c 	bl	8002c34 <cfg_WriteFwData>
 80019dc:	e006      	b.n	80019ec <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	2b31      	cmp	r3, #49	; 0x31
 80019e2:	d103      	bne.n	80019ec <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <cfg_NodeFwVarSet+0x4c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
	}
	return CFG_ERROR_NONE;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200002b8 	.word	0x200002b8

080019fc <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d817      	bhi.n	8001a40 <cfg_NodeMainVarProp+0x44>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <cfg_NodeMainVarProp+0x1c>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a2f 	.word	0x08001a2f
 8001a20:	08001a35 	.word	0x08001a35
 8001a24:	08001a3b 	.word	0x08001a3b
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <cfg_NodeMainVarProp+0xc4>)
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e00a      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <cfg_NodeMainVarProp+0xc8>)
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e007      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <cfg_NodeMainVarProp+0xcc>)
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e004      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <cfg_NodeMainVarProp+0xd0>)
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e001      	b.n	8001a44 <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8001a40:	2302      	movs	r3, #2
 8001a42:	e036      	b.n	8001ab2 <cfg_NodeMainVarProp+0xb6>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00f      	beq.n	8001a6a <cfg_NodeMainVarProp+0x6e>
 8001a4a:	e007      	b.n	8001a5c <cfg_NodeMainVarProp+0x60>
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	1c53      	adds	r3, r2, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f3      	bne.n	8001a4c <cfg_NodeMainVarProp+0x50>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01f      	beq.n	8001ab0 <cfg_NodeMainVarProp+0xb4>
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d81a      	bhi.n	8001aac <cfg_NodeMainVarProp+0xb0>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <cfg_NodeMainVarProp+0x80>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a95 	.word	0x08001a95
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001aa5 	.word	0x08001aa5
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2222      	movs	r2, #34	; 0x22
 8001a90:	801a      	strh	r2, [r3, #0]
 8001a92:	e00d      	b.n	8001ab0 <cfg_NodeMainVarProp+0xb4>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2217      	movs	r2, #23
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	e009      	b.n	8001ab0 <cfg_NodeMainVarProp+0xb4>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	e005      	b.n	8001ab0 <cfg_NodeMainVarProp+0xb4>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	e001      	b.n	8001ab0 <cfg_NodeMainVarProp+0xb4>
		default: return CFG_ERROR_VARID;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e000      	b.n	8001ab2 <cfg_NodeMainVarProp+0xb6>
	}
	return CFG_ERROR_NONE;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	08010fd8 	.word	0x08010fd8
 8001ac4:	08010fe4 	.word	0x08010fe4
 8001ac8:	08010ff4 	.word	0x08010ff4
 8001acc:	08011004 	.word	0x08011004

08001ad0 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d026      	beq.n	8001b30 <cfg_NodeMainVarGet+0x60>
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d821      	bhi.n	8001b2c <cfg_NodeMainVarGet+0x5c>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <cfg_NodeMainVarGet+0x20>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b11 	.word	0x08001b11
 8001af8:	08001b1d 	.word	0x08001b1d
 8001afc:	08001b25 	.word	0x08001b25
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <cfg_NodeMainVarGet+0x6c>)
 8001b02:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e00f      	b.n	8001b30 <cfg_NodeMainVarGet+0x60>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 8001b10:	f004 fe3c 	bl	800678c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e009      	b.n	8001b30 <cfg_NodeMainVarGet+0x60>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e005      	b.n	8001b30 <cfg_NodeMainVarGet+0x60>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e001      	b.n	8001b30 <cfg_NodeMainVarGet+0x60>
		default: return CFG_ERROR_VARID;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e000      	b.n	8001b32 <cfg_NodeMainVarGet+0x62>
	}
	return CFG_ERROR_NONE;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200002b8 	.word	0x200002b8

08001b40 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d02a      	beq.n	8001ba8 <cfg_NodeMainVarSet+0x68>
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d820      	bhi.n	8001b9a <cfg_NodeMainVarSet+0x5a>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <cfg_NodeMainVarSet+0x20>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b9f 	.word	0x08001b9f
 8001b68:	08001b7d 	.word	0x08001b7d
 8001b6c:	08001b8b 	.word	0x08001b8b
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <cfg_NodeMainVarSet+0x74>)
 8001b76:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
 8001b7a:	e015      	b.n	8001ba8 <cfg_NodeMainVarSet+0x68>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00e      	beq.n	8001ba2 <cfg_NodeMainVarSet+0x62>
 8001b84:	f000 fe68 	bl	8002858 <cfg_SaveSettings>
 8001b88:	e00b      	b.n	8001ba2 <cfg_NodeMainVarSet+0x62>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <cfg_NodeMainVarSet+0x66>
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <cfg_NodeMainVarSet+0x78>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e005      	b.n	8001ba6 <cfg_NodeMainVarSet+0x66>
		default: return CFG_ERROR_VARID;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e005      	b.n	8001baa <cfg_NodeMainVarSet+0x6a>
		case MAIN_WORKING_TIME:				break;
 8001b9e:	bf00      	nop
 8001ba0:	e002      	b.n	8001ba8 <cfg_NodeMainVarSet+0x68>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001ba2:	bf00      	nop
 8001ba4:	e000      	b.n	8001ba8 <cfg_NodeMainVarSet+0x68>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8001ba6:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002b8 	.word	0x200002b8
 8001bb8:	20000ef0 	.word	0x20000ef0

08001bbc <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e023      	b.n	8001c12 <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <cfg_Timer+0x68>)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d014      	beq.n	8001c0c <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <cfg_Timer+0x68>)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	490a      	ldr	r1, [pc, #40]	; (8001c24 <cfg_Timer+0x68>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001c00:	fb00 f303 	mul.w	r3, r0, r3
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c0a:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d9d8      	bls.n	8001bca <cfg_Timer+0xe>
		}
	}

	return;
 8001c18:	bf00      	nop
}
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	200002b8 	.word	0x200002b8

08001c28 <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c38:	2209      	movs	r2, #9
 8001c3a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	e040      	b.n	8001cc6 <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 8001c82:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d9bb      	bls.n	8001c44 <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001cce:	4a07      	ldr	r2, [pc, #28]	; (8001cec <cfg_InitTask+0xc4>)
 8001cd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	cfg_info.iface[CFG_IFACE_CH1_USB].tx_func = cfg_TxDataCh1USB;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <cfg_InitTask+0xc0>)
 8001cd6:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <cfg_InitTask+0xc8>)
 8001cd8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

	cfg_LoadSettings();
 8001cdc:	f000 fee4 	bl	8002aa8 <cfg_LoadSettings>

	return;
 8001ce0:	bf00      	nop
}
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200002b8 	.word	0x200002b8
 8001cec:	08003051 	.word	0x08003051
 8001cf0:	0800306d 	.word	0x0800306d

08001cf4 <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b099      	sub	sp, #100	; 0x64
 8001cf8:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001d22:	2300      	movs	r3, #0
 8001d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d26:	e3f3      	b.n	8002510 <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 8001d28:	4ab8      	ldr	r2, [pc, #736]	; (800200c <cfg_Task+0x318>)
 8001d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d069      	beq.n	8001e14 <cfg_Task+0x120>
 8001d40:	4ab2      	ldr	r2, [pc, #712]	; (800200c <cfg_Task+0x318>)
 8001d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d44:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d15d      	bne.n	8001e14 <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8001d58:	4aac      	ldr	r2, [pc, #688]	; (800200c <cfg_Task+0x318>)
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8001d6e:	4aa7      	ldr	r2, [pc, #668]	; (800200c <cfg_Task+0x318>)
 8001d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d72:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	d91c      	bls.n	8001dc0 <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 8001d86:	4aa1      	ldr	r2, [pc, #644]	; (800200c <cfg_Task+0x318>)
 8001d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d9c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001da0:	fb01 f202 	mul.w	r2, r1, r2
 8001da4:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001da8:	4998      	ldr	r1, [pc, #608]	; (800200c <cfg_Task+0x318>)
 8001daa:	440a      	add	r2, r1
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	4610      	mov	r0, r2
 8001db0:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 8001db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2140      	movs	r1, #64	; 0x40
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 f89f 	bl	8002efc <cfg_RemTxData>
 8001dbe:	e029      	b.n	8001e14 <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8001dc0:	4a92      	ldr	r2, [pc, #584]	; (800200c <cfg_Task+0x318>)
 8001dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dd6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001dda:	fb01 f202 	mul.w	r2, r1, r2
 8001dde:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001de2:	498a      	ldr	r1, [pc, #552]	; (800200c <cfg_Task+0x318>)
 8001de4:	1850      	adds	r0, r2, r1
 8001de6:	4989      	ldr	r1, [pc, #548]	; (800200c <cfg_Task+0x318>)
 8001de8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dea:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8001dee:	fb04 f202 	mul.w	r2, r4, r2
 8001df2:	440a      	add	r2, r1
 8001df4:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8001dfe:	4a83      	ldr	r2, [pc, #524]	; (800200c <cfg_Task+0x318>)
 8001e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e02:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 8001e14:	4a7d      	ldr	r2, [pc, #500]	; (800200c <cfg_Task+0x318>)
 8001e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e18:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e1c:	fb01 f303 	mul.w	r3, r1, r3
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 836e 	beq.w	800250a <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 8001e2e:	4a77      	ldr	r2, [pc, #476]	; (800200c <cfg_Task+0x318>)
 8001e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e32:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	4971      	ldr	r1, [pc, #452]	; (800200c <cfg_Task+0x318>)
 8001e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e48:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001e4c:	fb00 f303 	mul.w	r3, r0, r3
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e56:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8001e58:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8001e5c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8001e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 ff08 	bl	8002c80 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8001e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2202      	movs	r2, #2
 8001e76:	4966      	ldr	r1, [pc, #408]	; (8002010 <cfg_Task+0x31c>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 ff01 	bl	8002c80 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8001e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e80:	b298      	uxth	r0, r3
 8001e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e84:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	f203 2315 	addw	r3, r3, #533	; 0x215
 8001e90:	4a5e      	ldr	r2, [pc, #376]	; (800200c <cfg_Task+0x318>)
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	2201      	movs	r2, #1
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f000 fef1 	bl	8002c80 <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <cfg_Task+0x318>)
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4955      	ldr	r1, [pc, #340]	; (8002014 <cfg_Task+0x320>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fedd 	bl	8002c80 <cfg_AddTxData>
 8001ec6:	e2db      	b.n	8002480 <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8001ec8:	4a50      	ldr	r2, [pc, #320]	; (800200c <cfg_Task+0x318>)
 8001eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ecc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	f040 809c 	bne.w	800201c <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001ef2:	4a46      	ldr	r2, [pc, #280]	; (800200c <cfg_Task+0x318>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8001f00:	4b42      	ldr	r3, [pc, #264]	; (800200c <cfg_Task+0x318>)
 8001f02:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d957      	bls.n	8001fc0 <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 feb0 	bl	8002c80 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 8001f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f22:	b298      	uxth	r0, r3
 8001f24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4a39      	ldr	r2, [pc, #228]	; (8002018 <cfg_Task+0x324>)
 8001f34:	4413      	add	r3, r2
 8001f36:	2202      	movs	r2, #2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f000 fea1 	bl	8002c80 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8001f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f40:	b298      	uxth	r0, r3
 8001f42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f46:	461a      	mov	r2, r3
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4a31      	ldr	r2, [pc, #196]	; (8002018 <cfg_Task+0x324>)
 8001f52:	4413      	add	r3, r2
 8001f54:	3302      	adds	r3, #2
 8001f56:	2202      	movs	r2, #2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f000 fe91 	bl	8002c80 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8001f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f60:	b298      	uxth	r0, r3
 8001f62:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f66:	461a      	mov	r2, r3
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <cfg_Task+0x324>)
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	2202      	movs	r2, #2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f000 fe81 	bl	8002c80 <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8001f7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f82:	4619      	mov	r1, r3
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <cfg_Task+0x324>)
 8001f86:	460b      	mov	r3, r1
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	1d3a      	adds	r2, r7, #4
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fc02 	bl	80017a0 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f91a 	bl	80001d8 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8001fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001fb6:	1d39      	adds	r1, r7, #4
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fe61 	bl	8002c80 <cfg_AddTxData>
 8001fbe:	e25f      	b.n	8002480 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <cfg_Task+0x318>)
 8001fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fda:	b2d8      	uxtb	r0, r3
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <cfg_Task+0x318>)
 8001fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001fee:	4602      	mov	r2, r0
 8001ff0:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002000:	2201      	movs	r2, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fe3c 	bl	8002c80 <cfg_AddTxData>
 8002008:	e23a      	b.n	8002480 <cfg_Task+0x78c>
 800200a:	bf00      	nop
 800200c:	200002b8 	.word	0x200002b8
 8002010:	200008f0 	.word	0x200008f0
 8002014:	200008f8 	.word	0x200008f8
 8002018:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 800201c:	4ab0      	ldr	r2, [pc, #704]	; (80022e0 <cfg_Task+0x5ec>)
 800201e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002020:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	f203 2319 	addw	r3, r3, #537	; 0x219
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b03      	cmp	r3, #3
 8002034:	f040 80a8 	bne.w	8002188 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002046:	4aa6      	ldr	r2, [pc, #664]	; (80022e0 <cfg_Task+0x5ec>)
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002056:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002062:	4a9f      	ldr	r2, [pc, #636]	; (80022e0 <cfg_Task+0x5ec>)
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8002070:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fc09 	bl	800188c <cfg_GetNode>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05e      	beq.n	800213e <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8002080:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc01 	bl	800188c <cfg_GetNode>
 800208a:	4603      	mov	r3, r0
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8002092:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8002096:	1d39      	adds	r1, r7, #4
 8002098:	4798      	blx	r3
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d129      	bne.n	80020f4 <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 80020a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f107 0152 	add.w	r1, r7, #82	; 0x52
 80020a8:	2202      	movs	r2, #2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fde8 	bl	8002c80 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020b8:	2202      	movs	r2, #2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fde0 	bl	8002c80 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 80020c8:	2202      	movs	r2, #2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fdd8 	bl	8002c80 <cfg_AddTxData>
						name_len = strlen(name) + 1;
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe f880 	bl	80001d8 <strlen>
 80020d8:	4603      	mov	r3, r0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 80020e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80020ea:	1d39      	adds	r1, r7, #4
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fdc7 	bl	8002c80 <cfg_AddTxData>
 80020f2:	e1c5      	b.n	8002480 <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 80020f4:	4a7a      	ldr	r2, [pc, #488]	; (80022e0 <cfg_Task+0x5ec>)
 80020f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4a73      	ldr	r2, [pc, #460]	; (80022e0 <cfg_Task+0x5ec>)
 8002112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002114:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002122:	4602      	mov	r2, r0
 8002124:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 8002126:	2304      	movs	r3, #4
 8002128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	b29b      	uxth	r3, r3
 8002130:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002134:	2201      	movs	r2, #1
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fda2 	bl	8002c80 <cfg_AddTxData>
 800213c:	e1a0      	b.n	8002480 <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 800213e:	4a68      	ldr	r2, [pc, #416]	; (80022e0 <cfg_Task+0x5ec>)
 8002140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002142:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002158:	b2d8      	uxtb	r0, r3
 800215a:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <cfg_Task+0x5ec>)
 800215c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800216c:	4602      	mov	r2, r0
 800216e:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002170:	2303      	movs	r3, #3
 8002172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002178:	b29b      	uxth	r3, r3
 800217a:	f107 0157 	add.w	r1, r7, #87	; 0x57
 800217e:	2201      	movs	r2, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fd7d 	bl	8002c80 <cfg_AddTxData>
 8002186:	e17b      	b.n	8002480 <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8002188:	4a55      	ldr	r2, [pc, #340]	; (80022e0 <cfg_Task+0x5ec>)
 800218a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	f203 2319 	addw	r3, r3, #537	; 0x219
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b10      	cmp	r3, #16
 80021a0:	f040 80a0 	bne.w	80022e4 <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 80021a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	f203 2316 	addw	r3, r3, #534	; 0x216
 80021b2:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <cfg_Task+0x5ec>)
 80021b4:	4413      	add	r3, r2
 80021b6:	3304      	adds	r3, #4
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 80021c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80021ce:	4a44      	ldr	r2, [pc, #272]	; (80022e0 <cfg_Task+0x5ec>)
 80021d0:	4413      	add	r3, r2
 80021d2:	3304      	adds	r3, #4
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 80021dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021de:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	f203 231a 	addw	r3, r3, #538	; 0x21a
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <cfg_Task+0x5ec>)
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 80021f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fb45 	bl	800188c <cfg_GetNode>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d046      	beq.n	8002296 <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220a:	b29b      	uxth	r3, r3
 800220c:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002210:	2202      	movs	r2, #2
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fd34 	bl	8002c80 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221a:	b29b      	uxth	r3, r3
 800221c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002220:	2202      	movs	r2, #2
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fd2c 	bl	8002c80 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002228:	2300      	movs	r3, #0
 800222a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800222e:	e021      	b.n	8002274 <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 8002230:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fb29 	bl	800188c <cfg_GetNode>
 800223a:	4603      	mov	r3, r0
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8002242:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002246:	440a      	add	r2, r1
 8002248:	b292      	uxth	r2, r2
 800224a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800224e:	4610      	mov	r0, r2
 8002250:	4798      	blx	r3
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d114      	bne.n	8002282 <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225a:	b29b      	uxth	r3, r3
 800225c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002260:	2204      	movs	r2, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fd0c 	bl	8002c80 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800226c:	3301      	adds	r3, #1
 800226e:	b29b      	uxth	r3, r3
 8002270:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002274:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002278:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800227c:	429a      	cmp	r2, r3
 800227e:	d3d7      	bcc.n	8002230 <cfg_Task+0x53c>
 8002280:	e000      	b.n	8002284 <cfg_Task+0x590>
						}
						else{
							break;
 8002282:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 8002284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002286:	b298      	uxth	r0, r3
 8002288:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800228c:	2302      	movs	r3, #2
 800228e:	2109      	movs	r1, #9
 8002290:	f000 fd48 	bl	8002d24 <cfg_IntertTxData>
 8002294:	e0f4      	b.n	8002480 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <cfg_Task+0x5ec>)
 8002298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <cfg_Task+0x5ec>)
 80022b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80022c4:	4602      	mov	r2, r0
 80022c6:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80022d6:	2201      	movs	r2, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fcd1 	bl	8002c80 <cfg_AddTxData>
 80022de:	e0cf      	b.n	8002480 <cfg_Task+0x78c>
 80022e0:	200002b8 	.word	0x200002b8
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 80022e4:	4a8e      	ldr	r2, [pc, #568]	; (8002520 <cfg_Task+0x82c>)
 80022e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	f203 2319 	addw	r3, r3, #537	; 0x219
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b11      	cmp	r3, #17
 80022fc:	f040 80c0 	bne.w	8002480 <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002302:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	f203 2316 	addw	r3, r3, #534	; 0x216
 800230e:	4a84      	ldr	r2, [pc, #528]	; (8002520 <cfg_Task+0x82c>)
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 800231c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800232a:	4a7d      	ldr	r2, [pc, #500]	; (8002520 <cfg_Task+0x82c>)
 800232c:	4413      	add	r3, r2
 800232e:	3304      	adds	r3, #4
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8002346:	4a76      	ldr	r2, [pc, #472]	; (8002520 <cfg_Task+0x82c>)
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8002354:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fa97 	bl	800188c <cfg_GetNode>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d069      	beq.n	8002438 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002366:	b29b      	uxth	r3, r3
 8002368:	f107 0152 	add.w	r1, r7, #82	; 0x52
 800236c:	2202      	movs	r2, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fc86 	bl	8002c80 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	b29b      	uxth	r3, r3
 8002378:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800237c:	2202      	movs	r2, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fc7e 	bl	8002c80 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002384:	2300      	movs	r3, #0
 8002386:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800238a:	e046      	b.n	800241a <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 800238c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002390:	3303      	adds	r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002396:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800239a:	fb01 f202 	mul.w	r2, r1, r2
 800239e:	4413      	add	r3, r2
 80023a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023a4:	4a5e      	ldr	r2, [pc, #376]	; (8002520 <cfg_Task+0x82c>)
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80023ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fa6a 	bl	800188c <cfg_GetNode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80023c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80023c4:	440a      	add	r2, r1
 80023c6:	b292      	uxth	r2, r2
 80023c8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80023cc:	4610      	mov	r0, r2
 80023ce:	4798      	blx	r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d127      	bne.n	8002426 <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 80023d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fa56 	bl	800188c <cfg_GetNode>
 80023e0:	4603      	mov	r3, r0
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80023e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80023ec:	440a      	add	r2, r1
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80023f4:	4610      	mov	r0, r2
 80023f6:	4798      	blx	r3
 80023f8:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	b29b      	uxth	r3, r3
 8002402:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002406:	2204      	movs	r2, #4
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fc39 	bl	8002c80 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800240e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002412:	3301      	adds	r3, #1
 8002414:	b29b      	uxth	r3, r3
 8002416:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800241a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800241e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002422:	429a      	cmp	r2, r3
 8002424:	d3b2      	bcc.n	800238c <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 8002426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002428:	b298      	uxth	r0, r3
 800242a:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800242e:	2302      	movs	r3, #2
 8002430:	2109      	movs	r1, #9
 8002432:	f000 fc77 	bl	8002d24 <cfg_IntertTxData>
 8002436:	e023      	b.n	8002480 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002438:	4a39      	ldr	r2, [pc, #228]	; (8002520 <cfg_Task+0x82c>)
 800243a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002452:	b2d8      	uxtb	r0, r3
 8002454:	4a32      	ldr	r2, [pc, #200]	; (8002520 <cfg_Task+0x82c>)
 8002456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002458:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002466:	4602      	mov	r2, r0
 8002468:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 800246a:	2303      	movs	r3, #3
 800246c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002472:	b29b      	uxth	r3, r3
 8002474:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002478:	2201      	movs	r2, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fc00 	bl	8002c80 <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <cfg_Task+0x82c>)
 8002482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002484:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3b04      	subs	r3, #4
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 800249e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a0:	b298      	uxth	r0, r3
 80024a2:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80024a6:	2301      	movs	r3, #1
 80024a8:	2104      	movs	r1, #4
 80024aa:	f000 fc3b 	bl	8002d24 <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80024bc:	4a18      	ldr	r2, [pc, #96]	; (8002520 <cfg_Task+0x82c>)
 80024be:	441a      	add	r2, r3
 80024c0:	4917      	ldr	r1, [pc, #92]	; (8002520 <cfg_Task+0x82c>)
 80024c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80024c8:	fb00 f303 	mul.w	r3, r0, r3
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 fdd7 	bl	800308c <crc16_calc>
 80024de:	4603      	mov	r3, r0
 80024e0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 80024e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80024ec:	2202      	movs	r2, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fbc6 	bl	8002c80 <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <cfg_Task+0x82c>)
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 800250a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800250c:	3301      	adds	r3, #1
 800250e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002512:	2b01      	cmp	r3, #1
 8002514:	f67f ac08 	bls.w	8001d28 <cfg_Task+0x34>
		}
	}

	return;
 8002518:	bf00      	nop
}
 800251a:	3764      	adds	r7, #100	; 0x64
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	200002b8 	.word	0x200002b8

08002524 <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	460a      	mov	r2, r1
 800252e:	80fb      	strh	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f200 8164 	bhi.w	8002804 <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 800253c:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	49b4      	ldr	r1, [pc, #720]	; (8002814 <cfg_RcvData+0x2f0>)
 8002542:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002546:	fb00 f202 	mul.w	r2, r0, r2
 800254a:	440a      	add	r2, r1
 800254c:	3204      	adds	r2, #4
 800254e:	8812      	ldrh	r2, [r2, #0]
 8002550:	b292      	uxth	r2, r2
 8002552:	3201      	adds	r2, #1
 8002554:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002556:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002558:	b2c9      	uxtb	r1, r1
 800255a:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 800255c:	49ad      	ldr	r1, [pc, #692]	; (8002814 <cfg_RcvData+0x2f0>)
 800255e:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002562:	fb00 f202 	mul.w	r2, r0, r2
 8002566:	440a      	add	r2, r1
 8002568:	3204      	adds	r2, #4
 800256a:	4621      	mov	r1, r4
 800256c:	8011      	strh	r1, [r2, #0]
 800256e:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002570:	4aa8      	ldr	r2, [pc, #672]	; (8002814 <cfg_RcvData+0x2f0>)
 8002572:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	4403      	add	r3, r0
 800257e:	3308      	adds	r3, #8
 8002580:	797a      	ldrb	r2, [r7, #5]
 8002582:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	4aa3      	ldr	r2, [pc, #652]	; (8002814 <cfg_RcvData+0x2f0>)
 8002588:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d17b      	bne.n	8002692 <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	3308      	adds	r3, #8
 80025a6:	4a9b      	ldr	r2, [pc, #620]	; (8002814 <cfg_RcvData+0x2f0>)
 80025a8:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4999      	ldr	r1, [pc, #612]	; (8002814 <cfg_RcvData+0x2f0>)
 80025ae:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80025b2:	fb00 f303 	mul.w	r3, r0, r3
 80025b6:	440b      	add	r3, r1
 80025b8:	3304      	adds	r3, #4
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b04      	subs	r3, #4
 80025c0:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f000 f927 	bl	800281c <cfg_ringBufRead16b>
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	3308      	adds	r3, #8
 80025de:	4a8d      	ldr	r2, [pc, #564]	; (8002814 <cfg_RcvData+0x2f0>)
 80025e0:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	498b      	ldr	r1, [pc, #556]	; (8002814 <cfg_RcvData+0x2f0>)
 80025e6:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80025ea:	fb00 f303 	mul.w	r3, r0, r3
 80025ee:	440b      	add	r3, r1
 80025f0:	3304      	adds	r3, #4
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b02      	subs	r3, #2
 80025f8:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f000 f90b 	bl	800281c <cfg_ringBufRead16b>
 8002606:	4603      	mov	r3, r0
 8002608:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 8002610:	4293      	cmp	r3, r2
 8002612:	f040 80f9 	bne.w	8002808 <cfg_RcvData+0x2e4>
 8002616:	4b7f      	ldr	r3, [pc, #508]	; (8002814 <cfg_RcvData+0x2f0>)
 8002618:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 800261c:	b29b      	uxth	r3, r3
 800261e:	893a      	ldrh	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	f040 80f1 	bne.w	8002808 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <cfg_RcvData+0x2f0>)
 800262a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b04      	subs	r3, #4
 800263c:	b29a      	uxth	r2, r3
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	b290      	uxth	r0, r2
 8002644:	4a73      	ldr	r2, [pc, #460]	; (8002814 <cfg_RcvData+0x2f0>)
 8002646:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3302      	adds	r3, #2
 8002652:	4602      	mov	r2, r0
 8002654:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 8002656:	797b      	ldrb	r3, [r7, #5]
 8002658:	b29b      	uxth	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b6e      	ldr	r3, [pc, #440]	; (8002818 <cfg_RcvData+0x2f4>)
 8002660:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 8002662:	797b      	ldrb	r3, [r7, #5]
 8002664:	b29a      	uxth	r2, r3
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	3205      	adds	r2, #5
 800266a:	b290      	uxth	r0, r2
 800266c:	4a69      	ldr	r2, [pc, #420]	; (8002814 <cfg_RcvData+0x2f0>)
 800266e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3306      	adds	r3, #6
 800267a:	4602      	mov	r2, r0
 800267c:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4a64      	ldr	r2, [pc, #400]	; (8002814 <cfg_RcvData+0x2f0>)
 8002682:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8002690:	e0ba      	b.n	8002808 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4a5f      	ldr	r2, [pc, #380]	; (8002814 <cfg_RcvData+0x2f0>)
 8002696:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	f040 80af 	bne.w	8002808 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <cfg_RcvData+0x2f4>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	b291      	uxth	r1, r2
 80026b2:	4a59      	ldr	r2, [pc, #356]	; (8002818 <cfg_RcvData+0x2f4>)
 80026b4:	8011      	strh	r1, [r2, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80a8 	bne.w	800280c <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4a55      	ldr	r2, [pc, #340]	; (8002814 <cfg_RcvData+0x2f0>)
 80026c0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	3308      	adds	r3, #8
 80026da:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <cfg_RcvData+0x2f0>)
 80026dc:	1898      	adds	r0, r3, r2
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <cfg_RcvData+0x2f0>)
 80026e2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3302      	adds	r3, #2
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b299      	uxth	r1, r3
 80026f2:	88fb      	ldrh	r3, [r7, #6]
					cfg_info.iface[iface].rx_buf.data_size, CFG_BUF_MASK);
 80026f4:	4a47      	ldr	r2, [pc, #284]	; (8002814 <cfg_RcvData+0x2f0>)
 80026f6:	f44f 7447 	mov.w	r4, #796	; 0x31c
 80026fa:	fb04 f303 	mul.w	r3, r4, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3306      	adds	r3, #6
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29a      	uxth	r2, r3
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 8002706:	23ff      	movs	r3, #255	; 0xff
 8002708:	f000 fcea 	bl	80030e0 <crc16_RingBuf>
 800270c:	4603      	mov	r3, r0
 800270e:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	3308      	adds	r3, #8
 800271c:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <cfg_RcvData+0x2f0>)
 800271e:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	493c      	ldr	r1, [pc, #240]	; (8002814 <cfg_RcvData+0x2f0>)
 8002724:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002728:	fb00 f303 	mul.w	r3, r0, r3
 800272c:	440b      	add	r3, r1
 800272e:	3304      	adds	r3, #4
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002738:	b2db      	uxtb	r3, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f000 f86c 	bl	800281c <cfg_ringBufRead16b>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	89bb      	ldrh	r3, [r7, #12]
 800274a:	4293      	cmp	r3, r2
 800274c:	d15c      	bne.n	8002808 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4a30      	ldr	r2, [pc, #192]	; (8002814 <cfg_RcvData+0x2f0>)
 8002752:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d150      	bne.n	8002808 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8002766:	2300      	movs	r3, #0
 8002768:	81fb      	strh	r3, [r7, #14]
 800276a:	e028      	b.n	80027be <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 800276c:	88f8      	ldrh	r0, [r7, #6]
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <cfg_RcvData+0x2f0>)
 8002772:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3302      	adds	r3, #2
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	89fb      	ldrh	r3, [r7, #14]
 8002784:	4413      	add	r3, r2
 8002786:	b29b      	uxth	r3, r3
 8002788:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 800278e:	4c21      	ldr	r4, [pc, #132]	; (8002814 <cfg_RcvData+0x2f0>)
 8002790:	f44f 7547 	mov.w	r5, #796	; 0x31c
 8002794:	fb05 f000 	mul.w	r0, r5, r0
 8002798:	4420      	add	r0, r4
 800279a:	4401      	add	r1, r0
 800279c:	3108      	adds	r1, #8
 800279e:	7809      	ldrb	r1, [r1, #0]
 80027a0:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 80027a2:	491c      	ldr	r1, [pc, #112]	; (8002814 <cfg_RcvData+0x2f0>)
 80027a4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80027a8:	fb00 f202 	mul.w	r2, r0, r2
 80027ac:	440a      	add	r2, r1
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027b4:	4622      	mov	r2, r4
 80027b6:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	3301      	adds	r3, #1
 80027bc:	81fb      	strh	r3, [r7, #14]
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <cfg_RcvData+0x2f0>)
 80027c2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3306      	adds	r3, #6
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	89fa      	ldrh	r2, [r7, #14]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3c9      	bcc.n	800276c <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <cfg_RcvData+0x2f0>)
 80027dc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3306      	adds	r3, #6
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	4610      	mov	r0, r2
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <cfg_RcvData+0x2f0>)
 80027f2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002800:	6018      	str	r0, [r3, #0]
	return;
 8002802:	e001      	b.n	8002808 <cfg_RcvData+0x2e4>
		return;
 8002804:	bf00      	nop
 8002806:	e002      	b.n	800280e <cfg_RcvData+0x2ea>
	return;
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <cfg_RcvData+0x2ea>
			return;
 800280c:	bf00      	nop
}
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bdb0      	pop	{r4, r5, r7, pc}
 8002814:	200002b8 	.word	0x200002b8
 8002818:	2000090c 	.word	0x2000090c

0800281c <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	3301      	adds	r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8002836:	89fb      	ldrh	r3, [r7, #14]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	440b      	add	r3, r1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4413      	add	r3, r2
 8002848:	81fb      	strh	r3, [r7, #14]
	return tmp;
 800284a:	89fb      	ldrh	r3, [r7, #14]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8002858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285c:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800286a:	f102 020a 	add.w	r2, r2, #10
 800286e:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 8002870:	2300      	movs	r3, #0
 8002872:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002876:	f102 020e 	add.w	r2, r2, #14
 800287a:	8013      	strh	r3, [r2, #0]
 800287c:	e079      	b.n	8002972 <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800287e:	2300      	movs	r3, #0
 8002880:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002884:	f102 020c 	add.w	r2, r2, #12
 8002888:	8013      	strh	r3, [r2, #0]
 800288a:	e053      	b.n	8002934 <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 800288c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002890:	f103 030e 	add.w	r3, r3, #14
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	4981      	ldr	r1, [pc, #516]	; (8002a9c <cfg_SaveSettings+0x244>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3310      	adds	r3, #16
 80028a4:	681e      	ldr	r6, [r3, #0]
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	3b0e      	subs	r3, #14
 80028ac:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80028b0:	f102 020c 	add.w	r2, r2, #12
 80028b4:	8810      	ldrh	r0, [r2, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	2100      	movs	r1, #0
 80028ba:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d028      	beq.n	800291e <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 80028cc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028d0:	f103 030e 	add.w	r3, r3, #14
 80028d4:	881a      	ldrh	r2, [r3, #0]
 80028d6:	4971      	ldr	r1, [pc, #452]	; (8002a9c <cfg_SaveSettings+0x244>)
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3308      	adds	r3, #8
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028ea:	f103 030a 	add.w	r3, r3, #10
 80028ee:	8819      	ldrh	r1, [r3, #0]
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	3b0c      	subs	r3, #12
 80028f6:	0089      	lsls	r1, r1, #2
 80028f8:	4419      	add	r1, r3
 80028fa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028fe:	f103 030c 	add.w	r3, r3, #12
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	4790      	blx	r2
				var_cnt += 1;
 8002908:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800290c:	f103 030a 	add.w	r3, r3, #10
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002918:	f102 020a 	add.w	r2, r2, #10
 800291c:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800291e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002922:	f103 030c 	add.w	r3, r3, #12
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800292e:	f102 020c 	add.w	r2, r2, #12
 8002932:	8013      	strh	r3, [r2, #0]
 8002934:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002938:	f103 030e 	add.w	r3, r3, #14
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	4957      	ldr	r1, [pc, #348]	; (8002a9c <cfg_SaveSettings+0x244>)
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3304      	adds	r3, #4
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002952:	f102 020c 	add.w	r2, r2, #12
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d397      	bcc.n	800288c <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 800295c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002960:	f103 030e 	add.w	r3, r3, #14
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800296c:	f102 020e 	add.w	r2, r2, #14
 8002970:	8013      	strh	r3, [r2, #0]
 8002972:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <cfg_SaveSettings+0x248>)
 8002974:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002978:	b29b      	uxth	r3, r3
 800297a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800297e:	f102 020e 	add.w	r2, r2, #14
 8002982:	8812      	ldrh	r2, [r2, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	f4ff af7a 	bcc.w	800287e <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 800298a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800298e:	f103 030a 	add.w	r3, r3, #10
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d07a      	beq.n	8002a8e <cfg_SaveSettings+0x236>
 8002998:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800299c:	f103 030a 	add.w	r3, r3, #10
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d871      	bhi.n	8002a8e <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 80029aa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029ae:	f103 030a 	add.w	r3, r3, #10
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	3b0c      	subs	r3, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	2000      	movs	r0, #0
 80029be:	f000 fbc7 	bl	8003150 <crc32_calc>
 80029c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029c6:	f103 0304 	add.w	r3, r3, #4
 80029ca:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 80029cc:	f004 fd74 	bl	80074b8 <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 80029d0:	2102      	movs	r1, #2
 80029d2:	2007      	movs	r0, #7
 80029d4:	f004 fee2 	bl	800779c <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 80029d8:	4932      	ldr	r1, [pc, #200]	; (8002aa4 <cfg_SaveSettings+0x24c>)
 80029da:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029de:	f103 030a 	add.w	r3, r3, #10
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	469a      	mov	sl, r3
 80029e8:	4693      	mov	fp, r2
 80029ea:	4652      	mov	r2, sl
 80029ec:	465b      	mov	r3, fp
 80029ee:	2002      	movs	r0, #2
 80029f0:	f004 fd0e 	bl	8007410 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 80029f4:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <cfg_SaveSettings+0x24c>)
 80029f6:	1d19      	adds	r1, r3, #4
 80029f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029fc:	f103 0304 	add.w	r3, r3, #4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	4698      	mov	r8, r3
 8002a06:	4691      	mov	r9, r2
 8002a08:	4642      	mov	r2, r8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f004 fcff 	bl	8007410 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 8002a12:	2300      	movs	r3, #0
 8002a14:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002a18:	f102 020e 	add.w	r2, r2, #14
 8002a1c:	8013      	strh	r3, [r2, #0]
 8002a1e:	e027      	b.n	8002a70 <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 8002a20:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a24:	f103 030e 	add.w	r3, r3, #14
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <cfg_SaveSettings+0x24c>)
 8002a30:	3308      	adds	r3, #8
 8002a32:	18d1      	adds	r1, r2, r3
 8002a34:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a38:	f103 030e 	add.w	r3, r3, #14
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	f107 0210 	add.w	r2, r7, #16
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	4615      	mov	r5, r2
 8002a50:	4622      	mov	r2, r4
 8002a52:	462b      	mov	r3, r5
 8002a54:	2002      	movs	r0, #2
 8002a56:	f004 fcdb 	bl	8007410 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8002a5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a5e:	f103 030e 	add.w	r3, r3, #14
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002a6a:	f102 020e 	add.w	r2, r2, #14
 8002a6e:	8013      	strh	r3, [r2, #0]
 8002a70:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a74:	f103 030e 	add.w	r3, r3, #14
 8002a78:	881a      	ldrh	r2, [r3, #0]
 8002a7a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a7e:	f103 030a 	add.w	r3, r3, #10
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3cb      	bcc.n	8002a20 <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 8002a88:	f004 fd38 	bl	80074fc <HAL_FLASH_Lock>

	}

	return;
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
}
 8002a90:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9c:	20000030 	.word	0x20000030
 8002aa0:	200002b8 	.word	0x200002b8
 8002aa4:	08060000 	.word	0x08060000

08002aa8 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 8002aba:	4b4e      	ldr	r3, [pc, #312]	; (8002bf4 <cfg_LoadSettings+0x14c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <cfg_LoadSettings+0x14c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 808e 	beq.w	8002bea <cfg_LoadSettings+0x142>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	f200 8088 	bhi.w	8002bea <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 8002ada:	2300      	movs	r3, #0
 8002adc:	82fb      	strh	r3, [r7, #22]
 8002ade:	e029      	b.n	8002b34 <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	82bb      	strh	r3, [r7, #20]
 8002ae4:	e017      	b.n	8002b16 <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002ae6:	8afa      	ldrh	r2, [r7, #22]
 8002ae8:	4943      	ldr	r1, [pc, #268]	; (8002bf8 <cfg_LoadSettings+0x150>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	3310      	adds	r3, #16
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	1dba      	adds	r2, r7, #6
 8002afa:	8ab8      	ldrh	r0, [r7, #20]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <cfg_LoadSettings+0x68>
					var_cnt += 1;
 8002b0a:	8a7b      	ldrh	r3, [r7, #18]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002b10:	8abb      	ldrh	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	82bb      	strh	r3, [r7, #20]
 8002b16:	8afa      	ldrh	r2, [r7, #22]
 8002b18:	4937      	ldr	r1, [pc, #220]	; (8002bf8 <cfg_LoadSettings+0x150>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3304      	adds	r3, #4
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	8aba      	ldrh	r2, [r7, #20]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3db      	bcc.n	8002ae6 <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 8002b2e:	8afb      	ldrh	r3, [r7, #22]
 8002b30:	3301      	adds	r3, #1
 8002b32:	82fb      	strh	r3, [r7, #22]
 8002b34:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <cfg_LoadSettings+0x154>)
 8002b36:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	8afa      	ldrh	r2, [r7, #22]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d3ce      	bcc.n	8002ae0 <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 8002b42:	8a7b      	ldrh	r3, [r7, #18]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d14f      	bne.n	8002bea <cfg_LoadSettings+0x142>
 8002b4a:	8a7b      	ldrh	r3, [r7, #18]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	492c      	ldr	r1, [pc, #176]	; (8002c00 <cfg_LoadSettings+0x158>)
 8002b50:	2000      	movs	r0, #0
 8002b52:	f000 fafd 	bl	8003150 <crc32_calc>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d145      	bne.n	8002bea <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 8002b5e:	2300      	movs	r3, #0
 8002b60:	82fb      	strh	r3, [r7, #22]
 8002b62:	e03a      	b.n	8002bda <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002b64:	2300      	movs	r3, #0
 8002b66:	82bb      	strh	r3, [r7, #20]
 8002b68:	e028      	b.n	8002bbc <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002b6a:	8afa      	ldrh	r2, [r7, #22]
 8002b6c:	4922      	ldr	r1, [pc, #136]	; (8002bf8 <cfg_LoadSettings+0x150>)
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3310      	adds	r3, #16
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1dba      	adds	r2, r7, #6
 8002b7e:	8ab8      	ldrh	r0, [r7, #20]
 8002b80:	2100      	movs	r1, #0
 8002b82:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d013      	beq.n	8002bb6 <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 8002b8e:	8afa      	ldrh	r2, [r7, #22]
 8002b90:	4919      	ldr	r1, [pc, #100]	; (8002bf8 <cfg_LoadSettings+0x150>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	8a3a      	ldrh	r2, [r7, #16]
 8002ba2:	3202      	adds	r2, #2
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	4913      	ldr	r1, [pc, #76]	; (8002bf4 <cfg_LoadSettings+0x14c>)
 8002ba8:	4411      	add	r1, r2
 8002baa:	8aba      	ldrh	r2, [r7, #20]
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
						load_var_cnt += 1;
 8002bb0:	8a3b      	ldrh	r3, [r7, #16]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002bb6:	8abb      	ldrh	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	82bb      	strh	r3, [r7, #20]
 8002bbc:	8afa      	ldrh	r2, [r7, #22]
 8002bbe:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <cfg_LoadSettings+0x150>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3304      	adds	r3, #4
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	8aba      	ldrh	r2, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3ca      	bcc.n	8002b6a <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 8002bd4:	8afb      	ldrh	r3, [r7, #22]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	82fb      	strh	r3, [r7, #22]
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <cfg_LoadSettings+0x154>)
 8002bdc:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8afa      	ldrh	r2, [r7, #22]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3bd      	bcc.n	8002b64 <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
}
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	08060000 	.word	0x08060000
 8002bf8:	20000030 	.word	0x20000030
 8002bfc:	200002b8 	.word	0x200002b8
 8002c00:	08060008 	.word	0x08060008

08002c04 <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002c08:	f004 fc56 	bl	80074b8 <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	2006      	movs	r0, #6
 8002c10:	f004 fdc4 	bl	800779c <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 8002c14:	f004 fc72 	bl	80074fc <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 8002c18:	4a03      	ldr	r2, [pc, #12]	; (8002c28 <cfg_ClearFwBuf+0x24>)
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <cfg_ClearFwBuf+0x28>)
 8002c1c:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <cfg_ClearFwBuf+0x2c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

	return;
 8002c24:	bf00      	nop
}
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	08040000 	.word	0x08040000
 8002c2c:	20000904 	.word	0x20000904
 8002c30:	20000908 	.word	0x20000908

08002c34 <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002c3c:	f004 fc3c 	bl	80074b8 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <cfg_WriteFwData+0x44>)
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	461c      	mov	r4, r3
 8002c4a:	4615      	mov	r5, r2
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	462b      	mov	r3, r5
 8002c50:	2002      	movs	r0, #2
 8002c52:	f004 fbdd 	bl	8007410 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8002c56:	f004 fc51 	bl	80074fc <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <cfg_WriteFwData+0x44>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <cfg_WriteFwData+0x44>)
 8002c62:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <cfg_WriteFwData+0x48>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <cfg_WriteFwData+0x48>)
 8002c6c:	6013      	str	r3, [r2, #0]

	return;
 8002c6e:	bf00      	nop
}
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bdb0      	pop	{r4, r5, r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000904 	.word	0x20000904
 8002c7c:	20000908 	.word	0x20000908

08002c80 <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8002c8e:	89fb      	ldrh	r3, [r7, #14]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d83e      	bhi.n	8002d12 <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <cfg_AddTxData+0xa0>)
 8002c98:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d831      	bhi.n	8002d16 <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 8002cb2:	89fa      	ldrh	r2, [r7, #14]
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <cfg_AddTxData+0xa0>)
 8002cb8:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002cbc:	fb00 f303 	mul.w	r3, r0, r3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ccc:	fb01 f202 	mul.w	r2, r1, r2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <cfg_AddTxData+0xa0>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00e f8f4 	bl	8010ecc <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <cfg_AddTxData+0xa0>)
 8002ce8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	440a      	add	r2, r1
 8002cfe:	4908      	ldr	r1, [pc, #32]	; (8002d20 <cfg_AddTxData+0xa0>)
 8002d00:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002d04:	fb00 f303 	mul.w	r3, r0, r3
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d0e:	601a      	str	r2, [r3, #0]

	return;
 8002d10:	e002      	b.n	8002d18 <cfg_AddTxData+0x98>
		return;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <cfg_AddTxData+0x98>
		return;
 8002d16:	bf00      	nop
}
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200002b8 	.word	0x200002b8

08002d24 <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b0c5      	sub	sp, #276	; 0x114
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002d30:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8002d34:	6001      	str	r1, [r0, #0]
 8002d36:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d3a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002d3e:	600a      	str	r2, [r1, #0]
 8002d40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d44:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d4e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d52:	4622      	mov	r2, r4
 8002d54:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 8002d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d5a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f200 80c0 	bhi.w	8002ee6 <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002d66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d6a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	4a61      	ldr	r2, [pc, #388]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002d72:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f200 80aa 	bhi.w	8002eea <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 8002d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2bff      	cmp	r3, #255	; 0xff
 8002da2:	f200 80a4 	bhi.w	8002eee <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 8002da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002daa:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002db4:	fb03 f202 	mul.w	r2, r3, r2
 8002db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002dca:	1899      	adds	r1, r3, r2
 8002dcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dd0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002dd8:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1ad2      	subs	r2, r2, r3
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00e f867 	bl	8010ecc <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8002dfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e02:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002e0c:	fb03 f202 	mul.w	r2, r3, r2
 8002e10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002e22:	1898      	adds	r0, r3, r2
 8002e24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e28:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002e2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	f00e f848 	bl	8010ecc <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8002e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e40:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e4a:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8002e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e56:	6809      	ldr	r1, [r1, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e60:	fb01 f202 	mul.w	r2, r1, r2
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e6a:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002e6c:	1898      	adds	r0, r3, r2
 8002e6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e72:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002e7a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	f107 0310 	add.w	r3, r7, #16
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f00e f816 	bl	8010ecc <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ea4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002eac:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ec0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002eca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	4909      	ldr	r1, [pc, #36]	; (8002ef8 <cfg_IntertTxData+0x1d4>)
 8002ed4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002ed8:	fb00 f303 	mul.w	r3, r0, r3
 8002edc:	440b      	add	r3, r1
 8002ede:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ee2:	601a      	str	r2, [r3, #0]

	return;
 8002ee4:	e004      	b.n	8002ef0 <cfg_IntertTxData+0x1cc>
		return;
 8002ee6:	bf00      	nop
 8002ee8:	e002      	b.n	8002ef0 <cfg_IntertTxData+0x1cc>
		return;
 8002eea:	bf00      	nop
 8002eec:	e000      	b.n	8002ef0 <cfg_IntertTxData+0x1cc>
		return;
 8002eee:	bf00      	nop
}
 8002ef0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}
 8002ef8:	200002b8 	.word	0x200002b8

08002efc <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b0c2      	sub	sp, #264	; 0x108
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4602      	mov	r2, r0
 8002f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f0c:	6019      	str	r1, [r3, #0]
 8002f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f12:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f16:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 8002f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f1c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	4a4a      	ldr	r2, [pc, #296]	; (800304c <cfg_RemTxData+0x150>)
 8002f24:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002f38:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d87f      	bhi.n	8003042 <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 8002f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d078      	beq.n	8003042 <cfg_RemTxData+0x146>
 8002f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f54:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <cfg_RemTxData+0x150>)
 8002f5c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d068      	beq.n	8003042 <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8002f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f74:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	4a34      	ldr	r2, [pc, #208]	; (800304c <cfg_RemTxData+0x150>)
 8002f7c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f90:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002f9a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	1a8a      	subs	r2, r1, r2
 8002fa2:	492a      	ldr	r1, [pc, #168]	; (800304c <cfg_RemTxData+0x150>)
 8002fa4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002fa8:	fb00 f303 	mul.w	r3, r0, r3
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fb2:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 8002fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fb8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002fc2:	fb03 f202 	mul.w	r2, r3, r2
 8002fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <cfg_RemTxData+0x150>)
 8002fd8:	1899      	adds	r1, r3, r2
 8002fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fde:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <cfg_RemTxData+0x150>)
 8002fe6:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00d ff66 	bl	8010ecc <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8003000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003004:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003016:	4a0d      	ldr	r2, [pc, #52]	; (800304c <cfg_RemTxData+0x150>)
 8003018:	1898      	adds	r0, r3, r2
 800301a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800301e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	4a09      	ldr	r2, [pc, #36]	; (800304c <cfg_RemTxData+0x150>)
 8003026:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4619      	mov	r1, r3
 800303c:	f00d ff46 	bl	8010ecc <memcpy>
	//free(tmp_buf);

	return;
 8003040:	e000      	b.n	8003044 <cfg_RemTxData+0x148>
		return;
 8003042:	bf00      	nop
}
 8003044:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200002b8 	.word	0x200002b8

08003050 <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	2001      	movs	r0, #1
 8003060:	f001 f854 	bl	800410c <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8003064:	bf00      	nop
}
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <cfg_TxDataCh1USB>:

void cfg_TxDataCh1USB(uint8_t *data, uint32_t len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	CDC_Transmit_FS(data, (uint16_t)len);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f00d faa7 	bl	80105d0 <CDC_Transmit_FS>
	//modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8003082:	bf00      	nop
}
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 800309c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a0:	817b      	strh	r3, [r7, #10]
	while( len-- )
 80030a2:	e00e      	b.n	80030c2 <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	b2d9      	uxtb	r1, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1c58      	adds	r0, r3, #1
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	404b      	eors	r3, r1
 80030b8:	4908      	ldr	r1, [pc, #32]	; (80030dc <crc16_calc+0x50>)
 80030ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030be:	4053      	eors	r3, r2
 80030c0:	817b      	strh	r3, [r7, #10]
	while( len-- )
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	807a      	strh	r2, [r7, #2]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1eb      	bne.n	80030a4 <crc16_calc+0x18>
	return crc;
 80030cc:	897b      	ldrh	r3, [r7, #10]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	080112bc 	.word	0x080112bc

080030e0 <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	461a      	mov	r2, r3
 80030ee:	4603      	mov	r3, r0
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	460b      	mov	r3, r1
 80030f4:	813b      	strh	r3, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 80030fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030fe:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 8003100:	e017      	b.n	8003132 <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 8003102:	8afb      	ldrh	r3, [r7, #22]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	b29a      	uxth	r2, r3
 8003108:	8afb      	ldrh	r3, [r7, #22]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	4401      	add	r1, r0
 8003112:	7809      	ldrb	r1, [r1, #0]
 8003114:	404b      	eors	r3, r1
 8003116:	490d      	ldr	r1, [pc, #52]	; (800314c <crc16_RingBuf+0x6c>)
 8003118:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800311c:	4053      	eors	r3, r2
 800311e:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	3301      	adds	r3, #1
 8003124:	b29b      	uxth	r3, r3
 8003126:	b21a      	sxth	r2, r3
 8003128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312c:	4013      	ands	r3, r2
 800312e:	b21b      	sxth	r3, r3
 8003130:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003132:	893b      	ldrh	r3, [r7, #8]
 8003134:	1e5a      	subs	r2, r3, #1
 8003136:	813a      	strh	r2, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e2      	bne.n	8003102 <crc16_RingBuf+0x22>
	}
	return crc;
 800313c:	8afb      	ldrh	r3, [r7, #22]
}
 800313e:	4618      	mov	r0, r3
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	080112bc 	.word	0x080112bc

08003150 <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	80fb      	strh	r3, [r7, #6]
 800315c:	4613      	mov	r3, r2
 800315e:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	60fb      	str	r3, [r7, #12]
  while (len--)
 8003164:	e00f      	b.n	8003186 <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0e19      	lsrs	r1, r3, #24
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	404b      	eors	r3, r1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	490a      	ldr	r1, [pc, #40]	; (80031a0 <crc32_calc+0x50>)
 8003178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800317c:	4053      	eors	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
      buf++;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	3304      	adds	r3, #4
 8003184:	603b      	str	r3, [r7, #0]
  while (len--)
 8003186:	88bb      	ldrh	r3, [r7, #4]
 8003188:	1e5a      	subs	r2, r3, #1
 800318a:	80ba      	strh	r2, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ea      	bne.n	8003166 <crc32_calc+0x16>
    }
  return crc;
 8003190:	68fb      	ldr	r3, [r7, #12]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	080114bc 	.word	0x080114bc

080031a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031a8:	f003 faba 	bl	8006720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ac:	f000 f814 	bl	80031d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b0:	f000 f9be 	bl	8003530 <MX_GPIO_Init>
  MX_I2C1_Init();
 80031b4:	f000 f8ca 	bl	800334c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80031b8:	f000 f966 	bl	8003488 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031bc:	f000 f98e 	bl	80034dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80031c0:	f000 f8f2 	bl	80033a8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80031c4:	f000 f870 	bl	80032a8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80031c8:	f00d f92c 	bl	8010424 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 80031cc:	f003 f92c 	bl	8006428 <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 80031d0:	f003 f958 	bl	8006484 <system_Task>
 80031d4:	e7fc      	b.n	80031d0 <main+0x2c>
	...

080031d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b094      	sub	sp, #80	; 0x50
 80031dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031de:	f107 0320 	add.w	r3, r7, #32
 80031e2:	2230      	movs	r2, #48	; 0x30
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f00d fe44 	bl	8010e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <SystemClock_Config+0xc8>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <SystemClock_Config+0xc8>)
 8003206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	; 0x40
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <SystemClock_Config+0xc8>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <SystemClock_Config+0xcc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <SystemClock_Config+0xcc>)
 8003222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <SystemClock_Config+0xcc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003234:	2301      	movs	r3, #1
 8003236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800323e:	2302      	movs	r3, #2
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003248:	230f      	movs	r3, #15
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800324c:	2390      	movs	r3, #144	; 0x90
 800324e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003250:	2304      	movs	r3, #4
 8003252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8003254:	2305      	movs	r3, #5
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003258:	f107 0320 	add.w	r3, r7, #32
 800325c:	4618      	mov	r0, r3
 800325e:	f006 ffbb 	bl	800a1d8 <HAL_RCC_OscConfig>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003268:	f000 fa68 	bl	800373c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800326c:	230f      	movs	r3, #15
 800326e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003270:	2302      	movs	r3, #2
 8003272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f007 fa1d 	bl	800a6c8 <HAL_RCC_ClockConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003294:	f000 fa52 	bl	800373c <Error_Handler>
  }
}
 8003298:	bf00      	nop
 800329a:	3750      	adds	r7, #80	; 0x50
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40007000 	.word	0x40007000

080032a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032ae:	463b      	mov	r3, r7
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032ba:	4b21      	ldr	r3, [pc, #132]	; (8003340 <MX_ADC1_Init+0x98>)
 80032bc:	4a21      	ldr	r2, [pc, #132]	; (8003344 <MX_ADC1_Init+0x9c>)
 80032be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <MX_ADC1_Init+0x98>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <MX_ADC1_Init+0x98>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <MX_ADC1_Init+0x98>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <MX_ADC1_Init+0x98>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <MX_ADC1_Init+0x98>)
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <MX_ADC1_Init+0x98>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <MX_ADC1_Init+0x98>)
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <MX_ADC1_Init+0xa0>)
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032ec:	4b14      	ldr	r3, [pc, #80]	; (8003340 <MX_ADC1_Init+0x98>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <MX_ADC1_Init+0x98>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_ADC1_Init+0x98>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <MX_ADC1_Init+0x98>)
 8003302:	2201      	movs	r2, #1
 8003304:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003306:	480e      	ldr	r0, [pc, #56]	; (8003340 <MX_ADC1_Init+0x98>)
 8003308:	f003 fa70 	bl	80067ec <HAL_ADC_Init>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003312:	f000 fa13 	bl	800373c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003316:	2300      	movs	r3, #0
 8003318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800331e:	2300      	movs	r3, #0
 8003320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003322:	463b      	mov	r3, r7
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	; (8003340 <MX_ADC1_Init+0x98>)
 8003328:	f003 fc94 	bl	8006c54 <HAL_ADC_ConfigChannel>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003332:	f000 fa03 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000910 	.word	0x20000910
 8003344:	40012000 	.word	0x40012000
 8003348:	0f000001 	.word	0x0f000001

0800334c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <MX_I2C1_Init+0x50>)
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <MX_I2C1_Init+0x54>)
 8003354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <MX_I2C1_Init+0x50>)
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <MX_I2C1_Init+0x58>)
 800335a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <MX_I2C1_Init+0x50>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <MX_I2C1_Init+0x50>)
 8003364:	2200      	movs	r2, #0
 8003366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <MX_I2C1_Init+0x50>)
 800336a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800336e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <MX_I2C1_Init+0x50>)
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <MX_I2C1_Init+0x50>)
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <MX_I2C1_Init+0x50>)
 800337e:	2200      	movs	r2, #0
 8003380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <MX_I2C1_Init+0x50>)
 8003384:	2200      	movs	r2, #0
 8003386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <MX_I2C1_Init+0x50>)
 800338a:	f004 fce9 	bl	8007d60 <HAL_I2C_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003394:	f000 f9d2 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000958 	.word	0x20000958
 80033a0:	40005400 	.word	0x40005400
 80033a4:	000186a0 	.word	0x000186a0

080033a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ae:	f107 0320 	add.w	r3, r7, #32
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	609a      	str	r2, [r3, #8]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	615a      	str	r2, [r3, #20]
 80033c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033cc:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <MX_TIM3_Init+0xdc>)
 80033ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033d2:	2277      	movs	r2, #119	; 0x77
 80033d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033de:	f242 720f 	movw	r2, #9999	; 0x270f
 80033e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e4:	4b26      	ldr	r3, [pc, #152]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033f0:	4823      	ldr	r0, [pc, #140]	; (8003480 <MX_TIM3_Init+0xd8>)
 80033f2:	f007 fc37 	bl	800ac64 <HAL_TIM_PWM_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033fc:	f000 f99e 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003408:	f107 0320 	add.w	r3, r7, #32
 800340c:	4619      	mov	r1, r3
 800340e:	481c      	ldr	r0, [pc, #112]	; (8003480 <MX_TIM3_Init+0xd8>)
 8003410:	f008 f94c 	bl	800b6ac <HAL_TIMEx_MasterConfigSynchronization>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800341a:	f000 f98f 	bl	800373c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800341e:	2360      	movs	r3, #96	; 0x60
 8003420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2200      	movs	r2, #0
 8003432:	4619      	mov	r1, r3
 8003434:	4812      	ldr	r0, [pc, #72]	; (8003480 <MX_TIM3_Init+0xd8>)
 8003436:	f007 fe1d 	bl	800b074 <HAL_TIM_PWM_ConfigChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003440:	f000 f97c 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	2204      	movs	r2, #4
 8003448:	4619      	mov	r1, r3
 800344a:	480d      	ldr	r0, [pc, #52]	; (8003480 <MX_TIM3_Init+0xd8>)
 800344c:	f007 fe12 	bl	800b074 <HAL_TIM_PWM_ConfigChannel>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003456:	f000 f971 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	2208      	movs	r2, #8
 800345e:	4619      	mov	r1, r3
 8003460:	4807      	ldr	r0, [pc, #28]	; (8003480 <MX_TIM3_Init+0xd8>)
 8003462:	f007 fe07 	bl	800b074 <HAL_TIM_PWM_ConfigChannel>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800346c:	f000 f966 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003470:	4803      	ldr	r0, [pc, #12]	; (8003480 <MX_TIM3_Init+0xd8>)
 8003472:	f000 fa47 	bl	8003904 <HAL_TIM_MspPostInit>

}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200009ac 	.word	0x200009ac
 8003484:	40000400 	.word	0x40000400

08003488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <MX_USART1_UART_Init+0x50>)
 8003490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 8003494:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800349a:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 80034ae:	220c      	movs	r2, #12
 80034b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <MX_USART1_UART_Init+0x4c>)
 80034c0:	f008 f976 	bl	800b7b0 <HAL_UART_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034ca:	f000 f937 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200009f4 	.word	0x200009f4
 80034d8:	40011000 	.word	0x40011000

080034dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <MX_USART2_UART_Init+0x50>)
 80034e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 8003502:	220c      	movs	r2, #12
 8003504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003512:	4805      	ldr	r0, [pc, #20]	; (8003528 <MX_USART2_UART_Init+0x4c>)
 8003514:	f008 f94c 	bl	800b7b0 <HAL_UART_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800351e:	f000 f90d 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000a38 	.word	0x20000a38
 800352c:	40004400 	.word	0x40004400

08003530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b45      	ldr	r3, [pc, #276]	; (8003660 <MX_GPIO_Init+0x130>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a44      	ldr	r2, [pc, #272]	; (8003660 <MX_GPIO_Init+0x130>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b42      	ldr	r3, [pc, #264]	; (8003660 <MX_GPIO_Init+0x130>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <MX_GPIO_Init+0x130>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <MX_GPIO_Init+0x130>)
 800356c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <MX_GPIO_Init+0x130>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <MX_GPIO_Init+0x130>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a36      	ldr	r2, [pc, #216]	; (8003660 <MX_GPIO_Init+0x130>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <MX_GPIO_Init+0x130>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	4b30      	ldr	r3, [pc, #192]	; (8003660 <MX_GPIO_Init+0x130>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <MX_GPIO_Init+0x130>)
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <MX_GPIO_Init+0x130>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80035b6:	2200      	movs	r2, #0
 80035b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035bc:	4829      	ldr	r0, [pc, #164]	; (8003664 <MX_GPIO_Init+0x134>)
 80035be:	f004 fbb5 	bl	8007d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M0_GPIO_Port, MODEM_M0_Pin, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2120      	movs	r1, #32
 80035c6:	4828      	ldr	r0, [pc, #160]	; (8003668 <MX_GPIO_Init+0x138>)
 80035c8:	f004 fbb0 	bl	8007d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 80035cc:	2200      	movs	r2, #0
 80035ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d2:	4826      	ldr	r0, [pc, #152]	; (800366c <MX_GPIO_Init+0x13c>)
 80035d4:	f004 fbaa 	bl	8007d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M1_GPIO_Port, MODEM_M1_Pin, GPIO_PIN_SET);
 80035d8:	2201      	movs	r2, #1
 80035da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035de:	4822      	ldr	r0, [pc, #136]	; (8003668 <MX_GPIO_Init+0x138>)
 80035e0:	f004 fba4 	bl	8007d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80035e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	4619      	mov	r1, r3
 80035fc:	4819      	ldr	r0, [pc, #100]	; (8003664 <MX_GPIO_Init+0x134>)
 80035fe:	f004 f915 	bl	800782c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 8003602:	f248 0320 	movw	r3, #32800	; 0x8020
 8003606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003608:	2301      	movs	r3, #1
 800360a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360c:	2301      	movs	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4619      	mov	r1, r3
 800361a:	4813      	ldr	r0, [pc, #76]	; (8003668 <MX_GPIO_Init+0x138>)
 800361c:	f004 f906 	bl	800782c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 8003620:	2340      	movs	r3, #64	; 0x40
 8003622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4619      	mov	r1, r3
 8003632:	480d      	ldr	r0, [pc, #52]	; (8003668 <MX_GPIO_Init+0x138>)
 8003634:	f004 f8fa 	bl	800782c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 8003638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800363c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <MX_GPIO_Init+0x13c>)
 8003652:	f004 f8eb 	bl	800782c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40020800 	.word	0x40020800
 8003668:	40020000 	.word	0x40020000
 800366c:	40020400 	.word	0x40020400

08003670 <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <MX_USART1_UART_Init115200+0x50>)
 8003678:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 800367c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003680:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 8003696:	220c      	movs	r2, #12
 8003698:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80036a6:	4805      	ldr	r0, [pc, #20]	; (80036bc <MX_USART1_UART_Init115200+0x4c>)
 80036a8:	f008 f882 	bl	800b7b0 <HAL_UART_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 80036b2:	f000 f843 	bl	800373c <Error_Handler>
	}
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200009f4 	.word	0x200009f4
 80036c0:	40011000 	.word	0x40011000

080036c4 <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f002 ffd9 	bl	8006684 <system_UART_RxCpltCallback>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <MX_UARTReInit>:

void MX_UARTReInit()
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80036e0:	4803      	ldr	r0, [pc, #12]	; (80036f0 <MX_UARTReInit+0x14>)
 80036e2:	f008 f8b2 	bl	800b84a <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 80036e6:	f7ff fecf 	bl	8003488 <MX_USART1_UART_Init>
	return;
 80036ea:	bf00      	nop
}
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200009f4 	.word	0x200009f4

080036f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f002 ff8b 	bl	8006618 <system_ADC_ConvCpltCallback>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a07      	ldr	r2, [pc, #28]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800371e:	f003 f821 	bl	8006764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 8003722:	f003 f833 	bl	800678c <HAL_GetTick>
 8003726:	4603      	mov	r3, r0
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fe37 	bl	800639c <system_Timer>
  /* USER CODE END Callback 1 */
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40000800 	.word	0x40000800

0800373c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003740:	b672      	cpsid	i
}
 8003742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003744:	e7fe      	b.n	8003744 <Error_Handler+0x8>
	...

08003748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_MspInit+0x4c>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_MspInit+0x4c>)
 8003758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_MspInit+0x4c>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_MspInit+0x4c>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_MspInit+0x4c>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_MspInit+0x4c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_ADC_MspInit+0x8c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d12f      	bne.n	800381a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_ADC_MspInit+0x90>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_ADC_MspInit+0x90>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_ADC_MspInit+0x90>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_ADC_MspInit+0x90>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_ADC_MspInit+0x90>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_ADC_MspInit+0x90>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 80037f2:	2301      	movs	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f6:	2303      	movs	r3, #3
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4809      	ldr	r0, [pc, #36]	; (800382c <HAL_ADC_MspInit+0x94>)
 8003806:	f004 f811 	bl	800782c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	2012      	movs	r0, #18
 8003810:	f003 fd34 	bl	800727c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003814:	2012      	movs	r0, #18
 8003816:	f003 fd4d 	bl	80072b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800381a:	bf00      	nop
 800381c:	3728      	adds	r7, #40	; 0x28
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40012000 	.word	0x40012000
 8003828:	40023800 	.word	0x40023800
 800382c:	40020000 	.word	0x40020000

08003830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_I2C_MspInit+0x84>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12b      	bne.n	80038aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_I2C_MspInit+0x88>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_I2C_MspInit+0x88>)
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_I2C_MspInit+0x88>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 800386e:	23c0      	movs	r3, #192	; 0xc0
 8003870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003872:	2312      	movs	r3, #18
 8003874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003876:	2301      	movs	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387a:	2303      	movs	r3, #3
 800387c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800387e:	2304      	movs	r3, #4
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003882:	f107 0314 	add.w	r3, r7, #20
 8003886:	4619      	mov	r1, r3
 8003888:	480c      	ldr	r0, [pc, #48]	; (80038bc <HAL_I2C_MspInit+0x8c>)
 800388a:	f003 ffcf 	bl	800782c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_I2C_MspInit+0x88>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_I2C_MspInit+0x88>)
 8003898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_I2C_MspInit+0x88>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40005400 	.word	0x40005400
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020400 	.word	0x40020400

080038c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0b      	ldr	r2, [pc, #44]	; (80038fc <HAL_TIM_PWM_MspInit+0x3c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10d      	bne.n	80038ee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_TIM_PWM_MspInit+0x40>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_TIM_PWM_MspInit+0x40>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_TIM_PWM_MspInit+0x40>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40000400 	.word	0x40000400
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <HAL_TIM_MspPostInit+0x68>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d11d      	bne.n	8003962 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a10      	ldr	r2, [pc, #64]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 8003942:	2331      	movs	r3, #49	; 0x31
 8003944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003952:	2302      	movs	r3, #2
 8003954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	; (8003974 <HAL_TIM_MspPostInit+0x70>)
 800395e:	f003 ff65 	bl	800782c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003962:	bf00      	nop
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40000400 	.word	0x40000400
 8003970:	40023800 	.word	0x40023800
 8003974:	40020400 	.word	0x40020400

08003978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08c      	sub	sp, #48	; 0x30
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a36      	ldr	r2, [pc, #216]	; (8003a70 <HAL_UART_MspInit+0xf8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d135      	bne.n	8003a06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 80039a4:	f043 0310 	orr.w	r3, r3, #16
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	4b32      	ldr	r3, [pc, #200]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a2d      	ldr	r2, [pc, #180]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 80039d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039e4:	2307      	movs	r3, #7
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	4619      	mov	r1, r3
 80039ee:	4822      	ldr	r0, [pc, #136]	; (8003a78 <HAL_UART_MspInit+0x100>)
 80039f0:	f003 ff1c 	bl	800782c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	2025      	movs	r0, #37	; 0x25
 80039fa:	f003 fc3f 	bl	800727c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039fe:	2025      	movs	r0, #37	; 0x25
 8003a00:	f003 fc58 	bl	80072b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a04:	e030      	b.n	8003a68 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_UART_MspInit+0x104>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d12b      	bne.n	8003a68 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a16      	ldr	r2, [pc, #88]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a20:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_UART_MspInit+0xfc>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a58:	2307      	movs	r3, #7
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4619      	mov	r1, r3
 8003a62:	4805      	ldr	r0, [pc, #20]	; (8003a78 <HAL_UART_MspInit+0x100>)
 8003a64:	f003 fee2 	bl	800782c <HAL_GPIO_Init>
}
 8003a68:	bf00      	nop
 8003a6a:	3730      	adds	r7, #48	; 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40004400 	.word	0x40004400

08003a80 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <HAL_UART_MspDeInit+0x58>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10e      	bne.n	8003ab0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_UART_MspDeInit+0x5c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a11      	ldr	r2, [pc, #68]	; (8003adc <HAL_UART_MspDeInit+0x5c>)
 8003a98:	f023 0310 	bic.w	r3, r3, #16
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 8003a9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aa2:	480f      	ldr	r0, [pc, #60]	; (8003ae0 <HAL_UART_MspDeInit+0x60>)
 8003aa4:	f004 f846 	bl	8007b34 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003aa8:	2025      	movs	r0, #37	; 0x25
 8003aaa:	f003 fc11 	bl	80072d0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003aae:	e00e      	b.n	8003ace <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <HAL_UART_MspDeInit+0x64>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d109      	bne.n	8003ace <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_UART_MspDeInit+0x5c>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_UART_MspDeInit+0x5c>)
 8003ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 8003ac6:	210c      	movs	r1, #12
 8003ac8:	4805      	ldr	r0, [pc, #20]	; (8003ae0 <HAL_UART_MspDeInit+0x60>)
 8003aca:	f004 f833 	bl	8007b34 <HAL_GPIO_DeInit>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40004400 	.word	0x40004400

08003ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	; 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_InitTick+0xe4>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_InitTick+0xe4>)
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	6413      	str	r3, [r2, #64]	; 0x40
 8003b08:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_InitTick+0xe4>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b14:	f107 0210 	add.w	r2, r7, #16
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f006 ffb2 	bl	800aa88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b2e:	f006 ff83 	bl	800aa38 <HAL_RCC_GetPCLK1Freq>
 8003b32:	6378      	str	r0, [r7, #52]	; 0x34
 8003b34:	e004      	b.n	8003b40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b36:	f006 ff7f 	bl	800aa38 <HAL_RCC_GetPCLK1Freq>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	4a23      	ldr	r2, [pc, #140]	; (8003bd0 <HAL_InitTick+0xe8>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	0c9b      	lsrs	r3, r3, #18
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_InitTick+0xf0>)
 8003b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003b54:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b5a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003b74:	4817      	ldr	r0, [pc, #92]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b76:	f006 ffb9 	bl	800aaec <HAL_TIM_Base_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11b      	bne.n	8003bc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003b88:	4812      	ldr	r0, [pc, #72]	; (8003bd4 <HAL_InitTick+0xec>)
 8003b8a:	f007 f809 	bl	800aba0 <HAL_TIM_Base_Start_IT>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b9c:	201e      	movs	r0, #30
 8003b9e:	f003 fb89 	bl	80072b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d808      	bhi.n	8003bba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	201e      	movs	r0, #30
 8003bae:	f003 fb65 	bl	800727c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <HAL_InitTick+0xf4>)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e002      	b.n	8003bc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3738      	adds	r7, #56	; 0x38
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	431bde83 	.word	0x431bde83
 8003bd4:	20000a7c 	.word	0x20000a7c
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	200000e8 	.word	0x200000e8

08003be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003be4:	e7fe      	b.n	8003be4 <NMI_Handler+0x4>

08003be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bea:	e7fe      	b.n	8003bea <HardFault_Handler+0x4>

08003bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <MemManage_Handler+0x4>

08003bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf6:	e7fe      	b.n	8003bf6 <BusFault_Handler+0x4>

08003bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <UsageFault_Handler+0x4>

08003bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <ADC_IRQHandler+0x10>)
 8003c3e:	f002 fed7 	bl	80069f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000910 	.word	0x20000910

08003c4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <TIM4_IRQHandler+0x10>)
 8003c52:	f007 f907 	bl	800ae64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000a7c 	.word	0x20000a7c

08003c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <USART1_IRQHandler+0x10>)
 8003c66:	f007 fff5 	bl	800bc54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200009f4 	.word	0x200009f4

08003c74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <OTG_FS_IRQHandler+0x10>)
 8003c7a:	f005 f980 	bl	8008f7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	2000244c 	.word	0x2000244c

08003c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <SystemInit+0x20>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <SystemInit+0x20>)
 8003c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e010      	b.n	8003cdc <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <modem_Timer+0x44>)
 8003cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <modem_Timer+0x2a>
			modem_info.timer[i]--;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <modem_Timer+0x44>)
 8003cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <modem_Timer+0x44>)
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d9eb      	bls.n	8003cba <modem_Timer+0xe>
		}
	}

	return;
 8003ce2:	bf00      	nop
}
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000ac4 	.word	0x20000ac4

08003cf4 <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f248 0120 	movw	r1, #32800	; 0x8020
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <modem_InitTask+0x3c>)
 8003d00:	f004 f814 	bl	8007d2c <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <modem_InitTask+0x40>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <modem_InitTask+0x40>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 8003d12:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <modem_InitTask+0x40>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <modem_InitTask+0x40>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <modem_InitTask+0x40>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <modem_InitTask+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8003d2c:	bf00      	nop
}
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40020000 	.word	0x40020000
 8003d34:	20000ac4 	.word	0x20000ac4

08003d38 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8003d3e:	4b80      	ldr	r3, [pc, #512]	; (8003f40 <modem_Task+0x208>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <modem_Task+0x2e>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	487e      	ldr	r0, [pc, #504]	; (8003f44 <modem_Task+0x20c>)
 8003d4a:	f003 ffd7 	bl	8007cfc <HAL_GPIO_ReadPin>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f040 80b0 	bne.w	8003eb6 <modem_Task+0x17e>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 8003d56:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <modem_Task+0x210>)
 8003d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d5c:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8003d5e:	4b78      	ldr	r3, [pc, #480]	; (8003f40 <modem_Task+0x208>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e0a7      	b.n	8003eb6 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <modem_Task+0x208>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d11e      	bne.n	8003dac <modem_Task+0x74>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <modem_Task+0x210>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 809f 	bne.w	8003eb6 <modem_Task+0x17e>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 8003d78:	23c2      	movs	r3, #194	; 0xc2
 8003d7a:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 8003d7c:	23ff      	movs	r3, #255	; 0xff
 8003d7e:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 8003d80:	23ff      	movs	r3, #255	; 0xff
 8003d82:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 8003d84:	233d      	movs	r3, #61	; 0x3d
 8003d86:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 8003d88:	2306      	movs	r3, #6
 8003d8a:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 8003d8c:	2344      	movs	r3, #68	; 0x44
 8003d8e:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 8003d90:	1d39      	adds	r1, r7, #4
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	2206      	movs	r2, #6
 8003d98:	486c      	ldr	r0, [pc, #432]	; (8003f4c <modem_Task+0x214>)
 8003d9a:	f007 fd85 	bl	800b8a8 <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003d9e:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <modem_Task+0x210>)
 8003da0:	2264      	movs	r2, #100	; 0x64
 8003da2:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 8003da4:	4b66      	ldr	r3, [pc, #408]	; (8003f40 <modem_Task+0x208>)
 8003da6:	2202      	movs	r2, #2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e084      	b.n	8003eb6 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 8003dac:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <modem_Task+0x208>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d114      	bne.n	8003dde <modem_Task+0xa6>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003db4:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <modem_Task+0x210>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d17c      	bne.n	8003eb6 <modem_Task+0x17e>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8003dbc:	23c1      	movs	r3, #193	; 0xc1
 8003dbe:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 8003dc0:	23c1      	movs	r3, #193	; 0xc1
 8003dc2:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 8003dc4:	23c1      	movs	r3, #193	; 0xc1
 8003dc6:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8003dc8:	1d39      	adds	r1, r7, #4
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	2203      	movs	r2, #3
 8003dd0:	485e      	ldr	r0, [pc, #376]	; (8003f4c <modem_Task+0x214>)
 8003dd2:	f007 fd69 	bl	800b8a8 <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8003dd6:	4b5a      	ldr	r3, [pc, #360]	; (8003f40 <modem_Task+0x208>)
 8003dd8:	2203      	movs	r2, #3
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e06b      	b.n	8003eb6 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8003dde:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <modem_Task+0x208>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d115      	bne.n	8003e12 <modem_Task+0xda>
	{
		if( _modem_par_flag == 1 )
 8003de6:	4b5a      	ldr	r3, [pc, #360]	; (8003f50 <modem_Task+0x218>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d163      	bne.n	8003eb6 <modem_Task+0x17e>
		{
			_modem_par_flag = 0;
 8003dee:	4b58      	ldr	r3, [pc, #352]	; (8003f50 <modem_Task+0x218>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 8003df4:	2200      	movs	r2, #0
 8003df6:	f248 0120 	movw	r1, #32800	; 0x8020
 8003dfa:	4852      	ldr	r0, [pc, #328]	; (8003f44 <modem_Task+0x20c>)
 8003dfc:	f003 ff96 	bl	8007d2c <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8003e00:	f002 fbbe 	bl	8006580 <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003e04:	4b50      	ldr	r3, [pc, #320]	; (8003f48 <modem_Task+0x210>)
 8003e06:	2264      	movs	r2, #100	; 0x64
 8003e08:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <modem_Task+0x208>)
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e051      	b.n	8003eb6 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy  )
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <modem_Task+0x208>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <modem_Task+0xf2>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <modem_Task+0x210>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d149      	bne.n	8003eb6 <modem_Task+0x17e>
			_modem_cur_state = modem_ready;
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <modem_Task+0x208>)
 8003e24:	2205      	movs	r2, #5
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e045      	b.n	8003eb6 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8003e2a:	4b45      	ldr	r3, [pc, #276]	; (8003f40 <modem_Task+0x208>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d141      	bne.n	8003eb6 <modem_Task+0x17e>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 8003e32:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <modem_Task+0x210>)
 8003e34:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d024      	beq.n	8003e86 <modem_Task+0x14e>
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <modem_Task+0x210>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d120      	bne.n	8003e86 <modem_Task+0x14e>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 8003e44:	4b40      	ldr	r3, [pc, #256]	; (8003f48 <modem_Task+0x210>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <modem_Task+0x210>)
 8003e4c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e50:	2b14      	cmp	r3, #20
 8003e52:	d90a      	bls.n	8003e6a <modem_Task+0x132>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 8003e54:	f04f 33ff 	mov.w	r3, #4294967295
 8003e58:	2214      	movs	r2, #20
 8003e5a:	493e      	ldr	r1, [pc, #248]	; (8003f54 <modem_Task+0x21c>)
 8003e5c:	483b      	ldr	r0, [pc, #236]	; (8003f4c <modem_Task+0x214>)
 8003e5e:	f007 fd23 	bl	800b8a8 <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 8003e62:	2014      	movs	r0, #20
 8003e64:	f000 f9da 	bl	800421c <modem_RemTxData>
 8003e68:	e00d      	b.n	8003e86 <modem_Task+0x14e>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8003e6a:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <modem_Task+0x210>)
 8003e6c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	4937      	ldr	r1, [pc, #220]	; (8003f54 <modem_Task+0x21c>)
 8003e78:	4834      	ldr	r0, [pc, #208]	; (8003f4c <modem_Task+0x214>)
 8003e7a:	f007 fd15 	bl	800b8a8 <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <modem_Task+0x210>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <modem_Task+0x210>)
 8003e88:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <modem_Task+0x17e>
		{
			_modem_led_start = 1;
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <modem_Task+0x220>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <modem_Task+0x210>)
 8003e98:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e9c:	b2d8      	uxtb	r0, r3
 8003e9e:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <modem_Task+0x210>)
 8003ea0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	492c      	ldr	r1, [pc, #176]	; (8003f5c <modem_Task+0x224>)
 8003eaa:	f002 fb7f 	bl	80065ac <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <modem_Task+0x210>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8003eb6:	4b2a      	ldr	r3, [pc, #168]	; (8003f60 <modem_Task+0x228>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <modem_Task+0x19c>
	{
		if( _modem_led_start == 1 )
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <modem_Task+0x220>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d138      	bne.n	8003f38 <modem_Task+0x200>
		{
			_modem_led_start = 0;
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <modem_Task+0x220>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <modem_Task+0x228>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 8003ed2:	e031      	b.n	8003f38 <modem_Task+0x200>
	else if( _modem_led_state == 1 )
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <modem_Task+0x228>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10c      	bne.n	8003ef6 <modem_Task+0x1be>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8003edc:	2201      	movs	r2, #1
 8003ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ee2:	4820      	ldr	r0, [pc, #128]	; (8003f64 <modem_Task+0x22c>)
 8003ee4:	f003 ff22 	bl	8007d2c <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <modem_Task+0x210>)
 8003eea:	2214      	movs	r2, #20
 8003eec:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <modem_Task+0x228>)
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	701a      	strb	r2, [r3, #0]
	return;
 8003ef4:	e020      	b.n	8003f38 <modem_Task+0x200>
	else if( _modem_led_state == 2 )
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <modem_Task+0x228>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d110      	bne.n	8003f20 <modem_Task+0x1e8>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <modem_Task+0x210>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <modem_Task+0x200>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8003f06:	2200      	movs	r2, #0
 8003f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f0c:	4815      	ldr	r0, [pc, #84]	; (8003f64 <modem_Task+0x22c>)
 8003f0e:	f003 ff0d 	bl	8007d2c <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <modem_Task+0x210>)
 8003f14:	2232      	movs	r2, #50	; 0x32
 8003f16:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <modem_Task+0x228>)
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	701a      	strb	r2, [r3, #0]
	return;
 8003f1e:	e00b      	b.n	8003f38 <modem_Task+0x200>
	else if( _modem_led_state == 3 )
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <modem_Task+0x228>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d107      	bne.n	8003f38 <modem_Task+0x200>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <modem_Task+0x210>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <modem_Task+0x200>
			_modem_led_state = 0;
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <modem_Task+0x228>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
	return;
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
}
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000c6c 	.word	0x20000c6c
 8003f44:	40020000 	.word	0x40020000
 8003f48:	20000ac4 	.word	0x20000ac4
 8003f4c:	200009f4 	.word	0x200009f4
 8003f50:	20000c7b 	.word	0x20000c7b
 8003f54:	20000bdc 	.word	0x20000bdc
 8003f58:	20000c7c 	.word	0x20000c7c
 8003f5c:	20000b59 	.word	0x20000b59
 8003f60:	20000c7d 	.word	0x20000c7d
 8003f64:	40020400 	.word	0x40020400

08003f68 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <modem_RcvData+0x188>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d01a      	beq.n	8003fb0 <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 8003f7a:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <modem_RcvData+0x18c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 80b1 	bne.w	80040e6 <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 8003f84:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <modem_RcvData+0x190>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	b2d1      	uxtb	r1, r2
 8003f8c:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <modem_RcvData+0x190>)
 8003f8e:	7011      	strb	r1, [r2, #0]
 8003f90:	4619      	mov	r1, r3
 8003f92:	4a5a      	ldr	r2, [pc, #360]	; (80040fc <modem_RcvData+0x194>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 8003f98:	4b57      	ldr	r3, [pc, #348]	; (80040f8 <modem_RcvData+0x190>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	f040 80a2 	bne.w	80040e6 <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 8003fa2:	4b55      	ldr	r3, [pc, #340]	; (80040f8 <modem_RcvData+0x190>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 8003fa8:	4b52      	ldr	r3, [pc, #328]	; (80040f4 <modem_RcvData+0x18c>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 8003fae:	e09a      	b.n	80040e6 <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003fb0:	4b53      	ldr	r3, [pc, #332]	; (8004100 <modem_RcvData+0x198>)
 8003fb2:	8a1b      	ldrh	r3, [r3, #16]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fbe:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <modem_RcvData+0x198>)
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003fc6:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <modem_RcvData+0x198>)
 8003fc8:	4413      	add	r3, r2
 8003fca:	79fa      	ldrb	r2, [r7, #7]
 8003fcc:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 8003fce:	4b4c      	ldr	r3, [pc, #304]	; (8004100 <modem_RcvData+0x198>)
 8003fd0:	7b1b      	ldrb	r3, [r3, #12]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d12a      	bne.n	800402e <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8003fd8:	4b49      	ldr	r3, [pc, #292]	; (8004100 <modem_RcvData+0x198>)
 8003fda:	8a1b      	ldrh	r3, [r3, #16]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b02      	subs	r3, #2
 8003fe0:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8003fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4846      	ldr	r0, [pc, #280]	; (8004104 <modem_RcvData+0x19c>)
 8003fec:	f000 f8ce 	bl	800418c <modem_ringBufRead16b>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d173      	bne.n	80040e6 <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 8003ffe:	4b40      	ldr	r3, [pc, #256]	; (8004100 <modem_RcvData+0x198>)
 8004000:	8a1b      	ldrh	r3, [r3, #16]
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b02      	subs	r3, #2
 8004006:	b29b      	uxth	r3, r3
 8004008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800400c:	b29a      	uxth	r2, r3
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <modem_RcvData+0x198>)
 8004010:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b3c      	ldr	r3, [pc, #240]	; (8004108 <modem_RcvData+0x1a0>)
 8004018:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b02      	subs	r3, #2
 8004020:	b29a      	uxth	r2, r3
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <modem_RcvData+0x198>)
 8004024:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 8004026:	4b36      	ldr	r3, [pc, #216]	; (8004100 <modem_RcvData+0x198>)
 8004028:	2201      	movs	r2, #1
 800402a:	731a      	strb	r2, [r3, #12]
	return;
 800402c:	e05b      	b.n	80040e6 <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 800402e:	4b34      	ldr	r3, [pc, #208]	; (8004100 <modem_RcvData+0x198>)
 8004030:	7b1b      	ldrb	r3, [r3, #12]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d156      	bne.n	80040e6 <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8004038:	4b33      	ldr	r3, [pc, #204]	; (8004108 <modem_RcvData+0x1a0>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	4b31      	ldr	r3, [pc, #196]	; (8004108 <modem_RcvData+0x1a0>)
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <modem_RcvData+0x1a0>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d14c      	bne.n	80040e6 <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <modem_RcvData+0x198>)
 800404e:	2200      	movs	r2, #0
 8004050:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 8004052:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <modem_RcvData+0x198>)
 8004054:	89db      	ldrh	r3, [r3, #14]
 8004056:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 8004058:	4b29      	ldr	r3, [pc, #164]	; (8004100 <modem_RcvData+0x198>)
 800405a:	8a5b      	ldrh	r3, [r3, #18]
 800405c:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800405e:	3303      	adds	r3, #3
 8004060:	b29a      	uxth	r2, r3
 8004062:	237f      	movs	r3, #127	; 0x7f
 8004064:	4827      	ldr	r0, [pc, #156]	; (8004104 <modem_RcvData+0x19c>)
 8004066:	f7ff f83b 	bl	80030e0 <crc16_RingBuf>
 800406a:	4603      	mov	r3, r0
 800406c:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <modem_RcvData+0x198>)
 8004070:	8a1b      	ldrh	r3, [r3, #16]
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8004078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407c:	b29b      	uxth	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	4820      	ldr	r0, [pc, #128]	; (8004104 <modem_RcvData+0x19c>)
 8004082:	f000 f883 	bl	800418c <modem_ringBufRead16b>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	89bb      	ldrh	r3, [r7, #12]
 800408c:	4293      	cmp	r3, r2
 800408e:	d12a      	bne.n	80040e6 <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <modem_RcvData+0x198>)
 8004092:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004096:	2b00      	cmp	r3, #0
 8004098:	d125      	bne.n	80040e6 <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 800409a:	2300      	movs	r3, #0
 800409c:	81fb      	strh	r3, [r7, #14]
 800409e:	e014      	b.n	80040ca <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <modem_RcvData+0x198>)
 80040a2:	89db      	ldrh	r3, [r3, #14]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	1cda      	adds	r2, r3, #3
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	4413      	add	r3, r2
 80040ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 80040b0:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80040b2:	4913      	ldr	r1, [pc, #76]	; (8004100 <modem_RcvData+0x198>)
 80040b4:	440a      	add	r2, r1
 80040b6:	7d12      	ldrb	r2, [r2, #20]
 80040b8:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <modem_RcvData+0x198>)
 80040bc:	4413      	add	r3, r2
 80040be:	460a      	mov	r2, r1
 80040c0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 80040c4:	89fb      	ldrh	r3, [r7, #14]
 80040c6:	3301      	adds	r3, #1
 80040c8:	81fb      	strh	r3, [r7, #14]
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <modem_RcvData+0x198>)
 80040cc:	8a5b      	ldrh	r3, [r3, #18]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	89fa      	ldrh	r2, [r7, #14]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3e4      	bcc.n	80040a0 <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <modem_RcvData+0x198>)
 80040d8:	8a5b      	ldrh	r3, [r3, #18]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <modem_RcvData+0x198>)
 80040e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
}
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000c6c 	.word	0x20000c6c
 80040f4:	20000c7b 	.word	0x20000c7b
 80040f8:	20000c7a 	.word	0x20000c7a
 80040fc:	20000c70 	.word	0x20000c70
 8004100:	20000ac4 	.word	0x20000ac4
 8004104:	20000ad8 	.word	0x20000ad8
 8004108:	20000c7e 	.word	0x20000c7e

0800410c <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 800411a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800411e:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8004120:	f107 0316 	add.w	r3, r7, #22
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f850 	bl	80041cc <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3303      	adds	r3, #3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8004136:	f107 0315 	add.w	r3, r7, #21
 800413a:	2101      	movs	r1, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f845 	bl	80041cc <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8004146:	f107 0315 	add.w	r3, r7, #21
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f83d 	bl	80041cc <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f000 f839 	bl	80041cc <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <modem_TrmData+0x78>)
 800415c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004160:	b29b      	uxth	r3, r3
 8004162:	4619      	mov	r1, r3
 8004164:	4808      	ldr	r0, [pc, #32]	; (8004188 <modem_TrmData+0x7c>)
 8004166:	f7fe ff91 	bl	800308c <crc16_calc>
 800416a:	4603      	mov	r3, r0
 800416c:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 800416e:	f107 0316 	add.w	r3, r7, #22
 8004172:	2102      	movs	r1, #2
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f829 	bl	80041cc <modem_AddTxData>

	return;
 800417a:	bf00      	nop
}
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000ac4 	.word	0x20000ac4
 8004188:	20000bdc 	.word	0x20000bdc

0800418c <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 8004198:	887b      	ldrh	r3, [r7, #2]
 800419a:	3301      	adds	r3, #1
 800419c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	440b      	add	r3, r1
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	81fb      	strh	r3, [r7, #14]
	return tmp;
 80041bc:	89fb      	ldrh	r3, [r7, #14]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <modem_AddTxData+0x4c>)
 80041d8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041dc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d814      	bhi.n	8004210 <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <modem_AddTxData+0x4c>)
 80041e8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <modem_AddTxData+0x4c>)
 80041f2:	4413      	add	r3, r2
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f00c fe67 	bl	8010ecc <memcpy>
	modem_info.tx_buf_bytes += len;
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <modem_AddTxData+0x4c>)
 8004200:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4413      	add	r3, r2
 8004208:	4a03      	ldr	r2, [pc, #12]	; (8004218 <modem_AddTxData+0x4c>)
 800420a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 800420e:	e000      	b.n	8004212 <modem_AddTxData+0x46>
		return;
 8004210:	bf00      	nop
}
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000ac4 	.word	0x20000ac4

0800421c <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b0a2      	sub	sp, #136	; 0x88
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <modem_RemTxData+0x6c>)
 8004226:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d826      	bhi.n	800427e <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d023      	beq.n	800427e <modem_RemTxData+0x62>
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <modem_RemTxData+0x6c>)
 8004238:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01e      	beq.n	800427e <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <modem_RemTxData+0x6c>)
 8004242:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <modem_RemTxData+0x6c>)
 800424c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004256:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <modem_RemTxData+0x6c>)
 8004258:	1899      	adds	r1, r3, r2
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <modem_RemTxData+0x6c>)
 800425c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004260:	f107 0308 	add.w	r3, r7, #8
 8004264:	4618      	mov	r0, r3
 8004266:	f00c fe31 	bl	8010ecc <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 800426a:	4b07      	ldr	r3, [pc, #28]	; (8004288 <modem_RemTxData+0x6c>)
 800426c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	4619      	mov	r1, r3
 8004276:	4805      	ldr	r0, [pc, #20]	; (800428c <modem_RemTxData+0x70>)
 8004278:	f00c fe28 	bl	8010ecc <memcpy>

	return;
 800427c:	e000      	b.n	8004280 <modem_RemTxData+0x64>
		return;
 800427e:	bf00      	nop
}
 8004280:	3788      	adds	r7, #136	; 0x88
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000ac4 	.word	0x20000ac4
 800428c:	20000bdc 	.word	0x20000bdc

08004290 <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e016      	b.n	80042cc <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <motor_Timer+0x50>)
 80042a2:	3304      	adds	r3, #4
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <motor_Timer+0x36>
			motor_info.timer[i]--;
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	490b      	ldr	r1, [pc, #44]	; (80042e0 <motor_Timer+0x50>)
 80042b2:	1d13      	adds	r3, r2, #4
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	1e59      	subs	r1, r3, #1
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <motor_Timer+0x50>)
 80042be:	1d13      	adds	r3, r2, #4
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4403      	add	r3, r0
 80042c4:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	3301      	adds	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0e5      	beq.n	800429e <motor_Timer+0xe>
		}
	}

	return;
 80042d2:	bf00      	nop
}
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000c80 	.word	0x20000c80

080042e4 <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <motor_InitTask+0x90>)
 80042ec:	4a22      	ldr	r2, [pc, #136]	; (8004378 <motor_InitTask+0x94>)
 80042ee:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 80042f0:	4b20      	ldr	r3, [pc, #128]	; (8004374 <motor_InitTask+0x90>)
 80042f2:	2208      	movs	r2, #8
 80042f4:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <motor_InitTask+0x90>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <motor_InitTask+0x90>)
 80042fe:	f240 2217 	movw	r2, #535	; 0x217
 8004302:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <motor_InitTask+0x90>)
 8004306:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800430a:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <motor_InitTask+0x90>)
 800430e:	89db      	ldrh	r3, [r3, #14]
 8004310:	b29a      	uxth	r2, r3
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <motor_InitTask+0x90>)
 8004314:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <motor_InitTask+0x90>)
 8004318:	f240 32b6 	movw	r2, #950	; 0x3b6
 800431c:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <motor_InitTask+0x90>)
 8004320:	2201      	movs	r2, #1
 8004322:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8004324:	2300      	movs	r3, #0
 8004326:	71fb      	strb	r3, [r7, #7]
 8004328:	e016      	b.n	8004358 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 800432a:	79fa      	ldrb	r2, [r7, #7]
 800432c:	4911      	ldr	r1, [pc, #68]	; (8004374 <motor_InitTask+0x90>)
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	79fa      	ldrb	r2, [r7, #7]
 800433c:	490d      	ldr	r1, [pc, #52]	; (8004374 <motor_InitTask+0x90>)
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3304      	adds	r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	f006 fcd9 	bl	800ad04 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	3301      	adds	r3, #1
 8004356:	71fb      	strb	r3, [r7, #7]
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0e5      	beq.n	800432a <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <motor_InitTask+0x90>)
 8004360:	7b1b      	ldrb	r3, [r3, #12]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	2000      	movs	r0, #0
 8004368:	f000 f92e 	bl	80045c8 <motor_setTorque>

	return;
 800436c:	bf00      	nop
}
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000c80 	.word	0x20000c80
 8004378:	200009ac 	.word	0x200009ac

0800437c <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 8004380:	bf00      	nop
}
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	460a      	mov	r2, r1
 8004396:	71fb      	strb	r3, [r7, #7]
 8004398:	4613      	mov	r3, r2
 800439a:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 8109 	bne.w	80045b6 <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 80043a4:	79fa      	ldrb	r2, [r7, #7]
 80043a6:	4987      	ldr	r1, [pc, #540]	; (80045c4 <motor_setEnable+0x238>)
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3308      	adds	r3, #8
 80043b4:	79ba      	ldrb	r2, [r7, #6]
 80043b6:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 80043b8:	79fa      	ldrb	r2, [r7, #7]
 80043ba:	4982      	ldr	r1, [pc, #520]	; (80045c4 <motor_setEnable+0x238>)
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	3308      	adds	r3, #8
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d178      	bne.n	80044c2 <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80043d0:	79fa      	ldrb	r2, [r7, #7]
 80043d2:	497c      	ldr	r1, [pc, #496]	; (80045c4 <motor_setEnable+0x238>)
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	3304      	adds	r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d115      	bne.n	8004412 <motor_setEnable+0x86>
 80043e6:	79fa      	ldrb	r2, [r7, #7]
 80043e8:	4976      	ldr	r1, [pc, #472]	; (80045c4 <motor_setEnable+0x238>)
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	330a      	adds	r3, #10
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b298      	uxth	r0, r3
 80043fa:	79fa      	ldrb	r2, [r7, #7]
 80043fc:	4971      	ldr	r1, [pc, #452]	; (80045c4 <motor_setEnable+0x238>)
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4602      	mov	r2, r0
 800440e:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 8004410:	e0d2      	b.n	80045b8 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004412:	79fa      	ldrb	r2, [r7, #7]
 8004414:	496b      	ldr	r1, [pc, #428]	; (80045c4 <motor_setEnable+0x238>)
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3304      	adds	r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d115      	bne.n	8004454 <motor_setEnable+0xc8>
 8004428:	79fa      	ldrb	r2, [r7, #7]
 800442a:	4966      	ldr	r1, [pc, #408]	; (80045c4 <motor_setEnable+0x238>)
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	330a      	adds	r3, #10
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b298      	uxth	r0, r3
 800443c:	79fa      	ldrb	r2, [r7, #7]
 800443e:	4961      	ldr	r1, [pc, #388]	; (80045c4 <motor_setEnable+0x238>)
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4603      	mov	r3, r0
 8004450:	6393      	str	r3, [r2, #56]	; 0x38
 8004452:	e0af      	b.n	80045b4 <motor_setEnable+0x228>
 8004454:	79fa      	ldrb	r2, [r7, #7]
 8004456:	495b      	ldr	r1, [pc, #364]	; (80045c4 <motor_setEnable+0x238>)
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	3304      	adds	r3, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b08      	cmp	r3, #8
 8004468:	d115      	bne.n	8004496 <motor_setEnable+0x10a>
 800446a:	79fa      	ldrb	r2, [r7, #7]
 800446c:	4955      	ldr	r1, [pc, #340]	; (80045c4 <motor_setEnable+0x238>)
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	330a      	adds	r3, #10
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b298      	uxth	r0, r3
 800447e:	79fa      	ldrb	r2, [r7, #7]
 8004480:	4950      	ldr	r1, [pc, #320]	; (80045c4 <motor_setEnable+0x238>)
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4603      	mov	r3, r0
 8004492:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004494:	e08e      	b.n	80045b4 <motor_setEnable+0x228>
 8004496:	79fa      	ldrb	r2, [r7, #7]
 8004498:	494a      	ldr	r1, [pc, #296]	; (80045c4 <motor_setEnable+0x238>)
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	330a      	adds	r3, #10
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b298      	uxth	r0, r3
 80044aa:	79fa      	ldrb	r2, [r7, #7]
 80044ac:	4945      	ldr	r1, [pc, #276]	; (80045c4 <motor_setEnable+0x238>)
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4603      	mov	r3, r0
 80044be:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80044c0:	e07a      	b.n	80045b8 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80044c2:	79fa      	ldrb	r2, [r7, #7]
 80044c4:	493f      	ldr	r1, [pc, #252]	; (80045c4 <motor_setEnable+0x238>)
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d115      	bne.n	8004504 <motor_setEnable+0x178>
 80044d8:	79fa      	ldrb	r2, [r7, #7]
 80044da:	493a      	ldr	r1, [pc, #232]	; (80045c4 <motor_setEnable+0x238>)
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	330e      	adds	r3, #14
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b298      	uxth	r0, r3
 80044ec:	79fa      	ldrb	r2, [r7, #7]
 80044ee:	4935      	ldr	r1, [pc, #212]	; (80045c4 <motor_setEnable+0x238>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4602      	mov	r2, r0
 8004500:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8004502:	e059      	b.n	80045b8 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004504:	79fa      	ldrb	r2, [r7, #7]
 8004506:	492f      	ldr	r1, [pc, #188]	; (80045c4 <motor_setEnable+0x238>)
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3304      	adds	r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d115      	bne.n	8004546 <motor_setEnable+0x1ba>
 800451a:	79fa      	ldrb	r2, [r7, #7]
 800451c:	4929      	ldr	r1, [pc, #164]	; (80045c4 <motor_setEnable+0x238>)
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	330e      	adds	r3, #14
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b298      	uxth	r0, r3
 800452e:	79fa      	ldrb	r2, [r7, #7]
 8004530:	4924      	ldr	r1, [pc, #144]	; (80045c4 <motor_setEnable+0x238>)
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4603      	mov	r3, r0
 8004542:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8004544:	e038      	b.n	80045b8 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004546:	79fa      	ldrb	r2, [r7, #7]
 8004548:	491e      	ldr	r1, [pc, #120]	; (80045c4 <motor_setEnable+0x238>)
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3304      	adds	r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d115      	bne.n	8004588 <motor_setEnable+0x1fc>
 800455c:	79fa      	ldrb	r2, [r7, #7]
 800455e:	4919      	ldr	r1, [pc, #100]	; (80045c4 <motor_setEnable+0x238>)
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	330e      	adds	r3, #14
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b298      	uxth	r0, r3
 8004570:	79fa      	ldrb	r2, [r7, #7]
 8004572:	4914      	ldr	r1, [pc, #80]	; (80045c4 <motor_setEnable+0x238>)
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4603      	mov	r3, r0
 8004584:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004586:	e017      	b.n	80045b8 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004588:	79fa      	ldrb	r2, [r7, #7]
 800458a:	490e      	ldr	r1, [pc, #56]	; (80045c4 <motor_setEnable+0x238>)
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	330e      	adds	r3, #14
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b298      	uxth	r0, r3
 800459c:	79fa      	ldrb	r2, [r7, #7]
 800459e:	4909      	ldr	r1, [pc, #36]	; (80045c4 <motor_setEnable+0x238>)
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4603      	mov	r3, r0
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80045b2:	e001      	b.n	80045b8 <motor_setEnable+0x22c>
 80045b4:	e000      	b.n	80045b8 <motor_setEnable+0x22c>
		return;
 80045b6:	bf00      	nop
}
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000c80 	.word	0x20000c80

080045c8 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	4603      	mov	r3, r0
 80045d0:	460a      	mov	r2, r1
 80045d2:	71fb      	strb	r3, [r7, #7]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 80d9 	bne.w	8004792 <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 80045e0:	79fa      	ldrb	r2, [r7, #7]
 80045e2:	496f      	ldr	r1, [pc, #444]	; (80047a0 <motor_setTorque+0x1d8>)
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	330c      	adds	r3, #12
 80045f0:	79ba      	ldrb	r2, [r7, #6]
 80045f2:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 80045f4:	79bb      	ldrb	r3, [r7, #6]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d114      	bne.n	8004624 <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 80045fa:	79f9      	ldrb	r1, [r7, #7]
 80045fc:	79fa      	ldrb	r2, [r7, #7]
 80045fe:	4868      	ldr	r0, [pc, #416]	; (80047a0 <motor_setTorque+0x1d8>)
 8004600:	460b      	mov	r3, r1
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4403      	add	r3, r0
 800460a:	330e      	adds	r3, #14
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b298      	uxth	r0, r3
 8004610:	4963      	ldr	r1, [pc, #396]	; (80047a0 <motor_setTorque+0x1d8>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	330a      	adds	r3, #10
 800461e:	4602      	mov	r2, r0
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e031      	b.n	8004688 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8004624:	79fa      	ldrb	r2, [r7, #7]
 8004626:	495e      	ldr	r1, [pc, #376]	; (80047a0 <motor_setTorque+0x1d8>)
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	330c      	adds	r3, #12
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 800463a:	79fa      	ldrb	r2, [r7, #7]
 800463c:	4958      	ldr	r1, [pc, #352]	; (80047a0 <motor_setTorque+0x1d8>)
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3310      	adds	r3, #16
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800464e:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 8004650:	79fa      	ldrb	r2, [r7, #7]
 8004652:	4953      	ldr	r1, [pc, #332]	; (80047a0 <motor_setTorque+0x1d8>)
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3312      	adds	r3, #18
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	4623      	mov	r3, r4
 8004668:	2264      	movs	r2, #100	; 0x64
 800466a:	2101      	movs	r1, #1
 800466c:	f000 f89a 	bl	80047a4 <motor_map>
 8004670:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 8004672:	79fa      	ldrb	r2, [r7, #7]
 8004674:	b298      	uxth	r0, r3
 8004676:	494a      	ldr	r1, [pc, #296]	; (80047a0 <motor_setTorque+0x1d8>)
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	330a      	adds	r3, #10
 8004684:	4602      	mov	r2, r0
 8004686:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8004688:	79fa      	ldrb	r2, [r7, #7]
 800468a:	4945      	ldr	r1, [pc, #276]	; (80047a0 <motor_setTorque+0x1d8>)
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3308      	adds	r3, #8
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d17a      	bne.n	8004796 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80046a0:	79fa      	ldrb	r2, [r7, #7]
 80046a2:	493f      	ldr	r1, [pc, #252]	; (80047a0 <motor_setTorque+0x1d8>)
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	3304      	adds	r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d115      	bne.n	80046e2 <motor_setTorque+0x11a>
 80046b6:	79fa      	ldrb	r2, [r7, #7]
 80046b8:	4939      	ldr	r1, [pc, #228]	; (80047a0 <motor_setTorque+0x1d8>)
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	330a      	adds	r3, #10
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b298      	uxth	r0, r3
 80046ca:	79fa      	ldrb	r2, [r7, #7]
 80046cc:	4934      	ldr	r1, [pc, #208]	; (80047a0 <motor_setTorque+0x1d8>)
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4602      	mov	r2, r0
 80046de:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 80046e0:	e059      	b.n	8004796 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80046e2:	79fa      	ldrb	r2, [r7, #7]
 80046e4:	492e      	ldr	r1, [pc, #184]	; (80047a0 <motor_setTorque+0x1d8>)
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	3304      	adds	r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d115      	bne.n	8004724 <motor_setTorque+0x15c>
 80046f8:	79fa      	ldrb	r2, [r7, #7]
 80046fa:	4929      	ldr	r1, [pc, #164]	; (80047a0 <motor_setTorque+0x1d8>)
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	330a      	adds	r3, #10
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b298      	uxth	r0, r3
 800470c:	79fa      	ldrb	r2, [r7, #7]
 800470e:	4924      	ldr	r1, [pc, #144]	; (80047a0 <motor_setTorque+0x1d8>)
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4603      	mov	r3, r0
 8004720:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8004722:	e038      	b.n	8004796 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004724:	79fa      	ldrb	r2, [r7, #7]
 8004726:	491e      	ldr	r1, [pc, #120]	; (80047a0 <motor_setTorque+0x1d8>)
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	3304      	adds	r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d115      	bne.n	8004766 <motor_setTorque+0x19e>
 800473a:	79fa      	ldrb	r2, [r7, #7]
 800473c:	4918      	ldr	r1, [pc, #96]	; (80047a0 <motor_setTorque+0x1d8>)
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	330a      	adds	r3, #10
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b298      	uxth	r0, r3
 800474e:	79fa      	ldrb	r2, [r7, #7]
 8004750:	4913      	ldr	r1, [pc, #76]	; (80047a0 <motor_setTorque+0x1d8>)
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004764:	e017      	b.n	8004796 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004766:	79fa      	ldrb	r2, [r7, #7]
 8004768:	490d      	ldr	r1, [pc, #52]	; (80047a0 <motor_setTorque+0x1d8>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	330a      	adds	r3, #10
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b298      	uxth	r0, r3
 800477a:	79fa      	ldrb	r2, [r7, #7]
 800477c:	4908      	ldr	r1, [pc, #32]	; (80047a0 <motor_setTorque+0x1d8>)
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004790:	e001      	b.n	8004796 <motor_setTorque+0x1ce>
		return;
 8004792:	bf00      	nop
 8004794:	e000      	b.n	8004798 <motor_setTorque+0x1d0>
	return;
 8004796:	bf00      	nop
}
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000c80 	.word	0x20000c80

080047a4 <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	1a8a      	subs	r2, r1, r2
 80047be:	fb03 f202 	mul.w	r2, r3, r2
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	1acb      	subs	r3, r1, r3
 80047c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4413      	add	r3, r2
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80047ea:	89fb      	ldrh	r3, [r7, #14]
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d821      	bhi.n	8004834 <cfg_NodeMotorVarProp+0x58>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <cfg_NodeMotorVarProp+0x1c>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004811 	.word	0x08004811
 80047fc:	08004817 	.word	0x08004817
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004823 	.word	0x08004823
 8004808:	08004829 	.word	0x08004829
 800480c:	0800482f 	.word	0x0800482f
	{
		case MOTOR_ENA:				str = "Enable"; break;
 8004810:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <cfg_NodeMotorVarProp+0xf0>)
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e010      	b.n	8004838 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 8004816:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <cfg_NodeMotorVarProp+0xf4>)
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e00d      	b.n	8004838 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 800481c:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <cfg_NodeMotorVarProp+0xf8>)
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e00a      	b.n	8004838 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <cfg_NodeMotorVarProp+0xfc>)
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e007      	b.n	8004838 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <cfg_NodeMotorVarProp+0x100>)
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e004      	b.n	8004838 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <cfg_NodeMotorVarProp+0x104>)
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e001      	b.n	8004838 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 8004834:	2302      	movs	r3, #2
 8004836:	e042      	b.n	80048be <cfg_NodeMotorVarProp+0xe2>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00f      	beq.n	800485e <cfg_NodeMotorVarProp+0x82>
 800483e:	e007      	b.n	8004850 <cfg_NodeMotorVarProp+0x74>
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	1c53      	adds	r3, r2, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1c59      	adds	r1, r3, #1
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f3      	bne.n	8004840 <cfg_NodeMotorVarProp+0x64>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02b      	beq.n	80048bc <cfg_NodeMotorVarProp+0xe0>
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d826      	bhi.n	80048b8 <cfg_NodeMotorVarProp+0xdc>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <cfg_NodeMotorVarProp+0x94>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004889 	.word	0x08004889
 8004874:	08004891 	.word	0x08004891
 8004878:	08004899 	.word	0x08004899
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2223      	movs	r2, #35	; 0x23
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	e015      	b.n	80048bc <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e011      	b.n	80048bc <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2212      	movs	r2, #18
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e00d      	b.n	80048bc <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2222      	movs	r2, #34	; 0x22
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e009      	b.n	80048bc <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2222      	movs	r2, #34	; 0x22
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e005      	b.n	80048bc <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2222      	movs	r2, #34	; 0x22
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e001      	b.n	80048bc <cfg_NodeMotorVarProp+0xe0>
		default: return CFG_ERROR_VARID;
 80048b8:	2302      	movs	r3, #2
 80048ba:	e000      	b.n	80048be <cfg_NodeMotorVarProp+0xe2>
	}
	return CFG_ERROR_NONE;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	08011014 	.word	0x08011014
 80048d0:	0801101c 	.word	0x0801101c
 80048d4:	0801102c 	.word	0x0801102c
 80048d8:	08011038 	.word	0x08011038
 80048dc:	08011044 	.word	0x08011044
 80048e0:	0801104c 	.word	0x0801104c

080048e4 <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d03e      	beq.n	8004974 <cfg_NodeMotorVarGet+0x90>
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d839      	bhi.n	8004970 <cfg_NodeMotorVarGet+0x8c>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <cfg_NodeMotorVarGet+0x20>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	0800491d 	.word	0x0800491d
 8004908:	0800492b 	.word	0x0800492b
 800490c:	08004939 	.word	0x08004939
 8004910:	08004947 	.word	0x08004947
 8004914:	08004955 	.word	0x08004955
 8004918:	08004963 	.word	0x08004963
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <cfg_NodeMotorVarGet+0xa0>)
 800491e:	7a1b      	ldrb	r3, [r3, #8]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e024      	b.n	8004974 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 800492a:	4b16      	ldr	r3, [pc, #88]	; (8004984 <cfg_NodeMotorVarGet+0xa0>)
 800492c:	7b1b      	ldrb	r3, [r3, #12]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e01d      	b.n	8004974 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <cfg_NodeMotorVarGet+0xa0>)
 800493a:	895b      	ldrh	r3, [r3, #10]
 800493c:	b29b      	uxth	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e016      	b.n	8004974 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <cfg_NodeMotorVarGet+0xa0>)
 8004948:	89db      	ldrh	r3, [r3, #14]
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e00f      	b.n	8004974 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <cfg_NodeMotorVarGet+0xa0>)
 8004956:	8a1b      	ldrh	r3, [r3, #16]
 8004958:	b29b      	uxth	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e008      	b.n	8004974 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <cfg_NodeMotorVarGet+0xa0>)
 8004964:	8a5b      	ldrh	r3, [r3, #18]
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e001      	b.n	8004974 <cfg_NodeMotorVarGet+0x90>
		default: return CFG_ERROR_VARID;
 8004970:	2302      	movs	r3, #2
 8004972:	e000      	b.n	8004976 <cfg_NodeMotorVarGet+0x92>
	}
	return CFG_ERROR_NONE;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000c80 	.word	0x20000c80

08004988 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d037      	beq.n	8004a0a <cfg_NodeMotorVarSet+0x82>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	2b05      	cmp	r3, #5
 800499e:	d831      	bhi.n	8004a04 <cfg_NodeMotorVarSet+0x7c>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <cfg_NodeMotorVarSet+0x20>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049c1 	.word	0x080049c1
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	080049f9 	.word	0x080049f9
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7ff fcdf 	bl	800438c <motor_setEnable>
 80049ce:	e01c      	b.n	8004a0a <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4619      	mov	r1, r3
 80049d8:	2000      	movs	r0, #0
 80049da:	f7ff fdf5 	bl	80045c8 <motor_setTorque>
 80049de:	e014      	b.n	8004a0a <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <cfg_NodeMotorVarSet+0x8c>)
 80049e8:	81da      	strh	r2, [r3, #14]
 80049ea:	e00e      	b.n	8004a0a <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <cfg_NodeMotorVarSet+0x8c>)
 80049f4:	821a      	strh	r2, [r3, #16]
 80049f6:	e008      	b.n	8004a0a <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <cfg_NodeMotorVarSet+0x8c>)
 8004a00:	825a      	strh	r2, [r3, #18]
 8004a02:	e002      	b.n	8004a0a <cfg_NodeMotorVarSet+0x82>
		default: return CFG_ERROR_VARID;
 8004a04:	2302      	movs	r3, #2
 8004a06:	e001      	b.n	8004a0c <cfg_NodeMotorVarSet+0x84>
		case MOTOR_CUR_PWM:			break;
 8004a08:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000c80 	.word	0x20000c80

08004a18 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e010      	b.n	8004a48 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <rc_Timer+0x44>)
 8004a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <rc_Timer+0x2a>
			rc_info.timer[i]--;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <rc_Timer+0x44>)
 8004a36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	4907      	ldr	r1, [pc, #28]	; (8004a5c <rc_Timer+0x44>)
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	3301      	adds	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d9eb      	bls.n	8004a26 <rc_Timer+0xe>
		}
	}

	return;
 8004a4e:	bf00      	nop
}
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000ca4 	.word	0x20000ca4

08004a60 <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <rc_InitTask+0x4c>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <rc_InitTask+0x4c>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <rc_InitTask+0x4c>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <rc_InitTask+0x4c>)
 8004a7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <rc_InitTask+0x4c>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <rc_InitTask+0x4c>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <rc_InitTask+0x4c>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <rc_InitTask+0x4c>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	721a      	strb	r2, [r3, #8]

	return;
 8004aa0:	bf00      	nop
}
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000ca4 	.word	0x20000ca4

08004ab0 <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 8004ab6:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <rc_Task+0x154>)
 8004ab8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d047      	beq.n	8004b50 <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <rc_Task+0x154>)
 8004ac2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ac6:	4a4f      	ldr	r2, [pc, #316]	; (8004c04 <rc_Task+0x154>)
 8004ac8:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 8004aca:	4b4e      	ldr	r3, [pc, #312]	; (8004c04 <rc_Task+0x154>)
 8004acc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <rc_Task+0x2e>
			rc_info.connected = 1;
 8004ad6:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <rc_Task+0x154>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <rc_Task+0x154>)
 8004ae0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	b25a      	sxtb	r2, r3
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <rc_Task+0x154>)
 8004aea:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <rc_Task+0x154>)
 8004af0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	b25a      	sxtb	r2, r3
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <rc_Task+0x154>)
 8004afa:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <rc_Task+0x154>)
 8004b00:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	b25a      	sxtb	r2, r3
 8004b08:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <rc_Task+0x154>)
 8004b0a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	; (8004c04 <rc_Task+0x154>)
 8004b10:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	b25a      	sxtb	r2, r3
 8004b18:	4b3a      	ldr	r3, [pc, #232]	; (8004c04 <rc_Task+0x154>)
 8004b1a:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8004b1e:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <rc_Task+0x154>)
 8004b20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <rc_Task+0x154>)
 8004b28:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <rc_Task+0x154>)
 8004b2e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <rc_Task+0x154>)
 8004b36:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 8004b3a:	4b32      	ldr	r3, [pc, #200]	; (8004c04 <rc_Task+0x154>)
 8004b3c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004b40:	3301      	adds	r3, #1
 8004b42:	4a30      	ldr	r2, [pc, #192]	; (8004c04 <rc_Task+0x154>)
 8004b44:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8004b48:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <rc_Task+0x154>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8004b50:	4b2c      	ldr	r3, [pc, #176]	; (8004c04 <rc_Task+0x154>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <rc_Task+0xbc>
 8004b58:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <rc_Task+0x154>)
 8004b5a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d103      	bne.n	8004b6c <rc_Task+0xbc>
		rc_info.connected = 0;
 8004b64:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <rc_Task+0x154>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <rc_Task+0x154>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d142      	bne.n	8004bfa <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <rc_Task+0x154>)
 8004b76:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d13c      	bne.n	8004bfa <rc_Task+0x14a>
 8004b80:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <rc_Task+0x154>)
 8004b82:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d136      	bne.n	8004bfa <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <rc_Task+0x154>)
 8004b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b92:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 8004b94:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8004b98:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f904 	bl	8004dac <rc_AddTxData>
		tmp_u8 = 5;
 8004ba4:	2305      	movs	r3, #5
 8004ba6:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	2101      	movs	r1, #1
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f8fd 	bl	8004dac <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <rc_Task+0x158>)
 8004bb4:	7d5b      	ldrb	r3, [r3, #21]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8004bba:	1dfb      	adds	r3, r7, #7
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f8f4 	bl	8004dac <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <rc_Task+0x15c>)
 8004bc6:	89db      	ldrh	r3, [r3, #14]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	2102      	movs	r1, #2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f8eb 	bl	8004dac <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <rc_Task+0x160>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	4619      	mov	r1, r3
 8004bde:	480d      	ldr	r0, [pc, #52]	; (8004c14 <rc_Task+0x164>)
 8004be0:	f7fe fa54 	bl	800308c <crc16_calc>
 8004be4:	4603      	mov	r3, r0
 8004be6:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f8dd 	bl	8004dac <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <rc_Task+0x160>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
	}

	return;
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
}
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000ca4 	.word	0x20000ca4
 8004c08:	20000224 	.word	0x20000224
 8004c0c:	20000288 	.word	0x20000288
 8004c10:	20000e54 	.word	0x20000e54
 8004c14:	20000dd4 	.word	0x20000dd4

08004c18 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004c22:	4b4f      	ldr	r3, [pc, #316]	; (8004d60 <rc_RcvData+0x148>)
 8004c24:	899b      	ldrh	r3, [r3, #12]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c30:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8004c32:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <rc_RcvData+0x148>)
 8004c34:	4611      	mov	r1, r2
 8004c36:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004c38:	4b49      	ldr	r3, [pc, #292]	; (8004d60 <rc_RcvData+0x148>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	79fa      	ldrb	r2, [r7, #7]
 8004c3e:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8004c40:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <rc_RcvData+0x148>)
 8004c42:	7a1b      	ldrb	r3, [r3, #8]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d12a      	bne.n	8004ca0 <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8004c4a:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <rc_RcvData+0x148>)
 8004c4c:	899b      	ldrh	r3, [r3, #12]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b02      	subs	r3, #2
 8004c52:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4841      	ldr	r0, [pc, #260]	; (8004d64 <rc_RcvData+0x14c>)
 8004c5e:	f000 f885 	bl	8004d6c <rc_ringBufRead16b>
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 8004c66:	897b      	ldrh	r3, [r7, #10]
 8004c68:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d173      	bne.n	8004d58 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8004c70:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <rc_RcvData+0x148>)
 8004c72:	899b      	ldrh	r3, [r3, #12]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b02      	subs	r3, #2
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <rc_RcvData+0x148>)
 8004c82:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <rc_RcvData+0x150>)
 8004c8a:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b02      	subs	r3, #2
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <rc_RcvData+0x148>)
 8004c96:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 8004c98:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <rc_RcvData+0x148>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 8004c9e:	e05b      	b.n	8004d58 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 8004ca0:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <rc_RcvData+0x148>)
 8004ca2:	7a1b      	ldrb	r3, [r3, #8]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d156      	bne.n	8004d58 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <rc_RcvData+0x150>)
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <rc_RcvData+0x150>)
 8004cb4:	801a      	strh	r2, [r3, #0]
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <rc_RcvData+0x150>)
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d14c      	bne.n	8004d58 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004cbe:	4b28      	ldr	r3, [pc, #160]	; (8004d60 <rc_RcvData+0x148>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004cc4:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <rc_RcvData+0x148>)
 8004cc6:	895b      	ldrh	r3, [r3, #10]
 8004cc8:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 8004cca:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <rc_RcvData+0x148>)
 8004ccc:	89db      	ldrh	r3, [r3, #14]
 8004cce:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	237f      	movs	r3, #127	; 0x7f
 8004cd6:	4823      	ldr	r0, [pc, #140]	; (8004d64 <rc_RcvData+0x14c>)
 8004cd8:	f7fe fa02 	bl	80030e0 <crc16_RingBuf>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8004ce0:	4b1f      	ldr	r3, [pc, #124]	; (8004d60 <rc_RcvData+0x148>)
 8004ce2:	899b      	ldrh	r3, [r3, #12]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	481c      	ldr	r0, [pc, #112]	; (8004d64 <rc_RcvData+0x14c>)
 8004cf4:	f000 f83a 	bl	8004d6c <rc_ringBufRead16b>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	89bb      	ldrh	r3, [r7, #12]
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d12a      	bne.n	8004d58 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <rc_RcvData+0x148>)
 8004d04:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d125      	bne.n	8004d58 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	81fb      	strh	r3, [r7, #14]
 8004d10:	e014      	b.n	8004d3c <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <rc_RcvData+0x148>)
 8004d14:	895b      	ldrh	r3, [r3, #10]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	1cda      	adds	r2, r3, #3
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8004d22:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004d24:	490e      	ldr	r1, [pc, #56]	; (8004d60 <rc_RcvData+0x148>)
 8004d26:	440a      	add	r2, r1
 8004d28:	7c12      	ldrb	r2, [r2, #16]
 8004d2a:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	; (8004d60 <rc_RcvData+0x148>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	460a      	mov	r2, r1
 8004d32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	81fb      	strh	r3, [r7, #14]
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <rc_RcvData+0x148>)
 8004d3e:	89db      	ldrh	r3, [r3, #14]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	89fa      	ldrh	r2, [r7, #14]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3e4      	bcc.n	8004d12 <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <rc_RcvData+0x148>)
 8004d4a:	89db      	ldrh	r3, [r3, #14]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <rc_RcvData+0x148>)
 8004d52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
}
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000ca4 	.word	0x20000ca4
 8004d64:	20000cb4 	.word	0x20000cb4
 8004d68:	20000e58 	.word	0x20000e58

08004d6c <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 8004d78:	887b      	ldrh	r3, [r7, #2]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8004d88:	89fb      	ldrh	r3, [r7, #14]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	440b      	add	r3, r1
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4413      	add	r3, r2
 8004d9a:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <rc_AddTxData+0x40>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d80f      	bhi.n	8004de4 <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <rc_AddTxData+0x40>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <rc_AddTxData+0x44>)
 8004dca:	4413      	add	r3, r2
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f00c f87b 	bl	8010ecc <memcpy>
	_rc_tx_buf_len += len;
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <rc_AddTxData+0x40>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	4a03      	ldr	r2, [pc, #12]	; (8004dec <rc_AddTxData+0x40>)
 8004de0:	6013      	str	r3, [r2, #0]

	return;
 8004de2:	e000      	b.n	8004de6 <rc_AddTxData+0x3a>
		return;
 8004de4:	bf00      	nop
}
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000e54 	.word	0x20000e54
 8004df0:	20000dd4 	.word	0x20000dd4

08004df4 <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8004e02:	89fb      	ldrh	r3, [r7, #14]
 8004e04:	2b09      	cmp	r3, #9
 8004e06:	d835      	bhi.n	8004e74 <cfg_NodeRcVarProp+0x80>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <cfg_NodeRcVarProp+0x1c>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e51 	.word	0x08004e51
 8004e24:	08004e57 	.word	0x08004e57
 8004e28:	08004e5d 	.word	0x08004e5d
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e69 	.word	0x08004e69
 8004e34:	08004e6f 	.word	0x08004e6f
	{
		case RC_ENA:				str = "Enable"; break;
 8004e38:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <cfg_NodeRcVarProp+0x148>)
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e01c      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8004e3e:	4b40      	ldr	r3, [pc, #256]	; (8004f40 <cfg_NodeRcVarProp+0x14c>)
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e019      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8004e44:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <cfg_NodeRcVarProp+0x150>)
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e016      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <cfg_NodeRcVarProp+0x154>)
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e013      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8004e50:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <cfg_NodeRcVarProp+0x158>)
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e010      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 8004e56:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <cfg_NodeRcVarProp+0x15c>)
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e00d      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8004e5c:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <cfg_NodeRcVarProp+0x160>)
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	e00a      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <cfg_NodeRcVarProp+0x164>)
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e007      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8004e68:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <cfg_NodeRcVarProp+0x168>)
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e004      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8004e6e:	4b3c      	ldr	r3, [pc, #240]	; (8004f60 <cfg_NodeRcVarProp+0x16c>)
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e001      	b.n	8004e78 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 8004e74:	2302      	movs	r3, #2
 8004e76:	e05a      	b.n	8004f2e <cfg_NodeRcVarProp+0x13a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00f      	beq.n	8004e9e <cfg_NodeRcVarProp+0xaa>
 8004e7e:	e007      	b.n	8004e90 <cfg_NodeRcVarProp+0x9c>
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	1c53      	adds	r3, r2, #1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f3      	bne.n	8004e80 <cfg_NodeRcVarProp+0x8c>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d043      	beq.n	8004f2c <cfg_NodeRcVarProp+0x138>
 8004ea4:	89fb      	ldrh	r3, [r7, #14]
 8004ea6:	2b09      	cmp	r3, #9
 8004ea8:	d83e      	bhi.n	8004f28 <cfg_NodeRcVarProp+0x134>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <cfg_NodeRcVarProp+0xbc>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed9 	.word	0x08004ed9
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ee9 	.word	0x08004ee9
 8004ebc:	08004ef1 	.word	0x08004ef1
 8004ec0:	08004ef9 	.word	0x08004ef9
 8004ec4:	08004f01 	.word	0x08004f01
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004f11 	.word	0x08004f11
 8004ed0:	08004f19 	.word	0x08004f19
 8004ed4:	08004f21 	.word	0x08004f21
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2223      	movs	r2, #35	; 0x23
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e025      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2222      	movs	r2, #34	; 0x22
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e021      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2223      	movs	r2, #35	; 0x23
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e01d      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2212      	movs	r2, #18
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	e019      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2211      	movs	r2, #17
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	e015      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2211      	movs	r2, #17
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	e011      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2211      	movs	r2, #17
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	e00d      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2211      	movs	r2, #17
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	e009      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2213      	movs	r2, #19
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	e005      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2213      	movs	r2, #19
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	e001      	b.n	8004f2c <cfg_NodeRcVarProp+0x138>
		default: return CFG_ERROR_VARID;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e000      	b.n	8004f2e <cfg_NodeRcVarProp+0x13a>
	}
	return CFG_ERROR_NONE;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	08011054 	.word	0x08011054
 8004f40:	0801105c 	.word	0x0801105c
 8004f44:	08011074 	.word	0x08011074
 8004f48:	08011084 	.word	0x08011084
 8004f4c:	08011094 	.word	0x08011094
 8004f50:	080110a0 	.word	0x080110a0
 8004f54:	080110ac 	.word	0x080110ac
 8004f58:	080110bc 	.word	0x080110bc
 8004f5c:	080110cc 	.word	0x080110cc
 8004f60:	080110d8 	.word	0x080110d8

08004f64 <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d06a      	beq.n	800504c <cfg_NodeRcVarGet+0xe8>
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d865      	bhi.n	8005048 <cfg_NodeRcVarGet+0xe4>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <cfg_NodeRcVarGet+0x20>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fdd 	.word	0x08004fdd
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	08004ff9 	.word	0x08004ff9
 8004f9c:	08005009 	.word	0x08005009
 8004fa0:	08005019 	.word	0x08005019
 8004fa4:	08005029 	.word	0x08005029
 8004fa8:	08005039 	.word	0x08005039
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 8004fac:	4b2b      	ldr	r3, [pc, #172]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 8004fae:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e047      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 8004fbc:	4b27      	ldr	r3, [pc, #156]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 8004fbe:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e03f      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 8004fcc:	4b23      	ldr	r3, [pc, #140]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 8004fce:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e037      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 8004fde:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e031      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 8004fea:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e029      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 8004ffa:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e021      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 800500a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800500e:	b25b      	sxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e019      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 8005018:	4b10      	ldr	r3, [pc, #64]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 800501a:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800501e:	b25b      	sxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e011      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 800502a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e009      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <cfg_NodeRcVarGet+0xf8>)
 800503a:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e001      	b.n	800504c <cfg_NodeRcVarGet+0xe8>
		default: return CFG_ERROR_VARID;
 8005048:	2302      	movs	r3, #2
 800504a:	e000      	b.n	800504e <cfg_NodeRcVarGet+0xea>
	}
	return CFG_ERROR_NONE;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000ca4 	.word	0x20000ca4

08005060 <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	6039      	str	r1, [r7, #0]
 800506a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d032      	beq.n	80050d8 <cfg_NodeRcVarSet+0x78>
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	2b09      	cmp	r3, #9
 8005076:	d82c      	bhi.n	80050d2 <cfg_NodeRcVarSet+0x72>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <cfg_NodeRcVarSet+0x20>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b7 	.word	0x080050b7
 8005088:	080050c5 	.word	0x080050c5
 800508c:	080050d7 	.word	0x080050d7
 8005090:	080050d7 	.word	0x080050d7
 8005094:	080050d7 	.word	0x080050d7
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050d7 	.word	0x080050d7
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050d7 	.word	0x080050d7
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <cfg_NodeRcVarSet+0x88>)
 80050b0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 80050b4:	e010      	b.n	80050d8 <cfg_NodeRcVarSet+0x78>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <cfg_NodeRcVarSet+0x88>)
 80050be:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80050c2:	e009      	b.n	80050d8 <cfg_NodeRcVarSet+0x78>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <cfg_NodeRcVarSet+0x88>)
 80050cc:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80050d0:	e002      	b.n	80050d8 <cfg_NodeRcVarSet+0x78>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 80050d2:	2302      	movs	r3, #2
 80050d4:	e001      	b.n	80050da <cfg_NodeRcVarSet+0x7a>
		case RC_RX_PKT_CNT:			break;
 80050d6:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000ca4 	.word	0x20000ca4

080050ec <sens_Timer>:
void sens_SetAccelRange(uint8_t range);

volatile sens_infoTypeDef sens_info;

void sens_Timer(uint32_t res)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
#ifdef NO_SENS
	return;
#endif //NO_SENS

	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e010      	b.n	800511c <sens_Timer+0x30>
	{
		if( sens_info.timer[i] > 0 ){
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <sens_Timer+0x44>)
 80050fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <sens_Timer+0x2a>
			sens_info.timer[i]--;
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <sens_Timer+0x44>)
 800510a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800510e:	3a01      	subs	r2, #1
 8005110:	4907      	ldr	r1, [pc, #28]	; (8005130 <sens_Timer+0x44>)
 8005112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3301      	adds	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0eb      	beq.n	80050fa <sens_Timer+0xe>
		}
	}

	return;
 8005122:	bf00      	nop
}
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000e5c 	.word	0x20000e5c

08005134 <sens_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_InitTask()
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	//Init state
	sens_info.state = 0;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <sens_InitTask+0x14>)
 800513a:	2200      	movs	r2, #0
 800513c:	711a      	strb	r2, [r3, #4]

	return;
 800513e:	bf00      	nop
}
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	20000e5c 	.word	0x20000e5c

0800514c <sens_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_Task(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	uint16_t t_cal_step = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	80fb      	strh	r3, [r7, #6]

	//Reset
	if( sens_info.state == 0 )
 8005156:	4b43      	ldr	r3, [pc, #268]	; (8005264 <sens_Task+0x118>)
 8005158:	791b      	ldrb	r3, [r3, #4]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <sens_Task+0x2a>
	{
		sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 8005160:	2180      	movs	r1, #128	; 0x80
 8005162:	206b      	movs	r0, #107	; 0x6b
 8005164:	f000 fa58 	bl	8005618 <sens_WriteByte>
		sens_info.timer[SENS_TMR_PROC] = 100;
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <sens_Task+0x118>)
 800516a:	2264      	movs	r2, #100	; 0x64
 800516c:	601a      	str	r2, [r3, #0]
		sens_info.state = 1;
 800516e:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <sens_Task+0x118>)
 8005170:	2201      	movs	r2, #1
 8005172:	711a      	strb	r2, [r3, #4]
			sens_info.timer[SENS_TMR_PROC] = 1;
			sens_UpdData();
		}
	}

	return;
 8005174:	e072      	b.n	800525c <sens_Task+0x110>
	else if( sens_info.state == 1 )
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <sens_Task+0x118>)
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d124      	bne.n	80051ca <sens_Task+0x7e>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <sens_Task+0x118>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d169      	bne.n	800525c <sens_Task+0x110>
			sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x00);
 8005188:	2100      	movs	r1, #0
 800518a:	206b      	movs	r0, #107	; 0x6b
 800518c:	f000 fa44 	bl	8005618 <sens_WriteByte>
			sens_SetGyroRange(GYRO_RANGE_250DPS);
 8005190:	2000      	movs	r0, #0
 8005192:	f000 f8c3 	bl	800531c <sens_SetGyroRange>
			sens_SetAccelRange(ACCEL_RANGE_2G);
 8005196:	2000      	movs	r0, #0
 8005198:	f000 f8d4 	bl	8005344 <sens_SetAccelRange>
			sens_WriteByte(SENS_REG_CONFIG, 0x00);
 800519c:	2100      	movs	r1, #0
 800519e:	201a      	movs	r0, #26
 80051a0:	f000 fa3a 	bl	8005618 <sens_WriteByte>
			t_cal_step = SENS_CAL_STEP_NUM;
 80051a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051a8:	80fb      	strh	r3, [r7, #6]
			sens_info.gyro_x_bias = 0.0;
 80051aa:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <sens_Task+0x118>)
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	615a      	str	r2, [r3, #20]
			sens_info.gyro_y_bias = 0.0;
 80051b2:	4b2c      	ldr	r3, [pc, #176]	; (8005264 <sens_Task+0x118>)
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	619a      	str	r2, [r3, #24]
			sens_info.gyro_z_bias = 0.0;
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <sens_Task+0x118>)
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
			sens_info.state = 2;
 80051c2:	4b28      	ldr	r3, [pc, #160]	; (8005264 <sens_Task+0x118>)
 80051c4:	2202      	movs	r2, #2
 80051c6:	711a      	strb	r2, [r3, #4]
	return;
 80051c8:	e048      	b.n	800525c <sens_Task+0x110>
	else if( sens_info.state == 2 )
 80051ca:	4b26      	ldr	r3, [pc, #152]	; (8005264 <sens_Task+0x118>)
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d134      	bne.n	800523e <sens_Task+0xf2>
		if( t_cal_step > 0 )
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <sens_Task+0xa8>
			if( sens_info.timer[SENS_TMR_PROC] == 0 )
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <sens_Task+0x118>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d13c      	bne.n	800525c <sens_Task+0x110>
				sens_CalibrateStep();
 80051e2:	f000 f843 	bl	800526c <sens_CalibrateStep>
				t_cal_step -= 1;
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	80fb      	strh	r3, [r7, #6]
				sens_info.timer[SENS_TMR_PROC] = 1;
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <sens_Task+0x118>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
	return;
 80051f2:	e033      	b.n	800525c <sens_Task+0x110>
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <sens_Task+0x118>)
 80051f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80051fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8005268 <sens_Task+0x11c>
 80051fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <sens_Task+0x118>)
 8005204:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <sens_Task+0x118>)
 800520a:	ed93 7a05 	vldr	s14, [r3, #20]
 800520e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005268 <sens_Task+0x11c>
 8005212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <sens_Task+0x118>)
 8005218:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <sens_Task+0x118>)
 800521e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005222:	eddf 6a11 	vldr	s13, [pc, #68]	; 8005268 <sens_Task+0x11c>
 8005226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800522a:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <sens_Task+0x118>)
 800522c:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.timer[SENS_TMR_PROC] = 1;
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <sens_Task+0x118>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
			sens_info.state = 3;
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <sens_Task+0x118>)
 8005238:	2203      	movs	r2, #3
 800523a:	711a      	strb	r2, [r3, #4]
	return;
 800523c:	e00e      	b.n	800525c <sens_Task+0x110>
	else if( sens_info.state == 3 )
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <sens_Task+0x118>)
 8005240:	791b      	ldrb	r3, [r3, #4]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b03      	cmp	r3, #3
 8005246:	d109      	bne.n	800525c <sens_Task+0x110>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <sens_Task+0x118>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <sens_Task+0x110>
			sens_info.timer[SENS_TMR_PROC] = 1;
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <sens_Task+0x118>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
			sens_UpdData();
 8005256:	f000 f88b 	bl	8005370 <sens_UpdData>
	return;
 800525a:	bf00      	nop
 800525c:	bf00      	nop
}
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000e5c 	.word	0x20000e5c
 8005268:	447a0000 	.word	0x447a0000

0800526c <sens_CalibrateStep>:

//
void sens_CalibrateStep()
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    int16_t gyroX, gyroY, gyroZ;

	HAL_I2C_Mem_Read(&hi2c1, SENS_I2C_ADDR, SENS_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
 8005272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	2306      	movs	r3, #6
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2301      	movs	r3, #1
 8005282:	2243      	movs	r2, #67	; 0x43
 8005284:	21d0      	movs	r1, #208	; 0xd0
 8005286:	4823      	ldr	r0, [pc, #140]	; (8005314 <sens_CalibrateStep+0xa8>)
 8005288:	f002 ffa8 	bl	80081dc <HAL_I2C_Mem_Read>
	gyroX = (int16_t)(buffer[0] << 8 | buffer[1]);
 800528c:	793b      	ldrb	r3, [r7, #4]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	b21a      	sxth	r2, r3
 8005292:	797b      	ldrb	r3, [r7, #5]
 8005294:	b21b      	sxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	81fb      	strh	r3, [r7, #14]
	gyroY = (int16_t)(buffer[2] << 8 | buffer[3]);
 800529a:	79bb      	ldrb	r3, [r7, #6]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	b21a      	sxth	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	b21b      	sxth	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	81bb      	strh	r3, [r7, #12]
	gyroZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 80052a8:	7a3b      	ldrb	r3, [r7, #8]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	b21a      	sxth	r2, r3
 80052ae:	7a7b      	ldrb	r3, [r7, #9]
 80052b0:	b21b      	sxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	817b      	strh	r3, [r7, #10]

	sens_info.gyro_x_bias += gyroX;
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <sens_CalibrateStep+0xac>)
 80052b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80052bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <sens_CalibrateStep+0xac>)
 80052ce:	edc3 7a05 	vstr	s15, [r3, #20]
	sens_info.gyro_y_bias += gyroY;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <sens_CalibrateStep+0xac>)
 80052d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80052d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <sens_CalibrateStep+0xac>)
 80052ea:	edc3 7a06 	vstr	s15, [r3, #24]
	sens_info.gyro_z_bias += gyroZ;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <sens_CalibrateStep+0xac>)
 80052f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80052f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <sens_CalibrateStep+0xac>)
 8005306:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000958 	.word	0x20000958
 8005318:	20000e5c 	.word	0x20000e5c

0800531c <sens_SetGyroRange>:

//
void sens_SetGyroRange(uint8_t range)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
	sens_info.gyro_range = range;
 8005326:	4a06      	ldr	r2, [pc, #24]	; (8005340 <sens_SetGyroRange+0x24>)
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	7153      	strb	r3, [r2, #5]
	sens_WriteByte(SENS_REG_GYRO_CONFIG, range);
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	4619      	mov	r1, r3
 8005330:	201b      	movs	r0, #27
 8005332:	f000 f971 	bl	8005618 <sens_WriteByte>

    return;
 8005336:	bf00      	nop
}
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000e5c 	.word	0x20000e5c

08005344 <sens_SetAccelRange>:

//
void sens_SetAccelRange(uint8_t range)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
	sens_info.accel_range = range;
 800534e:	4a06      	ldr	r2, [pc, #24]	; (8005368 <sens_SetAccelRange+0x24>)
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	f882 3020 	strb.w	r3, [r2, #32]
	sens_WriteByte(SENS_REG_ACCEL_CONFIG, range);
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	4619      	mov	r1, r3
 800535a:	201c      	movs	r0, #28
 800535c:	f000 f95c 	bl	8005618 <sens_WriteByte>

    return;
 8005360:	bf00      	nop
}
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000e5c 	.word	0x20000e5c
 800536c:	00000000 	.word	0x00000000

08005370 <sens_UpdData>:

//
HAL_StatusTypeDef sens_UpdData()
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
    uint8_t buf[14];
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_ACCEL_XOUT_H, buf, 14);
 8005376:	463b      	mov	r3, r7
 8005378:	220e      	movs	r2, #14
 800537a:	4619      	mov	r1, r3
 800537c:	203b      	movs	r0, #59	; 0x3b
 800537e:	f000 f967 	bl	8005650 <sens_Read>
 8005382:	4603      	mov	r3, r0
 8005384:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <sens_UpdData+0x20>
        return status;
 800538c:	7ffb      	ldrb	r3, [r7, #31]
 800538e:	e12e      	b.n	80055ee <sens_UpdData+0x27e>
    }

    int16_t raw_accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8005390:	783b      	ldrb	r3, [r7, #0]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	b21a      	sxth	r2, r3
 8005396:	787b      	ldrb	r3, [r7, #1]
 8005398:	b21b      	sxth	r3, r3
 800539a:	4313      	orrs	r3, r2
 800539c:	83bb      	strh	r3, [r7, #28]
    int16_t raw_accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 800539e:	78bb      	ldrb	r3, [r7, #2]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	b21b      	sxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	837b      	strh	r3, [r7, #26]
    int16_t raw_accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 80053ac:	793b      	ldrb	r3, [r7, #4]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	b21a      	sxth	r2, r3
 80053b2:	797b      	ldrb	r3, [r7, #5]
 80053b4:	b21b      	sxth	r3, r3
 80053b6:	4313      	orrs	r3, r2
 80053b8:	833b      	strh	r3, [r7, #24]
    int16_t raw_temp = (int16_t)(buf[6] << 8 | buf[7]);
 80053ba:	79bb      	ldrb	r3, [r7, #6]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b21a      	sxth	r2, r3
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_x = (int16_t)(buf[8] << 8 | buf[9]);
 80053c8:	7a3b      	ldrb	r3, [r7, #8]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	b21a      	sxth	r2, r3
 80053ce:	7a7b      	ldrb	r3, [r7, #9]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	82bb      	strh	r3, [r7, #20]
    int16_t raw_gyro_y = (int16_t)(buf[10] << 8 | buf[11]);
 80053d6:	7abb      	ldrb	r3, [r7, #10]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	b21a      	sxth	r2, r3
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	b21b      	sxth	r3, r3
 80053e0:	4313      	orrs	r3, r2
 80053e2:	827b      	strh	r3, [r7, #18]
    int16_t raw_gyro_z = (int16_t)(buf[12] << 8 | buf[13]);
 80053e4:	7b3b      	ldrb	r3, [r7, #12]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	7b7b      	ldrb	r3, [r7, #13]
 80053ec:	b21b      	sxth	r3, r3
 80053ee:	4313      	orrs	r3, r2
 80053f0:	823b      	strh	r3, [r7, #16]

    float gyro_sens;
    float accel_sens;

    switch (sens_info.gyro_range) {
 80053f2:	4b83      	ldr	r3, [pc, #524]	; (8005600 <sens_UpdData+0x290>)
 80053f4:	795b      	ldrb	r3, [r3, #5]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b18      	cmp	r3, #24
 80053fa:	d841      	bhi.n	8005480 <sens_UpdData+0x110>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <sens_UpdData+0x94>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005469 	.word	0x08005469
 8005408:	08005481 	.word	0x08005481
 800540c:	08005481 	.word	0x08005481
 8005410:	08005481 	.word	0x08005481
 8005414:	08005481 	.word	0x08005481
 8005418:	08005481 	.word	0x08005481
 800541c:	08005481 	.word	0x08005481
 8005420:	08005481 	.word	0x08005481
 8005424:	0800546f 	.word	0x0800546f
 8005428:	08005481 	.word	0x08005481
 800542c:	08005481 	.word	0x08005481
 8005430:	08005481 	.word	0x08005481
 8005434:	08005481 	.word	0x08005481
 8005438:	08005481 	.word	0x08005481
 800543c:	08005481 	.word	0x08005481
 8005440:	08005481 	.word	0x08005481
 8005444:	08005475 	.word	0x08005475
 8005448:	08005481 	.word	0x08005481
 800544c:	08005481 	.word	0x08005481
 8005450:	08005481 	.word	0x08005481
 8005454:	08005481 	.word	0x08005481
 8005458:	08005481 	.word	0x08005481
 800545c:	08005481 	.word	0x08005481
 8005460:	08005481 	.word	0x08005481
 8005464:	0800547b 	.word	0x0800547b
        case GYRO_RANGE_250DPS:
            gyro_sens = GYRO_SENS_250DPS;
 8005468:	4b66      	ldr	r3, [pc, #408]	; (8005604 <sens_UpdData+0x294>)
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800546c:	e008      	b.n	8005480 <sens_UpdData+0x110>
        case GYRO_RANGE_500DPS:
            gyro_sens = GYRO_SENS_500DPS;
 800546e:	4b66      	ldr	r3, [pc, #408]	; (8005608 <sens_UpdData+0x298>)
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005472:	e005      	b.n	8005480 <sens_UpdData+0x110>
        case GYRO_RANGE_1000DPS:
            gyro_sens = GYRO_SENS_1000DPS;
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <sens_UpdData+0x29c>)
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005478:	e002      	b.n	8005480 <sens_UpdData+0x110>
        case GYRO_RANGE_2000DPS:
            gyro_sens = GYRO_SENS_2000DPS;
 800547a:	4b65      	ldr	r3, [pc, #404]	; (8005610 <sens_UpdData+0x2a0>)
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800547e:	bf00      	nop
    }
    switch (sens_info.accel_range) {
 8005480:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <sens_UpdData+0x290>)
 8005482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b18      	cmp	r3, #24
 800548a:	d845      	bhi.n	8005518 <sens_UpdData+0x1a8>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <sens_UpdData+0x124>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054f9 	.word	0x080054f9
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005519 	.word	0x08005519
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005501 	.word	0x08005501
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005519 	.word	0x08005519
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005519 	.word	0x08005519
 80054ec:	08005519 	.word	0x08005519
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005511 	.word	0x08005511
        case ACCEL_RANGE_2G:
            accel_sens = ACCEL_SENS_2G;
 80054f8:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80054fc:	623b      	str	r3, [r7, #32]
            break;
 80054fe:	e00b      	b.n	8005518 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_4G:
            accel_sens = ACCEL_SENS_4G;
 8005500:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8005504:	623b      	str	r3, [r7, #32]
            break;
 8005506:	e007      	b.n	8005518 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_8G:
            accel_sens = ACCEL_SENS_8G;
 8005508:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800550c:	623b      	str	r3, [r7, #32]
            break;
 800550e:	e003      	b.n	8005518 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_16G:
            accel_sens = ACCEL_SENS_16G;
 8005510:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005514:	623b      	str	r3, [r7, #32]
            break;
 8005516:	bf00      	nop
    }

    sens_info.accel_x = raw_accel_x / accel_sens; // g
 8005518:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005524:	ed97 7a08 	vldr	s14, [r7, #32]
 8005528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <sens_UpdData+0x290>)
 800552e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    sens_info.accel_y = raw_accel_y / accel_sens; // g
 8005532:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800553e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <sens_UpdData+0x290>)
 8005548:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    sens_info.accel_z = raw_accel_z / accel_sens; // g
 800554c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005558:	ed97 7a08 	vldr	s14, [r7, #32]
 800555c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005560:	4b27      	ldr	r3, [pc, #156]	; (8005600 <sens_UpdData+0x290>)
 8005562:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    sens_info.gyro_x = raw_gyro_x / gyro_sens; // °/s
 8005566:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005572:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557a:	4b21      	ldr	r3, [pc, #132]	; (8005600 <sens_UpdData+0x290>)
 800557c:	edc3 7a02 	vstr	s15, [r3, #8]
    sens_info.gyro_y = raw_gyro_y / gyro_sens; // °/s
 8005580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800558c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <sens_UpdData+0x290>)
 8005596:	edc3 7a03 	vstr	s15, [r3, #12]
    sens_info.gyro_z = raw_gyro_z / gyro_sens; // °/s
 800559a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80055aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <sens_UpdData+0x290>)
 80055b0:	edc3 7a04 	vstr	s15, [r3, #16]
    sens_info.temperature = (raw_temp / 340.0) + 36.53; // °C
 80055b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fa ff67 	bl	800048c <__aeabi_i2d>
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <sens_UpdData+0x2a4>)
 80055c4:	f7fb f8f6 	bl	80007b4 <__aeabi_ddiv>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	a309      	add	r3, pc, #36	; (adr r3, 80055f8 <sens_UpdData+0x288>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fe0d 	bl	80001f4 <__adddf3>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7fb f9cf 	bl	8000984 <__aeabi_d2f>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4a05      	ldr	r2, [pc, #20]	; (8005600 <sens_UpdData+0x290>)
 80055ea:	6313      	str	r3, [r2, #48]	; 0x30

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3728      	adds	r7, #40	; 0x28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	0a3d70a4 	.word	0x0a3d70a4
 80055fc:	404243d7 	.word	0x404243d7
 8005600:	20000e5c 	.word	0x20000e5c
 8005604:	43030000 	.word	0x43030000
 8005608:	42830000 	.word	0x42830000
 800560c:	42033333 	.word	0x42033333
 8005610:	41833333 	.word	0x41833333
 8005614:	40754000 	.word	0x40754000

08005618 <sens_WriteByte>:

void sens_WriteByte(uint8_t reg, uint8_t data)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af04      	add	r7, sp, #16
 800561e:	4603      	mov	r3, r0
 8005620:	460a      	mov	r2, r1
 8005622:	71fb      	strb	r3, [r7, #7]
 8005624:	4613      	mov	r3, r2
 8005626:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	b29a      	uxth	r2, r3
 800562c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005630:	9302      	str	r3, [sp, #8]
 8005632:	2301      	movs	r3, #1
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	1dbb      	adds	r3, r7, #6
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	2301      	movs	r3, #1
 800563c:	21d0      	movs	r1, #208	; 0xd0
 800563e:	4803      	ldr	r0, [pc, #12]	; (800564c <sens_WriteByte+0x34>)
 8005640:	f002 fcd2 	bl	8007fe8 <HAL_I2C_Mem_Write>

    return;
 8005644:	bf00      	nop
}
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000958 	.word	0x20000958

08005650 <sens_Read>:

HAL_StatusTypeDef sens_Read(uint8_t reg, uint8_t* data, uint16_t size)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af04      	add	r7, sp, #16
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	71fb      	strb	r3, [r7, #7]
 800565c:	4613      	mov	r3, r2
 800565e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	b29a      	uxth	r2, r3
 8005664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	88bb      	ldrh	r3, [r7, #4]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2301      	movs	r3, #1
 8005674:	21d0      	movs	r1, #208	; 0xd0
 8005676:	4807      	ldr	r0, [pc, #28]	; (8005694 <sens_Read+0x44>)
 8005678:	f002 fdb0 	bl	80081dc <HAL_I2C_Mem_Read>
 800567c:	4603      	mov	r3, r0
 800567e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <sens_Read+0x3a>
		return status;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	e000      	b.n	800568c <sens_Read+0x3c>
	}

    return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000958 	.word	0x20000958

08005698 <cfg_NodeSensVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeSensVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	d844      	bhi.n	8005736 <cfg_NodeSensVarProp+0x9e>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <cfg_NodeSensVarProp+0x1c>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	080056ef 	.word	0x080056ef
 80056bc:	080056f5 	.word	0x080056f5
 80056c0:	080056fb 	.word	0x080056fb
 80056c4:	08005701 	.word	0x08005701
 80056c8:	08005707 	.word	0x08005707
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	08005713 	.word	0x08005713
 80056d4:	08005719 	.word	0x08005719
 80056d8:	0800571f 	.word	0x0800571f
 80056dc:	08005725 	.word	0x08005725
 80056e0:	0800572b 	.word	0x0800572b
 80056e4:	08005731 	.word	0x08005731
	{
		case SENS_STATE:		str = "State"; break;
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <cfg_NodeSensVarProp+0x18c>)
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e025      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_X:		str = "Gyro X"; break;
 80056ee:	4b4e      	ldr	r3, [pc, #312]	; (8005828 <cfg_NodeSensVarProp+0x190>)
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e022      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Y:		str = "Gyro Y"; break;
 80056f4:	4b4d      	ldr	r3, [pc, #308]	; (800582c <cfg_NodeSensVarProp+0x194>)
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e01f      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Z:		str = "Gyro Z"; break;
 80056fa:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <cfg_NodeSensVarProp+0x198>)
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e01c      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_X:		str = "Accel X"; break;
 8005700:	4b4c      	ldr	r3, [pc, #304]	; (8005834 <cfg_NodeSensVarProp+0x19c>)
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e019      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Y:		str = "Accel Y"; break;
 8005706:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <cfg_NodeSensVarProp+0x1a0>)
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e016      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Z:		str = "Accel Z"; break;
 800570c:	4b4b      	ldr	r3, [pc, #300]	; (800583c <cfg_NodeSensVarProp+0x1a4>)
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e013      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_TEMPERATURE:	str = "Temperature"; break;
 8005712:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <cfg_NodeSensVarProp+0x1a8>)
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e010      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_SAT_NUM:		str = "GNSS sat number"; break;
 8005718:	4b4a      	ldr	r3, [pc, #296]	; (8005844 <cfg_NodeSensVarProp+0x1ac>)
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e00d      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_LATITUDE:		str = "GNSS latitude"; break;
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <cfg_NodeSensVarProp+0x1b0>)
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e00a      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_LONGITUDE:	str = "GNSS longitude"; break;
 8005724:	4b49      	ldr	r3, [pc, #292]	; (800584c <cfg_NodeSensVarProp+0x1b4>)
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e007      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ALTTITUDE:	str = "GNSS altitude"; break;
 800572a:	4b49      	ldr	r3, [pc, #292]	; (8005850 <cfg_NodeSensVarProp+0x1b8>)
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e004      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_SPEED:		str = "GNSS speed"; break;
 8005730:	4b48      	ldr	r3, [pc, #288]	; (8005854 <cfg_NodeSensVarProp+0x1bc>)
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e001      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		default: return CFG_ERROR_VARID;
 8005736:	2302      	movs	r3, #2
 8005738:	e06d      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <cfg_NodeSensVarProp+0xc8>
 8005740:	e007      	b.n	8005752 <cfg_NodeSensVarProp+0xba>
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	1c53      	adds	r3, r2, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f3      	bne.n	8005742 <cfg_NodeSensVarProp+0xaa>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d056      	beq.n	8005814 <cfg_NodeSensVarProp+0x17c>
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	d851      	bhi.n	8005810 <cfg_NodeSensVarProp+0x178>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <cfg_NodeSensVarProp+0xdc>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080057b1 	.word	0x080057b1
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057c1 	.word	0x080057c1
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057d9 	.word	0x080057d9
 8005790:	080057e1 	.word	0x080057e1
 8005794:	080057e9 	.word	0x080057e9
 8005798:	080057f1 	.word	0x080057f1
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	08005801 	.word	0x08005801
 80057a4:	08005809 	.word	0x08005809
	{
		case SENS_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e031      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2214      	movs	r2, #20
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e02d      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2214      	movs	r2, #20
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e029      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2214      	movs	r2, #20
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e025      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2214      	movs	r2, #20
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e021      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2214      	movs	r2, #20
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	e01d      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2214      	movs	r2, #20
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e019      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_TEMPERATURE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2214      	movs	r2, #20
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e015      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_SAT_NUM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2212      	movs	r2, #18
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e011      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_LATITUDE:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2211      	movs	r2, #17
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e00d      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_LONGITUDE:	*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2211      	movs	r2, #17
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e009      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_ALTTITUDE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2214      	movs	r2, #20
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e005      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		case SENS_SPEED:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2211      	movs	r2, #17
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e001      	b.n	8005814 <cfg_NodeSensVarProp+0x17c>
		default: return CFG_ERROR_VARID;
 8005810:	2302      	movs	r3, #2
 8005812:	e000      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
	}
	return CFG_ERROR_NONE;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	080110e8 	.word	0x080110e8
 8005828:	080110f0 	.word	0x080110f0
 800582c:	080110f8 	.word	0x080110f8
 8005830:	08011100 	.word	0x08011100
 8005834:	08011108 	.word	0x08011108
 8005838:	08011110 	.word	0x08011110
 800583c:	08011118 	.word	0x08011118
 8005840:	08011120 	.word	0x08011120
 8005844:	0801112c 	.word	0x0801112c
 8005848:	0801113c 	.word	0x0801113c
 800584c:	0801114c 	.word	0x0801114c
 8005850:	0801115c 	.word	0x0801115c
 8005854:	0801116c 	.word	0x0801116c

08005858 <cfg_NodeSensVarGet>:

uint16_t cfg_NodeSensVarGet(uint16_t varid, void *value)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	6039      	str	r1, [r7, #0]
 8005862:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d068      	beq.n	800593c <cfg_NodeSensVarGet+0xe4>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d863      	bhi.n	8005938 <cfg_NodeSensVarGet+0xe0>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <cfg_NodeSensVarGet+0x20>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058bb 	.word	0x080058bb
 8005880:	080058c5 	.word	0x080058c5
 8005884:	080058cf 	.word	0x080058cf
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058e3 	.word	0x080058e3
 8005890:	080058ed 	.word	0x080058ed
 8005894:	080058f7 	.word	0x080058f7
 8005898:	08005901 	.word	0x08005901
 800589c:	08005911 	.word	0x08005911
 80058a0:	0800591b 	.word	0x0800591b
 80058a4:	08005925 	.word	0x08005925
 80058a8:	0800592f 	.word	0x0800592f
	{
		case SENS_STATE:		*(uint32_t*)value = sens_info.state; break;
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e040      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_X:		*(float*)value = sens_info.gyro_x; break;
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e03b      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Y:		*(float*)value = sens_info.gyro_y; break;
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e036      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Z:		*(float*)value = sens_info.gyro_z; break;
 80058ce:	4b1f      	ldr	r3, [pc, #124]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e031      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_X:		*(float*)value = sens_info.accel_x; break;
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e02c      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Y:		*(float*)value = sens_info.accel_y; break;
 80058e2:	4b1a      	ldr	r3, [pc, #104]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e027      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Z:		*(float*)value = sens_info.accel_z; break;
 80058ec:	4b17      	ldr	r3, [pc, #92]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e022      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_TEMPERATURE:	*(float*)value = sens_info.temperature; break;
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e01d      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_SAT_NUM:		*(int32_t*)value = sens_info.sat_num; break;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005906:	b2db      	uxtb	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e015      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_LATITUDE:		*(int32_t*)value = sens_info.latitude; break;
 8005910:	4b0e      	ldr	r3, [pc, #56]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e010      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_LONGITUDE:	*(int32_t*)value = sens_info.longitude; break;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 800591c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e00b      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_ALTTITUDE:	*(float*)value = sens_info.altitude; break;
 8005924:	4b09      	ldr	r3, [pc, #36]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e006      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		case SENS_SPEED:		*(int32_t*)value = sens_info.speed; break;
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e001      	b.n	800593c <cfg_NodeSensVarGet+0xe4>
		default: return CFG_ERROR_VARID;
 8005938:	2302      	movs	r3, #2
 800593a:	e000      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
	}
	return CFG_ERROR_NONE;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000e5c 	.word	0x20000e5c

08005950 <cfg_NodeSensVarSet>:

uint16_t cfg_NodeSensVarSet(uint16_t varid, void *value)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <cfg_NodeSensVarSet+0x28>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <cfg_NodeSensVarSet+0x24>
	{
		case SENS_STATE:		sens_info.state = (uint8_t)*(uint32_t*)value; break;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <cfg_NodeSensVarSet+0x38>)
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	e001      	b.n	8005978 <cfg_NodeSensVarSet+0x28>
		default: return CFG_ERROR_VARID;
 8005974:	2302      	movs	r3, #2
 8005976:	e000      	b.n	800597a <cfg_NodeSensVarSet+0x2a>
	}
	return CFG_ERROR_NONE;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000e5c 	.word	0x20000e5c

0800598c <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e014      	b.n	80059c4 <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <servo_Timer+0x4c>)
 800599e:	330c      	adds	r3, #12
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <servo_Timer+0x32>
			servo_info.timer[i]--;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	490b      	ldr	r1, [pc, #44]	; (80059d8 <servo_Timer+0x4c>)
 80059ac:	f103 020c 	add.w	r2, r3, #12
 80059b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059b4:	3a01      	subs	r2, #1
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <servo_Timer+0x4c>)
 80059b8:	330c      	adds	r3, #12
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3301      	adds	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0e7      	beq.n	800599a <servo_Timer+0xe>
		}
	}

	return;
 80059ca:	bf00      	nop
}
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000eb0 	.word	0x20000eb0

080059dc <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 80059e2:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <servo_InitTask+0xfc>)
 80059e4:	4a3d      	ldr	r2, [pc, #244]	; (8005adc <servo_InitTask+0x100>)
 80059e6:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 80059e8:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <servo_InitTask+0xfc>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 80059ee:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <servo_InitTask+0xfc>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 80059f4:	4b38      	ldr	r3, [pc, #224]	; (8005ad8 <servo_InitTask+0xfc>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 80059fa:	4b37      	ldr	r3, [pc, #220]	; (8005ad8 <servo_InitTask+0xfc>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 80;
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a02:	2250      	movs	r2, #80	; 0x50
 8005a04:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 100;
 8005a06:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a08:	2264      	movs	r2, #100	; 0x64
 8005a0a:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 125;
 8005a0c:	4b32      	ldr	r3, [pc, #200]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a0e:	227d      	movs	r2, #125	; 0x7d
 8005a10:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 8005a12:	4b31      	ldr	r3, [pc, #196]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 8005a18:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a1a:	4a30      	ldr	r2, [pc, #192]	; (8005adc <servo_InitTask+0x100>)
 8005a1c:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a20:	2204      	movs	r2, #4
 8005a22:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 8005a24:	4b2c      	ldr	r3, [pc, #176]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 8005a2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 8005a30:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 45;
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a3a:	222d      	movs	r2, #45	; 0x2d
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 8005a3e:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a40:	225a      	movs	r2, #90	; 0x5a
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 125;
 8005a44:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a46:	227d      	movs	r2, #125	; 0x7d
 8005a48:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 8005a4a:	4b23      	ldr	r3, [pc, #140]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8005a52:	2300      	movs	r3, #0
 8005a54:	71fb      	strb	r3, [r7, #7]
 8005a56:	e02a      	b.n	8005aae <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 8005a58:	79fa      	ldrb	r2, [r7, #7]
 8005a5a:	491f      	ldr	r1, [pc, #124]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	330a      	adds	r3, #10
 8005a68:	2200      	movs	r2, #0
 8005a6a:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 8005a6c:	79fa      	ldrb	r2, [r7, #7]
 8005a6e:	491a      	ldr	r1, [pc, #104]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	4915      	ldr	r1, [pc, #84]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	440b      	add	r3, r1
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	4911      	ldr	r1, [pc, #68]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f005 f92e 	bl	800ad04 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	71fb      	strb	r3, [r7, #7]
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d9d1      	bls.n	8005a58 <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <servo_InitTask+0xfc>)
 8005ab6:	8a5b      	ldrh	r3, [r3, #18]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4619      	mov	r1, r3
 8005abc:	2000      	movs	r0, #0
 8005abe:	f000 f82b 	bl	8005b18 <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <servo_InitTask+0xfc>)
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2001      	movs	r0, #1
 8005acc:	f000 f824 	bl	8005b18 <servo_setAng>

	return;
 8005ad0:	bf00      	nop
}
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000eb0 	.word	0x20000eb0
 8005adc:	200009ac 	.word	0x200009ac

08005ae0 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 8005ae4:	bf00      	nop
}
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	461a      	mov	r2, r3
 8005afc:	0052      	lsls	r2, r2, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	33f5      	adds	r3, #245	; 0xf5
 8005b06:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 8005b08:	89fb      	ldrh	r3, [r7, #14]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460a      	mov	r2, r1
 8005b22:	71fb      	strb	r3, [r7, #7]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	f200 809f 	bhi.w	8005c6e <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 8005b30:	79fa      	ldrb	r2, [r7, #7]
 8005b32:	4952      	ldr	r1, [pc, #328]	; (8005c7c <servo_setAng+0x164>)
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	330c      	adds	r3, #12
 8005b40:	88ba      	ldrh	r2, [r7, #4]
 8005b42:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 8005b44:	79fc      	ldrb	r4, [r7, #7]
 8005b46:	88bb      	ldrh	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff ffd0 	bl	8005aee <servo_angToPWM>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4619      	mov	r1, r3
 8005b52:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <servo_setAng+0x164>)
 8005b54:	4623      	mov	r3, r4
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4423      	add	r3, r4
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	330a      	adds	r3, #10
 8005b60:	460a      	mov	r2, r1
 8005b62:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 8005b64:	79fa      	ldrb	r2, [r7, #7]
 8005b66:	4945      	ldr	r1, [pc, #276]	; (8005c7c <servo_setAng+0x164>)
 8005b68:	4613      	mov	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	440b      	add	r3, r1
 8005b72:	3308      	adds	r3, #8
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d17a      	bne.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005b7c:	79fa      	ldrb	r2, [r7, #7]
 8005b7e:	493f      	ldr	r1, [pc, #252]	; (8005c7c <servo_setAng+0x164>)
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d115      	bne.n	8005bbe <servo_setAng+0xa6>
 8005b92:	79fa      	ldrb	r2, [r7, #7]
 8005b94:	4939      	ldr	r1, [pc, #228]	; (8005c7c <servo_setAng+0x164>)
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	330a      	adds	r3, #10
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b298      	uxth	r0, r3
 8005ba6:	79fa      	ldrb	r2, [r7, #7]
 8005ba8:	4934      	ldr	r1, [pc, #208]	; (8005c7c <servo_setAng+0x164>)
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	440b      	add	r3, r1
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4602      	mov	r2, r0
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8005bbc:	e059      	b.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	492e      	ldr	r1, [pc, #184]	; (8005c7c <servo_setAng+0x164>)
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	440b      	add	r3, r1
 8005bcc:	3304      	adds	r3, #4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d115      	bne.n	8005c00 <servo_setAng+0xe8>
 8005bd4:	79fa      	ldrb	r2, [r7, #7]
 8005bd6:	4929      	ldr	r1, [pc, #164]	; (8005c7c <servo_setAng+0x164>)
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	440b      	add	r3, r1
 8005be2:	330a      	adds	r3, #10
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b298      	uxth	r0, r3
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	4924      	ldr	r1, [pc, #144]	; (8005c7c <servo_setAng+0x164>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	440b      	add	r3, r1
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005bfe:	e038      	b.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005c00:	79fa      	ldrb	r2, [r7, #7]
 8005c02:	491e      	ldr	r1, [pc, #120]	; (8005c7c <servo_setAng+0x164>)
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3304      	adds	r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d115      	bne.n	8005c42 <servo_setAng+0x12a>
 8005c16:	79fa      	ldrb	r2, [r7, #7]
 8005c18:	4918      	ldr	r1, [pc, #96]	; (8005c7c <servo_setAng+0x164>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	330a      	adds	r3, #10
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b298      	uxth	r0, r3
 8005c2a:	79fa      	ldrb	r2, [r7, #7]
 8005c2c:	4913      	ldr	r1, [pc, #76]	; (8005c7c <servo_setAng+0x164>)
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005c40:	e017      	b.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005c42:	79fa      	ldrb	r2, [r7, #7]
 8005c44:	490d      	ldr	r1, [pc, #52]	; (8005c7c <servo_setAng+0x164>)
 8005c46:	4613      	mov	r3, r2
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	440b      	add	r3, r1
 8005c50:	330a      	adds	r3, #10
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b298      	uxth	r0, r3
 8005c56:	79fa      	ldrb	r2, [r7, #7]
 8005c58:	4908      	ldr	r1, [pc, #32]	; (8005c7c <servo_setAng+0x164>)
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	440b      	add	r3, r1
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005c6c:	e001      	b.n	8005c72 <servo_setAng+0x15a>
		return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <servo_setAng+0x15c>
	return;
 8005c72:	bf00      	nop
}
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd90      	pop	{r4, r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000eb0 	.word	0x20000eb0

08005c80 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	4603      	mov	r3, r0
 8005c88:	460a      	mov	r2, r1
 8005c8a:	71fb      	strb	r3, [r7, #7]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d854      	bhi.n	8005d40 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 8005c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c9a:	2b64      	cmp	r3, #100	; 0x64
 8005c9c:	dc52      	bgt.n	8005d44 <servo_setPercnet+0xc4>
 8005c9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ca2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8005ca6:	db4d      	blt.n	8005d44 <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 8005ca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	db1f      	blt.n	8005cf0 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005cb0:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8005cb4:	79fa      	ldrb	r2, [r7, #7]
 8005cb6:	4925      	ldr	r1, [pc, #148]	; (8005d4c <servo_setPercnet+0xcc>)
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3312      	adds	r3, #18
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005cc8:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 8005cca:	79fa      	ldrb	r2, [r7, #7]
 8005ccc:	491f      	ldr	r1, [pc, #124]	; (8005d4c <servo_setPercnet+0xcc>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3314      	adds	r3, #20
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	2264      	movs	r2, #100	; 0x64
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f000 f929 	bl	8005f3c <servo_map>
 8005cea:	4603      	mov	r3, r0
 8005cec:	81fb      	strh	r3, [r7, #14]
 8005cee:	e020      	b.n	8005d32 <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005cf0:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8005cf4:	79fa      	ldrb	r2, [r7, #7]
 8005cf6:	4915      	ldr	r1, [pc, #84]	; (8005d4c <servo_setPercnet+0xcc>)
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	440b      	add	r3, r1
 8005d02:	3312      	adds	r3, #18
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005d08:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 8005d0a:	79fa      	ldrb	r2, [r7, #7]
 8005d0c:	490f      	ldr	r1, [pc, #60]	; (8005d4c <servo_setPercnet+0xcc>)
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	440b      	add	r3, r1
 8005d18:	3310      	adds	r3, #16
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4623      	mov	r3, r4
 8005d22:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005d26:	f04f 31ff 	mov.w	r1, #4294967295
 8005d2a:	f000 f907 	bl	8005f3c <servo_map>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 8005d32:	89fa      	ldrh	r2, [r7, #14]
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff feed 	bl	8005b18 <servo_setAng>

	return;
 8005d3e:	e002      	b.n	8005d46 <servo_setPercnet+0xc6>
		return;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <servo_setPercnet+0xc6>
		return;
 8005d44:	bf00      	nop
}
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd90      	pop	{r4, r7, pc}
 8005d4c:	20000eb0 	.word	0x20000eb0

08005d50 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	460a      	mov	r2, r1
 8005d5a:	71fb      	strb	r3, [r7, #7]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	f200 80e1 	bhi.w	8005f2a <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 8005d68:	79fa      	ldrb	r2, [r7, #7]
 8005d6a:	4973      	ldr	r1, [pc, #460]	; (8005f38 <servo_setEnable+0x1e8>)
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	440b      	add	r3, r1
 8005d76:	3308      	adds	r3, #8
 8005d78:	79ba      	ldrb	r2, [r7, #6]
 8005d7a:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 8005d7c:	79fa      	ldrb	r2, [r7, #7]
 8005d7e:	496e      	ldr	r1, [pc, #440]	; (8005f38 <servo_setEnable+0x1e8>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d178      	bne.n	8005e86 <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005d94:	79fa      	ldrb	r2, [r7, #7]
 8005d96:	4968      	ldr	r1, [pc, #416]	; (8005f38 <servo_setEnable+0x1e8>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	440b      	add	r3, r1
 8005da2:	3304      	adds	r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d115      	bne.n	8005dd6 <servo_setEnable+0x86>
 8005daa:	79fa      	ldrb	r2, [r7, #7]
 8005dac:	4962      	ldr	r1, [pc, #392]	; (8005f38 <servo_setEnable+0x1e8>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	440b      	add	r3, r1
 8005db8:	330a      	adds	r3, #10
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b298      	uxth	r0, r3
 8005dbe:	79fa      	ldrb	r2, [r7, #7]
 8005dc0:	495d      	ldr	r1, [pc, #372]	; (8005f38 <servo_setEnable+0x1e8>)
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 8005dd4:	e0aa      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005dd6:	79fa      	ldrb	r2, [r7, #7]
 8005dd8:	4957      	ldr	r1, [pc, #348]	; (8005f38 <servo_setEnable+0x1e8>)
 8005dda:	4613      	mov	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4413      	add	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	440b      	add	r3, r1
 8005de4:	3304      	adds	r3, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d115      	bne.n	8005e18 <servo_setEnable+0xc8>
 8005dec:	79fa      	ldrb	r2, [r7, #7]
 8005dee:	4952      	ldr	r1, [pc, #328]	; (8005f38 <servo_setEnable+0x1e8>)
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	440b      	add	r3, r1
 8005dfa:	330a      	adds	r3, #10
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	79fa      	ldrb	r2, [r7, #7]
 8005e02:	494d      	ldr	r1, [pc, #308]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4603      	mov	r3, r0
 8005e14:	6393      	str	r3, [r2, #56]	; 0x38
 8005e16:	e087      	b.n	8005f28 <servo_setEnable+0x1d8>
 8005e18:	79fa      	ldrb	r2, [r7, #7]
 8005e1a:	4947      	ldr	r1, [pc, #284]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	440b      	add	r3, r1
 8005e26:	3304      	adds	r3, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d115      	bne.n	8005e5a <servo_setEnable+0x10a>
 8005e2e:	79fa      	ldrb	r2, [r7, #7]
 8005e30:	4941      	ldr	r1, [pc, #260]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	330a      	adds	r3, #10
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b298      	uxth	r0, r3
 8005e42:	79fa      	ldrb	r2, [r7, #7]
 8005e44:	493c      	ldr	r1, [pc, #240]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	440b      	add	r3, r1
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4603      	mov	r3, r0
 8005e56:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005e58:	e066      	b.n	8005f28 <servo_setEnable+0x1d8>
 8005e5a:	79fa      	ldrb	r2, [r7, #7]
 8005e5c:	4936      	ldr	r1, [pc, #216]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	330a      	adds	r3, #10
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b298      	uxth	r0, r3
 8005e6e:	79fa      	ldrb	r2, [r7, #7]
 8005e70:	4931      	ldr	r1, [pc, #196]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	440b      	add	r3, r1
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4603      	mov	r3, r0
 8005e82:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005e84:	e052      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005e86:	79fa      	ldrb	r2, [r7, #7]
 8005e88:	492b      	ldr	r1, [pc, #172]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	440b      	add	r3, r1
 8005e94:	3304      	adds	r3, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <servo_setEnable+0x164>
 8005e9c:	79fa      	ldrb	r2, [r7, #7]
 8005e9e:	4926      	ldr	r1, [pc, #152]	; (8005f38 <servo_setEnable+0x1e8>)
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	440b      	add	r3, r1
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8005eb2:	e03b      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005eb4:	79fa      	ldrb	r2, [r7, #7]
 8005eb6:	4920      	ldr	r1, [pc, #128]	; (8005f38 <servo_setEnable+0x1e8>)
 8005eb8:	4613      	mov	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	4413      	add	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d10b      	bne.n	8005ee2 <servo_setEnable+0x192>
 8005eca:	79fa      	ldrb	r2, [r7, #7]
 8005ecc:	491a      	ldr	r1, [pc, #104]	; (8005f38 <servo_setEnable+0x1e8>)
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	440b      	add	r3, r1
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	2300      	movs	r3, #0
 8005ede:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005ee0:	e024      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005ee2:	79fa      	ldrb	r2, [r7, #7]
 8005ee4:	4914      	ldr	r1, [pc, #80]	; (8005f38 <servo_setEnable+0x1e8>)
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	440b      	add	r3, r1
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d10b      	bne.n	8005f10 <servo_setEnable+0x1c0>
 8005ef8:	79fa      	ldrb	r2, [r7, #7]
 8005efa:	490f      	ldr	r1, [pc, #60]	; (8005f38 <servo_setEnable+0x1e8>)
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	440b      	add	r3, r1
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005f0e:	e00d      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005f10:	79fa      	ldrb	r2, [r7, #7]
 8005f12:	4909      	ldr	r1, [pc, #36]	; (8005f38 <servo_setEnable+0x1e8>)
 8005f14:	4613      	mov	r3, r2
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4413      	add	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	440b      	add	r3, r1
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005f26:	e001      	b.n	8005f2c <servo_setEnable+0x1dc>
 8005f28:	e000      	b.n	8005f2c <servo_setEnable+0x1dc>
		return;
 8005f2a:	bf00      	nop
}
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000eb0 	.word	0x20000eb0

08005f3c <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	1a8a      	subs	r2, r1, r2
 8005f56:	fb03 f202 	mul.w	r2, r3, r2
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	1acb      	subs	r3, r1, r3
 8005f60:	fb92 f2f3 	sdiv	r2, r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4413      	add	r3, r2
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8005f82:	89fb      	ldrh	r3, [r7, #14]
 8005f84:	2b0d      	cmp	r3, #13
 8005f86:	d849      	bhi.n	800601c <cfg_NodeServoVarProp+0xa8>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <cfg_NodeServoVarProp+0x1c>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fc9 	.word	0x08005fc9
 8005f94:	08005fcf 	.word	0x08005fcf
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe7 	.word	0x08005fe7
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005ff3 	.word	0x08005ff3
 8005fb0:	08005ff9 	.word	0x08005ff9
 8005fb4:	08005fff 	.word	0x08005fff
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	0800600b 	.word	0x0800600b
 8005fc0:	08006011 	.word	0x08006011
 8005fc4:	08006017 	.word	0x08006017
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 8005fc8:	4b52      	ldr	r3, [pc, #328]	; (8006114 <cfg_NodeServoVarProp+0x1a0>)
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e028      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 8005fce:	4b52      	ldr	r3, [pc, #328]	; (8006118 <cfg_NodeServoVarProp+0x1a4>)
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e025      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 8005fd4:	4b51      	ldr	r3, [pc, #324]	; (800611c <cfg_NodeServoVarProp+0x1a8>)
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e022      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 8005fda:	4b51      	ldr	r3, [pc, #324]	; (8006120 <cfg_NodeServoVarProp+0x1ac>)
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e01f      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 8005fe0:	4b50      	ldr	r3, [pc, #320]	; (8006124 <cfg_NodeServoVarProp+0x1b0>)
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e01c      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 8005fe6:	4b50      	ldr	r3, [pc, #320]	; (8006128 <cfg_NodeServoVarProp+0x1b4>)
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e019      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 8005fec:	4b4f      	ldr	r3, [pc, #316]	; (800612c <cfg_NodeServoVarProp+0x1b8>)
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e016      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 8005ff2:	4b4f      	ldr	r3, [pc, #316]	; (8006130 <cfg_NodeServoVarProp+0x1bc>)
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e013      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <cfg_NodeServoVarProp+0x1c0>)
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e010      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 8005ffe:	4b4e      	ldr	r3, [pc, #312]	; (8006138 <cfg_NodeServoVarProp+0x1c4>)
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e00d      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 8006004:	4b4d      	ldr	r3, [pc, #308]	; (800613c <cfg_NodeServoVarProp+0x1c8>)
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e00a      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 800600a:	4b4d      	ldr	r3, [pc, #308]	; (8006140 <cfg_NodeServoVarProp+0x1cc>)
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e007      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <cfg_NodeServoVarProp+0x1d0>)
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e004      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 8006016:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <cfg_NodeServoVarProp+0x1d4>)
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e001      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 800601c:	2302      	movs	r3, #2
 800601e:	e072      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00f      	beq.n	8006046 <cfg_NodeServoVarProp+0xd2>
 8006026:	e007      	b.n	8006038 <cfg_NodeServoVarProp+0xc4>
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	1c53      	adds	r3, r2, #1
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f3      	bne.n	8006028 <cfg_NodeServoVarProp+0xb4>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05b      	beq.n	8006104 <cfg_NodeServoVarProp+0x190>
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	2b0d      	cmp	r3, #13
 8006050:	d856      	bhi.n	8006100 <cfg_NodeServoVarProp+0x18c>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <cfg_NodeServoVarProp+0xe4>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006091 	.word	0x08006091
 800605c:	08006099 	.word	0x08006099
 8006060:	080060a1 	.word	0x080060a1
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c9 	.word	0x080060c9
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060d9 	.word	0x080060d9
 8006080:	080060e1 	.word	0x080060e1
 8006084:	080060e9 	.word	0x080060e9
 8006088:	080060f1 	.word	0x080060f1
 800608c:	080060f9 	.word	0x080060f9
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2223      	movs	r2, #35	; 0x23
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e035      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	e031      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2212      	movs	r2, #18
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e02d      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e029      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2222      	movs	r2, #34	; 0x22
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e025      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2222      	movs	r2, #34	; 0x22
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	e021      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2222      	movs	r2, #34	; 0x22
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	e01d      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2223      	movs	r2, #35	; 0x23
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e019      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	e015      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2212      	movs	r2, #18
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	e011      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e00d      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2222      	movs	r2, #34	; 0x22
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e009      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2222      	movs	r2, #34	; 0x22
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e005      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2222      	movs	r2, #34	; 0x22
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e001      	b.n	8006104 <cfg_NodeServoVarProp+0x190>
		default: return CFG_ERROR_VARID;
 8006100:	2302      	movs	r3, #2
 8006102:	e000      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
	}
	return CFG_ERROR_NONE;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	08011178 	.word	0x08011178
 8006118:	08011184 	.word	0x08011184
 800611c:	08011198 	.word	0x08011198
 8006120:	080111ac 	.word	0x080111ac
 8006124:	080111c0 	.word	0x080111c0
 8006128:	080111d0 	.word	0x080111d0
 800612c:	080111e4 	.word	0x080111e4
 8006130:	080111f4 	.word	0x080111f4
 8006134:	08011204 	.word	0x08011204
 8006138:	08011218 	.word	0x08011218
 800613c:	0801122c 	.word	0x0801122c
 8006140:	08011240 	.word	0x08011240
 8006144:	08011250 	.word	0x08011250
 8006148:	08011264 	.word	0x08011264

0800614c <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 808a 	beq.w	8006274 <cfg_NodeServoVarGet+0x128>
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	2b0d      	cmp	r3, #13
 8006164:	f200 8084 	bhi.w	8006270 <cfg_NodeServoVarGet+0x124>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <cfg_NodeServoVarGet+0x24>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	080061a9 	.word	0x080061a9
 8006174:	080061b7 	.word	0x080061b7
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061d3 	.word	0x080061d3
 8006180:	080061e1 	.word	0x080061e1
 8006184:	080061ef 	.word	0x080061ef
 8006188:	080061fd 	.word	0x080061fd
 800618c:	0800620b 	.word	0x0800620b
 8006190:	0800621b 	.word	0x0800621b
 8006194:	08006229 	.word	0x08006229
 8006198:	08006237 	.word	0x08006237
 800619c:	08006247 	.word	0x08006247
 80061a0:	08006255 	.word	0x08006255
 80061a4:	08006263 	.word	0x08006263
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 80061a8:	4b36      	ldr	r3, [pc, #216]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061aa:	7a1b      	ldrb	r3, [r3, #8]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e05e      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 80061b6:	4b33      	ldr	r3, [pc, #204]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061b8:	899b      	ldrh	r3, [r3, #12]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e057      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 80061c4:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061c6:	895b      	ldrh	r3, [r3, #10]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e050      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061d4:	7b9b      	ldrb	r3, [r3, #14]
 80061d6:	b25b      	sxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e049      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061e2:	8a1b      	ldrh	r3, [r3, #16]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e042      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 80061ee:	4b25      	ldr	r3, [pc, #148]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061f0:	8a5b      	ldrh	r3, [r3, #18]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e03b      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 80061fc:	4b21      	ldr	r3, [pc, #132]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061fe:	8a9b      	ldrh	r3, [r3, #20]
 8006200:	b29b      	uxth	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e034      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 800620a:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 800620c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e02c      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 800621c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e025      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 800622a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e01e      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006238:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800623c:	b25b      	sxtb	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e016      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e00f      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e008      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e001      	b.n	8006274 <cfg_NodeServoVarGet+0x128>
		default: return CFG_ERROR_VARID;
 8006270:	2302      	movs	r3, #2
 8006272:	e000      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
	}
	return CFG_ERROR_NONE;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000eb0 	.word	0x20000eb0

08006288 <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	6039      	str	r1, [r7, #0]
 8006292:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d079      	beq.n	800638e <cfg_NodeServoVarSet+0x106>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b0d      	cmp	r3, #13
 800629e:	d873      	bhi.n	8006388 <cfg_NodeServoVarSet+0x100>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <cfg_NodeServoVarSet+0x20>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062e1 	.word	0x080062e1
 80062ac:	080062f1 	.word	0x080062f1
 80062b0:	0800638d 	.word	0x0800638d
 80062b4:	08006301 	.word	0x08006301
 80062b8:	08006311 	.word	0x08006311
 80062bc:	0800631d 	.word	0x0800631d
 80062c0:	08006329 	.word	0x08006329
 80062c4:	08006335 	.word	0x08006335
 80062c8:	08006345 	.word	0x08006345
 80062cc:	0800638d 	.word	0x0800638d
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006365 	.word	0x08006365
 80062d8:	08006371 	.word	0x08006371
 80062dc:	0800637d 	.word	0x0800637d
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	4619      	mov	r1, r3
 80062e8:	2000      	movs	r0, #0
 80062ea:	f7ff fd31 	bl	8005d50 <servo_setEnable>
 80062ee:	e04e      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4619      	mov	r1, r3
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7ff fc0d 	bl	8005b18 <servo_setAng>
 80062fe:	e046      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b25b      	sxtb	r3, r3
 8006306:	4619      	mov	r1, r3
 8006308:	2000      	movs	r0, #0
 800630a:	f7ff fcb9 	bl	8005c80 <servo_setPercnet>
 800630e:	e03e      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	b29a      	uxth	r2, r3
 8006316:	4b20      	ldr	r3, [pc, #128]	; (8006398 <cfg_NodeServoVarSet+0x110>)
 8006318:	821a      	strh	r2, [r3, #16]
 800631a:	e038      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	b29a      	uxth	r2, r3
 8006322:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <cfg_NodeServoVarSet+0x110>)
 8006324:	825a      	strh	r2, [r3, #18]
 8006326:	e032      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <cfg_NodeServoVarSet+0x110>)
 8006330:	829a      	strh	r2, [r3, #20]
 8006332:	e02c      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	2001      	movs	r0, #1
 800633e:	f7ff fd07 	bl	8005d50 <servo_setEnable>
 8006342:	e024      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4619      	mov	r1, r3
 800634c:	2001      	movs	r0, #1
 800634e:	f7ff fbe3 	bl	8005b18 <servo_setAng>
 8006352:	e01c      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	4619      	mov	r1, r3
 800635c:	2001      	movs	r0, #1
 800635e:	f7ff fc8f 	bl	8005c80 <servo_setPercnet>
 8006362:	e014      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b29a      	uxth	r2, r3
 800636a:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <cfg_NodeServoVarSet+0x110>)
 800636c:	851a      	strh	r2, [r3, #40]	; 0x28
 800636e:	e00e      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	b29a      	uxth	r2, r3
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <cfg_NodeServoVarSet+0x110>)
 8006378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800637a:	e008      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	b29a      	uxth	r2, r3
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <cfg_NodeServoVarSet+0x110>)
 8006384:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006386:	e002      	b.n	800638e <cfg_NodeServoVarSet+0x106>
		default: return CFG_ERROR_VARID;
 8006388:	2302      	movs	r3, #2
 800638a:	e001      	b.n	8006390 <cfg_NodeServoVarSet+0x108>
		case SERVO_ROLL_CUR_PWM:			break;
 800638c:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000eb0 	.word	0x20000eb0

0800639c <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 80063a4:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <system_Timer+0x84>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	4a1c      	ldr	r2, [pc, #112]	; (8006420 <system_Timer+0x84>)
 80063ae:	6013      	str	r3, [r2, #0]
	//leds_Timer(res);
	cfg_Timer(res);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fb fc03 	bl	8001bbc <cfg_Timer>
	modem_Timer(res);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fd fc78 	bl	8003cac <modem_Timer>
	servo_Timer(res);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fae5 	bl	800598c <servo_Timer>
	motor_Timer(res);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fd ff64 	bl	8004290 <motor_Timer>
	rc_Timer(res);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fe fb25 	bl	8004a18 <rc_Timer>
	battery_Timer(res);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fa fff0 	bl	80013b4 <battery_Timer>
	autopilot_Timer(res);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fa fca3 	bl	8000d20 <autopilot_Timer>
	sens_Timer(res);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fe fe86 	bl	80050ec <sens_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
 80063e4:	e014      	b.n	8006410 <system_Timer+0x74>
	{
		if( system_info.timer[i] != 0 ){
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	4a0e      	ldr	r2, [pc, #56]	; (8006424 <system_Timer+0x88>)
 80063ea:	3312      	adds	r3, #18
 80063ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <system_Timer+0x6e>
			system_info.timer[i]--;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	490b      	ldr	r1, [pc, #44]	; (8006424 <system_Timer+0x88>)
 80063f8:	f103 0212 	add.w	r2, r3, #18
 80063fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006400:	3a01      	subs	r2, #1
 8006402:	4908      	ldr	r1, [pc, #32]	; (8006424 <system_Timer+0x88>)
 8006404:	3312      	adds	r3, #18
 8006406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	3301      	adds	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d9e7      	bls.n	80063e6 <system_Timer+0x4a>
		}
	}
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000f40 	.word	0x20000f40
 8006424:	20000ef0 	.word	0x20000ef0

08006428 <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 800642c:	4b11      	ldr	r3, [pc, #68]	; (8006474 <system_Init+0x4c>)
 800642e:	2200      	movs	r2, #0
 8006430:	705a      	strb	r2, [r3, #1]
	//leds_InitTask();

	modem_InitTask();
 8006432:	f7fd fc5f 	bl	8003cf4 <modem_InitTask>
	servo_InitTask();
 8006436:	f7ff fad1 	bl	80059dc <servo_InitTask>
	motor_InitTask();
 800643a:	f7fd ff53 	bl	80042e4 <motor_InitTask>
	rc_InitTask();
 800643e:	f7fe fb0f 	bl	8004a60 <rc_InitTask>
	sens_InitTask();
 8006442:	f7fe fe77 	bl	8005134 <sens_InitTask>
	battery_InitTask(10000);
 8006446:	f242 7010 	movw	r0, #10000	; 0x2710
 800644a:	f7fa ffd1 	bl	80013f0 <battery_InitTask>
	autopilot_InitTask();
 800644e:	f7fa fc8b 	bl	8000d68 <autopilot_InitTask>
	cfg_InitTask();
 8006452:	f7fb fbe9 	bl	8001c28 <cfg_InitTask>
	system_info.usb_rx_flag = 0;
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <system_Init+0x4c>)
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800645e:	2201      	movs	r2, #1
 8006460:	4905      	ldr	r1, [pc, #20]	; (8006478 <system_Init+0x50>)
 8006462:	4806      	ldr	r0, [pc, #24]	; (800647c <system_Init+0x54>)
 8006464:	f005 fab2 	bl	800b9cc <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 8006468:	4805      	ldr	r0, [pc, #20]	; (8006480 <system_Init+0x58>)
 800646a:	f000 fa03 	bl	8006874 <HAL_ADC_Start_IT>
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000ef0 	.word	0x20000ef0
 8006478:	20000f44 	.word	0x20000f44
 800647c:	200009f4 	.word	0x200009f4
 8006480:	20000910 	.word	0x20000910

08006484 <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
	uint32_t i;

	//leds_Task();
	cfg_Task();
 800648a:	f7fb fc33 	bl	8001cf4 <cfg_Task>
	modem_Task();
 800648e:	f7fd fc53 	bl	8003d38 <modem_Task>
	motor_Task();
 8006492:	f7fd ff73 	bl	800437c <motor_Task>
	servo_Task();
 8006496:	f7ff fb23 	bl	8005ae0 <servo_Task>
	rc_Task();
 800649a:	f7fe fb09 	bl	8004ab0 <rc_Task>
	sens_Task();
 800649e:	f7fe fe55 	bl	800514c <sens_Task>
	battery_Task();
 80064a2:	f7fa ffc1 	bl	8001428 <battery_Task>
	autopilot_Task();
 80064a6:	f7fa fcb1 	bl	8000e0c <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <system_Task+0xe8>)
 80064ac:	789b      	ldrb	r3, [r3, #2]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d109      	bne.n	80064c8 <system_Task+0x44>
 80064b4:	4b2d      	ldr	r3, [pc, #180]	; (800656c <system_Task+0xe8>)
 80064b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <system_Task+0x44>
	{
		system_info.adc_cplt = 0;
 80064bc:	4b2b      	ldr	r3, [pc, #172]	; (800656c <system_Task+0xe8>)
 80064be:	2200      	movs	r2, #0
 80064c0:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 80064c2:	482b      	ldr	r0, [pc, #172]	; (8006570 <system_Task+0xec>)
 80064c4:	f000 f9d6 	bl	8006874 <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 80064c8:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <system_Task+0xf0>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10f      	bne.n	80064f2 <system_Task+0x6e>
	{
		_system_restart_uart = 0;
 80064d2:	4b28      	ldr	r3, [pc, #160]	; (8006574 <system_Task+0xf0>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 80064d8:	f7fd f900 	bl	80036dc <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 80064dc:	2201      	movs	r2, #1
 80064de:	4926      	ldr	r1, [pc, #152]	; (8006578 <system_Task+0xf4>)
 80064e0:	4826      	ldr	r0, [pc, #152]	; (800657c <system_Task+0xf8>)
 80064e2:	f005 fa73 	bl	800b9cc <HAL_UART_Receive_IT>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <system_Task+0x6e>
			_system_restart_uart = 1;
 80064ec:	4b21      	ldr	r3, [pc, #132]	; (8006574 <system_Task+0xf0>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//USB Rx
	if( system_info.usb_rx_flag == 1 )
 80064f2:	4b1e      	ldr	r3, [pc, #120]	; (800656c <system_Task+0xe8>)
 80064f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d118      	bne.n	8006530 <system_Task+0xac>
	{
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	e00c      	b.n	800651e <system_Task+0x9a>
			cfg_RcvData(CFG_IFACE_CH1_USB, system_info.usb_rx_buf[i]);
 8006504:	4a19      	ldr	r2, [pc, #100]	; (800656c <system_Task+0xe8>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	3303      	adds	r3, #3
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	2001      	movs	r0, #1
 8006514:	f7fc f806 	bl	8002524 <cfg_RcvData>
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3301      	adds	r3, #1
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <system_Task+0xe8>)
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d3ed      	bcc.n	8006504 <system_Task+0x80>
		}
		system_info.usb_rx_flag = 0;
 8006528:	4b10      	ldr	r3, [pc, #64]	; (800656c <system_Task+0xe8>)
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}

	//System reset
	if( system_info.reset_req == 1 )
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <system_Task+0xe8>)
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d106      	bne.n	8006548 <system_Task+0xc4>
	{
		system_info.reset_req = 2;
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <system_Task+0xe8>)
 800653c:	2202      	movs	r2, #2
 800653e:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <system_Task+0xe8>)
 8006542:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006546:	649a      	str	r2, [r3, #72]	; 0x48
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 8006548:	4b08      	ldr	r3, [pc, #32]	; (800656c <system_Task+0xe8>)
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d108      	bne.n	8006564 <system_Task+0xe0>
 8006552:	4b06      	ldr	r3, [pc, #24]	; (800656c <system_Task+0xe8>)
 8006554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <system_Task+0xe0>
	{
		system_info.reset_req = 0;
 800655a:	4b04      	ldr	r3, [pc, #16]	; (800656c <system_Task+0xe8>)
 800655c:	2200      	movs	r2, #0
 800655e:	705a      	strb	r2, [r3, #1]
		system_Reset();
 8006560:	f00a fcce 	bl	8010f00 <__system_Reset_veneer>
	}
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000ef0 	.word	0x20000ef0
 8006570:	20000910 	.word	0x20000910
 8006574:	20000f45 	.word	0x20000f45
 8006578:	20000f44 	.word	0x20000f44
 800657c:	200009f4 	.word	0x200009f4

08006580 <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <system_UARTmodemSet115200+0x24>)
 8006586:	f005 fa51 	bl	800ba2c <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 800658a:	4806      	ldr	r0, [pc, #24]	; (80065a4 <system_UARTmodemSet115200+0x24>)
 800658c:	f005 f95d 	bl	800b84a <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 8006590:	f7fd f86e 	bl	8003670 <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 8006594:	2201      	movs	r2, #1
 8006596:	4904      	ldr	r1, [pc, #16]	; (80065a8 <system_UARTmodemSet115200+0x28>)
 8006598:	4802      	ldr	r0, [pc, #8]	; (80065a4 <system_UARTmodemSet115200+0x24>)
 800659a:	f005 fa17 	bl	800b9cc <HAL_UART_Receive_IT>
	return;
 800659e:	bf00      	nop
}
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200009f4 	.word	0x200009f4
 80065a8:	20000f44 	.word	0x20000f44

080065ac <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d112      	bne.n	80065e6 <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	e00a      	b.n	80065dc <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7fb ffa7 	bl	8002524 <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	3301      	adds	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d3f0      	bcc.n	80065c6 <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 80065e4:	e014      	b.n	8006610 <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d111      	bne.n	8006610 <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e009      	b.n	8006606 <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	4413      	add	r3, r2
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fb0c 	bl	8004c18 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3301      	adds	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	429a      	cmp	r2, r3
 800660c:	d3f1      	bcc.n	80065f2 <system_ModemRxCallback+0x46>
	return;
 800660e:	bf00      	nop
 8006610:	bf00      	nop
}
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a14      	ldr	r2, [pc, #80]	; (8006674 <system_ADC_ConvCpltCallback+0x5c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d120      	bne.n	800666a <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 8006628:	4812      	ldr	r0, [pc, #72]	; (8006674 <system_ADC_ConvCpltCallback+0x5c>)
 800662a:	f000 faf1 	bl	8006c10 <HAL_ADC_GetValue>
 800662e:	ee07 0a90 	vmov	s15, r0
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006678 <system_ADC_ConvCpltCallback+0x60>
 800663a:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 800663e:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8006642:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 8006646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664a:	ee17 3a90 	vmov	r3, s15
 800664e:	b29a      	uxth	r2, r3
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <system_ADC_ConvCpltCallback+0x64>)
 8006652:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <system_ADC_ConvCpltCallback+0x64>)
 8006656:	2201      	movs	r2, #1
 8006658:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <system_ADC_ConvCpltCallback+0x68>)
 800665c:	2201      	movs	r2, #1
 800665e:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <system_ADC_ConvCpltCallback+0x68>)
 8006662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006666:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	return;
 8006668:	bf00      	nop
 800666a:	bf00      	nop
}
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000910 	.word	0x20000910
 8006678:	3f4e4ce5 	.word	0x3f4e4ce5
 800667c:	20000288 	.word	0x20000288
 8006680:	20000ef0 	.word	0x20000ef0

08006684 <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a0c      	ldr	r2, [pc, #48]	; (80066c0 <system_UART_RxCpltCallback+0x3c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d110      	bne.n	80066b6 <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <system_UART_RxCpltCallback+0x40>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4618      	mov	r0, r3
 800669c:	f7fd fc64 	bl	8003f68 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 80066a0:	2201      	movs	r2, #1
 80066a2:	4908      	ldr	r1, [pc, #32]	; (80066c4 <system_UART_RxCpltCallback+0x40>)
 80066a4:	4806      	ldr	r0, [pc, #24]	; (80066c0 <system_UART_RxCpltCallback+0x3c>)
 80066a6:	f005 f991 	bl	800b9cc <HAL_UART_Receive_IT>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 80066b0:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <system_UART_RxCpltCallback+0x44>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	200009f4 	.word	0x200009f4
 80066c4:	20000f44 	.word	0x20000f44
 80066c8:	20000f45 	.word	0x20000f45

080066cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80066cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066d0:	480d      	ldr	r0, [pc, #52]	; (8006708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066d2:	490e      	ldr	r1, [pc, #56]	; (800670c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066d4:	4a0e      	ldr	r2, [pc, #56]	; (8006710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066d8:	e002      	b.n	80066e0 <LoopCopyDataInit>

080066da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066de:	3304      	adds	r3, #4

080066e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066e4:	d3f9      	bcc.n	80066da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066e6:	4a0b      	ldr	r2, [pc, #44]	; (8006714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066e8:	4c0b      	ldr	r4, [pc, #44]	; (8006718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066ec:	e001      	b.n	80066f2 <LoopFillZerobss>

080066ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066f0:	3204      	adds	r2, #4

080066f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066f4:	d3fb      	bcc.n	80066ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80066f6:	f7fd fac7 	bl	8003c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066fa:	f00a fbc3 	bl	8010e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066fe:	f7fc fd51 	bl	80031a4 <main>
  bx  lr    
 8006702:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800670c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8006710:	080118e4 	.word	0x080118e4
  ldr r2, =_sbss
 8006714:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8006718:	20002b78 	.word	0x20002b78

0800671c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800671c:	e7fe      	b.n	800671c <DMA1_Stream0_IRQHandler>
	...

08006720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <HAL_Init+0x40>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <HAL_Init+0x40>)
 800672a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800672e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <HAL_Init+0x40>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <HAL_Init+0x40>)
 8006736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800673a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <HAL_Init+0x40>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a07      	ldr	r2, [pc, #28]	; (8006760 <HAL_Init+0x40>)
 8006742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006748:	2003      	movs	r0, #3
 800674a:	f000 fd8c 	bl	8007266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800674e:	200f      	movs	r0, #15
 8006750:	f7fd f9ca 	bl	8003ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006754:	f7fc fff8 	bl	8003748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40023c00 	.word	0x40023c00

08006764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_IncTick+0x20>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <HAL_IncTick+0x24>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4413      	add	r3, r2
 8006774:	4a04      	ldr	r2, [pc, #16]	; (8006788 <HAL_IncTick+0x24>)
 8006776:	6013      	str	r3, [r2, #0]
}
 8006778:	bf00      	nop
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	200000ec 	.word	0x200000ec
 8006788:	20000f48 	.word	0x20000f48

0800678c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return uwTick;
 8006790:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <HAL_GetTick+0x14>)
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	4618      	mov	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000f48 	.word	0x20000f48

080067a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067ac:	f7ff ffee 	bl	800678c <HAL_GetTick>
 80067b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067bc:	d005      	beq.n	80067ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <HAL_Delay+0x44>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067ca:	bf00      	nop
 80067cc:	f7ff ffde 	bl	800678c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d8f7      	bhi.n	80067cc <HAL_Delay+0x28>
  {
  }
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200000ec 	.word	0x200000ec

080067ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e033      	b.n	800686a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fc ffc4 	bl	8003798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	d118      	bne.n	800685c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006832:	f023 0302 	bic.w	r3, r3, #2
 8006836:	f043 0202 	orr.w	r2, r3, #2
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fb3a 	bl	8006eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f023 0303 	bic.w	r3, r3, #3
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
 800685a:	e001      	b.n	8006860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_ADC_Start_IT+0x1a>
 800688a:	2302      	movs	r3, #2
 800688c:	e0a1      	b.n	80069d2 <HAL_ADC_Start_IT+0x15e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d018      	beq.n	80068d6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80068b4:	4b4a      	ldr	r3, [pc, #296]	; (80069e0 <HAL_ADC_Start_IT+0x16c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a4a      	ldr	r2, [pc, #296]	; (80069e4 <HAL_ADC_Start_IT+0x170>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	0c9a      	lsrs	r2, r3, #18
 80068c0:	4613      	mov	r3, r2
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	4413      	add	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80068c8:	e002      	b.n	80068d0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f9      	bne.n	80068ca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d169      	bne.n	80069b8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800690e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800691e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006922:	d106      	bne.n	8006932 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006928:	f023 0206 	bic.w	r2, r3, #6
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	645a      	str	r2, [r3, #68]	; 0x44
 8006930:	e002      	b.n	8006938 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006940:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <HAL_ADC_Start_IT+0x174>)
 8006942:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800694c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800695c:	f043 0320 	orr.w	r3, r3, #32
 8006960:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10f      	bne.n	800698e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d129      	bne.n	80069d0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800698a:	609a      	str	r2, [r3, #8]
 800698c:	e020      	b.n	80069d0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a16      	ldr	r2, [pc, #88]	; (80069ec <HAL_ADC_Start_IT+0x178>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d11b      	bne.n	80069d0 <HAL_ADC_Start_IT+0x15c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d114      	bne.n	80069d0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069b4:	609a      	str	r2, [r3, #8]
 80069b6:	e00b      	b.n	80069d0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	f043 0210 	orr.w	r2, r3, #16
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	f043 0201 	orr.w	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	200000e4 	.word	0x200000e4
 80069e4:	431bde83 	.word	0x431bde83
 80069e8:	40012300 	.word	0x40012300
 80069ec:	40012000 	.word	0x40012000

080069f0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	2300      	movs	r3, #0
 80069fe:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d049      	beq.n	8006aba <HAL_ADC_IRQHandler+0xca>
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d046      	beq.n	8006aba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d12b      	bne.n	8006aaa <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d127      	bne.n	8006aaa <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d006      	beq.n	8006a76 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d119      	bne.n	8006aaa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0220 	bic.w	r2, r2, #32
 8006a84:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f043 0201 	orr.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fc fe22 	bl	80036f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0212 	mvn.w	r2, #18
 8006ab8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d057      	beq.n	8006b80 <HAL_ADC_IRQHandler+0x190>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d054      	beq.n	8006b80 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d139      	bne.n	8006b70 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d12b      	bne.n	8006b70 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d124      	bne.n	8006b70 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11d      	bne.n	8006b70 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d119      	bne.n	8006b70 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	f043 0201 	orr.w	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa9d 	bl	80070b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f06f 020c 	mvn.w	r2, #12
 8006b7e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d017      	beq.n	8006bc6 <HAL_ADC_IRQHandler+0x1d6>
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d014      	beq.n	8006bc6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d10d      	bne.n	8006bc6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f837 	bl	8006c2a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0201 	mvn.w	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bd4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d015      	beq.n	8006c08 <HAL_ADC_IRQHandler+0x218>
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d012      	beq.n	8006c08 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	f043 0202 	orr.w	r2, r3, #2
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f06f 0220 	mvn.w	r2, #32
 8006bf6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f820 	bl	8006c3e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0220 	mvn.w	r2, #32
 8006c06:	601a      	str	r2, [r3, #0]
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_ADC_ConfigChannel+0x1c>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e113      	b.n	8006e98 <HAL_ADC_ConfigChannel+0x244>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	d925      	bls.n	8006ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68d9      	ldr	r1, [r3, #12]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	3b1e      	subs	r3, #30
 8006c96:	2207      	movs	r2, #7
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43da      	mvns	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	400a      	ands	r2, r1
 8006ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68d9      	ldr	r1, [r3, #12]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	4603      	mov	r3, r0
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4403      	add	r3, r0
 8006cbe:	3b1e      	subs	r3, #30
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	e022      	b.n	8006d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6919      	ldr	r1, [r3, #16]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	43da      	mvns	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	400a      	ands	r2, r1
 8006cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6919      	ldr	r1, [r3, #16]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	4603      	mov	r3, r0
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4403      	add	r3, r0
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b06      	cmp	r3, #6
 8006d18:	d824      	bhi.n	8006d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	3b05      	subs	r3, #5
 8006d2c:	221f      	movs	r2, #31
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43da      	mvns	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	400a      	ands	r2, r1
 8006d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	3b05      	subs	r3, #5
 8006d56:	fa00 f203 	lsl.w	r2, r0, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	635a      	str	r2, [r3, #52]	; 0x34
 8006d62:	e04c      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	d824      	bhi.n	8006db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3b23      	subs	r3, #35	; 0x23
 8006d7e:	221f      	movs	r2, #31
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	43da      	mvns	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	3b23      	subs	r3, #35	; 0x23
 8006da8:	fa00 f203 	lsl.w	r2, r0, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
 8006db4:	e023      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3b41      	subs	r3, #65	; 0x41
 8006dc8:	221f      	movs	r2, #31
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4618      	mov	r0, r3
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	3b41      	subs	r3, #65	; 0x41
 8006df2:	fa00 f203 	lsl.w	r2, r0, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dfe:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <HAL_ADC_ConfigChannel+0x250>)
 8006e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a28      	ldr	r2, [pc, #160]	; (8006ea8 <HAL_ADC_ConfigChannel+0x254>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10f      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x1d8>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b12      	cmp	r3, #18
 8006e12:	d10b      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <HAL_ADC_ConfigChannel+0x254>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d12b      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x23a>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <HAL_ADC_ConfigChannel+0x258>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <HAL_ADC_ConfigChannel+0x1f4>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b11      	cmp	r3, #17
 8006e46:	d122      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <HAL_ADC_ConfigChannel+0x258>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d111      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <HAL_ADC_ConfigChannel+0x260>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	0c9a      	lsrs	r2, r3, #18
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e80:	e002      	b.n	8006e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f9      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40012300 	.word	0x40012300
 8006ea8:	40012000 	.word	0x40012000
 8006eac:	10000012 	.word	0x10000012
 8006eb0:	200000e4 	.word	0x200000e4
 8006eb4:	431bde83 	.word	0x431bde83

08006eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ec0:	4b79      	ldr	r3, [pc, #484]	; (80070a8 <ADC_Init+0x1f0>)
 8006ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	021a      	lsls	r2, r3, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6859      	ldr	r1, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6899      	ldr	r1, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	4a58      	ldr	r2, [pc, #352]	; (80070ac <ADC_Init+0x1f4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d022      	beq.n	8006f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6899      	ldr	r1, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	e00f      	b.n	8006fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0202 	bic.w	r2, r2, #2
 8006fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6899      	ldr	r1, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7e1b      	ldrb	r3, [r3, #24]
 8006fd0:	005a      	lsls	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01b      	beq.n	800701c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6859      	ldr	r1, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	3b01      	subs	r3, #1
 8007010:	035a      	lsls	r2, r3, #13
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	e007      	b.n	800702c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800702a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	3b01      	subs	r3, #1
 8007048:	051a      	lsls	r2, r3, #20
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800706e:	025a      	lsls	r2, r3, #9
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6899      	ldr	r1, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	029a      	lsls	r2, r3, #10
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40012300 	.word	0x40012300
 80070ac:	0f000001 	.word	0x0f000001

080070b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <__NVIC_SetPriorityGrouping+0x44>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070e0:	4013      	ands	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070f6:	4a04      	ldr	r2, [pc, #16]	; (8007108 <__NVIC_SetPriorityGrouping+0x44>)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	60d3      	str	r3, [r2, #12]
}
 80070fc:	bf00      	nop
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	e000ed00 	.word	0xe000ed00

0800710c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <__NVIC_GetPriorityGrouping+0x18>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	f003 0307 	and.w	r3, r3, #7
}
 800711a:	4618      	mov	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007136:	2b00      	cmp	r3, #0
 8007138:	db0b      	blt.n	8007152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	f003 021f 	and.w	r2, r3, #31
 8007140:	4907      	ldr	r1, [pc, #28]	; (8007160 <__NVIC_EnableIRQ+0x38>)
 8007142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	2001      	movs	r0, #1
 800714a:	fa00 f202 	lsl.w	r2, r0, r2
 800714e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	e000e100 	.word	0xe000e100

08007164 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800716e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db12      	blt.n	800719c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	f003 021f 	and.w	r2, r3, #31
 800717c:	490a      	ldr	r1, [pc, #40]	; (80071a8 <__NVIC_DisableIRQ+0x44>)
 800717e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	2001      	movs	r0, #1
 8007186:	fa00 f202 	lsl.w	r2, r0, r2
 800718a:	3320      	adds	r3, #32
 800718c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007190:	f3bf 8f4f 	dsb	sy
}
 8007194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007196:	f3bf 8f6f 	isb	sy
}
 800719a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	e000e100 	.word	0xe000e100

080071ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	db0a      	blt.n	80071d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	490c      	ldr	r1, [pc, #48]	; (80071f8 <__NVIC_SetPriority+0x4c>)
 80071c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ca:	0112      	lsls	r2, r2, #4
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	440b      	add	r3, r1
 80071d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071d4:	e00a      	b.n	80071ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	4908      	ldr	r1, [pc, #32]	; (80071fc <__NVIC_SetPriority+0x50>)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	3b04      	subs	r3, #4
 80071e4:	0112      	lsls	r2, r2, #4
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	440b      	add	r3, r1
 80071ea:	761a      	strb	r2, [r3, #24]
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	e000e100 	.word	0xe000e100
 80071fc:	e000ed00 	.word	0xe000ed00

08007200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007200:	b480      	push	{r7}
 8007202:	b089      	sub	sp, #36	; 0x24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f1c3 0307 	rsb	r3, r3, #7
 800721a:	2b04      	cmp	r3, #4
 800721c:	bf28      	it	cs
 800721e:	2304      	movcs	r3, #4
 8007220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	3304      	adds	r3, #4
 8007226:	2b06      	cmp	r3, #6
 8007228:	d902      	bls.n	8007230 <NVIC_EncodePriority+0x30>
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3b03      	subs	r3, #3
 800722e:	e000      	b.n	8007232 <NVIC_EncodePriority+0x32>
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007234:	f04f 32ff 	mov.w	r2, #4294967295
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	43da      	mvns	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	401a      	ands	r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007248:	f04f 31ff 	mov.w	r1, #4294967295
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	fa01 f303 	lsl.w	r3, r1, r3
 8007252:	43d9      	mvns	r1, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007258:	4313      	orrs	r3, r2
         );
}
 800725a:	4618      	mov	r0, r3
 800725c:	3724      	adds	r7, #36	; 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff ff28 	bl	80070c4 <__NVIC_SetPriorityGrouping>
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800728e:	f7ff ff3d 	bl	800710c <__NVIC_GetPriorityGrouping>
 8007292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	6978      	ldr	r0, [r7, #20]
 800729a:	f7ff ffb1 	bl	8007200 <NVIC_EncodePriority>
 800729e:	4602      	mov	r2, r0
 80072a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff ff80 	bl	80071ac <__NVIC_SetPriority>
}
 80072ac:	bf00      	nop
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff ff30 	bl	8007128 <__NVIC_EnableIRQ>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80072da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff ff40 	bl	8007164 <__NVIC_DisableIRQ>
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072fa:	f7ff fa47 	bl	800678c <HAL_GetTick>
 80072fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d008      	beq.n	800731e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2280      	movs	r2, #128	; 0x80
 8007310:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e052      	b.n	80073c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0216 	bic.w	r2, r2, #22
 800732c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800733c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <HAL_DMA_Abort+0x62>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0208 	bic.w	r2, r2, #8
 800735c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800736e:	e013      	b.n	8007398 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007370:	f7ff fa0c 	bl	800678c <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b05      	cmp	r3, #5
 800737c:	d90c      	bls.n	8007398 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2203      	movs	r2, #3
 8007388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e015      	b.n	80073c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e4      	bne.n	8007370 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073aa:	223f      	movs	r2, #63	; 0x3f
 80073ac:	409a      	lsls	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d004      	beq.n	80073ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2280      	movs	r2, #128	; 0x80
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e00c      	b.n	8007404 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2205      	movs	r2, #5
 80073ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0201 	bic.w	r2, r2, #1
 8007400:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007422:	4b23      	ldr	r3, [pc, #140]	; (80074b0 <HAL_FLASH_Program+0xa0>)
 8007424:	7e1b      	ldrb	r3, [r3, #24]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_FLASH_Program+0x1e>
 800742a:	2302      	movs	r3, #2
 800742c:	e03b      	b.n	80074a6 <HAL_FLASH_Program+0x96>
 800742e:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <HAL_FLASH_Program+0xa0>)
 8007430:	2201      	movs	r2, #1
 8007432:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007434:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007438:	f000 f870 	bl	800751c <FLASH_WaitForLastOperation>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d12b      	bne.n	800749e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d105      	bne.n	8007458 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800744c:	783b      	ldrb	r3, [r7, #0]
 800744e:	4619      	mov	r1, r3
 8007450:	68b8      	ldr	r0, [r7, #8]
 8007452:	f000 f91b 	bl	800768c <FLASH_Program_Byte>
 8007456:	e016      	b.n	8007486 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d105      	bne.n	800746a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800745e:	883b      	ldrh	r3, [r7, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	f000 f8ee 	bl	8007644 <FLASH_Program_HalfWord>
 8007468:	e00d      	b.n	8007486 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d105      	bne.n	800747c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	68b8      	ldr	r0, [r7, #8]
 8007476:	f000 f8c3 	bl	8007600 <FLASH_Program_Word>
 800747a:	e004      	b.n	8007486 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800747c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007480:	68b8      	ldr	r0, [r7, #8]
 8007482:	f000 f88b 	bl	800759c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007486:	f24c 3050 	movw	r0, #50000	; 0xc350
 800748a:	f000 f847 	bl	800751c <FLASH_WaitForLastOperation>
 800748e:	4603      	mov	r3, r0
 8007490:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_FLASH_Program+0xa4>)
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	4a07      	ldr	r2, [pc, #28]	; (80074b4 <HAL_FLASH_Program+0xa4>)
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800749e:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <HAL_FLASH_Program+0xa0>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000f4c 	.word	0x20000f4c
 80074b4:	40023c00 	.word	0x40023c00

080074b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <HAL_FLASH_Unlock+0x38>)
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	da0b      	bge.n	80074e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <HAL_FLASH_Unlock+0x38>)
 80074cc:	4a09      	ldr	r2, [pc, #36]	; (80074f4 <HAL_FLASH_Unlock+0x3c>)
 80074ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <HAL_FLASH_Unlock+0x38>)
 80074d2:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <HAL_FLASH_Unlock+0x40>)
 80074d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80074d6:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <HAL_FLASH_Unlock+0x38>)
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da01      	bge.n	80074e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80074e2:	79fb      	ldrb	r3, [r7, #7]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40023c00 	.word	0x40023c00
 80074f4:	45670123 	.word	0x45670123
 80074f8:	cdef89ab 	.word	0xcdef89ab

080074fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <HAL_FLASH_Lock+0x1c>)
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	4a04      	ldr	r2, [pc, #16]	; (8007518 <HAL_FLASH_Lock+0x1c>)
 8007506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800750a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40023c00 	.word	0x40023c00

0800751c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007528:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <FLASH_WaitForLastOperation+0x78>)
 800752a:	2200      	movs	r2, #0
 800752c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800752e:	f7ff f92d 	bl	800678c <HAL_GetTick>
 8007532:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007534:	e010      	b.n	8007558 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d00c      	beq.n	8007558 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d007      	beq.n	8007554 <FLASH_WaitForLastOperation+0x38>
 8007544:	f7ff f922 	bl	800678c <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	429a      	cmp	r2, r3
 8007552:	d201      	bcs.n	8007558 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e019      	b.n	800758c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <FLASH_WaitForLastOperation+0x7c>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e8      	bne.n	8007536 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <FLASH_WaitForLastOperation+0x7c>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <FLASH_WaitForLastOperation+0x7c>)
 8007572:	2201      	movs	r2, #1
 8007574:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <FLASH_WaitForLastOperation+0x7c>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007582:	f000 f8a5 	bl	80076d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
  
}  
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000f4c 	.word	0x20000f4c
 8007598:	40023c00 	.word	0x40023c00

0800759c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <FLASH_Program_DoubleWord+0x60>)
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	4a13      	ldr	r2, [pc, #76]	; (80075fc <FLASH_Program_DoubleWord+0x60>)
 80075ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <FLASH_Program_DoubleWord+0x60>)
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	4a10      	ldr	r2, [pc, #64]	; (80075fc <FLASH_Program_DoubleWord+0x60>)
 80075ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <FLASH_Program_DoubleWord+0x60>)
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <FLASH_Program_DoubleWord+0x60>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80075d2:	f3bf 8f6f 	isb	sy
}
 80075d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80075d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	000a      	movs	r2, r1
 80075e6:	2300      	movs	r3, #0
 80075e8:	68f9      	ldr	r1, [r7, #12]
 80075ea:	3104      	adds	r1, #4
 80075ec:	4613      	mov	r3, r2
 80075ee:	600b      	str	r3, [r1, #0]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40023c00 	.word	0x40023c00

08007600 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800760a:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <FLASH_Program_Word+0x40>)
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	4a0c      	ldr	r2, [pc, #48]	; (8007640 <FLASH_Program_Word+0x40>)
 8007610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <FLASH_Program_Word+0x40>)
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	4a09      	ldr	r2, [pc, #36]	; (8007640 <FLASH_Program_Word+0x40>)
 800761c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007620:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <FLASH_Program_Word+0x40>)
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	4a06      	ldr	r2, [pc, #24]	; (8007640 <FLASH_Program_Word+0x40>)
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40023c00 	.word	0x40023c00

08007644 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007650:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <FLASH_Program_HalfWord+0x44>)
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <FLASH_Program_HalfWord+0x44>)
 8007656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <FLASH_Program_HalfWord+0x44>)
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	4a09      	ldr	r2, [pc, #36]	; (8007688 <FLASH_Program_HalfWord+0x44>)
 8007662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007668:	4b07      	ldr	r3, [pc, #28]	; (8007688 <FLASH_Program_HalfWord+0x44>)
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	4a06      	ldr	r2, [pc, #24]	; (8007688 <FLASH_Program_HalfWord+0x44>)
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	887a      	ldrh	r2, [r7, #2]
 8007678:	801a      	strh	r2, [r3, #0]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40023c00 	.word	0x40023c00

0800768c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007698:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <FLASH_Program_Byte+0x40>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	4a0b      	ldr	r2, [pc, #44]	; (80076cc <FLASH_Program_Byte+0x40>)
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <FLASH_Program_Byte+0x40>)
 80076a6:	4a09      	ldr	r2, [pc, #36]	; (80076cc <FLASH_Program_Byte+0x40>)
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <FLASH_Program_Byte+0x40>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4a06      	ldr	r2, [pc, #24]	; (80076cc <FLASH_Program_Byte+0x40>)
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	701a      	strb	r2, [r3, #0]
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40023c00 	.word	0x40023c00

080076d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80076d4:	4b2f      	ldr	r3, [pc, #188]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80076e0:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	f043 0310 	orr.w	r3, r3, #16
 80076e8:	4a2b      	ldr	r2, [pc, #172]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 80076ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80076ec:	4b29      	ldr	r3, [pc, #164]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 80076ee:	2210      	movs	r2, #16
 80076f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80076f2:	4b28      	ldr	r3, [pc, #160]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80076fe:	4b26      	ldr	r3, [pc, #152]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	f043 0308 	orr.w	r3, r3, #8
 8007706:	4a24      	ldr	r2, [pc, #144]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 8007708:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800770a:	4b22      	ldr	r3, [pc, #136]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 800770c:	2220      	movs	r2, #32
 800770e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007710:	4b20      	ldr	r3, [pc, #128]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d008      	beq.n	800772e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800771c:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f043 0304 	orr.w	r3, r3, #4
 8007724:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 8007726:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007728:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 800772a:	2240      	movs	r2, #64	; 0x40
 800772c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800772e:	4b19      	ldr	r3, [pc, #100]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f043 0302 	orr.w	r3, r3, #2
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 8007744:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 8007748:	2280      	movs	r2, #128	; 0x80
 800774a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800774c:	4b11      	ldr	r3, [pc, #68]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	4a0d      	ldr	r2, [pc, #52]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 8007762:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007764:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 8007766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800776a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d008      	beq.n	800778a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f043 0320 	orr.w	r3, r3, #32
 8007780:	4a05      	ldr	r2, [pc, #20]	; (8007798 <FLASH_SetErrorCode+0xc8>)
 8007782:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007784:	4b03      	ldr	r3, [pc, #12]	; (8007794 <FLASH_SetErrorCode+0xc4>)
 8007786:	2202      	movs	r2, #2
 8007788:	60da      	str	r2, [r3, #12]
  }
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	40023c00 	.word	0x40023c00
 8007798:	20000f4c 	.word	0x20000f4c

0800779c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e010      	b.n	80077da <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d103      	bne.n	80077c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80077be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	e009      	b.n	80077da <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d103      	bne.n	80077d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80077cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e002      	b.n	80077da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80077d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80077da:	4b13      	ldr	r3, [pc, #76]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	4a12      	ldr	r2, [pc, #72]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 80077e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	490f      	ldr	r1, [pc, #60]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80077f2:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 80077f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80077fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4313      	orrs	r3, r2
 8007808:	4a07      	ldr	r2, [pc, #28]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 800780a:	f043 0302 	orr.w	r3, r3, #2
 800780e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	4a04      	ldr	r2, [pc, #16]	; (8007828 <FLASH_Erase_Sector+0x8c>)
 8007816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781a:	6113      	str	r3, [r2, #16]
}
 800781c:	bf00      	nop
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	40023c00 	.word	0x40023c00

0800782c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800782c:	b480      	push	{r7}
 800782e:	b089      	sub	sp, #36	; 0x24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800783e:	2300      	movs	r3, #0
 8007840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	e159      	b.n	8007afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007848:	2201      	movs	r2, #1
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	fa02 f303 	lsl.w	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4013      	ands	r3, r2
 800785a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	429a      	cmp	r2, r3
 8007862:	f040 8148 	bne.w	8007af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	2b01      	cmp	r3, #1
 8007870:	d005      	beq.n	800787e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800787a:	2b02      	cmp	r3, #2
 800787c:	d130      	bne.n	80078e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	2203      	movs	r2, #3
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	43db      	mvns	r3, r3
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	4013      	ands	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	fa02 f303 	lsl.w	r3, r2, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078b4:	2201      	movs	r2, #1
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	091b      	lsrs	r3, r3, #4
 80078ca:	f003 0201 	and.w	r2, r3, #1
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d017      	beq.n	800791c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	2203      	movs	r2, #3
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	43db      	mvns	r3, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4013      	ands	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4313      	orrs	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d123      	bne.n	8007970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	08da      	lsrs	r2, r3, #3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3208      	adds	r2, #8
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	220f      	movs	r2, #15
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	43db      	mvns	r3, r3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4013      	ands	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	4313      	orrs	r3, r2
 8007960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	08da      	lsrs	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3208      	adds	r2, #8
 800796a:	69b9      	ldr	r1, [r7, #24]
 800796c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	2203      	movs	r2, #3
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	43db      	mvns	r3, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4013      	ands	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 0203 	and.w	r2, r3, #3
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	4313      	orrs	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80a2 	beq.w	8007af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
 80079b6:	4b57      	ldr	r3, [pc, #348]	; (8007b14 <HAL_GPIO_Init+0x2e8>)
 80079b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ba:	4a56      	ldr	r2, [pc, #344]	; (8007b14 <HAL_GPIO_Init+0x2e8>)
 80079bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079c0:	6453      	str	r3, [r2, #68]	; 0x44
 80079c2:	4b54      	ldr	r3, [pc, #336]	; (8007b14 <HAL_GPIO_Init+0x2e8>)
 80079c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079ce:	4a52      	ldr	r2, [pc, #328]	; (8007b18 <HAL_GPIO_Init+0x2ec>)
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	089b      	lsrs	r3, r3, #2
 80079d4:	3302      	adds	r3, #2
 80079d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	220f      	movs	r2, #15
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43db      	mvns	r3, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	4013      	ands	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a49      	ldr	r2, [pc, #292]	; (8007b1c <HAL_GPIO_Init+0x2f0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d019      	beq.n	8007a2e <HAL_GPIO_Init+0x202>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a48      	ldr	r2, [pc, #288]	; (8007b20 <HAL_GPIO_Init+0x2f4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_GPIO_Init+0x1fe>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a47      	ldr	r2, [pc, #284]	; (8007b24 <HAL_GPIO_Init+0x2f8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00d      	beq.n	8007a26 <HAL_GPIO_Init+0x1fa>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a46      	ldr	r2, [pc, #280]	; (8007b28 <HAL_GPIO_Init+0x2fc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d007      	beq.n	8007a22 <HAL_GPIO_Init+0x1f6>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a45      	ldr	r2, [pc, #276]	; (8007b2c <HAL_GPIO_Init+0x300>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <HAL_GPIO_Init+0x1f2>
 8007a1a:	2304      	movs	r3, #4
 8007a1c:	e008      	b.n	8007a30 <HAL_GPIO_Init+0x204>
 8007a1e:	2307      	movs	r3, #7
 8007a20:	e006      	b.n	8007a30 <HAL_GPIO_Init+0x204>
 8007a22:	2303      	movs	r3, #3
 8007a24:	e004      	b.n	8007a30 <HAL_GPIO_Init+0x204>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e002      	b.n	8007a30 <HAL_GPIO_Init+0x204>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_GPIO_Init+0x204>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	f002 0203 	and.w	r2, r2, #3
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	4093      	lsls	r3, r2
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a40:	4935      	ldr	r1, [pc, #212]	; (8007b18 <HAL_GPIO_Init+0x2ec>)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	3302      	adds	r3, #2
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a4e:	4b38      	ldr	r3, [pc, #224]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a72:	4a2f      	ldr	r2, [pc, #188]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a78:	4b2d      	ldr	r3, [pc, #180]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4013      	ands	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a9c:	4a24      	ldr	r2, [pc, #144]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007aa2:	4b23      	ldr	r3, [pc, #140]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ac6:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007acc:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007af0:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <HAL_GPIO_Init+0x304>)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	f67f aea2 	bls.w	8007848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40023800 	.word	0x40023800
 8007b18:	40013800 	.word	0x40013800
 8007b1c:	40020000 	.word	0x40020000
 8007b20:	40020400 	.word	0x40020400
 8007b24:	40020800 	.word	0x40020800
 8007b28:	40020c00 	.word	0x40020c00
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40013c00 	.word	0x40013c00

08007b34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	e0bb      	b.n	8007cc8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b50:	2201      	movs	r2, #1
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	f040 80ab 	bne.w	8007cc2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007b6c:	4a5c      	ldr	r2, [pc, #368]	; (8007ce0 <HAL_GPIO_DeInit+0x1ac>)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	089b      	lsrs	r3, r3, #2
 8007b72:	3302      	adds	r3, #2
 8007b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b78:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	220f      	movs	r2, #15
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a54      	ldr	r2, [pc, #336]	; (8007ce4 <HAL_GPIO_DeInit+0x1b0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d019      	beq.n	8007bca <HAL_GPIO_DeInit+0x96>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a53      	ldr	r2, [pc, #332]	; (8007ce8 <HAL_GPIO_DeInit+0x1b4>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_GPIO_DeInit+0x92>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a52      	ldr	r2, [pc, #328]	; (8007cec <HAL_GPIO_DeInit+0x1b8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00d      	beq.n	8007bc2 <HAL_GPIO_DeInit+0x8e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a51      	ldr	r2, [pc, #324]	; (8007cf0 <HAL_GPIO_DeInit+0x1bc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d007      	beq.n	8007bbe <HAL_GPIO_DeInit+0x8a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a50      	ldr	r2, [pc, #320]	; (8007cf4 <HAL_GPIO_DeInit+0x1c0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d101      	bne.n	8007bba <HAL_GPIO_DeInit+0x86>
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	e008      	b.n	8007bcc <HAL_GPIO_DeInit+0x98>
 8007bba:	2307      	movs	r3, #7
 8007bbc:	e006      	b.n	8007bcc <HAL_GPIO_DeInit+0x98>
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e004      	b.n	8007bcc <HAL_GPIO_DeInit+0x98>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e002      	b.n	8007bcc <HAL_GPIO_DeInit+0x98>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <HAL_GPIO_DeInit+0x98>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	f002 0203 	and.w	r2, r2, #3
 8007bd2:	0092      	lsls	r2, r2, #2
 8007bd4:	4093      	lsls	r3, r2
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d132      	bne.n	8007c42 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007bdc:	4b46      	ldr	r3, [pc, #280]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	43db      	mvns	r3, r3
 8007be4:	4944      	ldr	r1, [pc, #272]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007bea:	4b43      	ldr	r3, [pc, #268]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	4941      	ldr	r1, [pc, #260]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007bf8:	4b3f      	ldr	r3, [pc, #252]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	493d      	ldr	r1, [pc, #244]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007c06:	4b3c      	ldr	r3, [pc, #240]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	493a      	ldr	r1, [pc, #232]	; (8007cf8 <HAL_GPIO_DeInit+0x1c4>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	220f      	movs	r2, #15
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007c24:	4a2e      	ldr	r2, [pc, #184]	; (8007ce0 <HAL_GPIO_DeInit+0x1ac>)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	089b      	lsrs	r3, r3, #2
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	43da      	mvns	r2, r3
 8007c34:	482a      	ldr	r0, [pc, #168]	; (8007ce0 <HAL_GPIO_DeInit+0x1ac>)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	089b      	lsrs	r3, r3, #2
 8007c3a:	400a      	ands	r2, r1
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	2103      	movs	r1, #3
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	401a      	ands	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	08da      	lsrs	r2, r3, #3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3208      	adds	r2, #8
 8007c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	220f      	movs	r2, #15
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	43db      	mvns	r3, r3
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	08d2      	lsrs	r2, r2, #3
 8007c78:	4019      	ands	r1, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3208      	adds	r2, #8
 8007c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	2103      	movs	r1, #3
 8007c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca4:	43db      	mvns	r3, r3
 8007ca6:	401a      	ands	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	2103      	movs	r1, #3
 8007cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	401a      	ands	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b0f      	cmp	r3, #15
 8007ccc:	f67f af40 	bls.w	8007b50 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40013800 	.word	0x40013800
 8007ce4:	40020000 	.word	0x40020000
 8007ce8:	40020400 	.word	0x40020400
 8007cec:	40020800 	.word	0x40020800
 8007cf0:	40020c00 	.word	0x40020c00
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	40013c00 	.word	0x40013c00

08007cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	887b      	ldrh	r3, [r7, #2]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d14:	2301      	movs	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	e001      	b.n	8007d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d3c:	787b      	ldrb	r3, [r7, #1]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d42:	887a      	ldrh	r2, [r7, #2]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d48:	e003      	b.n	8007d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	041a      	lsls	r2, r3, #16
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	619a      	str	r2, [r3, #24]
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e12b      	b.n	8007fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fb fd52 	bl	8003830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	; 0x24
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0201 	bic.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f002 fe38 	bl	800aa38 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	4a81      	ldr	r2, [pc, #516]	; (8007fd4 <HAL_I2C_Init+0x274>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d807      	bhi.n	8007de4 <HAL_I2C_Init+0x84>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a80      	ldr	r2, [pc, #512]	; (8007fd8 <HAL_I2C_Init+0x278>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bf94      	ite	ls
 8007ddc:	2301      	movls	r3, #1
 8007dde:	2300      	movhi	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e006      	b.n	8007df2 <HAL_I2C_Init+0x92>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a7d      	ldr	r2, [pc, #500]	; (8007fdc <HAL_I2C_Init+0x27c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bf94      	ite	ls
 8007dec:	2301      	movls	r3, #1
 8007dee:	2300      	movhi	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0e7      	b.n	8007fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4a78      	ldr	r2, [pc, #480]	; (8007fe0 <HAL_I2C_Init+0x280>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0c9b      	lsrs	r3, r3, #18
 8007e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a6a      	ldr	r2, [pc, #424]	; (8007fd4 <HAL_I2C_Init+0x274>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d802      	bhi.n	8007e34 <HAL_I2C_Init+0xd4>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	e009      	b.n	8007e48 <HAL_I2C_Init+0xe8>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	4a69      	ldr	r2, [pc, #420]	; (8007fe4 <HAL_I2C_Init+0x284>)
 8007e40:	fba2 2303 	umull	r2, r3, r2, r3
 8007e44:	099b      	lsrs	r3, r3, #6
 8007e46:	3301      	adds	r3, #1
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	495c      	ldr	r1, [pc, #368]	; (8007fd4 <HAL_I2C_Init+0x274>)
 8007e64:	428b      	cmp	r3, r1
 8007e66:	d819      	bhi.n	8007e9c <HAL_I2C_Init+0x13c>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1e59      	subs	r1, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e76:	1c59      	adds	r1, r3, #1
 8007e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <HAL_I2C_Init+0x138>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1e59      	subs	r1, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e90:	3301      	adds	r3, #1
 8007e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e96:	e051      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	e04f      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d111      	bne.n	8007ec8 <HAL_I2C_Init+0x168>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	1e58      	subs	r0, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6859      	ldr	r1, [r3, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	440b      	add	r3, r1
 8007eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf0c      	ite	eq
 8007ec0:	2301      	moveq	r3, #1
 8007ec2:	2300      	movne	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e012      	b.n	8007eee <HAL_I2C_Init+0x18e>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	1e58      	subs	r0, r3, #1
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6859      	ldr	r1, [r3, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	0099      	lsls	r1, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2301      	moveq	r3, #1
 8007eea:	2300      	movne	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_I2C_Init+0x196>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e022      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10e      	bne.n	8007f1c <HAL_I2C_Init+0x1bc>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1e58      	subs	r0, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6859      	ldr	r1, [r3, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	440b      	add	r3, r1
 8007f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f10:	3301      	adds	r3, #1
 8007f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1a:	e00f      	b.n	8007f3c <HAL_I2C_Init+0x1dc>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1e58      	subs	r0, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	0099      	lsls	r1, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f32:	3301      	adds	r3, #1
 8007f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	6809      	ldr	r1, [r1, #0]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	69da      	ldr	r2, [r3, #28]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6911      	ldr	r1, [r2, #16]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68d2      	ldr	r2, [r2, #12]
 8007f76:	4311      	orrs	r1, r2
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695a      	ldr	r2, [r3, #20]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	000186a0 	.word	0x000186a0
 8007fd8:	001e847f 	.word	0x001e847f
 8007fdc:	003d08ff 	.word	0x003d08ff
 8007fe0:	431bde83 	.word	0x431bde83
 8007fe4:	10624dd3 	.word	0x10624dd3

08007fe8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	817b      	strh	r3, [r7, #10]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	813b      	strh	r3, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008002:	f7fe fbc3 	bl	800678c <HAL_GetTick>
 8008006:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b20      	cmp	r3, #32
 8008012:	f040 80d9 	bne.w	80081c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2319      	movs	r3, #25
 800801c:	2201      	movs	r2, #1
 800801e:	496d      	ldr	r1, [pc, #436]	; (80081d4 <HAL_I2C_Mem_Write+0x1ec>)
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fc7f 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
 800802e:	e0cc      	b.n	80081ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_I2C_Mem_Write+0x56>
 800803a:	2302      	movs	r3, #2
 800803c:	e0c5      	b.n	80081ca <HAL_I2C_Mem_Write+0x1e2>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b01      	cmp	r3, #1
 8008052:	d007      	beq.n	8008064 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008072:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2221      	movs	r2, #33	; 0x21
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2240      	movs	r2, #64	; 0x40
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a3a      	ldr	r2, [r7, #32]
 800808e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008094:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a4d      	ldr	r2, [pc, #308]	; (80081d8 <HAL_I2C_Mem_Write+0x1f0>)
 80080a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080a6:	88f8      	ldrh	r0, [r7, #6]
 80080a8:	893a      	ldrh	r2, [r7, #8]
 80080aa:	8979      	ldrh	r1, [r7, #10]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	4603      	mov	r3, r0
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fab6 	bl	8008628 <I2C_RequestMemoryWrite>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d052      	beq.n	8008168 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e081      	b.n	80081ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fd00 	bl	8008ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d107      	bne.n	80080ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e06b      	b.n	80081ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b04      	cmp	r3, #4
 800812e:	d11b      	bne.n	8008168 <HAL_I2C_Mem_Write+0x180>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	d017      	beq.n	8008168 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	781a      	ldrb	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1aa      	bne.n	80080c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fcec 	bl	8008b52 <I2C_WaitOnBTFFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00d      	beq.n	800819c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	2b04      	cmp	r3, #4
 8008186:	d107      	bne.n	8008198 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008196:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e016      	b.n	80081ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	00100002 	.word	0x00100002
 80081d8:	ffff0000 	.word	0xffff0000

080081dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	4608      	mov	r0, r1
 80081e6:	4611      	mov	r1, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	4603      	mov	r3, r0
 80081ec:	817b      	strh	r3, [r7, #10]
 80081ee:	460b      	mov	r3, r1
 80081f0:	813b      	strh	r3, [r7, #8]
 80081f2:	4613      	mov	r3, r2
 80081f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081f6:	f7fe fac9 	bl	800678c <HAL_GetTick>
 80081fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b20      	cmp	r3, #32
 8008206:	f040 8208 	bne.w	800861a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	2319      	movs	r3, #25
 8008210:	2201      	movs	r2, #1
 8008212:	497b      	ldr	r1, [pc, #492]	; (8008400 <HAL_I2C_Mem_Read+0x224>)
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fb85 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008220:	2302      	movs	r3, #2
 8008222:	e1fb      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800822a:	2b01      	cmp	r3, #1
 800822c:	d101      	bne.n	8008232 <HAL_I2C_Mem_Read+0x56>
 800822e:	2302      	movs	r3, #2
 8008230:	e1f4      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b01      	cmp	r3, #1
 8008246:	d007      	beq.n	8008258 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2222      	movs	r2, #34	; 0x22
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2240      	movs	r2, #64	; 0x40
 8008274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a5b      	ldr	r2, [pc, #364]	; (8008404 <HAL_I2C_Mem_Read+0x228>)
 8008298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800829a:	88f8      	ldrh	r0, [r7, #6]
 800829c:	893a      	ldrh	r2, [r7, #8]
 800829e:	8979      	ldrh	r1, [r7, #10]
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	4603      	mov	r3, r0
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fa52 	bl	8008754 <I2C_RequestMemoryRead>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e1b0      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d113      	bne.n	80082ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082c2:	2300      	movs	r3, #0
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	623b      	str	r3, [r7, #32]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	623b      	str	r3, [r7, #32]
 80082d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e184      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d11b      	bne.n	800832a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008300:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	e164      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832e:	2b02      	cmp	r3, #2
 8008330:	d11b      	bne.n	800836a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008340:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	61bb      	str	r3, [r7, #24]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	e144      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008380:	e138      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008386:	2b03      	cmp	r3, #3
 8008388:	f200 80f1 	bhi.w	800856e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008390:	2b01      	cmp	r3, #1
 8008392:	d123      	bne.n	80083dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fc1b 	bl	8008bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e139      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083da:	e10b      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d14e      	bne.n	8008482 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	2200      	movs	r2, #0
 80083ec:	4906      	ldr	r1, [pc, #24]	; (8008408 <HAL_I2C_Mem_Read+0x22c>)
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fa98 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e10e      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
 80083fe:	bf00      	nop
 8008400:	00100002 	.word	0x00100002
 8008404:	ffff0000 	.word	0xffff0000
 8008408:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800841a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008444:	b29b      	uxth	r3, r3
 8008446:	3b01      	subs	r3, #1
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008480:	e0b8      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	2200      	movs	r2, #0
 800848a:	4966      	ldr	r1, [pc, #408]	; (8008624 <HAL_I2C_Mem_Read+0x448>)
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fa49 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e0bf      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691a      	ldr	r2, [r3, #16]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	2200      	movs	r2, #0
 80084e6:	494f      	ldr	r1, [pc, #316]	; (8008624 <HAL_I2C_Mem_Read+0x448>)
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fa1b 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e091      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008530:	b29b      	uxth	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800856c:	e042      	b.n	80085f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fb2e 	bl	8008bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e04c      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d118      	bne.n	80085f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f47f aec2 	bne.w	8008382 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	e000      	b.n	800861c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800861a:	2302      	movs	r3, #2
  }
}
 800861c:	4618      	mov	r0, r3
 800861e:	3728      	adds	r7, #40	; 0x28
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	00010004 	.word	0x00010004

08008628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af02      	add	r7, sp, #8
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4603      	mov	r3, r0
 8008638:	817b      	strh	r3, [r7, #10]
 800863a:	460b      	mov	r3, r1
 800863c:	813b      	strh	r3, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	2200      	movs	r2, #0
 800865a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f960 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00d      	beq.n	8008686 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008678:	d103      	bne.n	8008682 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e05f      	b.n	8008746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008686:	897b      	ldrh	r3, [r7, #10]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	6a3a      	ldr	r2, [r7, #32]
 800869a:	492d      	ldr	r1, [pc, #180]	; (8008750 <I2C_RequestMemoryWrite+0x128>)
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 f998 	bl	80089d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e04c      	b.n	8008746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c4:	6a39      	ldr	r1, [r7, #32]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 fa02 	bl	8008ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00d      	beq.n	80086ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d107      	bne.n	80086ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e02b      	b.n	8008746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086ee:	88fb      	ldrh	r3, [r7, #6]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d105      	bne.n	8008700 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086f4:	893b      	ldrh	r3, [r7, #8]
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	611a      	str	r2, [r3, #16]
 80086fe:	e021      	b.n	8008744 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008700:	893b      	ldrh	r3, [r7, #8]
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	b29b      	uxth	r3, r3
 8008706:	b2da      	uxtb	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800870e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008710:	6a39      	ldr	r1, [r7, #32]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 f9dc 	bl	8008ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00d      	beq.n	800873a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	2b04      	cmp	r3, #4
 8008724:	d107      	bne.n	8008736 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e005      	b.n	8008746 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800873a:	893b      	ldrh	r3, [r7, #8]
 800873c:	b2da      	uxtb	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	00010002 	.word	0x00010002

08008754 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	4608      	mov	r0, r1
 800875e:	4611      	mov	r1, r2
 8008760:	461a      	mov	r2, r3
 8008762:	4603      	mov	r3, r0
 8008764:	817b      	strh	r3, [r7, #10]
 8008766:	460b      	mov	r3, r1
 8008768:	813b      	strh	r3, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800877c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800878c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	2200      	movs	r2, #0
 8008796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f8c2 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00d      	beq.n	80087c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b4:	d103      	bne.n	80087be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e0aa      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087c2:	897b      	ldrh	r3, [r7, #10]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	6a3a      	ldr	r2, [r7, #32]
 80087d6:	4952      	ldr	r1, [pc, #328]	; (8008920 <I2C_RequestMemoryRead+0x1cc>)
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f8fa 	bl	80089d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e097      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008800:	6a39      	ldr	r1, [r7, #32]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 f964 	bl	8008ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2b04      	cmp	r3, #4
 8008814:	d107      	bne.n	8008826 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e076      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d105      	bne.n	800883c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008830:	893b      	ldrh	r3, [r7, #8]
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	611a      	str	r2, [r3, #16]
 800883a:	e021      	b.n	8008880 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800883c:	893b      	ldrh	r3, [r7, #8]
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	b29b      	uxth	r3, r3
 8008842:	b2da      	uxtb	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800884a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884c:	6a39      	ldr	r1, [r7, #32]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f93e 	bl	8008ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00d      	beq.n	8008876 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	2b04      	cmp	r3, #4
 8008860:	d107      	bne.n	8008872 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e050      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008876:	893b      	ldrh	r3, [r7, #8]
 8008878:	b2da      	uxtb	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008882:	6a39      	ldr	r1, [r7, #32]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f923 	bl	8008ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00d      	beq.n	80088ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	2b04      	cmp	r3, #4
 8008896:	d107      	bne.n	80088a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e035      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f82b 	bl	8008924 <I2C_WaitOnFlagUntilTimeout>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00d      	beq.n	80088f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e2:	d103      	bne.n	80088ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e013      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088f0:	897b      	ldrh	r3, [r7, #10]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	6a3a      	ldr	r2, [r7, #32]
 8008904:	4906      	ldr	r1, [pc, #24]	; (8008920 <I2C_RequestMemoryRead+0x1cc>)
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 f863 	bl	80089d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	00010002 	.word	0x00010002

08008924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	4613      	mov	r3, r2
 8008932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008934:	e025      	b.n	8008982 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d021      	beq.n	8008982 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893e:	f7fd ff25 	bl	800678c <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d116      	bne.n	8008982 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f043 0220 	orr.w	r2, r3, #32
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e023      	b.n	80089ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	0c1b      	lsrs	r3, r3, #16
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10d      	bne.n	80089a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	43da      	mvns	r2, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4013      	ands	r3, r2
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	bf0c      	ite	eq
 800899e:	2301      	moveq	r3, #1
 80089a0:	2300      	movne	r3, #0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	e00c      	b.n	80089c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	43da      	mvns	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	4013      	ands	r3, r2
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bf0c      	ite	eq
 80089ba:	2301      	moveq	r3, #1
 80089bc:	2300      	movne	r3, #0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d0b6      	beq.n	8008936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089e0:	e051      	b.n	8008a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f0:	d123      	bne.n	8008a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	f043 0204 	orr.w	r2, r3, #4
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e046      	b.n	8008ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d021      	beq.n	8008a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a42:	f7fd fea3 	bl	800678c <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d302      	bcc.n	8008a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d116      	bne.n	8008a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	f043 0220 	orr.w	r2, r3, #32
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e020      	b.n	8008ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d10c      	bne.n	8008aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	43da      	mvns	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bf14      	ite	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	2300      	moveq	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	e00b      	b.n	8008ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	43da      	mvns	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bf14      	ite	ne
 8008abc:	2301      	movne	r3, #1
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d18d      	bne.n	80089e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008adc:	e02d      	b.n	8008b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 f8ce 	bl	8008c80 <I2C_IsAcknowledgeFailed>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e02d      	b.n	8008b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af4:	d021      	beq.n	8008b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af6:	f7fd fe49 	bl	800678c <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d302      	bcc.n	8008b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d116      	bne.n	8008b3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f043 0220 	orr.w	r2, r3, #32
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e007      	b.n	8008b4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b44:	2b80      	cmp	r3, #128	; 0x80
 8008b46:	d1ca      	bne.n	8008ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b5e:	e02d      	b.n	8008bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 f88d 	bl	8008c80 <I2C_IsAcknowledgeFailed>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e02d      	b.n	8008bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b76:	d021      	beq.n	8008bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b78:	f7fd fe08 	bl	800678c <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d116      	bne.n	8008bbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	f043 0220 	orr.w	r2, r3, #32
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e007      	b.n	8008bcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	f003 0304 	and.w	r3, r3, #4
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d1ca      	bne.n	8008b60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008be0:	e042      	b.n	8008c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	f003 0310 	and.w	r3, r3, #16
 8008bec:	2b10      	cmp	r3, #16
 8008bee:	d119      	bne.n	8008c24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f06f 0210 	mvn.w	r2, #16
 8008bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e029      	b.n	8008c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c24:	f7fd fdb2 	bl	800678c <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d116      	bne.n	8008c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	f043 0220 	orr.w	r2, r3, #32
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e007      	b.n	8008c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c72:	2b40      	cmp	r3, #64	; 0x40
 8008c74:	d1b5      	bne.n	8008be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c96:	d11b      	bne.n	8008cd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ca0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbc:	f043 0204 	orr.w	r2, r3, #4
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce0:	b08f      	sub	sp, #60	; 0x3c
 8008ce2:	af0a      	add	r7, sp, #40	; 0x28
 8008ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e10f      	b.n	8008f10 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f007 fda8 	bl	8010860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2203      	movs	r2, #3
 8008d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f004 f877 	bl	800ce22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	687e      	ldr	r6, [r7, #4]
 8008d3c:	466d      	mov	r5, sp
 8008d3e:	f106 0410 	add.w	r4, r6, #16
 8008d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d52:	1d33      	adds	r3, r6, #4
 8008d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f003 ff4e 	bl	800cbf8 <USB_CoreInit>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2202      	movs	r2, #2
 8008d66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e0d0      	b.n	8008f10 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2100      	movs	r1, #0
 8008d74:	4618      	mov	r0, r3
 8008d76:	f004 f865 	bl	800ce44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
 8008d7e:	e04a      	b.n	8008e16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d80:	7bfa      	ldrb	r2, [r7, #15]
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	4613      	mov	r3, r2
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	333d      	adds	r3, #61	; 0x3d
 8008d90:	2201      	movs	r2, #1
 8008d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d94:	7bfa      	ldrb	r2, [r7, #15]
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	333c      	adds	r3, #60	; 0x3c
 8008da4:	7bfa      	ldrb	r2, [r7, #15]
 8008da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008da8:	7bfa      	ldrb	r2, [r7, #15]
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	b298      	uxth	r0, r3
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4613      	mov	r3, r2
 8008db2:	00db      	lsls	r3, r3, #3
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	440b      	add	r3, r1
 8008dba:	3344      	adds	r3, #68	; 0x44
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008dc0:	7bfa      	ldrb	r2, [r7, #15]
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	440b      	add	r3, r1
 8008dce:	3340      	adds	r3, #64	; 0x40
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008dd4:	7bfa      	ldrb	r2, [r7, #15]
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	3348      	adds	r3, #72	; 0x48
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008de8:	7bfa      	ldrb	r2, [r7, #15]
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	334c      	adds	r3, #76	; 0x4c
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008dfc:	7bfa      	ldrb	r2, [r7, #15]
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4613      	mov	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	3354      	adds	r3, #84	; 0x54
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	3301      	adds	r3, #1
 8008e14:	73fb      	strb	r3, [r7, #15]
 8008e16:	7bfa      	ldrb	r2, [r7, #15]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3af      	bcc.n	8008d80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	e044      	b.n	8008eb0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008e26:	7bfa      	ldrb	r2, [r7, #15]
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	440b      	add	r3, r1
 8008e34:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008e38:	2200      	movs	r2, #0
 8008e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008e3c:	7bfa      	ldrb	r2, [r7, #15]
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	00db      	lsls	r3, r3, #3
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008e4e:	7bfa      	ldrb	r2, [r7, #15]
 8008e50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e52:	7bfa      	ldrb	r2, [r7, #15]
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	00db      	lsls	r3, r3, #3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e68:	7bfa      	ldrb	r2, [r7, #15]
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	440b      	add	r3, r1
 8008e76:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e7e:	7bfa      	ldrb	r2, [r7, #15]
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	4613      	mov	r3, r2
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	4413      	add	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e90:	2200      	movs	r2, #0
 8008e92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e94:	7bfa      	ldrb	r2, [r7, #15]
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	3301      	adds	r3, #1
 8008eae:	73fb      	strb	r3, [r7, #15]
 8008eb0:	7bfa      	ldrb	r2, [r7, #15]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d3b5      	bcc.n	8008e26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	687e      	ldr	r6, [r7, #4]
 8008ec2:	466d      	mov	r5, sp
 8008ec4:	f106 0410 	add.w	r4, r6, #16
 8008ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008ed8:	1d33      	adds	r3, r6, #4
 8008eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008edc:	6838      	ldr	r0, [r7, #0]
 8008ede:	f003 fffd 	bl	800cedc <USB_DevInit>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e00d      	b.n	8008f10 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f005 f94c 	bl	800e1a6 <USB_DevDisconnect>

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_PCD_Start+0x1c>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e020      	b.n	8008f76 <HAL_PCD_Start+0x5e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d109      	bne.n	8008f58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d005      	beq.n	8008f58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f003 ff4f 	bl	800ce00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f005 f8fc 	bl	800e164 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f7e:	b590      	push	{r4, r7, lr}
 8008f80:	b08d      	sub	sp, #52	; 0x34
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f005 f9ba 	bl	800e30e <USB_GetMode>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 848a 	bne.w	80098b6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f005 f91e 	bl	800e1e8 <USB_ReadInterrupts>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 8480 	beq.w	80098b4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f005 f90b 	bl	800e1e8 <USB_ReadInterrupts>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d107      	bne.n	8008fec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	695a      	ldr	r2, [r3, #20]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f002 0202 	and.w	r2, r2, #2
 8008fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f005 f8f9 	bl	800e1e8 <USB_ReadInterrupts>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d161      	bne.n	80090c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	699a      	ldr	r2, [r3, #24]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0210 	bic.w	r2, r2, #16
 800900e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	4613      	mov	r3, r2
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4413      	add	r3, r2
 800902c:	3304      	adds	r3, #4
 800902e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	0c5b      	lsrs	r3, r3, #17
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	2b02      	cmp	r3, #2
 800903a:	d124      	bne.n	8009086 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009042:	4013      	ands	r3, r2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d035      	beq.n	80090b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	091b      	lsrs	r3, r3, #4
 8009050:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009056:	b29b      	uxth	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	6a38      	ldr	r0, [r7, #32]
 800905c:	f004 ff30 	bl	800dec0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	091b      	lsrs	r3, r3, #4
 8009068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800906c:	441a      	add	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	6a1a      	ldr	r2, [r3, #32]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800907e:	441a      	add	r2, r3
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	621a      	str	r2, [r3, #32]
 8009084:	e016      	b.n	80090b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	0c5b      	lsrs	r3, r3, #17
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	2b06      	cmp	r3, #6
 8009090:	d110      	bne.n	80090b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009098:	2208      	movs	r2, #8
 800909a:	4619      	mov	r1, r3
 800909c:	6a38      	ldr	r0, [r7, #32]
 800909e:	f004 ff0f 	bl	800dec0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	6a1a      	ldr	r2, [r3, #32]
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	091b      	lsrs	r3, r3, #4
 80090aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ae:	441a      	add	r2, r3
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0210 	orr.w	r2, r2, #16
 80090c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f005 f88d 	bl	800e1e8 <USB_ReadInterrupts>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090d8:	f040 80a7 	bne.w	800922a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f005 f892 	bl	800e20e <USB_ReadDevAllOutEpInterrupt>
 80090ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80090ec:	e099      	b.n	8009222 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 808e 	beq.w	8009216 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009100:	b2d2      	uxtb	r2, r2
 8009102:	4611      	mov	r1, r2
 8009104:	4618      	mov	r0, r3
 8009106:	f005 f8b6 	bl	800e276 <USB_ReadDevOutEPInterrupt>
 800910a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00c      	beq.n	8009130 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009122:	461a      	mov	r2, r3
 8009124:	2301      	movs	r3, #1
 8009126:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fec2 	bl	8009eb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00c      	beq.n	8009154 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009146:	461a      	mov	r2, r3
 8009148:	2308      	movs	r3, #8
 800914a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800914c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 ff98 	bl	800a084 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b00      	cmp	r3, #0
 800915c:	d008      	beq.n	8009170 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916a:	461a      	mov	r2, r3
 800916c:	2310      	movs	r3, #16
 800916e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d030      	beq.n	80091dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009182:	2b80      	cmp	r3, #128	; 0x80
 8009184:	d109      	bne.n	800919a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009198:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800919a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919c:	4613      	mov	r3, r2
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	4413      	add	r3, r2
 80091ac:	3304      	adds	r3, #4
 80091ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	78db      	ldrb	r3, [r3, #3]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d108      	bne.n	80091ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2200      	movs	r2, #0
 80091bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f007 fc47 	bl	8010a58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	461a      	mov	r2, r3
 80091d8:	2302      	movs	r3, #2
 80091da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d008      	beq.n	80091f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f2:	461a      	mov	r2, r3
 80091f4:	2320      	movs	r3, #32
 80091f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920e:	461a      	mov	r2, r3
 8009210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009214:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	3301      	adds	r3, #1
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	2b00      	cmp	r3, #0
 8009226:	f47f af62 	bne.w	80090ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f004 ffda 	bl	800e1e8 <USB_ReadInterrupts>
 8009234:	4603      	mov	r3, r0
 8009236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800923a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800923e:	f040 80db 	bne.w	80093f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f004 fffb 	bl	800e242 <USB_ReadDevAllInEpInterrupt>
 800924c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009252:	e0cd      	b.n	80093f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 80c2 	beq.w	80093e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f005 f821 	bl	800e2b2 <USB_ReadDevInEPInterrupt>
 8009270:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d057      	beq.n	800932c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	2201      	movs	r2, #1
 8009284:	fa02 f303 	lsl.w	r3, r2, r3
 8009288:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	43db      	mvns	r3, r3
 8009296:	69f9      	ldr	r1, [r7, #28]
 8009298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800929c:	4013      	ands	r3, r2
 800929e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ac:	461a      	mov	r2, r3
 80092ae:	2301      	movs	r3, #1
 80092b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d132      	bne.n	8009320 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092be:	4613      	mov	r3, r2
 80092c0:	00db      	lsls	r3, r3, #3
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	334c      	adds	r3, #76	; 0x4c
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4403      	add	r3, r0
 80092da:	3348      	adds	r3, #72	; 0x48
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4419      	add	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4403      	add	r3, r0
 80092ee:	334c      	adds	r3, #76	; 0x4c
 80092f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d113      	bne.n	8009320 <HAL_PCD_IRQHandler+0x3a2>
 80092f8:	6879      	ldr	r1, [r7, #4]
 80092fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092fc:	4613      	mov	r3, r2
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	3354      	adds	r3, #84	; 0x54
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d108      	bne.n	8009320 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009318:	461a      	mov	r2, r3
 800931a:	2101      	movs	r1, #1
 800931c:	f005 f828 	bl	800e370 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f007 fb1b 	bl	8010962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d008      	beq.n	8009348 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009342:	461a      	mov	r2, r3
 8009344:	2308      	movs	r3, #8
 8009346:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f003 0310 	and.w	r3, r3, #16
 800934e:	2b00      	cmp	r3, #0
 8009350:	d008      	beq.n	8009364 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4413      	add	r3, r2
 800935a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935e:	461a      	mov	r2, r3
 8009360:	2310      	movs	r3, #16
 8009362:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d008      	beq.n	8009380 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937a:	461a      	mov	r2, r3
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d023      	beq.n	80093d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800938a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800938c:	6a38      	ldr	r0, [r7, #32]
 800938e:	f003 ff09 	bl	800d1a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	3338      	adds	r3, #56	; 0x38
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	4413      	add	r3, r2
 80093a2:	3304      	adds	r3, #4
 80093a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	78db      	ldrb	r3, [r3, #3]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d108      	bne.n	80093c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2200      	movs	r2, #0
 80093b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f007 fb5e 	bl	8010a7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093cc:	461a      	mov	r2, r3
 80093ce:	2302      	movs	r3, #2
 80093d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80093dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fcdb 	bl	8009d9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	3301      	adds	r3, #1
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	085b      	lsrs	r3, r3, #1
 80093ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f47f af2e 	bne.w	8009254 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f004 fef3 	bl	800e1e8 <USB_ReadInterrupts>
 8009402:	4603      	mov	r3, r0
 8009404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940c:	d122      	bne.n	8009454 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800941c:	f023 0301 	bic.w	r3, r3, #1
 8009420:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009428:	2b01      	cmp	r3, #1
 800942a:	d108      	bne.n	800943e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fec2 	bl	800a1c0 <HAL_PCDEx_LPM_Callback>
 800943c:	e002      	b.n	8009444 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f007 fafc 	bl	8010a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	695a      	ldr	r2, [r3, #20]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4618      	mov	r0, r3
 800945a:	f004 fec5 	bl	800e1e8 <USB_ReadInterrupts>
 800945e:	4603      	mov	r3, r0
 8009460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009468:	d112      	bne.n	8009490 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b01      	cmp	r3, #1
 8009478:	d102      	bne.n	8009480 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f007 fab8 	bl	80109f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	695a      	ldr	r2, [r3, #20]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800948e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f004 fea7 	bl	800e1e8 <USB_ReadInterrupts>
 800949a:	4603      	mov	r3, r0
 800949c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a4:	f040 80b7 	bne.w	8009616 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094b6:	f023 0301 	bic.w	r3, r3, #1
 80094ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2110      	movs	r1, #16
 80094c2:	4618      	mov	r0, r3
 80094c4:	f003 fe6e 	bl	800d1a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094c8:	2300      	movs	r3, #0
 80094ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094cc:	e046      	b.n	800955c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094da:	461a      	mov	r2, r3
 80094dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009500:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950e:	461a      	mov	r2, r3
 8009510:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009514:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009530:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009534:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	69fa      	ldr	r2, [r7, #28]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009554:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	3301      	adds	r3, #1
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009562:	429a      	cmp	r2, r3
 8009564:	d3b3      	bcc.n	80094ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009574:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009578:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957e:	2b00      	cmp	r3, #0
 8009580:	d016      	beq.n	80095b0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958c:	69fa      	ldr	r2, [r7, #28]
 800958e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009592:	f043 030b 	orr.w	r3, r3, #11
 8009596:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a8:	f043 030b 	orr.w	r3, r3, #11
 80095ac:	6453      	str	r3, [r2, #68]	; 0x44
 80095ae:	e015      	b.n	80095dc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80095c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80095c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	69fa      	ldr	r2, [r7, #28]
 80095d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095d6:	f043 030b 	orr.w	r3, r3, #11
 80095da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009600:	461a      	mov	r2, r3
 8009602:	f004 feb5 	bl	800e370 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695a      	ldr	r2, [r3, #20]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f004 fde4 	bl	800e1e8 <USB_ReadInterrupts>
 8009620:	4603      	mov	r3, r0
 8009622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962a:	d124      	bne.n	8009676 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f004 fe7a 	bl	800e32a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4618      	mov	r0, r3
 800963c:	f003 fe2f 	bl	800d29e <USB_GetDevSpeed>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681c      	ldr	r4, [r3, #0]
 800964c:	f001 f9e8 	bl	800aa20 <HAL_RCC_GetHCLKFreq>
 8009650:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009656:	b2db      	uxtb	r3, r3
 8009658:	461a      	mov	r2, r3
 800965a:	4620      	mov	r0, r4
 800965c:	f003 fb2e 	bl	800ccbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f007 f9a6 	bl	80109b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695a      	ldr	r2, [r3, #20]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009674:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4618      	mov	r0, r3
 800967c:	f004 fdb4 	bl	800e1e8 <USB_ReadInterrupts>
 8009680:	4603      	mov	r3, r0
 8009682:	f003 0308 	and.w	r3, r3, #8
 8009686:	2b08      	cmp	r3, #8
 8009688:	d10a      	bne.n	80096a0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f007 f983 	bl	8010996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	695a      	ldr	r2, [r3, #20]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f002 0208 	and.w	r2, r2, #8
 800969e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f004 fd9f 	bl	800e1e8 <USB_ReadInterrupts>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b0:	2b80      	cmp	r3, #128	; 0x80
 80096b2:	d122      	bne.n	80096fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096c0:	2301      	movs	r3, #1
 80096c2:	627b      	str	r3, [r7, #36]	; 0x24
 80096c4:	e014      	b.n	80096f0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ca:	4613      	mov	r3, r2
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	440b      	add	r3, r1
 80096d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d105      	bne.n	80096ea <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 fb27 	bl	8009d38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	3301      	adds	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d3e5      	bcc.n	80096c6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f004 fd72 	bl	800e1e8 <USB_ReadInterrupts>
 8009704:	4603      	mov	r3, r0
 8009706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800970a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800970e:	d13b      	bne.n	8009788 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009710:	2301      	movs	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
 8009714:	e02b      	b.n	800976e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972a:	4613      	mov	r3, r2
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	3340      	adds	r3, #64	; 0x40
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d115      	bne.n	8009768 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800973c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800973e:	2b00      	cmp	r3, #0
 8009740:	da12      	bge.n	8009768 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	4613      	mov	r3, r2
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	333f      	adds	r3, #63	; 0x3f
 8009752:	2201      	movs	r2, #1
 8009754:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800975e:	b2db      	uxtb	r3, r3
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fae8 	bl	8009d38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	3301      	adds	r3, #1
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009774:	429a      	cmp	r2, r3
 8009776:	d3ce      	bcc.n	8009716 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	695a      	ldr	r2, [r3, #20]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f004 fd2b 	bl	800e1e8 <USB_ReadInterrupts>
 8009792:	4603      	mov	r3, r0
 8009794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800979c:	d155      	bne.n	800984a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800979e:	2301      	movs	r3, #1
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
 80097a2:	e045      	b.n	8009830 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d12e      	bne.n	800982a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80097cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da2b      	bge.n	800982a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80097de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d121      	bne.n	800982a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	4613      	mov	r3, r2
 80097ec:	00db      	lsls	r3, r3, #3
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	440b      	add	r3, r1
 80097f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80097f8:	2201      	movs	r2, #1
 80097fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009826:	6053      	str	r3, [r2, #4]
            break;
 8009828:	e007      	b.n	800983a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	3301      	adds	r3, #1
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009836:	429a      	cmp	r2, r3
 8009838:	d3b4      	bcc.n	80097a4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	695a      	ldr	r2, [r3, #20]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4618      	mov	r0, r3
 8009850:	f004 fcca 	bl	800e1e8 <USB_ReadInterrupts>
 8009854:	4603      	mov	r3, r0
 8009856:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800985a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985e:	d10a      	bne.n	8009876 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f007 f91d 	bl	8010aa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	695a      	ldr	r2, [r3, #20]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f004 fcb4 	bl	800e1e8 <USB_ReadInterrupts>
 8009880:	4603      	mov	r3, r0
 8009882:	f003 0304 	and.w	r3, r3, #4
 8009886:	2b04      	cmp	r3, #4
 8009888:	d115      	bne.n	80098b6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f007 f90d 	bl	8010abc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6859      	ldr	r1, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
 80098b2:	e000      	b.n	80098b6 <HAL_PCD_IRQHandler+0x938>
      return;
 80098b4:	bf00      	nop
    }
  }
}
 80098b6:	3734      	adds	r7, #52	; 0x34
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd90      	pop	{r4, r7, pc}

080098bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d101      	bne.n	80098d6 <HAL_PCD_SetAddress+0x1a>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e013      	b.n	80098fe <HAL_PCD_SetAddress+0x42>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	78fa      	ldrb	r2, [r7, #3]
 80098ec:	4611      	mov	r1, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f004 fc12 	bl	800e118 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	4608      	mov	r0, r1
 8009910:	4611      	mov	r1, r2
 8009912:	461a      	mov	r2, r3
 8009914:	4603      	mov	r3, r0
 8009916:	70fb      	strb	r3, [r7, #3]
 8009918:	460b      	mov	r3, r1
 800991a:	803b      	strh	r3, [r7, #0]
 800991c:	4613      	mov	r3, r2
 800991e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da0f      	bge.n	800994c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	f003 020f 	and.w	r2, r3, #15
 8009932:	4613      	mov	r3, r2
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	3338      	adds	r3, #56	; 0x38
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4413      	add	r3, r2
 8009940:	3304      	adds	r3, #4
 8009942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	705a      	strb	r2, [r3, #1]
 800994a:	e00f      	b.n	800996c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	f003 020f 	and.w	r2, r3, #15
 8009952:	4613      	mov	r3, r2
 8009954:	00db      	lsls	r3, r3, #3
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	4413      	add	r3, r2
 8009962:	3304      	adds	r3, #4
 8009964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	b2da      	uxtb	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009978:	883a      	ldrh	r2, [r7, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	78ba      	ldrb	r2, [r7, #2]
 8009982:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009996:	78bb      	ldrb	r3, [r7, #2]
 8009998:	2b02      	cmp	r3, #2
 800999a:	d102      	bne.n	80099a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d101      	bne.n	80099b0 <HAL_PCD_EP_Open+0xaa>
 80099ac:	2302      	movs	r3, #2
 80099ae:	e00e      	b.n	80099ce <HAL_PCD_EP_Open+0xc8>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68f9      	ldr	r1, [r7, #12]
 80099be:	4618      	mov	r0, r3
 80099c0:	f003 fc92 	bl	800d2e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80099cc:	7afb      	ldrb	r3, [r7, #11]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	460b      	mov	r3, r1
 80099e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80099e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da0f      	bge.n	8009a0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	f003 020f 	and.w	r2, r3, #15
 80099f0:	4613      	mov	r3, r2
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	3338      	adds	r3, #56	; 0x38
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	705a      	strb	r2, [r3, #1]
 8009a08:	e00f      	b.n	8009a2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a0a:	78fb      	ldrb	r3, [r7, #3]
 8009a0c:	f003 020f 	and.w	r2, r3, #15
 8009a10:	4613      	mov	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	3304      	adds	r3, #4
 8009a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_PCD_EP_Close+0x6e>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e00e      	b.n	8009a62 <HAL_PCD_EP_Close+0x8c>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68f9      	ldr	r1, [r7, #12]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f003 fcd0 	bl	800d3f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b086      	sub	sp, #24
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	460b      	mov	r3, r1
 8009a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	f003 020f 	and.w	r2, r3, #15
 8009a80:	4613      	mov	r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	3304      	adds	r3, #4
 8009a92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009aac:	7afb      	ldrb	r3, [r7, #11]
 8009aae:	f003 030f 	and.w	r3, r3, #15
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d102      	bne.n	8009ac6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ac6:	7afb      	ldrb	r3, [r7, #11]
 8009ac8:	f003 030f 	and.w	r3, r3, #15
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	6979      	ldr	r1, [r7, #20]
 8009ade:	f003 ffaf 	bl	800da40 <USB_EP0StartXfer>
 8009ae2:	e008      	b.n	8009af6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	461a      	mov	r2, r3
 8009af0:	6979      	ldr	r1, [r7, #20]
 8009af2:	f003 fd5d 	bl	800d5b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	f003 020f 	and.w	r2, r3, #15
 8009b12:	6879      	ldr	r1, [r7, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009b22:	681b      	ldr	r3, [r3, #0]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	f003 020f 	and.w	r2, r3, #15
 8009b46:	4613      	mov	r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	3338      	adds	r3, #56	; 0x38
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4413      	add	r3, r2
 8009b54:	3304      	adds	r3, #4
 8009b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2200      	movs	r2, #0
 8009b68:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	f003 030f 	and.w	r3, r3, #15
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d102      	bne.n	8009b8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d109      	bne.n	8009ba8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6979      	ldr	r1, [r7, #20]
 8009ba2:	f003 ff4d 	bl	800da40 <USB_EP0StartXfer>
 8009ba6:	e008      	b.n	8009bba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6979      	ldr	r1, [r7, #20]
 8009bb6:	f003 fcfb 	bl	800d5b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	f003 020f 	and.w	r2, r3, #15
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d901      	bls.n	8009be2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e050      	b.n	8009c84 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da0f      	bge.n	8009c0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	f003 020f 	and.w	r2, r3, #15
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	3338      	adds	r3, #56	; 0x38
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	3304      	adds	r3, #4
 8009c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	705a      	strb	r2, [r3, #1]
 8009c08:	e00d      	b.n	8009c26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	f003 030f 	and.w	r3, r3, #15
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <HAL_PCD_EP_SetStall+0x82>
 8009c42:	2302      	movs	r3, #2
 8009c44:	e01e      	b.n	8009c84 <HAL_PCD_EP_SetStall+0xc0>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68f9      	ldr	r1, [r7, #12]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f004 f98b 	bl	800df70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6818      	ldr	r0, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	b2d9      	uxtb	r1, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c74:	461a      	mov	r2, r3
 8009c76:	f004 fb7b 	bl	800e370 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d901      	bls.n	8009caa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e042      	b.n	8009d30 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	da0f      	bge.n	8009cd2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	f003 020f 	and.w	r2, r3, #15
 8009cb8:	4613      	mov	r3, r2
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	3338      	adds	r3, #56	; 0x38
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	705a      	strb	r2, [r3, #1]
 8009cd0:	e00f      	b.n	8009cf2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	f003 020f 	and.w	r2, r3, #15
 8009cd8:	4613      	mov	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	3304      	adds	r3, #4
 8009cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d101      	bne.n	8009d12 <HAL_PCD_EP_ClrStall+0x86>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e00e      	b.n	8009d30 <HAL_PCD_EP_ClrStall+0xa4>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f004 f993 	bl	800e04c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	da0c      	bge.n	8009d66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	f003 020f 	and.w	r2, r3, #15
 8009d52:	4613      	mov	r3, r2
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	3338      	adds	r3, #56	; 0x38
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	4413      	add	r3, r2
 8009d60:	3304      	adds	r3, #4
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e00c      	b.n	8009d80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f003 020f 	and.w	r2, r3, #15
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68f9      	ldr	r1, [r7, #12]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f003 ffb2 	bl	800dcf0 <USB_EPStopXfer>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009d90:	7afb      	ldrb	r3, [r7, #11]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b08a      	sub	sp, #40	; 0x28
 8009d9e:	af02      	add	r7, sp, #8
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4613      	mov	r3, r2
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	4413      	add	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	3338      	adds	r3, #56	; 0x38
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a1a      	ldr	r2, [r3, #32]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d901      	bls.n	8009dd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e06c      	b.n	8009eac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699a      	ldr	r2, [r3, #24]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	69fa      	ldr	r2, [r7, #28]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d902      	bls.n	8009dee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	3303      	adds	r3, #3
 8009df2:	089b      	lsrs	r3, r3, #2
 8009df4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009df6:	e02b      	b.n	8009e50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	699a      	ldr	r2, [r3, #24]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	69fa      	ldr	r2, [r7, #28]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d902      	bls.n	8009e14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	3303      	adds	r3, #3
 8009e18:	089b      	lsrs	r3, r3, #2
 8009e1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6919      	ldr	r1, [r3, #16]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	4603      	mov	r3, r0
 8009e32:	6978      	ldr	r0, [r7, #20]
 8009e34:	f004 f806 	bl	800de44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	441a      	add	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a1a      	ldr	r2, [r3, #32]
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	441a      	add	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e60:	69ba      	ldr	r2, [r7, #24]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d809      	bhi.n	8009e7a <PCD_WriteEmptyTxFifo+0xe0>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6a1a      	ldr	r2, [r3, #32]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d203      	bcs.n	8009e7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1be      	bne.n	8009df8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	699a      	ldr	r2, [r3, #24]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d811      	bhi.n	8009eaa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	f003 030f 	and.w	r3, r3, #15
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	43db      	mvns	r3, r3
 8009ea0:	6939      	ldr	r1, [r7, #16]
 8009ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3720      	adds	r7, #32
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	333c      	adds	r3, #60	; 0x3c
 8009ecc:	3304      	adds	r3, #4
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d17b      	bne.n	8009fe2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d015      	beq.n	8009f20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	4a61      	ldr	r2, [pc, #388]	; (800a07c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	f240 80b9 	bls.w	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80b3 	beq.w	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f16:	461a      	mov	r2, r3
 8009f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f1c:	6093      	str	r3, [r2, #8]
 8009f1e:	e0a7      	b.n	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f36:	461a      	mov	r2, r3
 8009f38:	2320      	movs	r3, #32
 8009f3a:	6093      	str	r3, [r2, #8]
 8009f3c:	e098      	b.n	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f040 8093 	bne.w	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	4a4b      	ldr	r2, [pc, #300]	; (800a07c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d90f      	bls.n	8009f72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f68:	461a      	mov	r2, r3
 8009f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f6e:	6093      	str	r3, [r2, #8]
 8009f70:	e07e      	b.n	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	4413      	add	r3, r2
 8009f84:	3304      	adds	r3, #4
 8009f86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	69da      	ldr	r2, [r3, #28]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	0159      	lsls	r1, r3, #5
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	440b      	add	r3, r1
 8009f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d114      	bne.n	8009fd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d109      	bne.n	8009fc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	f004 f9d6 	bl	800e370 <USB_EP0_OutStart>
 8009fc4:	e006      	b.n	8009fd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a1b      	ldr	r3, [r3, #32]
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f006 fca6 	bl	801092c <HAL_PCD_DataOutStageCallback>
 8009fe0:	e046      	b.n	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	4a26      	ldr	r2, [pc, #152]	; (800a080 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d124      	bne.n	800a034 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a000:	461a      	mov	r2, r3
 800a002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a006:	6093      	str	r3, [r2, #8]
 800a008:	e032      	b.n	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f003 0320 	and.w	r3, r3, #32
 800a010:	2b00      	cmp	r3, #0
 800a012:	d008      	beq.n	800a026 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a020:	461a      	mov	r2, r3
 800a022:	2320      	movs	r3, #32
 800a024:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f006 fc7d 	bl	801092c <HAL_PCD_DataOutStageCallback>
 800a032:	e01d      	b.n	800a070 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d114      	bne.n	800a064 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	4613      	mov	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d108      	bne.n	800a064 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a05c:	461a      	mov	r2, r3
 800a05e:	2100      	movs	r1, #0
 800a060:	f004 f986 	bl	800e370 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f006 fc5e 	bl	801092c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3720      	adds	r7, #32
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	4f54300a 	.word	0x4f54300a
 800a080:	4f54310a 	.word	0x4f54310a

0800a084 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	333c      	adds	r3, #60	; 0x3c
 800a09c:	3304      	adds	r3, #4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4a15      	ldr	r2, [pc, #84]	; (800a10c <PCD_EP_OutSetupPacket_int+0x88>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d90e      	bls.n	800a0d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d009      	beq.n	800a0d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f006 fc15 	bl	8010908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4a0a      	ldr	r2, [pc, #40]	; (800a10c <PCD_EP_OutSetupPacket_int+0x88>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d90c      	bls.n	800a100 <PCD_EP_OutSetupPacket_int+0x7c>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d108      	bne.n	800a100 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	f004 f938 	bl	800e370 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	4f54300a 	.word	0x4f54300a

0800a110 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
 800a11c:	4613      	mov	r3, r2
 800a11e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d107      	bne.n	800a13e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a12e:	883b      	ldrh	r3, [r7, #0]
 800a130:	0419      	lsls	r1, r3, #16
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	430a      	orrs	r2, r1
 800a13a:	629a      	str	r2, [r3, #40]	; 0x28
 800a13c:	e028      	b.n	800a190 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	0c1b      	lsrs	r3, r3, #16
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	4413      	add	r3, r2
 800a14a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]
 800a150:	e00d      	b.n	800a16e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	3340      	adds	r3, #64	; 0x40
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	0c1b      	lsrs	r3, r3, #16
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	4413      	add	r3, r2
 800a166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	3301      	adds	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
 800a16e:	7bfa      	ldrb	r2, [r7, #15]
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	3b01      	subs	r3, #1
 800a174:	429a      	cmp	r2, r3
 800a176:	d3ec      	bcc.n	800a152 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a178:	883b      	ldrh	r3, [r7, #0]
 800a17a:	0418      	lsls	r0, r3, #16
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6819      	ldr	r1, [r3, #0]
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	3b01      	subs	r3, #1
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	4302      	orrs	r2, r0
 800a188:	3340      	adds	r3, #64	; 0x40
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	440b      	add	r3, r1
 800a18e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	887a      	ldrh	r2, [r7, #2]
 800a1b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e267      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d075      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1f6:	4b88      	ldr	r3, [pc, #544]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f003 030c 	and.w	r3, r3, #12
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d00c      	beq.n	800a21c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a202:	4b85      	ldr	r3, [pc, #532]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a20a:	2b08      	cmp	r3, #8
 800a20c:	d112      	bne.n	800a234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a20e:	4b82      	ldr	r3, [pc, #520]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a21a:	d10b      	bne.n	800a234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a21c:	4b7e      	ldr	r3, [pc, #504]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d05b      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x108>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d157      	bne.n	800a2e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e242      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a23c:	d106      	bne.n	800a24c <HAL_RCC_OscConfig+0x74>
 800a23e:	4b76      	ldr	r3, [pc, #472]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a75      	ldr	r2, [pc, #468]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	e01d      	b.n	800a288 <HAL_RCC_OscConfig+0xb0>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a254:	d10c      	bne.n	800a270 <HAL_RCC_OscConfig+0x98>
 800a256:	4b70      	ldr	r3, [pc, #448]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a6f      	ldr	r2, [pc, #444]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a25c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	4b6d      	ldr	r3, [pc, #436]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a6c      	ldr	r2, [pc, #432]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	e00b      	b.n	800a288 <HAL_RCC_OscConfig+0xb0>
 800a270:	4b69      	ldr	r3, [pc, #420]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a68      	ldr	r2, [pc, #416]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	4b66      	ldr	r3, [pc, #408]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a65      	ldr	r2, [pc, #404]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d013      	beq.n	800a2b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a290:	f7fc fa7c 	bl	800678c <HAL_GetTick>
 800a294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a298:	f7fc fa78 	bl	800678c <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b64      	cmp	r3, #100	; 0x64
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e207      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2aa:	4b5b      	ldr	r3, [pc, #364]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0f0      	beq.n	800a298 <HAL_RCC_OscConfig+0xc0>
 800a2b6:	e014      	b.n	800a2e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2b8:	f7fc fa68 	bl	800678c <HAL_GetTick>
 800a2bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2be:	e008      	b.n	800a2d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2c0:	f7fc fa64 	bl	800678c <HAL_GetTick>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	2b64      	cmp	r3, #100	; 0x64
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e1f3      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2d2:	4b51      	ldr	r3, [pc, #324]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1f0      	bne.n	800a2c0 <HAL_RCC_OscConfig+0xe8>
 800a2de:	e000      	b.n	800a2e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d063      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2ee:	4b4a      	ldr	r3, [pc, #296]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f003 030c 	and.w	r3, r3, #12
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00b      	beq.n	800a312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2fa:	4b47      	ldr	r3, [pc, #284]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a302:	2b08      	cmp	r3, #8
 800a304:	d11c      	bne.n	800a340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a306:	4b44      	ldr	r3, [pc, #272]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d116      	bne.n	800a340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a312:	4b41      	ldr	r3, [pc, #260]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d005      	beq.n	800a32a <HAL_RCC_OscConfig+0x152>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d001      	beq.n	800a32a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e1c7      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32a:	4b3b      	ldr	r3, [pc, #236]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	4937      	ldr	r1, [pc, #220]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a33e:	e03a      	b.n	800a3b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d020      	beq.n	800a38a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a348:	4b34      	ldr	r3, [pc, #208]	; (800a41c <HAL_RCC_OscConfig+0x244>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a34e:	f7fc fa1d 	bl	800678c <HAL_GetTick>
 800a352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a354:	e008      	b.n	800a368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a356:	f7fc fa19 	bl	800678c <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e1a8      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a368:	4b2b      	ldr	r3, [pc, #172]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a374:	4b28      	ldr	r3, [pc, #160]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	4925      	ldr	r1, [pc, #148]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a384:	4313      	orrs	r3, r2
 800a386:	600b      	str	r3, [r1, #0]
 800a388:	e015      	b.n	800a3b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a38a:	4b24      	ldr	r3, [pc, #144]	; (800a41c <HAL_RCC_OscConfig+0x244>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a390:	f7fc f9fc 	bl	800678c <HAL_GetTick>
 800a394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a396:	e008      	b.n	800a3aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a398:	f7fc f9f8 	bl	800678c <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d901      	bls.n	800a3aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e187      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3aa:	4b1b      	ldr	r3, [pc, #108]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1f0      	bne.n	800a398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0308 	and.w	r3, r3, #8
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d036      	beq.n	800a430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d016      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3ca:	4b15      	ldr	r3, [pc, #84]	; (800a420 <HAL_RCC_OscConfig+0x248>)
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d0:	f7fc f9dc 	bl	800678c <HAL_GetTick>
 800a3d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3d6:	e008      	b.n	800a3ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3d8:	f7fc f9d8 	bl	800678c <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e167      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3ea:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <HAL_RCC_OscConfig+0x240>)
 800a3ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ee:	f003 0302 	and.w	r3, r3, #2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0f0      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x200>
 800a3f6:	e01b      	b.n	800a430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3f8:	4b09      	ldr	r3, [pc, #36]	; (800a420 <HAL_RCC_OscConfig+0x248>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3fe:	f7fc f9c5 	bl	800678c <HAL_GetTick>
 800a402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a404:	e00e      	b.n	800a424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a406:	f7fc f9c1 	bl	800678c <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d907      	bls.n	800a424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e150      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
 800a418:	40023800 	.word	0x40023800
 800a41c:	42470000 	.word	0x42470000
 800a420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a424:	4b88      	ldr	r3, [pc, #544]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a428:	f003 0302 	and.w	r3, r3, #2
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1ea      	bne.n	800a406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 8097 	beq.w	800a56c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a442:	4b81      	ldr	r3, [pc, #516]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10f      	bne.n	800a46e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a44e:	2300      	movs	r3, #0
 800a450:	60bb      	str	r3, [r7, #8]
 800a452:	4b7d      	ldr	r3, [pc, #500]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	4a7c      	ldr	r2, [pc, #496]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a45c:	6413      	str	r3, [r2, #64]	; 0x40
 800a45e:	4b7a      	ldr	r3, [pc, #488]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a466:	60bb      	str	r3, [r7, #8]
 800a468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a46a:	2301      	movs	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a46e:	4b77      	ldr	r3, [pc, #476]	; (800a64c <HAL_RCC_OscConfig+0x474>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a476:	2b00      	cmp	r3, #0
 800a478:	d118      	bne.n	800a4ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a47a:	4b74      	ldr	r3, [pc, #464]	; (800a64c <HAL_RCC_OscConfig+0x474>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a73      	ldr	r2, [pc, #460]	; (800a64c <HAL_RCC_OscConfig+0x474>)
 800a480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a486:	f7fc f981 	bl	800678c <HAL_GetTick>
 800a48a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a48c:	e008      	b.n	800a4a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a48e:	f7fc f97d 	bl	800678c <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e10c      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4a0:	4b6a      	ldr	r3, [pc, #424]	; (800a64c <HAL_RCC_OscConfig+0x474>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d0f0      	beq.n	800a48e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d106      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x2ea>
 800a4b4:	4b64      	ldr	r3, [pc, #400]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b8:	4a63      	ldr	r2, [pc, #396]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c0:	e01c      	b.n	800a4fc <HAL_RCC_OscConfig+0x324>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b05      	cmp	r3, #5
 800a4c8:	d10c      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x30c>
 800a4ca:	4b5f      	ldr	r3, [pc, #380]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ce:	4a5e      	ldr	r2, [pc, #376]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4d0:	f043 0304 	orr.w	r3, r3, #4
 800a4d4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4d6:	4b5c      	ldr	r3, [pc, #368]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4da:	4a5b      	ldr	r2, [pc, #364]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4dc:	f043 0301 	orr.w	r3, r3, #1
 800a4e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e2:	e00b      	b.n	800a4fc <HAL_RCC_OscConfig+0x324>
 800a4e4:	4b58      	ldr	r3, [pc, #352]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e8:	4a57      	ldr	r2, [pc, #348]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f0:	4b55      	ldr	r3, [pc, #340]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f4:	4a54      	ldr	r2, [pc, #336]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a4f6:	f023 0304 	bic.w	r3, r3, #4
 800a4fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d015      	beq.n	800a530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a504:	f7fc f942 	bl	800678c <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a50a:	e00a      	b.n	800a522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a50c:	f7fc f93e 	bl	800678c <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e0cb      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a522:	4b49      	ldr	r3, [pc, #292]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0ee      	beq.n	800a50c <HAL_RCC_OscConfig+0x334>
 800a52e:	e014      	b.n	800a55a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a530:	f7fc f92c 	bl	800678c <HAL_GetTick>
 800a534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a536:	e00a      	b.n	800a54e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a538:	f7fc f928 	bl	800678c <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	f241 3288 	movw	r2, #5000	; 0x1388
 800a546:	4293      	cmp	r3, r2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e0b5      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a54e:	4b3e      	ldr	r3, [pc, #248]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1ee      	bne.n	800a538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d105      	bne.n	800a56c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a560:	4b39      	ldr	r3, [pc, #228]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	4a38      	ldr	r2, [pc, #224]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a56a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80a1 	beq.w	800a6b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a576:	4b34      	ldr	r3, [pc, #208]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 030c 	and.w	r3, r3, #12
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d05c      	beq.n	800a63c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	2b02      	cmp	r3, #2
 800a588:	d141      	bne.n	800a60e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a58a:	4b31      	ldr	r3, [pc, #196]	; (800a650 <HAL_RCC_OscConfig+0x478>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a590:	f7fc f8fc 	bl	800678c <HAL_GetTick>
 800a594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a596:	e008      	b.n	800a5aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a598:	f7fc f8f8 	bl	800678c <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e087      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5aa:	4b27      	ldr	r3, [pc, #156]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f0      	bne.n	800a598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	69da      	ldr	r2, [r3, #28]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	019b      	lsls	r3, r3, #6
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5cc:	085b      	lsrs	r3, r3, #1
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	041b      	lsls	r3, r3, #16
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d8:	061b      	lsls	r3, r3, #24
 800a5da:	491b      	ldr	r1, [pc, #108]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5e0:	4b1b      	ldr	r3, [pc, #108]	; (800a650 <HAL_RCC_OscConfig+0x478>)
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5e6:	f7fc f8d1 	bl	800678c <HAL_GetTick>
 800a5ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5ec:	e008      	b.n	800a600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5ee:	f7fc f8cd 	bl	800678c <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e05c      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a600:	4b11      	ldr	r3, [pc, #68]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0f0      	beq.n	800a5ee <HAL_RCC_OscConfig+0x416>
 800a60c:	e054      	b.n	800a6b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a60e:	4b10      	ldr	r3, [pc, #64]	; (800a650 <HAL_RCC_OscConfig+0x478>)
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a614:	f7fc f8ba 	bl	800678c <HAL_GetTick>
 800a618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a61a:	e008      	b.n	800a62e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a61c:	f7fc f8b6 	bl	800678c <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	2b02      	cmp	r3, #2
 800a628:	d901      	bls.n	800a62e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e045      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a62e:	4b06      	ldr	r3, [pc, #24]	; (800a648 <HAL_RCC_OscConfig+0x470>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1f0      	bne.n	800a61c <HAL_RCC_OscConfig+0x444>
 800a63a:	e03d      	b.n	800a6b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d107      	bne.n	800a654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e038      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
 800a648:	40023800 	.word	0x40023800
 800a64c:	40007000 	.word	0x40007000
 800a650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a654:	4b1b      	ldr	r3, [pc, #108]	; (800a6c4 <HAL_RCC_OscConfig+0x4ec>)
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d028      	beq.n	800a6b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d121      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d11a      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a684:	4013      	ands	r3, r2
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a68a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d111      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69a:	085b      	lsrs	r3, r3, #1
 800a69c:	3b01      	subs	r3, #1
 800a69e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d107      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d001      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e000      	b.n	800a6ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3718      	adds	r7, #24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	40023800 	.word	0x40023800

0800a6c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0cc      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6dc:	4b68      	ldr	r3, [pc, #416]	; (800a880 <HAL_RCC_ClockConfig+0x1b8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d90c      	bls.n	800a704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ea:	4b65      	ldr	r3, [pc, #404]	; (800a880 <HAL_RCC_ClockConfig+0x1b8>)
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	b2d2      	uxtb	r2, r2
 800a6f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f2:	4b63      	ldr	r3, [pc, #396]	; (800a880 <HAL_RCC_ClockConfig+0x1b8>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d001      	beq.n	800a704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e0b8      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d020      	beq.n	800a752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a71c:	4b59      	ldr	r3, [pc, #356]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	4a58      	ldr	r2, [pc, #352]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d005      	beq.n	800a740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a734:	4b53      	ldr	r3, [pc, #332]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	4a52      	ldr	r2, [pc, #328]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a73a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a73e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a740:	4b50      	ldr	r3, [pc, #320]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	494d      	ldr	r1, [pc, #308]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d044      	beq.n	800a7e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d107      	bne.n	800a776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a766:	4b47      	ldr	r3, [pc, #284]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d119      	bne.n	800a7a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e07f      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d003      	beq.n	800a786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a782:	2b03      	cmp	r3, #3
 800a784:	d107      	bne.n	800a796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a786:	4b3f      	ldr	r3, [pc, #252]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e06f      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a796:	4b3b      	ldr	r3, [pc, #236]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e067      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7a6:	4b37      	ldr	r3, [pc, #220]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f023 0203 	bic.w	r2, r3, #3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	4934      	ldr	r1, [pc, #208]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a7b8:	f7fb ffe8 	bl	800678c <HAL_GetTick>
 800a7bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7be:	e00a      	b.n	800a7d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7c0:	f7fb ffe4 	bl	800678c <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e04f      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7d6:	4b2b      	ldr	r3, [pc, #172]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	f003 020c 	and.w	r2, r3, #12
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d1eb      	bne.n	800a7c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7e8:	4b25      	ldr	r3, [pc, #148]	; (800a880 <HAL_RCC_ClockConfig+0x1b8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d20c      	bcs.n	800a810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7f6:	4b22      	ldr	r3, [pc, #136]	; (800a880 <HAL_RCC_ClockConfig+0x1b8>)
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	b2d2      	uxtb	r2, r2
 800a7fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7fe:	4b20      	ldr	r3, [pc, #128]	; (800a880 <HAL_RCC_ClockConfig+0x1b8>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d001      	beq.n	800a810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e032      	b.n	800a876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d008      	beq.n	800a82e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a81c:	4b19      	ldr	r3, [pc, #100]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	4916      	ldr	r1, [pc, #88]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0308 	and.w	r3, r3, #8
 800a836:	2b00      	cmp	r3, #0
 800a838:	d009      	beq.n	800a84e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a83a:	4b12      	ldr	r3, [pc, #72]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	490e      	ldr	r1, [pc, #56]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a84e:	f000 f821 	bl	800a894 <HAL_RCC_GetSysClockFreq>
 800a852:	4602      	mov	r2, r0
 800a854:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <HAL_RCC_ClockConfig+0x1bc>)
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	091b      	lsrs	r3, r3, #4
 800a85a:	f003 030f 	and.w	r3, r3, #15
 800a85e:	490a      	ldr	r1, [pc, #40]	; (800a888 <HAL_RCC_ClockConfig+0x1c0>)
 800a860:	5ccb      	ldrb	r3, [r1, r3]
 800a862:	fa22 f303 	lsr.w	r3, r2, r3
 800a866:	4a09      	ldr	r2, [pc, #36]	; (800a88c <HAL_RCC_ClockConfig+0x1c4>)
 800a868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a86a:	4b09      	ldr	r3, [pc, #36]	; (800a890 <HAL_RCC_ClockConfig+0x1c8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7f9 f93a 	bl	8003ae8 <HAL_InitTick>

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	40023c00 	.word	0x40023c00
 800a884:	40023800 	.word	0x40023800
 800a888:	080118bc 	.word	0x080118bc
 800a88c:	200000e4 	.word	0x200000e4
 800a890:	200000e8 	.word	0x200000e8

0800a894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a898:	b090      	sub	sp, #64	; 0x40
 800a89a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	637b      	str	r3, [r7, #52]	; 0x34
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8ac:	4b59      	ldr	r3, [pc, #356]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f003 030c 	and.w	r3, r3, #12
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d00d      	beq.n	800a8d4 <HAL_RCC_GetSysClockFreq+0x40>
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	f200 80a1 	bhi.w	800aa00 <HAL_RCC_GetSysClockFreq+0x16c>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <HAL_RCC_GetSysClockFreq+0x34>
 800a8c2:	2b04      	cmp	r3, #4
 800a8c4:	d003      	beq.n	800a8ce <HAL_RCC_GetSysClockFreq+0x3a>
 800a8c6:	e09b      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8c8:	4b53      	ldr	r3, [pc, #332]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x184>)
 800a8ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a8cc:	e09b      	b.n	800aa06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8ce:	4b53      	ldr	r3, [pc, #332]	; (800aa1c <HAL_RCC_GetSysClockFreq+0x188>)
 800a8d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a8d2:	e098      	b.n	800aa06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8d4:	4b4f      	ldr	r3, [pc, #316]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8de:	4b4d      	ldr	r3, [pc, #308]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d028      	beq.n	800a93c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8ea:	4b4a      	ldr	r3, [pc, #296]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	099b      	lsrs	r3, r3, #6
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	623b      	str	r3, [r7, #32]
 800a8f4:	627a      	str	r2, [r7, #36]	; 0x24
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4b47      	ldr	r3, [pc, #284]	; (800aa1c <HAL_RCC_GetSysClockFreq+0x188>)
 800a900:	fb03 f201 	mul.w	r2, r3, r1
 800a904:	2300      	movs	r3, #0
 800a906:	fb00 f303 	mul.w	r3, r0, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	4a43      	ldr	r2, [pc, #268]	; (800aa1c <HAL_RCC_GetSysClockFreq+0x188>)
 800a90e:	fba0 1202 	umull	r1, r2, r0, r2
 800a912:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a914:	460a      	mov	r2, r1
 800a916:	62ba      	str	r2, [r7, #40]	; 0x28
 800a918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a91a:	4413      	add	r3, r2
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	2200      	movs	r2, #0
 800a922:	61bb      	str	r3, [r7, #24]
 800a924:	61fa      	str	r2, [r7, #28]
 800a926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a92a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a92e:	f7f6 f879 	bl	8000a24 <__aeabi_uldivmod>
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4613      	mov	r3, r2
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a93a:	e053      	b.n	800a9e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a93c:	4b35      	ldr	r3, [pc, #212]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x180>)
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	099b      	lsrs	r3, r3, #6
 800a942:	2200      	movs	r2, #0
 800a944:	613b      	str	r3, [r7, #16]
 800a946:	617a      	str	r2, [r7, #20]
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a94e:	f04f 0b00 	mov.w	fp, #0
 800a952:	4652      	mov	r2, sl
 800a954:	465b      	mov	r3, fp
 800a956:	f04f 0000 	mov.w	r0, #0
 800a95a:	f04f 0100 	mov.w	r1, #0
 800a95e:	0159      	lsls	r1, r3, #5
 800a960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a964:	0150      	lsls	r0, r2, #5
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	ebb2 080a 	subs.w	r8, r2, sl
 800a96e:	eb63 090b 	sbc.w	r9, r3, fp
 800a972:	f04f 0200 	mov.w	r2, #0
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a97e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a986:	ebb2 0408 	subs.w	r4, r2, r8
 800a98a:	eb63 0509 	sbc.w	r5, r3, r9
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	00eb      	lsls	r3, r5, #3
 800a998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a99c:	00e2      	lsls	r2, r4, #3
 800a99e:	4614      	mov	r4, r2
 800a9a0:	461d      	mov	r5, r3
 800a9a2:	eb14 030a 	adds.w	r3, r4, sl
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	eb45 030b 	adc.w	r3, r5, fp
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	028b      	lsls	r3, r1, #10
 800a9be:	4621      	mov	r1, r4
 800a9c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	028a      	lsls	r2, r1, #10
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	60fa      	str	r2, [r7, #12]
 800a9d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9d8:	f7f6 f824 	bl	8000a24 <__aeabi_uldivmod>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x180>)
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	0c1b      	lsrs	r3, r3, #16
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a9f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9fe:	e002      	b.n	800aa06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa00:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x184>)
 800aa02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800aa04:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3740      	adds	r7, #64	; 0x40
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa12:	bf00      	nop
 800aa14:	40023800 	.word	0x40023800
 800aa18:	00f42400 	.word	0x00f42400
 800aa1c:	017d7840 	.word	0x017d7840

0800aa20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa24:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa26:	681b      	ldr	r3, [r3, #0]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	200000e4 	.word	0x200000e4

0800aa38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa3c:	f7ff fff0 	bl	800aa20 <HAL_RCC_GetHCLKFreq>
 800aa40:	4602      	mov	r2, r0
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	0a9b      	lsrs	r3, r3, #10
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	4903      	ldr	r1, [pc, #12]	; (800aa5c <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa4e:	5ccb      	ldrb	r3, [r1, r3]
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	40023800 	.word	0x40023800
 800aa5c:	080118cc 	.word	0x080118cc

0800aa60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa64:	f7ff ffdc 	bl	800aa20 <HAL_RCC_GetHCLKFreq>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	0b5b      	lsrs	r3, r3, #13
 800aa70:	f003 0307 	and.w	r3, r3, #7
 800aa74:	4903      	ldr	r1, [pc, #12]	; (800aa84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa76:	5ccb      	ldrb	r3, [r1, r3]
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	40023800 	.word	0x40023800
 800aa84:	080118cc 	.word	0x080118cc

0800aa88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	220f      	movs	r2, #15
 800aa96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aa98:	4b12      	ldr	r3, [pc, #72]	; (800aae4 <HAL_RCC_GetClockConfig+0x5c>)
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f003 0203 	and.w	r2, r3, #3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800aaa4:	4b0f      	ldr	r3, [pc, #60]	; (800aae4 <HAL_RCC_GetClockConfig+0x5c>)
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800aab0:	4b0c      	ldr	r3, [pc, #48]	; (800aae4 <HAL_RCC_GetClockConfig+0x5c>)
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800aabc:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <HAL_RCC_GetClockConfig+0x5c>)
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	08db      	lsrs	r3, r3, #3
 800aac2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aaca:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <HAL_RCC_GetClockConfig+0x60>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0207 	and.w	r2, r3, #7
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	601a      	str	r2, [r3, #0]
}
 800aad6:	bf00      	nop
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	40023800 	.word	0x40023800
 800aae8:	40023c00 	.word	0x40023c00

0800aaec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e041      	b.n	800ab82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f839 	bl	800ab8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f000 fb8c 	bl	800b248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ab92:	bf00      	nop
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
	...

0800aba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d001      	beq.n	800abb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e044      	b.n	800ac42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a1e      	ldr	r2, [pc, #120]	; (800ac50 <HAL_TIM_Base_Start_IT+0xb0>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d018      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x6c>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe2:	d013      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x6c>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a1a      	ldr	r2, [pc, #104]	; (800ac54 <HAL_TIM_Base_Start_IT+0xb4>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d00e      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x6c>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a19      	ldr	r2, [pc, #100]	; (800ac58 <HAL_TIM_Base_Start_IT+0xb8>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d009      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x6c>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a17      	ldr	r2, [pc, #92]	; (800ac5c <HAL_TIM_Base_Start_IT+0xbc>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d004      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x6c>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a16      	ldr	r2, [pc, #88]	; (800ac60 <HAL_TIM_Base_Start_IT+0xc0>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d111      	bne.n	800ac30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b06      	cmp	r3, #6
 800ac1c:	d010      	beq.n	800ac40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f042 0201 	orr.w	r2, r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac2e:	e007      	b.n	800ac40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	40010000 	.word	0x40010000
 800ac54:	40000400 	.word	0x40000400
 800ac58:	40000800 	.word	0x40000800
 800ac5c:	40000c00 	.word	0x40000c00
 800ac60:	40014000 	.word	0x40014000

0800ac64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e041      	b.n	800acfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d106      	bne.n	800ac90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7f8 fe18 	bl	80038c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f000 fad0 	bl	800b248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d109      	bne.n	800ad28 <HAL_TIM_PWM_Start+0x24>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	bf14      	ite	ne
 800ad20:	2301      	movne	r3, #1
 800ad22:	2300      	moveq	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	e022      	b.n	800ad6e <HAL_TIM_PWM_Start+0x6a>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	d109      	bne.n	800ad42 <HAL_TIM_PWM_Start+0x3e>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	bf14      	ite	ne
 800ad3a:	2301      	movne	r3, #1
 800ad3c:	2300      	moveq	r3, #0
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	e015      	b.n	800ad6e <HAL_TIM_PWM_Start+0x6a>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b08      	cmp	r3, #8
 800ad46:	d109      	bne.n	800ad5c <HAL_TIM_PWM_Start+0x58>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	bf14      	ite	ne
 800ad54:	2301      	movne	r3, #1
 800ad56:	2300      	moveq	r3, #0
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	e008      	b.n	800ad6e <HAL_TIM_PWM_Start+0x6a>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	bf14      	ite	ne
 800ad68:	2301      	movne	r3, #1
 800ad6a:	2300      	moveq	r3, #0
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e068      	b.n	800ae48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d104      	bne.n	800ad86 <HAL_TIM_PWM_Start+0x82>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad84:	e013      	b.n	800adae <HAL_TIM_PWM_Start+0xaa>
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b04      	cmp	r3, #4
 800ad8a:	d104      	bne.n	800ad96 <HAL_TIM_PWM_Start+0x92>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad94:	e00b      	b.n	800adae <HAL_TIM_PWM_Start+0xaa>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b08      	cmp	r3, #8
 800ad9a:	d104      	bne.n	800ada6 <HAL_TIM_PWM_Start+0xa2>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ada4:	e003      	b.n	800adae <HAL_TIM_PWM_Start+0xaa>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2202      	movs	r2, #2
 800adaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2201      	movs	r2, #1
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fc52 	bl	800b660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a23      	ldr	r2, [pc, #140]	; (800ae50 <HAL_TIM_PWM_Start+0x14c>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d107      	bne.n	800add6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800add4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1d      	ldr	r2, [pc, #116]	; (800ae50 <HAL_TIM_PWM_Start+0x14c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d018      	beq.n	800ae12 <HAL_TIM_PWM_Start+0x10e>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade8:	d013      	beq.n	800ae12 <HAL_TIM_PWM_Start+0x10e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <HAL_TIM_PWM_Start+0x150>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00e      	beq.n	800ae12 <HAL_TIM_PWM_Start+0x10e>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a17      	ldr	r2, [pc, #92]	; (800ae58 <HAL_TIM_PWM_Start+0x154>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d009      	beq.n	800ae12 <HAL_TIM_PWM_Start+0x10e>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a16      	ldr	r2, [pc, #88]	; (800ae5c <HAL_TIM_PWM_Start+0x158>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d004      	beq.n	800ae12 <HAL_TIM_PWM_Start+0x10e>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a14      	ldr	r2, [pc, #80]	; (800ae60 <HAL_TIM_PWM_Start+0x15c>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d111      	bne.n	800ae36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2b06      	cmp	r3, #6
 800ae22:	d010      	beq.n	800ae46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f042 0201 	orr.w	r2, r2, #1
 800ae32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae34:	e007      	b.n	800ae46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f042 0201 	orr.w	r2, r2, #1
 800ae44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40010000 	.word	0x40010000
 800ae54:	40000400 	.word	0x40000400
 800ae58:	40000800 	.word	0x40000800
 800ae5c:	40000c00 	.word	0x40000c00
 800ae60:	40014000 	.word	0x40014000

0800ae64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d122      	bne.n	800aec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d11b      	bne.n	800aec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f06f 0202 	mvn.w	r2, #2
 800ae90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	f003 0303 	and.w	r3, r3, #3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9b0 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800aeac:	e005      	b.n	800aeba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9a2 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f9b3 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f003 0304 	and.w	r3, r3, #4
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d122      	bne.n	800af14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f003 0304 	and.w	r3, r3, #4
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d11b      	bne.n	800af14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0204 	mvn.w	r2, #4
 800aee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2202      	movs	r2, #2
 800aeea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f986 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800af00:	e005      	b.n	800af0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f978 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f989 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f003 0308 	and.w	r3, r3, #8
 800af1e:	2b08      	cmp	r3, #8
 800af20:	d122      	bne.n	800af68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f003 0308 	and.w	r3, r3, #8
 800af2c:	2b08      	cmp	r3, #8
 800af2e:	d11b      	bne.n	800af68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f06f 0208 	mvn.w	r2, #8
 800af38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2204      	movs	r2, #4
 800af3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	69db      	ldr	r3, [r3, #28]
 800af46:	f003 0303 	and.w	r3, r3, #3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f95c 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800af54:	e005      	b.n	800af62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f94e 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f95f 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	f003 0310 	and.w	r3, r3, #16
 800af72:	2b10      	cmp	r3, #16
 800af74:	d122      	bne.n	800afbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f003 0310 	and.w	r3, r3, #16
 800af80:	2b10      	cmp	r3, #16
 800af82:	d11b      	bne.n	800afbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f06f 0210 	mvn.w	r2, #16
 800af8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2208      	movs	r2, #8
 800af92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d003      	beq.n	800afaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f932 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800afa8:	e005      	b.n	800afb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f924 	bl	800b1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f935 	bl	800b220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d10e      	bne.n	800afe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d107      	bne.n	800afe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f06f 0201 	mvn.w	r2, #1
 800afe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7f8 fb92 	bl	800370c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff2:	2b80      	cmp	r3, #128	; 0x80
 800aff4:	d10e      	bne.n	800b014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b000:	2b80      	cmp	r3, #128	; 0x80
 800b002:	d107      	bne.n	800b014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b00c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fbc4 	bl	800b79c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01e:	2b40      	cmp	r3, #64	; 0x40
 800b020:	d10e      	bne.n	800b040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02c:	2b40      	cmp	r3, #64	; 0x40
 800b02e:	d107      	bne.n	800b040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f8fa 	bl	800b234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0320 	and.w	r3, r3, #32
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d10e      	bne.n	800b06c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b20      	cmp	r3, #32
 800b05a:	d107      	bne.n	800b06c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f06f 0220 	mvn.w	r2, #32
 800b064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fb8e 	bl	800b788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d101      	bne.n	800b092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b08e:	2302      	movs	r3, #2
 800b090:	e0ae      	b.n	800b1f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b0c      	cmp	r3, #12
 800b09e:	f200 809f 	bhi.w	800b1e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b0a2:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a8:	0800b0dd 	.word	0x0800b0dd
 800b0ac:	0800b1e1 	.word	0x0800b1e1
 800b0b0:	0800b1e1 	.word	0x0800b1e1
 800b0b4:	0800b1e1 	.word	0x0800b1e1
 800b0b8:	0800b11d 	.word	0x0800b11d
 800b0bc:	0800b1e1 	.word	0x0800b1e1
 800b0c0:	0800b1e1 	.word	0x0800b1e1
 800b0c4:	0800b1e1 	.word	0x0800b1e1
 800b0c8:	0800b15f 	.word	0x0800b15f
 800b0cc:	0800b1e1 	.word	0x0800b1e1
 800b0d0:	0800b1e1 	.word	0x0800b1e1
 800b0d4:	0800b1e1 	.word	0x0800b1e1
 800b0d8:	0800b19f 	.word	0x0800b19f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 f930 	bl	800b348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0208 	orr.w	r2, r2, #8
 800b0f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f022 0204 	bic.w	r2, r2, #4
 800b106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6999      	ldr	r1, [r3, #24]
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	691a      	ldr	r2, [r3, #16]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	619a      	str	r2, [r3, #24]
      break;
 800b11a:	e064      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68b9      	ldr	r1, [r7, #8]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f976 	bl	800b414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	699a      	ldr	r2, [r3, #24]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6999      	ldr	r1, [r3, #24]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	021a      	lsls	r2, r3, #8
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	619a      	str	r2, [r3, #24]
      break;
 800b15c:	e043      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f9c1 	bl	800b4ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	69da      	ldr	r2, [r3, #28]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f042 0208 	orr.w	r2, r2, #8
 800b178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	69da      	ldr	r2, [r3, #28]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0204 	bic.w	r2, r2, #4
 800b188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69d9      	ldr	r1, [r3, #28]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	61da      	str	r2, [r3, #28]
      break;
 800b19c:	e023      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 fa0b 	bl	800b5c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69da      	ldr	r2, [r3, #28]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69da      	ldr	r2, [r3, #28]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	69d9      	ldr	r1, [r3, #28]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	021a      	lsls	r2, r3, #8
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	61da      	str	r2, [r3, #28]
      break;
 800b1de:	e002      	b.n	800b1e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a34      	ldr	r2, [pc, #208]	; (800b32c <TIM_Base_SetConfig+0xe4>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d00f      	beq.n	800b280 <TIM_Base_SetConfig+0x38>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b266:	d00b      	beq.n	800b280 <TIM_Base_SetConfig+0x38>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a31      	ldr	r2, [pc, #196]	; (800b330 <TIM_Base_SetConfig+0xe8>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d007      	beq.n	800b280 <TIM_Base_SetConfig+0x38>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a30      	ldr	r2, [pc, #192]	; (800b334 <TIM_Base_SetConfig+0xec>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d003      	beq.n	800b280 <TIM_Base_SetConfig+0x38>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a2f      	ldr	r2, [pc, #188]	; (800b338 <TIM_Base_SetConfig+0xf0>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d108      	bne.n	800b292 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4313      	orrs	r3, r2
 800b290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a25      	ldr	r2, [pc, #148]	; (800b32c <TIM_Base_SetConfig+0xe4>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d01b      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a0:	d017      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a22      	ldr	r2, [pc, #136]	; (800b330 <TIM_Base_SetConfig+0xe8>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d013      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a21      	ldr	r2, [pc, #132]	; (800b334 <TIM_Base_SetConfig+0xec>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d00f      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a20      	ldr	r2, [pc, #128]	; (800b338 <TIM_Base_SetConfig+0xf0>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d00b      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a1f      	ldr	r2, [pc, #124]	; (800b33c <TIM_Base_SetConfig+0xf4>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d007      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1e      	ldr	r2, [pc, #120]	; (800b340 <TIM_Base_SetConfig+0xf8>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d003      	beq.n	800b2d2 <TIM_Base_SetConfig+0x8a>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1d      	ldr	r2, [pc, #116]	; (800b344 <TIM_Base_SetConfig+0xfc>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d108      	bne.n	800b2e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	689a      	ldr	r2, [r3, #8]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a08      	ldr	r2, [pc, #32]	; (800b32c <TIM_Base_SetConfig+0xe4>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d103      	bne.n	800b318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	691a      	ldr	r2, [r3, #16]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	615a      	str	r2, [r3, #20]
}
 800b31e:	bf00      	nop
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	40010000 	.word	0x40010000
 800b330:	40000400 	.word	0x40000400
 800b334:	40000800 	.word	0x40000800
 800b338:	40000c00 	.word	0x40000c00
 800b33c:	40014000 	.word	0x40014000
 800b340:	40014400 	.word	0x40014400
 800b344:	40014800 	.word	0x40014800

0800b348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	f023 0201 	bic.w	r2, r3, #1
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f023 0303 	bic.w	r3, r3, #3
 800b37e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f023 0302 	bic.w	r3, r3, #2
 800b390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	4313      	orrs	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a1c      	ldr	r2, [pc, #112]	; (800b410 <TIM_OC1_SetConfig+0xc8>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d10c      	bne.n	800b3be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f023 0308 	bic.w	r3, r3, #8
 800b3aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f023 0304 	bic.w	r3, r3, #4
 800b3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a13      	ldr	r2, [pc, #76]	; (800b410 <TIM_OC1_SetConfig+0xc8>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d111      	bne.n	800b3ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	693a      	ldr	r2, [r7, #16]
 800b3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	621a      	str	r2, [r3, #32]
}
 800b404:	bf00      	nop
 800b406:	371c      	adds	r7, #28
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	40010000 	.word	0x40010000

0800b414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b414:	b480      	push	{r7}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	f023 0210 	bic.w	r2, r3, #16
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	021b      	lsls	r3, r3, #8
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4313      	orrs	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f023 0320 	bic.w	r3, r3, #32
 800b45e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a1e      	ldr	r2, [pc, #120]	; (800b4e8 <TIM_OC2_SetConfig+0xd4>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d10d      	bne.n	800b490 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	011b      	lsls	r3, r3, #4
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	4313      	orrs	r3, r2
 800b486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b48e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a15      	ldr	r2, [pc, #84]	; (800b4e8 <TIM_OC2_SetConfig+0xd4>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d113      	bne.n	800b4c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b49e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	621a      	str	r2, [r3, #32]
}
 800b4da:	bf00      	nop
 800b4dc:	371c      	adds	r7, #28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	40010000 	.word	0x40010000

0800b4ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f023 0303 	bic.w	r3, r3, #3
 800b522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	021b      	lsls	r3, r3, #8
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	4313      	orrs	r3, r2
 800b540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a1d      	ldr	r2, [pc, #116]	; (800b5bc <TIM_OC3_SetConfig+0xd0>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d10d      	bne.n	800b566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	021b      	lsls	r3, r3, #8
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a14      	ldr	r2, [pc, #80]	; (800b5bc <TIM_OC3_SetConfig+0xd0>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d113      	bne.n	800b596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	4313      	orrs	r3, r2
 800b588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	011b      	lsls	r3, r3, #4
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	685a      	ldr	r2, [r3, #4]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	621a      	str	r2, [r3, #32]
}
 800b5b0:	bf00      	nop
 800b5b2:	371c      	adds	r7, #28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	40010000 	.word	0x40010000

0800b5c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	031b      	lsls	r3, r3, #12
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a10      	ldr	r2, [pc, #64]	; (800b65c <TIM_OC4_SetConfig+0x9c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d109      	bne.n	800b634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	019b      	lsls	r3, r3, #6
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	621a      	str	r2, [r3, #32]
}
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	40010000 	.word	0x40010000

0800b660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f003 031f 	and.w	r3, r3, #31
 800b672:	2201      	movs	r2, #1
 800b674:	fa02 f303 	lsl.w	r3, r2, r3
 800b678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a1a      	ldr	r2, [r3, #32]
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	43db      	mvns	r3, r3
 800b682:	401a      	ands	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a1a      	ldr	r2, [r3, #32]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f003 031f 	and.w	r3, r3, #31
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	fa01 f303 	lsl.w	r3, r1, r3
 800b698:	431a      	orrs	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	621a      	str	r2, [r3, #32]
}
 800b69e:	bf00      	nop
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
	...

0800b6ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d101      	bne.n	800b6c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	e050      	b.n	800b766 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1c      	ldr	r2, [pc, #112]	; (800b774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d018      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b710:	d013      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a18      	ldr	r2, [pc, #96]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d00e      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a16      	ldr	r2, [pc, #88]	; (800b77c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d009      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a15      	ldr	r2, [pc, #84]	; (800b780 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d004      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a13      	ldr	r2, [pc, #76]	; (800b784 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d10c      	bne.n	800b754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	40010000 	.word	0x40010000
 800b778:	40000400 	.word	0x40000400
 800b77c:	40000800 	.word	0x40000800
 800b780:	40000c00 	.word	0x40000c00
 800b784:	40014000 	.word	0x40014000

0800b788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d101      	bne.n	800b7c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e03f      	b.n	800b842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d106      	bne.n	800b7dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7f8 f8ce 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2224      	movs	r2, #36	; 0x24
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68da      	ldr	r2, [r3, #12]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 ff8b 	bl	800c710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691a      	ldr	r2, [r3, #16]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	695a      	ldr	r2, [r3, #20]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68da      	ldr	r2, [r3, #12]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2220      	movs	r2, #32
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e021      	b.n	800b8a0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2224      	movs	r2, #36	; 0x24
 800b860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b872:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7f8 f903 	bl	8003a80 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	; 0x28
 800b8ac:	af02      	add	r7, sp, #8
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	d17c      	bne.n	800b9c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <HAL_UART_Transmit+0x2c>
 800b8ce:	88fb      	ldrh	r3, [r7, #6]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e075      	b.n	800b9c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d101      	bne.n	800b8e6 <HAL_UART_Transmit+0x3e>
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e06e      	b.n	800b9c4 <HAL_UART_Transmit+0x11c>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2221      	movs	r2, #33	; 0x21
 800b8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8fc:	f7fa ff46 	bl	800678c <HAL_GetTick>
 800b900:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	88fa      	ldrh	r2, [r7, #6]
 800b906:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	88fa      	ldrh	r2, [r7, #6]
 800b90c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b916:	d108      	bne.n	800b92a <HAL_UART_Transmit+0x82>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d104      	bne.n	800b92a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	61bb      	str	r3, [r7, #24]
 800b928:	e003      	b.n	800b932 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b93a:	e02a      	b.n	800b992 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2200      	movs	r2, #0
 800b944:	2180      	movs	r1, #128	; 0x80
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 fc3c 	bl	800c1c4 <UART_WaitOnFlagUntilTimeout>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b952:	2303      	movs	r3, #3
 800b954:	e036      	b.n	800b9c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10b      	bne.n	800b974 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b96a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	3302      	adds	r3, #2
 800b970:	61bb      	str	r3, [r7, #24]
 800b972:	e007      	b.n	800b984 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	781a      	ldrb	r2, [r3, #0]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	3301      	adds	r3, #1
 800b982:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b988:	b29b      	uxth	r3, r3
 800b98a:	3b01      	subs	r3, #1
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b996:	b29b      	uxth	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1cf      	bne.n	800b93c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2140      	movs	r1, #64	; 0x40
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 fc0c 	bl	800c1c4 <UART_WaitOnFlagUntilTimeout>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e006      	b.n	800b9c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e000      	b.n	800b9c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b9c2:	2302      	movs	r3, #2
  }
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3720      	adds	r7, #32
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	d11d      	bne.n	800ba22 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <HAL_UART_Receive_IT+0x26>
 800b9ec:	88fb      	ldrh	r3, [r7, #6]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e016      	b.n	800ba24 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_UART_Receive_IT+0x38>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e00f      	b.n	800ba24 <HAL_UART_Receive_IT+0x58>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ba12:	88fb      	ldrh	r3, [r7, #6]
 800ba14:	461a      	mov	r2, r3
 800ba16:	68b9      	ldr	r1, [r7, #8]
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 fc41 	bl	800c2a0 <UART_Start_Receive_IT>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	e000      	b.n	800ba24 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ba22:	2302      	movs	r3, #2
  }
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b0a2      	sub	sp, #136	; 0x88
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800ba34:	2301      	movs	r3, #1
 800ba36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	330c      	adds	r3, #12
 800ba40:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba44:	e853 3f00 	ldrex	r3, [r3]
 800ba48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba4c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800ba50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	330c      	adds	r3, #12
 800ba5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba60:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e3      	bne.n	800ba3a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3314      	adds	r3, #20
 800ba78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7c:	e853 3f00 	ldrex	r3, [r3]
 800ba80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba84:	f023 0301 	bic.w	r3, r3, #1
 800ba88:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3314      	adds	r3, #20
 800ba90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ba92:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba9a:	e841 2300 	strex	r3, r2, [r1]
 800ba9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800baa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1e5      	bne.n	800ba72 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d119      	bne.n	800bae2 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	330c      	adds	r3, #12
 800bab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	e853 3f00 	ldrex	r3, [r3]
 800babc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	f023 0310 	bic.w	r3, r3, #16
 800bac4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	330c      	adds	r3, #12
 800bacc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bace:	647a      	str	r2, [r7, #68]	; 0x44
 800bad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bad6:	e841 2300 	strex	r3, r2, [r1]
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800badc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1e5      	bne.n	800baae <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00f      	beq.n	800bb0a <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf4:	2b80      	cmp	r3, #128	; 0x80
 800baf6:	d104      	bne.n	800bb02 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	4a53      	ldr	r2, [pc, #332]	; (800bc4c <HAL_UART_Abort_IT+0x220>)
 800bafe:	651a      	str	r2, [r3, #80]	; 0x50
 800bb00:	e003      	b.n	800bb0a <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb06:	2200      	movs	r2, #0
 800bb08:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00f      	beq.n	800bb32 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb1c:	2b40      	cmp	r3, #64	; 0x40
 800bb1e:	d104      	bne.n	800bb2a <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb24:	4a4a      	ldr	r2, [pc, #296]	; (800bc50 <HAL_UART_Abort_IT+0x224>)
 800bb26:	651a      	str	r2, [r3, #80]	; 0x50
 800bb28:	e003      	b.n	800bb32 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb2e:	2200      	movs	r2, #0
 800bb30:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	695b      	ldr	r3, [r3, #20]
 800bb38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb3c:	2b80      	cmp	r3, #128	; 0x80
 800bb3e:	d12d      	bne.n	800bb9c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3314      	adds	r3, #20
 800bb46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	623b      	str	r3, [r7, #32]
   return(result);
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb56:	677b      	str	r3, [r7, #116]	; 0x74
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3314      	adds	r3, #20
 800bb5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bb60:	633a      	str	r2, [r7, #48]	; 0x30
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb68:	e841 2300 	strex	r3, r2, [r1]
 800bb6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e5      	bne.n	800bb40 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00f      	beq.n	800bb9c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fb fc23 	bl	80073cc <HAL_DMA_Abort_IT>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	2200      	movs	r2, #0
 800bb92:	651a      	str	r2, [r3, #80]	; 0x50
 800bb94:	e002      	b.n	800bb9c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800bb96:	2300      	movs	r3, #0
 800bb98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba6:	2b40      	cmp	r3, #64	; 0x40
 800bba8:	d130      	bne.n	800bc0c <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3314      	adds	r3, #20
 800bbb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc0:	673b      	str	r3, [r7, #112]	; 0x70
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3314      	adds	r3, #20
 800bbc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bbca:	61fa      	str	r2, [r7, #28]
 800bbcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	69b9      	ldr	r1, [r7, #24]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	617b      	str	r3, [r7, #20]
   return(result);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e5      	bne.n	800bbaa <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d012      	beq.n	800bc0c <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fb fbee 	bl	80073cc <HAL_DMA_Abort_IT>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc04:	e002      	b.n	800bc0c <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800bc0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d116      	bne.n	800bc42 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2220      	movs	r2, #32
 800bc32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 faab 	bl	800c198 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3788      	adds	r7, #136	; 0x88
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	0800c40b 	.word	0x0800c40b
 800bc50:	0800c46b 	.word	0x0800c46b

0800bc54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b0ba      	sub	sp, #232	; 0xe8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc8a:	f003 030f 	and.w	r3, r3, #15
 800bc8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10f      	bne.n	800bcba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9e:	f003 0320 	and.w	r3, r3, #32
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <HAL_UART_IRQHandler+0x66>
 800bca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d003      	beq.n	800bcba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fc71 	bl	800c59a <UART_Receive_IT>
      return;
 800bcb8:	e256      	b.n	800c168 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bcba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 80de 	beq.w	800be80 <HAL_UART_IRQHandler+0x22c>
 800bcc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d106      	bne.n	800bcde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bcd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 80d1 	beq.w	800be80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <HAL_UART_IRQHandler+0xae>
 800bcea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f043 0201 	orr.w	r2, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	f003 0304 	and.w	r3, r3, #4
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00b      	beq.n	800bd26 <HAL_UART_IRQHandler+0xd2>
 800bd0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d005      	beq.n	800bd26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	f043 0202 	orr.w	r2, r3, #2
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <HAL_UART_IRQHandler+0xf6>
 800bd32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d005      	beq.n	800bd4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	f043 0204 	orr.w	r2, r3, #4
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd4e:	f003 0308 	and.w	r3, r3, #8
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d011      	beq.n	800bd7a <HAL_UART_IRQHandler+0x126>
 800bd56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd5a:	f003 0320 	and.w	r3, r3, #32
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d105      	bne.n	800bd6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d005      	beq.n	800bd7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd72:	f043 0208 	orr.w	r2, r3, #8
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 81ed 	beq.w	800c15e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd88:	f003 0320 	and.w	r3, r3, #32
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d008      	beq.n	800bda2 <HAL_UART_IRQHandler+0x14e>
 800bd90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd94:	f003 0320 	and.w	r3, r3, #32
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fbfc 	bl	800c59a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b40      	cmp	r3, #64	; 0x40
 800bdae:	bf0c      	ite	eq
 800bdb0:	2301      	moveq	r3, #1
 800bdb2:	2300      	movne	r3, #0
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbe:	f003 0308 	and.w	r3, r3, #8
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d103      	bne.n	800bdce <HAL_UART_IRQHandler+0x17a>
 800bdc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d04f      	beq.n	800be6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 faa4 	bl	800c31c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdde:	2b40      	cmp	r3, #64	; 0x40
 800bde0:	d141      	bne.n	800be66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3314      	adds	r3, #20
 800bde8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3314      	adds	r3, #20
 800be0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1d9      	bne.n	800bde2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be32:	2b00      	cmp	r3, #0
 800be34:	d013      	beq.n	800be5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3a:	4a7d      	ldr	r2, [pc, #500]	; (800c030 <HAL_UART_IRQHandler+0x3dc>)
 800be3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be42:	4618      	mov	r0, r3
 800be44:	f7fb fac2 	bl	80073cc <HAL_DMA_Abort_IT>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d016      	beq.n	800be7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be5c:	e00e      	b.n	800be7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f990 	bl	800c184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be64:	e00a      	b.n	800be7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f98c 	bl	800c184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be6c:	e006      	b.n	800be7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f988 	bl	800c184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be7a:	e170      	b.n	800c15e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be7c:	bf00      	nop
    return;
 800be7e:	e16e      	b.n	800c15e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be84:	2b01      	cmp	r3, #1
 800be86:	f040 814a 	bne.w	800c11e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be8e:	f003 0310 	and.w	r3, r3, #16
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8143 	beq.w	800c11e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be9c:	f003 0310 	and.w	r3, r3, #16
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 813c 	beq.w	800c11e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bea6:	2300      	movs	r3, #0
 800bea8:	60bb      	str	r3, [r7, #8]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	60bb      	str	r3, [r7, #8]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	60bb      	str	r3, [r7, #8]
 800beba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec6:	2b40      	cmp	r3, #64	; 0x40
 800bec8:	f040 80b4 	bne.w	800c034 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bed8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 8140 	beq.w	800c162 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800beea:	429a      	cmp	r2, r3
 800beec:	f080 8139 	bcs.w	800c162 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bef6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf02:	f000 8088 	beq.w	800c016 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	330c      	adds	r3, #12
 800bf0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	330c      	adds	r3, #12
 800bf2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bf32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf42:	e841 2300 	strex	r3, r2, [r1]
 800bf46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1d9      	bne.n	800bf06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3314      	adds	r3, #20
 800bf58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf5c:	e853 3f00 	ldrex	r3, [r3]
 800bf60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf64:	f023 0301 	bic.w	r3, r3, #1
 800bf68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3314      	adds	r3, #20
 800bf72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf82:	e841 2300 	strex	r3, r2, [r1]
 800bf86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1e1      	bne.n	800bf52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3314      	adds	r3, #20
 800bf94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3314      	adds	r3, #20
 800bfae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bfb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfba:	e841 2300 	strex	r3, r2, [r1]
 800bfbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1e3      	bne.n	800bf8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2220      	movs	r2, #32
 800bfca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	330c      	adds	r3, #12
 800bfda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfde:	e853 3f00 	ldrex	r3, [r3]
 800bfe2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfe6:	f023 0310 	bic.w	r3, r3, #16
 800bfea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	330c      	adds	r3, #12
 800bff4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bff8:	65ba      	str	r2, [r7, #88]	; 0x58
 800bffa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c000:	e841 2300 	strex	r3, r2, [r1]
 800c004:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e3      	bne.n	800bfd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c010:	4618      	mov	r0, r3
 800c012:	f7fb f96b 	bl	80072ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c01e:	b29b      	uxth	r3, r3
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	b29b      	uxth	r3, r3
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f8c0 	bl	800c1ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c02c:	e099      	b.n	800c162 <HAL_UART_IRQHandler+0x50e>
 800c02e:	bf00      	nop
 800c030:	0800c3e3 	.word	0x0800c3e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c048:	b29b      	uxth	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 808b 	beq.w	800c166 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 8086 	beq.w	800c166 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	330c      	adds	r3, #12
 800c060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	330c      	adds	r3, #12
 800c07a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c07e:	647a      	str	r2, [r7, #68]	; 0x44
 800c080:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e3      	bne.n	800c05a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3314      	adds	r3, #20
 800c098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c0a2:	6a3b      	ldr	r3, [r7, #32]
 800c0a4:	f023 0301 	bic.w	r3, r3, #1
 800c0a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3314      	adds	r3, #20
 800c0b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c0b6:	633a      	str	r2, [r7, #48]	; 0x30
 800c0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e3      	bne.n	800c092 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	330c      	adds	r3, #12
 800c0de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	e853 3f00 	ldrex	r3, [r3]
 800c0e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0310 	bic.w	r3, r3, #16
 800c0ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	330c      	adds	r3, #12
 800c0f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c0fc:	61fa      	str	r2, [r7, #28]
 800c0fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	69b9      	ldr	r1, [r7, #24]
 800c102:	69fa      	ldr	r2, [r7, #28]
 800c104:	e841 2300 	strex	r3, r2, [r1]
 800c108:	617b      	str	r3, [r7, #20]
   return(result);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1e3      	bne.n	800c0d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f848 	bl	800c1ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c11c:	e023      	b.n	800c166 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c126:	2b00      	cmp	r3, #0
 800c128:	d009      	beq.n	800c13e <HAL_UART_IRQHandler+0x4ea>
 800c12a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f9c7 	bl	800c4ca <UART_Transmit_IT>
    return;
 800c13c:	e014      	b.n	800c168 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <HAL_UART_IRQHandler+0x514>
 800c14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c152:	2b00      	cmp	r3, #0
 800c154:	d008      	beq.n	800c168 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fa07 	bl	800c56a <UART_EndTransmit_IT>
    return;
 800c15c:	e004      	b.n	800c168 <HAL_UART_IRQHandler+0x514>
    return;
 800c15e:	bf00      	nop
 800c160:	e002      	b.n	800c168 <HAL_UART_IRQHandler+0x514>
      return;
 800c162:	bf00      	nop
 800c164:	e000      	b.n	800c168 <HAL_UART_IRQHandler+0x514>
      return;
 800c166:	bf00      	nop
  }
}
 800c168:	37e8      	adds	r7, #232	; 0xe8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop

0800c170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c18c:	bf00      	nop
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b090      	sub	sp, #64	; 0x40
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1d4:	e050      	b.n	800c278 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1dc:	d04c      	beq.n	800c278 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d007      	beq.n	800c1f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1e4:	f7fa fad2 	bl	800678c <HAL_GetTick>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d241      	bcs.n	800c278 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	330c      	adds	r3, #12
 800c1fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	e853 3f00 	ldrex	r3, [r3]
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	330c      	adds	r3, #12
 800c212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c214:	637a      	str	r2, [r7, #52]	; 0x34
 800c216:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e5      	bne.n	800c1f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3314      	adds	r3, #20
 800c22e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	e853 3f00 	ldrex	r3, [r3]
 800c236:	613b      	str	r3, [r7, #16]
   return(result);
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f023 0301 	bic.w	r3, r3, #1
 800c23e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3314      	adds	r3, #20
 800c246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c248:	623a      	str	r2, [r7, #32]
 800c24a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24c:	69f9      	ldr	r1, [r7, #28]
 800c24e:	6a3a      	ldr	r2, [r7, #32]
 800c250:	e841 2300 	strex	r3, r2, [r1]
 800c254:	61bb      	str	r3, [r7, #24]
   return(result);
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e5      	bne.n	800c228 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2220      	movs	r2, #32
 800c260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2220      	movs	r2, #32
 800c268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e00f      	b.n	800c298 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4013      	ands	r3, r2
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	429a      	cmp	r2, r3
 800c286:	bf0c      	ite	eq
 800c288:	2301      	moveq	r3, #1
 800c28a:	2300      	movne	r3, #0
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	461a      	mov	r2, r3
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	429a      	cmp	r2, r3
 800c294:	d09f      	beq.n	800c1d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3740      	adds	r7, #64	; 0x40
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	88fa      	ldrh	r2, [r7, #6]
 800c2be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2222      	movs	r2, #34	; 0x22
 800c2ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d007      	beq.n	800c2ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68da      	ldr	r2, [r3, #12]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	695a      	ldr	r2, [r3, #20]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f042 0201 	orr.w	r2, r2, #1
 800c2fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f042 0220 	orr.w	r2, r2, #32
 800c30c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b095      	sub	sp, #84	; 0x54
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	330c      	adds	r3, #12
 800c32a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32e:	e853 3f00 	ldrex	r3, [r3]
 800c332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c33a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	330c      	adds	r3, #12
 800c342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c344:	643a      	str	r2, [r7, #64]	; 0x40
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c34a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e5      	bne.n	800c324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3314      	adds	r3, #20
 800c35e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	e853 3f00 	ldrex	r3, [r3]
 800c366:	61fb      	str	r3, [r7, #28]
   return(result);
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	f023 0301 	bic.w	r3, r3, #1
 800c36e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3314      	adds	r3, #20
 800c376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c37a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c380:	e841 2300 	strex	r3, r2, [r1]
 800c384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1e5      	bne.n	800c358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c390:	2b01      	cmp	r3, #1
 800c392:	d119      	bne.n	800c3c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	330c      	adds	r3, #12
 800c39a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	f023 0310 	bic.w	r3, r3, #16
 800c3aa:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	330c      	adds	r3, #12
 800c3b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3b4:	61ba      	str	r2, [r7, #24]
 800c3b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b8:	6979      	ldr	r1, [r7, #20]
 800c3ba:	69ba      	ldr	r2, [r7, #24]
 800c3bc:	e841 2300 	strex	r3, r2, [r1]
 800c3c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1e5      	bne.n	800c394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c3d6:	bf00      	nop
 800c3d8:	3754      	adds	r7, #84	; 0x54
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff fec1 	bl	800c184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c402:	bf00      	nop
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c416:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41c:	2200      	movs	r2, #0
 800c41e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	2b00      	cmp	r3, #0
 800c426:	d004      	beq.n	800c432 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d117      	bne.n	800c462 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2220      	movs	r2, #32
 800c448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2220      	movs	r2, #32
 800c450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff fe9c 	bl	800c198 <HAL_UART_AbortCpltCallback>
 800c460:	e000      	b.n	800c464 <UART_DMATxAbortCallback+0x5a>
      return;
 800c462:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c476:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47c:	2200      	movs	r2, #0
 800c47e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c484:	2b00      	cmp	r3, #0
 800c486:	d004      	beq.n	800c492 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d117      	bne.n	800c4c2 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7ff fe6c 	bl	800c198 <HAL_UART_AbortCpltCallback>
 800c4c0:	e000      	b.n	800c4c4 <UART_DMARxAbortCallback+0x5a>
      return;
 800c4c2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b085      	sub	sp, #20
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b21      	cmp	r3, #33	; 0x21
 800c4dc:	d13e      	bne.n	800c55c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4e6:	d114      	bne.n	800c512 <UART_Transmit_IT+0x48>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d110      	bne.n	800c512 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a1b      	ldr	r3, [r3, #32]
 800c4f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c504:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	1c9a      	adds	r2, r3, #2
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	621a      	str	r2, [r3, #32]
 800c510:	e008      	b.n	800c524 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	1c59      	adds	r1, r3, #1
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	6211      	str	r1, [r2, #32]
 800c51c:	781a      	ldrb	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c528:	b29b      	uxth	r3, r3
 800c52a:	3b01      	subs	r3, #1
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	4619      	mov	r1, r3
 800c532:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10f      	bne.n	800c558 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	68da      	ldr	r2, [r3, #12]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c546:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c556:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	e000      	b.n	800c55e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c55c:	2302      	movs	r3, #2
  }
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b082      	sub	sp, #8
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c580:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2220      	movs	r2, #32
 800c586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7ff fdf0 	bl	800c170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b08c      	sub	sp, #48	; 0x30
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b22      	cmp	r3, #34	; 0x22
 800c5ac:	f040 80ab 	bne.w	800c706 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b8:	d117      	bne.n	800c5ea <UART_Receive_IT+0x50>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d113      	bne.n	800c5ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e2:	1c9a      	adds	r2, r3, #2
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	629a      	str	r2, [r3, #40]	; 0x28
 800c5e8:	e026      	b.n	800c638 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5fc:	d007      	beq.n	800c60e <UART_Receive_IT+0x74>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10a      	bne.n	800c61c <UART_Receive_IT+0x82>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d106      	bne.n	800c61c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	b2da      	uxtb	r2, r3
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	e008      	b.n	800c62e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	3b01      	subs	r3, #1
 800c640:	b29b      	uxth	r3, r3
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	4619      	mov	r1, r3
 800c646:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d15a      	bne.n	800c702 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68da      	ldr	r2, [r3, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f022 0220 	bic.w	r2, r2, #32
 800c65a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68da      	ldr	r2, [r3, #12]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c66a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	695a      	ldr	r2, [r3, #20]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f022 0201 	bic.w	r2, r2, #1
 800c67a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2220      	movs	r2, #32
 800c680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d135      	bne.n	800c6f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	330c      	adds	r3, #12
 800c698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	e853 3f00 	ldrex	r3, [r3]
 800c6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	f023 0310 	bic.w	r3, r3, #16
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	330c      	adds	r3, #12
 800c6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6b2:	623a      	str	r2, [r7, #32]
 800c6b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b6:	69f9      	ldr	r1, [r7, #28]
 800c6b8:	6a3a      	ldr	r2, [r7, #32]
 800c6ba:	e841 2300 	strex	r3, r2, [r1]
 800c6be:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1e5      	bne.n	800c692 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0310 	and.w	r3, r3, #16
 800c6d0:	2b10      	cmp	r3, #16
 800c6d2:	d10a      	bne.n	800c6ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff fd5b 	bl	800c1ac <HAL_UARTEx_RxEventCallback>
 800c6f6:	e002      	b.n	800c6fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7f6 ffe3 	bl	80036c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e002      	b.n	800c708 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	e000      	b.n	800c708 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c706:	2302      	movs	r3, #2
  }
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3730      	adds	r7, #48	; 0x30
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c714:	b0c0      	sub	sp, #256	; 0x100
 800c716:	af00      	add	r7, sp, #0
 800c718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c72c:	68d9      	ldr	r1, [r3, #12]
 800c72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	ea40 0301 	orr.w	r3, r0, r1
 800c738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c73e:	689a      	ldr	r2, [r3, #8]
 800c740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	431a      	orrs	r2, r3
 800c748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	431a      	orrs	r2, r3
 800c750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	4313      	orrs	r3, r2
 800c758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c768:	f021 010c 	bic.w	r1, r1, #12
 800c76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c776:	430b      	orrs	r3, r1
 800c778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c78a:	6999      	ldr	r1, [r3, #24]
 800c78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	ea40 0301 	orr.w	r3, r0, r1
 800c796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	4b8f      	ldr	r3, [pc, #572]	; (800c9dc <UART_SetConfig+0x2cc>)
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d005      	beq.n	800c7b0 <UART_SetConfig+0xa0>
 800c7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	4b8d      	ldr	r3, [pc, #564]	; (800c9e0 <UART_SetConfig+0x2d0>)
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d104      	bne.n	800c7ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7b0:	f7fe f956 	bl	800aa60 <HAL_RCC_GetPCLK2Freq>
 800c7b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c7b8:	e003      	b.n	800c7c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c7ba:	f7fe f93d 	bl	800aa38 <HAL_RCC_GetPCLK1Freq>
 800c7be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7cc:	f040 810c 	bne.w	800c9e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c7da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c7de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c7e2:	4622      	mov	r2, r4
 800c7e4:	462b      	mov	r3, r5
 800c7e6:	1891      	adds	r1, r2, r2
 800c7e8:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7ea:	415b      	adcs	r3, r3
 800c7ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	eb12 0801 	adds.w	r8, r2, r1
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	eb43 0901 	adc.w	r9, r3, r1
 800c7fe:	f04f 0200 	mov.w	r2, #0
 800c802:	f04f 0300 	mov.w	r3, #0
 800c806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c80a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c80e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c812:	4690      	mov	r8, r2
 800c814:	4699      	mov	r9, r3
 800c816:	4623      	mov	r3, r4
 800c818:	eb18 0303 	adds.w	r3, r8, r3
 800c81c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c820:	462b      	mov	r3, r5
 800c822:	eb49 0303 	adc.w	r3, r9, r3
 800c826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c83a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c83e:	460b      	mov	r3, r1
 800c840:	18db      	adds	r3, r3, r3
 800c842:	653b      	str	r3, [r7, #80]	; 0x50
 800c844:	4613      	mov	r3, r2
 800c846:	eb42 0303 	adc.w	r3, r2, r3
 800c84a:	657b      	str	r3, [r7, #84]	; 0x54
 800c84c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c854:	f7f4 f8e6 	bl	8000a24 <__aeabi_uldivmod>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4b61      	ldr	r3, [pc, #388]	; (800c9e4 <UART_SetConfig+0x2d4>)
 800c85e:	fba3 2302 	umull	r2, r3, r3, r2
 800c862:	095b      	lsrs	r3, r3, #5
 800c864:	011c      	lsls	r4, r3, #4
 800c866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c86a:	2200      	movs	r2, #0
 800c86c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c878:	4642      	mov	r2, r8
 800c87a:	464b      	mov	r3, r9
 800c87c:	1891      	adds	r1, r2, r2
 800c87e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c880:	415b      	adcs	r3, r3
 800c882:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c888:	4641      	mov	r1, r8
 800c88a:	eb12 0a01 	adds.w	sl, r2, r1
 800c88e:	4649      	mov	r1, r9
 800c890:	eb43 0b01 	adc.w	fp, r3, r1
 800c894:	f04f 0200 	mov.w	r2, #0
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c8a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8a8:	4692      	mov	sl, r2
 800c8aa:	469b      	mov	fp, r3
 800c8ac:	4643      	mov	r3, r8
 800c8ae:	eb1a 0303 	adds.w	r3, sl, r3
 800c8b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	eb4b 0303 	adc.w	r3, fp, r3
 800c8bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c8d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	18db      	adds	r3, r3, r3
 800c8d8:	643b      	str	r3, [r7, #64]	; 0x40
 800c8da:	4613      	mov	r3, r2
 800c8dc:	eb42 0303 	adc.w	r3, r2, r3
 800c8e0:	647b      	str	r3, [r7, #68]	; 0x44
 800c8e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c8e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c8ea:	f7f4 f89b 	bl	8000a24 <__aeabi_uldivmod>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4b3b      	ldr	r3, [pc, #236]	; (800c9e4 <UART_SetConfig+0x2d4>)
 800c8f6:	fba3 2301 	umull	r2, r3, r3, r1
 800c8fa:	095b      	lsrs	r3, r3, #5
 800c8fc:	2264      	movs	r2, #100	; 0x64
 800c8fe:	fb02 f303 	mul.w	r3, r2, r3
 800c902:	1acb      	subs	r3, r1, r3
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c90a:	4b36      	ldr	r3, [pc, #216]	; (800c9e4 <UART_SetConfig+0x2d4>)
 800c90c:	fba3 2302 	umull	r2, r3, r3, r2
 800c910:	095b      	lsrs	r3, r3, #5
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c918:	441c      	add	r4, r3
 800c91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c91e:	2200      	movs	r2, #0
 800c920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c92c:	4642      	mov	r2, r8
 800c92e:	464b      	mov	r3, r9
 800c930:	1891      	adds	r1, r2, r2
 800c932:	63b9      	str	r1, [r7, #56]	; 0x38
 800c934:	415b      	adcs	r3, r3
 800c936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c93c:	4641      	mov	r1, r8
 800c93e:	1851      	adds	r1, r2, r1
 800c940:	6339      	str	r1, [r7, #48]	; 0x30
 800c942:	4649      	mov	r1, r9
 800c944:	414b      	adcs	r3, r1
 800c946:	637b      	str	r3, [r7, #52]	; 0x34
 800c948:	f04f 0200 	mov.w	r2, #0
 800c94c:	f04f 0300 	mov.w	r3, #0
 800c950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c954:	4659      	mov	r1, fp
 800c956:	00cb      	lsls	r3, r1, #3
 800c958:	4651      	mov	r1, sl
 800c95a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c95e:	4651      	mov	r1, sl
 800c960:	00ca      	lsls	r2, r1, #3
 800c962:	4610      	mov	r0, r2
 800c964:	4619      	mov	r1, r3
 800c966:	4603      	mov	r3, r0
 800c968:	4642      	mov	r2, r8
 800c96a:	189b      	adds	r3, r3, r2
 800c96c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c970:	464b      	mov	r3, r9
 800c972:	460a      	mov	r2, r1
 800c974:	eb42 0303 	adc.w	r3, r2, r3
 800c978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c98c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c990:	460b      	mov	r3, r1
 800c992:	18db      	adds	r3, r3, r3
 800c994:	62bb      	str	r3, [r7, #40]	; 0x28
 800c996:	4613      	mov	r3, r2
 800c998:	eb42 0303 	adc.w	r3, r2, r3
 800c99c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c99e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c9a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c9a6:	f7f4 f83d 	bl	8000a24 <__aeabi_uldivmod>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4b0d      	ldr	r3, [pc, #52]	; (800c9e4 <UART_SetConfig+0x2d4>)
 800c9b0:	fba3 1302 	umull	r1, r3, r3, r2
 800c9b4:	095b      	lsrs	r3, r3, #5
 800c9b6:	2164      	movs	r1, #100	; 0x64
 800c9b8:	fb01 f303 	mul.w	r3, r1, r3
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	00db      	lsls	r3, r3, #3
 800c9c0:	3332      	adds	r3, #50	; 0x32
 800c9c2:	4a08      	ldr	r2, [pc, #32]	; (800c9e4 <UART_SetConfig+0x2d4>)
 800c9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c8:	095b      	lsrs	r3, r3, #5
 800c9ca:	f003 0207 	and.w	r2, r3, #7
 800c9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4422      	add	r2, r4
 800c9d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c9d8:	e106      	b.n	800cbe8 <UART_SetConfig+0x4d8>
 800c9da:	bf00      	nop
 800c9dc:	40011000 	.word	0x40011000
 800c9e0:	40011400 	.word	0x40011400
 800c9e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c9f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c9fa:	4642      	mov	r2, r8
 800c9fc:	464b      	mov	r3, r9
 800c9fe:	1891      	adds	r1, r2, r2
 800ca00:	6239      	str	r1, [r7, #32]
 800ca02:	415b      	adcs	r3, r3
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
 800ca06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca0a:	4641      	mov	r1, r8
 800ca0c:	1854      	adds	r4, r2, r1
 800ca0e:	4649      	mov	r1, r9
 800ca10:	eb43 0501 	adc.w	r5, r3, r1
 800ca14:	f04f 0200 	mov.w	r2, #0
 800ca18:	f04f 0300 	mov.w	r3, #0
 800ca1c:	00eb      	lsls	r3, r5, #3
 800ca1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca22:	00e2      	lsls	r2, r4, #3
 800ca24:	4614      	mov	r4, r2
 800ca26:	461d      	mov	r5, r3
 800ca28:	4643      	mov	r3, r8
 800ca2a:	18e3      	adds	r3, r4, r3
 800ca2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca30:	464b      	mov	r3, r9
 800ca32:	eb45 0303 	adc.w	r3, r5, r3
 800ca36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca4a:	f04f 0200 	mov.w	r2, #0
 800ca4e:	f04f 0300 	mov.w	r3, #0
 800ca52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca56:	4629      	mov	r1, r5
 800ca58:	008b      	lsls	r3, r1, #2
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca60:	4621      	mov	r1, r4
 800ca62:	008a      	lsls	r2, r1, #2
 800ca64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca68:	f7f3 ffdc 	bl	8000a24 <__aeabi_uldivmod>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4b60      	ldr	r3, [pc, #384]	; (800cbf4 <UART_SetConfig+0x4e4>)
 800ca72:	fba3 2302 	umull	r2, r3, r3, r2
 800ca76:	095b      	lsrs	r3, r3, #5
 800ca78:	011c      	lsls	r4, r3, #4
 800ca7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ca88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	464b      	mov	r3, r9
 800ca90:	1891      	adds	r1, r2, r2
 800ca92:	61b9      	str	r1, [r7, #24]
 800ca94:	415b      	adcs	r3, r3
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca9c:	4641      	mov	r1, r8
 800ca9e:	1851      	adds	r1, r2, r1
 800caa0:	6139      	str	r1, [r7, #16]
 800caa2:	4649      	mov	r1, r9
 800caa4:	414b      	adcs	r3, r1
 800caa6:	617b      	str	r3, [r7, #20]
 800caa8:	f04f 0200 	mov.w	r2, #0
 800caac:	f04f 0300 	mov.w	r3, #0
 800cab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cab4:	4659      	mov	r1, fp
 800cab6:	00cb      	lsls	r3, r1, #3
 800cab8:	4651      	mov	r1, sl
 800caba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cabe:	4651      	mov	r1, sl
 800cac0:	00ca      	lsls	r2, r1, #3
 800cac2:	4610      	mov	r0, r2
 800cac4:	4619      	mov	r1, r3
 800cac6:	4603      	mov	r3, r0
 800cac8:	4642      	mov	r2, r8
 800caca:	189b      	adds	r3, r3, r2
 800cacc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cad0:	464b      	mov	r3, r9
 800cad2:	460a      	mov	r2, r1
 800cad4:	eb42 0303 	adc.w	r3, r2, r3
 800cad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	67bb      	str	r3, [r7, #120]	; 0x78
 800cae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cae8:	f04f 0200 	mov.w	r2, #0
 800caec:	f04f 0300 	mov.w	r3, #0
 800caf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800caf4:	4649      	mov	r1, r9
 800caf6:	008b      	lsls	r3, r1, #2
 800caf8:	4641      	mov	r1, r8
 800cafa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cafe:	4641      	mov	r1, r8
 800cb00:	008a      	lsls	r2, r1, #2
 800cb02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb06:	f7f3 ff8d 	bl	8000a24 <__aeabi_uldivmod>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4b38      	ldr	r3, [pc, #224]	; (800cbf4 <UART_SetConfig+0x4e4>)
 800cb12:	fba3 2301 	umull	r2, r3, r3, r1
 800cb16:	095b      	lsrs	r3, r3, #5
 800cb18:	2264      	movs	r2, #100	; 0x64
 800cb1a:	fb02 f303 	mul.w	r3, r2, r3
 800cb1e:	1acb      	subs	r3, r1, r3
 800cb20:	011b      	lsls	r3, r3, #4
 800cb22:	3332      	adds	r3, #50	; 0x32
 800cb24:	4a33      	ldr	r2, [pc, #204]	; (800cbf4 <UART_SetConfig+0x4e4>)
 800cb26:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2a:	095b      	lsrs	r3, r3, #5
 800cb2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb30:	441c      	add	r4, r3
 800cb32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb36:	2200      	movs	r2, #0
 800cb38:	673b      	str	r3, [r7, #112]	; 0x70
 800cb3a:	677a      	str	r2, [r7, #116]	; 0x74
 800cb3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cb40:	4642      	mov	r2, r8
 800cb42:	464b      	mov	r3, r9
 800cb44:	1891      	adds	r1, r2, r2
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	415b      	adcs	r3, r3
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb50:	4641      	mov	r1, r8
 800cb52:	1851      	adds	r1, r2, r1
 800cb54:	6039      	str	r1, [r7, #0]
 800cb56:	4649      	mov	r1, r9
 800cb58:	414b      	adcs	r3, r1
 800cb5a:	607b      	str	r3, [r7, #4]
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb68:	4659      	mov	r1, fp
 800cb6a:	00cb      	lsls	r3, r1, #3
 800cb6c:	4651      	mov	r1, sl
 800cb6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb72:	4651      	mov	r1, sl
 800cb74:	00ca      	lsls	r2, r1, #3
 800cb76:	4610      	mov	r0, r2
 800cb78:	4619      	mov	r1, r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	4642      	mov	r2, r8
 800cb7e:	189b      	adds	r3, r3, r2
 800cb80:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb82:	464b      	mov	r3, r9
 800cb84:	460a      	mov	r2, r1
 800cb86:	eb42 0303 	adc.w	r3, r2, r3
 800cb8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	663b      	str	r3, [r7, #96]	; 0x60
 800cb96:	667a      	str	r2, [r7, #100]	; 0x64
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	f04f 0300 	mov.w	r3, #0
 800cba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cba4:	4649      	mov	r1, r9
 800cba6:	008b      	lsls	r3, r1, #2
 800cba8:	4641      	mov	r1, r8
 800cbaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbae:	4641      	mov	r1, r8
 800cbb0:	008a      	lsls	r2, r1, #2
 800cbb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cbb6:	f7f3 ff35 	bl	8000a24 <__aeabi_uldivmod>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <UART_SetConfig+0x4e4>)
 800cbc0:	fba3 1302 	umull	r1, r3, r3, r2
 800cbc4:	095b      	lsrs	r3, r3, #5
 800cbc6:	2164      	movs	r1, #100	; 0x64
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	011b      	lsls	r3, r3, #4
 800cbd0:	3332      	adds	r3, #50	; 0x32
 800cbd2:	4a08      	ldr	r2, [pc, #32]	; (800cbf4 <UART_SetConfig+0x4e4>)
 800cbd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd8:	095b      	lsrs	r3, r3, #5
 800cbda:	f003 020f 	and.w	r2, r3, #15
 800cbde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4422      	add	r2, r4
 800cbe6:	609a      	str	r2, [r3, #8]
}
 800cbe8:	bf00      	nop
 800cbea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbf4:	51eb851f 	.word	0x51eb851f

0800cbf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cbf8:	b084      	sub	sp, #16
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	f107 001c 	add.w	r0, r7, #28
 800cc06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d122      	bne.n	800cc56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cc24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cc38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d105      	bne.n	800cc4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 fbee 	bl	800e42c <USB_CoreReset>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]
 800cc54:	e01a      	b.n	800cc8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f001 fbe2 	bl	800e42c <USB_CoreReset>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cc6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	639a      	str	r2, [r3, #56]	; 0x38
 800cc7e:	e005      	b.n	800cc8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d10b      	bne.n	800ccaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	f043 0206 	orr.w	r2, r3, #6
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f043 0220 	orr.w	r2, r3, #32
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccb6:	b004      	add	sp, #16
 800ccb8:	4770      	bx	lr
	...

0800ccbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d165      	bne.n	800cd9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	4a41      	ldr	r2, [pc, #260]	; (800cdd8 <USB_SetTurnaroundTime+0x11c>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d906      	bls.n	800cce6 <USB_SetTurnaroundTime+0x2a>
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	4a40      	ldr	r2, [pc, #256]	; (800cddc <USB_SetTurnaroundTime+0x120>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d202      	bcs.n	800cce6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cce0:	230f      	movs	r3, #15
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	e062      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	4a3c      	ldr	r2, [pc, #240]	; (800cddc <USB_SetTurnaroundTime+0x120>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d306      	bcc.n	800ccfc <USB_SetTurnaroundTime+0x40>
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	4a3b      	ldr	r2, [pc, #236]	; (800cde0 <USB_SetTurnaroundTime+0x124>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d202      	bcs.n	800ccfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ccf6:	230e      	movs	r3, #14
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	e057      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	4a38      	ldr	r2, [pc, #224]	; (800cde0 <USB_SetTurnaroundTime+0x124>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d306      	bcc.n	800cd12 <USB_SetTurnaroundTime+0x56>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	4a37      	ldr	r2, [pc, #220]	; (800cde4 <USB_SetTurnaroundTime+0x128>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d202      	bcs.n	800cd12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cd0c:	230d      	movs	r3, #13
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	e04c      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	4a33      	ldr	r2, [pc, #204]	; (800cde4 <USB_SetTurnaroundTime+0x128>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d306      	bcc.n	800cd28 <USB_SetTurnaroundTime+0x6c>
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	4a32      	ldr	r2, [pc, #200]	; (800cde8 <USB_SetTurnaroundTime+0x12c>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d802      	bhi.n	800cd28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cd22:	230c      	movs	r3, #12
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	e041      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	4a2f      	ldr	r2, [pc, #188]	; (800cde8 <USB_SetTurnaroundTime+0x12c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d906      	bls.n	800cd3e <USB_SetTurnaroundTime+0x82>
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	4a2e      	ldr	r2, [pc, #184]	; (800cdec <USB_SetTurnaroundTime+0x130>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d802      	bhi.n	800cd3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cd38:	230b      	movs	r3, #11
 800cd3a:	617b      	str	r3, [r7, #20]
 800cd3c:	e036      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	4a2a      	ldr	r2, [pc, #168]	; (800cdec <USB_SetTurnaroundTime+0x130>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d906      	bls.n	800cd54 <USB_SetTurnaroundTime+0x98>
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	4a29      	ldr	r2, [pc, #164]	; (800cdf0 <USB_SetTurnaroundTime+0x134>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d802      	bhi.n	800cd54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cd4e:	230a      	movs	r3, #10
 800cd50:	617b      	str	r3, [r7, #20]
 800cd52:	e02b      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	4a26      	ldr	r2, [pc, #152]	; (800cdf0 <USB_SetTurnaroundTime+0x134>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d906      	bls.n	800cd6a <USB_SetTurnaroundTime+0xae>
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	4a25      	ldr	r2, [pc, #148]	; (800cdf4 <USB_SetTurnaroundTime+0x138>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d202      	bcs.n	800cd6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cd64:	2309      	movs	r3, #9
 800cd66:	617b      	str	r3, [r7, #20]
 800cd68:	e020      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	4a21      	ldr	r2, [pc, #132]	; (800cdf4 <USB_SetTurnaroundTime+0x138>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d306      	bcc.n	800cd80 <USB_SetTurnaroundTime+0xc4>
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	4a20      	ldr	r2, [pc, #128]	; (800cdf8 <USB_SetTurnaroundTime+0x13c>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d802      	bhi.n	800cd80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cd7a:	2308      	movs	r3, #8
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	e015      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	4a1d      	ldr	r2, [pc, #116]	; (800cdf8 <USB_SetTurnaroundTime+0x13c>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d906      	bls.n	800cd96 <USB_SetTurnaroundTime+0xda>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	4a1c      	ldr	r2, [pc, #112]	; (800cdfc <USB_SetTurnaroundTime+0x140>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d202      	bcs.n	800cd96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cd90:	2307      	movs	r3, #7
 800cd92:	617b      	str	r3, [r7, #20]
 800cd94:	e00a      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cd96:	2306      	movs	r3, #6
 800cd98:	617b      	str	r3, [r7, #20]
 800cd9a:	e007      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cda2:	2309      	movs	r3, #9
 800cda4:	617b      	str	r3, [r7, #20]
 800cda6:	e001      	b.n	800cdac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cda8:	2309      	movs	r3, #9
 800cdaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68da      	ldr	r2, [r3, #12]
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	029b      	lsls	r3, r3, #10
 800cdc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cdc4:	431a      	orrs	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	371c      	adds	r7, #28
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr
 800cdd8:	00d8acbf 	.word	0x00d8acbf
 800cddc:	00e4e1c0 	.word	0x00e4e1c0
 800cde0:	00f42400 	.word	0x00f42400
 800cde4:	01067380 	.word	0x01067380
 800cde8:	011a499f 	.word	0x011a499f
 800cdec:	01312cff 	.word	0x01312cff
 800cdf0:	014ca43f 	.word	0x014ca43f
 800cdf4:	016e3600 	.word	0x016e3600
 800cdf8:	01a6ab1f 	.word	0x01a6ab1f
 800cdfc:	01e84800 	.word	0x01e84800

0800ce00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f043 0201 	orr.w	r2, r3, #1
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	f023 0201 	bic.w	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ce50:	2300      	movs	r3, #0
 800ce52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d115      	bne.n	800ce92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce72:	2001      	movs	r0, #1
 800ce74:	f7f9 fc96 	bl	80067a4 <HAL_Delay>
      ms++;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 fa45 	bl	800e30e <USB_GetMode>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d01e      	beq.n	800cec8 <USB_SetCurrentMode+0x84>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b31      	cmp	r3, #49	; 0x31
 800ce8e:	d9f0      	bls.n	800ce72 <USB_SetCurrentMode+0x2e>
 800ce90:	e01a      	b.n	800cec8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ce92:	78fb      	ldrb	r3, [r7, #3]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d115      	bne.n	800cec4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cea4:	2001      	movs	r0, #1
 800cea6:	f7f9 fc7d 	bl	80067a4 <HAL_Delay>
      ms++;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f001 fa2c 	bl	800e30e <USB_GetMode>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <USB_SetCurrentMode+0x84>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2b31      	cmp	r3, #49	; 0x31
 800cec0:	d9f0      	bls.n	800cea4 <USB_SetCurrentMode+0x60>
 800cec2:	e001      	b.n	800cec8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e005      	b.n	800ced4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b32      	cmp	r3, #50	; 0x32
 800cecc:	d101      	bne.n	800ced2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e000      	b.n	800ced4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cedc:	b084      	sub	sp, #16
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ceea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cef6:	2300      	movs	r3, #0
 800cef8:	613b      	str	r3, [r7, #16]
 800cefa:	e009      	b.n	800cf10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	3340      	adds	r3, #64	; 0x40
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	613b      	str	r3, [r7, #16]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	2b0e      	cmp	r3, #14
 800cf14:	d9f2      	bls.n	800cefc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cf16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d11c      	bne.n	800cf56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf2a:	f043 0302 	orr.w	r3, r3, #2
 800cf2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38
 800cf54:	e00b      	b.n	800cf6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf74:	461a      	mov	r2, r3
 800cf76:	2300      	movs	r3, #0
 800cf78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf80:	4619      	mov	r1, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf88:	461a      	mov	r2, r3
 800cf8a:	680b      	ldr	r3, [r1, #0]
 800cf8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d10c      	bne.n	800cfae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d104      	bne.n	800cfa4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f965 	bl	800d26c <USB_SetDevSpeed>
 800cfa2:	e008      	b.n	800cfb6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f960 	bl	800d26c <USB_SetDevSpeed>
 800cfac:	e003      	b.n	800cfb6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cfae:	2103      	movs	r1, #3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f95b 	bl	800d26c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cfb6:	2110      	movs	r1, #16
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f8f3 	bl	800d1a4 <USB_FlushTxFifo>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f91f 	bl	800d20c <USB_FlushRxFifo>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfde:	461a      	mov	r2, r3
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfea:	461a      	mov	r2, r3
 800cfec:	2300      	movs	r3, #0
 800cfee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff6:	461a      	mov	r2, r3
 800cff8:	2300      	movs	r3, #0
 800cffa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cffc:	2300      	movs	r3, #0
 800cffe:	613b      	str	r3, [r7, #16]
 800d000:	e043      	b.n	800d08a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	015a      	lsls	r2, r3, #5
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	4413      	add	r3, r2
 800d00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d018:	d118      	bne.n	800d04c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10a      	bne.n	800d036 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	015a      	lsls	r2, r3, #5
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	4413      	add	r3, r2
 800d028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d02c:	461a      	mov	r2, r3
 800d02e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	e013      	b.n	800d05e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	015a      	lsls	r2, r3, #5
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	4413      	add	r3, r2
 800d03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d042:	461a      	mov	r2, r3
 800d044:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d048:	6013      	str	r3, [r2, #0]
 800d04a:	e008      	b.n	800d05e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4413      	add	r3, r2
 800d054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d058:	461a      	mov	r2, r3
 800d05a:	2300      	movs	r3, #0
 800d05c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06a:	461a      	mov	r2, r3
 800d06c:	2300      	movs	r3, #0
 800d06e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	015a      	lsls	r2, r3, #5
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4413      	add	r3, r2
 800d078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d07c:	461a      	mov	r2, r3
 800d07e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d082:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	3301      	adds	r3, #1
 800d088:	613b      	str	r3, [r7, #16]
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d3b7      	bcc.n	800d002 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d092:	2300      	movs	r3, #0
 800d094:	613b      	str	r3, [r7, #16]
 800d096:	e043      	b.n	800d120 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0ae:	d118      	bne.n	800d0e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10a      	bne.n	800d0cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	015a      	lsls	r2, r3, #5
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	4413      	add	r3, r2
 800d0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	e013      	b.n	800d0f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	015a      	lsls	r2, r3, #5
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d8:	461a      	mov	r2, r3
 800d0da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	e008      	b.n	800d0f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	015a      	lsls	r2, r3, #5
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d100:	461a      	mov	r2, r3
 800d102:	2300      	movs	r3, #0
 800d104:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	015a      	lsls	r2, r3, #5
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d112:	461a      	mov	r2, r3
 800d114:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d118:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	3301      	adds	r3, #1
 800d11e:	613b      	str	r3, [r7, #16]
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	429a      	cmp	r2, r3
 800d126:	d3b7      	bcc.n	800d098 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d13a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d148:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	f043 0210 	orr.w	r2, r3, #16
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	699a      	ldr	r2, [r3, #24]
 800d160:	4b0f      	ldr	r3, [pc, #60]	; (800d1a0 <USB_DevInit+0x2c4>)
 800d162:	4313      	orrs	r3, r2
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	f043 0208 	orr.w	r2, r3, #8
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d107      	bne.n	800d190 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	699b      	ldr	r3, [r3, #24]
 800d184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d188:	f043 0304 	orr.w	r3, r3, #4
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d190:	7dfb      	ldrb	r3, [r7, #23]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d19c:	b004      	add	sp, #16
 800d19e:	4770      	bx	lr
 800d1a0:	803c3800 	.word	0x803c3800

0800d1a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	4a13      	ldr	r2, [pc, #76]	; (800d208 <USB_FlushTxFifo+0x64>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d901      	bls.n	800d1c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	e01b      	b.n	800d1fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	daf2      	bge.n	800d1b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	019b      	lsls	r3, r3, #6
 800d1d4:	f043 0220 	orr.w	r2, r3, #32
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	4a08      	ldr	r2, [pc, #32]	; (800d208 <USB_FlushTxFifo+0x64>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d901      	bls.n	800d1ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	e006      	b.n	800d1fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	f003 0320 	and.w	r3, r3, #32
 800d1f6:	2b20      	cmp	r3, #32
 800d1f8:	d0f0      	beq.n	800d1dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	00030d40 	.word	0x00030d40

0800d20c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3301      	adds	r3, #1
 800d21c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	4a11      	ldr	r2, [pc, #68]	; (800d268 <USB_FlushRxFifo+0x5c>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d901      	bls.n	800d22a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d226:	2303      	movs	r3, #3
 800d228:	e018      	b.n	800d25c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	daf2      	bge.n	800d218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2210      	movs	r2, #16
 800d23a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3301      	adds	r3, #1
 800d240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	4a08      	ldr	r2, [pc, #32]	; (800d268 <USB_FlushRxFifo+0x5c>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d901      	bls.n	800d24e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d24a:	2303      	movs	r3, #3
 800d24c:	e006      	b.n	800d25c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	f003 0310 	and.w	r3, r3, #16
 800d256:	2b10      	cmp	r3, #16
 800d258:	d0f0      	beq.n	800d23c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	00030d40 	.word	0x00030d40

0800d26c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	78fb      	ldrb	r3, [r7, #3]
 800d286:	68f9      	ldr	r1, [r7, #12]
 800d288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d28c:	4313      	orrs	r3, r2
 800d28e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b087      	sub	sp, #28
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	f003 0306 	and.w	r3, r3, #6
 800d2b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d102      	bne.n	800d2c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	75fb      	strb	r3, [r7, #23]
 800d2c2:	e00a      	b.n	800d2da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d002      	beq.n	800d2d0 <USB_GetDevSpeed+0x32>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2b06      	cmp	r3, #6
 800d2ce:	d102      	bne.n	800d2d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	75fb      	strb	r3, [r7, #23]
 800d2d4:	e001      	b.n	800d2da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d2d6:	230f      	movs	r3, #15
 800d2d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	371c      	adds	r7, #28
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	785b      	ldrb	r3, [r3, #1]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d13a      	bne.n	800d37a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30a:	69da      	ldr	r2, [r3, #28]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	f003 030f 	and.w	r3, r3, #15
 800d314:	2101      	movs	r1, #1
 800d316:	fa01 f303 	lsl.w	r3, r1, r3
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	68f9      	ldr	r1, [r7, #12]
 800d31e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d322:	4313      	orrs	r3, r2
 800d324:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d155      	bne.n	800d3e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	015a      	lsls	r2, r3, #5
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	4413      	add	r3, r2
 800d344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	791b      	ldrb	r3, [r3, #4]
 800d356:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d358:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	059b      	lsls	r3, r3, #22
 800d35e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d360:	4313      	orrs	r3, r2
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	0151      	lsls	r1, r2, #5
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	440a      	add	r2, r1
 800d36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d36e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	e036      	b.n	800d3e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d380:	69da      	ldr	r2, [r3, #28]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	f003 030f 	and.w	r3, r3, #15
 800d38a:	2101      	movs	r1, #1
 800d38c:	fa01 f303 	lsl.w	r3, r1, r3
 800d390:	041b      	lsls	r3, r3, #16
 800d392:	68f9      	ldr	r1, [r7, #12]
 800d394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d398:	4313      	orrs	r3, r2
 800d39a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d11a      	bne.n	800d3e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	015a      	lsls	r2, r3, #5
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	791b      	ldrb	r3, [r3, #4]
 800d3cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d3ce:	430b      	orrs	r3, r1
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	0151      	lsls	r1, r2, #5
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	440a      	add	r2, r1
 800d3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
	...

0800d3f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	785b      	ldrb	r3, [r3, #1]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d161      	bne.n	800d4d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d42a:	d11f      	bne.n	800d46c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	015a      	lsls	r2, r3, #5
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	4413      	add	r3, r2
 800d434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	0151      	lsls	r1, r2, #5
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	440a      	add	r2, r1
 800d442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d44a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	4413      	add	r3, r2
 800d454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	0151      	lsls	r1, r2, #5
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	440a      	add	r2, r1
 800d462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d46a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	f003 030f 	and.w	r3, r3, #15
 800d47c:	2101      	movs	r1, #1
 800d47e:	fa01 f303 	lsl.w	r3, r1, r3
 800d482:	b29b      	uxth	r3, r3
 800d484:	43db      	mvns	r3, r3
 800d486:	68f9      	ldr	r1, [r7, #12]
 800d488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d48c:	4013      	ands	r3, r2
 800d48e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d496:	69da      	ldr	r2, [r3, #28]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	f003 030f 	and.w	r3, r3, #15
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	43db      	mvns	r3, r3
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	0159      	lsls	r1, r3, #5
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	440b      	add	r3, r1
 800d4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	4b35      	ldr	r3, [pc, #212]	; (800d5a8 <USB_DeactivateEndpoint+0x1b0>)
 800d4d2:	4013      	ands	r3, r2
 800d4d4:	600b      	str	r3, [r1, #0]
 800d4d6:	e060      	b.n	800d59a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	015a      	lsls	r2, r3, #5
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4413      	add	r3, r2
 800d4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4ee:	d11f      	bne.n	800d530 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	0151      	lsls	r1, r2, #5
 800d502:	68fa      	ldr	r2, [r7, #12]
 800d504:	440a      	add	r2, r1
 800d506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d50a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d50e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	4413      	add	r3, r2
 800d518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	0151      	lsls	r1, r2, #5
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	440a      	add	r2, r1
 800d526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d52a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d52e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	f003 030f 	and.w	r3, r3, #15
 800d540:	2101      	movs	r1, #1
 800d542:	fa01 f303 	lsl.w	r3, r1, r3
 800d546:	041b      	lsls	r3, r3, #16
 800d548:	43db      	mvns	r3, r3
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d550:	4013      	ands	r3, r2
 800d552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d55a:	69da      	ldr	r2, [r3, #28]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	f003 030f 	and.w	r3, r3, #15
 800d564:	2101      	movs	r1, #1
 800d566:	fa01 f303 	lsl.w	r3, r1, r3
 800d56a:	041b      	lsls	r3, r3, #16
 800d56c:	43db      	mvns	r3, r3
 800d56e:	68f9      	ldr	r1, [r7, #12]
 800d570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d574:	4013      	ands	r3, r2
 800d576:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	015a      	lsls	r2, r3, #5
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	0159      	lsls	r1, r3, #5
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	440b      	add	r3, r1
 800d58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d592:	4619      	mov	r1, r3
 800d594:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <USB_DeactivateEndpoint+0x1b4>)
 800d596:	4013      	ands	r3, r2
 800d598:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr
 800d5a8:	ec337800 	.word	0xec337800
 800d5ac:	eff37800 	.word	0xeff37800

0800d5b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08a      	sub	sp, #40	; 0x28
 800d5b4:	af02      	add	r7, sp, #8
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	785b      	ldrb	r3, [r3, #1]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	f040 815c 	bne.w	800d88a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	699b      	ldr	r3, [r3, #24]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d132      	bne.n	800d640 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	015a      	lsls	r2, r3, #5
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	0151      	lsls	r1, r2, #5
 800d5ec:	69fa      	ldr	r2, [r7, #28]
 800d5ee:	440a      	add	r2, r1
 800d5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	015a      	lsls	r2, r3, #5
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	4413      	add	r3, r2
 800d606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	0151      	lsls	r1, r2, #5
 800d610:	69fa      	ldr	r2, [r7, #28]
 800d612:	440a      	add	r2, r1
 800d614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d61c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	015a      	lsls	r2, r3, #5
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	4413      	add	r3, r2
 800d626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	0151      	lsls	r1, r2, #5
 800d630:	69fa      	ldr	r2, [r7, #28]
 800d632:	440a      	add	r2, r1
 800d634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d638:	0cdb      	lsrs	r3, r3, #19
 800d63a:	04db      	lsls	r3, r3, #19
 800d63c:	6113      	str	r3, [r2, #16]
 800d63e:	e074      	b.n	800d72a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	69ba      	ldr	r2, [r7, #24]
 800d650:	0151      	lsls	r1, r2, #5
 800d652:	69fa      	ldr	r2, [r7, #28]
 800d654:	440a      	add	r2, r1
 800d656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d65a:	0cdb      	lsrs	r3, r3, #19
 800d65c:	04db      	lsls	r3, r3, #19
 800d65e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	4413      	add	r3, r2
 800d668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	69ba      	ldr	r2, [r7, #24]
 800d670:	0151      	lsls	r1, r2, #5
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	440a      	add	r2, r1
 800d676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d67a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d67e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	015a      	lsls	r2, r3, #5
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	4413      	add	r3, r2
 800d68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d690:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	6999      	ldr	r1, [r3, #24]
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	440b      	add	r3, r1
 800d69c:	1e59      	subs	r1, r3, #1
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800d6a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d6a8:	4b9d      	ldr	r3, [pc, #628]	; (800d920 <USB_EPStartXfer+0x370>)
 800d6aa:	400b      	ands	r3, r1
 800d6ac:	69b9      	ldr	r1, [r7, #24]
 800d6ae:	0148      	lsls	r0, r1, #5
 800d6b0:	69f9      	ldr	r1, [r7, #28]
 800d6b2:	4401      	add	r1, r0
 800d6b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c8:	691a      	ldr	r2, [r3, #16]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6d2:	69b9      	ldr	r1, [r7, #24]
 800d6d4:	0148      	lsls	r0, r1, #5
 800d6d6:	69f9      	ldr	r1, [r7, #28]
 800d6d8:	4401      	add	r1, r0
 800d6da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	791b      	ldrb	r3, [r3, #4]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d11f      	bne.n	800d72a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	015a      	lsls	r2, r3, #5
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	69ba      	ldr	r2, [r7, #24]
 800d6fa:	0151      	lsls	r1, r2, #5
 800d6fc:	69fa      	ldr	r2, [r7, #28]
 800d6fe:	440a      	add	r2, r1
 800d700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d704:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d708:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	4413      	add	r3, r2
 800d712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	69ba      	ldr	r2, [r7, #24]
 800d71a:	0151      	lsls	r1, r2, #5
 800d71c:	69fa      	ldr	r2, [r7, #28]
 800d71e:	440a      	add	r2, r1
 800d720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d724:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d728:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d72a:	79fb      	ldrb	r3, [r7, #7]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d14b      	bne.n	800d7c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	015a      	lsls	r2, r3, #5
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	4413      	add	r3, r2
 800d740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d744:	461a      	mov	r2, r3
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	791b      	ldrb	r3, [r3, #4]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d128      	bne.n	800d7a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d760:	2b00      	cmp	r3, #0
 800d762:	d110      	bne.n	800d786 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	69ba      	ldr	r2, [r7, #24]
 800d774:	0151      	lsls	r1, r2, #5
 800d776:	69fa      	ldr	r2, [r7, #28]
 800d778:	440a      	add	r2, r1
 800d77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d77e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	e00f      	b.n	800d7a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	015a      	lsls	r2, r3, #5
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	4413      	add	r3, r2
 800d78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	69ba      	ldr	r2, [r7, #24]
 800d796:	0151      	lsls	r1, r2, #5
 800d798:	69fa      	ldr	r2, [r7, #28]
 800d79a:	440a      	add	r2, r1
 800d79c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	69ba      	ldr	r2, [r7, #24]
 800d7b6:	0151      	lsls	r1, r2, #5
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	440a      	add	r2, r1
 800d7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	e133      	b.n	800da30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	0151      	lsls	r1, r2, #5
 800d7da:	69fa      	ldr	r2, [r7, #28]
 800d7dc:	440a      	add	r2, r1
 800d7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	791b      	ldrb	r3, [r3, #4]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d015      	beq.n	800d81c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 811b 	beq.w	800da30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	f003 030f 	and.w	r3, r3, #15
 800d80a:	2101      	movs	r1, #1
 800d80c:	fa01 f303 	lsl.w	r3, r1, r3
 800d810:	69f9      	ldr	r1, [r7, #28]
 800d812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d816:	4313      	orrs	r3, r2
 800d818:	634b      	str	r3, [r1, #52]	; 0x34
 800d81a:	e109      	b.n	800da30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d110      	bne.n	800d84e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	015a      	lsls	r2, r3, #5
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	4413      	add	r3, r2
 800d834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	0151      	lsls	r1, r2, #5
 800d83e:	69fa      	ldr	r2, [r7, #28]
 800d840:	440a      	add	r2, r1
 800d842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d846:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	e00f      	b.n	800d86e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	015a      	lsls	r2, r3, #5
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	4413      	add	r3, r2
 800d856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	0151      	lsls	r1, r2, #5
 800d860:	69fa      	ldr	r2, [r7, #28]
 800d862:	440a      	add	r2, r1
 800d864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d86c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6919      	ldr	r1, [r3, #16]
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	781a      	ldrb	r2, [r3, #0]
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	b298      	uxth	r0, r3
 800d87c:	79fb      	ldrb	r3, [r7, #7]
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	4603      	mov	r3, r0
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f000 fade 	bl	800de44 <USB_WritePacket>
 800d888:	e0d2      	b.n	800da30 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	015a      	lsls	r2, r3, #5
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	4413      	add	r3, r2
 800d892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	0151      	lsls	r1, r2, #5
 800d89c:	69fa      	ldr	r2, [r7, #28]
 800d89e:	440a      	add	r2, r1
 800d8a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8a4:	0cdb      	lsrs	r3, r3, #19
 800d8a6:	04db      	lsls	r3, r3, #19
 800d8a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	015a      	lsls	r2, r3, #5
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	69ba      	ldr	r2, [r7, #24]
 800d8ba:	0151      	lsls	r1, r2, #5
 800d8bc:	69fa      	ldr	r2, [r7, #28]
 800d8be:	440a      	add	r2, r1
 800d8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d8c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d8cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d126      	bne.n	800d924 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8e2:	691a      	ldr	r2, [r3, #16]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8ec:	69b9      	ldr	r1, [r7, #24]
 800d8ee:	0148      	lsls	r0, r1, #5
 800d8f0:	69f9      	ldr	r1, [r7, #28]
 800d8f2:	4401      	add	r1, r0
 800d8f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	015a      	lsls	r2, r3, #5
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	4413      	add	r3, r2
 800d904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	69ba      	ldr	r2, [r7, #24]
 800d90c:	0151      	lsls	r1, r2, #5
 800d90e:	69fa      	ldr	r2, [r7, #28]
 800d910:	440a      	add	r2, r1
 800d912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d91a:	6113      	str	r3, [r2, #16]
 800d91c:	e03a      	b.n	800d994 <USB_EPStartXfer+0x3e4>
 800d91e:	bf00      	nop
 800d920:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	699a      	ldr	r2, [r3, #24]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	4413      	add	r3, r2
 800d92e:	1e5a      	subs	r2, r3, #1
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	fbb2 f3f3 	udiv	r3, r2, r3
 800d938:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	8afa      	ldrh	r2, [r7, #22]
 800d940:	fb03 f202 	mul.w	r2, r3, r2
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	015a      	lsls	r2, r3, #5
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	4413      	add	r3, r2
 800d950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d954:	691a      	ldr	r2, [r3, #16]
 800d956:	8afb      	ldrh	r3, [r7, #22]
 800d958:	04d9      	lsls	r1, r3, #19
 800d95a:	4b38      	ldr	r3, [pc, #224]	; (800da3c <USB_EPStartXfer+0x48c>)
 800d95c:	400b      	ands	r3, r1
 800d95e:	69b9      	ldr	r1, [r7, #24]
 800d960:	0148      	lsls	r0, r1, #5
 800d962:	69f9      	ldr	r1, [r7, #28]
 800d964:	4401      	add	r1, r0
 800d966:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d96a:	4313      	orrs	r3, r2
 800d96c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	015a      	lsls	r2, r3, #5
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	4413      	add	r3, r2
 800d976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d97a:	691a      	ldr	r2, [r3, #16]
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d984:	69b9      	ldr	r1, [r7, #24]
 800d986:	0148      	lsls	r0, r1, #5
 800d988:	69f9      	ldr	r1, [r7, #28]
 800d98a:	4401      	add	r1, r0
 800d98c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d990:	4313      	orrs	r3, r2
 800d992:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d994:	79fb      	ldrb	r3, [r7, #7]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d10d      	bne.n	800d9b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	6919      	ldr	r1, [r3, #16]
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	015a      	lsls	r2, r3, #5
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b2:	460a      	mov	r2, r1
 800d9b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	791b      	ldrb	r3, [r3, #4]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d128      	bne.n	800da10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d110      	bne.n	800d9f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	015a      	lsls	r2, r3, #5
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	69ba      	ldr	r2, [r7, #24]
 800d9de:	0151      	lsls	r1, r2, #5
 800d9e0:	69fa      	ldr	r2, [r7, #28]
 800d9e2:	440a      	add	r2, r1
 800d9e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9ec:	6013      	str	r3, [r2, #0]
 800d9ee:	e00f      	b.n	800da10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	015a      	lsls	r2, r3, #5
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	69ba      	ldr	r2, [r7, #24]
 800da00:	0151      	lsls	r1, r2, #5
 800da02:	69fa      	ldr	r2, [r7, #28]
 800da04:	440a      	add	r2, r1
 800da06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	015a      	lsls	r2, r3, #5
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	4413      	add	r3, r2
 800da18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	69ba      	ldr	r2, [r7, #24]
 800da20:	0151      	lsls	r1, r2, #5
 800da22:	69fa      	ldr	r2, [r7, #28]
 800da24:	440a      	add	r2, r1
 800da26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3720      	adds	r7, #32
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	1ff80000 	.word	0x1ff80000

0800da40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800da40:	b480      	push	{r7}
 800da42:	b087      	sub	sp, #28
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	4613      	mov	r3, r2
 800da4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	785b      	ldrb	r3, [r3, #1]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	f040 80ce 	bne.w	800dbfe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d132      	bne.n	800dad0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	4413      	add	r3, r2
 800da72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	693a      	ldr	r2, [r7, #16]
 800da7a:	0151      	lsls	r1, r2, #5
 800da7c:	697a      	ldr	r2, [r7, #20]
 800da7e:	440a      	add	r2, r1
 800da80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	015a      	lsls	r2, r3, #5
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	4413      	add	r3, r2
 800da96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	693a      	ldr	r2, [r7, #16]
 800da9e:	0151      	lsls	r1, r2, #5
 800daa0:	697a      	ldr	r2, [r7, #20]
 800daa2:	440a      	add	r2, r1
 800daa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800daac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	015a      	lsls	r2, r3, #5
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	4413      	add	r3, r2
 800dab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	693a      	ldr	r2, [r7, #16]
 800dabe:	0151      	lsls	r1, r2, #5
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	440a      	add	r2, r1
 800dac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dac8:	0cdb      	lsrs	r3, r3, #19
 800daca:	04db      	lsls	r3, r3, #19
 800dacc:	6113      	str	r3, [r2, #16]
 800dace:	e04e      	b.n	800db6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	015a      	lsls	r2, r3, #5
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	4413      	add	r3, r2
 800dad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dadc:	691b      	ldr	r3, [r3, #16]
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	0151      	lsls	r1, r2, #5
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	440a      	add	r2, r1
 800dae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daea:	0cdb      	lsrs	r3, r3, #19
 800daec:	04db      	lsls	r3, r3, #19
 800daee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	015a      	lsls	r2, r3, #5
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	0151      	lsls	r1, r2, #5
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	440a      	add	r2, r1
 800db06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	699a      	ldr	r2, [r3, #24]
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d903      	bls.n	800db28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	015a      	lsls	r2, r3, #5
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	4413      	add	r3, r2
 800db30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	0151      	lsls	r1, r2, #5
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	440a      	add	r2, r1
 800db3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	015a      	lsls	r2, r3, #5
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	4413      	add	r3, r2
 800db50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db54:	691a      	ldr	r2, [r3, #16]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db5e:	6939      	ldr	r1, [r7, #16]
 800db60:	0148      	lsls	r0, r1, #5
 800db62:	6979      	ldr	r1, [r7, #20]
 800db64:	4401      	add	r1, r0
 800db66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800db6a:	4313      	orrs	r3, r2
 800db6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800db6e:	79fb      	ldrb	r3, [r7, #7]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d11e      	bne.n	800dbb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d009      	beq.n	800db90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	4413      	add	r3, r2
 800db84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db88:	461a      	mov	r2, r3
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	015a      	lsls	r2, r3, #5
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	4413      	add	r3, r2
 800db98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	0151      	lsls	r1, r2, #5
 800dba2:	697a      	ldr	r2, [r7, #20]
 800dba4:	440a      	add	r2, r1
 800dba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	e097      	b.n	800dce2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	015a      	lsls	r2, r3, #5
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	0151      	lsls	r1, r2, #5
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	440a      	add	r2, r1
 800dbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f000 8083 	beq.w	800dce2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	f003 030f 	and.w	r3, r3, #15
 800dbec:	2101      	movs	r1, #1
 800dbee:	fa01 f303 	lsl.w	r3, r1, r3
 800dbf2:	6979      	ldr	r1, [r7, #20]
 800dbf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	634b      	str	r3, [r1, #52]	; 0x34
 800dbfc:	e071      	b.n	800dce2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	015a      	lsls	r2, r3, #5
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	4413      	add	r3, r2
 800dc06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	0151      	lsls	r1, r2, #5
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	440a      	add	r2, r1
 800dc14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc18:	0cdb      	lsrs	r3, r3, #19
 800dc1a:	04db      	lsls	r3, r3, #19
 800dc1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	693a      	ldr	r2, [r7, #16]
 800dc2e:	0151      	lsls	r1, r2, #5
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	440a      	add	r2, r1
 800dc34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	68da      	ldr	r2, [r3, #12]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	68da      	ldr	r2, [r3, #12]
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	015a      	lsls	r2, r3, #5
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	4413      	add	r3, r2
 800dc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	693a      	ldr	r2, [r7, #16]
 800dc6a:	0151      	lsls	r1, r2, #5
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	440a      	add	r2, r1
 800dc70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	015a      	lsls	r2, r3, #5
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	4413      	add	r3, r2
 800dc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc86:	691a      	ldr	r2, [r3, #16]
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	69db      	ldr	r3, [r3, #28]
 800dc8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc90:	6939      	ldr	r1, [r7, #16]
 800dc92:	0148      	lsls	r0, r1, #5
 800dc94:	6979      	ldr	r1, [r7, #20]
 800dc96:	4401      	add	r1, r0
 800dc98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d10d      	bne.n	800dcc2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d009      	beq.n	800dcc2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	6919      	ldr	r1, [r3, #16]
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	015a      	lsls	r2, r3, #5
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	4413      	add	r3, r2
 800dcba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcbe:	460a      	mov	r2, r1
 800dcc0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	015a      	lsls	r2, r3, #5
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	4413      	add	r3, r2
 800dcca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	0151      	lsls	r1, r2, #5
 800dcd4:	697a      	ldr	r2, [r7, #20]
 800dcd6:	440a      	add	r2, r1
 800dcd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dce0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	371c      	adds	r7, #28
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	785b      	ldrb	r3, [r3, #1]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d14a      	bne.n	800dda4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	015a      	lsls	r2, r3, #5
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	4413      	add	r3, r2
 800dd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd26:	f040 8086 	bne.w	800de36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	7812      	ldrb	r2, [r2, #0]
 800dd3e:	0151      	lsls	r1, r2, #5
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	440a      	add	r2, r1
 800dd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	683a      	ldr	r2, [r7, #0]
 800dd60:	7812      	ldrb	r2, [r2, #0]
 800dd62:	0151      	lsls	r1, r2, #5
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	440a      	add	r2, r1
 800dd68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	3301      	adds	r3, #1
 800dd76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f242 7210 	movw	r2, #10000	; 0x2710
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d902      	bls.n	800dd88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	75fb      	strb	r3, [r7, #23]
          break;
 800dd86:	e056      	b.n	800de36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	015a      	lsls	r2, r3, #5
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	4413      	add	r3, r2
 800dd92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dda0:	d0e7      	beq.n	800dd72 <USB_EPStopXfer+0x82>
 800dda2:	e048      	b.n	800de36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	015a      	lsls	r2, r3, #5
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	4413      	add	r3, r2
 800ddae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddbc:	d13b      	bne.n	800de36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	7812      	ldrb	r2, [r2, #0]
 800ddd2:	0151      	lsls	r1, r2, #5
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	440a      	add	r2, r1
 800ddd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dde0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	7812      	ldrb	r2, [r2, #0]
 800ddf6:	0151      	lsls	r1, r2, #5
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3301      	adds	r3, #1
 800de0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800de12:	4293      	cmp	r3, r2
 800de14:	d902      	bls.n	800de1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	75fb      	strb	r3, [r7, #23]
          break;
 800de1a:	e00c      	b.n	800de36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	4413      	add	r3, r2
 800de26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de34:	d0e7      	beq.n	800de06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800de36:	7dfb      	ldrb	r3, [r7, #23]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	371c      	adds	r7, #28
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800de44:	b480      	push	{r7}
 800de46:	b089      	sub	sp, #36	; 0x24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	4611      	mov	r1, r2
 800de50:	461a      	mov	r2, r3
 800de52:	460b      	mov	r3, r1
 800de54:	71fb      	strb	r3, [r7, #7]
 800de56:	4613      	mov	r3, r2
 800de58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800de62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de66:	2b00      	cmp	r3, #0
 800de68:	d123      	bne.n	800deb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800de6a:	88bb      	ldrh	r3, [r7, #4]
 800de6c:	3303      	adds	r3, #3
 800de6e:	089b      	lsrs	r3, r3, #2
 800de70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800de72:	2300      	movs	r3, #0
 800de74:	61bb      	str	r3, [r7, #24]
 800de76:	e018      	b.n	800deaa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800de78:	79fb      	ldrb	r3, [r7, #7]
 800de7a:	031a      	lsls	r2, r3, #12
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de84:	461a      	mov	r2, r3
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	3301      	adds	r3, #1
 800de90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	3301      	adds	r3, #1
 800de96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	3301      	adds	r3, #1
 800de9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	3301      	adds	r3, #1
 800dea2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	3301      	adds	r3, #1
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	69ba      	ldr	r2, [r7, #24]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d3e2      	bcc.n	800de78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3724      	adds	r7, #36	; 0x24
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b08b      	sub	sp, #44	; 0x2c
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	4613      	mov	r3, r2
 800decc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ded6:	88fb      	ldrh	r3, [r7, #6]
 800ded8:	089b      	lsrs	r3, r3, #2
 800deda:	b29b      	uxth	r3, r3
 800dedc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dede:	88fb      	ldrh	r3, [r7, #6]
 800dee0:	f003 0303 	and.w	r3, r3, #3
 800dee4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dee6:	2300      	movs	r3, #0
 800dee8:	623b      	str	r3, [r7, #32]
 800deea:	e014      	b.n	800df16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	601a      	str	r2, [r3, #0]
    pDest++;
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	3301      	adds	r3, #1
 800defc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	3301      	adds	r3, #1
 800df02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	3301      	adds	r3, #1
 800df08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	3301      	adds	r3, #1
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	3301      	adds	r3, #1
 800df14:	623b      	str	r3, [r7, #32]
 800df16:	6a3a      	ldr	r2, [r7, #32]
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d3e6      	bcc.n	800deec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800df1e:	8bfb      	ldrh	r3, [r7, #30]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d01e      	beq.n	800df62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df2e:	461a      	mov	r2, r3
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	6812      	ldr	r2, [r2, #0]
 800df36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	fa22 f303 	lsr.w	r3, r2, r3
 800df44:	b2da      	uxtb	r2, r3
 800df46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df48:	701a      	strb	r2, [r3, #0]
      i++;
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	3301      	adds	r3, #1
 800df4e:	623b      	str	r3, [r7, #32]
      pDest++;
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	3301      	adds	r3, #1
 800df54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800df56:	8bfb      	ldrh	r3, [r7, #30]
 800df58:	3b01      	subs	r3, #1
 800df5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800df5c:	8bfb      	ldrh	r3, [r7, #30]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1ea      	bne.n	800df38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df64:	4618      	mov	r0, r3
 800df66:	372c      	adds	r7, #44	; 0x2c
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	785b      	ldrb	r3, [r3, #1]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d12c      	bne.n	800dfe6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	db12      	blt.n	800dfc4 <USB_EPSetStall+0x54>
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00f      	beq.n	800dfc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	015a      	lsls	r2, r3, #5
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68ba      	ldr	r2, [r7, #8]
 800dfb4:	0151      	lsls	r1, r2, #5
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	440a      	add	r2, r1
 800dfba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dfc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	015a      	lsls	r2, r3, #5
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	0151      	lsls	r1, r2, #5
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	440a      	add	r2, r1
 800dfda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	e02b      	b.n	800e03e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	db12      	blt.n	800e01e <USB_EPSetStall+0xae>
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00f      	beq.n	800e01e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	015a      	lsls	r2, r3, #5
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	4413      	add	r3, r2
 800e006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	0151      	lsls	r1, r2, #5
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	440a      	add	r2, r1
 800e014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e018:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e01c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	015a      	lsls	r2, r3, #5
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	4413      	add	r3, r2
 800e026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	0151      	lsls	r1, r2, #5
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	440a      	add	r2, r1
 800e034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e03c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	785b      	ldrb	r3, [r3, #1]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d128      	bne.n	800e0ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	015a      	lsls	r2, r3, #5
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	4413      	add	r3, r2
 800e070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	0151      	lsls	r1, r2, #5
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	440a      	add	r2, r1
 800e07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e086:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	791b      	ldrb	r3, [r3, #4]
 800e08c:	2b03      	cmp	r3, #3
 800e08e:	d003      	beq.n	800e098 <USB_EPClearStall+0x4c>
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	791b      	ldrb	r3, [r3, #4]
 800e094:	2b02      	cmp	r3, #2
 800e096:	d138      	bne.n	800e10a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	0151      	lsls	r1, r2, #5
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	440a      	add	r2, r1
 800e0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	e027      	b.n	800e10a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	0151      	lsls	r1, r2, #5
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	440a      	add	r2, r1
 800e0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e0d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	791b      	ldrb	r3, [r3, #4]
 800e0de:	2b03      	cmp	r3, #3
 800e0e0:	d003      	beq.n	800e0ea <USB_EPClearStall+0x9e>
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	791b      	ldrb	r3, [r3, #4]
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	d10f      	bne.n	800e10a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	015a      	lsls	r2, r3, #5
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	0151      	lsls	r1, r2, #5
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	440a      	add	r2, r1
 800e100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e108:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e136:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e13a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	78fb      	ldrb	r3, [r7, #3]
 800e146:	011b      	lsls	r3, r3, #4
 800e148:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e14c:	68f9      	ldr	r1, [r7, #12]
 800e14e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e152:	4313      	orrs	r3, r2
 800e154:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3714      	adds	r7, #20
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e17e:	f023 0303 	bic.w	r3, r3, #3
 800e182:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e192:	f023 0302 	bic.w	r3, r3, #2
 800e196:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b085      	sub	sp, #20
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1c0:	f023 0303 	bic.w	r3, r3, #3
 800e1c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1d4:	f043 0302 	orr.w	r3, r3, #2
 800e1d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3714      	adds	r7, #20
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e200:	68fb      	ldr	r3, [r7, #12]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e20e:	b480      	push	{r7}
 800e210:	b085      	sub	sp, #20
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e22a:	69db      	ldr	r3, [r3, #28]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	4013      	ands	r3, r2
 800e230:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	0c1b      	lsrs	r3, r3, #16
}
 800e236:	4618      	mov	r0, r3
 800e238:	3714      	adds	r7, #20
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e242:	b480      	push	{r7}
 800e244:	b085      	sub	sp, #20
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e25e:	69db      	ldr	r3, [r3, #28]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	4013      	ands	r3, r2
 800e264:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	b29b      	uxth	r3, r3
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e276:	b480      	push	{r7}
 800e278:	b085      	sub	sp, #20
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e286:	78fb      	ldrb	r3, [r7, #3]
 800e288:	015a      	lsls	r2, r3, #5
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	4413      	add	r3, r2
 800e28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3714      	adds	r7, #20
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e2b2:	b480      	push	{r7}
 800e2b4:	b087      	sub	sp, #28
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e2d6:	78fb      	ldrb	r3, [r7, #3]
 800e2d8:	f003 030f 	and.w	r3, r3, #15
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	fa22 f303 	lsr.w	r3, r2, r3
 800e2e2:	01db      	lsls	r3, r3, #7
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	693a      	ldr	r2, [r7, #16]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e300:	68bb      	ldr	r3, [r7, #8]
}
 800e302:	4618      	mov	r0, r3
 800e304:	371c      	adds	r7, #28
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	f003 0301 	and.w	r3, r3, #1
}
 800e31e:	4618      	mov	r0, r3
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e32a:	b480      	push	{r7}
 800e32c:	b085      	sub	sp, #20
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e344:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e348:	f023 0307 	bic.w	r3, r3, #7
 800e34c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e35c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e370:	b480      	push	{r7}
 800e372:	b087      	sub	sp, #28
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	460b      	mov	r3, r1
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	333c      	adds	r3, #60	; 0x3c
 800e386:	3304      	adds	r3, #4
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	4a26      	ldr	r2, [pc, #152]	; (800e428 <USB_EP0_OutStart+0xb8>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d90a      	bls.n	800e3aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3a4:	d101      	bne.n	800e3aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	e037      	b.n	800e41a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3d8:	f043 0318 	orr.w	r3, r3, #24
 800e3dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e4:	691b      	ldr	r3, [r3, #16]
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e3f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e3f2:	7afb      	ldrb	r3, [r7, #11]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d10f      	bne.n	800e418 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3fe:	461a      	mov	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	697a      	ldr	r2, [r7, #20]
 800e40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e412:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	371c      	adds	r7, #28
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	4f54300a 	.word	0x4f54300a

0800e42c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3301      	adds	r3, #1
 800e43c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	4a13      	ldr	r2, [pc, #76]	; (800e490 <USB_CoreReset+0x64>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d901      	bls.n	800e44a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e446:	2303      	movs	r3, #3
 800e448:	e01b      	b.n	800e482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	daf2      	bge.n	800e438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e452:	2300      	movs	r3, #0
 800e454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	f043 0201 	orr.w	r2, r3, #1
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3301      	adds	r3, #1
 800e466:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	4a09      	ldr	r2, [pc, #36]	; (800e490 <USB_CoreReset+0x64>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d901      	bls.n	800e474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e470:	2303      	movs	r3, #3
 800e472:	e006      	b.n	800e482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d0f0      	beq.n	800e462 <USB_CoreReset+0x36>

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	00030d40 	.word	0x00030d40

0800e494 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	460b      	mov	r3, r1
 800e49e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e4a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e4a4:	f002 fca2 	bl	8010dec <USBD_static_malloc>
 800e4a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d109      	bne.n	800e4c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	32b0      	adds	r2, #176	; 0xb0
 800e4ba:	2100      	movs	r1, #0
 800e4bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	e0d4      	b.n	800e66e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e4c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f002 fcd2 	bl	8010e74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	32b0      	adds	r2, #176	; 0xb0
 800e4da:	68f9      	ldr	r1, [r7, #12]
 800e4dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	32b0      	adds	r2, #176	; 0xb0
 800e4ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	7c1b      	ldrb	r3, [r3, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d138      	bne.n	800e56e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e4fc:	4b5e      	ldr	r3, [pc, #376]	; (800e678 <USBD_CDC_Init+0x1e4>)
 800e4fe:	7819      	ldrb	r1, [r3, #0]
 800e500:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e504:	2202      	movs	r2, #2
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f002 fb4d 	bl	8010ba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e50c:	4b5a      	ldr	r3, [pc, #360]	; (800e678 <USBD_CDC_Init+0x1e4>)
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	f003 020f 	and.w	r2, r3, #15
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	4613      	mov	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4413      	add	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	440b      	add	r3, r1
 800e520:	3324      	adds	r3, #36	; 0x24
 800e522:	2201      	movs	r2, #1
 800e524:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e526:	4b55      	ldr	r3, [pc, #340]	; (800e67c <USBD_CDC_Init+0x1e8>)
 800e528:	7819      	ldrb	r1, [r3, #0]
 800e52a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e52e:	2202      	movs	r2, #2
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f002 fb38 	bl	8010ba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e536:	4b51      	ldr	r3, [pc, #324]	; (800e67c <USBD_CDC_Init+0x1e8>)
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	f003 020f 	and.w	r2, r3, #15
 800e53e:	6879      	ldr	r1, [r7, #4]
 800e540:	4613      	mov	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e54e:	2201      	movs	r2, #1
 800e550:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e552:	4b4b      	ldr	r3, [pc, #300]	; (800e680 <USBD_CDC_Init+0x1ec>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f003 020f 	and.w	r2, r3, #15
 800e55a:	6879      	ldr	r1, [r7, #4]
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	440b      	add	r3, r1
 800e566:	3326      	adds	r3, #38	; 0x26
 800e568:	2210      	movs	r2, #16
 800e56a:	801a      	strh	r2, [r3, #0]
 800e56c:	e035      	b.n	800e5da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e56e:	4b42      	ldr	r3, [pc, #264]	; (800e678 <USBD_CDC_Init+0x1e4>)
 800e570:	7819      	ldrb	r1, [r3, #0]
 800e572:	2340      	movs	r3, #64	; 0x40
 800e574:	2202      	movs	r2, #2
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f002 fb15 	bl	8010ba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e57c:	4b3e      	ldr	r3, [pc, #248]	; (800e678 <USBD_CDC_Init+0x1e4>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 020f 	and.w	r2, r3, #15
 800e584:	6879      	ldr	r1, [r7, #4]
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	440b      	add	r3, r1
 800e590:	3324      	adds	r3, #36	; 0x24
 800e592:	2201      	movs	r2, #1
 800e594:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e596:	4b39      	ldr	r3, [pc, #228]	; (800e67c <USBD_CDC_Init+0x1e8>)
 800e598:	7819      	ldrb	r1, [r3, #0]
 800e59a:	2340      	movs	r3, #64	; 0x40
 800e59c:	2202      	movs	r2, #2
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f002 fb01 	bl	8010ba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e5a4:	4b35      	ldr	r3, [pc, #212]	; (800e67c <USBD_CDC_Init+0x1e8>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	f003 020f 	and.w	r2, r3, #15
 800e5ac:	6879      	ldr	r1, [r7, #4]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	440b      	add	r3, r1
 800e5b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e5bc:	2201      	movs	r2, #1
 800e5be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e5c0:	4b2f      	ldr	r3, [pc, #188]	; (800e680 <USBD_CDC_Init+0x1ec>)
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	f003 020f 	and.w	r2, r3, #15
 800e5c8:	6879      	ldr	r1, [r7, #4]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	440b      	add	r3, r1
 800e5d4:	3326      	adds	r3, #38	; 0x26
 800e5d6:	2210      	movs	r2, #16
 800e5d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e5da:	4b29      	ldr	r3, [pc, #164]	; (800e680 <USBD_CDC_Init+0x1ec>)
 800e5dc:	7819      	ldrb	r1, [r3, #0]
 800e5de:	2308      	movs	r3, #8
 800e5e0:	2203      	movs	r2, #3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f002 fadf 	bl	8010ba6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e5e8:	4b25      	ldr	r3, [pc, #148]	; (800e680 <USBD_CDC_Init+0x1ec>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	f003 020f 	and.w	r2, r3, #15
 800e5f0:	6879      	ldr	r1, [r7, #4]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	440b      	add	r3, r1
 800e5fc:	3324      	adds	r3, #36	; 0x24
 800e5fe:	2201      	movs	r2, #1
 800e600:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	33b0      	adds	r3, #176	; 0xb0
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	4413      	add	r3, r2
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e638:	2302      	movs	r3, #2
 800e63a:	e018      	b.n	800e66e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	7c1b      	ldrb	r3, [r3, #16]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e644:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <USBD_CDC_Init+0x1e8>)
 800e646:	7819      	ldrb	r1, [r3, #0]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e64e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f002 fb96 	bl	8010d84 <USBD_LL_PrepareReceive>
 800e658:	e008      	b.n	800e66c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e65a:	4b08      	ldr	r3, [pc, #32]	; (800e67c <USBD_CDC_Init+0x1e8>)
 800e65c:	7819      	ldrb	r1, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e664:	2340      	movs	r3, #64	; 0x40
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f002 fb8c 	bl	8010d84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20000177 	.word	0x20000177
 800e67c:	20000178 	.word	0x20000178
 800e680:	20000179 	.word	0x20000179

0800e684 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e690:	4b3a      	ldr	r3, [pc, #232]	; (800e77c <USBD_CDC_DeInit+0xf8>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f002 faab 	bl	8010bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e69c:	4b37      	ldr	r3, [pc, #220]	; (800e77c <USBD_CDC_DeInit+0xf8>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 020f 	and.w	r2, r3, #15
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	3324      	adds	r3, #36	; 0x24
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e6b6:	4b32      	ldr	r3, [pc, #200]	; (800e780 <USBD_CDC_DeInit+0xfc>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f002 fa98 	bl	8010bf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e6c2:	4b2f      	ldr	r3, [pc, #188]	; (800e780 <USBD_CDC_DeInit+0xfc>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	f003 020f 	and.w	r2, r3, #15
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4413      	add	r3, r2
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	440b      	add	r3, r1
 800e6d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6da:	2200      	movs	r2, #0
 800e6dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e6de:	4b29      	ldr	r3, [pc, #164]	; (800e784 <USBD_CDC_DeInit+0x100>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f002 fa84 	bl	8010bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e6ea:	4b26      	ldr	r3, [pc, #152]	; (800e784 <USBD_CDC_DeInit+0x100>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	f003 020f 	and.w	r2, r3, #15
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	440b      	add	r3, r1
 800e6fe:	3324      	adds	r3, #36	; 0x24
 800e700:	2200      	movs	r2, #0
 800e702:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e704:	4b1f      	ldr	r3, [pc, #124]	; (800e784 <USBD_CDC_DeInit+0x100>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	f003 020f 	and.w	r2, r3, #15
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	4613      	mov	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4413      	add	r3, r2
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	440b      	add	r3, r1
 800e718:	3326      	adds	r3, #38	; 0x26
 800e71a:	2200      	movs	r2, #0
 800e71c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	32b0      	adds	r2, #176	; 0xb0
 800e728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d01f      	beq.n	800e770 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	33b0      	adds	r3, #176	; 0xb0
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	4413      	add	r3, r2
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	32b0      	adds	r2, #176	; 0xb0
 800e74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e752:	4618      	mov	r0, r3
 800e754:	f002 fb58 	bl	8010e08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	32b0      	adds	r2, #176	; 0xb0
 800e762:	2100      	movs	r1, #0
 800e764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	20000177 	.word	0x20000177
 800e780:	20000178 	.word	0x20000178
 800e784:	20000179 	.word	0x20000179

0800e788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	32b0      	adds	r2, #176	; 0xb0
 800e79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d101      	bne.n	800e7b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	e0bf      	b.n	800e938 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d050      	beq.n	800e866 <USBD_CDC_Setup+0xde>
 800e7c4:	2b20      	cmp	r3, #32
 800e7c6:	f040 80af 	bne.w	800e928 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	88db      	ldrh	r3, [r3, #6]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d03a      	beq.n	800e848 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	b25b      	sxtb	r3, r3
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da1b      	bge.n	800e814 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	33b0      	adds	r3, #176	; 0xb0
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	4413      	add	r3, r2
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	683a      	ldr	r2, [r7, #0]
 800e7f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e7f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e7f4:	683a      	ldr	r2, [r7, #0]
 800e7f6:	88d2      	ldrh	r2, [r2, #6]
 800e7f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	88db      	ldrh	r3, [r3, #6]
 800e7fe:	2b07      	cmp	r3, #7
 800e800:	bf28      	it	cs
 800e802:	2307      	movcs	r3, #7
 800e804:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	89fa      	ldrh	r2, [r7, #14]
 800e80a:	4619      	mov	r1, r3
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f001 fd89 	bl	8010324 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e812:	e090      	b.n	800e936 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	785a      	ldrb	r2, [r3, #1]
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	88db      	ldrh	r3, [r3, #6]
 800e822:	2b3f      	cmp	r3, #63	; 0x3f
 800e824:	d803      	bhi.n	800e82e <USBD_CDC_Setup+0xa6>
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	88db      	ldrh	r3, [r3, #6]
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	e000      	b.n	800e830 <USBD_CDC_Setup+0xa8>
 800e82e:	2240      	movs	r2, #64	; 0x40
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e836:	6939      	ldr	r1, [r7, #16]
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e83e:	461a      	mov	r2, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 fd9b 	bl	801037c <USBD_CtlPrepareRx>
      break;
 800e846:	e076      	b.n	800e936 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	33b0      	adds	r3, #176	; 0xb0
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	4413      	add	r3, r2
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	7850      	ldrb	r0, [r2, #1]
 800e85e:	2200      	movs	r2, #0
 800e860:	6839      	ldr	r1, [r7, #0]
 800e862:	4798      	blx	r3
      break;
 800e864:	e067      	b.n	800e936 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	785b      	ldrb	r3, [r3, #1]
 800e86a:	2b0b      	cmp	r3, #11
 800e86c:	d851      	bhi.n	800e912 <USBD_CDC_Setup+0x18a>
 800e86e:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <USBD_CDC_Setup+0xec>)
 800e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e874:	0800e8a5 	.word	0x0800e8a5
 800e878:	0800e921 	.word	0x0800e921
 800e87c:	0800e913 	.word	0x0800e913
 800e880:	0800e913 	.word	0x0800e913
 800e884:	0800e913 	.word	0x0800e913
 800e888:	0800e913 	.word	0x0800e913
 800e88c:	0800e913 	.word	0x0800e913
 800e890:	0800e913 	.word	0x0800e913
 800e894:	0800e913 	.word	0x0800e913
 800e898:	0800e913 	.word	0x0800e913
 800e89c:	0800e8cf 	.word	0x0800e8cf
 800e8a0:	0800e8f9 	.word	0x0800e8f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b03      	cmp	r3, #3
 800e8ae:	d107      	bne.n	800e8c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e8b0:	f107 030a 	add.w	r3, r7, #10
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 fd33 	bl	8010324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8be:	e032      	b.n	800e926 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f001 fcbd 	bl	8010242 <USBD_CtlError>
            ret = USBD_FAIL;
 800e8c8:	2303      	movs	r3, #3
 800e8ca:	75fb      	strb	r3, [r7, #23]
          break;
 800e8cc:	e02b      	b.n	800e926 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d107      	bne.n	800e8ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e8da:	f107 030d 	add.w	r3, r7, #13
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f001 fd1e 	bl	8010324 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8e8:	e01d      	b.n	800e926 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e8ea:	6839      	ldr	r1, [r7, #0]
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f001 fca8 	bl	8010242 <USBD_CtlError>
            ret = USBD_FAIL;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	75fb      	strb	r3, [r7, #23]
          break;
 800e8f6:	e016      	b.n	800e926 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	2b03      	cmp	r3, #3
 800e902:	d00f      	beq.n	800e924 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f001 fc9b 	bl	8010242 <USBD_CtlError>
            ret = USBD_FAIL;
 800e90c:	2303      	movs	r3, #3
 800e90e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e910:	e008      	b.n	800e924 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f001 fc94 	bl	8010242 <USBD_CtlError>
          ret = USBD_FAIL;
 800e91a:	2303      	movs	r3, #3
 800e91c:	75fb      	strb	r3, [r7, #23]
          break;
 800e91e:	e002      	b.n	800e926 <USBD_CDC_Setup+0x19e>
          break;
 800e920:	bf00      	nop
 800e922:	e008      	b.n	800e936 <USBD_CDC_Setup+0x1ae>
          break;
 800e924:	bf00      	nop
      }
      break;
 800e926:	e006      	b.n	800e936 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f001 fc89 	bl	8010242 <USBD_CtlError>
      ret = USBD_FAIL;
 800e930:	2303      	movs	r3, #3
 800e932:	75fb      	strb	r3, [r7, #23]
      break;
 800e934:	bf00      	nop
  }

  return (uint8_t)ret;
 800e936:	7dfb      	ldrb	r3, [r7, #23]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	32b0      	adds	r2, #176	; 0xb0
 800e95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d101      	bne.n	800e96a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e966:	2303      	movs	r3, #3
 800e968:	e065      	b.n	800ea36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	32b0      	adds	r2, #176	; 0xb0
 800e974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e978:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	f003 020f 	and.w	r2, r3, #15
 800e980:	6879      	ldr	r1, [r7, #4]
 800e982:	4613      	mov	r3, r2
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	440b      	add	r3, r1
 800e98c:	3318      	adds	r3, #24
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d02f      	beq.n	800e9f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e994:	78fb      	ldrb	r3, [r7, #3]
 800e996:	f003 020f 	and.w	r2, r3, #15
 800e99a:	6879      	ldr	r1, [r7, #4]
 800e99c:	4613      	mov	r3, r2
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	4413      	add	r3, r2
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	440b      	add	r3, r1
 800e9a6:	3318      	adds	r3, #24
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	78fb      	ldrb	r3, [r7, #3]
 800e9ac:	f003 010f 	and.w	r1, r3, #15
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4403      	add	r3, r0
 800e9bc:	3348      	adds	r3, #72	; 0x48
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e9c4:	fb01 f303 	mul.w	r3, r1, r3
 800e9c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d112      	bne.n	800e9f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e9ce:	78fb      	ldrb	r3, [r7, #3]
 800e9d0:	f003 020f 	and.w	r2, r3, #15
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	440b      	add	r3, r1
 800e9e0:	3318      	adds	r3, #24
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e9e6:	78f9      	ldrb	r1, [r7, #3]
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f002 f9a8 	bl	8010d42 <USBD_LL_Transmit>
 800e9f2:	e01f      	b.n	800ea34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	33b0      	adds	r3, #176	; 0xb0
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d010      	beq.n	800ea34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	33b0      	adds	r3, #176	; 0xb0
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	68ba      	ldr	r2, [r7, #8]
 800ea26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ea30:	78fa      	ldrb	r2, [r7, #3]
 800ea32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b084      	sub	sp, #16
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	460b      	mov	r3, r1
 800ea48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	32b0      	adds	r2, #176	; 0xb0
 800ea54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	32b0      	adds	r2, #176	; 0xb0
 800ea64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d101      	bne.n	800ea70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	e01a      	b.n	800eaa6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ea70:	78fb      	ldrb	r3, [r7, #3]
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f002 f9a6 	bl	8010dc6 <USBD_LL_GetRxDataSize>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	33b0      	adds	r3, #176	; 0xb0
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b084      	sub	sp, #16
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	32b0      	adds	r2, #176	; 0xb0
 800eac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d101      	bne.n	800ead0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eacc:	2303      	movs	r3, #3
 800eace:	e025      	b.n	800eb1c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	33b0      	adds	r3, #176	; 0xb0
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d01a      	beq.n	800eb1a <USBD_CDC_EP0_RxReady+0x6c>
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eaea:	2bff      	cmp	r3, #255	; 0xff
 800eaec:	d015      	beq.n	800eb1a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	33b0      	adds	r3, #176	; 0xb0
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800eb06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eb0e:	b292      	uxth	r2, r2
 800eb10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	22ff      	movs	r2, #255	; 0xff
 800eb16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eb2c:	2182      	movs	r1, #130	; 0x82
 800eb2e:	4818      	ldr	r0, [pc, #96]	; (800eb90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eb30:	f000 fd4f 	bl	800f5d2 <USBD_GetEpDesc>
 800eb34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eb36:	2101      	movs	r1, #1
 800eb38:	4815      	ldr	r0, [pc, #84]	; (800eb90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eb3a:	f000 fd4a 	bl	800f5d2 <USBD_GetEpDesc>
 800eb3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eb40:	2181      	movs	r1, #129	; 0x81
 800eb42:	4813      	ldr	r0, [pc, #76]	; (800eb90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eb44:	f000 fd45 	bl	800f5d2 <USBD_GetEpDesc>
 800eb48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	2210      	movs	r2, #16
 800eb54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d006      	beq.n	800eb6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb64:	711a      	strb	r2, [r3, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d006      	beq.n	800eb7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb78:	711a      	strb	r2, [r3, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2243      	movs	r2, #67	; 0x43
 800eb82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20000134 	.word	0x20000134

0800eb94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eb9c:	2182      	movs	r1, #130	; 0x82
 800eb9e:	4818      	ldr	r0, [pc, #96]	; (800ec00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eba0:	f000 fd17 	bl	800f5d2 <USBD_GetEpDesc>
 800eba4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eba6:	2101      	movs	r1, #1
 800eba8:	4815      	ldr	r0, [pc, #84]	; (800ec00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ebaa:	f000 fd12 	bl	800f5d2 <USBD_GetEpDesc>
 800ebae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ebb0:	2181      	movs	r1, #129	; 0x81
 800ebb2:	4813      	ldr	r0, [pc, #76]	; (800ec00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ebb4:	f000 fd0d 	bl	800f5d2 <USBD_GetEpDesc>
 800ebb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d002      	beq.n	800ebc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2210      	movs	r2, #16
 800ebc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d006      	beq.n	800ebda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	711a      	strb	r2, [r3, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f042 0202 	orr.w	r2, r2, #2
 800ebd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	711a      	strb	r2, [r3, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f042 0202 	orr.w	r2, r2, #2
 800ebec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2243      	movs	r2, #67	; 0x43
 800ebf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ebf4:	4b02      	ldr	r3, [pc, #8]	; (800ec00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20000134 	.word	0x20000134

0800ec04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ec0c:	2182      	movs	r1, #130	; 0x82
 800ec0e:	4818      	ldr	r0, [pc, #96]	; (800ec70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ec10:	f000 fcdf 	bl	800f5d2 <USBD_GetEpDesc>
 800ec14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ec16:	2101      	movs	r1, #1
 800ec18:	4815      	ldr	r0, [pc, #84]	; (800ec70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ec1a:	f000 fcda 	bl	800f5d2 <USBD_GetEpDesc>
 800ec1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ec20:	2181      	movs	r1, #129	; 0x81
 800ec22:	4813      	ldr	r0, [pc, #76]	; (800ec70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ec24:	f000 fcd5 	bl	800f5d2 <USBD_GetEpDesc>
 800ec28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d002      	beq.n	800ec36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	2210      	movs	r2, #16
 800ec34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d006      	beq.n	800ec4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec44:	711a      	strb	r2, [r3, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d006      	beq.n	800ec5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec58:	711a      	strb	r2, [r3, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2243      	movs	r2, #67	; 0x43
 800ec62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ec64:	4b02      	ldr	r3, [pc, #8]	; (800ec70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3718      	adds	r7, #24
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	20000134 	.word	0x20000134

0800ec74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	220a      	movs	r2, #10
 800ec80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ec82:	4b03      	ldr	r3, [pc, #12]	; (800ec90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	200000f0 	.word	0x200000f0

0800ec94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d101      	bne.n	800eca8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eca4:	2303      	movs	r3, #3
 800eca6:	e009      	b.n	800ecbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	33b0      	adds	r3, #176	; 0xb0
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	370c      	adds	r7, #12
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b087      	sub	sp, #28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	32b0      	adds	r2, #176	; 0xb0
 800ecde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d101      	bne.n	800ecee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ecea:	2303      	movs	r3, #3
 800ecec:	e008      	b.n	800ed00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	371c      	adds	r7, #28
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	32b0      	adds	r2, #176	; 0xb0
 800ed20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d101      	bne.n	800ed30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ed2c:	2303      	movs	r3, #3
 800ed2e:	e004      	b.n	800ed3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3714      	adds	r7, #20
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
	...

0800ed48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	32b0      	adds	r2, #176	; 0xb0
 800ed5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ed60:	2301      	movs	r3, #1
 800ed62:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	32b0      	adds	r2, #176	; 0xb0
 800ed6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d101      	bne.n	800ed7a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ed76:	2303      	movs	r3, #3
 800ed78:	e025      	b.n	800edc6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d11f      	bne.n	800edc4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ed8c:	4b10      	ldr	r3, [pc, #64]	; (800edd0 <USBD_CDC_TransmitPacket+0x88>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	f003 020f 	and.w	r2, r3, #15
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4413      	add	r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4403      	add	r3, r0
 800eda6:	3318      	adds	r3, #24
 800eda8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800edaa:	4b09      	ldr	r3, [pc, #36]	; (800edd0 <USBD_CDC_TransmitPacket+0x88>)
 800edac:	7819      	ldrb	r1, [r3, #0]
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f001 ffc1 	bl	8010d42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800edc0:	2300      	movs	r3, #0
 800edc2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800edc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20000177 	.word	0x20000177

0800edd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	32b0      	adds	r2, #176	; 0xb0
 800ede6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	32b0      	adds	r2, #176	; 0xb0
 800edf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d101      	bne.n	800ee02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e018      	b.n	800ee34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	7c1b      	ldrb	r3, [r3, #16]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10a      	bne.n	800ee20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ee0a:	4b0c      	ldr	r3, [pc, #48]	; (800ee3c <USBD_CDC_ReceivePacket+0x68>)
 800ee0c:	7819      	ldrb	r1, [r3, #0]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f001 ffb3 	bl	8010d84 <USBD_LL_PrepareReceive>
 800ee1e:	e008      	b.n	800ee32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ee20:	4b06      	ldr	r3, [pc, #24]	; (800ee3c <USBD_CDC_ReceivePacket+0x68>)
 800ee22:	7819      	ldrb	r1, [r3, #0]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee2a:	2340      	movs	r3, #64	; 0x40
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f001 ffa9 	bl	8010d84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	20000178 	.word	0x20000178

0800ee40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d101      	bne.n	800ee58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee54:	2303      	movs	r3, #3
 800ee56:	e01f      	b.n	800ee98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d003      	beq.n	800ee7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	79fa      	ldrb	r2, [r7, #7]
 800ee8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f001 fe23 	bl	8010ad8 <USBD_LL_Init>
 800ee92:	4603      	mov	r3, r0
 800ee94:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	e025      	b.n	800ef04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	32ae      	adds	r2, #174	; 0xae
 800eeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00f      	beq.n	800eef4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	32ae      	adds	r2, #174	; 0xae
 800eede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee4:	f107 020e 	add.w	r2, r7, #14
 800eee8:	4610      	mov	r0, r2
 800eeea:	4798      	blx	r3
 800eeec:	4602      	mov	r2, r0
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800eefa:	1c5a      	adds	r2, r3, #1
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f001 fe2b 	bl	8010b70 <USBD_LL_Start>
 800ef1a:	4603      	mov	r3, r0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	370c      	adds	r7, #12
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b084      	sub	sp, #16
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	460b      	mov	r3, r1
 800ef44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d009      	beq.n	800ef68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	78fa      	ldrb	r2, [r7, #3]
 800ef5e:	4611      	mov	r1, r2
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	4798      	blx	r3
 800ef64:	4603      	mov	r3, r0
 800ef66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b084      	sub	sp, #16
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	460b      	mov	r3, r1
 800ef7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	78fa      	ldrb	r2, [r7, #3]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	4798      	blx	r3
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef98:	2303      	movs	r3, #3
 800ef9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	4618      	mov	r0, r3
 800efba:	f001 f908 	bl	80101ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800efcc:	461a      	mov	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800efda:	f003 031f 	and.w	r3, r3, #31
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d01a      	beq.n	800f018 <USBD_LL_SetupStage+0x72>
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	d822      	bhi.n	800f02c <USBD_LL_SetupStage+0x86>
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d002      	beq.n	800eff0 <USBD_LL_SetupStage+0x4a>
 800efea:	2b01      	cmp	r3, #1
 800efec:	d00a      	beq.n	800f004 <USBD_LL_SetupStage+0x5e>
 800efee:	e01d      	b.n	800f02c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eff6:	4619      	mov	r1, r3
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 fb5f 	bl	800f6bc <USBD_StdDevReq>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]
      break;
 800f002:	e020      	b.n	800f046 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fbc7 	bl	800f7a0 <USBD_StdItfReq>
 800f012:	4603      	mov	r3, r0
 800f014:	73fb      	strb	r3, [r7, #15]
      break;
 800f016:	e016      	b.n	800f046 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f01e:	4619      	mov	r1, r3
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fc29 	bl	800f878 <USBD_StdEPReq>
 800f026:	4603      	mov	r3, r0
 800f028:	73fb      	strb	r3, [r7, #15]
      break;
 800f02a:	e00c      	b.n	800f046 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f032:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f036:	b2db      	uxtb	r3, r3
 800f038:	4619      	mov	r1, r3
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f001 fdf8 	bl	8010c30 <USBD_LL_StallEP>
 800f040:	4603      	mov	r3, r0
 800f042:	73fb      	strb	r3, [r7, #15]
      break;
 800f044:	bf00      	nop
  }

  return ret;
 800f046:	7bfb      	ldrb	r3, [r7, #15]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	460b      	mov	r3, r1
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f05e:	2300      	movs	r3, #0
 800f060:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f062:	7afb      	ldrb	r3, [r7, #11]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d16e      	bne.n	800f146 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f06e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f076:	2b03      	cmp	r3, #3
 800f078:	f040 8098 	bne.w	800f1ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	689a      	ldr	r2, [r3, #8]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	429a      	cmp	r2, r3
 800f086:	d913      	bls.n	800f0b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	689a      	ldr	r2, [r3, #8]
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	1ad2      	subs	r2, r2, r3
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	68da      	ldr	r2, [r3, #12]
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	bf28      	it	cs
 800f0a2:	4613      	movcs	r3, r2
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f001 f984 	bl	80103b6 <USBD_CtlContinueRx>
 800f0ae:	e07d      	b.n	800f1ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f0b6:	f003 031f 	and.w	r3, r3, #31
 800f0ba:	2b02      	cmp	r3, #2
 800f0bc:	d014      	beq.n	800f0e8 <USBD_LL_DataOutStage+0x98>
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d81d      	bhi.n	800f0fe <USBD_LL_DataOutStage+0xae>
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d002      	beq.n	800f0cc <USBD_LL_DataOutStage+0x7c>
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d003      	beq.n	800f0d2 <USBD_LL_DataOutStage+0x82>
 800f0ca:	e018      	b.n	800f0fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	75bb      	strb	r3, [r7, #22]
            break;
 800f0d0:	e018      	b.n	800f104 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	4619      	mov	r1, r3
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 fa5e 	bl	800f59e <USBD_CoreFindIF>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	75bb      	strb	r3, [r7, #22]
            break;
 800f0e6:	e00d      	b.n	800f104 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f000 fa60 	bl	800f5b8 <USBD_CoreFindEP>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	75bb      	strb	r3, [r7, #22]
            break;
 800f0fc:	e002      	b.n	800f104 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f0fe:	2300      	movs	r3, #0
 800f100:	75bb      	strb	r3, [r7, #22]
            break;
 800f102:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f104:	7dbb      	ldrb	r3, [r7, #22]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d119      	bne.n	800f13e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b03      	cmp	r3, #3
 800f114:	d113      	bne.n	800f13e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f116:	7dba      	ldrb	r2, [r7, #22]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	32ae      	adds	r2, #174	; 0xae
 800f11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00b      	beq.n	800f13e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f126:	7dba      	ldrb	r2, [r7, #22]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f12e:	7dba      	ldrb	r2, [r7, #22]
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	32ae      	adds	r2, #174	; 0xae
 800f134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f001 f94a 	bl	80103d8 <USBD_CtlSendStatus>
 800f144:	e032      	b.n	800f1ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f146:	7afb      	ldrb	r3, [r7, #11]
 800f148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	4619      	mov	r1, r3
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f000 fa31 	bl	800f5b8 <USBD_CoreFindEP>
 800f156:	4603      	mov	r3, r0
 800f158:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f15a:	7dbb      	ldrb	r3, [r7, #22]
 800f15c:	2bff      	cmp	r3, #255	; 0xff
 800f15e:	d025      	beq.n	800f1ac <USBD_LL_DataOutStage+0x15c>
 800f160:	7dbb      	ldrb	r3, [r7, #22]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d122      	bne.n	800f1ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	2b03      	cmp	r3, #3
 800f170:	d117      	bne.n	800f1a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f172:	7dba      	ldrb	r2, [r7, #22]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	32ae      	adds	r2, #174	; 0xae
 800f178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f17c:	699b      	ldr	r3, [r3, #24]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00f      	beq.n	800f1a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f182:	7dba      	ldrb	r2, [r7, #22]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f18a:	7dba      	ldrb	r2, [r7, #22]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	32ae      	adds	r2, #174	; 0xae
 800f190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f194:	699b      	ldr	r3, [r3, #24]
 800f196:	7afa      	ldrb	r2, [r7, #11]
 800f198:	4611      	mov	r1, r2
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	4798      	blx	r3
 800f19e:	4603      	mov	r3, r0
 800f1a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f1a2:	7dfb      	ldrb	r3, [r7, #23]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d001      	beq.n	800f1ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	e000      	b.n	800f1ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3718      	adds	r7, #24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b086      	sub	sp, #24
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	60f8      	str	r0, [r7, #12]
 800f1be:	460b      	mov	r3, r1
 800f1c0:	607a      	str	r2, [r7, #4]
 800f1c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f1c4:	7afb      	ldrb	r3, [r7, #11]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d16f      	bne.n	800f2aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	3314      	adds	r3, #20
 800f1ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d15a      	bne.n	800f290 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	689a      	ldr	r2, [r3, #8]
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d914      	bls.n	800f210 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	689a      	ldr	r2, [r3, #8]
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	1ad2      	subs	r2, r2, r3
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f001 f8ac 	bl	801035a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f202:	2300      	movs	r3, #0
 800f204:	2200      	movs	r2, #0
 800f206:	2100      	movs	r1, #0
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f001 fdbb 	bl	8010d84 <USBD_LL_PrepareReceive>
 800f20e:	e03f      	b.n	800f290 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	68da      	ldr	r2, [r3, #12]
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d11c      	bne.n	800f256 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	685a      	ldr	r2, [r3, #4]
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f224:	429a      	cmp	r2, r3
 800f226:	d316      	bcc.n	800f256 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	685a      	ldr	r2, [r3, #4]
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f232:	429a      	cmp	r2, r3
 800f234:	d20f      	bcs.n	800f256 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f236:	2200      	movs	r2, #0
 800f238:	2100      	movs	r1, #0
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f001 f88d 	bl	801035a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2200      	movs	r2, #0
 800f244:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f248:	2300      	movs	r3, #0
 800f24a:	2200      	movs	r2, #0
 800f24c:	2100      	movs	r1, #0
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f001 fd98 	bl	8010d84 <USBD_LL_PrepareReceive>
 800f254:	e01c      	b.n	800f290 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d10f      	bne.n	800f282 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d009      	beq.n	800f282 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2200      	movs	r2, #0
 800f272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f282:	2180      	movs	r1, #128	; 0x80
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f001 fcd3 	bl	8010c30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f001 f8b7 	bl	80103fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d03a      	beq.n	800f310 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7ff fe42 	bl	800ef24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f2a8:	e032      	b.n	800f310 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f2aa:	7afb      	ldrb	r3, [r7, #11]
 800f2ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68f8      	ldr	r0, [r7, #12]
 800f2b6:	f000 f97f 	bl	800f5b8 <USBD_CoreFindEP>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
 800f2c0:	2bff      	cmp	r3, #255	; 0xff
 800f2c2:	d025      	beq.n	800f310 <USBD_LL_DataInStage+0x15a>
 800f2c4:	7dfb      	ldrb	r3, [r7, #23]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d122      	bne.n	800f310 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d11c      	bne.n	800f310 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f2d6:	7dfa      	ldrb	r2, [r7, #23]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	32ae      	adds	r2, #174	; 0xae
 800f2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d014      	beq.n	800f310 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f2e6:	7dfa      	ldrb	r2, [r7, #23]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f2ee:	7dfa      	ldrb	r2, [r7, #23]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	32ae      	adds	r2, #174	; 0xae
 800f2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f8:	695b      	ldr	r3, [r3, #20]
 800f2fa:	7afa      	ldrb	r2, [r7, #11]
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	4798      	blx	r3
 800f302:	4603      	mov	r3, r0
 800f304:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f306:	7dbb      	ldrb	r3, [r7, #22]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d001      	beq.n	800f310 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f30c:	7dbb      	ldrb	r3, [r7, #22]
 800f30e:	e000      	b.n	800f312 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f310:	2300      	movs	r3, #0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b084      	sub	sp, #16
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2200      	movs	r2, #0
 800f332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f352:	2b00      	cmp	r3, #0
 800f354:	d014      	beq.n	800f380 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00e      	beq.n	800f380 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	6852      	ldr	r2, [r2, #4]
 800f36e:	b2d2      	uxtb	r2, r2
 800f370:	4611      	mov	r1, r2
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	4798      	blx	r3
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f37c:	2303      	movs	r3, #3
 800f37e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f380:	2340      	movs	r3, #64	; 0x40
 800f382:	2200      	movs	r2, #0
 800f384:	2100      	movs	r1, #0
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f001 fc0d 	bl	8010ba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2240      	movs	r2, #64	; 0x40
 800f398:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f39c:	2340      	movs	r3, #64	; 0x40
 800f39e:	2200      	movs	r2, #0
 800f3a0:	2180      	movs	r1, #128	; 0x80
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f001 fbff 	bl	8010ba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2240      	movs	r2, #64	; 0x40
 800f3b2:	621a      	str	r2, [r3, #32]

  return ret;
 800f3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	78fa      	ldrb	r2, [r7, #3]
 800f3ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f3de:	b480      	push	{r7}
 800f3e0:	b083      	sub	sp, #12
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2204      	movs	r2, #4
 800f3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	370c      	adds	r7, #12
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr

0800f40a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f40a:	b480      	push	{r7}
 800f40c:	b083      	sub	sp, #12
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	d106      	bne.n	800f42c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f424:	b2da      	uxtb	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	370c      	adds	r7, #12
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr

0800f43a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b082      	sub	sp, #8
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b03      	cmp	r3, #3
 800f44c:	d110      	bne.n	800f470 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00b      	beq.n	800f470 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d005      	beq.n	800f470 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f46a:	69db      	ldr	r3, [r3, #28]
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b082      	sub	sp, #8
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	32ae      	adds	r2, #174	; 0xae
 800f490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d101      	bne.n	800f49c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f498:	2303      	movs	r3, #3
 800f49a:	e01c      	b.n	800f4d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d115      	bne.n	800f4d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	32ae      	adds	r2, #174	; 0xae
 800f4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4b6:	6a1b      	ldr	r3, [r3, #32]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	32ae      	adds	r2, #174	; 0xae
 800f4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ca:	6a1b      	ldr	r3, [r3, #32]
 800f4cc:	78fa      	ldrb	r2, [r7, #3]
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b082      	sub	sp, #8
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	32ae      	adds	r2, #174	; 0xae
 800f4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d101      	bne.n	800f500 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e01c      	b.n	800f53a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b03      	cmp	r3, #3
 800f50a:	d115      	bne.n	800f538 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	32ae      	adds	r2, #174	; 0xae
 800f516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d00b      	beq.n	800f538 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	32ae      	adds	r2, #174	; 0xae
 800f52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f530:	78fa      	ldrb	r2, [r7, #3]
 800f532:	4611      	mov	r1, r2
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f542:	b480      	push	{r7}
 800f544:	b083      	sub	sp, #12
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f560:	2300      	movs	r3, #0
 800f562:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00e      	beq.n	800f594 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	6852      	ldr	r2, [r2, #4]
 800f582:	b2d2      	uxtb	r2, r2
 800f584:	4611      	mov	r1, r2
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	4798      	blx	r3
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d001      	beq.n	800f594 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f590:	2303      	movs	r3, #3
 800f592:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f594:	7bfb      	ldrb	r3, [r7, #15]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f59e:	b480      	push	{r7}
 800f5a0:	b083      	sub	sp, #12
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f5aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f5c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr

0800f5d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b086      	sub	sp, #24
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
 800f5da:	460b      	mov	r3, r1
 800f5dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	885b      	ldrh	r3, [r3, #2]
 800f5ee:	b29a      	uxth	r2, r3
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d920      	bls.n	800f63c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f602:	e013      	b.n	800f62c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f604:	f107 030a 	add.w	r3, r7, #10
 800f608:	4619      	mov	r1, r3
 800f60a:	6978      	ldr	r0, [r7, #20]
 800f60c:	f000 f81b 	bl	800f646 <USBD_GetNextDesc>
 800f610:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	785b      	ldrb	r3, [r3, #1]
 800f616:	2b05      	cmp	r3, #5
 800f618:	d108      	bne.n	800f62c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	789b      	ldrb	r3, [r3, #2]
 800f622:	78fa      	ldrb	r2, [r7, #3]
 800f624:	429a      	cmp	r2, r3
 800f626:	d008      	beq.n	800f63a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f628:	2300      	movs	r3, #0
 800f62a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	885b      	ldrh	r3, [r3, #2]
 800f630:	b29a      	uxth	r2, r3
 800f632:	897b      	ldrh	r3, [r7, #10]
 800f634:	429a      	cmp	r2, r3
 800f636:	d8e5      	bhi.n	800f604 <USBD_GetEpDesc+0x32>
 800f638:	e000      	b.n	800f63c <USBD_GetEpDesc+0x6a>
          break;
 800f63a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f63c:	693b      	ldr	r3, [r7, #16]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3718      	adds	r7, #24
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f646:	b480      	push	{r7}
 800f648:	b085      	sub	sp, #20
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	881a      	ldrh	r2, [r3, #0]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	4413      	add	r3, r2
 800f660:	b29a      	uxth	r2, r3
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	461a      	mov	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4413      	add	r3, r2
 800f670:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f672:	68fb      	ldr	r3, [r7, #12]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f680:	b480      	push	{r7}
 800f682:	b087      	sub	sp, #28
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	3301      	adds	r3, #1
 800f696:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f69e:	8a3b      	ldrh	r3, [r7, #16]
 800f6a0:	021b      	lsls	r3, r3, #8
 800f6a2:	b21a      	sxth	r2, r3
 800f6a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	b21b      	sxth	r3, r3
 800f6ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f6ae:	89fb      	ldrh	r3, [r7, #14]
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	371c      	adds	r7, #28
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6d2:	2b40      	cmp	r3, #64	; 0x40
 800f6d4:	d005      	beq.n	800f6e2 <USBD_StdDevReq+0x26>
 800f6d6:	2b40      	cmp	r3, #64	; 0x40
 800f6d8:	d857      	bhi.n	800f78a <USBD_StdDevReq+0xce>
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00f      	beq.n	800f6fe <USBD_StdDevReq+0x42>
 800f6de:	2b20      	cmp	r3, #32
 800f6e0:	d153      	bne.n	800f78a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	32ae      	adds	r2, #174	; 0xae
 800f6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	6839      	ldr	r1, [r7, #0]
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	4798      	blx	r3
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f6fc:	e04a      	b.n	800f794 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	785b      	ldrb	r3, [r3, #1]
 800f702:	2b09      	cmp	r3, #9
 800f704:	d83b      	bhi.n	800f77e <USBD_StdDevReq+0xc2>
 800f706:	a201      	add	r2, pc, #4	; (adr r2, 800f70c <USBD_StdDevReq+0x50>)
 800f708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f775 	.word	0x0800f775
 800f714:	0800f77f 	.word	0x0800f77f
 800f718:	0800f76b 	.word	0x0800f76b
 800f71c:	0800f77f 	.word	0x0800f77f
 800f720:	0800f73f 	.word	0x0800f73f
 800f724:	0800f735 	.word	0x0800f735
 800f728:	0800f77f 	.word	0x0800f77f
 800f72c:	0800f757 	.word	0x0800f757
 800f730:	0800f749 	.word	0x0800f749
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 fa3c 	bl	800fbb4 <USBD_GetDescriptor>
          break;
 800f73c:	e024      	b.n	800f788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f73e:	6839      	ldr	r1, [r7, #0]
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 fba1 	bl	800fe88 <USBD_SetAddress>
          break;
 800f746:	e01f      	b.n	800f788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fbe0 	bl	800ff10 <USBD_SetConfig>
 800f750:	4603      	mov	r3, r0
 800f752:	73fb      	strb	r3, [r7, #15]
          break;
 800f754:	e018      	b.n	800f788 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f756:	6839      	ldr	r1, [r7, #0]
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 fc83 	bl	8010064 <USBD_GetConfig>
          break;
 800f75e:	e013      	b.n	800f788 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fcb4 	bl	80100d0 <USBD_GetStatus>
          break;
 800f768:	e00e      	b.n	800f788 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f76a:	6839      	ldr	r1, [r7, #0]
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fce3 	bl	8010138 <USBD_SetFeature>
          break;
 800f772:	e009      	b.n	800f788 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 fd07 	bl	801018a <USBD_ClrFeature>
          break;
 800f77c:	e004      	b.n	800f788 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fd5e 	bl	8010242 <USBD_CtlError>
          break;
 800f786:	bf00      	nop
      }
      break;
 800f788:	e004      	b.n	800f794 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 fd58 	bl	8010242 <USBD_CtlError>
      break;
 800f792:	bf00      	nop
  }

  return ret;
 800f794:	7bfb      	ldrb	r3, [r7, #15]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop

0800f7a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7b6:	2b40      	cmp	r3, #64	; 0x40
 800f7b8:	d005      	beq.n	800f7c6 <USBD_StdItfReq+0x26>
 800f7ba:	2b40      	cmp	r3, #64	; 0x40
 800f7bc:	d852      	bhi.n	800f864 <USBD_StdItfReq+0xc4>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d001      	beq.n	800f7c6 <USBD_StdItfReq+0x26>
 800f7c2:	2b20      	cmp	r3, #32
 800f7c4:	d14e      	bne.n	800f864 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d840      	bhi.n	800f856 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	889b      	ldrh	r3, [r3, #4]
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d836      	bhi.n	800f84c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	889b      	ldrh	r3, [r3, #4]
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff fed9 	bl	800f59e <USBD_CoreFindIF>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7f0:	7bbb      	ldrb	r3, [r7, #14]
 800f7f2:	2bff      	cmp	r3, #255	; 0xff
 800f7f4:	d01d      	beq.n	800f832 <USBD_StdItfReq+0x92>
 800f7f6:	7bbb      	ldrb	r3, [r7, #14]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d11a      	bne.n	800f832 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f7fc:	7bba      	ldrb	r2, [r7, #14]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	32ae      	adds	r2, #174	; 0xae
 800f802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00f      	beq.n	800f82c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f80c:	7bba      	ldrb	r2, [r7, #14]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f814:	7bba      	ldrb	r2, [r7, #14]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	32ae      	adds	r2, #174	; 0xae
 800f81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	4798      	blx	r3
 800f826:	4603      	mov	r3, r0
 800f828:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f82a:	e004      	b.n	800f836 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f82c:	2303      	movs	r3, #3
 800f82e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f830:	e001      	b.n	800f836 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f832:	2303      	movs	r3, #3
 800f834:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	88db      	ldrh	r3, [r3, #6]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d110      	bne.n	800f860 <USBD_StdItfReq+0xc0>
 800f83e:	7bfb      	ldrb	r3, [r7, #15]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10d      	bne.n	800f860 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 fdc7 	bl	80103d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f84a:	e009      	b.n	800f860 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fcf7 	bl	8010242 <USBD_CtlError>
          break;
 800f854:	e004      	b.n	800f860 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 fcf2 	bl	8010242 <USBD_CtlError>
          break;
 800f85e:	e000      	b.n	800f862 <USBD_StdItfReq+0xc2>
          break;
 800f860:	bf00      	nop
      }
      break;
 800f862:	e004      	b.n	800f86e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f864:	6839      	ldr	r1, [r7, #0]
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fceb 	bl	8010242 <USBD_CtlError>
      break;
 800f86c:	bf00      	nop
  }

  return ret;
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f882:	2300      	movs	r3, #0
 800f884:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	889b      	ldrh	r3, [r3, #4]
 800f88a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f894:	2b40      	cmp	r3, #64	; 0x40
 800f896:	d007      	beq.n	800f8a8 <USBD_StdEPReq+0x30>
 800f898:	2b40      	cmp	r3, #64	; 0x40
 800f89a:	f200 817f 	bhi.w	800fb9c <USBD_StdEPReq+0x324>
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d02a      	beq.n	800f8f8 <USBD_StdEPReq+0x80>
 800f8a2:	2b20      	cmp	r3, #32
 800f8a4:	f040 817a 	bne.w	800fb9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f8a8:	7bbb      	ldrb	r3, [r7, #14]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff fe83 	bl	800f5b8 <USBD_CoreFindEP>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f8b6:	7b7b      	ldrb	r3, [r7, #13]
 800f8b8:	2bff      	cmp	r3, #255	; 0xff
 800f8ba:	f000 8174 	beq.w	800fba6 <USBD_StdEPReq+0x32e>
 800f8be:	7b7b      	ldrb	r3, [r7, #13]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f040 8170 	bne.w	800fba6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f8c6:	7b7a      	ldrb	r2, [r7, #13]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f8ce:	7b7a      	ldrb	r2, [r7, #13]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	32ae      	adds	r2, #174	; 0xae
 800f8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 8163 	beq.w	800fba6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f8e0:	7b7a      	ldrb	r2, [r7, #13]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	32ae      	adds	r2, #174	; 0xae
 800f8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	6839      	ldr	r1, [r7, #0]
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	4798      	blx	r3
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f8f6:	e156      	b.n	800fba6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	785b      	ldrb	r3, [r3, #1]
 800f8fc:	2b03      	cmp	r3, #3
 800f8fe:	d008      	beq.n	800f912 <USBD_StdEPReq+0x9a>
 800f900:	2b03      	cmp	r3, #3
 800f902:	f300 8145 	bgt.w	800fb90 <USBD_StdEPReq+0x318>
 800f906:	2b00      	cmp	r3, #0
 800f908:	f000 809b 	beq.w	800fa42 <USBD_StdEPReq+0x1ca>
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d03c      	beq.n	800f98a <USBD_StdEPReq+0x112>
 800f910:	e13e      	b.n	800fb90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d002      	beq.n	800f924 <USBD_StdEPReq+0xac>
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d016      	beq.n	800f950 <USBD_StdEPReq+0xd8>
 800f922:	e02c      	b.n	800f97e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f924:	7bbb      	ldrb	r3, [r7, #14]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00d      	beq.n	800f946 <USBD_StdEPReq+0xce>
 800f92a:	7bbb      	ldrb	r3, [r7, #14]
 800f92c:	2b80      	cmp	r3, #128	; 0x80
 800f92e:	d00a      	beq.n	800f946 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f930:	7bbb      	ldrb	r3, [r7, #14]
 800f932:	4619      	mov	r1, r3
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f001 f97b 	bl	8010c30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f93a:	2180      	movs	r1, #128	; 0x80
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f001 f977 	bl	8010c30 <USBD_LL_StallEP>
 800f942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f944:	e020      	b.n	800f988 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 fc7a 	bl	8010242 <USBD_CtlError>
              break;
 800f94e:	e01b      	b.n	800f988 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	885b      	ldrh	r3, [r3, #2]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10e      	bne.n	800f976 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00b      	beq.n	800f976 <USBD_StdEPReq+0xfe>
 800f95e:	7bbb      	ldrb	r3, [r7, #14]
 800f960:	2b80      	cmp	r3, #128	; 0x80
 800f962:	d008      	beq.n	800f976 <USBD_StdEPReq+0xfe>
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	88db      	ldrh	r3, [r3, #6]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d104      	bne.n	800f976 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f96c:	7bbb      	ldrb	r3, [r7, #14]
 800f96e:	4619      	mov	r1, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f001 f95d 	bl	8010c30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fd2e 	bl	80103d8 <USBD_CtlSendStatus>

              break;
 800f97c:	e004      	b.n	800f988 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f97e:	6839      	ldr	r1, [r7, #0]
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 fc5e 	bl	8010242 <USBD_CtlError>
              break;
 800f986:	bf00      	nop
          }
          break;
 800f988:	e107      	b.n	800fb9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f990:	b2db      	uxtb	r3, r3
 800f992:	2b02      	cmp	r3, #2
 800f994:	d002      	beq.n	800f99c <USBD_StdEPReq+0x124>
 800f996:	2b03      	cmp	r3, #3
 800f998:	d016      	beq.n	800f9c8 <USBD_StdEPReq+0x150>
 800f99a:	e04b      	b.n	800fa34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f99c:	7bbb      	ldrb	r3, [r7, #14]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00d      	beq.n	800f9be <USBD_StdEPReq+0x146>
 800f9a2:	7bbb      	ldrb	r3, [r7, #14]
 800f9a4:	2b80      	cmp	r3, #128	; 0x80
 800f9a6:	d00a      	beq.n	800f9be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f001 f93f 	bl	8010c30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9b2:	2180      	movs	r1, #128	; 0x80
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f001 f93b 	bl	8010c30 <USBD_LL_StallEP>
 800f9ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9bc:	e040      	b.n	800fa40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f9be:	6839      	ldr	r1, [r7, #0]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fc3e 	bl	8010242 <USBD_CtlError>
              break;
 800f9c6:	e03b      	b.n	800fa40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	885b      	ldrh	r3, [r3, #2]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d136      	bne.n	800fa3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f9d0:	7bbb      	ldrb	r3, [r7, #14]
 800f9d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d004      	beq.n	800f9e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f9da:	7bbb      	ldrb	r3, [r7, #14]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f001 f945 	bl	8010c6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fcf7 	bl	80103d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f9ea:	7bbb      	ldrb	r3, [r7, #14]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff fde2 	bl	800f5b8 <USBD_CoreFindEP>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f9f8:	7b7b      	ldrb	r3, [r7, #13]
 800f9fa:	2bff      	cmp	r3, #255	; 0xff
 800f9fc:	d01f      	beq.n	800fa3e <USBD_StdEPReq+0x1c6>
 800f9fe:	7b7b      	ldrb	r3, [r7, #13]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d11c      	bne.n	800fa3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fa04:	7b7a      	ldrb	r2, [r7, #13]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fa0c:	7b7a      	ldrb	r2, [r7, #13]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	32ae      	adds	r2, #174	; 0xae
 800fa12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d010      	beq.n	800fa3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fa1c:	7b7a      	ldrb	r2, [r7, #13]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	32ae      	adds	r2, #174	; 0xae
 800fa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	4798      	blx	r3
 800fa2e:	4603      	mov	r3, r0
 800fa30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fa32:	e004      	b.n	800fa3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fa34:	6839      	ldr	r1, [r7, #0]
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 fc03 	bl	8010242 <USBD_CtlError>
              break;
 800fa3c:	e000      	b.n	800fa40 <USBD_StdEPReq+0x1c8>
              break;
 800fa3e:	bf00      	nop
          }
          break;
 800fa40:	e0ab      	b.n	800fb9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	d002      	beq.n	800fa54 <USBD_StdEPReq+0x1dc>
 800fa4e:	2b03      	cmp	r3, #3
 800fa50:	d032      	beq.n	800fab8 <USBD_StdEPReq+0x240>
 800fa52:	e097      	b.n	800fb84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa54:	7bbb      	ldrb	r3, [r7, #14]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d007      	beq.n	800fa6a <USBD_StdEPReq+0x1f2>
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
 800fa5c:	2b80      	cmp	r3, #128	; 0x80
 800fa5e:	d004      	beq.n	800fa6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fbed 	bl	8010242 <USBD_CtlError>
                break;
 800fa68:	e091      	b.n	800fb8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	da0b      	bge.n	800fa8a <USBD_StdEPReq+0x212>
 800fa72:	7bbb      	ldrb	r3, [r7, #14]
 800fa74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa78:	4613      	mov	r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	3310      	adds	r3, #16
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	4413      	add	r3, r2
 800fa86:	3304      	adds	r3, #4
 800fa88:	e00b      	b.n	800faa2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa8a:	7bbb      	ldrb	r3, [r7, #14]
 800fa8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa90:	4613      	mov	r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4413      	add	r3, r2
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	4413      	add	r3, r2
 800faa0:	3304      	adds	r3, #4
 800faa2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	2200      	movs	r2, #0
 800faa8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2202      	movs	r2, #2
 800faae:	4619      	mov	r1, r3
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 fc37 	bl	8010324 <USBD_CtlSendData>
              break;
 800fab6:	e06a      	b.n	800fb8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	da11      	bge.n	800fae4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fac0:	7bbb      	ldrb	r3, [r7, #14]
 800fac2:	f003 020f 	and.w	r2, r3, #15
 800fac6:	6879      	ldr	r1, [r7, #4]
 800fac8:	4613      	mov	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	440b      	add	r3, r1
 800fad2:	3324      	adds	r3, #36	; 0x24
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d117      	bne.n	800fb0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 fbb0 	bl	8010242 <USBD_CtlError>
                  break;
 800fae2:	e054      	b.n	800fb8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fae4:	7bbb      	ldrb	r3, [r7, #14]
 800fae6:	f003 020f 	and.w	r2, r3, #15
 800faea:	6879      	ldr	r1, [r7, #4]
 800faec:	4613      	mov	r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	4413      	add	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	440b      	add	r3, r1
 800faf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d104      	bne.n	800fb0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 fb9d 	bl	8010242 <USBD_CtlError>
                  break;
 800fb08:	e041      	b.n	800fb8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	da0b      	bge.n	800fb2a <USBD_StdEPReq+0x2b2>
 800fb12:	7bbb      	ldrb	r3, [r7, #14]
 800fb14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb18:	4613      	mov	r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	4413      	add	r3, r2
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	3310      	adds	r3, #16
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	4413      	add	r3, r2
 800fb26:	3304      	adds	r3, #4
 800fb28:	e00b      	b.n	800fb42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb2a:	7bbb      	ldrb	r3, [r7, #14]
 800fb2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb30:	4613      	mov	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4413      	add	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	4413      	add	r3, r2
 800fb40:	3304      	adds	r3, #4
 800fb42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb44:	7bbb      	ldrb	r3, [r7, #14]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d002      	beq.n	800fb50 <USBD_StdEPReq+0x2d8>
 800fb4a:	7bbb      	ldrb	r3, [r7, #14]
 800fb4c:	2b80      	cmp	r3, #128	; 0x80
 800fb4e:	d103      	bne.n	800fb58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	2200      	movs	r2, #0
 800fb54:	601a      	str	r2, [r3, #0]
 800fb56:	e00e      	b.n	800fb76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fb58:	7bbb      	ldrb	r3, [r7, #14]
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 f8a5 	bl	8010cac <USBD_LL_IsStallEP>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d003      	beq.n	800fb70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	e002      	b.n	800fb76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	2200      	movs	r2, #0
 800fb74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	2202      	movs	r2, #2
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fbd1 	bl	8010324 <USBD_CtlSendData>
              break;
 800fb82:	e004      	b.n	800fb8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fb5b 	bl	8010242 <USBD_CtlError>
              break;
 800fb8c:	bf00      	nop
          }
          break;
 800fb8e:	e004      	b.n	800fb9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fb55 	bl	8010242 <USBD_CtlError>
          break;
 800fb98:	bf00      	nop
      }
      break;
 800fb9a:	e005      	b.n	800fba8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fb4f 	bl	8010242 <USBD_CtlError>
      break;
 800fba4:	e000      	b.n	800fba8 <USBD_StdEPReq+0x330>
      break;
 800fba6:	bf00      	nop
  }

  return ret;
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
	...

0800fbb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	885b      	ldrh	r3, [r3, #2]
 800fbce:	0a1b      	lsrs	r3, r3, #8
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	2b06      	cmp	r3, #6
 800fbd6:	f200 8128 	bhi.w	800fe2a <USBD_GetDescriptor+0x276>
 800fbda:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <USBD_GetDescriptor+0x2c>)
 800fbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe0:	0800fbfd 	.word	0x0800fbfd
 800fbe4:	0800fc15 	.word	0x0800fc15
 800fbe8:	0800fc55 	.word	0x0800fc55
 800fbec:	0800fe2b 	.word	0x0800fe2b
 800fbf0:	0800fe2b 	.word	0x0800fe2b
 800fbf4:	0800fdcb 	.word	0x0800fdcb
 800fbf8:	0800fdf7 	.word	0x0800fdf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	7c12      	ldrb	r2, [r2, #16]
 800fc08:	f107 0108 	add.w	r1, r7, #8
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	4798      	blx	r3
 800fc10:	60f8      	str	r0, [r7, #12]
      break;
 800fc12:	e112      	b.n	800fe3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	7c1b      	ldrb	r3, [r3, #16]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10d      	bne.n	800fc38 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc24:	f107 0208 	add.w	r2, r7, #8
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
 800fc2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	3301      	adds	r3, #1
 800fc32:	2202      	movs	r2, #2
 800fc34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fc36:	e100      	b.n	800fe3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc40:	f107 0208 	add.w	r2, r7, #8
 800fc44:	4610      	mov	r0, r2
 800fc46:	4798      	blx	r3
 800fc48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	2202      	movs	r2, #2
 800fc50:	701a      	strb	r2, [r3, #0]
      break;
 800fc52:	e0f2      	b.n	800fe3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	885b      	ldrh	r3, [r3, #2]
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	2b05      	cmp	r3, #5
 800fc5c:	f200 80ac 	bhi.w	800fdb8 <USBD_GetDescriptor+0x204>
 800fc60:	a201      	add	r2, pc, #4	; (adr r2, 800fc68 <USBD_GetDescriptor+0xb4>)
 800fc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc66:	bf00      	nop
 800fc68:	0800fc81 	.word	0x0800fc81
 800fc6c:	0800fcb5 	.word	0x0800fcb5
 800fc70:	0800fce9 	.word	0x0800fce9
 800fc74:	0800fd1d 	.word	0x0800fd1d
 800fc78:	0800fd51 	.word	0x0800fd51
 800fc7c:	0800fd85 	.word	0x0800fd85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	7c12      	ldrb	r2, [r2, #16]
 800fc98:	f107 0108 	add.w	r1, r7, #8
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	4798      	blx	r3
 800fca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fca2:	e091      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fca4:	6839      	ldr	r1, [r7, #0]
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 facb 	bl	8010242 <USBD_CtlError>
            err++;
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	72fb      	strb	r3, [r7, #11]
          break;
 800fcb2:	e089      	b.n	800fdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00b      	beq.n	800fcd8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	7c12      	ldrb	r2, [r2, #16]
 800fccc:	f107 0108 	add.w	r1, r7, #8
 800fcd0:	4610      	mov	r0, r2
 800fcd2:	4798      	blx	r3
 800fcd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcd6:	e077      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcd8:	6839      	ldr	r1, [r7, #0]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fab1 	bl	8010242 <USBD_CtlError>
            err++;
 800fce0:	7afb      	ldrb	r3, [r7, #11]
 800fce2:	3301      	adds	r3, #1
 800fce4:	72fb      	strb	r3, [r7, #11]
          break;
 800fce6:	e06f      	b.n	800fdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00b      	beq.n	800fd0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	7c12      	ldrb	r2, [r2, #16]
 800fd00:	f107 0108 	add.w	r1, r7, #8
 800fd04:	4610      	mov	r0, r2
 800fd06:	4798      	blx	r3
 800fd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd0a:	e05d      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd0c:	6839      	ldr	r1, [r7, #0]
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fa97 	bl	8010242 <USBD_CtlError>
            err++;
 800fd14:	7afb      	ldrb	r3, [r7, #11]
 800fd16:	3301      	adds	r3, #1
 800fd18:	72fb      	strb	r3, [r7, #11]
          break;
 800fd1a:	e055      	b.n	800fdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd22:	691b      	ldr	r3, [r3, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00b      	beq.n	800fd40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	7c12      	ldrb	r2, [r2, #16]
 800fd34:	f107 0108 	add.w	r1, r7, #8
 800fd38:	4610      	mov	r0, r2
 800fd3a:	4798      	blx	r3
 800fd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd3e:	e043      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fa7d 	bl	8010242 <USBD_CtlError>
            err++;
 800fd48:	7afb      	ldrb	r3, [r7, #11]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd4e:	e03b      	b.n	800fdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd56:	695b      	ldr	r3, [r3, #20]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00b      	beq.n	800fd74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	7c12      	ldrb	r2, [r2, #16]
 800fd68:	f107 0108 	add.w	r1, r7, #8
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	4798      	blx	r3
 800fd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd72:	e029      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fa63 	bl	8010242 <USBD_CtlError>
            err++;
 800fd7c:	7afb      	ldrb	r3, [r7, #11]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	72fb      	strb	r3, [r7, #11]
          break;
 800fd82:	e021      	b.n	800fdc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00b      	beq.n	800fda8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd96:	699b      	ldr	r3, [r3, #24]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	7c12      	ldrb	r2, [r2, #16]
 800fd9c:	f107 0108 	add.w	r1, r7, #8
 800fda0:	4610      	mov	r0, r2
 800fda2:	4798      	blx	r3
 800fda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fda6:	e00f      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fa49 	bl	8010242 <USBD_CtlError>
            err++;
 800fdb0:	7afb      	ldrb	r3, [r7, #11]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	72fb      	strb	r3, [r7, #11]
          break;
 800fdb6:	e007      	b.n	800fdc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fa41 	bl	8010242 <USBD_CtlError>
          err++;
 800fdc0:	7afb      	ldrb	r3, [r7, #11]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fdc6:	bf00      	nop
      }
      break;
 800fdc8:	e037      	b.n	800fe3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	7c1b      	ldrb	r3, [r3, #16]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d109      	bne.n	800fde6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdda:	f107 0208 	add.w	r2, r7, #8
 800fdde:	4610      	mov	r0, r2
 800fde0:	4798      	blx	r3
 800fde2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fde4:	e029      	b.n	800fe3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fa2a 	bl	8010242 <USBD_CtlError>
        err++;
 800fdee:	7afb      	ldrb	r3, [r7, #11]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	72fb      	strb	r3, [r7, #11]
      break;
 800fdf4:	e021      	b.n	800fe3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	7c1b      	ldrb	r3, [r3, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10d      	bne.n	800fe1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe06:	f107 0208 	add.w	r2, r7, #8
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	4798      	blx	r3
 800fe0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	3301      	adds	r3, #1
 800fe14:	2207      	movs	r2, #7
 800fe16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe18:	e00f      	b.n	800fe3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fa10 	bl	8010242 <USBD_CtlError>
        err++;
 800fe22:	7afb      	ldrb	r3, [r7, #11]
 800fe24:	3301      	adds	r3, #1
 800fe26:	72fb      	strb	r3, [r7, #11]
      break;
 800fe28:	e007      	b.n	800fe3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fa08 	bl	8010242 <USBD_CtlError>
      err++;
 800fe32:	7afb      	ldrb	r3, [r7, #11]
 800fe34:	3301      	adds	r3, #1
 800fe36:	72fb      	strb	r3, [r7, #11]
      break;
 800fe38:	bf00      	nop
  }

  if (err != 0U)
 800fe3a:	7afb      	ldrb	r3, [r7, #11]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d11e      	bne.n	800fe7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	88db      	ldrh	r3, [r3, #6]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d016      	beq.n	800fe76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fe48:	893b      	ldrh	r3, [r7, #8]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00e      	beq.n	800fe6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	88da      	ldrh	r2, [r3, #6]
 800fe52:	893b      	ldrh	r3, [r7, #8]
 800fe54:	4293      	cmp	r3, r2
 800fe56:	bf28      	it	cs
 800fe58:	4613      	movcs	r3, r2
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe5e:	893b      	ldrh	r3, [r7, #8]
 800fe60:	461a      	mov	r2, r3
 800fe62:	68f9      	ldr	r1, [r7, #12]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fa5d 	bl	8010324 <USBD_CtlSendData>
 800fe6a:	e009      	b.n	800fe80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f9e7 	bl	8010242 <USBD_CtlError>
 800fe74:	e004      	b.n	800fe80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 faae 	bl	80103d8 <USBD_CtlSendStatus>
 800fe7c:	e000      	b.n	800fe80 <USBD_GetDescriptor+0x2cc>
    return;
 800fe7e:	bf00      	nop
  }
}
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop

0800fe88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	889b      	ldrh	r3, [r3, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d131      	bne.n	800fefe <USBD_SetAddress+0x76>
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	88db      	ldrh	r3, [r3, #6]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d12d      	bne.n	800fefe <USBD_SetAddress+0x76>
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	885b      	ldrh	r3, [r3, #2]
 800fea6:	2b7f      	cmp	r3, #127	; 0x7f
 800fea8:	d829      	bhi.n	800fefe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	885b      	ldrh	r3, [r3, #2]
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800feb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b03      	cmp	r3, #3
 800fec0:	d104      	bne.n	800fecc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f9bc 	bl	8010242 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feca:	e01d      	b.n	800ff08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	7bfa      	ldrb	r2, [r7, #15]
 800fed0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fed4:	7bfb      	ldrb	r3, [r7, #15]
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 ff13 	bl	8010d04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fa7a 	bl	80103d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d004      	beq.n	800fef4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2202      	movs	r2, #2
 800feee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fef2:	e009      	b.n	800ff08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fefc:	e004      	b.n	800ff08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fefe:	6839      	ldr	r1, [r7, #0]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f99e 	bl	8010242 <USBD_CtlError>
  }
}
 800ff06:	bf00      	nop
 800ff08:	bf00      	nop
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	885b      	ldrh	r3, [r3, #2]
 800ff22:	b2da      	uxtb	r2, r3
 800ff24:	4b4e      	ldr	r3, [pc, #312]	; (8010060 <USBD_SetConfig+0x150>)
 800ff26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff28:	4b4d      	ldr	r3, [pc, #308]	; (8010060 <USBD_SetConfig+0x150>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d905      	bls.n	800ff3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ff30:	6839      	ldr	r1, [r7, #0]
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f985 	bl	8010242 <USBD_CtlError>
    return USBD_FAIL;
 800ff38:	2303      	movs	r3, #3
 800ff3a:	e08c      	b.n	8010056 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d002      	beq.n	800ff4e <USBD_SetConfig+0x3e>
 800ff48:	2b03      	cmp	r3, #3
 800ff4a:	d029      	beq.n	800ffa0 <USBD_SetConfig+0x90>
 800ff4c:	e075      	b.n	801003a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ff4e:	4b44      	ldr	r3, [pc, #272]	; (8010060 <USBD_SetConfig+0x150>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d020      	beq.n	800ff98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ff56:	4b42      	ldr	r3, [pc, #264]	; (8010060 <USBD_SetConfig+0x150>)
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff60:	4b3f      	ldr	r3, [pc, #252]	; (8010060 <USBD_SetConfig+0x150>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	4619      	mov	r1, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7fe ffe7 	bl	800ef3a <USBD_SetClassConfig>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d008      	beq.n	800ff88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f962 	bl	8010242 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2202      	movs	r2, #2
 800ff82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff86:	e065      	b.n	8010054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 fa25 	bl	80103d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2203      	movs	r2, #3
 800ff92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ff96:	e05d      	b.n	8010054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fa1d 	bl	80103d8 <USBD_CtlSendStatus>
      break;
 800ff9e:	e059      	b.n	8010054 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ffa0:	4b2f      	ldr	r3, [pc, #188]	; (8010060 <USBD_SetConfig+0x150>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d112      	bne.n	800ffce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2202      	movs	r2, #2
 800ffac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ffb0:	4b2b      	ldr	r3, [pc, #172]	; (8010060 <USBD_SetConfig+0x150>)
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ffba:	4b29      	ldr	r3, [pc, #164]	; (8010060 <USBD_SetConfig+0x150>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7fe ffd6 	bl	800ef72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 fa06 	bl	80103d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ffcc:	e042      	b.n	8010054 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ffce:	4b24      	ldr	r3, [pc, #144]	; (8010060 <USBD_SetConfig+0x150>)
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d02a      	beq.n	8010032 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7fe ffc4 	bl	800ef72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ffea:	4b1d      	ldr	r3, [pc, #116]	; (8010060 <USBD_SetConfig+0x150>)
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fff4:	4b1a      	ldr	r3, [pc, #104]	; (8010060 <USBD_SetConfig+0x150>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	4619      	mov	r1, r3
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7fe ff9d 	bl	800ef3a <USBD_SetClassConfig>
 8010000:	4603      	mov	r3, r0
 8010002:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010004:	7bfb      	ldrb	r3, [r7, #15]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00f      	beq.n	801002a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 f918 	bl	8010242 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	b2db      	uxtb	r3, r3
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f7fe ffa9 	bl	800ef72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2202      	movs	r2, #2
 8010024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010028:	e014      	b.n	8010054 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f9d4 	bl	80103d8 <USBD_CtlSendStatus>
      break;
 8010030:	e010      	b.n	8010054 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f9d0 	bl	80103d8 <USBD_CtlSendStatus>
      break;
 8010038:	e00c      	b.n	8010054 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f900 	bl	8010242 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010042:	4b07      	ldr	r3, [pc, #28]	; (8010060 <USBD_SetConfig+0x150>)
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	4619      	mov	r1, r3
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7fe ff92 	bl	800ef72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801004e:	2303      	movs	r3, #3
 8010050:	73fb      	strb	r3, [r7, #15]
      break;
 8010052:	bf00      	nop
  }

  return ret;
 8010054:	7bfb      	ldrb	r3, [r7, #15]
}
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	20000f6c 	.word	0x20000f6c

08010064 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	88db      	ldrh	r3, [r3, #6]
 8010072:	2b01      	cmp	r3, #1
 8010074:	d004      	beq.n	8010080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010076:	6839      	ldr	r1, [r7, #0]
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 f8e2 	bl	8010242 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801007e:	e023      	b.n	80100c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b02      	cmp	r3, #2
 801008a:	dc02      	bgt.n	8010092 <USBD_GetConfig+0x2e>
 801008c:	2b00      	cmp	r3, #0
 801008e:	dc03      	bgt.n	8010098 <USBD_GetConfig+0x34>
 8010090:	e015      	b.n	80100be <USBD_GetConfig+0x5a>
 8010092:	2b03      	cmp	r3, #3
 8010094:	d00b      	beq.n	80100ae <USBD_GetConfig+0x4a>
 8010096:	e012      	b.n	80100be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3308      	adds	r3, #8
 80100a2:	2201      	movs	r2, #1
 80100a4:	4619      	mov	r1, r3
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f93c 	bl	8010324 <USBD_CtlSendData>
        break;
 80100ac:	e00c      	b.n	80100c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	3304      	adds	r3, #4
 80100b2:	2201      	movs	r2, #1
 80100b4:	4619      	mov	r1, r3
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 f934 	bl	8010324 <USBD_CtlSendData>
        break;
 80100bc:	e004      	b.n	80100c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 f8be 	bl	8010242 <USBD_CtlError>
        break;
 80100c6:	bf00      	nop
}
 80100c8:	bf00      	nop
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	3b01      	subs	r3, #1
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d81e      	bhi.n	8010126 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	88db      	ldrh	r3, [r3, #6]
 80100ec:	2b02      	cmp	r3, #2
 80100ee:	d004      	beq.n	80100fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80100f0:	6839      	ldr	r1, [r7, #0]
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f8a5 	bl	8010242 <USBD_CtlError>
        break;
 80100f8:	e01a      	b.n	8010130 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010106:	2b00      	cmp	r3, #0
 8010108:	d005      	beq.n	8010116 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	f043 0202 	orr.w	r2, r3, #2
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	330c      	adds	r3, #12
 801011a:	2202      	movs	r2, #2
 801011c:	4619      	mov	r1, r3
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 f900 	bl	8010324 <USBD_CtlSendData>
      break;
 8010124:	e004      	b.n	8010130 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010126:	6839      	ldr	r1, [r7, #0]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f88a 	bl	8010242 <USBD_CtlError>
      break;
 801012e:	bf00      	nop
  }
}
 8010130:	bf00      	nop
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	885b      	ldrh	r3, [r3, #2]
 8010146:	2b01      	cmp	r3, #1
 8010148:	d107      	bne.n	801015a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2201      	movs	r2, #1
 801014e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 f940 	bl	80103d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010158:	e013      	b.n	8010182 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	885b      	ldrh	r3, [r3, #2]
 801015e:	2b02      	cmp	r3, #2
 8010160:	d10b      	bne.n	801017a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	889b      	ldrh	r3, [r3, #4]
 8010166:	0a1b      	lsrs	r3, r3, #8
 8010168:	b29b      	uxth	r3, r3
 801016a:	b2da      	uxtb	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 f930 	bl	80103d8 <USBD_CtlSendStatus>
}
 8010178:	e003      	b.n	8010182 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801017a:	6839      	ldr	r1, [r7, #0]
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f860 	bl	8010242 <USBD_CtlError>
}
 8010182:	bf00      	nop
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801019a:	b2db      	uxtb	r3, r3
 801019c:	3b01      	subs	r3, #1
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d80b      	bhi.n	80101ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	885b      	ldrh	r3, [r3, #2]
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d10c      	bne.n	80101c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2200      	movs	r2, #0
 80101ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f910 	bl	80103d8 <USBD_CtlSendStatus>
      }
      break;
 80101b8:	e004      	b.n	80101c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80101ba:	6839      	ldr	r1, [r7, #0]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f840 	bl	8010242 <USBD_CtlError>
      break;
 80101c2:	e000      	b.n	80101c6 <USBD_ClrFeature+0x3c>
      break;
 80101c4:	bf00      	nop
  }
}
 80101c6:	bf00      	nop
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}

080101ce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80101ce:	b580      	push	{r7, lr}
 80101d0:	b084      	sub	sp, #16
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
 80101d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	781a      	ldrb	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	3301      	adds	r3, #1
 80101e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	781a      	ldrb	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	3301      	adds	r3, #1
 80101f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7ff fa41 	bl	800f680 <SWAPBYTE>
 80101fe:	4603      	mov	r3, r0
 8010200:	461a      	mov	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	3301      	adds	r3, #1
 801020a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3301      	adds	r3, #1
 8010210:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f7ff fa34 	bl	800f680 <SWAPBYTE>
 8010218:	4603      	mov	r3, r0
 801021a:	461a      	mov	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	3301      	adds	r3, #1
 8010224:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	3301      	adds	r3, #1
 801022a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f7ff fa27 	bl	800f680 <SWAPBYTE>
 8010232:	4603      	mov	r3, r0
 8010234:	461a      	mov	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	80da      	strh	r2, [r3, #6]
}
 801023a:	bf00      	nop
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b082      	sub	sp, #8
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
 801024a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801024c:	2180      	movs	r1, #128	; 0x80
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fcee 	bl	8010c30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010254:	2100      	movs	r1, #0
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 fcea 	bl	8010c30 <USBD_LL_StallEP>
}
 801025c:	bf00      	nop
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b086      	sub	sp, #24
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010270:	2300      	movs	r3, #0
 8010272:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d036      	beq.n	80102e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801027e:	6938      	ldr	r0, [r7, #16]
 8010280:	f000 f836 	bl	80102f0 <USBD_GetLen>
 8010284:	4603      	mov	r3, r0
 8010286:	3301      	adds	r3, #1
 8010288:	b29b      	uxth	r3, r3
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	b29a      	uxth	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010292:	7dfb      	ldrb	r3, [r7, #23]
 8010294:	68ba      	ldr	r2, [r7, #8]
 8010296:	4413      	add	r3, r2
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	7812      	ldrb	r2, [r2, #0]
 801029c:	701a      	strb	r2, [r3, #0]
  idx++;
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	3301      	adds	r3, #1
 80102a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80102a4:	7dfb      	ldrb	r3, [r7, #23]
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	4413      	add	r3, r2
 80102aa:	2203      	movs	r2, #3
 80102ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80102ae:	7dfb      	ldrb	r3, [r7, #23]
 80102b0:	3301      	adds	r3, #1
 80102b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80102b4:	e013      	b.n	80102de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
 80102b8:	68ba      	ldr	r2, [r7, #8]
 80102ba:	4413      	add	r3, r2
 80102bc:	693a      	ldr	r2, [r7, #16]
 80102be:	7812      	ldrb	r2, [r2, #0]
 80102c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	3301      	adds	r3, #1
 80102c6:	613b      	str	r3, [r7, #16]
    idx++;
 80102c8:	7dfb      	ldrb	r3, [r7, #23]
 80102ca:	3301      	adds	r3, #1
 80102cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80102ce:	7dfb      	ldrb	r3, [r7, #23]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	4413      	add	r3, r2
 80102d4:	2200      	movs	r2, #0
 80102d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80102d8:	7dfb      	ldrb	r3, [r7, #23]
 80102da:	3301      	adds	r3, #1
 80102dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1e7      	bne.n	80102b6 <USBD_GetString+0x52>
 80102e6:	e000      	b.n	80102ea <USBD_GetString+0x86>
    return;
 80102e8:	bf00      	nop
  }
}
 80102ea:	3718      	adds	r7, #24
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80102f8:	2300      	movs	r3, #0
 80102fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010300:	e005      	b.n	801030e <USBD_GetLen+0x1e>
  {
    len++;
 8010302:	7bfb      	ldrb	r3, [r7, #15]
 8010304:	3301      	adds	r3, #1
 8010306:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	3301      	adds	r3, #1
 801030c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1f5      	bne.n	8010302 <USBD_GetLen+0x12>
  }

  return len;
 8010316:	7bfb      	ldrb	r3, [r7, #15]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2202      	movs	r2, #2
 8010334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	2100      	movs	r1, #0
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f000 fcf9 	bl	8010d42 <USBD_LL_Transmit>

  return USBD_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	60f8      	str	r0, [r7, #12]
 8010362:	60b9      	str	r1, [r7, #8]
 8010364:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	2100      	movs	r1, #0
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 fce8 	bl	8010d42 <USBD_LL_Transmit>

  return USBD_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2203      	movs	r2, #3
 801038c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	2100      	movs	r1, #0
 80103a6:	68f8      	ldr	r0, [r7, #12]
 80103a8:	f000 fcec 	bl	8010d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3710      	adds	r7, #16
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b084      	sub	sp, #16
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	60f8      	str	r0, [r7, #12]
 80103be:	60b9      	str	r1, [r7, #8]
 80103c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	2100      	movs	r1, #0
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f000 fcdb 	bl	8010d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2204      	movs	r2, #4
 80103e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103e8:	2300      	movs	r3, #0
 80103ea:	2200      	movs	r2, #0
 80103ec:	2100      	movs	r1, #0
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 fca7 	bl	8010d42 <USBD_LL_Transmit>

  return USBD_OK;
 80103f4:	2300      	movs	r3, #0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3708      	adds	r7, #8
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b082      	sub	sp, #8
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2205      	movs	r2, #5
 801040a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801040e:	2300      	movs	r3, #0
 8010410:	2200      	movs	r2, #0
 8010412:	2100      	movs	r1, #0
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f000 fcb5 	bl	8010d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010428:	2200      	movs	r2, #0
 801042a:	4912      	ldr	r1, [pc, #72]	; (8010474 <MX_USB_DEVICE_Init+0x50>)
 801042c:	4812      	ldr	r0, [pc, #72]	; (8010478 <MX_USB_DEVICE_Init+0x54>)
 801042e:	f7fe fd07 	bl	800ee40 <USBD_Init>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d001      	beq.n	801043c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010438:	f7f3 f980 	bl	800373c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801043c:	490f      	ldr	r1, [pc, #60]	; (801047c <MX_USB_DEVICE_Init+0x58>)
 801043e:	480e      	ldr	r0, [pc, #56]	; (8010478 <MX_USB_DEVICE_Init+0x54>)
 8010440:	f7fe fd2e 	bl	800eea0 <USBD_RegisterClass>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801044a:	f7f3 f977 	bl	800373c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801044e:	490c      	ldr	r1, [pc, #48]	; (8010480 <MX_USB_DEVICE_Init+0x5c>)
 8010450:	4809      	ldr	r0, [pc, #36]	; (8010478 <MX_USB_DEVICE_Init+0x54>)
 8010452:	f7fe fc1f 	bl	800ec94 <USBD_CDC_RegisterInterface>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d001      	beq.n	8010460 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801045c:	f7f3 f96e 	bl	800373c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010460:	4805      	ldr	r0, [pc, #20]	; (8010478 <MX_USB_DEVICE_Init+0x54>)
 8010462:	f7fe fd53 	bl	800ef0c <USBD_Start>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d001      	beq.n	8010470 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801046c:	f7f3 f966 	bl	800373c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010470:	bf00      	nop
 8010472:	bd80      	pop	{r7, pc}
 8010474:	20000190 	.word	0x20000190
 8010478:	20000f70 	.word	0x20000f70
 801047c:	200000fc 	.word	0x200000fc
 8010480:	2000017c 	.word	0x2000017c

08010484 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010488:	2200      	movs	r2, #0
 801048a:	4905      	ldr	r1, [pc, #20]	; (80104a0 <CDC_Init_FS+0x1c>)
 801048c:	4805      	ldr	r0, [pc, #20]	; (80104a4 <CDC_Init_FS+0x20>)
 801048e:	f7fe fc1b 	bl	800ecc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010492:	4905      	ldr	r1, [pc, #20]	; (80104a8 <CDC_Init_FS+0x24>)
 8010494:	4803      	ldr	r0, [pc, #12]	; (80104a4 <CDC_Init_FS+0x20>)
 8010496:	f7fe fc39 	bl	800ed0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801049a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801049c:	4618      	mov	r0, r3
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	20001a4c 	.word	0x20001a4c
 80104a4:	20000f70 	.word	0x20000f70
 80104a8:	2000124c 	.word	0x2000124c

080104ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80104ac:	b480      	push	{r7}
 80104ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80104b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	4603      	mov	r3, r0
 80104c4:	6039      	str	r1, [r7, #0]
 80104c6:	71fb      	strb	r3, [r7, #7]
 80104c8:	4613      	mov	r3, r2
 80104ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80104cc:	79fb      	ldrb	r3, [r7, #7]
 80104ce:	2b23      	cmp	r3, #35	; 0x23
 80104d0:	d84a      	bhi.n	8010568 <CDC_Control_FS+0xac>
 80104d2:	a201      	add	r2, pc, #4	; (adr r2, 80104d8 <CDC_Control_FS+0x1c>)
 80104d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d8:	08010569 	.word	0x08010569
 80104dc:	08010569 	.word	0x08010569
 80104e0:	08010569 	.word	0x08010569
 80104e4:	08010569 	.word	0x08010569
 80104e8:	08010569 	.word	0x08010569
 80104ec:	08010569 	.word	0x08010569
 80104f0:	08010569 	.word	0x08010569
 80104f4:	08010569 	.word	0x08010569
 80104f8:	08010569 	.word	0x08010569
 80104fc:	08010569 	.word	0x08010569
 8010500:	08010569 	.word	0x08010569
 8010504:	08010569 	.word	0x08010569
 8010508:	08010569 	.word	0x08010569
 801050c:	08010569 	.word	0x08010569
 8010510:	08010569 	.word	0x08010569
 8010514:	08010569 	.word	0x08010569
 8010518:	08010569 	.word	0x08010569
 801051c:	08010569 	.word	0x08010569
 8010520:	08010569 	.word	0x08010569
 8010524:	08010569 	.word	0x08010569
 8010528:	08010569 	.word	0x08010569
 801052c:	08010569 	.word	0x08010569
 8010530:	08010569 	.word	0x08010569
 8010534:	08010569 	.word	0x08010569
 8010538:	08010569 	.word	0x08010569
 801053c:	08010569 	.word	0x08010569
 8010540:	08010569 	.word	0x08010569
 8010544:	08010569 	.word	0x08010569
 8010548:	08010569 	.word	0x08010569
 801054c:	08010569 	.word	0x08010569
 8010550:	08010569 	.word	0x08010569
 8010554:	08010569 	.word	0x08010569
 8010558:	08010569 	.word	0x08010569
 801055c:	08010569 	.word	0x08010569
 8010560:	08010569 	.word	0x08010569
 8010564:	08010569 	.word	0x08010569
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010568:	bf00      	nop
  }

  return (USBD_OK);
 801056a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801056c:	4618      	mov	r0, r3
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]

	/*for( uint32_t i = 0; i < *Len; i++ ){

	}*/

	if( system_info.usb_rx_flag == 0 )
 8010582:	4b10      	ldr	r3, [pc, #64]	; (80105c4 <CDC_Receive_FS+0x4c>)
 8010584:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10e      	bne.n	80105ac <CDC_Receive_FS+0x34>
	{
		memcpy((void*)system_info.usb_rx_buf, Buf, *Len);
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	461a      	mov	r2, r3
 8010594:	6879      	ldr	r1, [r7, #4]
 8010596:	480c      	ldr	r0, [pc, #48]	; (80105c8 <CDC_Receive_FS+0x50>)
 8010598:	f000 fc98 	bl	8010ecc <memcpy>
		system_info.usb_rx_flag = 1;
 801059c:	4b09      	ldr	r3, [pc, #36]	; (80105c4 <CDC_Receive_FS+0x4c>)
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		system_info.usb_rx_len = *Len;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a06      	ldr	r2, [pc, #24]	; (80105c4 <CDC_Receive_FS+0x4c>)
 80105aa:	6453      	str	r3, [r2, #68]	; 0x44
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	4807      	ldr	r0, [pc, #28]	; (80105cc <CDC_Receive_FS+0x54>)
 80105b0:	f7fe fbac 	bl	800ed0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80105b4:	4805      	ldr	r0, [pc, #20]	; (80105cc <CDC_Receive_FS+0x54>)
 80105b6:	f7fe fc0d 	bl	800edd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80105ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	20000ef0 	.word	0x20000ef0
 80105c8:	20000ef3 	.word	0x20000ef3
 80105cc:	20000f70 	.word	0x20000f70

080105d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80105dc:	2300      	movs	r3, #0
 80105de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80105e0:	4b0d      	ldr	r3, [pc, #52]	; (8010618 <CDC_Transmit_FS+0x48>)
 80105e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d001      	beq.n	80105f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80105f2:	2301      	movs	r3, #1
 80105f4:	e00b      	b.n	801060e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80105f6:	887b      	ldrh	r3, [r7, #2]
 80105f8:	461a      	mov	r2, r3
 80105fa:	6879      	ldr	r1, [r7, #4]
 80105fc:	4806      	ldr	r0, [pc, #24]	; (8010618 <CDC_Transmit_FS+0x48>)
 80105fe:	f7fe fb63 	bl	800ecc8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010602:	4805      	ldr	r0, [pc, #20]	; (8010618 <CDC_Transmit_FS+0x48>)
 8010604:	f7fe fba0 	bl	800ed48 <USBD_CDC_TransmitPacket>
 8010608:	4603      	mov	r3, r0
 801060a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801060c:	7bfb      	ldrb	r3, [r7, #15]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	20000f70 	.word	0x20000f70

0801061c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801061c:	b480      	push	{r7}
 801061e:	b087      	sub	sp, #28
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	4613      	mov	r3, r2
 8010628:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801062e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010632:	4618      	mov	r0, r3
 8010634:	371c      	adds	r7, #28
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
	...

08010640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	4603      	mov	r3, r0
 8010648:	6039      	str	r1, [r7, #0]
 801064a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2212      	movs	r2, #18
 8010650:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010652:	4b03      	ldr	r3, [pc, #12]	; (8010660 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010654:	4618      	mov	r0, r3
 8010656:	370c      	adds	r7, #12
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr
 8010660:	200001ac 	.word	0x200001ac

08010664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	6039      	str	r1, [r7, #0]
 801066e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	2204      	movs	r2, #4
 8010674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010676:	4b03      	ldr	r3, [pc, #12]	; (8010684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr
 8010684:	200001c0 	.word	0x200001c0

08010688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	4603      	mov	r3, r0
 8010690:	6039      	str	r1, [r7, #0]
 8010692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010694:	79fb      	ldrb	r3, [r7, #7]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d105      	bne.n	80106a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	4907      	ldr	r1, [pc, #28]	; (80106bc <USBD_FS_ProductStrDescriptor+0x34>)
 801069e:	4808      	ldr	r0, [pc, #32]	; (80106c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80106a0:	f7ff fde0 	bl	8010264 <USBD_GetString>
 80106a4:	e004      	b.n	80106b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80106a6:	683a      	ldr	r2, [r7, #0]
 80106a8:	4904      	ldr	r1, [pc, #16]	; (80106bc <USBD_FS_ProductStrDescriptor+0x34>)
 80106aa:	4805      	ldr	r0, [pc, #20]	; (80106c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80106ac:	f7ff fdda 	bl	8010264 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106b0:	4b02      	ldr	r3, [pc, #8]	; (80106bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	2000224c 	.word	0x2000224c
 80106c0:	08011274 	.word	0x08011274

080106c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	6039      	str	r1, [r7, #0]
 80106ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80106d0:	683a      	ldr	r2, [r7, #0]
 80106d2:	4904      	ldr	r1, [pc, #16]	; (80106e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80106d4:	4804      	ldr	r0, [pc, #16]	; (80106e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80106d6:	f7ff fdc5 	bl	8010264 <USBD_GetString>
  return USBD_StrDesc;
 80106da:	4b02      	ldr	r3, [pc, #8]	; (80106e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	2000224c 	.word	0x2000224c
 80106e8:	0801128c 	.word	0x0801128c

080106ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	4603      	mov	r3, r0
 80106f4:	6039      	str	r1, [r7, #0]
 80106f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	221a      	movs	r2, #26
 80106fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106fe:	f000 f843 	bl	8010788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010702:	4b02      	ldr	r3, [pc, #8]	; (801070c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	200001c4 	.word	0x200001c4

08010710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	4603      	mov	r3, r0
 8010718:	6039      	str	r1, [r7, #0]
 801071a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801071c:	79fb      	ldrb	r3, [r7, #7]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d105      	bne.n	801072e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	4907      	ldr	r1, [pc, #28]	; (8010744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010726:	4808      	ldr	r0, [pc, #32]	; (8010748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010728:	f7ff fd9c 	bl	8010264 <USBD_GetString>
 801072c:	e004      	b.n	8010738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	4904      	ldr	r1, [pc, #16]	; (8010744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010732:	4805      	ldr	r0, [pc, #20]	; (8010748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010734:	f7ff fd96 	bl	8010264 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010738:	4b02      	ldr	r3, [pc, #8]	; (8010744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	2000224c 	.word	0x2000224c
 8010748:	080112a0 	.word	0x080112a0

0801074c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	4603      	mov	r3, r0
 8010754:	6039      	str	r1, [r7, #0]
 8010756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010758:	79fb      	ldrb	r3, [r7, #7]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d105      	bne.n	801076a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801075e:	683a      	ldr	r2, [r7, #0]
 8010760:	4907      	ldr	r1, [pc, #28]	; (8010780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010762:	4808      	ldr	r0, [pc, #32]	; (8010784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010764:	f7ff fd7e 	bl	8010264 <USBD_GetString>
 8010768:	e004      	b.n	8010774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801076a:	683a      	ldr	r2, [r7, #0]
 801076c:	4904      	ldr	r1, [pc, #16]	; (8010780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801076e:	4805      	ldr	r0, [pc, #20]	; (8010784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010770:	f7ff fd78 	bl	8010264 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010774:	4b02      	ldr	r3, [pc, #8]	; (8010780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010776:	4618      	mov	r0, r3
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	2000224c 	.word	0x2000224c
 8010784:	080112ac 	.word	0x080112ac

08010788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801078e:	4b0f      	ldr	r3, [pc, #60]	; (80107cc <Get_SerialNum+0x44>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010794:	4b0e      	ldr	r3, [pc, #56]	; (80107d0 <Get_SerialNum+0x48>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801079a:	4b0e      	ldr	r3, [pc, #56]	; (80107d4 <Get_SerialNum+0x4c>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4413      	add	r3, r2
 80107a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d009      	beq.n	80107c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80107ae:	2208      	movs	r2, #8
 80107b0:	4909      	ldr	r1, [pc, #36]	; (80107d8 <Get_SerialNum+0x50>)
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f000 f814 	bl	80107e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80107b8:	2204      	movs	r2, #4
 80107ba:	4908      	ldr	r1, [pc, #32]	; (80107dc <Get_SerialNum+0x54>)
 80107bc:	68b8      	ldr	r0, [r7, #8]
 80107be:	f000 f80f 	bl	80107e0 <IntToUnicode>
  }
}
 80107c2:	bf00      	nop
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	1fff7a10 	.word	0x1fff7a10
 80107d0:	1fff7a14 	.word	0x1fff7a14
 80107d4:	1fff7a18 	.word	0x1fff7a18
 80107d8:	200001c6 	.word	0x200001c6
 80107dc:	200001d6 	.word	0x200001d6

080107e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b087      	sub	sp, #28
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	4613      	mov	r3, r2
 80107ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107f2:	2300      	movs	r3, #0
 80107f4:	75fb      	strb	r3, [r7, #23]
 80107f6:	e027      	b.n	8010848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	0f1b      	lsrs	r3, r3, #28
 80107fc:	2b09      	cmp	r3, #9
 80107fe:	d80b      	bhi.n	8010818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	0f1b      	lsrs	r3, r3, #28
 8010804:	b2da      	uxtb	r2, r3
 8010806:	7dfb      	ldrb	r3, [r7, #23]
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	4619      	mov	r1, r3
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	440b      	add	r3, r1
 8010810:	3230      	adds	r2, #48	; 0x30
 8010812:	b2d2      	uxtb	r2, r2
 8010814:	701a      	strb	r2, [r3, #0]
 8010816:	e00a      	b.n	801082e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	0f1b      	lsrs	r3, r3, #28
 801081c:	b2da      	uxtb	r2, r3
 801081e:	7dfb      	ldrb	r3, [r7, #23]
 8010820:	005b      	lsls	r3, r3, #1
 8010822:	4619      	mov	r1, r3
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	440b      	add	r3, r1
 8010828:	3237      	adds	r2, #55	; 0x37
 801082a:	b2d2      	uxtb	r2, r2
 801082c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	011b      	lsls	r3, r3, #4
 8010832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010834:	7dfb      	ldrb	r3, [r7, #23]
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	3301      	adds	r3, #1
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	4413      	add	r3, r2
 801083e:	2200      	movs	r2, #0
 8010840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010842:	7dfb      	ldrb	r3, [r7, #23]
 8010844:	3301      	adds	r3, #1
 8010846:	75fb      	strb	r3, [r7, #23]
 8010848:	7dfa      	ldrb	r2, [r7, #23]
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	429a      	cmp	r2, r3
 801084e:	d3d3      	bcc.n	80107f8 <IntToUnicode+0x18>
  }
}
 8010850:	bf00      	nop
 8010852:	bf00      	nop
 8010854:	371c      	adds	r7, #28
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
	...

08010860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b08a      	sub	sp, #40	; 0x28
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010868:	f107 0314 	add.w	r3, r7, #20
 801086c:	2200      	movs	r2, #0
 801086e:	601a      	str	r2, [r3, #0]
 8010870:	605a      	str	r2, [r3, #4]
 8010872:	609a      	str	r2, [r3, #8]
 8010874:	60da      	str	r2, [r3, #12]
 8010876:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010880:	d13a      	bne.n	80108f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010882:	2300      	movs	r3, #0
 8010884:	613b      	str	r3, [r7, #16]
 8010886:	4b1e      	ldr	r3, [pc, #120]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 8010888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801088a:	4a1d      	ldr	r2, [pc, #116]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 801088c:	f043 0301 	orr.w	r3, r3, #1
 8010890:	6313      	str	r3, [r2, #48]	; 0x30
 8010892:	4b1b      	ldr	r3, [pc, #108]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 8010894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010896:	f003 0301 	and.w	r3, r3, #1
 801089a:	613b      	str	r3, [r7, #16]
 801089c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801089e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80108a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108a4:	2302      	movs	r3, #2
 80108a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108a8:	2300      	movs	r3, #0
 80108aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108ac:	2303      	movs	r3, #3
 80108ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80108b0:	230a      	movs	r3, #10
 80108b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108b4:	f107 0314 	add.w	r3, r7, #20
 80108b8:	4619      	mov	r1, r3
 80108ba:	4812      	ldr	r0, [pc, #72]	; (8010904 <HAL_PCD_MspInit+0xa4>)
 80108bc:	f7f6 ffb6 	bl	800782c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80108c0:	4b0f      	ldr	r3, [pc, #60]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 80108c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c4:	4a0e      	ldr	r2, [pc, #56]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 80108c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108ca:	6353      	str	r3, [r2, #52]	; 0x34
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	4b0b      	ldr	r3, [pc, #44]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 80108d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108d4:	4a0a      	ldr	r2, [pc, #40]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 80108d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80108da:	6453      	str	r3, [r2, #68]	; 0x44
 80108dc:	4b08      	ldr	r3, [pc, #32]	; (8010900 <HAL_PCD_MspInit+0xa0>)
 80108de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108e4:	60fb      	str	r3, [r7, #12]
 80108e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80108e8:	2200      	movs	r2, #0
 80108ea:	2100      	movs	r1, #0
 80108ec:	2043      	movs	r0, #67	; 0x43
 80108ee:	f7f6 fcc5 	bl	800727c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80108f2:	2043      	movs	r0, #67	; 0x43
 80108f4:	f7f6 fcde 	bl	80072b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80108f8:	bf00      	nop
 80108fa:	3728      	adds	r7, #40	; 0x28
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	40023800 	.word	0x40023800
 8010904:	40020000 	.word	0x40020000

08010908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801091c:	4619      	mov	r1, r3
 801091e:	4610      	mov	r0, r2
 8010920:	f7fe fb41 	bl	800efa6 <USBD_LL_SetupStage>
}
 8010924:	bf00      	nop
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	460b      	mov	r3, r1
 8010936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801093e:	78fa      	ldrb	r2, [r7, #3]
 8010940:	6879      	ldr	r1, [r7, #4]
 8010942:	4613      	mov	r3, r2
 8010944:	00db      	lsls	r3, r3, #3
 8010946:	4413      	add	r3, r2
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	440b      	add	r3, r1
 801094c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	78fb      	ldrb	r3, [r7, #3]
 8010954:	4619      	mov	r1, r3
 8010956:	f7fe fb7b 	bl	800f050 <USBD_LL_DataOutStage>
}
 801095a:	bf00      	nop
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b082      	sub	sp, #8
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	460b      	mov	r3, r1
 801096c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010974:	78fa      	ldrb	r2, [r7, #3]
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	4613      	mov	r3, r2
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	4413      	add	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	440b      	add	r3, r1
 8010982:	334c      	adds	r3, #76	; 0x4c
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	78fb      	ldrb	r3, [r7, #3]
 8010988:	4619      	mov	r1, r3
 801098a:	f7fe fc14 	bl	800f1b6 <USBD_LL_DataInStage>
}
 801098e:	bf00      	nop
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b082      	sub	sp, #8
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fe fd48 	bl	800f43a <USBD_LL_SOF>
}
 80109aa:	bf00      	nop
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b084      	sub	sp, #16
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80109ba:	2301      	movs	r3, #1
 80109bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	d001      	beq.n	80109ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80109c6:	f7f2 feb9 	bl	800373c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109d0:	7bfa      	ldrb	r2, [r7, #15]
 80109d2:	4611      	mov	r1, r2
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fe fcf2 	bl	800f3be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fe fc9a 	bl	800f31a <USBD_LL_Reset>
}
 80109e6:	bf00      	nop
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
	...

080109f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fe fced 	bl	800f3de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	6812      	ldr	r2, [r2, #0]
 8010a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010a16:	f043 0301 	orr.w	r3, r3, #1
 8010a1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6a1b      	ldr	r3, [r3, #32]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d005      	beq.n	8010a30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010a24:	4b04      	ldr	r3, [pc, #16]	; (8010a38 <HAL_PCD_SuspendCallback+0x48>)
 8010a26:	691b      	ldr	r3, [r3, #16]
 8010a28:	4a03      	ldr	r2, [pc, #12]	; (8010a38 <HAL_PCD_SuspendCallback+0x48>)
 8010a2a:	f043 0306 	orr.w	r3, r3, #6
 8010a2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010a30:	bf00      	nop
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	e000ed00 	.word	0xe000ed00

08010a3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fe fcdd 	bl	800f40a <USBD_LL_Resume>
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	460b      	mov	r3, r1
 8010a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a6a:	78fa      	ldrb	r2, [r7, #3]
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7fe fd35 	bl	800f4de <USBD_LL_IsoOUTIncomplete>
}
 8010a74:	bf00      	nop
 8010a76:	3708      	adds	r7, #8
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	460b      	mov	r3, r1
 8010a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a8e:	78fa      	ldrb	r2, [r7, #3]
 8010a90:	4611      	mov	r1, r2
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7fe fcf1 	bl	800f47a <USBD_LL_IsoINIncomplete>
}
 8010a98:	bf00      	nop
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fe fd47 	bl	800f542 <USBD_LL_DevConnected>
}
 8010ab4:	bf00      	nop
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fd44 	bl	800f558 <USBD_LL_DevDisconnected>
}
 8010ad0:	bf00      	nop
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d13c      	bne.n	8010b62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010ae8:	4a20      	ldr	r2, [pc, #128]	; (8010b6c <USBD_LL_Init+0x94>)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4a1e      	ldr	r2, [pc, #120]	; (8010b6c <USBD_LL_Init+0x94>)
 8010af4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010af8:	4b1c      	ldr	r3, [pc, #112]	; (8010b6c <USBD_LL_Init+0x94>)
 8010afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010b00:	4b1a      	ldr	r3, [pc, #104]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b02:	2204      	movs	r2, #4
 8010b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010b06:	4b19      	ldr	r3, [pc, #100]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b08:	2202      	movs	r2, #2
 8010b0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010b0c:	4b17      	ldr	r3, [pc, #92]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b0e:	2200      	movs	r2, #0
 8010b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010b12:	4b16      	ldr	r3, [pc, #88]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b14:	2202      	movs	r2, #2
 8010b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010b18:	4b14      	ldr	r3, [pc, #80]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010b1e:	4b13      	ldr	r3, [pc, #76]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010b24:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b26:	2200      	movs	r2, #0
 8010b28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010b2a:	4b10      	ldr	r3, [pc, #64]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010b30:	4b0e      	ldr	r3, [pc, #56]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b32:	2200      	movs	r2, #0
 8010b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010b36:	480d      	ldr	r0, [pc, #52]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b38:	f7f8 f8d1 	bl	8008cde <HAL_PCD_Init>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d001      	beq.n	8010b46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010b42:	f7f2 fdfb 	bl	800373c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010b46:	2180      	movs	r1, #128	; 0x80
 8010b48:	4808      	ldr	r0, [pc, #32]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b4a:	f7f9 fb28 	bl	800a19e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010b4e:	2240      	movs	r2, #64	; 0x40
 8010b50:	2100      	movs	r1, #0
 8010b52:	4806      	ldr	r0, [pc, #24]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b54:	f7f9 fadc 	bl	800a110 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010b58:	2280      	movs	r2, #128	; 0x80
 8010b5a:	2101      	movs	r1, #1
 8010b5c:	4803      	ldr	r0, [pc, #12]	; (8010b6c <USBD_LL_Init+0x94>)
 8010b5e:	f7f9 fad7 	bl	800a110 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	2000244c 	.word	0x2000244c

08010b70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7f8 f9c6 	bl	8008f18 <HAL_PCD_Start>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	4618      	mov	r0, r3
 8010b94:	f000 f942 	bl	8010e1c <USBD_Get_USB_Status>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b084      	sub	sp, #16
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	4608      	mov	r0, r1
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	70fb      	strb	r3, [r7, #3]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	70bb      	strb	r3, [r7, #2]
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010bce:	78bb      	ldrb	r3, [r7, #2]
 8010bd0:	883a      	ldrh	r2, [r7, #0]
 8010bd2:	78f9      	ldrb	r1, [r7, #3]
 8010bd4:	f7f8 fe97 	bl	8009906 <HAL_PCD_EP_Open>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bdc:	7bfb      	ldrb	r3, [r7, #15]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f000 f91c 	bl	8010e1c <USBD_Get_USB_Status>
 8010be4:	4603      	mov	r3, r0
 8010be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}

08010bf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf2:	b580      	push	{r7, lr}
 8010bf4:	b084      	sub	sp, #16
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	6078      	str	r0, [r7, #4]
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c02:	2300      	movs	r3, #0
 8010c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c0c:	78fa      	ldrb	r2, [r7, #3]
 8010c0e:	4611      	mov	r1, r2
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f8 fee0 	bl	80099d6 <HAL_PCD_EP_Close>
 8010c16:	4603      	mov	r3, r0
 8010c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c1a:	7bfb      	ldrb	r3, [r7, #15]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 f8fd 	bl	8010e1c <USBD_Get_USB_Status>
 8010c22:	4603      	mov	r3, r0
 8010c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	460b      	mov	r3, r1
 8010c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c4a:	78fa      	ldrb	r2, [r7, #3]
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7f8 ffb8 	bl	8009bc4 <HAL_PCD_EP_SetStall>
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f000 f8de 	bl	8010e1c <USBD_Get_USB_Status>
 8010c60:	4603      	mov	r3, r0
 8010c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	460b      	mov	r3, r1
 8010c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c88:	78fa      	ldrb	r2, [r7, #3]
 8010c8a:	4611      	mov	r1, r2
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f8 fffd 	bl	8009c8c <HAL_PCD_EP_ClrStall>
 8010c92:	4603      	mov	r3, r0
 8010c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f000 f8bf 	bl	8010e1c <USBD_Get_USB_Status>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010cbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	da0b      	bge.n	8010ce0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010cc8:	78fb      	ldrb	r3, [r7, #3]
 8010cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cce:	68f9      	ldr	r1, [r7, #12]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	00db      	lsls	r3, r3, #3
 8010cd4:	4413      	add	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	440b      	add	r3, r1
 8010cda:	333e      	adds	r3, #62	; 0x3e
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	e00b      	b.n	8010cf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010ce0:	78fb      	ldrb	r3, [r7, #3]
 8010ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ce6:	68f9      	ldr	r1, [r7, #12]
 8010ce8:	4613      	mov	r3, r2
 8010cea:	00db      	lsls	r3, r3, #3
 8010cec:	4413      	add	r3, r2
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	440b      	add	r3, r1
 8010cf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010cf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d10:	2300      	movs	r3, #0
 8010d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d1e:	78fa      	ldrb	r2, [r7, #3]
 8010d20:	4611      	mov	r1, r2
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7f8 fdca 	bl	80098bc <HAL_PCD_SetAddress>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f000 f874 	bl	8010e1c <USBD_Get_USB_Status>
 8010d34:	4603      	mov	r3, r0
 8010d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b086      	sub	sp, #24
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	60f8      	str	r0, [r7, #12]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	603b      	str	r3, [r7, #0]
 8010d4e:	460b      	mov	r3, r1
 8010d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d52:	2300      	movs	r3, #0
 8010d54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d56:	2300      	movs	r3, #0
 8010d58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d60:	7af9      	ldrb	r1, [r7, #11]
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	f7f8 fee3 	bl	8009b30 <HAL_PCD_EP_Transmit>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d6e:	7dfb      	ldrb	r3, [r7, #23]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f000 f853 	bl	8010e1c <USBD_Get_USB_Status>
 8010d76:	4603      	mov	r3, r0
 8010d78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	607a      	str	r2, [r7, #4]
 8010d8e:	603b      	str	r3, [r7, #0]
 8010d90:	460b      	mov	r3, r1
 8010d92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010da2:	7af9      	ldrb	r1, [r7, #11]
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	f7f8 fe5f 	bl	8009a6a <HAL_PCD_EP_Receive>
 8010dac:	4603      	mov	r3, r0
 8010dae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	4618      	mov	r0, r3
 8010db4:	f000 f832 	bl	8010e1c <USBD_Get_USB_Status>
 8010db8:	4603      	mov	r3, r0
 8010dba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010dbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3718      	adds	r7, #24
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b082      	sub	sp, #8
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	460b      	mov	r3, r1
 8010dd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010dd8:	78fa      	ldrb	r2, [r7, #3]
 8010dda:	4611      	mov	r1, r2
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7f8 fe8f 	bl	8009b00 <HAL_PCD_EP_GetRxCount>
 8010de2:	4603      	mov	r3, r0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010df4:	4b03      	ldr	r3, [pc, #12]	; (8010e04 <USBD_static_malloc+0x18>)
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	20002958 	.word	0x20002958

08010e08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]

}
 8010e10:	bf00      	nop
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	4603      	mov	r3, r0
 8010e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e2a:	79fb      	ldrb	r3, [r7, #7]
 8010e2c:	2b03      	cmp	r3, #3
 8010e2e:	d817      	bhi.n	8010e60 <USBD_Get_USB_Status+0x44>
 8010e30:	a201      	add	r2, pc, #4	; (adr r2, 8010e38 <USBD_Get_USB_Status+0x1c>)
 8010e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e36:	bf00      	nop
 8010e38:	08010e49 	.word	0x08010e49
 8010e3c:	08010e4f 	.word	0x08010e4f
 8010e40:	08010e55 	.word	0x08010e55
 8010e44:	08010e5b 	.word	0x08010e5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e4c:	e00b      	b.n	8010e66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e4e:	2303      	movs	r3, #3
 8010e50:	73fb      	strb	r3, [r7, #15]
    break;
 8010e52:	e008      	b.n	8010e66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e54:	2301      	movs	r3, #1
 8010e56:	73fb      	strb	r3, [r7, #15]
    break;
 8010e58:	e005      	b.n	8010e66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e5e:	e002      	b.n	8010e66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e60:	2303      	movs	r3, #3
 8010e62:	73fb      	strb	r3, [r7, #15]
    break;
 8010e64:	bf00      	nop
  }
  return usb_status;
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3714      	adds	r7, #20
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <memset>:
 8010e74:	4402      	add	r2, r0
 8010e76:	4603      	mov	r3, r0
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d100      	bne.n	8010e7e <memset+0xa>
 8010e7c:	4770      	bx	lr
 8010e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8010e82:	e7f9      	b.n	8010e78 <memset+0x4>

08010e84 <__libc_init_array>:
 8010e84:	b570      	push	{r4, r5, r6, lr}
 8010e86:	4d0d      	ldr	r5, [pc, #52]	; (8010ebc <__libc_init_array+0x38>)
 8010e88:	4c0d      	ldr	r4, [pc, #52]	; (8010ec0 <__libc_init_array+0x3c>)
 8010e8a:	1b64      	subs	r4, r4, r5
 8010e8c:	10a4      	asrs	r4, r4, #2
 8010e8e:	2600      	movs	r6, #0
 8010e90:	42a6      	cmp	r6, r4
 8010e92:	d109      	bne.n	8010ea8 <__libc_init_array+0x24>
 8010e94:	4d0b      	ldr	r5, [pc, #44]	; (8010ec4 <__libc_init_array+0x40>)
 8010e96:	4c0c      	ldr	r4, [pc, #48]	; (8010ec8 <__libc_init_array+0x44>)
 8010e98:	f000 f826 	bl	8010ee8 <_init>
 8010e9c:	1b64      	subs	r4, r4, r5
 8010e9e:	10a4      	asrs	r4, r4, #2
 8010ea0:	2600      	movs	r6, #0
 8010ea2:	42a6      	cmp	r6, r4
 8010ea4:	d105      	bne.n	8010eb2 <__libc_init_array+0x2e>
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eac:	4798      	blx	r3
 8010eae:	3601      	adds	r6, #1
 8010eb0:	e7ee      	b.n	8010e90 <__libc_init_array+0xc>
 8010eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010eb6:	4798      	blx	r3
 8010eb8:	3601      	adds	r6, #1
 8010eba:	e7f2      	b.n	8010ea2 <__libc_init_array+0x1e>
 8010ebc:	080118dc 	.word	0x080118dc
 8010ec0:	080118dc 	.word	0x080118dc
 8010ec4:	080118dc 	.word	0x080118dc
 8010ec8:	080118e0 	.word	0x080118e0

08010ecc <memcpy>:
 8010ecc:	440a      	add	r2, r1
 8010ece:	4291      	cmp	r1, r2
 8010ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ed4:	d100      	bne.n	8010ed8 <memcpy+0xc>
 8010ed6:	4770      	bx	lr
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ee2:	4291      	cmp	r1, r2
 8010ee4:	d1f9      	bne.n	8010eda <memcpy+0xe>
 8010ee6:	bd10      	pop	{r4, pc}

08010ee8 <_init>:
 8010ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eea:	bf00      	nop
 8010eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eee:	bc08      	pop	{r3}
 8010ef0:	469e      	mov	lr, r3
 8010ef2:	4770      	bx	lr

08010ef4 <_fini>:
 8010ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef6:	bf00      	nop
 8010ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010efa:	bc08      	pop	{r3}
 8010efc:	469e      	mov	lr, r3
 8010efe:	4770      	bx	lr

08010f00 <__system_Reset_veneer>:
 8010f00:	f85f f000 	ldr.w	pc, [pc]	; 8010f04 <__system_Reset_veneer+0x4>
 8010f04:	200001e1 	.word	0x200001e1

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 08001ad1 08001b41     ............A...
20000040:	080019fd 00010065 00000030 08001969     ....e...0...i...
20000050:	080019ad 080018ed 00010066 00000000     ........f.......
	...
2000006c:	006627d9 0000000e 0800614d 08006289     .'f.....Ma...b..
2000007c:	08005f75 006627da 00000006 080048e5     u_...'f......H..
2000008c:	08004989 080047dd 006627db 0000000a     .I...G...'f.....
2000009c:	08004f65 08005061 08004df5 006627dc     eO..aP...M...'f.
200000ac:	00000003 080016f9 08001761 08001649     ........a...I...
200000bc:	006627dd 0000000d 08005859 08005951     .'f.....YX..QY..
200000cc:	08005699 00010067 00000002 08001319     .V..g...........
200000dc:	08001369 0800128d                       i.......

200000e4 <SystemCoreClock>:
200000e4:	00f42400                                .$..

200000e8 <uwTickPrio>:
200000e8:	00000010                                ....

200000ec <uwTickFreq>:
200000ec:	00000001                                ....

200000f0 <USBD_CDC_DeviceQualifierDesc>:
200000f0:	0200060a 40000000 00000001              .......@....

200000fc <USBD_CDC>:
200000fc:	0800e495 0800e685 0800e789 00000000     ................
2000010c:	0800eaaf 0800e941 0800ea3f 00000000     ....A...?.......
	...
20000124:	0800eb95 0800eb25 0800ec05 0800ec75     ....%.......u...

20000134 <USBD_CDC_CfgDesc>:
20000134:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000144:	24050001 05011000 01000124 02022404     ...$....$....$..
20000154:	00062405 82050701 10000803 00010409     .$..............
20000164:	00000a02 01050700 00004002 02810507     .........@......
20000174:	                                         @..

20000177 <CDCInEpAdd>:
20000177:	                                         .

20000178 <CDCOutEpAdd>:
20000178:	                                         .

20000179 <CDCCmdEpAdd>:
20000179:	                                         ...

2000017c <USBD_Interface_fops_FS>:
2000017c:	08010485 080104ad 080104bd 08010579     ............y...
2000018c:	0801061d                                ....

20000190 <FS_Desc>:
20000190:	08010641 08010665 080106c5 08010689     A...e...........
200001a0:	080106ed 08010711 0801074d              ........M...

200001ac <USBD_FS_DeviceDesc>:
200001ac:	02000112 40000202 57400483 02010200     .......@..@W....
200001bc:	00000103                                ....

200001c0 <USBD_LangIDDesc>:
200001c0:	04090304                                ....

200001c4 <USBD_StringSerial>:
200001c4:	0000031a 00000000 00000000 00000000     ................
	...

200001e0 <system_Reset>:

__ramfunc void system_Reset()
{
200001e0:	b480      	push	{r7}
200001e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
200001e4:	b672      	cpsid	i
}
200001e6:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200001e8:	4b05      	ldr	r3, [pc, #20]	; (20000200 <system_Reset+0x20>)
200001ea:	68db      	ldr	r3, [r3, #12]
200001ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200001f0:	4903      	ldr	r1, [pc, #12]	; (20000200 <system_Reset+0x20>)
200001f2:	4b04      	ldr	r3, [pc, #16]	; (20000204 <system_Reset+0x24>)
200001f4:	4313      	orrs	r3, r2
200001f6:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
200001f8:	f3bf 8f4f 	dsb	sy
}
200001fc:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
200001fe:	e7fe      	b.n	200001fe <system_Reset+0x1e>
20000200:	e000ed00 	.word	0xe000ed00
20000204:	05fa0004 	.word	0x05fa0004
