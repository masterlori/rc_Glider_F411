
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e20  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  08015fb8  08015fb8  00025fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080169f0  080169f0  00030268  2**0
                  CONTENTS
  4 .ARM          00000008  080169f0  080169f0  000269f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080169f8  080169f8  00030268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080169f8  080169f8  000269f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080169fc  080169fc  000269fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08016a00  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002bac  20000268  08016c68  00030268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e14  08016c68  00032e14  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00040000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030298  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024516  00000000  00000000  000302db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000060e5  00000000  00000000  000547f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e38  00000000  00000000  0005a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001760  00000000  00000000  0005c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001e7b7  00000000  00000000  0005de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ba8e  00000000  00000000  0007c627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000a4887  00000000  00000000  000a80b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000082c4  00000000  00000000  0014c93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  00154c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000268 	.word	0x20000268
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08015f94 	.word	0x08015f94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000026c 	.word	0x2000026c
 80001d4:	08015f94 	.word	0x08015f94

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b970 	b.w	8000e58 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14a      	bne.n	8000c36 <__udivmoddi4+0xa6>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	d965      	bls.n	8000c72 <__udivmoddi4+0xe2>
 8000ba6:	fab2 f382 	clz	r3, r2
 8000baa:	b143      	cbz	r3, 8000bbe <__udivmoddi4+0x2e>
 8000bac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb0:	f1c3 0220 	rsb	r2, r3, #32
 8000bb4:	409f      	lsls	r7, r3
 8000bb6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	409c      	lsls	r4, r3
 8000bbe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc2:	fa1f f58c 	uxth.w	r5, ip
 8000bc6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bca:	0c22      	lsrs	r2, r4, #16
 8000bcc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd4:	fb01 f005 	mul.w	r0, r1, r5
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x62>
 8000bdc:	eb1c 0202 	adds.w	r2, ip, r2
 8000be0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be4:	f080 811c 	bcs.w	8000e20 <__udivmoddi4+0x290>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f240 8119 	bls.w	8000e20 <__udivmoddi4+0x290>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4462      	add	r2, ip
 8000bf2:	1a12      	subs	r2, r2, r0
 8000bf4:	b2a4      	uxth	r4, r4
 8000bf6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	fb00 f505 	mul.w	r5, r0, r5
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x90>
 8000c0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x294>
 8000c16:	42a5      	cmp	r5, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x294>
 8000c1c:	4464      	add	r4, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11e      	cbz	r6, 8000c32 <__udivmoddi4+0xa2>
 8000c2a:	40dc      	lsrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0xbc>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	f000 80ed 	beq.w	8000e1a <__udivmoddi4+0x28a>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e9c6 0500 	strd	r0, r5, [r6]
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	d149      	bne.n	8000ce8 <__udivmoddi4+0x158>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d302      	bcc.n	8000c5e <__udivmoddi4+0xce>
 8000c58:	4282      	cmp	r2, r0
 8000c5a:	f200 80f8 	bhi.w	8000e4e <__udivmoddi4+0x2be>
 8000c5e:	1a84      	subs	r4, r0, r2
 8000c60:	eb65 0203 	sbc.w	r2, r5, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	4617      	mov	r7, r2
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d0e2      	beq.n	8000c32 <__udivmoddi4+0xa2>
 8000c6c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c70:	e7df      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xe6>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x210>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c90:	fb07 2015 	mls	r0, r7, r5, r2
 8000c94:	0c22      	lsrs	r2, r4, #16
 8000c96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9a:	fb0e f005 	mul.w	r0, lr, r5
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x124>
 8000ca2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x122>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2b8>
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	1a12      	subs	r2, r2, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cbc:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x14e>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x14c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2c2>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce6:	e79f      	b.n	8000c28 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfe:	40fd      	lsrs	r5, r7
 8000d00:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d18:	fb08 f50e 	mul.w	r5, r8, lr
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	fa00 f001 	lsl.w	r0, r0, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b0>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2b4>
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2b4>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	b29d      	uxth	r5, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d50:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1da>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2ac>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2ac>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x29c>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x298>
 8000d80:	b156      	cbz	r6, 8000d98 <__udivmoddi4+0x208>
 8000d82:	ebb0 0208 	subs.w	r2, r0, r8
 8000d86:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8e:	40ca      	lsrs	r2, r1
 8000d90:	40cc      	lsrs	r4, r1
 8000d92:	4317      	orrs	r7, r2
 8000d94:	e9c6 7400 	strd	r7, r4, [r6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	f1c3 0120 	rsb	r1, r3, #32
 8000da4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dac:	fa25 f101 	lsr.w	r1, r5, r1
 8000db0:	409d      	lsls	r5, r3
 8000db2:	432a      	orrs	r2, r5
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dca:	fb00 f50e 	mul.w	r5, r0, lr
 8000dce:	428d      	cmp	r5, r1
 8000dd0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x258>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b0>
 8000de0:	428d      	cmp	r5, r1
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b0>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4461      	add	r1, ip
 8000de8:	1b49      	subs	r1, r1, r5
 8000dea:	b292      	uxth	r2, r2
 8000dec:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df0:	fb07 1115 	mls	r1, r7, r5, r1
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dfc:	4291      	cmp	r1, r2
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x282>
 8000e00:	eb1c 0202 	adds.w	r2, ip, r2
 8000e04:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0e:	3d02      	subs	r5, #2
 8000e10:	4462      	add	r2, ip
 8000e12:	1a52      	subs	r2, r2, r1
 8000e14:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0xfc>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000e20:	4639      	mov	r1, r7
 8000e22:	e6e6      	b.n	8000bf2 <__udivmoddi4+0x62>
 8000e24:	4610      	mov	r0, r2
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x90>
 8000e28:	4548      	cmp	r0, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f0>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3b01      	subs	r3, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f0>
 8000e38:	4645      	mov	r5, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x282>
 8000e3c:	462b      	mov	r3, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1da>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x258>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b0>
 8000e48:	3d02      	subs	r5, #2
 8000e4a:	4462      	add	r2, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x124>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e70a      	b.n	8000c68 <__udivmoddi4+0xd8>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x14e>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e010      	b.n	8000e8c <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d9eb      	bls.n	8000e6a <autopilot_Timer+0xe>
		}
	}

	return;
 8000e92:	bf00      	nop
}
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000284 	.word	0x20000284

08000ea4 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <autopilot_InitTask+0xb8>)
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <autopilot_InitTask+0xbc>)
 8000eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb4:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <autopilot_InitTask+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	755a      	strb	r2, [r3, #21]
	autopilot_info.astart_elevator_en = 0;
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <autopilot_InitTask+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	761a      	strb	r2, [r3, #24]
	autopilot_info.astart_motor_en = 0;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <autopilot_InitTask+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_val = -80;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <autopilot_InitTask+0xbc>)
 8000eca:	22b0      	movs	r2, #176	; 0xb0
 8000ecc:	769a      	strb	r2, [r3, #26]
	autopilot_info.astart_motor_val = 90;
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <autopilot_InitTask+0xbc>)
 8000ed0:	225a      	movs	r2, #90	; 0x5a
 8000ed2:	76da      	strb	r2, [r3, #27]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <autopilot_InitTask+0xc4>)
 8000ede:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <autopilot_InitTask+0xc8>)
 8000ef0:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <autopilot_InitTask+0xcc>)
 8000ef6:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f00:	220a      	movs	r2, #10
 8000f02:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_STAB].start_func = autopilot_stateStabStart;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f06:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <autopilot_InitTask+0xd0>)
 8000f08:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_STAB].main_func = autopilot_stateStabMain;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <autopilot_InitTask+0xd4>)
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_STAB].end_func = NULL;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_STAB].upd_period = 10;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <autopilot_InitTask+0xd8>)
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f24:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <autopilot_InitTask+0xdc>)
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <autopilot_InitTask+0xc0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c

	autopilot_KalmanInit(&_roll_filter, 0.001, 0.003, 0.03);
 8000f34:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8000f84 <autopilot_InitTask+0xe0>
 8000f38:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000f88 <autopilot_InitTask+0xe4>
 8000f3c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000f8c <autopilot_InitTask+0xe8>
 8000f40:	4813      	ldr	r0, [pc, #76]	; (8000f90 <autopilot_InitTask+0xec>)
 8000f42:	f000 fa21 	bl	8001388 <autopilot_KalmanInit>
	autopilot_KalmanInit(&_pitch_filter, 0.001, 0.003, 0.03);
 8000f46:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8000f84 <autopilot_InitTask+0xe0>
 8000f4a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000f88 <autopilot_InitTask+0xe4>
 8000f4e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000f8c <autopilot_InitTask+0xe8>
 8000f52:	4810      	ldr	r0, [pc, #64]	; (8000f94 <autopilot_InitTask+0xf0>)
 8000f54:	f000 fa18 	bl	8001388 <autopilot_KalmanInit>

	return;
 8000f58:	bf00      	nop
}
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000348 	.word	0x20000348
 8000f60:	20000284 	.word	0x20000284
 8000f64:	20000308 	.word	0x20000308
 8000f68:	08001085 	.word	0x08001085
 8000f6c:	08001093 	.word	0x08001093
 8000f70:	080010a1 	.word	0x080010a1
 8000f74:	0800132d 	.word	0x0800132d
 8000f78:	0800133b 	.word	0x0800133b
 8000f7c:	08001349 	.word	0x08001349
 8000f80:	08001369 	.word	0x08001369
 8000f84:	3cf5c28f 	.word	0x3cf5c28f
 8000f88:	3b449ba6 	.word	0x3b449ba6
 8000f8c:	3a83126f 	.word	0x3a83126f
 8000f90:	200002b4 	.word	0x200002b4
 8000f94:	200002dc 	.word	0x200002dc

08000f98 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <autopilot_Task+0x54>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d107      	bne.n	8000fb6 <autopilot_Task+0x1e>
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <autopilot_Task+0x58>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f822 	bl	8000ff8 <autopilot_gotoState>
 8000fb4:	e017      	b.n	8000fe6 <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <autopilot_Task+0x54>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d813      	bhi.n	8000fe8 <autopilot_Task+0x50>
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <autopilot_Task+0x54>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <autopilot_Task+0x5c>)
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d009      	beq.n	8000fe8 <autopilot_Task+0x50>
			autopilot_states[_cur_ap_state].main_func();
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <autopilot_Task+0x54>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <autopilot_Task+0x5c>)
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4798      	blx	r3
		}
	}


	return;
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
}
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000348 	.word	0x20000348
 8000ff0:	20000284 	.word	0x20000284
 8000ff4:	20000308 	.word	0x20000308

08000ff8 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d833      	bhi.n	8001070 <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <autopilot_gotoState+0x80>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d812      	bhi.n	8001038 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <autopilot_gotoState+0x80>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4a18      	ldr	r2, [pc, #96]	; (800107c <autopilot_gotoState+0x84>)
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	3308      	adds	r3, #8
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <autopilot_gotoState+0x80>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4a13      	ldr	r2, [pc, #76]	; (800107c <autopilot_gotoState+0x84>)
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	3308      	adds	r3, #8
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <autopilot_gotoState+0x84>)
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <autopilot_gotoState+0x84>)
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <autopilot_gotoState+0x84>)
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	330c      	adds	r3, #12
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <autopilot_gotoState+0x88>)
 8001060:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <autopilot_gotoState+0x80>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <autopilot_gotoState+0x88>)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	7513      	strb	r3, [r2, #20]

	return;
 800106e:	e000      	b.n	8001072 <autopilot_gotoState+0x7a>
		return;
 8001070:	bf00      	nop
}
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000348 	.word	0x20000348
 800107c:	20000308 	.word	0x20000308
 8001080:	20000284 	.word	0x20000284

08001084 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	autopilot_gotoState(AP_STATE_FULLMANUAL);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff ffb5 	bl	8000ff8 <autopilot_gotoState>

	return;
 800108e:	bf00      	nop
}
 8001090:	bd80      	pop	{r7, pc}

08001092 <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
	return;
 8001096:	bf00      	nop
}
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 80010a6:	4b99      	ldr	r3, [pc, #612]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f040 808f 	bne.w	80011ce <autopilot_stateFullManMain+0x12e>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 80010b0:	4b97      	ldr	r3, [pc, #604]	; (8001310 <autopilot_stateFullManMain+0x270>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4a97      	ldr	r2, [pc, #604]	; (8001314 <autopilot_stateFullManMain+0x274>)
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4413      	add	r3, r2
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a92      	ldr	r2, [pc, #584]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80010c2:	6053      	str	r3, [r2, #4]
		autopilot_UpdAngles();
 80010c4:	f000 fa8c 	bl	80015e0 <autopilot_UpdAngles>
		if(rc_info.connected == 1)
 80010c8:	4b93      	ldr	r3, [pc, #588]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80010ca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d17c      	bne.n	80011ce <autopilot_stateFullManMain+0x12e>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 80010d4:	4b90      	ldr	r3, [pc, #576]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80010d6:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	2000      	movs	r0, #0
 80010e0:	f009 fa9a 	bl	800a618 <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 80010e4:	4b89      	ldr	r3, [pc, #548]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d108      	bne.n	8001100 <autopilot_stateFullManMain+0x60>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 80010ee:	4b8a      	ldr	r3, [pc, #552]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80010f0:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	2001      	movs	r0, #1
 80010fa:	f009 fa8d 	bl	800a618 <servo_setPercnet>
 80010fe:	e013      	b.n	8001128 <autopilot_stateFullManMain+0x88>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 8001100:	4b82      	ldr	r3, [pc, #520]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001102:	7e9b      	ldrb	r3, [r3, #26]
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	2001      	movs	r0, #1
 800110a:	f009 fa85 	bl	800a618 <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 800110e:	4b82      	ldr	r3, [pc, #520]	; (8001318 <autopilot_stateFullManMain+0x278>)
 8001110:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001114:	b25b      	sxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	425b      	neglt	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b32      	cmp	r3, #50	; 0x32
 8001120:	d902      	bls.n	8001128 <autopilot_stateFullManMain+0x88>
					autopilot_info.astart_elevator_en = 0;
 8001122:	4b7a      	ldr	r3, [pc, #488]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001124:	2200      	movs	r2, #0
 8001126:	761a      	strb	r2, [r3, #24]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8001128:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <autopilot_stateFullManMain+0x278>)
 800112a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800112e:	b25b      	sxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	dc04      	bgt.n	800113e <autopilot_stateFullManMain+0x9e>
 8001134:	4b75      	ldr	r3, [pc, #468]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001136:	7e5b      	ldrb	r3, [r3, #25]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d133      	bne.n	80011a6 <autopilot_stateFullManMain+0x106>
 800113e:	4b73      	ldr	r3, [pc, #460]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001140:	7d5b      	ldrb	r3, [r3, #21]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d12e      	bne.n	80011a6 <autopilot_stateFullManMain+0x106>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 8001148:	4b70      	ldr	r3, [pc, #448]	; (800130c <autopilot_stateFullManMain+0x26c>)
 800114a:	7e5b      	ldrb	r3, [r3, #25]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10e      	bne.n	8001170 <autopilot_stateFullManMain+0xd0>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 8001152:	4b71      	ldr	r3, [pc, #452]	; (8001318 <autopilot_stateFullManMain+0x278>)
 8001154:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001158:	b25b      	sxtb	r3, r3
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	f000 faf7 	bl	8001758 <autopilot_expRunningAverage>
 800116a:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 800116e:	e021      	b.n	80011b4 <autopilot_stateFullManMain+0x114>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001172:	7edb      	ldrb	r3, [r3, #27]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	f000 fae9 	bl	8001758 <autopilot_expRunningAverage>
 8001186:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <autopilot_stateFullManMain+0x278>)
 800118c:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001190:	b25b      	sxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	bfb8      	it	lt
 8001196:	425b      	neglt	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b32      	cmp	r3, #50	; 0x32
 800119c:	d90a      	bls.n	80011b4 <autopilot_stateFullManMain+0x114>
						autopilot_info.astart_motor_en = 0;
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	765a      	strb	r2, [r3, #25]
				if( autopilot_info.astart_motor_en == 0 ){
 80011a4:	e006      	b.n	80011b4 <autopilot_stateFullManMain+0x114>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 80011a6:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800131c <autopilot_stateFullManMain+0x27c>
 80011aa:	f000 fad5 	bl	8001758 <autopilot_expRunningAverage>
 80011ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80011b2:	e000      	b.n	80011b6 <autopilot_stateFullManMain+0x116>
				if( autopilot_info.astart_motor_en == 0 ){
 80011b4:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 80011b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011be:	edc7 7a01 	vstr	s15, [r7, #4]
 80011c2:	793b      	ldrb	r3, [r7, #4]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	2000      	movs	r0, #0
 80011ca:	f007 fe91 	bl	8008ef0 <motor_setTorque>
			//autopilot_gotoState(AP_STATE_FAILSAFE);
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80011d0:	7d5b      	ldrb	r3, [r3, #21]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d131      	bne.n	800123c <autopilot_stateFullManMain+0x19c>
	{
		if(rc_info.connected == 1)
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80011da:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12b      	bne.n	800123c <autopilot_stateFullManMain+0x19c>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 80011e4:	4b4e      	ldr	r3, [pc, #312]	; (8001320 <autopilot_stateFullManMain+0x280>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10e      	bne.n	800120a <autopilot_stateFullManMain+0x16a>
			{
				if( rc_info.axis_l_x < -70 )
 80011ec:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80011ee:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80011f8:	da20      	bge.n	800123c <autopilot_stateFullManMain+0x19c>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80011fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001200:	609a      	str	r2, [r3, #8]
					_ap_arm_st = 1;
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <autopilot_stateFullManMain+0x280>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e018      	b.n	800123c <autopilot_stateFullManMain+0x19c>
				}
			}
			else if( _ap_arm_st == 1 )
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <autopilot_stateFullManMain+0x280>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d114      	bne.n	800123c <autopilot_stateFullManMain+0x19c>
			{
				if( rc_info.axis_l_x >= -70 ){
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <autopilot_stateFullManMain+0x278>)
 8001214:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001218:	b25b      	sxtb	r3, r3
 800121a:	f113 0f46 	cmn.w	r3, #70	; 0x46
 800121e:	db03      	blt.n	8001228 <autopilot_stateFullManMain+0x188>
					_ap_arm_st = 0;
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <autopilot_stateFullManMain+0x280>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e009      	b.n	800123c <autopilot_stateFullManMain+0x19c>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <autopilot_stateFullManMain+0x26c>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <autopilot_stateFullManMain+0x19c>
					{
						autopilot_info.armed_flag = 1;
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001232:	2201      	movs	r2, #1
 8001234:	755a      	strb	r2, [r3, #21]
						_ap_arm_st = 0;
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <autopilot_stateFullManMain+0x280>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <autopilot_stateFullManMain+0x26c>)
 800123e:	7e1b      	ldrb	r3, [r3, #24]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d129      	bne.n	800129a <autopilot_stateFullManMain+0x1fa>
	{
		if( astart_elev_state == 0 )
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <autopilot_stateFullManMain+0x284>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10d      	bne.n	800126a <autopilot_stateFullManMain+0x1ca>
		{
			if( rc_info.button_r == 1 )
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <autopilot_stateFullManMain+0x278>)
 8001250:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d11f      	bne.n	800129a <autopilot_stateFullManMain+0x1fa>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <autopilot_stateFullManMain+0x26c>)
 800125c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001260:	611a      	str	r2, [r3, #16]
				astart_elev_state = 1;
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <autopilot_stateFullManMain+0x284>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e017      	b.n	800129a <autopilot_stateFullManMain+0x1fa>
			}
		}
		else if( astart_elev_state == 1 )
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <autopilot_stateFullManMain+0x284>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d113      	bne.n	800129a <autopilot_stateFullManMain+0x1fa>
		{
			if( rc_info.button_r != 1 ){
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <autopilot_stateFullManMain+0x278>)
 8001274:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <autopilot_stateFullManMain+0x1e6>
				astart_elev_state = 0;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <autopilot_stateFullManMain+0x284>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e009      	b.n	800129a <autopilot_stateFullManMain+0x1fa>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <autopilot_stateFullManMain+0x1fa>
				{
					autopilot_info.astart_elevator_en = 1;
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <autopilot_stateFullManMain+0x26c>)
 8001290:	2201      	movs	r2, #1
 8001292:	761a      	strb	r2, [r3, #24]
					astart_elev_state = 0;
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <autopilot_stateFullManMain+0x284>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <autopilot_stateFullManMain+0x26c>)
 800129c:	7e5b      	ldrb	r3, [r3, #25]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12f      	bne.n	8001304 <autopilot_stateFullManMain+0x264>
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80012a6:	7d5b      	ldrb	r3, [r3, #21]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d12a      	bne.n	8001304 <autopilot_stateFullManMain+0x264>
	{
		if( astart_mot_state == 0 )
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <autopilot_stateFullManMain+0x288>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <autopilot_stateFullManMain+0x232>
		{
			if( rc_info.button_l == 1 )
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80012b8:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d120      	bne.n	8001304 <autopilot_stateFullManMain+0x264>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80012c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012c8:	60da      	str	r2, [r3, #12]
				astart_mot_state = 1;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <autopilot_stateFullManMain+0x288>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 80012d0:	e018      	b.n	8001304 <autopilot_stateFullManMain+0x264>
		else if( astart_mot_state == 1 )
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <autopilot_stateFullManMain+0x288>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d114      	bne.n	8001304 <autopilot_stateFullManMain+0x264>
			if( rc_info.button_l != 1 ){
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <autopilot_stateFullManMain+0x278>)
 80012dc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d003      	beq.n	80012ee <autopilot_stateFullManMain+0x24e>
				astart_mot_state = 0;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <autopilot_stateFullManMain+0x288>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	return;
 80012ec:	e00a      	b.n	8001304 <autopilot_stateFullManMain+0x264>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <autopilot_stateFullManMain+0x264>
					autopilot_info.astart_motor_en = 1;
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <autopilot_stateFullManMain+0x26c>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	765a      	strb	r2, [r3, #25]
					astart_mot_state = 0;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <autopilot_stateFullManMain+0x288>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
	return;
 8001302:	bf00      	nop
 8001304:	bf00      	nop
}
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000284 	.word	0x20000284
 8001310:	20000348 	.word	0x20000348
 8001314:	20000308 	.word	0x20000308
 8001318:	20000e04 	.word	0x20000e04
 800131c:	00000000 	.word	0x00000000
 8001320:	20000304 	.word	0x20000304
 8001324:	20000349 	.word	0x20000349
 8001328:	2000034a 	.word	0x2000034a

0800132c <autopilot_stateStabStart>:

/*Stabilize state*/
void autopilot_stateStabStart()
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
	return;
 8001330:	bf00      	nop
}
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <autopilot_stateStabMain>:

void autopilot_stateStabMain()
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
	return;
 800133e:	bf00      	nop
}
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f009 f962 	bl	800a618 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 8001354:	2100      	movs	r1, #0
 8001356:	2001      	movs	r0, #1
 8001358:	f009 f95e 	bl	800a618 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f007 fdc6 	bl	8008ef0 <motor_setTorque>

	return;
 8001364:	bf00      	nop
}
 8001366:	bd80      	pop	{r7, pc}

08001368 <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <autopilot_stateFailsafeMain+0x1c>)
 800136e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d103      	bne.n	8001380 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fe3d 	bl	8000ff8 <autopilot_gotoState>
	}
	return;
 800137e:	bf00      	nop
 8001380:	bf00      	nop
}
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000e04 	.word	0x20000e04

08001388 <autopilot_KalmanInit>:

//Kalman filter init
void autopilot_KalmanInit(kalman_TypeDef* filter, float Q_angle, float Q_bias, float R_measure)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	ed87 0a02 	vstr	s0, [r7, #8]
 8001394:	edc7 0a01 	vstr	s1, [r7, #4]
 8001398:	ed87 1a00 	vstr	s2, [r7]
	filter->Q_angle = Q_angle;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	601a      	str	r2, [r3, #0]
	filter->Q_bias = Q_bias;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	605a      	str	r2, [r3, #4]
	filter->R_measure = R_measure;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	609a      	str	r2, [r3, #8]

	filter->angle = 0;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
	filter->bias = 0;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]

	filter->P[0][0] = 0;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
	filter->P[0][1] = 0;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
	filter->P[1][0] = 0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
	filter->P[1][1] = 0;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24

	return;
 80013de:	bf00      	nop
}
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <autopilot_KalmanUpd>:

//Kalman filter update
float autopilot_KalmanUpd(kalman_TypeDef* filter, float newAngle, float newRate, float dt)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b089      	sub	sp, #36	; 0x24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80013f6:	edc7 0a01 	vstr	s1, [r7, #4]
 80013fa:	ed87 1a00 	vstr	s2, [r7]
	float S;
	float K[2];
	float y;

	filter->rate = newRate - filter->bias;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	edd3 7a04 	vldr	s15, [r3, #16]
 8001404:	ed97 7a01 	vldr	s14, [r7, #4]
 8001408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	edc3 7a05 	vstr	s15, [r3, #20]
	filter->angle += dt * filter->rate;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	ed93 7a03 	vldr	s14, [r3, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 6a05 	vldr	s13, [r3, #20]
 800141e:	edd7 7a00 	vldr	s15, [r7]
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	edc3 7a03 	vstr	s15, [r3, #12]

	filter->P[0][0] += dt * (dt*filter->P[1][1] - filter->P[0][1] - filter->P[1][0] + filter->Q_angle);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	ed93 7a06 	vldr	s14, [r3, #24]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	edd3 7a07 	vldr	s15, [r3, #28]
 800144a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	edd3 7a08 	vldr	s15, [r3, #32]
 8001454:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001462:	edd7 7a00 	vldr	s15, [r7]
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edc3 7a06 	vstr	s15, [r3, #24]
	filter->P[0][1] -= dt * filter->P[1][1];
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	ed93 7a07 	vldr	s14, [r3, #28]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001480:	edd7 7a00 	vldr	s15, [r7]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edc3 7a07 	vstr	s15, [r3, #28]
	filter->P[1][0] -= dt * filter->P[1][1];
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	ed93 7a08 	vldr	s14, [r3, #32]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800149e:	edd7 7a00 	vldr	s15, [r7]
 80014a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	edc3 7a08 	vstr	s15, [r3, #32]
	filter->P[1][1] += filter->Q_bias * dt;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80014bc:	edd7 7a00 	vldr	s15, [r7]
 80014c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	S = filter->P[0][0] + filter->R_measure;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	edc7 7a07 	vstr	s15, [r7, #28]
	K[0] = filter->P[0][0] / S;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	edd3 6a06 	vldr	s13, [r3, #24]
 80014e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f0:	edc7 7a04 	vstr	s15, [r7, #16]
	K[1] = filter->P[1][0] / S;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	edd3 6a08 	vldr	s13, [r3, #32]
 80014fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	edc7 7a05 	vstr	s15, [r7, #20]

	y = newAngle - filter->angle;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	edd3 7a03 	vldr	s15, [r3, #12]
 800150c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a06 	vstr	s15, [r7, #24]
	filter->angle += K[0] * y;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	ed93 7a03 	vldr	s14, [r3, #12]
 800151e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001522:	edd7 7a06 	vldr	s15, [r7, #24]
 8001526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	edc3 7a03 	vstr	s15, [r3, #12]
	filter->bias += K[1] * y;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	ed93 7a04 	vldr	s14, [r3, #16]
 800153a:	edd7 6a05 	vldr	s13, [r7, #20]
 800153e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	edc3 7a04 	vstr	s15, [r3, #16]

	filter->P[0][0] -= K[0] * filter->P[0][0];
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	ed93 7a06 	vldr	s14, [r3, #24]
 8001556:	edd7 6a04 	vldr	s13, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	edc3 7a06 	vstr	s15, [r3, #24]
	filter->P[0][1] -= K[0] * filter->P[0][1];
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	ed93 7a07 	vldr	s14, [r3, #28]
 8001574:	edd7 6a04 	vldr	s13, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	edd3 7a07 	vldr	s15, [r3, #28]
 800157e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	edc3 7a07 	vstr	s15, [r3, #28]
	filter->P[1][0] -= K[1] * filter->P[0][0];
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001592:	edd7 6a05 	vldr	s13, [r7, #20]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	edd3 7a06 	vldr	s15, [r3, #24]
 800159c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	edc3 7a08 	vstr	s15, [r3, #32]
	filter->P[1][1] -= K[1] * filter->P[0][1];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80015ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return filter->angle;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	ee07 3a90 	vmov	s15, r3
}
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <autopilot_UpdAngles>:

//Update Pitch Roll angles
void autopilot_UpdAngles()
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
	if( sens_info.state == 3 )
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <autopilot_UpdAngles+0x160>)
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	f040 809d 	bne.w	800172c <autopilot_UpdAngles+0x14c>
	{
		float dt = 0.01; // Временной интервал (зависит от вашей частоты считывания данных)
 80015f2:	4b54      	ldr	r3, [pc, #336]	; (8001744 <autopilot_UpdAngles+0x164>)
 80015f4:	60fb      	str	r3, [r7, #12]

		float roll = atan2(sens_info.accel_y, sens_info.accel_z) * 180/M_PI;
 80015f6:	4b52      	ldr	r3, [pc, #328]	; (8001740 <autopilot_UpdAngles+0x160>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff58 	bl	80004b0 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b4e      	ldr	r3, [pc, #312]	; (8001740 <autopilot_UpdAngles+0x160>)
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff51 	bl	80004b0 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ec43 2b11 	vmov	d1, r2, r3
 8001616:	ec45 4b10 	vmov	d0, r4, r5
 800161a:	f014 f93f 	bl	801589c <atan2>
 800161e:	ec51 0b10 	vmov	r0, r1, d0
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b48      	ldr	r3, [pc, #288]	; (8001748 <autopilot_UpdAngles+0x168>)
 8001628:	f7fe ff9a 	bl	8000560 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a340      	add	r3, pc, #256	; (adr r3, 8001738 <autopilot_UpdAngles+0x158>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f8bb 	bl	80007b4 <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa3b 	bl	8000ac0 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	60bb      	str	r3, [r7, #8]
		float pitch = atan2(-sens_info.accel_x, sqrt(sens_info.accel_y * sens_info.accel_y + sens_info.accel_z * sens_info.accel_z)) * 180/M_PI;
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <autopilot_UpdAngles+0x160>)
 8001650:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001654:	eef1 7a67 	vneg.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff27 	bl	80004b0 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <autopilot_UpdAngles+0x160>)
 8001668:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <autopilot_UpdAngles+0x160>)
 800166e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001676:	4b32      	ldr	r3, [pc, #200]	; (8001740 <autopilot_UpdAngles+0x160>)
 8001678:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <autopilot_UpdAngles+0x160>)
 800167e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff0f 	bl	80004b0 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b10 	vmov	d0, r2, r3
 800169a:	f014 f901 	bl	80158a0 <sqrt>
 800169e:	eeb0 7a40 	vmov.f32	s14, s0
 80016a2:	eef0 7a60 	vmov.f32	s15, s1
 80016a6:	eeb0 1a47 	vmov.f32	s2, s14
 80016aa:	eef0 1a67 	vmov.f32	s3, s15
 80016ae:	ec45 4b10 	vmov	d0, r4, r5
 80016b2:	f014 f8f3 	bl	801589c <atan2>
 80016b6:	ec51 0b10 	vmov	r0, r1, d0
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <autopilot_UpdAngles+0x168>)
 80016c0:	f7fe ff4e 	bl	8000560 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	a31a      	add	r3, pc, #104	; (adr r3, 8001738 <autopilot_UpdAngles+0x158>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff f86f 	bl	80007b4 <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f9ef 	bl	8000ac0 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	607b      	str	r3, [r7, #4]

		autopilot_info.roll = autopilot_KalmanUpd(&_roll_filter, roll, sens_info.gyro_x, dt);
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <autopilot_UpdAngles+0x160>)
 80016e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ec:	ed97 1a03 	vldr	s2, [r7, #12]
 80016f0:	eef0 0a67 	vmov.f32	s1, s15
 80016f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <autopilot_UpdAngles+0x16c>)
 80016fa:	f7ff fe76 	bl	80013ea <autopilot_KalmanUpd>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <autopilot_UpdAngles+0x170>)
 8001704:	edc3 7a07 	vstr	s15, [r3, #28]
		autopilot_info.pitch = autopilot_KalmanUpd(&_pitch_filter, pitch, sens_info.gyro_y, dt);
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <autopilot_UpdAngles+0x160>)
 800170a:	edd3 7a03 	vldr	s15, [r3, #12]
 800170e:	ed97 1a03 	vldr	s2, [r7, #12]
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	ed97 0a01 	vldr	s0, [r7, #4]
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <autopilot_UpdAngles+0x174>)
 800171c:	f7ff fe65 	bl	80013ea <autopilot_KalmanUpd>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <autopilot_UpdAngles+0x170>)
 8001726:	edc3 7a08 	vstr	s15, [r3, #32]
	}
	return;
 800172a:	bf00      	nop
 800172c:	bf00      	nop
}
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	f3af 8000 	nop.w
 8001738:	54442d18 	.word	0x54442d18
 800173c:	400921fb 	.word	0x400921fb
 8001740:	20000fbc 	.word	0x20000fbc
 8001744:	3c23d70a 	.word	0x3c23d70a
 8001748:	40668000 	.word	0x40668000
 800174c:	200002b4 	.word	0x200002b4
 8001750:	20000284 	.word	0x20000284
 8001754:	200002dc 	.word	0x200002dc

08001758 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 8001762:	edd7 7a01 	vldr	s15, [r7, #4]
 8001766:	eef5 7a40 	vcmp.f32	s15, #0.0
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d104      	bne.n	800177a <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <autopilot_expRunningAverage+0x88>)
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e025      	b.n	80017c6 <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <autopilot_expRunningAverage+0x88>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe96 	bl	80004b0 <__aeabi_f2d>
 8001784:	4604      	mov	r4, r0
 8001786:	460d      	mov	r5, r1
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <autopilot_expRunningAverage+0x88>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f7fe fe89 	bl	80004b0 <__aeabi_f2d>
 800179e:	a30e      	add	r3, pc, #56	; (adr r3, 80017d8 <autopilot_expRunningAverage+0x80>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fedc 	bl	8000560 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd20 	bl	80001f4 <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f980 	bl	8000ac0 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <autopilot_expRunningAverage+0x88>)
 80017c4:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <autopilot_expRunningAverage+0x88>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	ee07 3a90 	vmov	s15, r3
}
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdb0      	pop	{r4, r5, r7, pc}
 80017d8:	9999999a 	.word	0x9999999a
 80017dc:	3fb99999 	.word	0x3fb99999
 80017e0:	2000034c 	.word	0x2000034c

080017e4 <cfg_NodeApVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d817      	bhi.n	8001828 <cfg_NodeApVarProp+0x44>
 80017f8:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <cfg_NodeApVarProp+0x1c>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001811 	.word	0x08001811
 8001804:	08001817 	.word	0x08001817
 8001808:	0800181d 	.word	0x0800181d
 800180c:	08001823 	.word	0x08001823
	{
		case AUTOPILOT_STATE:	str = "State"; break;
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <cfg_NodeApVarProp+0xc4>)
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <cfg_NodeApVarProp+0x48>
		case AUTOPILOT_ARMED:	str = "Armed"; break;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <cfg_NodeApVarProp+0xc8>)
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e007      	b.n	800182c <cfg_NodeApVarProp+0x48>
		case AUTOPILOT_ROLL:	str = "Roll"; break;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <cfg_NodeApVarProp+0xcc>)
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e004      	b.n	800182c <cfg_NodeApVarProp+0x48>
		case AUTOPILOT_PITCH:	str = "Pitch"; break;
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <cfg_NodeApVarProp+0xd0>)
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e001      	b.n	800182c <cfg_NodeApVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8001828:	2302      	movs	r3, #2
 800182a:	e036      	b.n	800189a <cfg_NodeApVarProp+0xb6>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00f      	beq.n	8001852 <cfg_NodeApVarProp+0x6e>
 8001832:	e007      	b.n	8001844 <cfg_NodeApVarProp+0x60>
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	1c53      	adds	r3, r2, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f3      	bne.n	8001834 <cfg_NodeApVarProp+0x50>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01f      	beq.n	8001898 <cfg_NodeApVarProp+0xb4>
 8001858:	89fb      	ldrh	r3, [r7, #14]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d81a      	bhi.n	8001894 <cfg_NodeApVarProp+0xb0>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <cfg_NodeApVarProp+0x80>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001875 	.word	0x08001875
 8001868:	0800187d 	.word	0x0800187d
 800186c:	08001885 	.word	0x08001885
 8001870:	0800188d 	.word	0x0800188d
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	e00d      	b.n	8001898 <cfg_NodeApVarProp+0xb4>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	801a      	strh	r2, [r3, #0]
 8001882:	e009      	b.n	8001898 <cfg_NodeApVarProp+0xb4>
		case AUTOPILOT_ROLL:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2214      	movs	r2, #20
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	e005      	b.n	8001898 <cfg_NodeApVarProp+0xb4>
		case AUTOPILOT_PITCH:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2214      	movs	r2, #20
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	e001      	b.n	8001898 <cfg_NodeApVarProp+0xb4>
		default: return CFG_ERROR_VARID;
 8001894:	2302      	movs	r3, #2
 8001896:	e000      	b.n	800189a <cfg_NodeApVarProp+0xb6>
	}
	return CFG_ERROR_NONE;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	08015fb8 	.word	0x08015fb8
 80018ac:	08015fc0 	.word	0x08015fc0
 80018b0:	08015fc8 	.word	0x08015fc8
 80018b4:	08015fd0 	.word	0x08015fd0

080018b8 <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d028      	beq.n	800191c <cfg_NodeApVarGet+0x64>
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d823      	bhi.n	8001918 <cfg_NodeApVarGet+0x60>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <cfg_NodeApVarGet+0x20>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	080018f7 	.word	0x080018f7
 80018e0:	08001905 	.word	0x08001905
 80018e4:	0800190f 	.word	0x0800190f
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <cfg_NodeApVarGet+0x74>)
 80018ea:	7d1b      	ldrb	r3, [r3, #20]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e012      	b.n	800191c <cfg_NodeApVarGet+0x64>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <cfg_NodeApVarGet+0x74>)
 80018f8:	7d5b      	ldrb	r3, [r3, #21]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00b      	b.n	800191c <cfg_NodeApVarGet+0x64>
		case AUTOPILOT_ROLL:		*(float*)value = autopilot_info.roll; break;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <cfg_NodeApVarGet+0x74>)
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e006      	b.n	800191c <cfg_NodeApVarGet+0x64>
		case AUTOPILOT_PITCH:		*(float*)value = autopilot_info.pitch; break;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <cfg_NodeApVarGet+0x74>)
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e001      	b.n	800191c <cfg_NodeApVarGet+0x64>
		default: return CFG_ERROR_VARID;
 8001918:	2302      	movs	r3, #2
 800191a:	e000      	b.n	800191e <cfg_NodeApVarGet+0x66>
	}
	return CFG_ERROR_NONE;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000284 	.word	0x20000284

08001930 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d013      	beq.n	800196a <cfg_NodeApVarSet+0x3a>
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <cfg_NodeApVarSet+0x1e>
 8001948:	2b01      	cmp	r3, #1
 800194a:	d006      	beq.n	800195a <cfg_NodeApVarSet+0x2a>
 800194c:	e00b      	b.n	8001966 <cfg_NodeApVarSet+0x36>
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <cfg_NodeApVarSet+0x48>)
 8001956:	751a      	strb	r2, [r3, #20]
 8001958:	e007      	b.n	800196a <cfg_NodeApVarSet+0x3a>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <cfg_NodeApVarSet+0x48>)
 8001962:	755a      	strb	r2, [r3, #21]
 8001964:	e001      	b.n	800196a <cfg_NodeApVarSet+0x3a>
		default: return CFG_ERROR_VARID;
 8001966:	2302      	movs	r3, #2
 8001968:	e000      	b.n	800196c <cfg_NodeApVarSet+0x3c>
	}
	return CFG_ERROR_NONE;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000284 	.word	0x20000284

0800197c <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <battery_Timer+0x34>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <battery_Timer+0x34>)
 800198e:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <battery_Timer+0x38>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <battery_Timer+0x28>
		battery_info.timer--;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <battery_Timer+0x38>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3b01      	subs	r3, #1
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <battery_Timer+0x38>)
 80019a0:	6013      	str	r3, [r2, #0]
	}

	return;
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
}
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	2000037c 	.word	0x2000037c
 80019b4:	20000350 	.word	0x20000350

080019b8 <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b63      	cmp	r3, #99	; 0x63
 80019c4:	d801      	bhi.n	80019ca <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 80019c6:	2364      	movs	r3, #100	; 0x64
 80019c8:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <battery_InitTask+0x34>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <battery_InitTask+0x34>)
 80019d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019d6:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <battery_InitTask+0x34>)
 80019da:	2201      	movs	r2, #1
 80019dc:	711a      	strb	r2, [r3, #4]

	return;
 80019de:	bf00      	nop
}
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000350 	.word	0x20000350

080019f0 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 80019f6:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <battery_Task+0xd8>)
 80019f8:	7b5b      	ldrb	r3, [r3, #13]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d15e      	bne.n	8001abe <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <battery_Task+0xd8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <battery_Task+0xd8>)
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d109      	bne.n	8001a24 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <battery_Task+0xd8>)
 8001a12:	89db      	ldrh	r3, [r3, #14]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f858 	bl	8001acc <battery_filterInit>
			battery_info.init_flag = 0;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <battery_Task+0xd8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 8001a22:	e04c      	b.n	8001abe <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <battery_Task+0xd8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d148      	bne.n	8001abe <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <battery_Task+0xd8>)
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <battery_Task+0xd8>)
 8001a32:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <battery_Task+0xd8>)
 8001a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	425a      	negs	r2, r3
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	f002 0207 	and.w	r2, r2, #7
 8001a48:	bf58      	it	pl
 8001a4a:	4253      	negpl	r3, r2
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <battery_Task+0xd8>)
 8001a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <battery_Task+0xd8>)
 8001a56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <battery_Task+0xd8>)
 8001a60:	89db      	ldrh	r3, [r3, #14]
 8001a62:	b299      	uxth	r1, r3
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <battery_Task+0xd8>)
 8001a66:	f100 0308 	add.w	r3, r0, #8
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	460a      	mov	r2, r1
 8001a70:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8001a76:	2300      	movs	r3, #0
 8001a78:	70fb      	strb	r3, [r7, #3]
 8001a7a:	e00d      	b.n	8001a98 <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <battery_Task+0xd8>)
 8001a80:	3308      	adds	r3, #8
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	889b      	ldrh	r3, [r3, #4]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	3301      	adds	r3, #1
 8001a96:	70fb      	strb	r3, [r7, #3]
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	d9ee      	bls.n	8001a7c <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <battery_Task+0xd8>)
 8001aa6:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <battery_Task+0xd8>)
 8001aaa:	8a1b      	ldrh	r3, [r3, #16]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f838 	bl	8001b24 <battery_calcPerc>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <battery_Task+0xd8>)
 8001aba:	749a      	strb	r2, [r3, #18]
	return;
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
}
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000350 	.word	0x20000350

08001acc <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e009      	b.n	8001af0 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <battery_filterInit+0x54>)
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	3301      	adds	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d9f2      	bls.n	8001adc <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <battery_filterInit+0x54>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <battery_filterInit+0x54>)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <battery_filterInit+0x54>)
 8001b06:	8a1b      	ldrh	r3, [r3, #16]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f80a 	bl	8001b24 <battery_calcPerc>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <battery_filterInit+0x54>)
 8001b16:	749a      	strb	r2, [r3, #18]

	return;
 8001b18:	bf00      	nop
}
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000350 	.word	0x20000350

08001b24 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	88fa      	ldrh	r2, [r7, #6]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d802      	bhi.n	8001b46 <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b42:	885b      	ldrh	r3, [r3, #2]
 8001b44:	e041      	b.n	8001bca <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b4a:	88fa      	ldrh	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d302      	bcc.n	8001b56 <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b54:	e039      	b.n	8001bca <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e011      	b.n	8001b80 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b60:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d307      	bcc.n	8001b7a <battery_calcPerc+0x56>
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b70:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d906      	bls.n	8001b88 <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d9ea      	bls.n	8001b5c <battery_calcPerc+0x38>
 8001b86:	e000      	b.n	8001b8a <battery_calcPerc+0x66>
		{
			break;
 8001b88:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001b8a:	88f8      	ldrh	r0, [r7, #6]
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b90:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001b94:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001b9c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001ba0:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001bac:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <battery_calcPerc+0xb0>)
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	f000 f80a 	bl	8001bd8 <analog_map>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 8001bc8:	89bb      	ldrh	r3, [r7, #12]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	1a8a      	subs	r2, r1, r2
 8001bf2:	fb03 f202 	mul.w	r2, r3, r2
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1acb      	subs	r3, r1, r3
 8001bfc:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4413      	add	r3, r2
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d00c      	beq.n	8001c3e <cfg_NodeBatVarProp+0x2e>
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	dc0d      	bgt.n	8001c44 <cfg_NodeBatVarProp+0x34>
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <cfg_NodeBatVarProp+0x22>
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d003      	beq.n	8001c38 <cfg_NodeBatVarProp+0x28>
 8001c30:	e008      	b.n	8001c44 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <cfg_NodeBatVarProp+0xa4>)
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e007      	b.n	8001c48 <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <cfg_NodeBatVarProp+0xa8>)
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	e004      	b.n	8001c48 <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <cfg_NodeBatVarProp+0xac>)
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e001      	b.n	8001c48 <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e02e      	b.n	8001ca6 <cfg_NodeBatVarProp+0x96>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00f      	beq.n	8001c6e <cfg_NodeBatVarProp+0x5e>
 8001c4e:	e007      	b.n	8001c60 <cfg_NodeBatVarProp+0x50>
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	1c53      	adds	r3, r2, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1c59      	adds	r1, r3, #1
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f3      	bne.n	8001c50 <cfg_NodeBatVarProp+0x40>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d017      	beq.n	8001ca4 <cfg_NodeBatVarProp+0x94>
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d00e      	beq.n	8001c98 <cfg_NodeBatVarProp+0x88>
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	dc10      	bgt.n	8001ca0 <cfg_NodeBatVarProp+0x90>
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <cfg_NodeBatVarProp+0x78>
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d004      	beq.n	8001c90 <cfg_NodeBatVarProp+0x80>
 8001c86:	e00b      	b.n	8001ca0 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2212      	movs	r2, #18
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	e009      	b.n	8001ca4 <cfg_NodeBatVarProp+0x94>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2212      	movs	r2, #18
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	e005      	b.n	8001ca4 <cfg_NodeBatVarProp+0x94>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2212      	movs	r2, #18
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	e001      	b.n	8001ca4 <cfg_NodeBatVarProp+0x94>
		default: return CFG_ERROR_VARID;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e000      	b.n	8001ca6 <cfg_NodeBatVarProp+0x96>
	}
	return CFG_ERROR_NONE;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	08015fd8 	.word	0x08015fd8
 8001cb8:	08015fe0 	.word	0x08015fe0
 8001cbc:	08015ff4 	.word	0x08015ff4

08001cc0 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <cfg_NodeBatVarGet+0x54>
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d014      	beq.n	8001d02 <cfg_NodeBatVarGet+0x42>
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	dc19      	bgt.n	8001d10 <cfg_NodeBatVarGet+0x50>
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <cfg_NodeBatVarGet+0x26>
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d007      	beq.n	8001cf4 <cfg_NodeBatVarGet+0x34>
 8001ce4:	e014      	b.n	8001d10 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <cfg_NodeBatVarGet+0x64>)
 8001ce8:	89db      	ldrh	r3, [r3, #14]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e00f      	b.n	8001d14 <cfg_NodeBatVarGet+0x54>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <cfg_NodeBatVarGet+0x64>)
 8001cf6:	8a1b      	ldrh	r3, [r3, #16]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e008      	b.n	8001d14 <cfg_NodeBatVarGet+0x54>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <cfg_NodeBatVarGet+0x64>)
 8001d04:	7c9b      	ldrb	r3, [r3, #18]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e001      	b.n	8001d14 <cfg_NodeBatVarGet+0x54>
		default: return CFG_ERROR_VARID;
 8001d10:	2302      	movs	r3, #2
 8001d12:	e000      	b.n	8001d16 <cfg_NodeBatVarGet+0x56>
	}
	return CFG_ERROR_NONE;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000350 	.word	0x20000350

08001d28 <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00f      	beq.n	8001d5a <cfg_NodeBatVarSet+0x32>
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d007      	beq.n	8001d50 <cfg_NodeBatVarSet+0x28>
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	dc03      	bgt.n	8001d4c <cfg_NodeBatVarSet+0x24>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <cfg_NodeBatVarSet+0x2c>
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <cfg_NodeBatVarSet+0x30>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e005      	b.n	8001d5c <cfg_NodeBatVarSet+0x34>
		case BAT_CHG_PERC:			break;
 8001d50:	bf00      	nop
 8001d52:	e002      	b.n	8001d5a <cfg_NodeBatVarSet+0x32>
		case BAT_VOLTAGE:			break;
 8001d54:	bf00      	nop
 8001d56:	e000      	b.n	8001d5a <cfg_NodeBatVarSet+0x32>
		case BAT_FILTERED_VOLTAGE:	break;
 8001d58:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <cfg_GetNodeName>:
	{ NODE_AUTOPILOT, NODE_MAIN, AUTOPILOT_VAR_NUM, cfg_NodeApVarGet, cfg_NodeApVarSet, cfg_NodeApVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	f242 72dd 	movw	r2, #10205	; 0x27dd
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	dc3d      	bgt.n	8001dfa <cfg_GetNodeName+0x92>
 8001d7e:	f242 72d9 	movw	r2, #10201	; 0x27d9
 8001d82:	4293      	cmp	r3, r2
 8001d84:	da0c      	bge.n	8001da0 <cfg_GetNodeName+0x38>
 8001d86:	2b67      	cmp	r3, #103	; 0x67
 8001d88:	d034      	beq.n	8001df4 <cfg_GetNodeName+0x8c>
 8001d8a:	2b67      	cmp	r3, #103	; 0x67
 8001d8c:	dc35      	bgt.n	8001dfa <cfg_GetNodeName+0x92>
 8001d8e:	2b66      	cmp	r3, #102	; 0x66
 8001d90:	d01e      	beq.n	8001dd0 <cfg_GetNodeName+0x68>
 8001d92:	2b66      	cmp	r3, #102	; 0x66
 8001d94:	dc31      	bgt.n	8001dfa <cfg_GetNodeName+0x92>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d014      	beq.n	8001dc4 <cfg_GetNodeName+0x5c>
 8001d9a:	2b65      	cmp	r3, #101	; 0x65
 8001d9c:	d015      	beq.n	8001dca <cfg_GetNodeName+0x62>
		case NODE_MOTOR    	: str = "Motor"; break;
		case NODE_RC    	: str = "RC"; break;
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_SENS    	: str = "Sensors"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		default:break;
 8001d9e:	e02c      	b.n	8001dfa <cfg_GetNodeName+0x92>
	switch( nodeid )
 8001da0:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 8001da4:	3b19      	subs	r3, #25
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d827      	bhi.n	8001dfa <cfg_GetNodeName+0x92>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <cfg_GetNodeName+0x48>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dd7 	.word	0x08001dd7
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	08001de3 	.word	0x08001de3
 8001dbc:	08001de9 	.word	0x08001de9
 8001dc0:	08001def 	.word	0x08001def
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <cfg_GetNodeName+0xc8>)
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e018      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_FW		: str = "Firmware"; break;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <cfg_GetNodeName+0xcc>)
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e015      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <cfg_GetNodeName+0xd0>)
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e012      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_SERVO    	: str = "Servo"; break;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <cfg_GetNodeName+0xd4>)
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e00f      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_MOTOR    	: str = "Motor"; break;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <cfg_GetNodeName+0xd8>)
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e00c      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_RC    	: str = "RC"; break;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <cfg_GetNodeName+0xdc>)
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e009      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_BAT    	: str = "Battery"; break;
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <cfg_GetNodeName+0xe0>)
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e006      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_SENS    	: str = "Sensors"; break;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <cfg_GetNodeName+0xe4>)
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e003      	b.n	8001dfc <cfg_GetNodeName+0x94>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <cfg_GetNodeName+0xe8>)
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e000      	b.n	8001dfc <cfg_GetNodeName+0x94>
		default:break;
 8001dfa:	bf00      	nop
	}
	if( name )
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00f      	beq.n	8001e22 <cfg_GetNodeName+0xba>
	{
		while( *str ){
 8001e02:	e007      	b.n	8001e14 <cfg_GetNodeName+0xac>
			*name++ = *str++;
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	1c53      	adds	r3, r2, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	1c59      	adds	r1, r3, #1
 8001e0e:	6039      	str	r1, [r7, #0]
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	701a      	strb	r2, [r3, #0]
		while( *str ){
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f3      	bne.n	8001e04 <cfg_GetNodeName+0x9c>
		}
		*name = 0;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	08016000 	.word	0x08016000
 8001e34:	0801600c 	.word	0x0801600c
 8001e38:	08016018 	.word	0x08016018
 8001e3c:	0801602c 	.word	0x0801602c
 8001e40:	08016034 	.word	0x08016034
 8001e44:	0801603c 	.word	0x0801603c
 8001e48:	08016040 	.word	0x08016040
 8001e4c:	08016048 	.word	0x08016048
 8001e50:	08016050 	.word	0x08016050

08001e54 <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <cfg_GetNode+0x58>)
 8001e60:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 8001e62:	2300      	movs	r3, #0
 8001e64:	817b      	strh	r3, [r7, #10]
 8001e66:	e005      	b.n	8001e74 <cfg_GetNode+0x20>
 8001e68:	897b      	ldrh	r3, [r7, #10]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3314      	adds	r3, #20
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <cfg_GetNode+0x5c>)
 8001e76:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	897a      	ldrh	r2, [r7, #10]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d204      	bcs.n	8001e8c <cfg_GetNode+0x38>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1ed      	bne.n	8001e68 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <cfg_GetNode+0x5c>)
 8001e8e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	897a      	ldrh	r2, [r7, #10]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <cfg_GetNode+0x4a>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	e000      	b.n	8001ea0 <cfg_GetNode+0x4c>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	20000030 	.word	0x20000030
 8001eb0:	20000380 	.word	0x20000380

08001eb4 <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <cfg_NodeFwVarProp+0x70>)
 8001eca:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2214      	movs	r2, #20
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	e00d      	b.n	8001ef0 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <cfg_NodeFwVarProp+0x74>)
 8001edc:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	e004      	b.n	8001ef0 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <cfg_NodeFwVarProp+0x78>)
 8001ee8:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2215      	movs	r2, #21
 8001eee:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00f      	beq.n	8001f16 <cfg_NodeFwVarProp+0x62>
 8001ef6:	e007      	b.n	8001f08 <cfg_NodeFwVarProp+0x54>
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	1c53      	adds	r3, r2, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1c59      	adds	r1, r3, #1
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f3      	bne.n	8001ef8 <cfg_NodeFwVarProp+0x44>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	0801605c 	.word	0x0801605c
 8001f28:	08016064 	.word	0x08016064
 8001f2c:	0801607c 	.word	0x0801607c

08001f30 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <cfg_NodeFwVarGet+0x40>)
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e00a      	b.n	8001f60 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d103      	bne.n	8001f58 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e003      	b.n	8001f60 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	3f666666 	.word	0x3f666666

08001f74 <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d106      	bne.n	8001f94 <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 8001f8e:	f001 f91d 	bl	80031cc <cfg_ClearFwBuf>
 8001f92:	e00f      	b.n	8001fb4 <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	2b2f      	cmp	r3, #47	; 0x2f
 8001f98:	d805      	bhi.n	8001fa6 <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 f92c 	bl	80031fc <cfg_WriteFwData>
 8001fa4:	e006      	b.n	8001fb4 <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	2b31      	cmp	r3, #49	; 0x31
 8001faa:	d103      	bne.n	8001fb4 <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <cfg_NodeFwVarSet+0x4c>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
	}
	return CFG_ERROR_NONE;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000380 	.word	0x20000380

08001fc4 <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d817      	bhi.n	8002008 <cfg_NodeMainVarProp+0x44>
 8001fd8:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <cfg_NodeMainVarProp+0x1c>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08001ff7 	.word	0x08001ff7
 8001fe8:	08001ffd 	.word	0x08001ffd
 8001fec:	08002003 	.word	0x08002003
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <cfg_NodeMainVarProp+0xc4>)
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e00a      	b.n	800200c <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <cfg_NodeMainVarProp+0xc8>)
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e007      	b.n	800200c <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <cfg_NodeMainVarProp+0xcc>)
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e004      	b.n	800200c <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <cfg_NodeMainVarProp+0xd0>)
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e001      	b.n	800200c <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8002008:	2302      	movs	r3, #2
 800200a:	e036      	b.n	800207a <cfg_NodeMainVarProp+0xb6>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00f      	beq.n	8002032 <cfg_NodeMainVarProp+0x6e>
 8002012:	e007      	b.n	8002024 <cfg_NodeMainVarProp+0x60>
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	1c53      	adds	r3, r2, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c59      	adds	r1, r3, #1
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f3      	bne.n	8002014 <cfg_NodeMainVarProp+0x50>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01f      	beq.n	8002078 <cfg_NodeMainVarProp+0xb4>
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d81a      	bhi.n	8002074 <cfg_NodeMainVarProp+0xb0>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <cfg_NodeMainVarProp+0x80>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	0800205d 	.word	0x0800205d
 800204c:	08002065 	.word	0x08002065
 8002050:	0800206d 	.word	0x0800206d
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2222      	movs	r2, #34	; 0x22
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e00d      	b.n	8002078 <cfg_NodeMainVarProp+0xb4>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2217      	movs	r2, #23
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	e009      	b.n	8002078 <cfg_NodeMainVarProp+0xb4>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2203      	movs	r2, #3
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	e005      	b.n	8002078 <cfg_NodeMainVarProp+0xb4>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e001      	b.n	8002078 <cfg_NodeMainVarProp+0xb4>
		default: return CFG_ERROR_VARID;
 8002074:	2302      	movs	r3, #2
 8002076:	e000      	b.n	800207a <cfg_NodeMainVarProp+0xb6>
	}
	return CFG_ERROR_NONE;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	08016084 	.word	0x08016084
 800208c:	08016090 	.word	0x08016090
 8002090:	080160a0 	.word	0x080160a0
 8002094:	080160b0 	.word	0x080160b0

08002098 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d026      	beq.n	80020f8 <cfg_NodeMainVarGet+0x60>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d821      	bhi.n	80020f4 <cfg_NodeMainVarGet+0x5c>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <cfg_NodeMainVarGet+0x20>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020d9 	.word	0x080020d9
 80020c0:	080020e5 	.word	0x080020e5
 80020c4:	080020ed 	.word	0x080020ed
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <cfg_NodeMainVarGet+0x6c>)
 80020ca:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e00f      	b.n	80020f8 <cfg_NodeMainVarGet+0x60>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 80020d8:	f009 f82c 	bl	800b134 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e009      	b.n	80020f8 <cfg_NodeMainVarGet+0x60>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e005      	b.n	80020f8 <cfg_NodeMainVarGet+0x60>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e001      	b.n	80020f8 <cfg_NodeMainVarGet+0x60>
		default: return CFG_ERROR_VARID;
 80020f4:	2302      	movs	r3, #2
 80020f6:	e000      	b.n	80020fa <cfg_NodeMainVarGet+0x62>
	}
	return CFG_ERROR_NONE;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000380 	.word	0x20000380

08002108 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d02a      	beq.n	8002170 <cfg_NodeMainVarSet+0x68>
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d820      	bhi.n	8002162 <cfg_NodeMainVarSet+0x5a>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <cfg_NodeMainVarSet+0x20>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	08002167 	.word	0x08002167
 8002130:	08002145 	.word	0x08002145
 8002134:	08002153 	.word	0x08002153
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <cfg_NodeMainVarSet+0x74>)
 800213e:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
 8002142:	e015      	b.n	8002170 <cfg_NodeMainVarSet+0x68>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <cfg_NodeMainVarSet+0x62>
 800214c:	f000 fe68 	bl	8002e20 <cfg_SaveSettings>
 8002150:	e00b      	b.n	800216a <cfg_NodeMainVarSet+0x62>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <cfg_NodeMainVarSet+0x66>
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <cfg_NodeMainVarSet+0x78>)
 800215c:	2201      	movs	r2, #1
 800215e:	705a      	strb	r2, [r3, #1]
 8002160:	e005      	b.n	800216e <cfg_NodeMainVarSet+0x66>
		default: return CFG_ERROR_VARID;
 8002162:	2302      	movs	r3, #2
 8002164:	e005      	b.n	8002172 <cfg_NodeMainVarSet+0x6a>
		case MAIN_WORKING_TIME:				break;
 8002166:	bf00      	nop
 8002168:	e002      	b.n	8002170 <cfg_NodeMainVarSet+0x68>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 800216a:	bf00      	nop
 800216c:	e000      	b.n	8002170 <cfg_NodeMainVarSet+0x68>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 800216e:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000380 	.word	0x20000380
 8002180:	20001054 	.word	0x20001054

08002184 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e023      	b.n	80021da <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 8002192:	4a16      	ldr	r2, [pc, #88]	; (80021ec <cfg_Timer+0x68>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d014      	beq.n	80021d4 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <cfg_Timer+0x68>)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1e5a      	subs	r2, r3, #1
 80021c0:	490a      	ldr	r1, [pc, #40]	; (80021ec <cfg_Timer+0x68>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80021c8:	fb00 f303 	mul.w	r3, r0, r3
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021d2:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d9d8      	bls.n	8002192 <cfg_Timer+0xe>
		}
	}

	return;
 80021e0:	bf00      	nop
}
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20000380 	.word	0x20000380

080021f0 <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <cfg_InitTask+0xc0>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <cfg_InitTask+0xc0>)
 8002200:	2209      	movs	r2, #9
 8002202:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	e040      	b.n	800228e <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <cfg_InitTask+0xc0>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 8002222:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <cfg_InitTask+0xc0>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3302      	adds	r3, #2
 8002232:	2200      	movs	r2, #0
 8002234:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <cfg_InitTask+0xc0>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	2200      	movs	r2, #0
 8002248:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 800224a:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <cfg_InitTask+0xc0>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <cfg_InitTask+0xc0>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8002272:	4a0f      	ldr	r2, [pc, #60]	; (80022b0 <cfg_InitTask+0xc0>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d9bb      	bls.n	800220c <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <cfg_InitTask+0xc0>)
 8002296:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <cfg_InitTask+0xc4>)
 8002298:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	cfg_info.iface[CFG_IFACE_CH1_USB].tx_func = cfg_TxDataCh1USB;
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <cfg_InitTask+0xc0>)
 800229e:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <cfg_InitTask+0xc8>)
 80022a0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

	cfg_LoadSettings();
 80022a4:	f000 fee4 	bl	8003070 <cfg_LoadSettings>

	return;
 80022a8:	bf00      	nop
}
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000380 	.word	0x20000380
 80022b4:	08003619 	.word	0x08003619
 80022b8:	08003635 	.word	0x08003635

080022bc <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b099      	sub	sp, #100	; 0x64
 80022c0:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80022ea:	2300      	movs	r3, #0
 80022ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ee:	e3f3      	b.n	8002ad8 <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 80022f0:	4ab8      	ldr	r2, [pc, #736]	; (80025d4 <cfg_Task+0x318>)
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d069      	beq.n	80023dc <cfg_Task+0x120>
 8002308:	4ab2      	ldr	r2, [pc, #712]	; (80025d4 <cfg_Task+0x318>)
 800230a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d15d      	bne.n	80023dc <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8002320:	4aac      	ldr	r2, [pc, #688]	; (80025d4 <cfg_Task+0x318>)
 8002322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002324:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8002336:	4aa7      	ldr	r2, [pc, #668]	; (80025d4 <cfg_Task+0x318>)
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d91c      	bls.n	8002388 <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 800234e:	4aa1      	ldr	r2, [pc, #644]	; (80025d4 <cfg_Task+0x318>)
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002364:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002368:	fb01 f202 	mul.w	r2, r1, r2
 800236c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8002370:	4998      	ldr	r1, [pc, #608]	; (80025d4 <cfg_Task+0x318>)
 8002372:	440a      	add	r2, r1
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	4610      	mov	r0, r2
 8002378:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 800237a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237c:	b29b      	uxth	r3, r3
 800237e:	2140      	movs	r1, #64	; 0x40
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f89f 	bl	80034c4 <cfg_RemTxData>
 8002386:	e029      	b.n	80023dc <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8002388:	4a92      	ldr	r2, [pc, #584]	; (80025d4 <cfg_Task+0x318>)
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800239e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023a2:	fb01 f202 	mul.w	r2, r1, r2
 80023a6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80023aa:	498a      	ldr	r1, [pc, #552]	; (80025d4 <cfg_Task+0x318>)
 80023ac:	1850      	adds	r0, r2, r1
 80023ae:	4989      	ldr	r1, [pc, #548]	; (80025d4 <cfg_Task+0x318>)
 80023b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023b2:	f44f 7447 	mov.w	r4, #796	; 0x31c
 80023b6:	fb04 f202 	mul.w	r2, r4, r2
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 80023c6:	4a83      	ldr	r2, [pc, #524]	; (80025d4 <cfg_Task+0x318>)
 80023c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ca:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 80023dc:	4a7d      	ldr	r2, [pc, #500]	; (80025d4 <cfg_Task+0x318>)
 80023de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 836e 	beq.w	8002ad2 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 80023f6:	4a77      	ldr	r2, [pc, #476]	; (80025d4 <cfg_Task+0x318>)
 80023f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4971      	ldr	r1, [pc, #452]	; (80025d4 <cfg_Task+0x318>)
 800240e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002410:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	440b      	add	r3, r1
 800241a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800241e:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8002420:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8002424:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8002428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800242a:	b29b      	uxth	r3, r3
 800242c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002430:	2202      	movs	r2, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 ff08 	bl	8003248 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8002438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243a:	b29b      	uxth	r3, r3
 800243c:	2202      	movs	r2, #2
 800243e:	4966      	ldr	r1, [pc, #408]	; (80025d8 <cfg_Task+0x31c>)
 8002440:	4618      	mov	r0, r3
 8002442:	f000 ff01 	bl	8003248 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8002446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002448:	b298      	uxth	r0, r3
 800244a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	f203 2315 	addw	r3, r3, #533	; 0x215
 8002458:	4a5e      	ldr	r2, [pc, #376]	; (80025d4 <cfg_Task+0x318>)
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	2201      	movs	r2, #1
 8002460:	4619      	mov	r1, r3
 8002462:	f000 fef1 	bl	8003248 <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8002466:	4a5b      	ldr	r2, [pc, #364]	; (80025d4 <cfg_Task+0x318>)
 8002468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800246a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8002480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002482:	b29b      	uxth	r3, r3
 8002484:	2202      	movs	r2, #2
 8002486:	4955      	ldr	r1, [pc, #340]	; (80025dc <cfg_Task+0x320>)
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fedd 	bl	8003248 <cfg_AddTxData>
 800248e:	e2db      	b.n	8002a48 <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8002490:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <cfg_Task+0x318>)
 8002492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002494:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	f203 2319 	addw	r3, r3, #537	; 0x219
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 809c 	bne.w	80025e4 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 80024ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ae:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	f203 2316 	addw	r3, r3, #534	; 0x216
 80024ba:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <cfg_Task+0x318>)
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <cfg_Task+0x318>)
 80024ca:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d957      	bls.n	8002588 <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 80024d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80024e0:	2202      	movs	r2, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 feb0 	bl	8003248 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 80024e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ea:	b298      	uxth	r0, r3
 80024ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80024f0:	461a      	mov	r2, r3
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <cfg_Task+0x324>)
 80024fc:	4413      	add	r3, r2
 80024fe:	2202      	movs	r2, #2
 8002500:	4619      	mov	r1, r3
 8002502:	f000 fea1 	bl	8003248 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8002506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002508:	b298      	uxth	r0, r3
 800250a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800250e:	461a      	mov	r2, r3
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4a31      	ldr	r2, [pc, #196]	; (80025e0 <cfg_Task+0x324>)
 800251a:	4413      	add	r3, r2
 800251c:	3302      	adds	r3, #2
 800251e:	2202      	movs	r2, #2
 8002520:	4619      	mov	r1, r3
 8002522:	f000 fe91 	bl	8003248 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8002526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002528:	b298      	uxth	r0, r3
 800252a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800252e:	461a      	mov	r2, r3
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <cfg_Task+0x324>)
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	2202      	movs	r2, #2
 8002540:	4619      	mov	r1, r3
 8002542:	f000 fe81 	bl	8003248 <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8002546:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800254a:	4619      	mov	r1, r3
 800254c:	4a24      	ldr	r2, [pc, #144]	; (80025e0 <cfg_Task+0x324>)
 800254e:	460b      	mov	r3, r1
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	1d3a      	adds	r2, r7, #4
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fc02 	bl	8001d68 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd fe36 	bl	80001d8 <strlen>
 800256c:	4603      	mov	r3, r0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8002576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002578:	b29b      	uxth	r3, r3
 800257a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800257e:	1d39      	adds	r1, r7, #4
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fe61 	bl	8003248 <cfg_AddTxData>
 8002586:	e25f      	b.n	8002a48 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002588:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <cfg_Task+0x318>)
 800258a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025a2:	b2d8      	uxtb	r0, r3
 80025a4:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <cfg_Task+0x318>)
 80025a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80025b6:	4602      	mov	r2, r0
 80025b8:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 80025ba:	2302      	movs	r3, #2
 80025bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80025c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80025c8:	2201      	movs	r2, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fe3c 	bl	8003248 <cfg_AddTxData>
 80025d0:	e23a      	b.n	8002a48 <cfg_Task+0x78c>
 80025d2:	bf00      	nop
 80025d4:	20000380 	.word	0x20000380
 80025d8:	200009b8 	.word	0x200009b8
 80025dc:	200009c0 	.word	0x200009c0
 80025e0:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 80025e4:	4ab0      	ldr	r2, [pc, #704]	; (80028a8 <cfg_Task+0x5ec>)
 80025e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	f203 2319 	addw	r3, r3, #537	; 0x219
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	f040 80a8 	bne.w	8002750 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002602:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	f203 2316 	addw	r3, r3, #534	; 0x216
 800260e:	4aa6      	ldr	r2, [pc, #664]	; (80028a8 <cfg_Task+0x5ec>)
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 800261c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800262a:	4a9f      	ldr	r2, [pc, #636]	; (80028a8 <cfg_Task+0x5ec>)
 800262c:	4413      	add	r3, r2
 800262e:	3304      	adds	r3, #4
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8002638:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fc09 	bl	8001e54 <cfg_GetNode>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05e      	beq.n	8002706 <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8002648:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fc01 	bl	8001e54 <cfg_GetNode>
 8002652:	4603      	mov	r3, r0
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 800265a:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800265e:	1d39      	adds	r1, r7, #4
 8002660:	4798      	blx	r3
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d129      	bne.n	80026bc <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266a:	b29b      	uxth	r3, r3
 800266c:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002670:	2202      	movs	r2, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fde8 	bl	8003248 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800267a:	b29b      	uxth	r3, r3
 800267c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002680:	2202      	movs	r2, #2
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fde0 	bl	8003248 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 8002688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268a:	b29b      	uxth	r3, r3
 800268c:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8002690:	2202      	movs	r2, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fdd8 	bl	8003248 <cfg_AddTxData>
						name_len = strlen(name) + 1;
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd fd9c 	bl	80001d8 <strlen>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 80026aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80026b2:	1d39      	adds	r1, r7, #4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fdc7 	bl	8003248 <cfg_AddTxData>
 80026ba:	e1c5      	b.n	8002a48 <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 80026bc:	4a7a      	ldr	r2, [pc, #488]	; (80028a8 <cfg_Task+0x5ec>)
 80026be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	4a73      	ldr	r2, [pc, #460]	; (80028a8 <cfg_Task+0x5ec>)
 80026da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026dc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80026ea:	4602      	mov	r2, r0
 80026ec:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 80026ee:	2304      	movs	r3, #4
 80026f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80026f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80026fc:	2201      	movs	r2, #1
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fda2 	bl	8003248 <cfg_AddTxData>
 8002704:	e1a0      	b.n	8002a48 <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002706:	4a68      	ldr	r2, [pc, #416]	; (80028a8 <cfg_Task+0x5ec>)
 8002708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002720:	b2d8      	uxtb	r0, r3
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <cfg_Task+0x5ec>)
 8002724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002726:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002734:	4602      	mov	r2, r0
 8002736:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002738:	2303      	movs	r3, #3
 800273a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 800273e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002740:	b29b      	uxth	r3, r3
 8002742:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002746:	2201      	movs	r2, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fd7d 	bl	8003248 <cfg_AddTxData>
 800274e:	e17b      	b.n	8002a48 <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8002750:	4a55      	ldr	r2, [pc, #340]	; (80028a8 <cfg_Task+0x5ec>)
 8002752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002754:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b10      	cmp	r3, #16
 8002768:	f040 80a0 	bne.w	80028ac <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 800276c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	f203 2316 	addw	r3, r3, #534	; 0x216
 800277a:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <cfg_Task+0x5ec>)
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002796:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <cfg_Task+0x5ec>)
 8002798:	4413      	add	r3, r2
 800279a:	3304      	adds	r3, #4
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 80027a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	f203 231a 	addw	r3, r3, #538	; 0x21a
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <cfg_Task+0x5ec>)
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 80027c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb45 	bl	8001e54 <cfg_GetNode>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d046      	beq.n	800285e <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 80027d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	f107 0152 	add.w	r1, r7, #82	; 0x52
 80027d8:	2202      	movs	r2, #2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fd34 	bl	8003248 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80027e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80027e8:	2202      	movs	r2, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fd2c 	bl	8003248 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80027f6:	e021      	b.n	800283c <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 80027f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb29 	bl	8001e54 <cfg_GetNode>
 8002802:	4603      	mov	r3, r0
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800280a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800280e:	440a      	add	r2, r1
 8002810:	b292      	uxth	r2, r2
 8002812:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002816:	4610      	mov	r0, r2
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d114      	bne.n	800284a <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002822:	b29b      	uxth	r3, r3
 8002824:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002828:	2204      	movs	r2, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd0c 	bl	8003248 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002830:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002834:	3301      	adds	r3, #1
 8002836:	b29b      	uxth	r3, r3
 8002838:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800283c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002840:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002844:	429a      	cmp	r2, r3
 8002846:	d3d7      	bcc.n	80027f8 <cfg_Task+0x53c>
 8002848:	e000      	b.n	800284c <cfg_Task+0x590>
						}
						else{
							break;
 800284a:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800284c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284e:	b298      	uxth	r0, r3
 8002850:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002854:	2302      	movs	r3, #2
 8002856:	2109      	movs	r1, #9
 8002858:	f000 fd48 	bl	80032ec <cfg_IntertTxData>
 800285c:	e0f4      	b.n	8002a48 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <cfg_Task+0x5ec>)
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002878:	b2d8      	uxtb	r0, r3
 800287a:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <cfg_Task+0x5ec>)
 800287c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800288c:	4602      	mov	r2, r0
 800288e:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002890:	2303      	movs	r3, #3
 8002892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002898:	b29b      	uxth	r3, r3
 800289a:	f107 0157 	add.w	r1, r7, #87	; 0x57
 800289e:	2201      	movs	r2, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fcd1 	bl	8003248 <cfg_AddTxData>
 80028a6:	e0cf      	b.n	8002a48 <cfg_Task+0x78c>
 80028a8:	20000380 	.word	0x20000380
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 80028ac:	4a8e      	ldr	r2, [pc, #568]	; (8002ae8 <cfg_Task+0x82c>)
 80028ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	f203 2319 	addw	r3, r3, #537	; 0x219
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b11      	cmp	r3, #17
 80028c4:	f040 80c0 	bne.w	8002a48 <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 80028c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ca:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	f203 2316 	addw	r3, r3, #534	; 0x216
 80028d6:	4a84      	ldr	r2, [pc, #528]	; (8002ae8 <cfg_Task+0x82c>)
 80028d8:	4413      	add	r3, r2
 80028da:	3304      	adds	r3, #4
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 80028e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80028f2:	4a7d      	ldr	r2, [pc, #500]	; (8002ae8 <cfg_Task+0x82c>)
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002902:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	f203 231a 	addw	r3, r3, #538	; 0x21a
 800290e:	4a76      	ldr	r2, [pc, #472]	; (8002ae8 <cfg_Task+0x82c>)
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 800291c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa97 	bl	8001e54 <cfg_GetNode>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d069      	beq.n	8002a00 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 800292c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292e:	b29b      	uxth	r3, r3
 8002930:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002934:	2202      	movs	r2, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fc86 	bl	8003248 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 800293c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293e:	b29b      	uxth	r3, r3
 8002940:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002944:	2202      	movs	r2, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fc7e 	bl	8003248 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800294c:	2300      	movs	r3, #0
 800294e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002952:	e046      	b.n	80029e2 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 8002954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002958:	3303      	adds	r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800295e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002962:	fb01 f202 	mul.w	r2, r1, r2
 8002966:	4413      	add	r3, r2
 8002968:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800296c:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <cfg_Task+0x82c>)
 800296e:	4413      	add	r3, r2
 8002970:	3304      	adds	r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8002976:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa6a 	bl	8001e54 <cfg_GetNode>
 8002980:	4603      	mov	r3, r0
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8002988:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800298c:	440a      	add	r2, r1
 800298e:	b292      	uxth	r2, r2
 8002990:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d127      	bne.n	80029ee <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 800299e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fa56 	bl	8001e54 <cfg_GetNode>
 80029a8:	4603      	mov	r3, r0
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80029b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80029b4:	440a      	add	r2, r1
 80029b6:	b292      	uxth	r2, r2
 80029b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029bc:	4610      	mov	r0, r2
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029ce:	2204      	movs	r2, #4
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fc39 	bl	8003248 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80029d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029da:	3301      	adds	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029e2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80029e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d3b2      	bcc.n	8002954 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	b298      	uxth	r0, r3
 80029f2:	f107 0246 	add.w	r2, r7, #70	; 0x46
 80029f6:	2302      	movs	r3, #2
 80029f8:	2109      	movs	r1, #9
 80029fa:	f000 fc77 	bl	80032ec <cfg_IntertTxData>
 80029fe:	e023      	b.n	8002a48 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002a00:	4a39      	ldr	r2, [pc, #228]	; (8002ae8 <cfg_Task+0x82c>)
 8002a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a04:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <cfg_Task+0x82c>)
 8002a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a20:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002a2e:	4602      	mov	r2, r0
 8002a30:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002a32:	2303      	movs	r3, #3
 8002a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002a40:	2201      	movs	r2, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fc00 	bl	8003248 <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <cfg_Task+0x82c>)
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 8002a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a68:	b298      	uxth	r0, r3
 8002a6a:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2104      	movs	r1, #4
 8002a72:	f000 fc3b 	bl	80032ec <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002a84:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <cfg_Task+0x82c>)
 8002a86:	441a      	add	r2, r3
 8002a88:	4917      	ldr	r1, [pc, #92]	; (8002ae8 <cfg_Task+0x82c>)
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002a90:	fb00 f303 	mul.w	r3, r0, r3
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 fdd7 	bl	8003654 <crc16_calc>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fbc6 	bl	8003248 <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 8002abc:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <cfg_Task+0x82c>)
 8002abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	f67f ac08 	bls.w	80022f0 <cfg_Task+0x34>
		}
	}

	return;
 8002ae0:	bf00      	nop
}
 8002ae2:	3764      	adds	r7, #100	; 0x64
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	20000380 	.word	0x20000380

08002aec <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 8002aec:	b5b0      	push	{r4, r5, r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	460a      	mov	r2, r1
 8002af6:	80fb      	strh	r3, [r7, #6]
 8002af8:	4613      	mov	r3, r2
 8002afa:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f200 8164 	bhi.w	8002dcc <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002b04:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002b06:	88fa      	ldrh	r2, [r7, #6]
 8002b08:	49b4      	ldr	r1, [pc, #720]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002b0a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002b0e:	fb00 f202 	mul.w	r2, r0, r2
 8002b12:	440a      	add	r2, r1
 8002b14:	3204      	adds	r2, #4
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	3201      	adds	r2, #1
 8002b1c:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002b20:	b2c9      	uxtb	r1, r1
 8002b22:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002b24:	49ad      	ldr	r1, [pc, #692]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002b26:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002b2a:	fb00 f202 	mul.w	r2, r0, r2
 8002b2e:	440a      	add	r2, r1
 8002b30:	3204      	adds	r2, #4
 8002b32:	4621      	mov	r1, r4
 8002b34:	8011      	strh	r1, [r2, #0]
 8002b36:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002b38:	4aa8      	ldr	r2, [pc, #672]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002b3a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	4403      	add	r3, r0
 8002b46:	3308      	adds	r3, #8
 8002b48:	797a      	ldrb	r2, [r7, #5]
 8002b4a:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4aa3      	ldr	r2, [pc, #652]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002b50:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d17b      	bne.n	8002c5a <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	4a9b      	ldr	r2, [pc, #620]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002b70:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	4999      	ldr	r1, [pc, #612]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002b76:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	440b      	add	r3, r1
 8002b80:	3304      	adds	r3, #4
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b04      	subs	r3, #4
 8002b88:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f000 f927 	bl	8002de4 <cfg_ringBufRead16b>
 8002b96:	4603      	mov	r3, r0
 8002b98:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	4a8d      	ldr	r2, [pc, #564]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002ba8:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	498b      	ldr	r1, [pc, #556]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002bae:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002bb2:	fb00 f303 	mul.w	r3, r0, r3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3304      	adds	r3, #4
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b02      	subs	r3, #2
 8002bc0:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f000 f90b 	bl	8002de4 <cfg_ringBufRead16b>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	f040 80f9 	bne.w	8002dd0 <cfg_RcvData+0x2e4>
 8002bde:	4b7f      	ldr	r3, [pc, #508]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002be0:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	893a      	ldrh	r2, [r7, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	f040 80f1 	bne.w	8002dd0 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	4a7a      	ldr	r2, [pc, #488]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002bf2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b04      	subs	r3, #4
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	b290      	uxth	r0, r2
 8002c0c:	4a73      	ldr	r2, [pc, #460]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002c0e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 8002c1e:	797b      	ldrb	r3, [r7, #5]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <cfg_RcvData+0x2f4>)
 8002c28:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 8002c2a:	797b      	ldrb	r3, [r7, #5]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	3205      	adds	r2, #5
 8002c32:	b290      	uxth	r0, r2
 8002c34:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002c36:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3306      	adds	r3, #6
 8002c42:	4602      	mov	r2, r0
 8002c44:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	4a64      	ldr	r2, [pc, #400]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002c4a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8002c58:	e0ba      	b.n	8002dd0 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	4a5f      	ldr	r2, [pc, #380]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002c5e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 80af 	bne.w	8002dd0 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 8002c72:	4b5b      	ldr	r3, [pc, #364]	; (8002de0 <cfg_RcvData+0x2f4>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	b291      	uxth	r1, r2
 8002c7a:	4a59      	ldr	r2, [pc, #356]	; (8002de0 <cfg_RcvData+0x2f4>)
 8002c7c:	8011      	strh	r1, [r2, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 80a8 	bne.w	8002dd4 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	4a55      	ldr	r2, [pc, #340]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002c88:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002ca4:	1898      	adds	r0, r3, r2
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002caa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b299      	uxth	r1, r3
 8002cba:	88fb      	ldrh	r3, [r7, #6]
					cfg_info.iface[iface].rx_buf.data_size, CFG_BUF_MASK);
 8002cbc:	4a47      	ldr	r2, [pc, #284]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002cbe:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8002cc2:	fb04 f303 	mul.w	r3, r4, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3306      	adds	r3, #6
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29a      	uxth	r2, r3
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 8002cce:	23ff      	movs	r3, #255	; 0xff
 8002cd0:	f000 fcea 	bl	80036a8 <crc16_RingBuf>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002ce6:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	493c      	ldr	r1, [pc, #240]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002cec:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 f86c 	bl	8002de4 <cfg_ringBufRead16b>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	89bb      	ldrh	r3, [r7, #12]
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d15c      	bne.n	8002dd0 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002d1a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d150      	bne.n	8002dd0 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8002d2e:	2300      	movs	r3, #0
 8002d30:	81fb      	strh	r3, [r7, #14]
 8002d32:	e028      	b.n	8002d86 <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8002d34:	88f8      	ldrh	r0, [r7, #6]
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002d3a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3302      	adds	r3, #2
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8002d56:	4c21      	ldr	r4, [pc, #132]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002d58:	f44f 7547 	mov.w	r5, #796	; 0x31c
 8002d5c:	fb05 f000 	mul.w	r0, r5, r0
 8002d60:	4420      	add	r0, r4
 8002d62:	4401      	add	r1, r0
 8002d64:	3108      	adds	r1, #8
 8002d66:	7809      	ldrb	r1, [r1, #0]
 8002d68:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 8002d6a:	491c      	ldr	r1, [pc, #112]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002d6c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002d70:	fb00 f202 	mul.w	r2, r0, r2
 8002d74:	440a      	add	r2, r1
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	3301      	adds	r3, #1
 8002d84:	81fb      	strh	r3, [r7, #14]
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002d8a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3306      	adds	r3, #6
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	89fa      	ldrh	r2, [r7, #14]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d3c9      	bcc.n	8002d34 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002da4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3306      	adds	r3, #6
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4610      	mov	r0, r2
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <cfg_RcvData+0x2f0>)
 8002dba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002dc8:	6018      	str	r0, [r3, #0]
	return;
 8002dca:	e001      	b.n	8002dd0 <cfg_RcvData+0x2e4>
		return;
 8002dcc:	bf00      	nop
 8002dce:	e002      	b.n	8002dd6 <cfg_RcvData+0x2ea>
	return;
 8002dd0:	bf00      	nop
 8002dd2:	e000      	b.n	8002dd6 <cfg_RcvData+0x2ea>
			return;
 8002dd4:	bf00      	nop
}
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bdb0      	pop	{r4, r5, r7, pc}
 8002ddc:	20000380 	.word	0x20000380
 8002de0:	200009d4 	.word	0x200009d4

08002de4 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8002dfe:	89fb      	ldrh	r3, [r7, #14]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	440b      	add	r3, r1
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002e12:	89fb      	ldrh	r3, [r7, #14]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8002e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002e32:	f102 020a 	add.w	r2, r2, #10
 8002e36:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002e3e:	f102 020e 	add.w	r2, r2, #14
 8002e42:	8013      	strh	r3, [r2, #0]
 8002e44:	e079      	b.n	8002f3a <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002e46:	2300      	movs	r3, #0
 8002e48:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002e4c:	f102 020c 	add.w	r2, r2, #12
 8002e50:	8013      	strh	r3, [r2, #0]
 8002e52:	e053      	b.n	8002efc <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002e54:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e58:	f103 030e 	add.w	r3, r3, #14
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	4981      	ldr	r1, [pc, #516]	; (8003064 <cfg_SaveSettings+0x244>)
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3310      	adds	r3, #16
 8002e6c:	681e      	ldr	r6, [r3, #0]
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	3b0e      	subs	r3, #14
 8002e74:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002e78:	f102 020c 	add.w	r2, r2, #12
 8002e7c:	8810      	ldrh	r0, [r2, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2100      	movs	r1, #0
 8002e82:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d028      	beq.n	8002ee6 <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 8002e94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002e98:	f103 030e 	add.w	r3, r3, #14
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	4971      	ldr	r1, [pc, #452]	; (8003064 <cfg_SaveSettings+0x244>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3308      	adds	r3, #8
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002eb2:	f103 030a 	add.w	r3, r3, #10
 8002eb6:	8819      	ldrh	r1, [r3, #0]
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	3b0c      	subs	r3, #12
 8002ebe:	0089      	lsls	r1, r1, #2
 8002ec0:	4419      	add	r1, r3
 8002ec2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ec6:	f103 030c 	add.w	r3, r3, #12
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4790      	blx	r2
				var_cnt += 1;
 8002ed0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002ed4:	f103 030a 	add.w	r3, r3, #10
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002ee0:	f102 020a 	add.w	r2, r2, #10
 8002ee4:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002ee6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002eea:	f103 030c 	add.w	r3, r3, #12
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002ef6:	f102 020c 	add.w	r2, r2, #12
 8002efa:	8013      	strh	r3, [r2, #0]
 8002efc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f00:	f103 030e 	add.w	r3, r3, #14
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	4957      	ldr	r1, [pc, #348]	; (8003064 <cfg_SaveSettings+0x244>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3304      	adds	r3, #4
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002f1a:	f102 020c 	add.w	r2, r2, #12
 8002f1e:	8812      	ldrh	r2, [r2, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d397      	bcc.n	8002e54 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 8002f24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f28:	f103 030e 	add.w	r3, r3, #14
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002f34:	f102 020e 	add.w	r2, r2, #14
 8002f38:	8013      	strh	r3, [r2, #0]
 8002f3a:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <cfg_SaveSettings+0x248>)
 8002f3c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002f46:	f102 020e 	add.w	r2, r2, #14
 8002f4a:	8812      	ldrh	r2, [r2, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f4ff af7a 	bcc.w	8002e46 <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8002f52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f56:	f103 030a 	add.w	r3, r3, #10
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d07a      	beq.n	8003056 <cfg_SaveSettings+0x236>
 8002f60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f64:	f103 030a 	add.w	r3, r3, #10
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d871      	bhi.n	8003056 <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 8002f72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f76:	f103 030a 	add.w	r3, r3, #10
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	3b0c      	subs	r3, #12
 8002f82:	4619      	mov	r1, r3
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 fbc7 	bl	8003718 <crc32_calc>
 8002f8a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002f8e:	f103 0304 	add.w	r3, r3, #4
 8002f92:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 8002f94:	f008 ff64 	bl	800be60 <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 8002f98:	2102      	movs	r1, #2
 8002f9a:	2007      	movs	r0, #7
 8002f9c:	f009 f8d2 	bl	800c144 <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 8002fa0:	4932      	ldr	r1, [pc, #200]	; (800306c <cfg_SaveSettings+0x24c>)
 8002fa2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002fa6:	f103 030a 	add.w	r3, r3, #10
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	469a      	mov	sl, r3
 8002fb0:	4693      	mov	fp, r2
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	465b      	mov	r3, fp
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	f008 fefe 	bl	800bdb8 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <cfg_SaveSettings+0x24c>)
 8002fbe:	1d19      	adds	r1, r3, #4
 8002fc0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002fc4:	f103 0304 	add.w	r3, r3, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4698      	mov	r8, r3
 8002fce:	4691      	mov	r9, r2
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f008 feef 	bl	800bdb8 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002fe0:	f102 020e 	add.w	r2, r2, #14
 8002fe4:	8013      	strh	r3, [r2, #0]
 8002fe6:	e027      	b.n	8003038 <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 8002fe8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002fec:	f103 030e 	add.w	r3, r3, #14
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <cfg_SaveSettings+0x24c>)
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	18d1      	adds	r1, r2, r3
 8002ffc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003000:	f103 030e 	add.w	r3, r3, #14
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	f107 0210 	add.w	r2, r7, #16
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8003012:	2200      	movs	r2, #0
 8003014:	461c      	mov	r4, r3
 8003016:	4615      	mov	r5, r2
 8003018:	4622      	mov	r2, r4
 800301a:	462b      	mov	r3, r5
 800301c:	2002      	movs	r0, #2
 800301e:	f008 fecb 	bl	800bdb8 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8003022:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003026:	f103 030e 	add.w	r3, r3, #14
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003032:	f102 020e 	add.w	r2, r2, #14
 8003036:	8013      	strh	r3, [r2, #0]
 8003038:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800303c:	f103 030e 	add.w	r3, r3, #14
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003046:	f103 030a 	add.w	r3, r3, #10
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3cb      	bcc.n	8002fe8 <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 8003050:	f008 ff28 	bl	800bea4 <HAL_FLASH_Lock>

	}

	return;
 8003054:	bf00      	nop
 8003056:	bf00      	nop
}
 8003058:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003064:	20000030 	.word	0x20000030
 8003068:	20000380 	.word	0x20000380
 800306c:	08060000 	.word	0x08060000

08003070 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 8003082:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <cfg_LoadSettings+0x14c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 8003088:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <cfg_LoadSettings+0x14c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808e 	beq.w	80031b2 <cfg_LoadSettings+0x142>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800309c:	4293      	cmp	r3, r2
 800309e:	f200 8088 	bhi.w	80031b2 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 80030a2:	2300      	movs	r3, #0
 80030a4:	82fb      	strh	r3, [r7, #22]
 80030a6:	e029      	b.n	80030fc <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80030a8:	2300      	movs	r3, #0
 80030aa:	82bb      	strh	r3, [r7, #20]
 80030ac:	e017      	b.n	80030de <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80030ae:	8afa      	ldrh	r2, [r7, #22]
 80030b0:	4943      	ldr	r1, [pc, #268]	; (80031c0 <cfg_LoadSettings+0x150>)
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	3310      	adds	r3, #16
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1dba      	adds	r2, r7, #6
 80030c2:	8ab8      	ldrh	r0, [r7, #20]
 80030c4:	2100      	movs	r1, #0
 80030c6:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <cfg_LoadSettings+0x68>
					var_cnt += 1;
 80030d2:	8a7b      	ldrh	r3, [r7, #18]
 80030d4:	3301      	adds	r3, #1
 80030d6:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80030d8:	8abb      	ldrh	r3, [r7, #20]
 80030da:	3301      	adds	r3, #1
 80030dc:	82bb      	strh	r3, [r7, #20]
 80030de:	8afa      	ldrh	r2, [r7, #22]
 80030e0:	4937      	ldr	r1, [pc, #220]	; (80031c0 <cfg_LoadSettings+0x150>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3304      	adds	r3, #4
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	8aba      	ldrh	r2, [r7, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3db      	bcc.n	80030ae <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 80030f6:	8afb      	ldrh	r3, [r7, #22]
 80030f8:	3301      	adds	r3, #1
 80030fa:	82fb      	strh	r3, [r7, #22]
 80030fc:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <cfg_LoadSettings+0x154>)
 80030fe:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8003102:	b29b      	uxth	r3, r3
 8003104:	8afa      	ldrh	r2, [r7, #22]
 8003106:	429a      	cmp	r2, r3
 8003108:	d3ce      	bcc.n	80030a8 <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 800310a:	8a7b      	ldrh	r3, [r7, #18]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	429a      	cmp	r2, r3
 8003110:	d14f      	bne.n	80031b2 <cfg_LoadSettings+0x142>
 8003112:	8a7b      	ldrh	r3, [r7, #18]
 8003114:	461a      	mov	r2, r3
 8003116:	492c      	ldr	r1, [pc, #176]	; (80031c8 <cfg_LoadSettings+0x158>)
 8003118:	2000      	movs	r0, #0
 800311a:	f000 fafd 	bl	8003718 <crc32_calc>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4293      	cmp	r3, r2
 8003124:	d145      	bne.n	80031b2 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 8003126:	2300      	movs	r3, #0
 8003128:	82fb      	strh	r3, [r7, #22]
 800312a:	e03a      	b.n	80031a2 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800312c:	2300      	movs	r3, #0
 800312e:	82bb      	strh	r3, [r7, #20]
 8003130:	e028      	b.n	8003184 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8003132:	8afa      	ldrh	r2, [r7, #22]
 8003134:	4922      	ldr	r1, [pc, #136]	; (80031c0 <cfg_LoadSettings+0x150>)
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3310      	adds	r3, #16
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1dba      	adds	r2, r7, #6
 8003146:	8ab8      	ldrh	r0, [r7, #20]
 8003148:	2100      	movs	r1, #0
 800314a:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 8003156:	8afa      	ldrh	r2, [r7, #22]
 8003158:	4919      	ldr	r1, [pc, #100]	; (80031c0 <cfg_LoadSettings+0x150>)
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	330c      	adds	r3, #12
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	8a3a      	ldrh	r2, [r7, #16]
 800316a:	3202      	adds	r2, #2
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	4913      	ldr	r1, [pc, #76]	; (80031bc <cfg_LoadSettings+0x14c>)
 8003170:	4411      	add	r1, r2
 8003172:	8aba      	ldrh	r2, [r7, #20]
 8003174:	4610      	mov	r0, r2
 8003176:	4798      	blx	r3
						load_var_cnt += 1;
 8003178:	8a3b      	ldrh	r3, [r7, #16]
 800317a:	3301      	adds	r3, #1
 800317c:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800317e:	8abb      	ldrh	r3, [r7, #20]
 8003180:	3301      	adds	r3, #1
 8003182:	82bb      	strh	r3, [r7, #20]
 8003184:	8afa      	ldrh	r2, [r7, #22]
 8003186:	490e      	ldr	r1, [pc, #56]	; (80031c0 <cfg_LoadSettings+0x150>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3304      	adds	r3, #4
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	8aba      	ldrh	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3ca      	bcc.n	8003132 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 800319c:	8afb      	ldrh	r3, [r7, #22]
 800319e:	3301      	adds	r3, #1
 80031a0:	82fb      	strh	r3, [r7, #22]
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <cfg_LoadSettings+0x154>)
 80031a4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	8afa      	ldrh	r2, [r7, #22]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3bd      	bcc.n	800312c <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
}
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	08060000 	.word	0x08060000
 80031c0:	20000030 	.word	0x20000030
 80031c4:	20000380 	.word	0x20000380
 80031c8:	08060008 	.word	0x08060008

080031cc <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 80031d0:	f008 fe46 	bl	800be60 <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 80031d4:	2102      	movs	r1, #2
 80031d6:	2006      	movs	r0, #6
 80031d8:	f008 ffb4 	bl	800c144 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 80031dc:	f008 fe62 	bl	800bea4 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 80031e0:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <cfg_ClearFwBuf+0x24>)
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <cfg_ClearFwBuf+0x28>)
 80031e4:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <cfg_ClearFwBuf+0x2c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

	return;
 80031ec:	bf00      	nop
}
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08040000 	.word	0x08040000
 80031f4:	200009cc 	.word	0x200009cc
 80031f8:	200009d0 	.word	0x200009d0

080031fc <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8003204:	f008 fe2c 	bl	800be60 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <cfg_WriteFwData+0x44>)
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	461c      	mov	r4, r3
 8003212:	4615      	mov	r5, r2
 8003214:	4622      	mov	r2, r4
 8003216:	462b      	mov	r3, r5
 8003218:	2002      	movs	r0, #2
 800321a:	f008 fdcd 	bl	800bdb8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800321e:	f008 fe41 	bl	800bea4 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <cfg_WriteFwData+0x44>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3304      	adds	r3, #4
 8003228:	4a05      	ldr	r2, [pc, #20]	; (8003240 <cfg_WriteFwData+0x44>)
 800322a:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <cfg_WriteFwData+0x48>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3304      	adds	r3, #4
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <cfg_WriteFwData+0x48>)
 8003234:	6013      	str	r3, [r2, #0]

	return;
 8003236:	bf00      	nop
}
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bdb0      	pop	{r4, r5, r7, pc}
 800323e:	bf00      	nop
 8003240:	200009cc 	.word	0x200009cc
 8003244:	200009d0 	.word	0x200009d0

08003248 <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8003256:	89fb      	ldrh	r3, [r7, #14]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d83e      	bhi.n	80032da <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 800325c:	89fb      	ldrh	r3, [r7, #14]
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <cfg_AddTxData+0xa0>)
 8003260:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	d831      	bhi.n	80032de <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 800327a:	89fa      	ldrh	r2, [r7, #14]
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	491a      	ldr	r1, [pc, #104]	; (80032e8 <cfg_AddTxData+0xa0>)
 8003280:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003284:	fb00 f303 	mul.w	r3, r0, r3
 8003288:	440b      	add	r3, r1
 800328a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003294:	fb01 f202 	mul.w	r2, r1, r2
 8003298:	4413      	add	r3, r2
 800329a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <cfg_AddTxData+0xa0>)
 80032a0:	4413      	add	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f012 faea 	bl	8015880 <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <cfg_AddTxData+0xa0>)
 80032b0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	440a      	add	r2, r1
 80032c6:	4908      	ldr	r1, [pc, #32]	; (80032e8 <cfg_AddTxData+0xa0>)
 80032c8:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80032cc:	fb00 f303 	mul.w	r3, r0, r3
 80032d0:	440b      	add	r3, r1
 80032d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d6:	601a      	str	r2, [r3, #0]

	return;
 80032d8:	e002      	b.n	80032e0 <cfg_AddTxData+0x98>
		return;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <cfg_AddTxData+0x98>
		return;
 80032de:	bf00      	nop
}
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000380 	.word	0x20000380

080032ec <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b0c5      	sub	sp, #276	; 0x114
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4604      	mov	r4, r0
 80032f4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80032f8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 80032fc:	6001      	str	r1, [r0, #0]
 80032fe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003302:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8003306:	600a      	str	r2, [r1, #0]
 8003308:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800330c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003316:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800331a:	4622      	mov	r2, r4
 800331c:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 800331e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003322:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	f200 80c0 	bhi.w	80034ae <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 800332e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003332:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 800333a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800334e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003352:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	f200 80aa 	bhi.w	80034b2 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 800335e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2bff      	cmp	r3, #255	; 0xff
 800336a:	f200 80a4 	bhi.w	80034b6 <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 800336e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003372:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800337c:	fb03 f202 	mul.w	r2, r3, r2
 8003380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4413      	add	r3, r2
 800338c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003390:	4a4b      	ldr	r2, [pc, #300]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 8003392:	1899      	adds	r1, r3, r2
 8003394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003398:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 80033a0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80033a4:	fb00 f303 	mul.w	r3, r0, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1ad2      	subs	r2, r2, r3
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	4618      	mov	r0, r3
 80033c2:	f012 fa5d 	bl	8015880 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 80033c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033ca:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80033d4:	fb03 f202 	mul.w	r2, r3, r2
 80033d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80033e8:	4a35      	ldr	r2, [pc, #212]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 80033ea:	1898      	adds	r0, r3, r2
 80033ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033f0:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80033f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	f012 fa3e 	bl	8015880 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8003404:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003408:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003412:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8003416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800341a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	440b      	add	r3, r1
 8003424:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003428:	fb01 f202 	mul.w	r2, r1, r2
 800342c:	4413      	add	r3, r2
 800342e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 8003434:	1898      	adds	r0, r3, r2
 8003436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800343a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 8003442:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1ad2      	subs	r2, r2, r3
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	4619      	mov	r1, r3
 8003464:	f012 fa0c 	bl	8015880 <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8003468:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800346c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 8003474:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003488:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003492:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	440a      	add	r2, r1
 800349a:	4909      	ldr	r1, [pc, #36]	; (80034c0 <cfg_IntertTxData+0x1d4>)
 800349c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80034a0:	fb00 f303 	mul.w	r3, r0, r3
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034aa:	601a      	str	r2, [r3, #0]

	return;
 80034ac:	e004      	b.n	80034b8 <cfg_IntertTxData+0x1cc>
		return;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <cfg_IntertTxData+0x1cc>
		return;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <cfg_IntertTxData+0x1cc>
		return;
 80034b6:	bf00      	nop
}
 80034b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	20000380 	.word	0x20000380

080034c4 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0c2      	sub	sp, #264	; 0x108
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4602      	mov	r2, r0
 80034cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034d4:	6019      	str	r1, [r3, #0]
 80034d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034da:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80034de:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 80034e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034e4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <cfg_RemTxData+0x150>)
 80034ec:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003500:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d87f      	bhi.n	800360a <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 800350a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800350e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d078      	beq.n	800360a <cfg_RemTxData+0x146>
 8003518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800351c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <cfg_RemTxData+0x150>)
 8003524:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d068      	beq.n	800360a <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8003538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800353c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	4a34      	ldr	r2, [pc, #208]	; (8003614 <cfg_RemTxData+0x150>)
 8003544:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003558:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003562:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	1a8a      	subs	r2, r1, r2
 800356a:	492a      	ldr	r1, [pc, #168]	; (8003614 <cfg_RemTxData+0x150>)
 800356c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003570:	fb00 f303 	mul.w	r3, r0, r3
 8003574:	440b      	add	r3, r1
 8003576:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800357a:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 800357c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003580:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800358a:	fb03 f202 	mul.w	r2, r3, r2
 800358e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4413      	add	r3, r2
 800359a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <cfg_RemTxData+0x150>)
 80035a0:	1899      	adds	r1, r3, r2
 80035a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035a6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <cfg_RemTxData+0x150>)
 80035ae:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80035b2:	fb00 f303 	mul.w	r3, r0, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	f107 0308 	add.w	r3, r7, #8
 80035c2:	4618      	mov	r0, r3
 80035c4:	f012 f95c 	bl	8015880 <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 80035c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035cc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80035de:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <cfg_RemTxData+0x150>)
 80035e0:	1898      	adds	r0, r3, r2
 80035e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035e6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	4a09      	ldr	r2, [pc, #36]	; (8003614 <cfg_RemTxData+0x150>)
 80035ee:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	4619      	mov	r1, r3
 8003604:	f012 f93c 	bl	8015880 <memcpy>
	//free(tmp_buf);

	return;
 8003608:	e000      	b.n	800360c <cfg_RemTxData+0x148>
		return;
 800360a:	bf00      	nop
}
 800360c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000380 	.word	0x20000380

08003618 <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	2001      	movs	r0, #1
 8003628:	f005 fa04 	bl	8008a34 <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 800362c:	bf00      	nop
}
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <cfg_TxDataCh1USB>:

void cfg_TxDataCh1USB(uint8_t *data, uint32_t len)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	CDC_Transmit_FS(data, (uint16_t)len);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	4619      	mov	r1, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f011 fc97 	bl	8014f78 <CDC_Transmit_FS>
	//modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 800364a:	bf00      	nop
}
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8003664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003668:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800366a:	e00e      	b.n	800368a <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b29a      	uxth	r2, r3
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	b2d9      	uxtb	r1, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1c58      	adds	r0, r3, #1
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	404b      	eors	r3, r1
 8003680:	4908      	ldr	r1, [pc, #32]	; (80036a4 <crc16_calc+0x50>)
 8003682:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003686:	4053      	eors	r3, r2
 8003688:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	1e5a      	subs	r2, r3, #1
 800368e:	807a      	strh	r2, [r7, #2]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1eb      	bne.n	800366c <crc16_calc+0x18>
	return crc;
 8003694:	897b      	ldrh	r3, [r7, #10]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	08016368 	.word	0x08016368

080036a8 <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 80036c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c6:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 80036c8:	e017      	b.n	80036fa <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 80036ca:	8afb      	ldrh	r3, [r7, #22]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	8afb      	ldrh	r3, [r7, #22]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	4401      	add	r1, r0
 80036da:	7809      	ldrb	r1, [r1, #0]
 80036dc:	404b      	eors	r3, r1
 80036de:	490d      	ldr	r1, [pc, #52]	; (8003714 <crc16_RingBuf+0x6c>)
 80036e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80036e4:	4053      	eors	r3, r2
 80036e6:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 80036e8:	897b      	ldrh	r3, [r7, #10]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	817b      	strh	r3, [r7, #10]
	while( len-- )
 80036fa:	893b      	ldrh	r3, [r7, #8]
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	813a      	strh	r2, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e2      	bne.n	80036ca <crc16_RingBuf+0x22>
	}
	return crc;
 8003704:	8afb      	ldrh	r3, [r7, #22]
}
 8003706:	4618      	mov	r0, r3
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	08016368 	.word	0x08016368

08003718 <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	80fb      	strh	r3, [r7, #6]
 8003724:	4613      	mov	r3, r2
 8003726:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	60fb      	str	r3, [r7, #12]
  while (len--)
 800372c:	e00f      	b.n	800374e <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	021a      	lsls	r2, r3, #8
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0e19      	lsrs	r1, r3, #24
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	404b      	eors	r3, r1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <crc32_calc+0x50>)
 8003740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003744:	4053      	eors	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
      buf++;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	3304      	adds	r3, #4
 800374c:	603b      	str	r3, [r7, #0]
  while (len--)
 800374e:	88bb      	ldrh	r3, [r7, #4]
 8003750:	1e5a      	subs	r2, r3, #1
 8003752:	80ba      	strh	r2, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ea      	bne.n	800372e <crc32_calc+0x16>
    }
  return crc;
 8003758:	68fb      	ldr	r3, [r7, #12]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	08016568 	.word	0x08016568

0800376c <leds_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void leds_Timer(uint32_t res)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
#ifdef NO_LEDS
	return;
#endif //NO_LEDS

	leds_time_counter += res;
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <leds_Timer+0x70>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	4a17      	ldr	r2, [pc, #92]	; (80037dc <leds_Timer+0x70>)
 800377e:	6013      	str	r3, [r2, #0]

	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e020      	b.n	80037c8 <leds_Timer+0x5c>
	{
		if( leds_info.leds[i].timer )
 8003786:	4916      	ldr	r1, [pc, #88]	; (80037e0 <leds_Timer+0x74>)
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	3304      	adds	r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d012      	beq.n	80037c2 <leds_Timer+0x56>
			leds_info.leds[i].timer--;
 800379c:	4910      	ldr	r1, [pc, #64]	; (80037e0 <leds_Timer+0x74>)
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	3304      	adds	r3, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1e59      	subs	r1, r3, #1
 80037b0:	480b      	ldr	r0, [pc, #44]	; (80037e0 <leds_Timer+0x74>)
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4403      	add	r3, r0
 80037be:	3304      	adds	r3, #4
 80037c0:	6019      	str	r1, [r3, #0]
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3301      	adds	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0db      	beq.n	8003786 <leds_Timer+0x1a>
	}
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20000a6c 	.word	0x20000a6c
 80037e0:	200009d8 	.word	0x200009d8

080037e4 <leds_InitTask>:
  * @param  None
  * @retval 1 if success, 0 if failed
  */
/**********************************************************************/
uint8_t leds_InitTask()
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	leds_info.leds[LED_SIM_BLUE].type = led_simple;
 80037ea:	4b8f      	ldr	r3, [pc, #572]	; (8003a28 <leds_InitTask+0x244>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
	leds_info.leds[LED_SIM_BLUE].sim_port = BLUE_LED_GPIO_Port;
 80037f0:	4b8d      	ldr	r3, [pc, #564]	; (8003a28 <leds_InitTask+0x244>)
 80037f2:	4a8e      	ldr	r2, [pc, #568]	; (8003a2c <leds_InitTask+0x248>)
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
	leds_info.leds[LED_SIM_BLUE].sim_pin = BLUE_LED_Pin;
 80037f6:	4b8c      	ldr	r3, [pc, #560]	; (8003a28 <leds_InitTask+0x244>)
 80037f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	//Initialize beginning state
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e362      	b.n	8003ecc <leds_InitTask+0x6e8>
	{
		//SIMPLE
		if( leds_info.leds[i].type == led_simple )
 8003806:	4988      	ldr	r1, [pc, #544]	; (8003a28 <leds_InitTask+0x244>)
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d12b      	bne.n	8003874 <leds_InitTask+0x90>
		{
			leds_info.leds[i].state = led_st0;
 800381c:	4982      	ldr	r1, [pc, #520]	; (8003a28 <leds_InitTask+0x244>)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	3301      	adds	r3, #1
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
			leds_info.leds[i].mode = led_toggle;
 8003830:	497d      	ldr	r1, [pc, #500]	; (8003a28 <leds_InitTask+0x244>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	3302      	adds	r3, #2
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8003844:	4978      	ldr	r1, [pc, #480]	; (8003a28 <leds_InitTask+0x244>)
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	333c      	adds	r3, #60	; 0x3c
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	4974      	ldr	r1, [pc, #464]	; (8003a28 <leds_InitTask+0x244>)
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	440b      	add	r3, r1
 8003864:	3340      	adds	r3, #64	; 0x40
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	2200      	movs	r2, #0
 800386c:	4619      	mov	r1, r3
 800386e:	f008 ff31 	bl	800c6d4 <HAL_GPIO_WritePin>
 8003872:	e328      	b.n	8003ec6 <leds_InitTask+0x6e2>
		}
		//PWM
		else if( leds_info.leds[i].type == led_pwm )
 8003874:	496c      	ldr	r1, [pc, #432]	; (8003a28 <leds_InitTask+0x244>)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	f040 80d2 	bne.w	8003a30 <leds_InitTask+0x24c>
		{
			if( leds_info.leds[i].pwmch0_tim != NULL )
 800388c:	4966      	ldr	r1, [pc, #408]	; (8003a28 <leds_InitTask+0x244>)
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	3344      	adds	r3, #68	; 0x44
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80c0 	beq.w	8003a24 <leds_InitTask+0x240>
			{
				leds_info.leds[i].state = led_st0;
 80038a4:	4960      	ldr	r1, [pc, #384]	; (8003a28 <leds_InitTask+0x244>)
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	3301      	adds	r3, #1
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].mode = led_toggle;
 80038b8:	495b      	ldr	r1, [pc, #364]	; (8003a28 <leds_InitTask+0x244>)
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	3302      	adds	r3, #2
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_value0 = LEDS_MIN_PWM_VALUE;
 80038cc:	4956      	ldr	r1, [pc, #344]	; (8003a28 <leds_InitTask+0x244>)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	330c      	adds	r3, #12
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_cur_value = (float)LEDS_MIN_PWM_VALUE;
 80038e0:	4951      	ldr	r1, [pc, #324]	; (8003a28 <leds_InitTask+0x244>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	3308      	adds	r3, #8
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch) != HAL_OK )
 80038f6:	494c      	ldr	r1, [pc, #304]	; (8003a28 <leds_InitTask+0x244>)
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	3344      	adds	r3, #68	; 0x44
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	4947      	ldr	r1, [pc, #284]	; (8003a28 <leds_InitTask+0x244>)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	3348      	adds	r3, #72	; 0x48
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	f00b fec6 	bl	800f6ac <HAL_TIM_PWM_Start>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <leds_InitTask+0x146>
				{
					return 0;
 8003926:	2300      	movs	r3, #0
 8003928:	e2d5      	b.n	8003ed6 <leds_InitTask+0x6f2>
				}
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
 800392a:	493f      	ldr	r1, [pc, #252]	; (8003a28 <leds_InitTask+0x244>)
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	3348      	adds	r3, #72	; 0x48
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d116      	bne.n	800396e <leds_InitTask+0x18a>
 8003940:	4939      	ldr	r1, [pc, #228]	; (8003a28 <leds_InitTask+0x244>)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	330c      	adds	r3, #12
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	b2d8      	uxtb	r0, r3
 8003954:	4934      	ldr	r1, [pc, #208]	; (8003a28 <leds_InitTask+0x244>)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	440b      	add	r3, r1
 8003962:	3344      	adds	r3, #68	; 0x44
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4602      	mov	r2, r0
 800396a:	635a      	str	r2, [r3, #52]	; 0x34
 800396c:	e2ab      	b.n	8003ec6 <leds_InitTask+0x6e2>
 800396e:	492e      	ldr	r1, [pc, #184]	; (8003a28 <leds_InitTask+0x244>)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	3348      	adds	r3, #72	; 0x48
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d116      	bne.n	80039b2 <leds_InitTask+0x1ce>
 8003984:	4928      	ldr	r1, [pc, #160]	; (8003a28 <leds_InitTask+0x244>)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	330c      	adds	r3, #12
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b2d8      	uxtb	r0, r3
 8003998:	4923      	ldr	r1, [pc, #140]	; (8003a28 <leds_InitTask+0x244>)
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	3344      	adds	r3, #68	; 0x44
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	6393      	str	r3, [r2, #56]	; 0x38
 80039b0:	e289      	b.n	8003ec6 <leds_InitTask+0x6e2>
 80039b2:	491d      	ldr	r1, [pc, #116]	; (8003a28 <leds_InitTask+0x244>)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	3348      	adds	r3, #72	; 0x48
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d116      	bne.n	80039f6 <leds_InitTask+0x212>
 80039c8:	4917      	ldr	r1, [pc, #92]	; (8003a28 <leds_InitTask+0x244>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	330c      	adds	r3, #12
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	b2d8      	uxtb	r0, r3
 80039dc:	4912      	ldr	r1, [pc, #72]	; (8003a28 <leds_InitTask+0x244>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	3344      	adds	r3, #68	; 0x44
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4603      	mov	r3, r0
 80039f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80039f4:	e267      	b.n	8003ec6 <leds_InitTask+0x6e2>
 80039f6:	490c      	ldr	r1, [pc, #48]	; (8003a28 <leds_InitTask+0x244>)
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	330c      	adds	r3, #12
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b2d8      	uxtb	r0, r3
 8003a0a:	4907      	ldr	r1, [pc, #28]	; (8003a28 <leds_InitTask+0x244>)
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	3344      	adds	r3, #68	; 0x44
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	e250      	b.n	8003ec6 <leds_InitTask+0x6e2>
			}
			else
			{
				return 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e256      	b.n	8003ed6 <leds_InitTask+0x6f2>
 8003a28:	200009d8 	.word	0x200009d8
 8003a2c:	40020800 	.word	0x40020800
			}
		}
		//RGB
		else if( leds_info.leds[i].type == led_rgb )
 8003a30:	49b7      	ldr	r1, [pc, #732]	; (8003d10 <leds_InitTask+0x52c>)
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	f040 823f 	bne.w	8003ec6 <leds_InitTask+0x6e2>
		{
			if( (leds_info.leds[i].pwmch0_tim != NULL) && (leds_info.leds[i].pwmch1_tim != NULL) && (leds_info.leds[i].pwmch2_tim != NULL) )
 8003a48:	49b1      	ldr	r1, [pc, #708]	; (8003d10 <leds_InitTask+0x52c>)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	3344      	adds	r3, #68	; 0x44
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8231 	beq.w	8003ec2 <leds_InitTask+0x6de>
 8003a60:	49ab      	ldr	r1, [pc, #684]	; (8003d10 <leds_InitTask+0x52c>)
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334c      	adds	r3, #76	; 0x4c
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8225 	beq.w	8003ec2 <leds_InitTask+0x6de>
 8003a78:	49a5      	ldr	r1, [pc, #660]	; (8003d10 <leds_InitTask+0x52c>)
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	3354      	adds	r3, #84	; 0x54
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8219 	beq.w	8003ec2 <leds_InitTask+0x6de>
			{
				leds_info.leds[i].state = led_st0;
 8003a90:	499f      	ldr	r1, [pc, #636]	; (8003d10 <leds_InitTask+0x52c>)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].mode = led_toggle;
 8003aa4:	499a      	ldr	r1, [pc, #616]	; (8003d10 <leds_InitTask+0x52c>)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_value0 = LEDS_MIN_PWM_VALUE;
 8003ab8:	4995      	ldr	r1, [pc, #596]	; (8003d10 <leds_InitTask+0x52c>)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8003acc:	4990      	ldr	r1, [pc, #576]	; (8003d10 <leds_InitTask+0x52c>)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	3308      	adds	r3, #8
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
				leds_info.leds[i].pwmch1_value0 = LEDS_MIN_PWM_VALUE;
 8003ae2:	498b      	ldr	r1, [pc, #556]	; (8003d10 <leds_InitTask+0x52c>)
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	3318      	adds	r3, #24
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch1_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8003af6:	4986      	ldr	r1, [pc, #536]	; (8003d10 <leds_InitTask+0x52c>)
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	3314      	adds	r3, #20
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
				leds_info.leds[i].pwmch2_value0 = LEDS_MIN_PWM_VALUE;
 8003b0c:	4980      	ldr	r1, [pc, #512]	; (8003d10 <leds_InitTask+0x52c>)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch2_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8003b20:	497b      	ldr	r1, [pc, #492]	; (8003d10 <leds_InitTask+0x52c>)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3320      	adds	r3, #32
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch) != HAL_OK )
 8003b36:	4976      	ldr	r1, [pc, #472]	; (8003d10 <leds_InitTask+0x52c>)
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	440b      	add	r3, r1
 8003b44:	3344      	adds	r3, #68	; 0x44
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	4971      	ldr	r1, [pc, #452]	; (8003d10 <leds_InitTask+0x52c>)
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	3348      	adds	r3, #72	; 0x48
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f00b fda6 	bl	800f6ac <HAL_TIM_PWM_Start>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <leds_InitTask+0x386>
				{
					return 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e1b5      	b.n	8003ed6 <leds_InitTask+0x6f2>
				}
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch1_tim, leds_info.leds[i].pwmch1_timch) != HAL_OK )
 8003b6a:	4969      	ldr	r1, [pc, #420]	; (8003d10 <leds_InitTask+0x52c>)
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	334c      	adds	r3, #76	; 0x4c
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	4964      	ldr	r1, [pc, #400]	; (8003d10 <leds_InitTask+0x52c>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	3350      	adds	r3, #80	; 0x50
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f00b fd8c 	bl	800f6ac <HAL_TIM_PWM_Start>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <leds_InitTask+0x3ba>
				{
					return 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e19b      	b.n	8003ed6 <leds_InitTask+0x6f2>
				}
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch2_tim, leds_info.leds[i].pwmch2_timch) != HAL_OK )
 8003b9e:	495c      	ldr	r1, [pc, #368]	; (8003d10 <leds_InitTask+0x52c>)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	3354      	adds	r3, #84	; 0x54
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4957      	ldr	r1, [pc, #348]	; (8003d10 <leds_InitTask+0x52c>)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3358      	adds	r3, #88	; 0x58
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f00b fd72 	bl	800f6ac <HAL_TIM_PWM_Start>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <leds_InitTask+0x3ee>
				{
					return 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e181      	b.n	8003ed6 <leds_InitTask+0x6f2>
				}
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
 8003bd2:	494f      	ldr	r1, [pc, #316]	; (8003d10 <leds_InitTask+0x52c>)
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3348      	adds	r3, #72	; 0x48
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d116      	bne.n	8003c16 <leds_InitTask+0x432>
 8003be8:	4949      	ldr	r1, [pc, #292]	; (8003d10 <leds_InitTask+0x52c>)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2d8      	uxtb	r0, r3
 8003bfc:	4944      	ldr	r1, [pc, #272]	; (8003d10 <leds_InitTask+0x52c>)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	3344      	adds	r3, #68	; 0x44
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4602      	mov	r2, r0
 8003c12:	635a      	str	r2, [r3, #52]	; 0x34
 8003c14:	e059      	b.n	8003cca <leds_InitTask+0x4e6>
 8003c16:	493e      	ldr	r1, [pc, #248]	; (8003d10 <leds_InitTask+0x52c>)
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	3348      	adds	r3, #72	; 0x48
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d116      	bne.n	8003c5a <leds_InitTask+0x476>
 8003c2c:	4938      	ldr	r1, [pc, #224]	; (8003d10 <leds_InitTask+0x52c>)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b2d8      	uxtb	r0, r3
 8003c40:	4933      	ldr	r1, [pc, #204]	; (8003d10 <leds_InitTask+0x52c>)
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3344      	adds	r3, #68	; 0x44
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	6393      	str	r3, [r2, #56]	; 0x38
 8003c58:	e037      	b.n	8003cca <leds_InitTask+0x4e6>
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <leds_InitTask+0x52c>)
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	440b      	add	r3, r1
 8003c68:	3348      	adds	r3, #72	; 0x48
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d116      	bne.n	8003c9e <leds_InitTask+0x4ba>
 8003c70:	4927      	ldr	r1, [pc, #156]	; (8003d10 <leds_InitTask+0x52c>)
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	330c      	adds	r3, #12
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	b2d8      	uxtb	r0, r3
 8003c84:	4922      	ldr	r1, [pc, #136]	; (8003d10 <leds_InitTask+0x52c>)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	440b      	add	r3, r1
 8003c92:	3344      	adds	r3, #68	; 0x44
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4603      	mov	r3, r0
 8003c9a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003c9c:	e015      	b.n	8003cca <leds_InitTask+0x4e6>
 8003c9e:	491c      	ldr	r1, [pc, #112]	; (8003d10 <leds_InitTask+0x52c>)
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	330c      	adds	r3, #12
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2d8      	uxtb	r0, r3
 8003cb2:	4917      	ldr	r1, [pc, #92]	; (8003d10 <leds_InitTask+0x52c>)
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3344      	adds	r3, #68	; 0x44
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim, leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value0);
 8003cca:	4911      	ldr	r1, [pc, #68]	; (8003d10 <leds_InitTask+0x52c>)
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3350      	adds	r3, #80	; 0x50
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d119      	bne.n	8003d14 <leds_InitTask+0x530>
 8003ce0:	490b      	ldr	r1, [pc, #44]	; (8003d10 <leds_InitTask+0x52c>)
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3318      	adds	r3, #24
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	b2d8      	uxtb	r0, r3
 8003cf4:	4906      	ldr	r1, [pc, #24]	; (8003d10 <leds_InitTask+0x52c>)
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	334c      	adds	r3, #76	; 0x4c
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4602      	mov	r2, r0
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0c:	e05c      	b.n	8003dc8 <leds_InitTask+0x5e4>
 8003d0e:	bf00      	nop
 8003d10:	200009d8 	.word	0x200009d8
 8003d14:	4972      	ldr	r1, [pc, #456]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	440b      	add	r3, r1
 8003d22:	3350      	adds	r3, #80	; 0x50
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d116      	bne.n	8003d58 <leds_InitTask+0x574>
 8003d2a:	496d      	ldr	r1, [pc, #436]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	3318      	adds	r3, #24
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	b2d8      	uxtb	r0, r3
 8003d3e:	4968      	ldr	r1, [pc, #416]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	334c      	adds	r3, #76	; 0x4c
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4603      	mov	r3, r0
 8003d54:	6393      	str	r3, [r2, #56]	; 0x38
 8003d56:	e037      	b.n	8003dc8 <leds_InitTask+0x5e4>
 8003d58:	4961      	ldr	r1, [pc, #388]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	440b      	add	r3, r1
 8003d66:	3350      	adds	r3, #80	; 0x50
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d116      	bne.n	8003d9c <leds_InitTask+0x5b8>
 8003d6e:	495c      	ldr	r1, [pc, #368]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b2d8      	uxtb	r0, r3
 8003d82:	4957      	ldr	r1, [pc, #348]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	334c      	adds	r3, #76	; 0x4c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4603      	mov	r3, r0
 8003d98:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003d9a:	e015      	b.n	8003dc8 <leds_InitTask+0x5e4>
 8003d9c:	4950      	ldr	r1, [pc, #320]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	440b      	add	r3, r1
 8003daa:	3318      	adds	r3, #24
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2d8      	uxtb	r0, r3
 8003db0:	494b      	ldr	r1, [pc, #300]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334c      	adds	r3, #76	; 0x4c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	6413      	str	r3, [r2, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim, leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value0);
 8003dc8:	4945      	ldr	r1, [pc, #276]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	4413      	add	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3358      	adds	r3, #88	; 0x58
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <leds_InitTask+0x628>
 8003dde:	4940      	ldr	r1, [pc, #256]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	4413      	add	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	3324      	adds	r3, #36	; 0x24
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2d8      	uxtb	r0, r3
 8003df2:	493b      	ldr	r1, [pc, #236]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	3354      	adds	r3, #84	; 0x54
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4602      	mov	r2, r0
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0a:	e05c      	b.n	8003ec6 <leds_InitTask+0x6e2>
 8003e0c:	4934      	ldr	r1, [pc, #208]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	3358      	adds	r3, #88	; 0x58
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d116      	bne.n	8003e50 <leds_InitTask+0x66c>
 8003e22:	492f      	ldr	r1, [pc, #188]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	440b      	add	r3, r1
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b2d8      	uxtb	r0, r3
 8003e36:	492a      	ldr	r1, [pc, #168]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	3354      	adds	r3, #84	; 0x54
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6393      	str	r3, [r2, #56]	; 0x38
 8003e4e:	e03a      	b.n	8003ec6 <leds_InitTask+0x6e2>
 8003e50:	4923      	ldr	r1, [pc, #140]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	4413      	add	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3358      	adds	r3, #88	; 0x58
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d116      	bne.n	8003e94 <leds_InitTask+0x6b0>
 8003e66:	491e      	ldr	r1, [pc, #120]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	440b      	add	r3, r1
 8003e74:	3324      	adds	r3, #36	; 0x24
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b2d8      	uxtb	r0, r3
 8003e7a:	4919      	ldr	r1, [pc, #100]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	3354      	adds	r3, #84	; 0x54
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4603      	mov	r3, r0
 8003e90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003e92:	e018      	b.n	8003ec6 <leds_InitTask+0x6e2>
 8003e94:	4912      	ldr	r1, [pc, #72]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b2d8      	uxtb	r0, r3
 8003ea8:	490d      	ldr	r1, [pc, #52]	; (8003ee0 <leds_InitTask+0x6fc>)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3354      	adds	r3, #84	; 0x54
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec0:	e001      	b.n	8003ec6 <leds_InitTask+0x6e2>
			}
			else
			{
				return 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e007      	b.n	8003ed6 <leds_InitTask+0x6f2>
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f43f ac99 	beq.w	8003806 <leds_InitTask+0x22>
			}
		}
	}

	return 1;
 8003ed4:	2301      	movs	r3, #1
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200009d8 	.word	0x200009d8

08003ee4 <leds_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void leds_Task(void)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
#ifdef NO_LEDS
	return;
#endif //NO_LEDS

	//Handle leds
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	f002 bdc6 	b.w	8006a7e <leds_Task+0x2b9a>
	{
		//Simple led
		//************************************************************************************************
		if( leds_info.leds[i].type == led_simple )
 8003ef2:	499e      	ldr	r1, [pc, #632]	; (800416c <leds_Task+0x288>)
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 8133 	bne.w	8004170 <leds_Task+0x28c>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 8003f0a:	4998      	ldr	r1, [pc, #608]	; (800416c <leds_Task+0x288>)
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	3302      	adds	r3, #2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	f042 85aa 	bne.w	8006a78 <leds_Task+0x2b94>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 8003f24:	4991      	ldr	r1, [pc, #580]	; (800416c <leds_Task+0x288>)
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	3301      	adds	r3, #1
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d164      	bne.n	8004006 <leds_Task+0x122>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 8003f3c:	498b      	ldr	r1, [pc, #556]	; (800416c <leds_Task+0x288>)
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f042 8592 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 8003f54:	4985      	ldr	r1, [pc, #532]	; (800416c <leds_Task+0x288>)
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	440b      	add	r3, r1
 8003f62:	3301      	adds	r3, #1
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
						if( leds_info.leds[i].pwmch0_value1 > 0 ) {
 8003f68:	4980      	ldr	r1, [pc, #512]	; (800416c <leds_Task+0x288>)
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	330d      	adds	r3, #13
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <leds_Task+0xcc>
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_SET);
 8003f80:	497a      	ldr	r1, [pc, #488]	; (800416c <leds_Task+0x288>)
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	4413      	add	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	440b      	add	r3, r1
 8003f8e:	333c      	adds	r3, #60	; 0x3c
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	4976      	ldr	r1, [pc, #472]	; (800416c <leds_Task+0x288>)
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3340      	adds	r3, #64	; 0x40
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f008 fb93 	bl	800c6d4 <HAL_GPIO_WritePin>
 8003fae:	e016      	b.n	8003fde <leds_Task+0xfa>
						}
						else {
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8003fb0:	496e      	ldr	r1, [pc, #440]	; (800416c <leds_Task+0x288>)
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	333c      	adds	r3, #60	; 0x3c
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	496a      	ldr	r1, [pc, #424]	; (800416c <leds_Task+0x288>)
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	3340      	adds	r3, #64	; 0x40
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f008 fb7b 	bl	800c6d4 <HAL_GPIO_WritePin>
						}
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8003fde:	4963      	ldr	r1, [pc, #396]	; (800416c <leds_Task+0x288>)
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	3330      	adds	r3, #48	; 0x30
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	485e      	ldr	r0, [pc, #376]	; (800416c <leds_Task+0x288>)
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4403      	add	r3, r0
 8003ffe:	3304      	adds	r3, #4
 8004000:	6019      	str	r1, [r3, #0]
 8004002:	f002 bd39 	b.w	8006a78 <leds_Task+0x2b94>
					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8004006:	4959      	ldr	r1, [pc, #356]	; (800416c <leds_Task+0x288>)
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	3301      	adds	r3, #1
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	f042 852c 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8004020:	4952      	ldr	r1, [pc, #328]	; (800416c <leds_Task+0x288>)
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3304      	adds	r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f042 8520 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 8004038:	494c      	ldr	r1, [pc, #304]	; (800416c <leds_Task+0x288>)
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	440b      	add	r3, r1
 8004046:	3301      	adds	r3, #1
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
						if( leds_info.leds[i].pwmch0_value0 > 0 ) {
 800404c:	4947      	ldr	r1, [pc, #284]	; (800416c <leds_Task+0x288>)
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	330c      	adds	r3, #12
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d017      	beq.n	8004094 <leds_Task+0x1b0>
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_SET);
 8004064:	4941      	ldr	r1, [pc, #260]	; (800416c <leds_Task+0x288>)
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	440b      	add	r3, r1
 8004072:	333c      	adds	r3, #60	; 0x3c
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	493d      	ldr	r1, [pc, #244]	; (800416c <leds_Task+0x288>)
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	440b      	add	r3, r1
 8004084:	3340      	adds	r3, #64	; 0x40
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	2201      	movs	r2, #1
 800408c:	4619      	mov	r1, r3
 800408e:	f008 fb21 	bl	800c6d4 <HAL_GPIO_WritePin>
 8004092:	e016      	b.n	80040c2 <leds_Task+0x1de>
						}
						else {
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8004094:	4935      	ldr	r1, [pc, #212]	; (800416c <leds_Task+0x288>)
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	333c      	adds	r3, #60	; 0x3c
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	4931      	ldr	r1, [pc, #196]	; (800416c <leds_Task+0x288>)
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	3340      	adds	r3, #64	; 0x40
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2200      	movs	r2, #0
 80040bc:	4619      	mov	r1, r3
 80040be:	f008 fb09 	bl	800c6d4 <HAL_GPIO_WritePin>
						}
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 80040c2:	492a      	ldr	r1, [pc, #168]	; (800416c <leds_Task+0x288>)
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	3334      	adds	r3, #52	; 0x34
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d80a      	bhi.n	80040ee <leds_Task+0x20a>
 80040d8:	4924      	ldr	r1, [pc, #144]	; (800416c <leds_Task+0x288>)
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	3334      	adds	r3, #52	; 0x34
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d131      	bne.n	8004152 <leds_Task+0x26e>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 80040ee:	491f      	ldr	r1, [pc, #124]	; (800416c <leds_Task+0x288>)
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	3334      	adds	r3, #52	; 0x34
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d912      	bls.n	800412a <leds_Task+0x246>
								leds_info.leds[i].loop_cnt--;
 8004104:	4919      	ldr	r1, [pc, #100]	; (800416c <leds_Task+0x288>)
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	440b      	add	r3, r1
 8004112:	3334      	adds	r3, #52	; 0x34
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	1e59      	subs	r1, r3, #1
 8004118:	4814      	ldr	r0, [pc, #80]	; (800416c <leds_Task+0x288>)
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4403      	add	r3, r0
 8004126:	3334      	adds	r3, #52	; 0x34
 8004128:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 800412a:	4910      	ldr	r1, [pc, #64]	; (800416c <leds_Task+0x288>)
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	332c      	adds	r3, #44	; 0x2c
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	480b      	ldr	r0, [pc, #44]	; (800416c <leds_Task+0x288>)
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4403      	add	r3, r0
 800414a:	3304      	adds	r3, #4
 800414c:	6019      	str	r1, [r3, #0]
 800414e:	f002 bc93 	b.w	8006a78 <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 8004152:	4906      	ldr	r1, [pc, #24]	; (800416c <leds_Task+0x288>)
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	3302      	adds	r3, #2
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	f002 bc87 	b.w	8006a78 <leds_Task+0x2b94>
 800416a:	bf00      	nop
 800416c:	200009d8 	.word	0x200009d8
				}
			}
		}
		//PWM led
		//************************************************************************************************
		else if( leds_info.leds[i].type == led_pwm )
 8004170:	49b1      	ldr	r1, [pc, #708]	; (8004438 <leds_Task+0x554>)
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	f040 863a 	bne.w	8004dfc <leds_Task+0xf18>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 8004188:	49ab      	ldr	r1, [pc, #684]	; (8004438 <leds_Task+0x554>)
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4413      	add	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	3302      	adds	r3, #2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	f040 81db 	bne.w	8004558 <leds_Task+0x674>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 80041a2:	49a5      	ldr	r1, [pc, #660]	; (8004438 <leds_Task+0x554>)
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	3301      	adds	r3, #1
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 80be 	bne.w	8004338 <leds_Task+0x454>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 80041bc:	499e      	ldr	r1, [pc, #632]	; (8004438 <leds_Task+0x554>)
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	440b      	add	r3, r1
 80041ca:	3304      	adds	r3, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f042 8452 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 80041d4:	4998      	ldr	r1, [pc, #608]	; (8004438 <leds_Task+0x554>)
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	3301      	adds	r3, #1
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 80041e8:	4993      	ldr	r1, [pc, #588]	; (8004438 <leds_Task+0x554>)
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	440b      	add	r3, r1
 80041f6:	330d      	adds	r3, #13
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004204:	498c      	ldr	r1, [pc, #560]	; (8004438 <leds_Task+0x554>)
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	3308      	adds	r3, #8
 8004214:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004218:	4987      	ldr	r1, [pc, #540]	; (8004438 <leds_Task+0x554>)
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	440b      	add	r3, r1
 8004226:	3348      	adds	r3, #72	; 0x48
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <leds_Task+0x378>
 800422e:	4982      	ldr	r1, [pc, #520]	; (8004438 <leds_Task+0x554>)
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4613      	mov	r3, r2
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	440b      	add	r3, r1
 800423c:	330d      	adds	r3, #13
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2d8      	uxtb	r0, r3
 8004242:	497d      	ldr	r1, [pc, #500]	; (8004438 <leds_Task+0x554>)
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	4413      	add	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	440b      	add	r3, r1
 8004250:	3344      	adds	r3, #68	; 0x44
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4602      	mov	r2, r0
 8004258:	635a      	str	r2, [r3, #52]	; 0x34
 800425a:	e059      	b.n	8004310 <leds_Task+0x42c>
 800425c:	4976      	ldr	r1, [pc, #472]	; (8004438 <leds_Task+0x554>)
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	3348      	adds	r3, #72	; 0x48
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d116      	bne.n	80042a0 <leds_Task+0x3bc>
 8004272:	4971      	ldr	r1, [pc, #452]	; (8004438 <leds_Task+0x554>)
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	330d      	adds	r3, #13
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2d8      	uxtb	r0, r3
 8004286:	496c      	ldr	r1, [pc, #432]	; (8004438 <leds_Task+0x554>)
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	3344      	adds	r3, #68	; 0x44
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4603      	mov	r3, r0
 800429c:	6393      	str	r3, [r2, #56]	; 0x38
 800429e:	e037      	b.n	8004310 <leds_Task+0x42c>
 80042a0:	4965      	ldr	r1, [pc, #404]	; (8004438 <leds_Task+0x554>)
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	3348      	adds	r3, #72	; 0x48
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d116      	bne.n	80042e4 <leds_Task+0x400>
 80042b6:	4960      	ldr	r1, [pc, #384]	; (8004438 <leds_Task+0x554>)
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	330d      	adds	r3, #13
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b2d8      	uxtb	r0, r3
 80042ca:	495b      	ldr	r1, [pc, #364]	; (8004438 <leds_Task+0x554>)
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3344      	adds	r3, #68	; 0x44
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4603      	mov	r3, r0
 80042e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80042e2:	e015      	b.n	8004310 <leds_Task+0x42c>
 80042e4:	4954      	ldr	r1, [pc, #336]	; (8004438 <leds_Task+0x554>)
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	330d      	adds	r3, #13
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b2d8      	uxtb	r0, r3
 80042f8:	494f      	ldr	r1, [pc, #316]	; (8004438 <leds_Task+0x554>)
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	440b      	add	r3, r1
 8004306:	3344      	adds	r3, #68	; 0x44
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4603      	mov	r3, r0
 800430e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value1);
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8004310:	4949      	ldr	r1, [pc, #292]	; (8004438 <leds_Task+0x554>)
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	3330      	adds	r3, #48	; 0x30
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	4845      	ldr	r0, [pc, #276]	; (8004438 <leds_Task+0x554>)
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4403      	add	r3, r0
 8004330:	3304      	adds	r3, #4
 8004332:	6019      	str	r1, [r3, #0]
 8004334:	f002 bba0 	b.w	8006a78 <leds_Task+0x2b94>
					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8004338:	493f      	ldr	r1, [pc, #252]	; (8004438 <leds_Task+0x554>)
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	440b      	add	r3, r1
 8004346:	3301      	adds	r3, #1
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	f042 8393 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8004352:	4939      	ldr	r1, [pc, #228]	; (8004438 <leds_Task+0x554>)
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	3304      	adds	r3, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f042 8387 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 800436a:	4933      	ldr	r1, [pc, #204]	; (8004438 <leds_Task+0x554>)
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	3301      	adds	r3, #1
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 800437e:	492e      	ldr	r1, [pc, #184]	; (8004438 <leds_Task+0x554>)
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	330c      	adds	r3, #12
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	4927      	ldr	r1, [pc, #156]	; (8004438 <leds_Task+0x554>)
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	3308      	adds	r3, #8
 80043aa:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80043ae:	4922      	ldr	r1, [pc, #136]	; (8004438 <leds_Task+0x554>)
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	3348      	adds	r3, #72	; 0x48
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <leds_Task+0x50e>
 80043c4:	491c      	ldr	r1, [pc, #112]	; (8004438 <leds_Task+0x554>)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	440b      	add	r3, r1
 80043d2:	330c      	adds	r3, #12
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b2d8      	uxtb	r0, r3
 80043d8:	4917      	ldr	r1, [pc, #92]	; (8004438 <leds_Task+0x554>)
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3344      	adds	r3, #68	; 0x44
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4602      	mov	r2, r0
 80043ee:	635a      	str	r2, [r3, #52]	; 0x34
 80043f0:	e05c      	b.n	80044ac <leds_Task+0x5c8>
 80043f2:	4911      	ldr	r1, [pc, #68]	; (8004438 <leds_Task+0x554>)
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	440b      	add	r3, r1
 8004400:	3348      	adds	r3, #72	; 0x48
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d119      	bne.n	800443c <leds_Task+0x558>
 8004408:	490b      	ldr	r1, [pc, #44]	; (8004438 <leds_Task+0x554>)
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	330c      	adds	r3, #12
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2d8      	uxtb	r0, r3
 800441c:	4906      	ldr	r1, [pc, #24]	; (8004438 <leds_Task+0x554>)
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	440b      	add	r3, r1
 800442a:	3344      	adds	r3, #68	; 0x44
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4603      	mov	r3, r0
 8004432:	6393      	str	r3, [r2, #56]	; 0x38
 8004434:	e03a      	b.n	80044ac <leds_Task+0x5c8>
 8004436:	bf00      	nop
 8004438:	200009d8 	.word	0x200009d8
 800443c:	4945      	ldr	r1, [pc, #276]	; (8004554 <leds_Task+0x670>)
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	3348      	adds	r3, #72	; 0x48
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b08      	cmp	r3, #8
 8004450:	d116      	bne.n	8004480 <leds_Task+0x59c>
 8004452:	4940      	ldr	r1, [pc, #256]	; (8004554 <leds_Task+0x670>)
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	440b      	add	r3, r1
 8004460:	330c      	adds	r3, #12
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b2d8      	uxtb	r0, r3
 8004466:	493b      	ldr	r1, [pc, #236]	; (8004554 <leds_Task+0x670>)
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	440b      	add	r3, r1
 8004474:	3344      	adds	r3, #68	; 0x44
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4603      	mov	r3, r0
 800447c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800447e:	e015      	b.n	80044ac <leds_Task+0x5c8>
 8004480:	4934      	ldr	r1, [pc, #208]	; (8004554 <leds_Task+0x670>)
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	4413      	add	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	440b      	add	r3, r1
 800448e:	330c      	adds	r3, #12
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	b2d8      	uxtb	r0, r3
 8004494:	492f      	ldr	r1, [pc, #188]	; (8004554 <leds_Task+0x670>)
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	440b      	add	r3, r1
 80044a2:	3344      	adds	r3, #68	; 0x44
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4603      	mov	r3, r0
 80044aa:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 80044ac:	4929      	ldr	r1, [pc, #164]	; (8004554 <leds_Task+0x670>)
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	3334      	adds	r3, #52	; 0x34
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d80a      	bhi.n	80044d8 <leds_Task+0x5f4>
 80044c2:	4924      	ldr	r1, [pc, #144]	; (8004554 <leds_Task+0x670>)
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4413      	add	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	440b      	add	r3, r1
 80044d0:	3334      	adds	r3, #52	; 0x34
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d131      	bne.n	800453c <leds_Task+0x658>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 80044d8:	491e      	ldr	r1, [pc, #120]	; (8004554 <leds_Task+0x670>)
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	3334      	adds	r3, #52	; 0x34
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d912      	bls.n	8004514 <leds_Task+0x630>
								leds_info.leds[i].loop_cnt--;
 80044ee:	4919      	ldr	r1, [pc, #100]	; (8004554 <leds_Task+0x670>)
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3334      	adds	r3, #52	; 0x34
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1e59      	subs	r1, r3, #1
 8004502:	4814      	ldr	r0, [pc, #80]	; (8004554 <leds_Task+0x670>)
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4613      	mov	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4403      	add	r3, r0
 8004510:	3334      	adds	r3, #52	; 0x34
 8004512:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 8004514:	490f      	ldr	r1, [pc, #60]	; (8004554 <leds_Task+0x670>)
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	4413      	add	r3, r2
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	440b      	add	r3, r1
 8004522:	332c      	adds	r3, #44	; 0x2c
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	480b      	ldr	r0, [pc, #44]	; (8004554 <leds_Task+0x670>)
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4613      	mov	r3, r2
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4403      	add	r3, r0
 8004534:	3304      	adds	r3, #4
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	f002 ba9e 	b.w	8006a78 <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 800453c:	4905      	ldr	r1, [pc, #20]	; (8004554 <leds_Task+0x670>)
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	440b      	add	r3, r1
 800454a:	3302      	adds	r3, #2
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	f002 ba92 	b.w	8006a78 <leds_Task+0x2b94>
 8004554:	200009d8 	.word	0x200009d8
					}
				}
			}
			//Fade blink mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fadeblink )
 8004558:	49c1      	ldr	r1, [pc, #772]	; (8004860 <leds_Task+0x97c>)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	3302      	adds	r3, #2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	f040 8330 	bne.w	8004bd2 <leds_Task+0xcee>
			{
				//
				if( leds_info.leds[i].state == led_go_to_st1 )
 8004572:	49bb      	ldr	r1, [pc, #748]	; (8004860 <leds_Task+0x97c>)
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	3301      	adds	r3, #1
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b03      	cmp	r3, #3
 8004588:	f040 816e 	bne.w	8004868 <leds_Task+0x984>
				{
					if( leds_info.leds[i].timer == 0 )
 800458c:	49b4      	ldr	r1, [pc, #720]	; (8004860 <leds_Task+0x97c>)
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	3304      	adds	r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f042 826a 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 80045a4:	49ae      	ldr	r1, [pc, #696]	; (8004860 <leds_Task+0x97c>)
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	440b      	add	r3, r1
 80045b2:	3304      	adds	r3, #4
 80045b4:	2214      	movs	r2, #20
 80045b6:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 80045b8:	49a9      	ldr	r1, [pc, #676]	; (8004860 <leds_Task+0x97c>)
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	3310      	adds	r3, #16
 80045c8:	ed93 7a00 	vldr	s14, [r3]
 80045cc:	49a4      	ldr	r1, [pc, #656]	; (8004860 <leds_Task+0x97c>)
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	3308      	adds	r3, #8
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e4:	499e      	ldr	r1, [pc, #632]	; (8004860 <leds_Task+0x97c>)
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	440b      	add	r3, r1
 80045f2:	3308      	adds	r3, #8
 80045f4:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 80045f8:	4999      	ldr	r1, [pc, #612]	; (8004860 <leds_Task+0x97c>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4413      	add	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	440b      	add	r3, r1
 8004606:	3338      	adds	r3, #56	; 0x38
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	1e50      	subs	r0, r2, #1
 800460c:	4c94      	ldr	r4, [pc, #592]	; (8004860 <leds_Task+0x97c>)
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	460b      	mov	r3, r1
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	440b      	add	r3, r1
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4423      	add	r3, r4
 800461a:	3338      	adds	r3, #56	; 0x38
 800461c:	6018      	str	r0, [r3, #0]
 800461e:	2a00      	cmp	r2, #0
 8004620:	f040 8084 	bne.w	800472c <leds_Task+0x848>
						{
							leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8004624:	498e      	ldr	r1, [pc, #568]	; (8004860 <leds_Task+0x97c>)
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	440b      	add	r3, r1
 8004632:	330d      	adds	r3, #13
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	4987      	ldr	r1, [pc, #540]	; (8004860 <leds_Task+0x97c>)
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	440b      	add	r3, r1
 800464e:	3308      	adds	r3, #8
 8004650:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].state = led_go_to_st0;
 8004654:	4982      	ldr	r1, [pc, #520]	; (8004860 <leds_Task+0x97c>)
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	440b      	add	r3, r1
 8004662:	3301      	adds	r3, #1
 8004664:	2202      	movs	r2, #2
 8004666:	701a      	strb	r2, [r3, #0]
							leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st1 / LEDS_FADE_STEP_TIME;
 8004668:	497d      	ldr	r1, [pc, #500]	; (8004860 <leds_Task+0x97c>)
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	3330      	adds	r3, #48	; 0x30
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7a      	ldr	r2, [pc, #488]	; (8004864 <leds_Task+0x980>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0919      	lsrs	r1, r3, #4
 8004682:	4877      	ldr	r0, [pc, #476]	; (8004860 <leds_Task+0x97c>)
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4403      	add	r3, r0
 8004690:	3338      	adds	r3, #56	; 0x38
 8004692:	6019      	str	r1, [r3, #0]
							if( leds_info.leds[i].step_cnt == 0 )
 8004694:	4972      	ldr	r1, [pc, #456]	; (8004860 <leds_Task+0x97c>)
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	4413      	add	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	440b      	add	r3, r1
 80046a2:	3338      	adds	r3, #56	; 0x38
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <leds_Task+0x7da>
								leds_info.leds[i].step_cnt = 1;
 80046aa:	496d      	ldr	r1, [pc, #436]	; (8004860 <leds_Task+0x97c>)
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	440b      	add	r3, r1
 80046b8:	3338      	adds	r3, #56	; 0x38
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
							leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value0 - (float)leds_info.leds[i].pwmch0_value1) / (float)leds_info.leds[i].step_cnt;
 80046be:	4968      	ldr	r1, [pc, #416]	; (8004860 <leds_Task+0x97c>)
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	440b      	add	r3, r1
 80046cc:	330c      	adds	r3, #12
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046da:	4961      	ldr	r1, [pc, #388]	; (8004860 <leds_Task+0x97c>)
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	330d      	adds	r3, #13
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046fa:	4959      	ldr	r1, [pc, #356]	; (8004860 <leds_Task+0x97c>)
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	3338      	adds	r3, #56	; 0x38
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004718:	4951      	ldr	r1, [pc, #324]	; (8004860 <leds_Task+0x97c>)
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	3310      	adds	r3, #16
 8004728:	edc3 7a00 	vstr	s15, [r3]
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 800472c:	494c      	ldr	r1, [pc, #304]	; (8004860 <leds_Task+0x97c>)
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3348      	adds	r3, #72	; 0x48
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11d      	bne.n	800477e <leds_Task+0x89a>
 8004742:	4947      	ldr	r1, [pc, #284]	; (8004860 <leds_Task+0x97c>)
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	3308      	adds	r3, #8
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	edc7 7a01 	vstr	s15, [r7, #4]
 800475e:	793b      	ldrb	r3, [r7, #4]
 8004760:	b2d8      	uxtb	r0, r3
 8004762:	493f      	ldr	r1, [pc, #252]	; (8004860 <leds_Task+0x97c>)
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	3344      	adds	r3, #68	; 0x44
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4602      	mov	r2, r0
 8004778:	635a      	str	r2, [r3, #52]	; 0x34
 800477a:	f002 b97d 	b.w	8006a78 <leds_Task+0x2b94>
 800477e:	4938      	ldr	r1, [pc, #224]	; (8004860 <leds_Task+0x97c>)
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	440b      	add	r3, r1
 800478c:	3348      	adds	r3, #72	; 0x48
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d11d      	bne.n	80047d0 <leds_Task+0x8ec>
 8004794:	4932      	ldr	r1, [pc, #200]	; (8004860 <leds_Task+0x97c>)
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	3308      	adds	r3, #8
 80047a4:	edd3 7a00 	vldr	s15, [r3]
 80047a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80047b0:	793b      	ldrb	r3, [r7, #4]
 80047b2:	b2d8      	uxtb	r0, r3
 80047b4:	492a      	ldr	r1, [pc, #168]	; (8004860 <leds_Task+0x97c>)
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	3344      	adds	r3, #68	; 0x44
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	4603      	mov	r3, r0
 80047ca:	6393      	str	r3, [r2, #56]	; 0x38
 80047cc:	f002 b954 	b.w	8006a78 <leds_Task+0x2b94>
 80047d0:	4923      	ldr	r1, [pc, #140]	; (8004860 <leds_Task+0x97c>)
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	3348      	adds	r3, #72	; 0x48
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d11d      	bne.n	8004822 <leds_Task+0x93e>
 80047e6:	491e      	ldr	r1, [pc, #120]	; (8004860 <leds_Task+0x97c>)
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	4413      	add	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	3308      	adds	r3, #8
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8004802:	793b      	ldrb	r3, [r7, #4]
 8004804:	b2d8      	uxtb	r0, r3
 8004806:	4916      	ldr	r1, [pc, #88]	; (8004860 <leds_Task+0x97c>)
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	3344      	adds	r3, #68	; 0x44
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4603      	mov	r3, r0
 800481c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800481e:	f002 b92b 	b.w	8006a78 <leds_Task+0x2b94>
 8004822:	490f      	ldr	r1, [pc, #60]	; (8004860 <leds_Task+0x97c>)
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3308      	adds	r3, #8
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483a:	edc7 7a01 	vstr	s15, [r7, #4]
 800483e:	793b      	ldrb	r3, [r7, #4]
 8004840:	b2d8      	uxtb	r0, r3
 8004842:	4907      	ldr	r1, [pc, #28]	; (8004860 <leds_Task+0x97c>)
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	440b      	add	r3, r1
 8004850:	3344      	adds	r3, #68	; 0x44
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4603      	mov	r3, r0
 8004858:	6413      	str	r3, [r2, #64]	; 0x40
 800485a:	f002 b90d 	b.w	8006a78 <leds_Task+0x2b94>
 800485e:	bf00      	nop
 8004860:	200009d8 	.word	0x200009d8
 8004864:	cccccccd 	.word	0xcccccccd
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
					}
				}
				else if( leds_info.leds[i].state == led_go_to_st0 )
 8004868:	49b4      	ldr	r1, [pc, #720]	; (8004b3c <leds_Task+0xc58>)
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4413      	add	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	440b      	add	r3, r1
 8004876:	3301      	adds	r3, #1
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	f042 80fb 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8004882:	49ae      	ldr	r1, [pc, #696]	; (8004b3c <leds_Task+0xc58>)
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	440b      	add	r3, r1
 8004890:	3304      	adds	r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f042 80ef 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 800489a:	49a8      	ldr	r1, [pc, #672]	; (8004b3c <leds_Task+0xc58>)
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	440b      	add	r3, r1
 80048a8:	3304      	adds	r3, #4
 80048aa:	2214      	movs	r2, #20
 80048ac:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 80048ae:	49a3      	ldr	r1, [pc, #652]	; (8004b3c <leds_Task+0xc58>)
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	440b      	add	r3, r1
 80048bc:	3310      	adds	r3, #16
 80048be:	ed93 7a00 	vldr	s14, [r3]
 80048c2:	499e      	ldr	r1, [pc, #632]	; (8004b3c <leds_Task+0xc58>)
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	440b      	add	r3, r1
 80048d0:	3308      	adds	r3, #8
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048da:	4998      	ldr	r1, [pc, #608]	; (8004b3c <leds_Task+0xc58>)
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	3308      	adds	r3, #8
 80048ea:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 80048ee:	4993      	ldr	r1, [pc, #588]	; (8004b3c <leds_Task+0xc58>)
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	440b      	add	r3, r1
 80048fc:	3338      	adds	r3, #56	; 0x38
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	1e50      	subs	r0, r2, #1
 8004902:	4c8e      	ldr	r4, [pc, #568]	; (8004b3c <leds_Task+0xc58>)
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	460b      	mov	r3, r1
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	440b      	add	r3, r1
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4423      	add	r3, r4
 8004910:	3338      	adds	r3, #56	; 0x38
 8004912:	6018      	str	r0, [r3, #0]
 8004914:	2a00      	cmp	r2, #0
 8004916:	f040 80bf 	bne.w	8004a98 <leds_Task+0xbb4>
						{
							if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 800491a:	4988      	ldr	r1, [pc, #544]	; (8004b3c <leds_Task+0xc58>)
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	440b      	add	r3, r1
 8004928:	3334      	adds	r3, #52	; 0x34
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d80b      	bhi.n	8004948 <leds_Task+0xa64>
 8004930:	4982      	ldr	r1, [pc, #520]	; (8004b3c <leds_Task+0xc58>)
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	440b      	add	r3, r1
 800493e:	3334      	adds	r3, #52	; 0x34
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 80a3 	bne.w	8004a8e <leds_Task+0xbaa>
							{
								if( leds_info.leds[i].loop_cnt > 1 )
 8004948:	497c      	ldr	r1, [pc, #496]	; (8004b3c <leds_Task+0xc58>)
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	440b      	add	r3, r1
 8004956:	3334      	adds	r3, #52	; 0x34
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d912      	bls.n	8004984 <leds_Task+0xaa0>
									leds_info.leds[i].loop_cnt--;
 800495e:	4977      	ldr	r1, [pc, #476]	; (8004b3c <leds_Task+0xc58>)
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	3334      	adds	r3, #52	; 0x34
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1e59      	subs	r1, r3, #1
 8004972:	4872      	ldr	r0, [pc, #456]	; (8004b3c <leds_Task+0xc58>)
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4403      	add	r3, r0
 8004980:	3334      	adds	r3, #52	; 0x34
 8004982:	6019      	str	r1, [r3, #0]
								leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8004984:	496d      	ldr	r1, [pc, #436]	; (8004b3c <leds_Task+0xc58>)
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	330c      	adds	r3, #12
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a0:	4966      	ldr	r1, [pc, #408]	; (8004b3c <leds_Task+0xc58>)
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	3308      	adds	r3, #8
 80049b0:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].state = led_go_to_st1;
 80049b4:	4961      	ldr	r1, [pc, #388]	; (8004b3c <leds_Task+0xc58>)
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	440b      	add	r3, r1
 80049c2:	3301      	adds	r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	701a      	strb	r2, [r3, #0]
								leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st0 / LEDS_FADE_STEP_TIME;
 80049c8:	495c      	ldr	r1, [pc, #368]	; (8004b3c <leds_Task+0xc58>)
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4613      	mov	r3, r2
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	4413      	add	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	440b      	add	r3, r1
 80049d6:	332c      	adds	r3, #44	; 0x2c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a59      	ldr	r2, [pc, #356]	; (8004b40 <leds_Task+0xc5c>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	0919      	lsrs	r1, r3, #4
 80049e2:	4856      	ldr	r0, [pc, #344]	; (8004b3c <leds_Task+0xc58>)
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4403      	add	r3, r0
 80049f0:	3338      	adds	r3, #56	; 0x38
 80049f2:	6019      	str	r1, [r3, #0]
								if( leds_info.leds[i].step_cnt == 0 )
 80049f4:	4951      	ldr	r1, [pc, #324]	; (8004b3c <leds_Task+0xc58>)
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	3338      	adds	r3, #56	; 0x38
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <leds_Task+0xb3a>
									leds_info.leds[i].step_cnt = 1;
 8004a0a:	494c      	ldr	r1, [pc, #304]	; (8004b3c <leds_Task+0xc58>)
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	3338      	adds	r3, #56	; 0x38
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
								leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value1 - (float)leds_info.leds[i].pwmch0_value0) / (float)leds_info.leds[i].step_cnt;
 8004a1e:	4947      	ldr	r1, [pc, #284]	; (8004b3c <leds_Task+0xc58>)
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	330d      	adds	r3, #13
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a3a:	4940      	ldr	r1, [pc, #256]	; (8004b3c <leds_Task+0xc58>)
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	330c      	adds	r3, #12
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a5a:	4938      	ldr	r1, [pc, #224]	; (8004b3c <leds_Task+0xc58>)
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	4413      	add	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	440b      	add	r3, r1
 8004a68:	3338      	adds	r3, #56	; 0x38
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a78:	4930      	ldr	r1, [pc, #192]	; (8004b3c <leds_Task+0xc58>)
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3310      	adds	r3, #16
 8004a88:	edc3 7a00 	vstr	s15, [r3]
 8004a8c:	e004      	b.n	8004a98 <leds_Task+0xbb4>
							}
							else
								//leds_info.leds[i].mode = led_toggle;
								leds_setFade(i, 200, LEDS_MIN_PWM_VALUE);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	21c8      	movs	r1, #200	; 0xc8
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f002 fbde 	bl	8007254 <leds_setFade>
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004a98:	4928      	ldr	r1, [pc, #160]	; (8004b3c <leds_Task+0xc58>)
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	4413      	add	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3348      	adds	r3, #72	; 0x48
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11d      	bne.n	8004aea <leds_Task+0xc06>
 8004aae:	4923      	ldr	r1, [pc, #140]	; (8004b3c <leds_Task+0xc58>)
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	3308      	adds	r3, #8
 8004abe:	edd3 7a00 	vldr	s15, [r3]
 8004ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac6:	edc7 7a01 	vstr	s15, [r7, #4]
 8004aca:	793b      	ldrb	r3, [r7, #4]
 8004acc:	b2d8      	uxtb	r0, r3
 8004ace:	491b      	ldr	r1, [pc, #108]	; (8004b3c <leds_Task+0xc58>)
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	440b      	add	r3, r1
 8004adc:	3344      	adds	r3, #68	; 0x44
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ae6:	f001 bfc7 	b.w	8006a78 <leds_Task+0x2b94>
 8004aea:	4914      	ldr	r1, [pc, #80]	; (8004b3c <leds_Task+0xc58>)
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	3348      	adds	r3, #72	; 0x48
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d121      	bne.n	8004b44 <leds_Task+0xc60>
 8004b00:	490e      	ldr	r1, [pc, #56]	; (8004b3c <leds_Task+0xc58>)
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3308      	adds	r3, #8
 8004b10:	edd3 7a00 	vldr	s15, [r3]
 8004b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b18:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b1c:	793b      	ldrb	r3, [r7, #4]
 8004b1e:	b2d8      	uxtb	r0, r3
 8004b20:	4906      	ldr	r1, [pc, #24]	; (8004b3c <leds_Task+0xc58>)
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3344      	adds	r3, #68	; 0x44
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4603      	mov	r3, r0
 8004b36:	6393      	str	r3, [r2, #56]	; 0x38
 8004b38:	f001 bf9e 	b.w	8006a78 <leds_Task+0x2b94>
 8004b3c:	200009d8 	.word	0x200009d8
 8004b40:	cccccccd 	.word	0xcccccccd
 8004b44:	49ac      	ldr	r1, [pc, #688]	; (8004df8 <leds_Task+0xf14>)
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	4413      	add	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	440b      	add	r3, r1
 8004b52:	3348      	adds	r3, #72	; 0x48
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d11d      	bne.n	8004b96 <leds_Task+0xcb2>
 8004b5a:	49a7      	ldr	r1, [pc, #668]	; (8004df8 <leds_Task+0xf14>)
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	4413      	add	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	440b      	add	r3, r1
 8004b68:	3308      	adds	r3, #8
 8004b6a:	edd3 7a00 	vldr	s15, [r3]
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b76:	793b      	ldrb	r3, [r7, #4]
 8004b78:	b2d8      	uxtb	r0, r3
 8004b7a:	499f      	ldr	r1, [pc, #636]	; (8004df8 <leds_Task+0xf14>)
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	4413      	add	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	440b      	add	r3, r1
 8004b88:	3344      	adds	r3, #68	; 0x44
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4603      	mov	r3, r0
 8004b90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004b92:	f001 bf71 	b.w	8006a78 <leds_Task+0x2b94>
 8004b96:	4998      	ldr	r1, [pc, #608]	; (8004df8 <leds_Task+0xf14>)
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	4413      	add	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bae:	edc7 7a01 	vstr	s15, [r7, #4]
 8004bb2:	793b      	ldrb	r3, [r7, #4]
 8004bb4:	b2d8      	uxtb	r0, r3
 8004bb6:	4990      	ldr	r1, [pc, #576]	; (8004df8 <leds_Task+0xf14>)
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3344      	adds	r3, #68	; 0x44
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4603      	mov	r3, r0
 8004bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bce:	f001 bf53 	b.w	8006a78 <leds_Task+0x2b94>
					}
				}
			}
			//Fade mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fade )
 8004bd2:	4989      	ldr	r1, [pc, #548]	; (8004df8 <leds_Task+0xf14>)
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	440b      	add	r3, r1
 8004be0:	3302      	adds	r3, #2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	f041 8746 	bne.w	8006a78 <leds_Task+0x2b94>
			{
				if( leds_info.leds[i].timer == 0 )
 8004bec:	4982      	ldr	r1, [pc, #520]	; (8004df8 <leds_Task+0xf14>)
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	4413      	add	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f041 873a 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8004c04:	497c      	ldr	r1, [pc, #496]	; (8004df8 <leds_Task+0xf14>)
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	440b      	add	r3, r1
 8004c12:	3304      	adds	r3, #4
 8004c14:	2214      	movs	r2, #20
 8004c16:	601a      	str	r2, [r3, #0]
					leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8004c18:	4977      	ldr	r1, [pc, #476]	; (8004df8 <leds_Task+0xf14>)
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	4413      	add	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	440b      	add	r3, r1
 8004c26:	3310      	adds	r3, #16
 8004c28:	ed93 7a00 	vldr	s14, [r3]
 8004c2c:	4972      	ldr	r1, [pc, #456]	; (8004df8 <leds_Task+0xf14>)
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4613      	mov	r3, r2
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	4413      	add	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	440b      	add	r3, r1
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	edd3 7a00 	vldr	s15, [r3]
 8004c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c44:	496c      	ldr	r1, [pc, #432]	; (8004df8 <leds_Task+0xf14>)
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	4413      	add	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	440b      	add	r3, r1
 8004c52:	3308      	adds	r3, #8
 8004c54:	edc3 7a00 	vstr	s15, [r3]
					if( leds_info.leds[i].step_cnt-- == 0 )
 8004c58:	4967      	ldr	r1, [pc, #412]	; (8004df8 <leds_Task+0xf14>)
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	440b      	add	r3, r1
 8004c66:	3338      	adds	r3, #56	; 0x38
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	1e50      	subs	r0, r2, #1
 8004c6c:	4c62      	ldr	r4, [pc, #392]	; (8004df8 <leds_Task+0xf14>)
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	460b      	mov	r3, r1
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	440b      	add	r3, r1
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4423      	add	r3, r4
 8004c7a:	3338      	adds	r3, #56	; 0x38
 8004c7c:	6018      	str	r0, [r3, #0]
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d121      	bne.n	8004cc6 <leds_Task+0xde2>
					{
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8004c82:	495d      	ldr	r1, [pc, #372]	; (8004df8 <leds_Task+0xf14>)
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	440b      	add	r3, r1
 8004c90:	330d      	adds	r3, #13
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	4956      	ldr	r1, [pc, #344]	; (8004df8 <leds_Task+0xf14>)
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	440b      	add	r3, r1
 8004cac:	3308      	adds	r3, #8
 8004cae:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].mode = led_toggle;
 8004cb2:	4951      	ldr	r1, [pc, #324]	; (8004df8 <leds_Task+0xf14>)
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004cc6:	494c      	ldr	r1, [pc, #304]	; (8004df8 <leds_Task+0xf14>)
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3348      	adds	r3, #72	; 0x48
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11d      	bne.n	8004d18 <leds_Task+0xe34>
 8004cdc:	4946      	ldr	r1, [pc, #280]	; (8004df8 <leds_Task+0xf14>)
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	440b      	add	r3, r1
 8004cea:	3308      	adds	r3, #8
 8004cec:	edd3 7a00 	vldr	s15, [r3]
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	edc7 7a01 	vstr	s15, [r7, #4]
 8004cf8:	793b      	ldrb	r3, [r7, #4]
 8004cfa:	b2d8      	uxtb	r0, r3
 8004cfc:	493e      	ldr	r1, [pc, #248]	; (8004df8 <leds_Task+0xf14>)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	3344      	adds	r3, #68	; 0x44
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4602      	mov	r2, r0
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34
 8004d14:	f001 beb0 	b.w	8006a78 <leds_Task+0x2b94>
 8004d18:	4937      	ldr	r1, [pc, #220]	; (8004df8 <leds_Task+0xf14>)
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	440b      	add	r3, r1
 8004d26:	3348      	adds	r3, #72	; 0x48
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d11d      	bne.n	8004d6a <leds_Task+0xe86>
 8004d2e:	4932      	ldr	r1, [pc, #200]	; (8004df8 <leds_Task+0xf14>)
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	4413      	add	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d46:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d4a:	793b      	ldrb	r3, [r7, #4]
 8004d4c:	b2d8      	uxtb	r0, r3
 8004d4e:	492a      	ldr	r1, [pc, #168]	; (8004df8 <leds_Task+0xf14>)
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3344      	adds	r3, #68	; 0x44
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4603      	mov	r3, r0
 8004d64:	6393      	str	r3, [r2, #56]	; 0x38
 8004d66:	f001 be87 	b.w	8006a78 <leds_Task+0x2b94>
 8004d6a:	4923      	ldr	r1, [pc, #140]	; (8004df8 <leds_Task+0xf14>)
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	440b      	add	r3, r1
 8004d78:	3348      	adds	r3, #72	; 0x48
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d11d      	bne.n	8004dbc <leds_Task+0xed8>
 8004d80:	491d      	ldr	r1, [pc, #116]	; (8004df8 <leds_Task+0xf14>)
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	4413      	add	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3308      	adds	r3, #8
 8004d90:	edd3 7a00 	vldr	s15, [r3]
 8004d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d98:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d9c:	793b      	ldrb	r3, [r7, #4]
 8004d9e:	b2d8      	uxtb	r0, r3
 8004da0:	4915      	ldr	r1, [pc, #84]	; (8004df8 <leds_Task+0xf14>)
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4613      	mov	r3, r2
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	4413      	add	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	440b      	add	r3, r1
 8004dae:	3344      	adds	r3, #68	; 0x44
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4603      	mov	r3, r0
 8004db6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004db8:	f001 be5e 	b.w	8006a78 <leds_Task+0x2b94>
 8004dbc:	490e      	ldr	r1, [pc, #56]	; (8004df8 <leds_Task+0xf14>)
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	440b      	add	r3, r1
 8004dca:	3308      	adds	r3, #8
 8004dcc:	edd3 7a00 	vldr	s15, [r3]
 8004dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd4:	edc7 7a01 	vstr	s15, [r7, #4]
 8004dd8:	793b      	ldrb	r3, [r7, #4]
 8004dda:	b2d8      	uxtb	r0, r3
 8004ddc:	4906      	ldr	r1, [pc, #24]	; (8004df8 <leds_Task+0xf14>)
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	440b      	add	r3, r1
 8004dea:	3344      	adds	r3, #68	; 0x44
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
 8004df4:	f001 be40 	b.w	8006a78 <leds_Task+0x2b94>
 8004df8:	200009d8 	.word	0x200009d8
				}
			}
		}
		//RGB led
		//************************************************************************************************
		else if( leds_info.leds[i].type == led_rgb )
 8004dfc:	49b2      	ldr	r1, [pc, #712]	; (80050c8 <leds_Task+0x11e4>)
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	f041 8632 	bne.w	8006a78 <leds_Task+0x2b94>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 8004e14:	49ac      	ldr	r1, [pc, #688]	; (80050c8 <leds_Task+0x11e4>)
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	440b      	add	r3, r1
 8004e22:	3302      	adds	r3, #2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	f040 842d 	bne.w	8005688 <leds_Task+0x17a4>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 8004e2e:	49a6      	ldr	r1, [pc, #664]	; (80050c8 <leds_Task+0x11e4>)
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 81e8 	bne.w	8005218 <leds_Task+0x1334>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 8004e48:	499f      	ldr	r1, [pc, #636]	; (80050c8 <leds_Task+0x11e4>)
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	4413      	add	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	440b      	add	r3, r1
 8004e56:	3304      	adds	r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f041 860c 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 8004e60:	4999      	ldr	r1, [pc, #612]	; (80050c8 <leds_Task+0x11e4>)
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3301      	adds	r3, #1
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8004e74:	4994      	ldr	r1, [pc, #592]	; (80050c8 <leds_Task+0x11e4>)
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	4413      	add	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	440b      	add	r3, r1
 8004e82:	330d      	adds	r3, #13
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e90:	498d      	ldr	r1, [pc, #564]	; (80050c8 <leds_Task+0x11e4>)
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8004ea4:	4988      	ldr	r1, [pc, #544]	; (80050c8 <leds_Task+0x11e4>)
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	4413      	add	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3319      	adds	r3, #25
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec0:	4981      	ldr	r1, [pc, #516]	; (80050c8 <leds_Task+0x11e4>)
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3314      	adds	r3, #20
 8004ed0:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8004ed4:	497c      	ldr	r1, [pc, #496]	; (80050c8 <leds_Task+0x11e4>)
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3325      	adds	r3, #37	; 0x25
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef0:	4975      	ldr	r1, [pc, #468]	; (80050c8 <leds_Task+0x11e4>)
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	440b      	add	r3, r1
 8004efe:	3320      	adds	r3, #32
 8004f00:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004f04:	4970      	ldr	r1, [pc, #448]	; (80050c8 <leds_Task+0x11e4>)
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	440b      	add	r3, r1
 8004f12:	3348      	adds	r3, #72	; 0x48
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <leds_Task+0x1064>
 8004f1a:	496b      	ldr	r1, [pc, #428]	; (80050c8 <leds_Task+0x11e4>)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	330d      	adds	r3, #13
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b2d8      	uxtb	r0, r3
 8004f2e:	4966      	ldr	r1, [pc, #408]	; (80050c8 <leds_Task+0x11e4>)
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4613      	mov	r3, r2
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3344      	adds	r3, #68	; 0x44
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4602      	mov	r2, r0
 8004f44:	635a      	str	r2, [r3, #52]	; 0x34
 8004f46:	e059      	b.n	8004ffc <leds_Task+0x1118>
 8004f48:	495f      	ldr	r1, [pc, #380]	; (80050c8 <leds_Task+0x11e4>)
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	3348      	adds	r3, #72	; 0x48
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d116      	bne.n	8004f8c <leds_Task+0x10a8>
 8004f5e:	495a      	ldr	r1, [pc, #360]	; (80050c8 <leds_Task+0x11e4>)
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4613      	mov	r3, r2
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	440b      	add	r3, r1
 8004f6c:	330d      	adds	r3, #13
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b2d8      	uxtb	r0, r3
 8004f72:	4955      	ldr	r1, [pc, #340]	; (80050c8 <leds_Task+0x11e4>)
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	3344      	adds	r3, #68	; 0x44
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4603      	mov	r3, r0
 8004f88:	6393      	str	r3, [r2, #56]	; 0x38
 8004f8a:	e037      	b.n	8004ffc <leds_Task+0x1118>
 8004f8c:	494e      	ldr	r1, [pc, #312]	; (80050c8 <leds_Task+0x11e4>)
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	4413      	add	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	440b      	add	r3, r1
 8004f9a:	3348      	adds	r3, #72	; 0x48
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d116      	bne.n	8004fd0 <leds_Task+0x10ec>
 8004fa2:	4949      	ldr	r1, [pc, #292]	; (80050c8 <leds_Task+0x11e4>)
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	330d      	adds	r3, #13
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b2d8      	uxtb	r0, r3
 8004fb6:	4944      	ldr	r1, [pc, #272]	; (80050c8 <leds_Task+0x11e4>)
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3344      	adds	r3, #68	; 0x44
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4603      	mov	r3, r0
 8004fcc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004fce:	e015      	b.n	8004ffc <leds_Task+0x1118>
 8004fd0:	493d      	ldr	r1, [pc, #244]	; (80050c8 <leds_Task+0x11e4>)
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	4413      	add	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	440b      	add	r3, r1
 8004fde:	330d      	adds	r3, #13
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b2d8      	uxtb	r0, r3
 8004fe4:	4938      	ldr	r1, [pc, #224]	; (80050c8 <leds_Task+0x11e4>)
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	4413      	add	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3344      	adds	r3, #68	; 0x44
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value1);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8004ffc:	4932      	ldr	r1, [pc, #200]	; (80050c8 <leds_Task+0x11e4>)
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	3350      	adds	r3, #80	; 0x50
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d116      	bne.n	8005040 <leds_Task+0x115c>
 8005012:	492d      	ldr	r1, [pc, #180]	; (80050c8 <leds_Task+0x11e4>)
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	3319      	adds	r3, #25
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2d8      	uxtb	r0, r3
 8005026:	4928      	ldr	r1, [pc, #160]	; (80050c8 <leds_Task+0x11e4>)
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	440b      	add	r3, r1
 8005034:	334c      	adds	r3, #76	; 0x4c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4602      	mov	r2, r0
 800503c:	635a      	str	r2, [r3, #52]	; 0x34
 800503e:	e05b      	b.n	80050f8 <leds_Task+0x1214>
 8005040:	4921      	ldr	r1, [pc, #132]	; (80050c8 <leds_Task+0x11e4>)
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	440b      	add	r3, r1
 800504e:	3350      	adds	r3, #80	; 0x50
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d116      	bne.n	8005084 <leds_Task+0x11a0>
 8005056:	491c      	ldr	r1, [pc, #112]	; (80050c8 <leds_Task+0x11e4>)
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	3319      	adds	r3, #25
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b2d8      	uxtb	r0, r3
 800506a:	4917      	ldr	r1, [pc, #92]	; (80050c8 <leds_Task+0x11e4>)
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	334c      	adds	r3, #76	; 0x4c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4603      	mov	r3, r0
 8005080:	6393      	str	r3, [r2, #56]	; 0x38
 8005082:	e039      	b.n	80050f8 <leds_Task+0x1214>
 8005084:	4910      	ldr	r1, [pc, #64]	; (80050c8 <leds_Task+0x11e4>)
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	4413      	add	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	440b      	add	r3, r1
 8005092:	3350      	adds	r3, #80	; 0x50
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d118      	bne.n	80050cc <leds_Task+0x11e8>
 800509a:	490b      	ldr	r1, [pc, #44]	; (80050c8 <leds_Task+0x11e4>)
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	440b      	add	r3, r1
 80050a8:	3319      	adds	r3, #25
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b2d8      	uxtb	r0, r3
 80050ae:	4906      	ldr	r1, [pc, #24]	; (80050c8 <leds_Task+0x11e4>)
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	440b      	add	r3, r1
 80050bc:	334c      	adds	r3, #76	; 0x4c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4603      	mov	r3, r0
 80050c4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80050c6:	e017      	b.n	80050f8 <leds_Task+0x1214>
 80050c8:	200009d8 	.word	0x200009d8
 80050cc:	49bb      	ldr	r1, [pc, #748]	; (80053bc <leds_Task+0x14d8>)
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	3319      	adds	r3, #25
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b2d8      	uxtb	r0, r3
 80050e0:	49b6      	ldr	r1, [pc, #728]	; (80053bc <leds_Task+0x14d8>)
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	334c      	adds	r3, #76	; 0x4c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4603      	mov	r3, r0
 80050f6:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value1);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 80050f8:	49b0      	ldr	r1, [pc, #704]	; (80053bc <leds_Task+0x14d8>)
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	440b      	add	r3, r1
 8005106:	3358      	adds	r3, #88	; 0x58
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d116      	bne.n	800513c <leds_Task+0x1258>
 800510e:	49ab      	ldr	r1, [pc, #684]	; (80053bc <leds_Task+0x14d8>)
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3325      	adds	r3, #37	; 0x25
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	b2d8      	uxtb	r0, r3
 8005122:	49a6      	ldr	r1, [pc, #664]	; (80053bc <leds_Task+0x14d8>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	3354      	adds	r3, #84	; 0x54
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4602      	mov	r2, r0
 8005138:	635a      	str	r2, [r3, #52]	; 0x34
 800513a:	e059      	b.n	80051f0 <leds_Task+0x130c>
 800513c:	499f      	ldr	r1, [pc, #636]	; (80053bc <leds_Task+0x14d8>)
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	3358      	adds	r3, #88	; 0x58
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b04      	cmp	r3, #4
 8005150:	d116      	bne.n	8005180 <leds_Task+0x129c>
 8005152:	499a      	ldr	r1, [pc, #616]	; (80053bc <leds_Task+0x14d8>)
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	3325      	adds	r3, #37	; 0x25
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2d8      	uxtb	r0, r3
 8005166:	4995      	ldr	r1, [pc, #596]	; (80053bc <leds_Task+0x14d8>)
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	440b      	add	r3, r1
 8005174:	3354      	adds	r3, #84	; 0x54
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4603      	mov	r3, r0
 800517c:	6393      	str	r3, [r2, #56]	; 0x38
 800517e:	e037      	b.n	80051f0 <leds_Task+0x130c>
 8005180:	498e      	ldr	r1, [pc, #568]	; (80053bc <leds_Task+0x14d8>)
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	440b      	add	r3, r1
 800518e:	3358      	adds	r3, #88	; 0x58
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b08      	cmp	r3, #8
 8005194:	d116      	bne.n	80051c4 <leds_Task+0x12e0>
 8005196:	4989      	ldr	r1, [pc, #548]	; (80053bc <leds_Task+0x14d8>)
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	3325      	adds	r3, #37	; 0x25
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b2d8      	uxtb	r0, r3
 80051aa:	4984      	ldr	r1, [pc, #528]	; (80053bc <leds_Task+0x14d8>)
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	3354      	adds	r3, #84	; 0x54
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4603      	mov	r3, r0
 80051c0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80051c2:	e015      	b.n	80051f0 <leds_Task+0x130c>
 80051c4:	497d      	ldr	r1, [pc, #500]	; (80053bc <leds_Task+0x14d8>)
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	3325      	adds	r3, #37	; 0x25
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b2d8      	uxtb	r0, r3
 80051d8:	4978      	ldr	r1, [pc, #480]	; (80053bc <leds_Task+0x14d8>)
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	440b      	add	r3, r1
 80051e6:	3354      	adds	r3, #84	; 0x54
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value1);
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 80051f0:	4972      	ldr	r1, [pc, #456]	; (80053bc <leds_Task+0x14d8>)
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3330      	adds	r3, #48	; 0x30
 8005200:	6819      	ldr	r1, [r3, #0]
 8005202:	486e      	ldr	r0, [pc, #440]	; (80053bc <leds_Task+0x14d8>)
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4403      	add	r3, r0
 8005210:	3304      	adds	r3, #4
 8005212:	6019      	str	r1, [r3, #0]
 8005214:	f001 bc30 	b.w	8006a78 <leds_Task+0x2b94>

					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8005218:	4968      	ldr	r1, [pc, #416]	; (80053bc <leds_Task+0x14d8>)
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3301      	adds	r3, #1
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	f041 8423 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8005232:	4962      	ldr	r1, [pc, #392]	; (80053bc <leds_Task+0x14d8>)
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	440b      	add	r3, r1
 8005240:	3304      	adds	r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f041 8417 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 800524a:	495c      	ldr	r1, [pc, #368]	; (80053bc <leds_Task+0x14d8>)
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4613      	mov	r3, r2
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	440b      	add	r3, r1
 8005258:	3301      	adds	r3, #1
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 800525e:	4957      	ldr	r1, [pc, #348]	; (80053bc <leds_Task+0x14d8>)
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	440b      	add	r3, r1
 800526c:	330c      	adds	r3, #12
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	4950      	ldr	r1, [pc, #320]	; (80053bc <leds_Task+0x14d8>)
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	440b      	add	r3, r1
 8005288:	3308      	adds	r3, #8
 800528a:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value0;
 800528e:	494b      	ldr	r1, [pc, #300]	; (80053bc <leds_Task+0x14d8>)
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	440b      	add	r3, r1
 800529c:	3318      	adds	r3, #24
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	4944      	ldr	r1, [pc, #272]	; (80053bc <leds_Task+0x14d8>)
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	3314      	adds	r3, #20
 80052ba:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value0;
 80052be:	493f      	ldr	r1, [pc, #252]	; (80053bc <leds_Task+0x14d8>)
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4613      	mov	r3, r2
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	440b      	add	r3, r1
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	4938      	ldr	r1, [pc, #224]	; (80053bc <leds_Task+0x14d8>)
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	3320      	adds	r3, #32
 80052ea:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80052ee:	4933      	ldr	r1, [pc, #204]	; (80053bc <leds_Task+0x14d8>)
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	3348      	adds	r3, #72	; 0x48
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d116      	bne.n	8005332 <leds_Task+0x144e>
 8005304:	492d      	ldr	r1, [pc, #180]	; (80053bc <leds_Task+0x14d8>)
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	4413      	add	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	440b      	add	r3, r1
 8005312:	330c      	adds	r3, #12
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	b2d8      	uxtb	r0, r3
 8005318:	4928      	ldr	r1, [pc, #160]	; (80053bc <leds_Task+0x14d8>)
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	3344      	adds	r3, #68	; 0x44
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4602      	mov	r2, r0
 800532e:	635a      	str	r2, [r3, #52]	; 0x34
 8005330:	e05c      	b.n	80053ec <leds_Task+0x1508>
 8005332:	4922      	ldr	r1, [pc, #136]	; (80053bc <leds_Task+0x14d8>)
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	3348      	adds	r3, #72	; 0x48
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d116      	bne.n	8005376 <leds_Task+0x1492>
 8005348:	491c      	ldr	r1, [pc, #112]	; (80053bc <leds_Task+0x14d8>)
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	440b      	add	r3, r1
 8005356:	330c      	adds	r3, #12
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b2d8      	uxtb	r0, r3
 800535c:	4917      	ldr	r1, [pc, #92]	; (80053bc <leds_Task+0x14d8>)
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4613      	mov	r3, r2
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3344      	adds	r3, #68	; 0x44
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4603      	mov	r3, r0
 8005372:	6393      	str	r3, [r2, #56]	; 0x38
 8005374:	e03a      	b.n	80053ec <leds_Task+0x1508>
 8005376:	4911      	ldr	r1, [pc, #68]	; (80053bc <leds_Task+0x14d8>)
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	3348      	adds	r3, #72	; 0x48
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d119      	bne.n	80053c0 <leds_Task+0x14dc>
 800538c:	490b      	ldr	r1, [pc, #44]	; (80053bc <leds_Task+0x14d8>)
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	4413      	add	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	440b      	add	r3, r1
 800539a:	330c      	adds	r3, #12
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2d8      	uxtb	r0, r3
 80053a0:	4906      	ldr	r1, [pc, #24]	; (80053bc <leds_Task+0x14d8>)
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	3344      	adds	r3, #68	; 0x44
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4603      	mov	r3, r0
 80053b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80053b8:	e018      	b.n	80053ec <leds_Task+0x1508>
 80053ba:	bf00      	nop
 80053bc:	200009d8 	.word	0x200009d8
 80053c0:	49b0      	ldr	r1, [pc, #704]	; (8005684 <leds_Task+0x17a0>)
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	440b      	add	r3, r1
 80053ce:	330c      	adds	r3, #12
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b2d8      	uxtb	r0, r3
 80053d4:	49ab      	ldr	r1, [pc, #684]	; (8005684 <leds_Task+0x17a0>)
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	440b      	add	r3, r1
 80053e2:	3344      	adds	r3, #68	; 0x44
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4603      	mov	r3, r0
 80053ea:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 80053ec:	49a5      	ldr	r1, [pc, #660]	; (8005684 <leds_Task+0x17a0>)
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	3350      	adds	r3, #80	; 0x50
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <leds_Task+0x154c>
 8005402:	49a0      	ldr	r1, [pc, #640]	; (8005684 <leds_Task+0x17a0>)
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	440b      	add	r3, r1
 8005410:	3318      	adds	r3, #24
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2d8      	uxtb	r0, r3
 8005416:	499b      	ldr	r1, [pc, #620]	; (8005684 <leds_Task+0x17a0>)
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	334c      	adds	r3, #76	; 0x4c
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4602      	mov	r2, r0
 800542c:	635a      	str	r2, [r3, #52]	; 0x34
 800542e:	e059      	b.n	80054e4 <leds_Task+0x1600>
 8005430:	4994      	ldr	r1, [pc, #592]	; (8005684 <leds_Task+0x17a0>)
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	3350      	adds	r3, #80	; 0x50
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b04      	cmp	r3, #4
 8005444:	d116      	bne.n	8005474 <leds_Task+0x1590>
 8005446:	498f      	ldr	r1, [pc, #572]	; (8005684 <leds_Task+0x17a0>)
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	3318      	adds	r3, #24
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2d8      	uxtb	r0, r3
 800545a:	498a      	ldr	r1, [pc, #552]	; (8005684 <leds_Task+0x17a0>)
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	334c      	adds	r3, #76	; 0x4c
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4603      	mov	r3, r0
 8005470:	6393      	str	r3, [r2, #56]	; 0x38
 8005472:	e037      	b.n	80054e4 <leds_Task+0x1600>
 8005474:	4983      	ldr	r1, [pc, #524]	; (8005684 <leds_Task+0x17a0>)
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4413      	add	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	440b      	add	r3, r1
 8005482:	3350      	adds	r3, #80	; 0x50
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d116      	bne.n	80054b8 <leds_Task+0x15d4>
 800548a:	497e      	ldr	r1, [pc, #504]	; (8005684 <leds_Task+0x17a0>)
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	4413      	add	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	440b      	add	r3, r1
 8005498:	3318      	adds	r3, #24
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2d8      	uxtb	r0, r3
 800549e:	4979      	ldr	r1, [pc, #484]	; (8005684 <leds_Task+0x17a0>)
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	4413      	add	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	440b      	add	r3, r1
 80054ac:	334c      	adds	r3, #76	; 0x4c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4603      	mov	r3, r0
 80054b4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80054b6:	e015      	b.n	80054e4 <leds_Task+0x1600>
 80054b8:	4972      	ldr	r1, [pc, #456]	; (8005684 <leds_Task+0x17a0>)
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	440b      	add	r3, r1
 80054c6:	3318      	adds	r3, #24
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2d8      	uxtb	r0, r3
 80054cc:	496d      	ldr	r1, [pc, #436]	; (8005684 <leds_Task+0x17a0>)
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	440b      	add	r3, r1
 80054da:	334c      	adds	r3, #76	; 0x4c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4603      	mov	r3, r0
 80054e2:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value0);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 80054e4:	4967      	ldr	r1, [pc, #412]	; (8005684 <leds_Task+0x17a0>)
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	440b      	add	r3, r1
 80054f2:	3358      	adds	r3, #88	; 0x58
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d116      	bne.n	8005528 <leds_Task+0x1644>
 80054fa:	4962      	ldr	r1, [pc, #392]	; (8005684 <leds_Task+0x17a0>)
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
 8005508:	3324      	adds	r3, #36	; 0x24
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	b2d8      	uxtb	r0, r3
 800550e:	495d      	ldr	r1, [pc, #372]	; (8005684 <leds_Task+0x17a0>)
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4613      	mov	r3, r2
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	4413      	add	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	440b      	add	r3, r1
 800551c:	3354      	adds	r3, #84	; 0x54
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4602      	mov	r2, r0
 8005524:	635a      	str	r2, [r3, #52]	; 0x34
 8005526:	e059      	b.n	80055dc <leds_Task+0x16f8>
 8005528:	4956      	ldr	r1, [pc, #344]	; (8005684 <leds_Task+0x17a0>)
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	3358      	adds	r3, #88	; 0x58
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d116      	bne.n	800556c <leds_Task+0x1688>
 800553e:	4951      	ldr	r1, [pc, #324]	; (8005684 <leds_Task+0x17a0>)
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4413      	add	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	440b      	add	r3, r1
 800554c:	3324      	adds	r3, #36	; 0x24
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b2d8      	uxtb	r0, r3
 8005552:	494c      	ldr	r1, [pc, #304]	; (8005684 <leds_Task+0x17a0>)
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	3354      	adds	r3, #84	; 0x54
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4603      	mov	r3, r0
 8005568:	6393      	str	r3, [r2, #56]	; 0x38
 800556a:	e037      	b.n	80055dc <leds_Task+0x16f8>
 800556c:	4945      	ldr	r1, [pc, #276]	; (8005684 <leds_Task+0x17a0>)
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	4413      	add	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	440b      	add	r3, r1
 800557a:	3358      	adds	r3, #88	; 0x58
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d116      	bne.n	80055b0 <leds_Task+0x16cc>
 8005582:	4940      	ldr	r1, [pc, #256]	; (8005684 <leds_Task+0x17a0>)
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	440b      	add	r3, r1
 8005590:	3324      	adds	r3, #36	; 0x24
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	b2d8      	uxtb	r0, r3
 8005596:	493b      	ldr	r1, [pc, #236]	; (8005684 <leds_Task+0x17a0>)
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	4413      	add	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	440b      	add	r3, r1
 80055a4:	3354      	adds	r3, #84	; 0x54
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4603      	mov	r3, r0
 80055ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80055ae:	e015      	b.n	80055dc <leds_Task+0x16f8>
 80055b0:	4934      	ldr	r1, [pc, #208]	; (8005684 <leds_Task+0x17a0>)
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4613      	mov	r3, r2
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	b2d8      	uxtb	r0, r3
 80055c4:	492f      	ldr	r1, [pc, #188]	; (8005684 <leds_Task+0x17a0>)
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	440b      	add	r3, r1
 80055d2:	3354      	adds	r3, #84	; 0x54
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4603      	mov	r3, r0
 80055da:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value0);
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 80055dc:	4929      	ldr	r1, [pc, #164]	; (8005684 <leds_Task+0x17a0>)
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	440b      	add	r3, r1
 80055ea:	3334      	adds	r3, #52	; 0x34
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d80a      	bhi.n	8005608 <leds_Task+0x1724>
 80055f2:	4924      	ldr	r1, [pc, #144]	; (8005684 <leds_Task+0x17a0>)
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	3334      	adds	r3, #52	; 0x34
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d131      	bne.n	800566c <leds_Task+0x1788>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 8005608:	491e      	ldr	r1, [pc, #120]	; (8005684 <leds_Task+0x17a0>)
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	4413      	add	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	440b      	add	r3, r1
 8005616:	3334      	adds	r3, #52	; 0x34
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d912      	bls.n	8005644 <leds_Task+0x1760>
								leds_info.leds[i].loop_cnt--;
 800561e:	4919      	ldr	r1, [pc, #100]	; (8005684 <leds_Task+0x17a0>)
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	3334      	adds	r3, #52	; 0x34
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1e59      	subs	r1, r3, #1
 8005632:	4814      	ldr	r0, [pc, #80]	; (8005684 <leds_Task+0x17a0>)
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4403      	add	r3, r0
 8005640:	3334      	adds	r3, #52	; 0x34
 8005642:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 8005644:	490f      	ldr	r1, [pc, #60]	; (8005684 <leds_Task+0x17a0>)
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	4413      	add	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	440b      	add	r3, r1
 8005652:	332c      	adds	r3, #44	; 0x2c
 8005654:	6819      	ldr	r1, [r3, #0]
 8005656:	480b      	ldr	r0, [pc, #44]	; (8005684 <leds_Task+0x17a0>)
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4613      	mov	r3, r2
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4403      	add	r3, r0
 8005664:	3304      	adds	r3, #4
 8005666:	6019      	str	r1, [r3, #0]
 8005668:	f001 ba06 	b.w	8006a78 <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 800566c:	4905      	ldr	r1, [pc, #20]	; (8005684 <leds_Task+0x17a0>)
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	440b      	add	r3, r1
 800567a:	3302      	adds	r3, #2
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	f001 b9fa 	b.w	8006a78 <leds_Task+0x2b94>
 8005684:	200009d8 	.word	0x200009d8
					}
				}
			}
			//Fade blink mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fadeblink )
 8005688:	49cd      	ldr	r1, [pc, #820]	; (80059c0 <leds_Task+0x1adc>)
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	440b      	add	r3, r1
 8005696:	3302      	adds	r3, #2
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	f040 8743 	bne.w	8006528 <leds_Task+0x2644>
			{
				//
				if( leds_info.leds[i].state == led_go_to_st1 )
 80056a2:	49c7      	ldr	r1, [pc, #796]	; (80059c0 <leds_Task+0x1adc>)
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	4413      	add	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	440b      	add	r3, r1
 80056b0:	3301      	adds	r3, #1
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	f040 8378 	bne.w	8005dac <leds_Task+0x1ec8>
				{
					if( leds_info.leds[i].timer == 0 )
 80056bc:	49c0      	ldr	r1, [pc, #768]	; (80059c0 <leds_Task+0x1adc>)
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	4413      	add	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	440b      	add	r3, r1
 80056ca:	3304      	adds	r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f041 81d2 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 80056d4:	49ba      	ldr	r1, [pc, #744]	; (80059c0 <leds_Task+0x1adc>)
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	4413      	add	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	440b      	add	r3, r1
 80056e2:	3304      	adds	r3, #4
 80056e4:	2214      	movs	r2, #20
 80056e6:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 80056e8:	49b5      	ldr	r1, [pc, #724]	; (80059c0 <leds_Task+0x1adc>)
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	4413      	add	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	440b      	add	r3, r1
 80056f6:	3310      	adds	r3, #16
 80056f8:	ed93 7a00 	vldr	s14, [r3]
 80056fc:	49b0      	ldr	r1, [pc, #704]	; (80059c0 <leds_Task+0x1adc>)
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	440b      	add	r3, r1
 800570a:	3308      	adds	r3, #8
 800570c:	edd3 7a00 	vldr	s15, [r3]
 8005710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005714:	49aa      	ldr	r1, [pc, #680]	; (80059c0 <leds_Task+0x1adc>)
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3308      	adds	r3, #8
 8005724:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8005728:	49a5      	ldr	r1, [pc, #660]	; (80059c0 <leds_Task+0x1adc>)
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	4413      	add	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	440b      	add	r3, r1
 8005736:	331c      	adds	r3, #28
 8005738:	ed93 7a00 	vldr	s14, [r3]
 800573c:	49a0      	ldr	r1, [pc, #640]	; (80059c0 <leds_Task+0x1adc>)
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	3314      	adds	r3, #20
 800574c:	edd3 7a00 	vldr	s15, [r3]
 8005750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005754:	499a      	ldr	r1, [pc, #616]	; (80059c0 <leds_Task+0x1adc>)
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	3314      	adds	r3, #20
 8005764:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8005768:	4995      	ldr	r1, [pc, #596]	; (80059c0 <leds_Task+0x1adc>)
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	3328      	adds	r3, #40	; 0x28
 8005778:	ed93 7a00 	vldr	s14, [r3]
 800577c:	4990      	ldr	r1, [pc, #576]	; (80059c0 <leds_Task+0x1adc>)
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	440b      	add	r3, r1
 800578a:	3320      	adds	r3, #32
 800578c:	edd3 7a00 	vldr	s15, [r3]
 8005790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005794:	498a      	ldr	r1, [pc, #552]	; (80059c0 <leds_Task+0x1adc>)
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3320      	adds	r3, #32
 80057a4:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 80057a8:	4985      	ldr	r1, [pc, #532]	; (80059c0 <leds_Task+0x1adc>)
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4613      	mov	r3, r2
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	440b      	add	r3, r1
 80057b6:	3338      	adds	r3, #56	; 0x38
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	1e50      	subs	r0, r2, #1
 80057bc:	4c80      	ldr	r4, [pc, #512]	; (80059c0 <leds_Task+0x1adc>)
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	460b      	mov	r3, r1
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	440b      	add	r3, r1
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4423      	add	r3, r4
 80057ca:	3338      	adds	r3, #56	; 0x38
 80057cc:	6018      	str	r0, [r3, #0]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	f040 8127 	bne.w	8005a22 <leds_Task+0x1b3e>
						{
							leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 80057d4:	497a      	ldr	r1, [pc, #488]	; (80059c0 <leds_Task+0x1adc>)
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	330d      	adds	r3, #13
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f0:	4973      	ldr	r1, [pc, #460]	; (80059c0 <leds_Task+0x1adc>)
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	4413      	add	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	440b      	add	r3, r1
 80057fe:	3308      	adds	r3, #8
 8005800:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8005804:	496e      	ldr	r1, [pc, #440]	; (80059c0 <leds_Task+0x1adc>)
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	440b      	add	r3, r1
 8005812:	3319      	adds	r3, #25
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	ee07 3a90 	vmov	s15, r3
 800581c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005820:	4967      	ldr	r1, [pc, #412]	; (80059c0 <leds_Task+0x1adc>)
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	3314      	adds	r3, #20
 8005830:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8005834:	4962      	ldr	r1, [pc, #392]	; (80059c0 <leds_Task+0x1adc>)
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	440b      	add	r3, r1
 8005842:	3325      	adds	r3, #37	; 0x25
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005850:	495b      	ldr	r1, [pc, #364]	; (80059c0 <leds_Task+0x1adc>)
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	3320      	adds	r3, #32
 8005860:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].state = led_go_to_st0;
 8005864:	4956      	ldr	r1, [pc, #344]	; (80059c0 <leds_Task+0x1adc>)
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4613      	mov	r3, r2
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	3301      	adds	r3, #1
 8005874:	2202      	movs	r2, #2
 8005876:	701a      	strb	r2, [r3, #0]
							leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st1 / LEDS_FADE_STEP_TIME;
 8005878:	4951      	ldr	r1, [pc, #324]	; (80059c0 <leds_Task+0x1adc>)
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	3330      	adds	r3, #48	; 0x30
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4e      	ldr	r2, [pc, #312]	; (80059c4 <leds_Task+0x1ae0>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	0919      	lsrs	r1, r3, #4
 8005892:	484b      	ldr	r0, [pc, #300]	; (80059c0 <leds_Task+0x1adc>)
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4403      	add	r3, r0
 80058a0:	3338      	adds	r3, #56	; 0x38
 80058a2:	6019      	str	r1, [r3, #0]
							if( leds_info.leds[i].step_cnt == 0 )
 80058a4:	4946      	ldr	r1, [pc, #280]	; (80059c0 <leds_Task+0x1adc>)
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	4413      	add	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	440b      	add	r3, r1
 80058b2:	3338      	adds	r3, #56	; 0x38
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <leds_Task+0x19ea>
								leds_info.leds[i].step_cnt = 1;
 80058ba:	4941      	ldr	r1, [pc, #260]	; (80059c0 <leds_Task+0x1adc>)
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	440b      	add	r3, r1
 80058c8:	3338      	adds	r3, #56	; 0x38
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
							leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value0 - (float)leds_info.leds[i].pwmch0_value1) / (float)leds_info.leds[i].step_cnt;
 80058ce:	493c      	ldr	r1, [pc, #240]	; (80059c0 <leds_Task+0x1adc>)
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4613      	mov	r3, r2
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	440b      	add	r3, r1
 80058dc:	330c      	adds	r3, #12
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058ea:	4935      	ldr	r1, [pc, #212]	; (80059c0 <leds_Task+0x1adc>)
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	440b      	add	r3, r1
 80058f8:	330d      	adds	r3, #13
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	ee77 6a67 	vsub.f32	s13, s14, s15
 800590a:	492d      	ldr	r1, [pc, #180]	; (80059c0 <leds_Task+0x1adc>)
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4613      	mov	r3, r2
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	4413      	add	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	440b      	add	r3, r1
 8005918:	3338      	adds	r3, #56	; 0x38
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005928:	4925      	ldr	r1, [pc, #148]	; (80059c0 <leds_Task+0x1adc>)
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	4413      	add	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	440b      	add	r3, r1
 8005936:	3310      	adds	r3, #16
 8005938:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch1_step = ((float)leds_info.leds[i].pwmch1_value0 - (float)leds_info.leds[i].pwmch1_value1) / (float)leds_info.leds[i].step_cnt;
 800593c:	4920      	ldr	r1, [pc, #128]	; (80059c0 <leds_Task+0x1adc>)
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	4413      	add	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	3318      	adds	r3, #24
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005958:	4919      	ldr	r1, [pc, #100]	; (80059c0 <leds_Task+0x1adc>)
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	3319      	adds	r3, #25
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005974:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005978:	4911      	ldr	r1, [pc, #68]	; (80059c0 <leds_Task+0x1adc>)
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	440b      	add	r3, r1
 8005986:	3338      	adds	r3, #56	; 0x38
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005996:	490a      	ldr	r1, [pc, #40]	; (80059c0 <leds_Task+0x1adc>)
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4613      	mov	r3, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	440b      	add	r3, r1
 80059a4:	331c      	adds	r3, #28
 80059a6:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch2_step = ((float)leds_info.leds[i].pwmch2_value0 - (float)leds_info.leds[i].pwmch2_value1) / (float)leds_info.leds[i].step_cnt;
 80059aa:	4905      	ldr	r1, [pc, #20]	; (80059c0 <leds_Task+0x1adc>)
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4613      	mov	r3, r2
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	4413      	add	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	440b      	add	r3, r1
 80059b8:	3324      	adds	r3, #36	; 0x24
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e003      	b.n	80059c8 <leds_Task+0x1ae4>
 80059c0:	200009d8 	.word	0x200009d8
 80059c4:	cccccccd 	.word	0xcccccccd
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059d0:	49bc      	ldr	r1, [pc, #752]	; (8005cc4 <leds_Task+0x1de0>)
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4613      	mov	r3, r2
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	4413      	add	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	440b      	add	r3, r1
 80059de:	3325      	adds	r3, #37	; 0x25
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80059f0:	49b4      	ldr	r1, [pc, #720]	; (8005cc4 <leds_Task+0x1de0>)
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4613      	mov	r3, r2
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	4413      	add	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	440b      	add	r3, r1
 80059fe:	3338      	adds	r3, #56	; 0x38
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a0e:	49ad      	ldr	r1, [pc, #692]	; (8005cc4 <leds_Task+0x1de0>)
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4613      	mov	r3, r2
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4413      	add	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3328      	adds	r3, #40	; 0x28
 8005a1e:	edc3 7a00 	vstr	s15, [r3]
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8005a22:	49a8      	ldr	r1, [pc, #672]	; (8005cc4 <leds_Task+0x1de0>)
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	3348      	adds	r3, #72	; 0x48
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11c      	bne.n	8005a72 <leds_Task+0x1b8e>
 8005a38:	49a2      	ldr	r1, [pc, #648]	; (8005cc4 <leds_Task+0x1de0>)
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	440b      	add	r3, r1
 8005a46:	3308      	adds	r3, #8
 8005a48:	edd3 7a00 	vldr	s15, [r3]
 8005a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a50:	edc7 7a01 	vstr	s15, [r7, #4]
 8005a54:	793b      	ldrb	r3, [r7, #4]
 8005a56:	b2d8      	uxtb	r0, r3
 8005a58:	499a      	ldr	r1, [pc, #616]	; (8005cc4 <leds_Task+0x1de0>)
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	3344      	adds	r3, #68	; 0x44
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8005a70:	e06b      	b.n	8005b4a <leds_Task+0x1c66>
 8005a72:	4994      	ldr	r1, [pc, #592]	; (8005cc4 <leds_Task+0x1de0>)
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4613      	mov	r3, r2
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	4413      	add	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	440b      	add	r3, r1
 8005a80:	3348      	adds	r3, #72	; 0x48
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d11c      	bne.n	8005ac2 <leds_Task+0x1bde>
 8005a88:	498e      	ldr	r1, [pc, #568]	; (8005cc4 <leds_Task+0x1de0>)
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	440b      	add	r3, r1
 8005a96:	3308      	adds	r3, #8
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa0:	edc7 7a01 	vstr	s15, [r7, #4]
 8005aa4:	793b      	ldrb	r3, [r7, #4]
 8005aa6:	b2d8      	uxtb	r0, r3
 8005aa8:	4986      	ldr	r1, [pc, #536]	; (8005cc4 <leds_Task+0x1de0>)
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4613      	mov	r3, r2
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3344      	adds	r3, #68	; 0x44
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4603      	mov	r3, r0
 8005abe:	6393      	str	r3, [r2, #56]	; 0x38
 8005ac0:	e043      	b.n	8005b4a <leds_Task+0x1c66>
 8005ac2:	4980      	ldr	r1, [pc, #512]	; (8005cc4 <leds_Task+0x1de0>)
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3348      	adds	r3, #72	; 0x48
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d11c      	bne.n	8005b12 <leds_Task+0x1c2e>
 8005ad8:	497a      	ldr	r1, [pc, #488]	; (8005cc4 <leds_Task+0x1de0>)
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4613      	mov	r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	edd3 7a00 	vldr	s15, [r3]
 8005aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005af0:	edc7 7a01 	vstr	s15, [r7, #4]
 8005af4:	793b      	ldrb	r3, [r7, #4]
 8005af6:	b2d8      	uxtb	r0, r3
 8005af8:	4972      	ldr	r1, [pc, #456]	; (8005cc4 <leds_Task+0x1de0>)
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4613      	mov	r3, r2
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	4413      	add	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	440b      	add	r3, r1
 8005b06:	3344      	adds	r3, #68	; 0x44
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005b10:	e01b      	b.n	8005b4a <leds_Task+0x1c66>
 8005b12:	496c      	ldr	r1, [pc, #432]	; (8005cc4 <leds_Task+0x1de0>)
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4613      	mov	r3, r2
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	3308      	adds	r3, #8
 8005b22:	edd3 7a00 	vldr	s15, [r3]
 8005b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8005b2e:	793b      	ldrb	r3, [r7, #4]
 8005b30:	b2d8      	uxtb	r0, r3
 8005b32:	4964      	ldr	r1, [pc, #400]	; (8005cc4 <leds_Task+0x1de0>)
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	440b      	add	r3, r1
 8005b40:	3344      	adds	r3, #68	; 0x44
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4603      	mov	r3, r0
 8005b48:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8005b4a:	495e      	ldr	r1, [pc, #376]	; (8005cc4 <leds_Task+0x1de0>)
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	3350      	adds	r3, #80	; 0x50
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11c      	bne.n	8005b9a <leds_Task+0x1cb6>
 8005b60:	4958      	ldr	r1, [pc, #352]	; (8005cc4 <leds_Task+0x1de0>)
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3314      	adds	r3, #20
 8005b70:	edd3 7a00 	vldr	s15, [r3]
 8005b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b78:	edc7 7a01 	vstr	s15, [r7, #4]
 8005b7c:	793b      	ldrb	r3, [r7, #4]
 8005b7e:	b2d8      	uxtb	r0, r3
 8005b80:	4950      	ldr	r1, [pc, #320]	; (8005cc4 <leds_Task+0x1de0>)
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	440b      	add	r3, r1
 8005b8e:	334c      	adds	r3, #76	; 0x4c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4602      	mov	r2, r0
 8005b96:	635a      	str	r2, [r3, #52]	; 0x34
 8005b98:	e06b      	b.n	8005c72 <leds_Task+0x1d8e>
 8005b9a:	494a      	ldr	r1, [pc, #296]	; (8005cc4 <leds_Task+0x1de0>)
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	4413      	add	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3350      	adds	r3, #80	; 0x50
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d11c      	bne.n	8005bea <leds_Task+0x1d06>
 8005bb0:	4944      	ldr	r1, [pc, #272]	; (8005cc4 <leds_Task+0x1de0>)
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	4413      	add	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	edd3 7a00 	vldr	s15, [r3]
 8005bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8005bcc:	793b      	ldrb	r3, [r7, #4]
 8005bce:	b2d8      	uxtb	r0, r3
 8005bd0:	493c      	ldr	r1, [pc, #240]	; (8005cc4 <leds_Task+0x1de0>)
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	4413      	add	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	440b      	add	r3, r1
 8005bde:	334c      	adds	r3, #76	; 0x4c
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4603      	mov	r3, r0
 8005be6:	6393      	str	r3, [r2, #56]	; 0x38
 8005be8:	e043      	b.n	8005c72 <leds_Task+0x1d8e>
 8005bea:	4936      	ldr	r1, [pc, #216]	; (8005cc4 <leds_Task+0x1de0>)
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	3350      	adds	r3, #80	; 0x50
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d11c      	bne.n	8005c3a <leds_Task+0x1d56>
 8005c00:	4930      	ldr	r1, [pc, #192]	; (8005cc4 <leds_Task+0x1de0>)
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4613      	mov	r3, r2
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	4413      	add	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3314      	adds	r3, #20
 8005c10:	edd3 7a00 	vldr	s15, [r3]
 8005c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c18:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c1c:	793b      	ldrb	r3, [r7, #4]
 8005c1e:	b2d8      	uxtb	r0, r3
 8005c20:	4928      	ldr	r1, [pc, #160]	; (8005cc4 <leds_Task+0x1de0>)
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	4413      	add	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	440b      	add	r3, r1
 8005c2e:	334c      	adds	r3, #76	; 0x4c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4603      	mov	r3, r0
 8005c36:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005c38:	e01b      	b.n	8005c72 <leds_Task+0x1d8e>
 8005c3a:	4922      	ldr	r1, [pc, #136]	; (8005cc4 <leds_Task+0x1de0>)
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	4413      	add	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	440b      	add	r3, r1
 8005c48:	3314      	adds	r3, #20
 8005c4a:	edd3 7a00 	vldr	s15, [r3]
 8005c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c52:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c56:	793b      	ldrb	r3, [r7, #4]
 8005c58:	b2d8      	uxtb	r0, r3
 8005c5a:	491a      	ldr	r1, [pc, #104]	; (8005cc4 <leds_Task+0x1de0>)
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	4413      	add	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	440b      	add	r3, r1
 8005c68:	334c      	adds	r3, #76	; 0x4c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4603      	mov	r3, r0
 8005c70:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8005c72:	4914      	ldr	r1, [pc, #80]	; (8005cc4 <leds_Task+0x1de0>)
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4613      	mov	r3, r2
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	4413      	add	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	440b      	add	r3, r1
 8005c80:	3358      	adds	r3, #88	; 0x58
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11f      	bne.n	8005cc8 <leds_Task+0x1de4>
 8005c88:	490e      	ldr	r1, [pc, #56]	; (8005cc4 <leds_Task+0x1de0>)
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	440b      	add	r3, r1
 8005c96:	3320      	adds	r3, #32
 8005c98:	edd3 7a00 	vldr	s15, [r3]
 8005c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca0:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ca4:	793b      	ldrb	r3, [r7, #4]
 8005ca6:	b2d8      	uxtb	r0, r3
 8005ca8:	4906      	ldr	r1, [pc, #24]	; (8005cc4 <leds_Task+0x1de0>)
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4613      	mov	r3, r2
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	440b      	add	r3, r1
 8005cb6:	3354      	adds	r3, #84	; 0x54
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8005cc0:	f000 beda 	b.w	8006a78 <leds_Task+0x2b94>
 8005cc4:	200009d8 	.word	0x200009d8
 8005cc8:	4937      	ldr	r1, [pc, #220]	; (8005da8 <leds_Task+0x1ec4>)
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3358      	adds	r3, #88	; 0x58
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d11d      	bne.n	8005d1a <leds_Task+0x1e36>
 8005cde:	4932      	ldr	r1, [pc, #200]	; (8005da8 <leds_Task+0x1ec4>)
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	3320      	adds	r3, #32
 8005cee:	edd3 7a00 	vldr	s15, [r3]
 8005cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf6:	edc7 7a01 	vstr	s15, [r7, #4]
 8005cfa:	793b      	ldrb	r3, [r7, #4]
 8005cfc:	b2d8      	uxtb	r0, r3
 8005cfe:	492a      	ldr	r1, [pc, #168]	; (8005da8 <leds_Task+0x1ec4>)
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4613      	mov	r3, r2
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	4413      	add	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3354      	adds	r3, #84	; 0x54
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4603      	mov	r3, r0
 8005d14:	6393      	str	r3, [r2, #56]	; 0x38
 8005d16:	f000 beaf 	b.w	8006a78 <leds_Task+0x2b94>
 8005d1a:	4923      	ldr	r1, [pc, #140]	; (8005da8 <leds_Task+0x1ec4>)
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	440b      	add	r3, r1
 8005d28:	3358      	adds	r3, #88	; 0x58
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d11d      	bne.n	8005d6c <leds_Task+0x1e88>
 8005d30:	491d      	ldr	r1, [pc, #116]	; (8005da8 <leds_Task+0x1ec4>)
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4613      	mov	r3, r2
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4413      	add	r3, r2
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	440b      	add	r3, r1
 8005d3e:	3320      	adds	r3, #32
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d48:	edc7 7a01 	vstr	s15, [r7, #4]
 8005d4c:	793b      	ldrb	r3, [r7, #4]
 8005d4e:	b2d8      	uxtb	r0, r3
 8005d50:	4915      	ldr	r1, [pc, #84]	; (8005da8 <leds_Task+0x1ec4>)
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	4413      	add	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3354      	adds	r3, #84	; 0x54
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4603      	mov	r3, r0
 8005d66:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005d68:	f000 be86 	b.w	8006a78 <leds_Task+0x2b94>
 8005d6c:	490e      	ldr	r1, [pc, #56]	; (8005da8 <leds_Task+0x1ec4>)
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	4413      	add	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	440b      	add	r3, r1
 8005d7a:	3320      	adds	r3, #32
 8005d7c:	edd3 7a00 	vldr	s15, [r3]
 8005d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d84:	edc7 7a01 	vstr	s15, [r7, #4]
 8005d88:	793b      	ldrb	r3, [r7, #4]
 8005d8a:	b2d8      	uxtb	r0, r3
 8005d8c:	4906      	ldr	r1, [pc, #24]	; (8005da8 <leds_Task+0x1ec4>)
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4613      	mov	r3, r2
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4413      	add	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	440b      	add	r3, r1
 8005d9a:	3354      	adds	r3, #84	; 0x54
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4603      	mov	r3, r0
 8005da2:	6413      	str	r3, [r2, #64]	; 0x40
 8005da4:	f000 be68 	b.w	8006a78 <leds_Task+0x2b94>
 8005da8:	200009d8 	.word	0x200009d8
											leds_info.leds[i].pwmch2_timch, (uint8_t)leds_info.leds[i].pwmch2_cur_value);
					}
				}
				else if( leds_info.leds[i].state == led_go_to_st0 )
 8005dac:	49ca      	ldr	r1, [pc, #808]	; (80060d8 <leds_Task+0x21f4>)
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	440b      	add	r3, r1
 8005dba:	3301      	adds	r3, #1
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	f040 8659 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8005dc6:	49c4      	ldr	r1, [pc, #784]	; (80060d8 <leds_Task+0x21f4>)
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 864d 	bne.w	8006a78 <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8005dde:	49be      	ldr	r1, [pc, #760]	; (80060d8 <leds_Task+0x21f4>)
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	3304      	adds	r3, #4
 8005dee:	2214      	movs	r2, #20
 8005df0:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8005df2:	49b9      	ldr	r1, [pc, #740]	; (80060d8 <leds_Task+0x21f4>)
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4613      	mov	r3, r2
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	440b      	add	r3, r1
 8005e00:	3310      	adds	r3, #16
 8005e02:	ed93 7a00 	vldr	s14, [r3]
 8005e06:	49b4      	ldr	r1, [pc, #720]	; (80060d8 <leds_Task+0x21f4>)
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	3308      	adds	r3, #8
 8005e16:	edd3 7a00 	vldr	s15, [r3]
 8005e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e1e:	49ae      	ldr	r1, [pc, #696]	; (80060d8 <leds_Task+0x21f4>)
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	4413      	add	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8005e32:	49a9      	ldr	r1, [pc, #676]	; (80060d8 <leds_Task+0x21f4>)
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	4413      	add	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	440b      	add	r3, r1
 8005e40:	331c      	adds	r3, #28
 8005e42:	ed93 7a00 	vldr	s14, [r3]
 8005e46:	49a4      	ldr	r1, [pc, #656]	; (80060d8 <leds_Task+0x21f4>)
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	4413      	add	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	440b      	add	r3, r1
 8005e54:	3314      	adds	r3, #20
 8005e56:	edd3 7a00 	vldr	s15, [r3]
 8005e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e5e:	499e      	ldr	r1, [pc, #632]	; (80060d8 <leds_Task+0x21f4>)
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4613      	mov	r3, r2
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	4413      	add	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	440b      	add	r3, r1
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8005e72:	4999      	ldr	r1, [pc, #612]	; (80060d8 <leds_Task+0x21f4>)
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4613      	mov	r3, r2
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	4413      	add	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	440b      	add	r3, r1
 8005e80:	3328      	adds	r3, #40	; 0x28
 8005e82:	ed93 7a00 	vldr	s14, [r3]
 8005e86:	4994      	ldr	r1, [pc, #592]	; (80060d8 <leds_Task+0x21f4>)
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	440b      	add	r3, r1
 8005e94:	3320      	adds	r3, #32
 8005e96:	edd3 7a00 	vldr	s15, [r3]
 8005e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e9e:	498e      	ldr	r1, [pc, #568]	; (80060d8 <leds_Task+0x21f4>)
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	4413      	add	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	440b      	add	r3, r1
 8005eac:	3320      	adds	r3, #32
 8005eae:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8005eb2:	4989      	ldr	r1, [pc, #548]	; (80060d8 <leds_Task+0x21f4>)
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	4413      	add	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3338      	adds	r3, #56	; 0x38
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	1e50      	subs	r0, r2, #1
 8005ec6:	4c84      	ldr	r4, [pc, #528]	; (80060d8 <leds_Task+0x21f4>)
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	440b      	add	r3, r1
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4423      	add	r3, r4
 8005ed4:	3338      	adds	r3, #56	; 0x38
 8005ed6:	6018      	str	r0, [r3, #0]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	f040 8163 	bne.w	80061a4 <leds_Task+0x22c0>
						{
							if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8005ede:	497e      	ldr	r1, [pc, #504]	; (80060d8 <leds_Task+0x21f4>)
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	4413      	add	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	440b      	add	r3, r1
 8005eec:	3334      	adds	r3, #52	; 0x34
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d80b      	bhi.n	8005f0c <leds_Task+0x2028>
 8005ef4:	4978      	ldr	r1, [pc, #480]	; (80060d8 <leds_Task+0x21f4>)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	4413      	add	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	440b      	add	r3, r1
 8005f02:	3334      	adds	r3, #52	; 0x34
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 8147 	bne.w	800619a <leds_Task+0x22b6>
							{
								if( leds_info.leds[i].loop_cnt > 1 )
 8005f0c:	4972      	ldr	r1, [pc, #456]	; (80060d8 <leds_Task+0x21f4>)
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4613      	mov	r3, r2
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	440b      	add	r3, r1
 8005f1a:	3334      	adds	r3, #52	; 0x34
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d912      	bls.n	8005f48 <leds_Task+0x2064>
									leds_info.leds[i].loop_cnt--;
 8005f22:	496d      	ldr	r1, [pc, #436]	; (80060d8 <leds_Task+0x21f4>)
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4613      	mov	r3, r2
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	4413      	add	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	440b      	add	r3, r1
 8005f30:	3334      	adds	r3, #52	; 0x34
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1e59      	subs	r1, r3, #1
 8005f36:	4868      	ldr	r0, [pc, #416]	; (80060d8 <leds_Task+0x21f4>)
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4403      	add	r3, r0
 8005f44:	3334      	adds	r3, #52	; 0x34
 8005f46:	6019      	str	r1, [r3, #0]
								leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8005f48:	4963      	ldr	r1, [pc, #396]	; (80060d8 <leds_Task+0x21f4>)
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	440b      	add	r3, r1
 8005f56:	330c      	adds	r3, #12
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f64:	495c      	ldr	r1, [pc, #368]	; (80060d8 <leds_Task+0x21f4>)
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	4413      	add	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	440b      	add	r3, r1
 8005f72:	3308      	adds	r3, #8
 8005f74:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value0;
 8005f78:	4957      	ldr	r1, [pc, #348]	; (80060d8 <leds_Task+0x21f4>)
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	4413      	add	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	440b      	add	r3, r1
 8005f86:	3318      	adds	r3, #24
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f94:	4950      	ldr	r1, [pc, #320]	; (80060d8 <leds_Task+0x21f4>)
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value0;
 8005fa8:	494b      	ldr	r1, [pc, #300]	; (80060d8 <leds_Task+0x21f4>)
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3324      	adds	r3, #36	; 0x24
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc4:	4944      	ldr	r1, [pc, #272]	; (80060d8 <leds_Task+0x21f4>)
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	4413      	add	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3320      	adds	r3, #32
 8005fd4:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].state = led_go_to_st1;
 8005fd8:	493f      	ldr	r1, [pc, #252]	; (80060d8 <leds_Task+0x21f4>)
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	4413      	add	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	440b      	add	r3, r1
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	2203      	movs	r2, #3
 8005fea:	701a      	strb	r2, [r3, #0]
								leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st0 / LEDS_FADE_STEP_TIME;
 8005fec:	493a      	ldr	r1, [pc, #232]	; (80060d8 <leds_Task+0x21f4>)
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	332c      	adds	r3, #44	; 0x2c
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a37      	ldr	r2, [pc, #220]	; (80060dc <leds_Task+0x21f8>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	0919      	lsrs	r1, r3, #4
 8006006:	4834      	ldr	r0, [pc, #208]	; (80060d8 <leds_Task+0x21f4>)
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4613      	mov	r3, r2
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	4413      	add	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4403      	add	r3, r0
 8006014:	3338      	adds	r3, #56	; 0x38
 8006016:	6019      	str	r1, [r3, #0]
								if( leds_info.leds[i].step_cnt == 0 )
 8006018:	492f      	ldr	r1, [pc, #188]	; (80060d8 <leds_Task+0x21f4>)
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4613      	mov	r3, r2
 800601e:	011b      	lsls	r3, r3, #4
 8006020:	4413      	add	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	440b      	add	r3, r1
 8006026:	3338      	adds	r3, #56	; 0x38
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <leds_Task+0x215e>
									leds_info.leds[i].step_cnt = 1;
 800602e:	492a      	ldr	r1, [pc, #168]	; (80060d8 <leds_Task+0x21f4>)
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4613      	mov	r3, r2
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	440b      	add	r3, r1
 800603c:	3338      	adds	r3, #56	; 0x38
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
								leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value1 - (float)leds_info.leds[i].pwmch0_value0) / (float)leds_info.leds[i].step_cnt;
 8006042:	4925      	ldr	r1, [pc, #148]	; (80060d8 <leds_Task+0x21f4>)
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4613      	mov	r3, r2
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	4413      	add	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	440b      	add	r3, r1
 8006050:	330d      	adds	r3, #13
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800605e:	491e      	ldr	r1, [pc, #120]	; (80060d8 <leds_Task+0x21f4>)
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4613      	mov	r3, r2
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	4413      	add	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	440b      	add	r3, r1
 800606c:	330c      	adds	r3, #12
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800607e:	4916      	ldr	r1, [pc, #88]	; (80060d8 <leds_Task+0x21f4>)
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4613      	mov	r3, r2
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	440b      	add	r3, r1
 800608c:	3338      	adds	r3, #56	; 0x38
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609c:	490e      	ldr	r1, [pc, #56]	; (80060d8 <leds_Task+0x21f4>)
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3310      	adds	r3, #16
 80060ac:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch1_step = ((float)leds_info.leds[i].pwmch1_value1 - (float)leds_info.leds[i].pwmch1_value0) / (float)leds_info.leds[i].step_cnt;
 80060b0:	4909      	ldr	r1, [pc, #36]	; (80060d8 <leds_Task+0x21f4>)
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4613      	mov	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	3319      	adds	r3, #25
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060cc:	4902      	ldr	r1, [pc, #8]	; (80060d8 <leds_Task+0x21f4>)
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	e004      	b.n	80060e0 <leds_Task+0x21fc>
 80060d6:	bf00      	nop
 80060d8:	200009d8 	.word	0x200009d8
 80060dc:	cccccccd 	.word	0xcccccccd
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	440b      	add	r3, r1
 80060e6:	3318      	adds	r3, #24
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80060f8:	49b0      	ldr	r1, [pc, #704]	; (80063bc <leds_Task+0x24d8>)
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4613      	mov	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006116:	49a9      	ldr	r1, [pc, #676]	; (80063bc <leds_Task+0x24d8>)
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	331c      	adds	r3, #28
 8006126:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch2_step = ((float)leds_info.leds[i].pwmch2_value1 - (float)leds_info.leds[i].pwmch2_value0) / (float)leds_info.leds[i].step_cnt;
 800612a:	49a4      	ldr	r1, [pc, #656]	; (80063bc <leds_Task+0x24d8>)
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4613      	mov	r3, r2
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	440b      	add	r3, r1
 8006138:	3325      	adds	r3, #37	; 0x25
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006146:	499d      	ldr	r1, [pc, #628]	; (80063bc <leds_Task+0x24d8>)
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4613      	mov	r3, r2
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	4413      	add	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	440b      	add	r3, r1
 8006154:	3324      	adds	r3, #36	; 0x24
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006166:	4995      	ldr	r1, [pc, #596]	; (80063bc <leds_Task+0x24d8>)
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4613      	mov	r3, r2
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	440b      	add	r3, r1
 8006174:	3338      	adds	r3, #56	; 0x38
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006184:	498d      	ldr	r1, [pc, #564]	; (80063bc <leds_Task+0x24d8>)
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	4413      	add	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	440b      	add	r3, r1
 8006192:	3328      	adds	r3, #40	; 0x28
 8006194:	edc3 7a00 	vstr	s15, [r3]
 8006198:	e004      	b.n	80061a4 <leds_Task+0x22c0>
							}
							else
								//leds_info.leds[i].mode = led_toggle;
								leds_setFade(i, 200, LEDS_MIN_PWM_VALUE);
 800619a:	2200      	movs	r2, #0
 800619c:	21c8      	movs	r1, #200	; 0xc8
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 f858 	bl	8007254 <leds_setFade>
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80061a4:	4985      	ldr	r1, [pc, #532]	; (80063bc <leds_Task+0x24d8>)
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4613      	mov	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	440b      	add	r3, r1
 80061b2:	3348      	adds	r3, #72	; 0x48
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11c      	bne.n	80061f4 <leds_Task+0x2310>
 80061ba:	4980      	ldr	r1, [pc, #512]	; (80063bc <leds_Task+0x24d8>)
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4613      	mov	r3, r2
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	4413      	add	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	440b      	add	r3, r1
 80061c8:	3308      	adds	r3, #8
 80061ca:	edd3 7a00 	vldr	s15, [r3]
 80061ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80061d6:	793b      	ldrb	r3, [r7, #4]
 80061d8:	b2d8      	uxtb	r0, r3
 80061da:	4978      	ldr	r1, [pc, #480]	; (80063bc <leds_Task+0x24d8>)
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4613      	mov	r3, r2
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	4413      	add	r3, r2
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	440b      	add	r3, r1
 80061e8:	3344      	adds	r3, #68	; 0x44
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4602      	mov	r2, r0
 80061f0:	635a      	str	r2, [r3, #52]	; 0x34
 80061f2:	e06b      	b.n	80062cc <leds_Task+0x23e8>
 80061f4:	4971      	ldr	r1, [pc, #452]	; (80063bc <leds_Task+0x24d8>)
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4613      	mov	r3, r2
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	3348      	adds	r3, #72	; 0x48
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b04      	cmp	r3, #4
 8006208:	d11c      	bne.n	8006244 <leds_Task+0x2360>
 800620a:	496c      	ldr	r1, [pc, #432]	; (80063bc <leds_Task+0x24d8>)
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4613      	mov	r3, r2
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4413      	add	r3, r2
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	440b      	add	r3, r1
 8006218:	3308      	adds	r3, #8
 800621a:	edd3 7a00 	vldr	s15, [r3]
 800621e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006222:	edc7 7a01 	vstr	s15, [r7, #4]
 8006226:	793b      	ldrb	r3, [r7, #4]
 8006228:	b2d8      	uxtb	r0, r3
 800622a:	4964      	ldr	r1, [pc, #400]	; (80063bc <leds_Task+0x24d8>)
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4613      	mov	r3, r2
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	440b      	add	r3, r1
 8006238:	3344      	adds	r3, #68	; 0x44
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4603      	mov	r3, r0
 8006240:	6393      	str	r3, [r2, #56]	; 0x38
 8006242:	e043      	b.n	80062cc <leds_Task+0x23e8>
 8006244:	495d      	ldr	r1, [pc, #372]	; (80063bc <leds_Task+0x24d8>)
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	3348      	adds	r3, #72	; 0x48
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b08      	cmp	r3, #8
 8006258:	d11c      	bne.n	8006294 <leds_Task+0x23b0>
 800625a:	4958      	ldr	r1, [pc, #352]	; (80063bc <leds_Task+0x24d8>)
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	3308      	adds	r3, #8
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006272:	edc7 7a01 	vstr	s15, [r7, #4]
 8006276:	793b      	ldrb	r3, [r7, #4]
 8006278:	b2d8      	uxtb	r0, r3
 800627a:	4950      	ldr	r1, [pc, #320]	; (80063bc <leds_Task+0x24d8>)
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4613      	mov	r3, r2
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	440b      	add	r3, r1
 8006288:	3344      	adds	r3, #68	; 0x44
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4603      	mov	r3, r0
 8006290:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006292:	e01b      	b.n	80062cc <leds_Task+0x23e8>
 8006294:	4949      	ldr	r1, [pc, #292]	; (80063bc <leds_Task+0x24d8>)
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	4413      	add	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	440b      	add	r3, r1
 80062a2:	3308      	adds	r3, #8
 80062a4:	edd3 7a00 	vldr	s15, [r3]
 80062a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80062b0:	793b      	ldrb	r3, [r7, #4]
 80062b2:	b2d8      	uxtb	r0, r3
 80062b4:	4941      	ldr	r1, [pc, #260]	; (80063bc <leds_Task+0x24d8>)
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	440b      	add	r3, r1
 80062c2:	3344      	adds	r3, #68	; 0x44
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 80062cc:	493b      	ldr	r1, [pc, #236]	; (80063bc <leds_Task+0x24d8>)
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	4413      	add	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	440b      	add	r3, r1
 80062da:	3350      	adds	r3, #80	; 0x50
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d11c      	bne.n	800631c <leds_Task+0x2438>
 80062e2:	4936      	ldr	r1, [pc, #216]	; (80063bc <leds_Task+0x24d8>)
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4613      	mov	r3, r2
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	4413      	add	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	440b      	add	r3, r1
 80062f0:	3314      	adds	r3, #20
 80062f2:	edd3 7a00 	vldr	s15, [r3]
 80062f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80062fe:	793b      	ldrb	r3, [r7, #4]
 8006300:	b2d8      	uxtb	r0, r3
 8006302:	492e      	ldr	r1, [pc, #184]	; (80063bc <leds_Task+0x24d8>)
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4613      	mov	r3, r2
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	4413      	add	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	440b      	add	r3, r1
 8006310:	334c      	adds	r3, #76	; 0x4c
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4602      	mov	r2, r0
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
 800631a:	e06d      	b.n	80063f8 <leds_Task+0x2514>
 800631c:	4927      	ldr	r1, [pc, #156]	; (80063bc <leds_Task+0x24d8>)
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	4413      	add	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	440b      	add	r3, r1
 800632a:	3350      	adds	r3, #80	; 0x50
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b04      	cmp	r3, #4
 8006330:	d11c      	bne.n	800636c <leds_Task+0x2488>
 8006332:	4922      	ldr	r1, [pc, #136]	; (80063bc <leds_Task+0x24d8>)
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4613      	mov	r3, r2
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	4413      	add	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	440b      	add	r3, r1
 8006340:	3314      	adds	r3, #20
 8006342:	edd3 7a00 	vldr	s15, [r3]
 8006346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634a:	edc7 7a01 	vstr	s15, [r7, #4]
 800634e:	793b      	ldrb	r3, [r7, #4]
 8006350:	b2d8      	uxtb	r0, r3
 8006352:	491a      	ldr	r1, [pc, #104]	; (80063bc <leds_Task+0x24d8>)
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4613      	mov	r3, r2
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	334c      	adds	r3, #76	; 0x4c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4603      	mov	r3, r0
 8006368:	6393      	str	r3, [r2, #56]	; 0x38
 800636a:	e045      	b.n	80063f8 <leds_Task+0x2514>
 800636c:	4913      	ldr	r1, [pc, #76]	; (80063bc <leds_Task+0x24d8>)
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4613      	mov	r3, r2
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	4413      	add	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	440b      	add	r3, r1
 800637a:	3350      	adds	r3, #80	; 0x50
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b08      	cmp	r3, #8
 8006380:	d11e      	bne.n	80063c0 <leds_Task+0x24dc>
 8006382:	490e      	ldr	r1, [pc, #56]	; (80063bc <leds_Task+0x24d8>)
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4613      	mov	r3, r2
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	4413      	add	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	440b      	add	r3, r1
 8006390:	3314      	adds	r3, #20
 8006392:	edd3 7a00 	vldr	s15, [r3]
 8006396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800639a:	edc7 7a01 	vstr	s15, [r7, #4]
 800639e:	793b      	ldrb	r3, [r7, #4]
 80063a0:	b2d8      	uxtb	r0, r3
 80063a2:	4906      	ldr	r1, [pc, #24]	; (80063bc <leds_Task+0x24d8>)
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4613      	mov	r3, r2
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	334c      	adds	r3, #76	; 0x4c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4603      	mov	r3, r0
 80063b8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80063ba:	e01d      	b.n	80063f8 <leds_Task+0x2514>
 80063bc:	200009d8 	.word	0x200009d8
 80063c0:	4958      	ldr	r1, [pc, #352]	; (8006524 <leds_Task+0x2640>)
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4613      	mov	r3, r2
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	4413      	add	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	440b      	add	r3, r1
 80063ce:	3314      	adds	r3, #20
 80063d0:	edd3 7a00 	vldr	s15, [r3]
 80063d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80063dc:	793b      	ldrb	r3, [r7, #4]
 80063de:	b2d8      	uxtb	r0, r3
 80063e0:	4950      	ldr	r1, [pc, #320]	; (8006524 <leds_Task+0x2640>)
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4613      	mov	r3, r2
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	4413      	add	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	440b      	add	r3, r1
 80063ee:	334c      	adds	r3, #76	; 0x4c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4603      	mov	r3, r0
 80063f6:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 80063f8:	494a      	ldr	r1, [pc, #296]	; (8006524 <leds_Task+0x2640>)
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4613      	mov	r3, r2
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	4413      	add	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	440b      	add	r3, r1
 8006406:	3358      	adds	r3, #88	; 0x58
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d11c      	bne.n	8006448 <leds_Task+0x2564>
 800640e:	4945      	ldr	r1, [pc, #276]	; (8006524 <leds_Task+0x2640>)
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4613      	mov	r3, r2
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	4413      	add	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	440b      	add	r3, r1
 800641c:	3320      	adds	r3, #32
 800641e:	edd3 7a00 	vldr	s15, [r3]
 8006422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006426:	edc7 7a01 	vstr	s15, [r7, #4]
 800642a:	793b      	ldrb	r3, [r7, #4]
 800642c:	b2d8      	uxtb	r0, r3
 800642e:	493d      	ldr	r1, [pc, #244]	; (8006524 <leds_Task+0x2640>)
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4613      	mov	r3, r2
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	4413      	add	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	440b      	add	r3, r1
 800643c:	3354      	adds	r3, #84	; 0x54
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4602      	mov	r2, r0
 8006444:	635a      	str	r2, [r3, #52]	; 0x34
 8006446:	e317      	b.n	8006a78 <leds_Task+0x2b94>
 8006448:	4936      	ldr	r1, [pc, #216]	; (8006524 <leds_Task+0x2640>)
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4613      	mov	r3, r2
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	4413      	add	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	440b      	add	r3, r1
 8006456:	3358      	adds	r3, #88	; 0x58
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b04      	cmp	r3, #4
 800645c:	d11c      	bne.n	8006498 <leds_Task+0x25b4>
 800645e:	4931      	ldr	r1, [pc, #196]	; (8006524 <leds_Task+0x2640>)
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4613      	mov	r3, r2
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	4413      	add	r3, r2
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	440b      	add	r3, r1
 800646c:	3320      	adds	r3, #32
 800646e:	edd3 7a00 	vldr	s15, [r3]
 8006472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006476:	edc7 7a01 	vstr	s15, [r7, #4]
 800647a:	793b      	ldrb	r3, [r7, #4]
 800647c:	b2d8      	uxtb	r0, r3
 800647e:	4929      	ldr	r1, [pc, #164]	; (8006524 <leds_Task+0x2640>)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4613      	mov	r3, r2
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	4413      	add	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	440b      	add	r3, r1
 800648c:	3354      	adds	r3, #84	; 0x54
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4603      	mov	r3, r0
 8006494:	6393      	str	r3, [r2, #56]	; 0x38
 8006496:	e2ef      	b.n	8006a78 <leds_Task+0x2b94>
 8006498:	4922      	ldr	r1, [pc, #136]	; (8006524 <leds_Task+0x2640>)
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4613      	mov	r3, r2
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	4413      	add	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	440b      	add	r3, r1
 80064a6:	3358      	adds	r3, #88	; 0x58
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d11c      	bne.n	80064e8 <leds_Task+0x2604>
 80064ae:	491d      	ldr	r1, [pc, #116]	; (8006524 <leds_Task+0x2640>)
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	4413      	add	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	440b      	add	r3, r1
 80064bc:	3320      	adds	r3, #32
 80064be:	edd3 7a00 	vldr	s15, [r3]
 80064c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80064ca:	793b      	ldrb	r3, [r7, #4]
 80064cc:	b2d8      	uxtb	r0, r3
 80064ce:	4915      	ldr	r1, [pc, #84]	; (8006524 <leds_Task+0x2640>)
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4613      	mov	r3, r2
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	4413      	add	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	440b      	add	r3, r1
 80064dc:	3354      	adds	r3, #84	; 0x54
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4603      	mov	r3, r0
 80064e4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80064e6:	e2c7      	b.n	8006a78 <leds_Task+0x2b94>
 80064e8:	490e      	ldr	r1, [pc, #56]	; (8006524 <leds_Task+0x2640>)
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4613      	mov	r3, r2
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	440b      	add	r3, r1
 80064f6:	3320      	adds	r3, #32
 80064f8:	edd3 7a00 	vldr	s15, [r3]
 80064fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006500:	edc7 7a01 	vstr	s15, [r7, #4]
 8006504:	793b      	ldrb	r3, [r7, #4]
 8006506:	b2d8      	uxtb	r0, r3
 8006508:	4906      	ldr	r1, [pc, #24]	; (8006524 <leds_Task+0x2640>)
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4613      	mov	r3, r2
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4413      	add	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	440b      	add	r3, r1
 8006516:	3354      	adds	r3, #84	; 0x54
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4603      	mov	r3, r0
 800651e:	6413      	str	r3, [r2, #64]	; 0x40
 8006520:	e2aa      	b.n	8006a78 <leds_Task+0x2b94>
 8006522:	bf00      	nop
 8006524:	200009d8 	.word	0x200009d8
					}
				}
			}
			//Fade mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fade )
 8006528:	49b0      	ldr	r1, [pc, #704]	; (80067ec <leds_Task+0x2908>)
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	4413      	add	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	440b      	add	r3, r1
 8006536:	3302      	adds	r3, #2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b03      	cmp	r3, #3
 800653e:	f040 829b 	bne.w	8006a78 <leds_Task+0x2b94>
			{
				if( leds_info.leds[i].timer == 0 )
 8006542:	49aa      	ldr	r1, [pc, #680]	; (80067ec <leds_Task+0x2908>)
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4613      	mov	r3, r2
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	4413      	add	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	440b      	add	r3, r1
 8006550:	3304      	adds	r3, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f040 828f 	bne.w	8006a78 <leds_Task+0x2b94>
				{
					leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 800655a:	49a4      	ldr	r1, [pc, #656]	; (80067ec <leds_Task+0x2908>)
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4613      	mov	r3, r2
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	4413      	add	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	440b      	add	r3, r1
 8006568:	3304      	adds	r3, #4
 800656a:	2214      	movs	r2, #20
 800656c:	601a      	str	r2, [r3, #0]
					leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 800656e:	499f      	ldr	r1, [pc, #636]	; (80067ec <leds_Task+0x2908>)
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4613      	mov	r3, r2
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4413      	add	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	440b      	add	r3, r1
 800657c:	3310      	adds	r3, #16
 800657e:	ed93 7a00 	vldr	s14, [r3]
 8006582:	499a      	ldr	r1, [pc, #616]	; (80067ec <leds_Task+0x2908>)
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4613      	mov	r3, r2
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	4413      	add	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	440b      	add	r3, r1
 8006590:	3308      	adds	r3, #8
 8006592:	edd3 7a00 	vldr	s15, [r3]
 8006596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800659a:	4994      	ldr	r1, [pc, #592]	; (80067ec <leds_Task+0x2908>)
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4613      	mov	r3, r2
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	440b      	add	r3, r1
 80065a8:	3308      	adds	r3, #8
 80065aa:	edc3 7a00 	vstr	s15, [r3]
					leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 80065ae:	498f      	ldr	r1, [pc, #572]	; (80067ec <leds_Task+0x2908>)
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4613      	mov	r3, r2
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4413      	add	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	440b      	add	r3, r1
 80065bc:	331c      	adds	r3, #28
 80065be:	ed93 7a00 	vldr	s14, [r3]
 80065c2:	498a      	ldr	r1, [pc, #552]	; (80067ec <leds_Task+0x2908>)
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4613      	mov	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	440b      	add	r3, r1
 80065d0:	3314      	adds	r3, #20
 80065d2:	edd3 7a00 	vldr	s15, [r3]
 80065d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065da:	4984      	ldr	r1, [pc, #528]	; (80067ec <leds_Task+0x2908>)
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4613      	mov	r3, r2
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	440b      	add	r3, r1
 80065e8:	3314      	adds	r3, #20
 80065ea:	edc3 7a00 	vstr	s15, [r3]
					leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 80065ee:	497f      	ldr	r1, [pc, #508]	; (80067ec <leds_Task+0x2908>)
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4613      	mov	r3, r2
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	4413      	add	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	440b      	add	r3, r1
 80065fc:	3328      	adds	r3, #40	; 0x28
 80065fe:	ed93 7a00 	vldr	s14, [r3]
 8006602:	497a      	ldr	r1, [pc, #488]	; (80067ec <leds_Task+0x2908>)
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4613      	mov	r3, r2
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	3320      	adds	r3, #32
 8006612:	edd3 7a00 	vldr	s15, [r3]
 8006616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800661a:	4974      	ldr	r1, [pc, #464]	; (80067ec <leds_Task+0x2908>)
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4613      	mov	r3, r2
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	440b      	add	r3, r1
 8006628:	3320      	adds	r3, #32
 800662a:	edc3 7a00 	vstr	s15, [r3]
					if( leds_info.leds[i].step_cnt-- == 0 )
 800662e:	496f      	ldr	r1, [pc, #444]	; (80067ec <leds_Task+0x2908>)
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4613      	mov	r3, r2
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4413      	add	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	440b      	add	r3, r1
 800663c:	3338      	adds	r3, #56	; 0x38
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	1e50      	subs	r0, r2, #1
 8006642:	4c6a      	ldr	r4, [pc, #424]	; (80067ec <leds_Task+0x2908>)
 8006644:	68f9      	ldr	r1, [r7, #12]
 8006646:	460b      	mov	r3, r1
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	440b      	add	r3, r1
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4423      	add	r3, r4
 8006650:	3338      	adds	r3, #56	; 0x38
 8006652:	6018      	str	r0, [r3, #0]
 8006654:	2a00      	cmp	r2, #0
 8006656:	d151      	bne.n	80066fc <leds_Task+0x2818>
					{
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8006658:	4964      	ldr	r1, [pc, #400]	; (80067ec <leds_Task+0x2908>)
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4613      	mov	r3, r2
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	4413      	add	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	440b      	add	r3, r1
 8006666:	330d      	adds	r3, #13
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	495d      	ldr	r1, [pc, #372]	; (80067ec <leds_Task+0x2908>)
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4613      	mov	r3, r2
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	4413      	add	r3, r2
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	440b      	add	r3, r1
 8006682:	3308      	adds	r3, #8
 8006684:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8006688:	4958      	ldr	r1, [pc, #352]	; (80067ec <leds_Task+0x2908>)
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4613      	mov	r3, r2
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	440b      	add	r3, r1
 8006696:	3319      	adds	r3, #25
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a4:	4951      	ldr	r1, [pc, #324]	; (80067ec <leds_Task+0x2908>)
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4613      	mov	r3, r2
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	4413      	add	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	440b      	add	r3, r1
 80066b2:	3314      	adds	r3, #20
 80066b4:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 80066b8:	494c      	ldr	r1, [pc, #304]	; (80067ec <leds_Task+0x2908>)
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4613      	mov	r3, r2
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	4413      	add	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	440b      	add	r3, r1
 80066c6:	3325      	adds	r3, #37	; 0x25
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d4:	4945      	ldr	r1, [pc, #276]	; (80067ec <leds_Task+0x2908>)
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	4613      	mov	r3, r2
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	4413      	add	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	440b      	add	r3, r1
 80066e2:	3320      	adds	r3, #32
 80066e4:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].mode = led_toggle;
 80066e8:	4940      	ldr	r1, [pc, #256]	; (80067ec <leds_Task+0x2908>)
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4613      	mov	r3, r2
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	4413      	add	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	440b      	add	r3, r1
 80066f6:	3302      	adds	r3, #2
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80066fc:	493b      	ldr	r1, [pc, #236]	; (80067ec <leds_Task+0x2908>)
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4613      	mov	r3, r2
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4413      	add	r3, r2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	440b      	add	r3, r1
 800670a:	3348      	adds	r3, #72	; 0x48
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11c      	bne.n	800674c <leds_Task+0x2868>
 8006712:	4936      	ldr	r1, [pc, #216]	; (80067ec <leds_Task+0x2908>)
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4613      	mov	r3, r2
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	4413      	add	r3, r2
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	440b      	add	r3, r1
 8006720:	3308      	adds	r3, #8
 8006722:	edd3 7a00 	vldr	s15, [r3]
 8006726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800672a:	edc7 7a01 	vstr	s15, [r7, #4]
 800672e:	793b      	ldrb	r3, [r7, #4]
 8006730:	b2d8      	uxtb	r0, r3
 8006732:	492e      	ldr	r1, [pc, #184]	; (80067ec <leds_Task+0x2908>)
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4613      	mov	r3, r2
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	4413      	add	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	440b      	add	r3, r1
 8006740:	3344      	adds	r3, #68	; 0x44
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4602      	mov	r2, r0
 8006748:	635a      	str	r2, [r3, #52]	; 0x34
 800674a:	e06d      	b.n	8006828 <leds_Task+0x2944>
 800674c:	4927      	ldr	r1, [pc, #156]	; (80067ec <leds_Task+0x2908>)
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4613      	mov	r3, r2
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	4413      	add	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	440b      	add	r3, r1
 800675a:	3348      	adds	r3, #72	; 0x48
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b04      	cmp	r3, #4
 8006760:	d11c      	bne.n	800679c <leds_Task+0x28b8>
 8006762:	4922      	ldr	r1, [pc, #136]	; (80067ec <leds_Task+0x2908>)
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4613      	mov	r3, r2
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	4413      	add	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	440b      	add	r3, r1
 8006770:	3308      	adds	r3, #8
 8006772:	edd3 7a00 	vldr	s15, [r3]
 8006776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800677a:	edc7 7a01 	vstr	s15, [r7, #4]
 800677e:	793b      	ldrb	r3, [r7, #4]
 8006780:	b2d8      	uxtb	r0, r3
 8006782:	491a      	ldr	r1, [pc, #104]	; (80067ec <leds_Task+0x2908>)
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4613      	mov	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	4413      	add	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	440b      	add	r3, r1
 8006790:	3344      	adds	r3, #68	; 0x44
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4603      	mov	r3, r0
 8006798:	6393      	str	r3, [r2, #56]	; 0x38
 800679a:	e045      	b.n	8006828 <leds_Task+0x2944>
 800679c:	4913      	ldr	r1, [pc, #76]	; (80067ec <leds_Task+0x2908>)
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4613      	mov	r3, r2
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	4413      	add	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	440b      	add	r3, r1
 80067aa:	3348      	adds	r3, #72	; 0x48
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d11e      	bne.n	80067f0 <leds_Task+0x290c>
 80067b2:	490e      	ldr	r1, [pc, #56]	; (80067ec <leds_Task+0x2908>)
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4613      	mov	r3, r2
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	440b      	add	r3, r1
 80067c0:	3308      	adds	r3, #8
 80067c2:	edd3 7a00 	vldr	s15, [r3]
 80067c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80067ce:	793b      	ldrb	r3, [r7, #4]
 80067d0:	b2d8      	uxtb	r0, r3
 80067d2:	4906      	ldr	r1, [pc, #24]	; (80067ec <leds_Task+0x2908>)
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4613      	mov	r3, r2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	4413      	add	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	440b      	add	r3, r1
 80067e0:	3344      	adds	r3, #68	; 0x44
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4603      	mov	r3, r0
 80067e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80067ea:	e01d      	b.n	8006828 <leds_Task+0x2944>
 80067ec:	200009d8 	.word	0x200009d8
 80067f0:	49a7      	ldr	r1, [pc, #668]	; (8006a90 <leds_Task+0x2bac>)
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4613      	mov	r3, r2
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	440b      	add	r3, r1
 80067fe:	3308      	adds	r3, #8
 8006800:	edd3 7a00 	vldr	s15, [r3]
 8006804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006808:	edc7 7a01 	vstr	s15, [r7, #4]
 800680c:	793b      	ldrb	r3, [r7, #4]
 800680e:	b2d8      	uxtb	r0, r3
 8006810:	499f      	ldr	r1, [pc, #636]	; (8006a90 <leds_Task+0x2bac>)
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4613      	mov	r3, r2
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	4413      	add	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	440b      	add	r3, r1
 800681e:	3344      	adds	r3, #68	; 0x44
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	6413      	str	r3, [r2, #64]	; 0x40
										leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8006828:	4999      	ldr	r1, [pc, #612]	; (8006a90 <leds_Task+0x2bac>)
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4613      	mov	r3, r2
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	4413      	add	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	440b      	add	r3, r1
 8006836:	3350      	adds	r3, #80	; 0x50
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d11c      	bne.n	8006878 <leds_Task+0x2994>
 800683e:	4994      	ldr	r1, [pc, #592]	; (8006a90 <leds_Task+0x2bac>)
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4613      	mov	r3, r2
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	4413      	add	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	440b      	add	r3, r1
 800684c:	3314      	adds	r3, #20
 800684e:	edd3 7a00 	vldr	s15, [r3]
 8006852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006856:	edc7 7a01 	vstr	s15, [r7, #4]
 800685a:	793b      	ldrb	r3, [r7, #4]
 800685c:	b2d8      	uxtb	r0, r3
 800685e:	498c      	ldr	r1, [pc, #560]	; (8006a90 <leds_Task+0x2bac>)
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4613      	mov	r3, r2
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	4413      	add	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	440b      	add	r3, r1
 800686c:	334c      	adds	r3, #76	; 0x4c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4602      	mov	r2, r0
 8006874:	635a      	str	r2, [r3, #52]	; 0x34
 8006876:	e06b      	b.n	8006950 <leds_Task+0x2a6c>
 8006878:	4985      	ldr	r1, [pc, #532]	; (8006a90 <leds_Task+0x2bac>)
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4613      	mov	r3, r2
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	4413      	add	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	440b      	add	r3, r1
 8006886:	3350      	adds	r3, #80	; 0x50
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b04      	cmp	r3, #4
 800688c:	d11c      	bne.n	80068c8 <leds_Task+0x29e4>
 800688e:	4980      	ldr	r1, [pc, #512]	; (8006a90 <leds_Task+0x2bac>)
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4613      	mov	r3, r2
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	4413      	add	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	440b      	add	r3, r1
 800689c:	3314      	adds	r3, #20
 800689e:	edd3 7a00 	vldr	s15, [r3]
 80068a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80068aa:	793b      	ldrb	r3, [r7, #4]
 80068ac:	b2d8      	uxtb	r0, r3
 80068ae:	4978      	ldr	r1, [pc, #480]	; (8006a90 <leds_Task+0x2bac>)
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4613      	mov	r3, r2
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	4413      	add	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	440b      	add	r3, r1
 80068bc:	334c      	adds	r3, #76	; 0x4c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4603      	mov	r3, r0
 80068c4:	6393      	str	r3, [r2, #56]	; 0x38
 80068c6:	e043      	b.n	8006950 <leds_Task+0x2a6c>
 80068c8:	4971      	ldr	r1, [pc, #452]	; (8006a90 <leds_Task+0x2bac>)
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4613      	mov	r3, r2
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4413      	add	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	440b      	add	r3, r1
 80068d6:	3350      	adds	r3, #80	; 0x50
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d11c      	bne.n	8006918 <leds_Task+0x2a34>
 80068de:	496c      	ldr	r1, [pc, #432]	; (8006a90 <leds_Task+0x2bac>)
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4613      	mov	r3, r2
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	4413      	add	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	440b      	add	r3, r1
 80068ec:	3314      	adds	r3, #20
 80068ee:	edd3 7a00 	vldr	s15, [r3]
 80068f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80068fa:	793b      	ldrb	r3, [r7, #4]
 80068fc:	b2d8      	uxtb	r0, r3
 80068fe:	4964      	ldr	r1, [pc, #400]	; (8006a90 <leds_Task+0x2bac>)
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4613      	mov	r3, r2
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	4413      	add	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	440b      	add	r3, r1
 800690c:	334c      	adds	r3, #76	; 0x4c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4603      	mov	r3, r0
 8006914:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006916:	e01b      	b.n	8006950 <leds_Task+0x2a6c>
 8006918:	495d      	ldr	r1, [pc, #372]	; (8006a90 <leds_Task+0x2bac>)
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	440b      	add	r3, r1
 8006926:	3314      	adds	r3, #20
 8006928:	edd3 7a00 	vldr	s15, [r3]
 800692c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006930:	edc7 7a01 	vstr	s15, [r7, #4]
 8006934:	793b      	ldrb	r3, [r7, #4]
 8006936:	b2d8      	uxtb	r0, r3
 8006938:	4955      	ldr	r1, [pc, #340]	; (8006a90 <leds_Task+0x2bac>)
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4613      	mov	r3, r2
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4413      	add	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	440b      	add	r3, r1
 8006946:	334c      	adds	r3, #76	; 0x4c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4603      	mov	r3, r0
 800694e:	6413      	str	r3, [r2, #64]	; 0x40
										leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8006950:	494f      	ldr	r1, [pc, #316]	; (8006a90 <leds_Task+0x2bac>)
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4613      	mov	r3, r2
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	4413      	add	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	440b      	add	r3, r1
 800695e:	3358      	adds	r3, #88	; 0x58
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11c      	bne.n	80069a0 <leds_Task+0x2abc>
 8006966:	494a      	ldr	r1, [pc, #296]	; (8006a90 <leds_Task+0x2bac>)
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4613      	mov	r3, r2
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	3320      	adds	r3, #32
 8006976:	edd3 7a00 	vldr	s15, [r3]
 800697a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800697e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006982:	793b      	ldrb	r3, [r7, #4]
 8006984:	b2d8      	uxtb	r0, r3
 8006986:	4942      	ldr	r1, [pc, #264]	; (8006a90 <leds_Task+0x2bac>)
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4613      	mov	r3, r2
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	4413      	add	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	440b      	add	r3, r1
 8006994:	3354      	adds	r3, #84	; 0x54
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4602      	mov	r2, r0
 800699c:	635a      	str	r2, [r3, #52]	; 0x34
 800699e:	e06b      	b.n	8006a78 <leds_Task+0x2b94>
 80069a0:	493b      	ldr	r1, [pc, #236]	; (8006a90 <leds_Task+0x2bac>)
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4613      	mov	r3, r2
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	4413      	add	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	440b      	add	r3, r1
 80069ae:	3358      	adds	r3, #88	; 0x58
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d11c      	bne.n	80069f0 <leds_Task+0x2b0c>
 80069b6:	4936      	ldr	r1, [pc, #216]	; (8006a90 <leds_Task+0x2bac>)
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	440b      	add	r3, r1
 80069c4:	3320      	adds	r3, #32
 80069c6:	edd3 7a00 	vldr	s15, [r3]
 80069ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80069d2:	793b      	ldrb	r3, [r7, #4]
 80069d4:	b2d8      	uxtb	r0, r3
 80069d6:	492e      	ldr	r1, [pc, #184]	; (8006a90 <leds_Task+0x2bac>)
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4613      	mov	r3, r2
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	4413      	add	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	440b      	add	r3, r1
 80069e4:	3354      	adds	r3, #84	; 0x54
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4603      	mov	r3, r0
 80069ec:	6393      	str	r3, [r2, #56]	; 0x38
 80069ee:	e043      	b.n	8006a78 <leds_Task+0x2b94>
 80069f0:	4927      	ldr	r1, [pc, #156]	; (8006a90 <leds_Task+0x2bac>)
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4613      	mov	r3, r2
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	4413      	add	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	440b      	add	r3, r1
 80069fe:	3358      	adds	r3, #88	; 0x58
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d11c      	bne.n	8006a40 <leds_Task+0x2b5c>
 8006a06:	4922      	ldr	r1, [pc, #136]	; (8006a90 <leds_Task+0x2bac>)
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	4413      	add	r3, r2
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	440b      	add	r3, r1
 8006a14:	3320      	adds	r3, #32
 8006a16:	edd3 7a00 	vldr	s15, [r3]
 8006a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a22:	793b      	ldrb	r3, [r7, #4]
 8006a24:	b2d8      	uxtb	r0, r3
 8006a26:	491a      	ldr	r1, [pc, #104]	; (8006a90 <leds_Task+0x2bac>)
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	4413      	add	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	440b      	add	r3, r1
 8006a34:	3354      	adds	r3, #84	; 0x54
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006a3e:	e01b      	b.n	8006a78 <leds_Task+0x2b94>
 8006a40:	4913      	ldr	r1, [pc, #76]	; (8006a90 <leds_Task+0x2bac>)
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	3320      	adds	r3, #32
 8006a50:	edd3 7a00 	vldr	s15, [r3]
 8006a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a58:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a5c:	793b      	ldrb	r3, [r7, #4]
 8006a5e:	b2d8      	uxtb	r0, r3
 8006a60:	490b      	ldr	r1, [pc, #44]	; (8006a90 <leds_Task+0x2bac>)
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4613      	mov	r3, r2
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3354      	adds	r3, #84	; 0x54
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4603      	mov	r3, r0
 8006a76:	6413      	str	r3, [r2, #64]	; 0x40
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f43d aa36 	beq.w	8003ef2 <leds_Task+0xe>
				}
			}
		}
	}

	return;
 8006a86:	bf00      	nop
}
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200009d8 	.word	0x200009d8

08006a94 <leds_setBlink>:
  * @param  val1 	- pwm value can be for pwm led from LEDS_MIN_PWM_VALUE to LEDS_MAX_PWM_VALUE
  * 					or 0xXXBBGGRR format for RGB led
  * @retval 1 if success, 0 if failed
  */
uint8_t leds_setBlink(uint32_t s_led, uint32_t st0_time, uint32_t st1_time, uint32_t loops, uint32_t val0, uint32_t val1)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	if( s_led >= LEDS_NUM )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <leds_setBlink+0x18>
	{
		return 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e3cc      	b.n	8007246 <leds_setBlink+0x7b2>
	}

	//SIMPLE
	if( leds_info.leds[s_led].type == led_simple )
 8006aac:	49b8      	ldr	r1, [pc, #736]	; (8006d90 <leds_setBlink+0x2fc>)
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	4413      	add	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	440b      	add	r3, r1
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f040 80a5 	bne.w	8006c0e <leds_setBlink+0x17a>
	{
		leds_info.leds[s_led].pwmch0_value0 = val0;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	b2d8      	uxtb	r0, r3
 8006ac8:	49b1      	ldr	r1, [pc, #708]	; (8006d90 <leds_setBlink+0x2fc>)
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4613      	mov	r3, r2
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	4413      	add	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	440b      	add	r3, r1
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	4602      	mov	r2, r0
 8006ada:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = val1;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	b2d8      	uxtb	r0, r3
 8006ae0:	49ab      	ldr	r1, [pc, #684]	; (8006d90 <leds_setBlink+0x2fc>)
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	440b      	add	r3, r1
 8006aee:	330d      	adds	r3, #13
 8006af0:	4602      	mov	r2, r0
 8006af2:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 8006af4:	49a6      	ldr	r1, [pc, #664]	; (8006d90 <leds_setBlink+0x2fc>)
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4613      	mov	r3, r2
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	4413      	add	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	440b      	add	r3, r1
 8006b02:	3334      	adds	r3, #52	; 0x34
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 8006b08:	49a1      	ldr	r1, [pc, #644]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	4413      	add	r3, r2
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	440b      	add	r3, r1
 8006b16:	332c      	adds	r3, #44	; 0x2c
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 8006b1c:	499c      	ldr	r1, [pc, #624]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4613      	mov	r3, r2
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	4413      	add	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	440b      	add	r3, r1
 8006b2a:	3330      	adds	r3, #48	; 0x30
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8006b30:	4997      	ldr	r1, [pc, #604]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	4413      	add	r3, r2
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3302      	adds	r3, #2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	f000 837d 	beq.w	8007244 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 8006b4a:	4991      	ldr	r1, [pc, #580]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	4413      	add	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	440b      	add	r3, r1
 8006b58:	3301      	adds	r3, #1
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 8006b5e:	498c      	ldr	r1, [pc, #560]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4613      	mov	r3, r2
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	4413      	add	r3, r2
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	440b      	add	r3, r1
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	2201      	movs	r2, #1
 8006b70:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8006b72:	4987      	ldr	r1, [pc, #540]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4613      	mov	r3, r2
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	4413      	add	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	440b      	add	r3, r1
 8006b80:	332c      	adds	r3, #44	; 0x2c
 8006b82:	6819      	ldr	r1, [r3, #0]
 8006b84:	4882      	ldr	r0, [pc, #520]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4403      	add	r3, r0
 8006b92:	3304      	adds	r3, #4
 8006b94:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].pwmch0_value0 > 0 ) {
 8006b96:	497e      	ldr	r1, [pc, #504]	; (8006d90 <leds_setBlink+0x2fc>)
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	4413      	add	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	440b      	add	r3, r1
 8006ba4:	330c      	adds	r3, #12
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d017      	beq.n	8006bde <leds_setBlink+0x14a>
				HAL_GPIO_WritePin(leds_info.leds[s_led].sim_port, leds_info.leds[s_led].sim_pin, GPIO_PIN_SET);
 8006bae:	4978      	ldr	r1, [pc, #480]	; (8006d90 <leds_setBlink+0x2fc>)
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	4413      	add	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	440b      	add	r3, r1
 8006bbc:	333c      	adds	r3, #60	; 0x3c
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	4973      	ldr	r1, [pc, #460]	; (8006d90 <leds_setBlink+0x2fc>)
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	4413      	add	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	440b      	add	r3, r1
 8006bce:	3340      	adds	r3, #64	; 0x40
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f005 fd7c 	bl	800c6d4 <HAL_GPIO_WritePin>
 8006bdc:	e332      	b.n	8007244 <leds_setBlink+0x7b0>
			}
			else {
				HAL_GPIO_WritePin(leds_info.leds[s_led].sim_port, leds_info.leds[s_led].sim_pin, GPIO_PIN_RESET);
 8006bde:	496c      	ldr	r1, [pc, #432]	; (8006d90 <leds_setBlink+0x2fc>)
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4613      	mov	r3, r2
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	4413      	add	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	440b      	add	r3, r1
 8006bec:	333c      	adds	r3, #60	; 0x3c
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4967      	ldr	r1, [pc, #412]	; (8006d90 <leds_setBlink+0x2fc>)
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	440b      	add	r3, r1
 8006bfe:	3340      	adds	r3, #64	; 0x40
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2200      	movs	r2, #0
 8006c06:	4619      	mov	r1, r3
 8006c08:	f005 fd64 	bl	800c6d4 <HAL_GPIO_WritePin>
 8006c0c:	e31a      	b.n	8007244 <leds_setBlink+0x7b0>
			}
		}
	}
	//PWM
	else if( leds_info.leds[s_led].type == led_pwm )
 8006c0e:	4960      	ldr	r1, [pc, #384]	; (8006d90 <leds_setBlink+0x2fc>)
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	4413      	add	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	440b      	add	r3, r1
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	f040 80f0 	bne.w	8006e06 <leds_setBlink+0x372>
	{
		if( (val0 < LEDS_MIN_PWM_VALUE) || (val0 > LEDS_MAX_PWM_VALUE) || (val1 < LEDS_MIN_PWM_VALUE) || (val1 > LEDS_MAX_PWM_VALUE) )
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2bff      	cmp	r3, #255	; 0xff
 8006c2a:	d802      	bhi.n	8006c32 <leds_setBlink+0x19e>
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2bff      	cmp	r3, #255	; 0xff
 8006c30:	d901      	bls.n	8006c36 <leds_setBlink+0x1a2>
		{
			return 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e307      	b.n	8007246 <leds_setBlink+0x7b2>
		}
		leds_info.leds[s_led].pwmch0_value0 = val0;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	b2d8      	uxtb	r0, r3
 8006c3a:	4955      	ldr	r1, [pc, #340]	; (8006d90 <leds_setBlink+0x2fc>)
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4413      	add	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	440b      	add	r3, r1
 8006c48:	330c      	adds	r3, #12
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = val1;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	b2d8      	uxtb	r0, r3
 8006c52:	494f      	ldr	r1, [pc, #316]	; (8006d90 <leds_setBlink+0x2fc>)
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4613      	mov	r3, r2
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	4413      	add	r3, r2
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	440b      	add	r3, r1
 8006c60:	330d      	adds	r3, #13
 8006c62:	4602      	mov	r2, r0
 8006c64:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 8006c66:	494a      	ldr	r1, [pc, #296]	; (8006d90 <leds_setBlink+0x2fc>)
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	4413      	add	r3, r2
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	440b      	add	r3, r1
 8006c74:	3334      	adds	r3, #52	; 0x34
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 8006c7a:	4945      	ldr	r1, [pc, #276]	; (8006d90 <leds_setBlink+0x2fc>)
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	4413      	add	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	440b      	add	r3, r1
 8006c88:	332c      	adds	r3, #44	; 0x2c
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 8006c8e:	4940      	ldr	r1, [pc, #256]	; (8006d90 <leds_setBlink+0x2fc>)
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4613      	mov	r3, r2
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	4413      	add	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3330      	adds	r3, #48	; 0x30
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8006ca2:	493b      	ldr	r1, [pc, #236]	; (8006d90 <leds_setBlink+0x2fc>)
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	4413      	add	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	440b      	add	r3, r1
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	f000 82c4 	beq.w	8007244 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 8006cbc:	4934      	ldr	r1, [pc, #208]	; (8006d90 <leds_setBlink+0x2fc>)
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	440b      	add	r3, r1
 8006cca:	3301      	adds	r3, #1
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 8006cd0:	492f      	ldr	r1, [pc, #188]	; (8006d90 <leds_setBlink+0x2fc>)
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	4413      	add	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	440b      	add	r3, r1
 8006cde:	3302      	adds	r3, #2
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8006ce4:	492a      	ldr	r1, [pc, #168]	; (8006d90 <leds_setBlink+0x2fc>)
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	4413      	add	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	440b      	add	r3, r1
 8006cf2:	332c      	adds	r3, #44	; 0x2c
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	4826      	ldr	r0, [pc, #152]	; (8006d90 <leds_setBlink+0x2fc>)
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4403      	add	r3, r0
 8006d04:	3304      	adds	r3, #4
 8006d06:	6019      	str	r1, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8006d08:	4921      	ldr	r1, [pc, #132]	; (8006d90 <leds_setBlink+0x2fc>)
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	4413      	add	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	440b      	add	r3, r1
 8006d16:	3348      	adds	r3, #72	; 0x48
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d116      	bne.n	8006d4c <leds_setBlink+0x2b8>
 8006d1e:	491c      	ldr	r1, [pc, #112]	; (8006d90 <leds_setBlink+0x2fc>)
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4613      	mov	r3, r2
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	440b      	add	r3, r1
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b2d8      	uxtb	r0, r3
 8006d32:	4917      	ldr	r1, [pc, #92]	; (8006d90 <leds_setBlink+0x2fc>)
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4613      	mov	r3, r2
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	4413      	add	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	440b      	add	r3, r1
 8006d40:	3344      	adds	r3, #68	; 0x44
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4602      	mov	r2, r0
 8006d48:	635a      	str	r2, [r3, #52]	; 0x34
 8006d4a:	e27b      	b.n	8007244 <leds_setBlink+0x7b0>
 8006d4c:	4910      	ldr	r1, [pc, #64]	; (8006d90 <leds_setBlink+0x2fc>)
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4613      	mov	r3, r2
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3348      	adds	r3, #72	; 0x48
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d118      	bne.n	8006d94 <leds_setBlink+0x300>
 8006d62:	490b      	ldr	r1, [pc, #44]	; (8006d90 <leds_setBlink+0x2fc>)
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4613      	mov	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	4413      	add	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	440b      	add	r3, r1
 8006d70:	330c      	adds	r3, #12
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b2d8      	uxtb	r0, r3
 8006d76:	4906      	ldr	r1, [pc, #24]	; (8006d90 <leds_setBlink+0x2fc>)
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	440b      	add	r3, r1
 8006d84:	3344      	adds	r3, #68	; 0x44
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6393      	str	r3, [r2, #56]	; 0x38
 8006d8e:	e259      	b.n	8007244 <leds_setBlink+0x7b0>
 8006d90:	200009d8 	.word	0x200009d8
 8006d94:	49a3      	ldr	r1, [pc, #652]	; (8007024 <leds_setBlink+0x590>)
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	440b      	add	r3, r1
 8006da2:	3348      	adds	r3, #72	; 0x48
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d116      	bne.n	8006dd8 <leds_setBlink+0x344>
 8006daa:	499e      	ldr	r1, [pc, #632]	; (8007024 <leds_setBlink+0x590>)
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4613      	mov	r3, r2
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	4413      	add	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	440b      	add	r3, r1
 8006db8:	330c      	adds	r3, #12
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b2d8      	uxtb	r0, r3
 8006dbe:	4999      	ldr	r1, [pc, #612]	; (8007024 <leds_setBlink+0x590>)
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	440b      	add	r3, r1
 8006dcc:	3344      	adds	r3, #68	; 0x44
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006dd6:	e235      	b.n	8007244 <leds_setBlink+0x7b0>
 8006dd8:	4992      	ldr	r1, [pc, #584]	; (8007024 <leds_setBlink+0x590>)
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	4413      	add	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	440b      	add	r3, r1
 8006de6:	330c      	adds	r3, #12
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b2d8      	uxtb	r0, r3
 8006dec:	498d      	ldr	r1, [pc, #564]	; (8007024 <leds_setBlink+0x590>)
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4613      	mov	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	4413      	add	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	440b      	add	r3, r1
 8006dfa:	3344      	adds	r3, #68	; 0x44
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4603      	mov	r3, r0
 8006e02:	6413      	str	r3, [r2, #64]	; 0x40
 8006e04:	e21e      	b.n	8007244 <leds_setBlink+0x7b0>
		}
	}
	//RGB
	else if( leds_info.leds[s_led].type == led_rgb )
 8006e06:	4987      	ldr	r1, [pc, #540]	; (8007024 <leds_setBlink+0x590>)
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	4413      	add	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	440b      	add	r3, r1
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	f040 8213 	bne.w	8007244 <leds_setBlink+0x7b0>
	{
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)(val0 & 0xFF);
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	b2d8      	uxtb	r0, r3
 8006e22:	4980      	ldr	r1, [pc, #512]	; (8007024 <leds_setBlink+0x590>)
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4613      	mov	r3, r2
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	4413      	add	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	330c      	adds	r3, #12
 8006e32:	4602      	mov	r2, r0
 8006e34:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value0 = (uint8_t)((val0 >> 8) & 0xFF);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	0a1b      	lsrs	r3, r3, #8
 8006e3a:	b2d8      	uxtb	r0, r3
 8006e3c:	4979      	ldr	r1, [pc, #484]	; (8007024 <leds_setBlink+0x590>)
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4613      	mov	r3, r2
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	4413      	add	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value0 = (uint8_t)((val0 >> 16) & 0xFF);
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	0c1b      	lsrs	r3, r3, #16
 8006e54:	b2d8      	uxtb	r0, r3
 8006e56:	4973      	ldr	r1, [pc, #460]	; (8007024 <leds_setBlink+0x590>)
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	4413      	add	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	440b      	add	r3, r1
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	4602      	mov	r2, r0
 8006e68:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)(val1 & 0xFF);
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	b2d8      	uxtb	r0, r3
 8006e6e:	496d      	ldr	r1, [pc, #436]	; (8007024 <leds_setBlink+0x590>)
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4613      	mov	r3, r2
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	4413      	add	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	440b      	add	r3, r1
 8006e7c:	330d      	adds	r3, #13
 8006e7e:	4602      	mov	r2, r0
 8006e80:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value1 = (uint8_t)((val1 >> 8) & 0xFF);
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	b2d8      	uxtb	r0, r3
 8006e88:	4966      	ldr	r1, [pc, #408]	; (8007024 <leds_setBlink+0x590>)
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	4413      	add	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	440b      	add	r3, r1
 8006e96:	3319      	adds	r3, #25
 8006e98:	4602      	mov	r2, r0
 8006e9a:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value1 = (uint8_t)((val1 >> 16) & 0xFF);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	0c1b      	lsrs	r3, r3, #16
 8006ea0:	b2d8      	uxtb	r0, r3
 8006ea2:	4960      	ldr	r1, [pc, #384]	; (8007024 <leds_setBlink+0x590>)
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	4413      	add	r3, r2
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	440b      	add	r3, r1
 8006eb0:	3325      	adds	r3, #37	; 0x25
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 8006eb6:	495b      	ldr	r1, [pc, #364]	; (8007024 <leds_setBlink+0x590>)
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	4413      	add	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3334      	adds	r3, #52	; 0x34
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 8006eca:	4956      	ldr	r1, [pc, #344]	; (8007024 <leds_setBlink+0x590>)
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	440b      	add	r3, r1
 8006ed8:	332c      	adds	r3, #44	; 0x2c
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 8006ede:	4951      	ldr	r1, [pc, #324]	; (8007024 <leds_setBlink+0x590>)
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	4413      	add	r3, r2
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	440b      	add	r3, r1
 8006eec:	3330      	adds	r3, #48	; 0x30
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8006ef2:	494c      	ldr	r1, [pc, #304]	; (8007024 <leds_setBlink+0x590>)
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	4413      	add	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	440b      	add	r3, r1
 8006f00:	3302      	adds	r3, #2
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	f000 819c 	beq.w	8007244 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 8006f0c:	4945      	ldr	r1, [pc, #276]	; (8007024 <leds_setBlink+0x590>)
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4613      	mov	r3, r2
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	4413      	add	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	440b      	add	r3, r1
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 8006f20:	4940      	ldr	r1, [pc, #256]	; (8007024 <leds_setBlink+0x590>)
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4613      	mov	r3, r2
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	4413      	add	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3302      	adds	r3, #2
 8006f30:	2201      	movs	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8006f34:	493b      	ldr	r1, [pc, #236]	; (8007024 <leds_setBlink+0x590>)
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	011b      	lsls	r3, r3, #4
 8006f3c:	4413      	add	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	440b      	add	r3, r1
 8006f42:	332c      	adds	r3, #44	; 0x2c
 8006f44:	6819      	ldr	r1, [r3, #0]
 8006f46:	4837      	ldr	r0, [pc, #220]	; (8007024 <leds_setBlink+0x590>)
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	4403      	add	r3, r0
 8006f54:	3304      	adds	r3, #4
 8006f56:	6019      	str	r1, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8006f58:	4932      	ldr	r1, [pc, #200]	; (8007024 <leds_setBlink+0x590>)
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	4413      	add	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	440b      	add	r3, r1
 8006f66:	3348      	adds	r3, #72	; 0x48
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d116      	bne.n	8006f9c <leds_setBlink+0x508>
 8006f6e:	492d      	ldr	r1, [pc, #180]	; (8007024 <leds_setBlink+0x590>)
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4613      	mov	r3, r2
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	440b      	add	r3, r1
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	b2d8      	uxtb	r0, r3
 8006f82:	4928      	ldr	r1, [pc, #160]	; (8007024 <leds_setBlink+0x590>)
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	4413      	add	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	440b      	add	r3, r1
 8006f90:	3344      	adds	r3, #68	; 0x44
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4602      	mov	r2, r0
 8006f98:	635a      	str	r2, [r3, #52]	; 0x34
 8006f9a:	e05b      	b.n	8007054 <leds_setBlink+0x5c0>
 8006f9c:	4921      	ldr	r1, [pc, #132]	; (8007024 <leds_setBlink+0x590>)
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	4413      	add	r3, r2
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	440b      	add	r3, r1
 8006faa:	3348      	adds	r3, #72	; 0x48
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d116      	bne.n	8006fe0 <leds_setBlink+0x54c>
 8006fb2:	491c      	ldr	r1, [pc, #112]	; (8007024 <leds_setBlink+0x590>)
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	440b      	add	r3, r1
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b2d8      	uxtb	r0, r3
 8006fc6:	4917      	ldr	r1, [pc, #92]	; (8007024 <leds_setBlink+0x590>)
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	4413      	add	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3344      	adds	r3, #68	; 0x44
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6393      	str	r3, [r2, #56]	; 0x38
 8006fde:	e039      	b.n	8007054 <leds_setBlink+0x5c0>
 8006fe0:	4910      	ldr	r1, [pc, #64]	; (8007024 <leds_setBlink+0x590>)
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	440b      	add	r3, r1
 8006fee:	3348      	adds	r3, #72	; 0x48
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d118      	bne.n	8007028 <leds_setBlink+0x594>
 8006ff6:	490b      	ldr	r1, [pc, #44]	; (8007024 <leds_setBlink+0x590>)
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	4413      	add	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	440b      	add	r3, r1
 8007004:	330c      	adds	r3, #12
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b2d8      	uxtb	r0, r3
 800700a:	4906      	ldr	r1, [pc, #24]	; (8007024 <leds_setBlink+0x590>)
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4613      	mov	r3, r2
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	4413      	add	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	440b      	add	r3, r1
 8007018:	3344      	adds	r3, #68	; 0x44
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4603      	mov	r3, r0
 8007020:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007022:	e017      	b.n	8007054 <leds_setBlink+0x5c0>
 8007024:	200009d8 	.word	0x200009d8
 8007028:	4989      	ldr	r1, [pc, #548]	; (8007250 <leds_setBlink+0x7bc>)
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4613      	mov	r3, r2
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	4413      	add	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	440b      	add	r3, r1
 8007036:	330c      	adds	r3, #12
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	b2d8      	uxtb	r0, r3
 800703c:	4984      	ldr	r1, [pc, #528]	; (8007250 <leds_setBlink+0x7bc>)
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4613      	mov	r3, r2
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	4413      	add	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	440b      	add	r3, r1
 800704a:	3344      	adds	r3, #68	; 0x44
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4603      	mov	r3, r0
 8007052:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch1_tim, leds_info.leds[s_led].pwmch1_timch, leds_info.leds[s_led].pwmch1_value0);
 8007054:	497e      	ldr	r1, [pc, #504]	; (8007250 <leds_setBlink+0x7bc>)
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	4413      	add	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	440b      	add	r3, r1
 8007062:	3350      	adds	r3, #80	; 0x50
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d116      	bne.n	8007098 <leds_setBlink+0x604>
 800706a:	4979      	ldr	r1, [pc, #484]	; (8007250 <leds_setBlink+0x7bc>)
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4613      	mov	r3, r2
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	4413      	add	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	440b      	add	r3, r1
 8007078:	3318      	adds	r3, #24
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b2d8      	uxtb	r0, r3
 800707e:	4974      	ldr	r1, [pc, #464]	; (8007250 <leds_setBlink+0x7bc>)
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4613      	mov	r3, r2
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	4413      	add	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	440b      	add	r3, r1
 800708c:	334c      	adds	r3, #76	; 0x4c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4602      	mov	r2, r0
 8007094:	635a      	str	r2, [r3, #52]	; 0x34
 8007096:	e059      	b.n	800714c <leds_setBlink+0x6b8>
 8007098:	496d      	ldr	r1, [pc, #436]	; (8007250 <leds_setBlink+0x7bc>)
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4613      	mov	r3, r2
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	4413      	add	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	440b      	add	r3, r1
 80070a6:	3350      	adds	r3, #80	; 0x50
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d116      	bne.n	80070dc <leds_setBlink+0x648>
 80070ae:	4968      	ldr	r1, [pc, #416]	; (8007250 <leds_setBlink+0x7bc>)
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4613      	mov	r3, r2
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4413      	add	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	440b      	add	r3, r1
 80070bc:	3318      	adds	r3, #24
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	b2d8      	uxtb	r0, r3
 80070c2:	4963      	ldr	r1, [pc, #396]	; (8007250 <leds_setBlink+0x7bc>)
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4613      	mov	r3, r2
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	4413      	add	r3, r2
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	440b      	add	r3, r1
 80070d0:	334c      	adds	r3, #76	; 0x4c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4603      	mov	r3, r0
 80070d8:	6393      	str	r3, [r2, #56]	; 0x38
 80070da:	e037      	b.n	800714c <leds_setBlink+0x6b8>
 80070dc:	495c      	ldr	r1, [pc, #368]	; (8007250 <leds_setBlink+0x7bc>)
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4613      	mov	r3, r2
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	440b      	add	r3, r1
 80070ea:	3350      	adds	r3, #80	; 0x50
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d116      	bne.n	8007120 <leds_setBlink+0x68c>
 80070f2:	4957      	ldr	r1, [pc, #348]	; (8007250 <leds_setBlink+0x7bc>)
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4613      	mov	r3, r2
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	4413      	add	r3, r2
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	440b      	add	r3, r1
 8007100:	3318      	adds	r3, #24
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b2d8      	uxtb	r0, r3
 8007106:	4952      	ldr	r1, [pc, #328]	; (8007250 <leds_setBlink+0x7bc>)
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4613      	mov	r3, r2
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	4413      	add	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	440b      	add	r3, r1
 8007114:	334c      	adds	r3, #76	; 0x4c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4603      	mov	r3, r0
 800711c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800711e:	e015      	b.n	800714c <leds_setBlink+0x6b8>
 8007120:	494b      	ldr	r1, [pc, #300]	; (8007250 <leds_setBlink+0x7bc>)
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4613      	mov	r3, r2
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	4413      	add	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	440b      	add	r3, r1
 800712e:	3318      	adds	r3, #24
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b2d8      	uxtb	r0, r3
 8007134:	4946      	ldr	r1, [pc, #280]	; (8007250 <leds_setBlink+0x7bc>)
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4613      	mov	r3, r2
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	440b      	add	r3, r1
 8007142:	334c      	adds	r3, #76	; 0x4c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch2_tim, leds_info.leds[s_led].pwmch2_timch, leds_info.leds[s_led].pwmch2_value0);
 800714c:	4940      	ldr	r1, [pc, #256]	; (8007250 <leds_setBlink+0x7bc>)
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4613      	mov	r3, r2
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	4413      	add	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	440b      	add	r3, r1
 800715a:	3358      	adds	r3, #88	; 0x58
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d116      	bne.n	8007190 <leds_setBlink+0x6fc>
 8007162:	493b      	ldr	r1, [pc, #236]	; (8007250 <leds_setBlink+0x7bc>)
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4613      	mov	r3, r2
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	4413      	add	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	440b      	add	r3, r1
 8007170:	3324      	adds	r3, #36	; 0x24
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	b2d8      	uxtb	r0, r3
 8007176:	4936      	ldr	r1, [pc, #216]	; (8007250 <leds_setBlink+0x7bc>)
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4613      	mov	r3, r2
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	4413      	add	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	440b      	add	r3, r1
 8007184:	3354      	adds	r3, #84	; 0x54
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4602      	mov	r2, r0
 800718c:	635a      	str	r2, [r3, #52]	; 0x34
 800718e:	e059      	b.n	8007244 <leds_setBlink+0x7b0>
 8007190:	492f      	ldr	r1, [pc, #188]	; (8007250 <leds_setBlink+0x7bc>)
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4613      	mov	r3, r2
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	4413      	add	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	440b      	add	r3, r1
 800719e:	3358      	adds	r3, #88	; 0x58
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d116      	bne.n	80071d4 <leds_setBlink+0x740>
 80071a6:	492a      	ldr	r1, [pc, #168]	; (8007250 <leds_setBlink+0x7bc>)
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4613      	mov	r3, r2
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	4413      	add	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	440b      	add	r3, r1
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b2d8      	uxtb	r0, r3
 80071ba:	4925      	ldr	r1, [pc, #148]	; (8007250 <leds_setBlink+0x7bc>)
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4613      	mov	r3, r2
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	4413      	add	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	440b      	add	r3, r1
 80071c8:	3354      	adds	r3, #84	; 0x54
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4603      	mov	r3, r0
 80071d0:	6393      	str	r3, [r2, #56]	; 0x38
 80071d2:	e037      	b.n	8007244 <leds_setBlink+0x7b0>
 80071d4:	491e      	ldr	r1, [pc, #120]	; (8007250 <leds_setBlink+0x7bc>)
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	440b      	add	r3, r1
 80071e2:	3358      	adds	r3, #88	; 0x58
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d116      	bne.n	8007218 <leds_setBlink+0x784>
 80071ea:	4919      	ldr	r1, [pc, #100]	; (8007250 <leds_setBlink+0x7bc>)
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4613      	mov	r3, r2
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	4413      	add	r3, r2
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	440b      	add	r3, r1
 80071f8:	3324      	adds	r3, #36	; 0x24
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	b2d8      	uxtb	r0, r3
 80071fe:	4914      	ldr	r1, [pc, #80]	; (8007250 <leds_setBlink+0x7bc>)
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4613      	mov	r3, r2
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	4413      	add	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	440b      	add	r3, r1
 800720c:	3354      	adds	r3, #84	; 0x54
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4603      	mov	r3, r0
 8007214:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007216:	e015      	b.n	8007244 <leds_setBlink+0x7b0>
 8007218:	490d      	ldr	r1, [pc, #52]	; (8007250 <leds_setBlink+0x7bc>)
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4613      	mov	r3, r2
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	4413      	add	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	440b      	add	r3, r1
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	b2d8      	uxtb	r0, r3
 800722c:	4908      	ldr	r1, [pc, #32]	; (8007250 <leds_setBlink+0x7bc>)
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4613      	mov	r3, r2
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	440b      	add	r3, r1
 800723a:	3354      	adds	r3, #84	; 0x54
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	4603      	mov	r3, r0
 8007242:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}

	return 1;
 8007244:	2301      	movs	r3, #1
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200009d8 	.word	0x200009d8

08007254 <leds_setFade>:
  * @param  pwm_val - pwm value can be for pwm led from LEDS_MIN_PWM_VALUE to LEDS_MAX_PWM_VALUE
  * 					or 0xXXBBGGRR format for RGB led
  * @retval 1 if success, 0 if failed
  */
uint8_t leds_setFade(uint32_t s_led, uint32_t fade_time, uint32_t pwm_val)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	if( s_led >= LEDS_NUM )
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <leds_setFade+0x18>
	{
		return 0;
 8007266:	2300      	movs	r3, #0
 8007268:	f000 bc27 	b.w	8007aba <leds_setFade+0x866>
	}

	//PWM led
	if( leds_info.leds[s_led].type == led_pwm )
 800726c:	4998      	ldr	r1, [pc, #608]	; (80074d0 <leds_setFade+0x27c>)
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4613      	mov	r3, r2
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	4413      	add	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	440b      	add	r3, r1
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	f040 812a 	bne.w	80074d8 <leds_setFade+0x284>
	{
		if( (pwm_val < LEDS_MIN_PWM_VALUE) || (pwm_val > LEDS_MAX_PWM_VALUE) )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2bff      	cmp	r3, #255	; 0xff
 8007288:	d902      	bls.n	8007290 <leds_setFade+0x3c>
		{
			return 0;
 800728a:	2300      	movs	r3, #0
 800728c:	f000 bc15 	b.w	8007aba <leds_setFade+0x866>
		}
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)leds_info.leds[s_led].pwmch0_cur_value;
 8007290:	498f      	ldr	r1, [pc, #572]	; (80074d0 <leds_setFade+0x27c>)
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4613      	mov	r3, r2
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	4413      	add	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	440b      	add	r3, r1
 800729e:	3308      	adds	r3, #8
 80072a0:	edd3 7a00 	vldr	s15, [r3]
 80072a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a8:	edc7 7a00 	vstr	s15, [r7]
 80072ac:	783b      	ldrb	r3, [r7, #0]
 80072ae:	b2d8      	uxtb	r0, r3
 80072b0:	4987      	ldr	r1, [pc, #540]	; (80074d0 <leds_setFade+0x27c>)
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4613      	mov	r3, r2
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	4413      	add	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	440b      	add	r3, r1
 80072be:	330c      	adds	r3, #12
 80072c0:	4602      	mov	r2, r0
 80072c2:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)pwm_val;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	b2d8      	uxtb	r0, r3
 80072c8:	4981      	ldr	r1, [pc, #516]	; (80074d0 <leds_setFade+0x27c>)
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4613      	mov	r3, r2
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4413      	add	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	440b      	add	r3, r1
 80072d6:	330d      	adds	r3, #13
 80072d8:	4602      	mov	r2, r0
 80072da:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = fade_time;
 80072dc:	497c      	ldr	r1, [pc, #496]	; (80074d0 <leds_setFade+0x27c>)
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4613      	mov	r3, r2
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	4413      	add	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	440b      	add	r3, r1
 80072ea:	332c      	adds	r3, #44	; 0x2c
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_fade )
 80072f0:	4977      	ldr	r1, [pc, #476]	; (80074d0 <leds_setFade+0x27c>)
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4613      	mov	r3, r2
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3302      	adds	r3, #2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b03      	cmp	r3, #3
 8007306:	f000 83d7 	beq.w	8007ab8 <leds_setFade+0x864>
		{
			leds_info.leds[s_led].step_cnt = fade_time / LEDS_FADE_STEP_TIME;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4a71      	ldr	r2, [pc, #452]	; (80074d4 <leds_setFade+0x280>)
 800730e:	fba2 2303 	umull	r2, r3, r2, r3
 8007312:	0919      	lsrs	r1, r3, #4
 8007314:	486e      	ldr	r0, [pc, #440]	; (80074d0 <leds_setFade+0x27c>)
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4613      	mov	r3, r2
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	4413      	add	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4403      	add	r3, r0
 8007322:	3338      	adds	r3, #56	; 0x38
 8007324:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].step_cnt == 0 )
 8007326:	496a      	ldr	r1, [pc, #424]	; (80074d0 <leds_setFade+0x27c>)
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4613      	mov	r3, r2
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	4413      	add	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	440b      	add	r3, r1
 8007334:	3338      	adds	r3, #56	; 0x38
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <leds_setFade+0xfc>
				leds_info.leds[s_led].step_cnt = 1;
 800733c:	4964      	ldr	r1, [pc, #400]	; (80074d0 <leds_setFade+0x27c>)
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4613      	mov	r3, r2
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	440b      	add	r3, r1
 800734a:	3338      	adds	r3, #56	; 0x38
 800734c:	2201      	movs	r2, #1
 800734e:	601a      	str	r2, [r3, #0]
			leds_info.leds[s_led].pwmch0_step = ((float)pwm_val - (float)leds_info.leds[s_led].pwmch0_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800735a:	495d      	ldr	r1, [pc, #372]	; (80074d0 <leds_setFade+0x27c>)
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4613      	mov	r3, r2
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	4413      	add	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	440b      	add	r3, r1
 8007368:	330c      	adds	r3, #12
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	ee77 6a67 	vsub.f32	s13, s14, s15
 800737a:	4955      	ldr	r1, [pc, #340]	; (80074d0 <leds_setFade+0x27c>)
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4613      	mov	r3, r2
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	4413      	add	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	440b      	add	r3, r1
 8007388:	3338      	adds	r3, #56	; 0x38
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	ee07 3a90 	vmov	s15, r3
 8007390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007398:	494d      	ldr	r1, [pc, #308]	; (80074d0 <leds_setFade+0x27c>)
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4613      	mov	r3, r2
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4413      	add	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	440b      	add	r3, r1
 80073a6:	3310      	adds	r3, #16
 80073a8:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].mode = led_fade;
 80073ac:	4948      	ldr	r1, [pc, #288]	; (80074d0 <leds_setFade+0x27c>)
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4613      	mov	r3, r2
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	4413      	add	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	440b      	add	r3, r1
 80073ba:	3302      	adds	r3, #2
 80073bc:	2203      	movs	r2, #3
 80073be:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = LEDS_FADE_STEP_TIME;
 80073c0:	4943      	ldr	r1, [pc, #268]	; (80074d0 <leds_setFade+0x27c>)
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4613      	mov	r3, r2
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	4413      	add	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	440b      	add	r3, r1
 80073ce:	3304      	adds	r3, #4
 80073d0:	2214      	movs	r2, #20
 80073d2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 80073d4:	493e      	ldr	r1, [pc, #248]	; (80074d0 <leds_setFade+0x27c>)
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4613      	mov	r3, r2
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	4413      	add	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	440b      	add	r3, r1
 80073e2:	3348      	adds	r3, #72	; 0x48
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d116      	bne.n	8007418 <leds_setFade+0x1c4>
 80073ea:	4939      	ldr	r1, [pc, #228]	; (80074d0 <leds_setFade+0x27c>)
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4613      	mov	r3, r2
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4413      	add	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	440b      	add	r3, r1
 80073f8:	330c      	adds	r3, #12
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	b2d8      	uxtb	r0, r3
 80073fe:	4934      	ldr	r1, [pc, #208]	; (80074d0 <leds_setFade+0x27c>)
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4613      	mov	r3, r2
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	4413      	add	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	440b      	add	r3, r1
 800740c:	3344      	adds	r3, #68	; 0x44
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4602      	mov	r2, r0
 8007414:	635a      	str	r2, [r3, #52]	; 0x34
 8007416:	e34f      	b.n	8007ab8 <leds_setFade+0x864>
 8007418:	492d      	ldr	r1, [pc, #180]	; (80074d0 <leds_setFade+0x27c>)
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	4413      	add	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	440b      	add	r3, r1
 8007426:	3348      	adds	r3, #72	; 0x48
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b04      	cmp	r3, #4
 800742c:	d116      	bne.n	800745c <leds_setFade+0x208>
 800742e:	4928      	ldr	r1, [pc, #160]	; (80074d0 <leds_setFade+0x27c>)
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4613      	mov	r3, r2
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	4413      	add	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	440b      	add	r3, r1
 800743c:	330c      	adds	r3, #12
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b2d8      	uxtb	r0, r3
 8007442:	4923      	ldr	r1, [pc, #140]	; (80074d0 <leds_setFade+0x27c>)
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4613      	mov	r3, r2
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	440b      	add	r3, r1
 8007450:	3344      	adds	r3, #68	; 0x44
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4603      	mov	r3, r0
 8007458:	6393      	str	r3, [r2, #56]	; 0x38
 800745a:	e32d      	b.n	8007ab8 <leds_setFade+0x864>
 800745c:	491c      	ldr	r1, [pc, #112]	; (80074d0 <leds_setFade+0x27c>)
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4613      	mov	r3, r2
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	4413      	add	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	440b      	add	r3, r1
 800746a:	3348      	adds	r3, #72	; 0x48
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b08      	cmp	r3, #8
 8007470:	d116      	bne.n	80074a0 <leds_setFade+0x24c>
 8007472:	4917      	ldr	r1, [pc, #92]	; (80074d0 <leds_setFade+0x27c>)
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4613      	mov	r3, r2
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	4413      	add	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	440b      	add	r3, r1
 8007480:	330c      	adds	r3, #12
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b2d8      	uxtb	r0, r3
 8007486:	4912      	ldr	r1, [pc, #72]	; (80074d0 <leds_setFade+0x27c>)
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4613      	mov	r3, r2
 800748c:	011b      	lsls	r3, r3, #4
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	440b      	add	r3, r1
 8007494:	3344      	adds	r3, #68	; 0x44
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4603      	mov	r3, r0
 800749c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800749e:	e30b      	b.n	8007ab8 <leds_setFade+0x864>
 80074a0:	490b      	ldr	r1, [pc, #44]	; (80074d0 <leds_setFade+0x27c>)
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4613      	mov	r3, r2
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	4413      	add	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	440b      	add	r3, r1
 80074ae:	330c      	adds	r3, #12
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b2d8      	uxtb	r0, r3
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <leds_setFade+0x27c>)
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4613      	mov	r3, r2
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	4413      	add	r3, r2
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	440b      	add	r3, r1
 80074c2:	3344      	adds	r3, #68	; 0x44
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	4603      	mov	r3, r0
 80074ca:	6413      	str	r3, [r2, #64]	; 0x40
 80074cc:	e2f4      	b.n	8007ab8 <leds_setFade+0x864>
 80074ce:	bf00      	nop
 80074d0:	200009d8 	.word	0x200009d8
 80074d4:	cccccccd 	.word	0xcccccccd
		}
	}
	//RGB
	else if( leds_info.leds[s_led].type == led_rgb )
 80074d8:	49ca      	ldr	r1, [pc, #808]	; (8007804 <leds_setFade+0x5b0>)
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4613      	mov	r3, r2
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	4413      	add	r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	440b      	add	r3, r1
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	f040 82e2 	bne.w	8007ab4 <leds_setFade+0x860>
	{
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)leds_info.leds[s_led].pwmch0_cur_value;
 80074f0:	49c4      	ldr	r1, [pc, #784]	; (8007804 <leds_setFade+0x5b0>)
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4613      	mov	r3, r2
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	440b      	add	r3, r1
 80074fe:	3308      	adds	r3, #8
 8007500:	edd3 7a00 	vldr	s15, [r3]
 8007504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007508:	edc7 7a00 	vstr	s15, [r7]
 800750c:	783b      	ldrb	r3, [r7, #0]
 800750e:	b2d8      	uxtb	r0, r3
 8007510:	49bc      	ldr	r1, [pc, #752]	; (8007804 <leds_setFade+0x5b0>)
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4613      	mov	r3, r2
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	4413      	add	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	440b      	add	r3, r1
 800751e:	330c      	adds	r3, #12
 8007520:	4602      	mov	r2, r0
 8007522:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)(pwm_val & 0xFF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	b2d8      	uxtb	r0, r3
 8007528:	49b6      	ldr	r1, [pc, #728]	; (8007804 <leds_setFade+0x5b0>)
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4613      	mov	r3, r2
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	440b      	add	r3, r1
 8007536:	330d      	adds	r3, #13
 8007538:	4602      	mov	r2, r0
 800753a:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value0 = (uint8_t)leds_info.leds[s_led].pwmch1_cur_value;
 800753c:	49b1      	ldr	r1, [pc, #708]	; (8007804 <leds_setFade+0x5b0>)
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4613      	mov	r3, r2
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4413      	add	r3, r2
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	440b      	add	r3, r1
 800754a:	3314      	adds	r3, #20
 800754c:	edd3 7a00 	vldr	s15, [r3]
 8007550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007554:	edc7 7a00 	vstr	s15, [r7]
 8007558:	783b      	ldrb	r3, [r7, #0]
 800755a:	b2d8      	uxtb	r0, r3
 800755c:	49a9      	ldr	r1, [pc, #676]	; (8007804 <leds_setFade+0x5b0>)
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4613      	mov	r3, r2
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	4413      	add	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	440b      	add	r3, r1
 800756a:	3318      	adds	r3, #24
 800756c:	4602      	mov	r2, r0
 800756e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value1 = (uint8_t)((pwm_val >> 8) & 0xFF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	0a1b      	lsrs	r3, r3, #8
 8007574:	b2d8      	uxtb	r0, r3
 8007576:	49a3      	ldr	r1, [pc, #652]	; (8007804 <leds_setFade+0x5b0>)
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4613      	mov	r3, r2
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	4413      	add	r3, r2
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	440b      	add	r3, r1
 8007584:	3319      	adds	r3, #25
 8007586:	4602      	mov	r2, r0
 8007588:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value0 = (uint8_t)leds_info.leds[s_led].pwmch2_cur_value;
 800758a:	499e      	ldr	r1, [pc, #632]	; (8007804 <leds_setFade+0x5b0>)
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	4613      	mov	r3, r2
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4413      	add	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	440b      	add	r3, r1
 8007598:	3320      	adds	r3, #32
 800759a:	edd3 7a00 	vldr	s15, [r3]
 800759e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a2:	edc7 7a00 	vstr	s15, [r7]
 80075a6:	783b      	ldrb	r3, [r7, #0]
 80075a8:	b2d8      	uxtb	r0, r3
 80075aa:	4996      	ldr	r1, [pc, #600]	; (8007804 <leds_setFade+0x5b0>)
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4613      	mov	r3, r2
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4413      	add	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	440b      	add	r3, r1
 80075b8:	3324      	adds	r3, #36	; 0x24
 80075ba:	4602      	mov	r2, r0
 80075bc:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value1 = (uint8_t)((pwm_val >> 16) & 0xFF);;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	0c1b      	lsrs	r3, r3, #16
 80075c2:	b2d8      	uxtb	r0, r3
 80075c4:	498f      	ldr	r1, [pc, #572]	; (8007804 <leds_setFade+0x5b0>)
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4613      	mov	r3, r2
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	4413      	add	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	440b      	add	r3, r1
 80075d2:	3325      	adds	r3, #37	; 0x25
 80075d4:	4602      	mov	r2, r0
 80075d6:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = fade_time;
 80075d8:	498a      	ldr	r1, [pc, #552]	; (8007804 <leds_setFade+0x5b0>)
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4613      	mov	r3, r2
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	4413      	add	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	440b      	add	r3, r1
 80075e6:	332c      	adds	r3, #44	; 0x2c
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_fade )
 80075ec:	4985      	ldr	r1, [pc, #532]	; (8007804 <leds_setFade+0x5b0>)
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	4413      	add	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	440b      	add	r3, r1
 80075fa:	3302      	adds	r3, #2
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b03      	cmp	r3, #3
 8007602:	f000 8259 	beq.w	8007ab8 <leds_setFade+0x864>
		{
			leds_info.leds[s_led].step_cnt = fade_time / LEDS_FADE_STEP_TIME;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a7f      	ldr	r2, [pc, #508]	; (8007808 <leds_setFade+0x5b4>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	0919      	lsrs	r1, r3, #4
 8007610:	487c      	ldr	r0, [pc, #496]	; (8007804 <leds_setFade+0x5b0>)
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4613      	mov	r3, r2
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	4413      	add	r3, r2
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	4403      	add	r3, r0
 800761e:	3338      	adds	r3, #56	; 0x38
 8007620:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].step_cnt == 0 )
 8007622:	4978      	ldr	r1, [pc, #480]	; (8007804 <leds_setFade+0x5b0>)
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4613      	mov	r3, r2
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	440b      	add	r3, r1
 8007630:	3338      	adds	r3, #56	; 0x38
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <leds_setFade+0x3f8>
				leds_info.leds[s_led].step_cnt = 1;
 8007638:	4972      	ldr	r1, [pc, #456]	; (8007804 <leds_setFade+0x5b0>)
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4613      	mov	r3, r2
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	4413      	add	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	440b      	add	r3, r1
 8007646:	3338      	adds	r3, #56	; 0x38
 8007648:	2201      	movs	r2, #1
 800764a:	601a      	str	r2, [r3, #0]
			leds_info.leds[s_led].pwmch0_step = ((float)leds_info.leds[s_led].pwmch0_value1 - (float)leds_info.leds[s_led].pwmch0_value0) / (float)leds_info.leds[s_led].step_cnt;
 800764c:	496d      	ldr	r1, [pc, #436]	; (8007804 <leds_setFade+0x5b0>)
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4613      	mov	r3, r2
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	440b      	add	r3, r1
 800765a:	330d      	adds	r3, #13
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007668:	4966      	ldr	r1, [pc, #408]	; (8007804 <leds_setFade+0x5b0>)
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4613      	mov	r3, r2
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	4413      	add	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	440b      	add	r3, r1
 8007676:	330c      	adds	r3, #12
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007688:	495e      	ldr	r1, [pc, #376]	; (8007804 <leds_setFade+0x5b0>)
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4613      	mov	r3, r2
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	440b      	add	r3, r1
 8007696:	3338      	adds	r3, #56	; 0x38
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a6:	4957      	ldr	r1, [pc, #348]	; (8007804 <leds_setFade+0x5b0>)
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4613      	mov	r3, r2
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	4413      	add	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	440b      	add	r3, r1
 80076b4:	3310      	adds	r3, #16
 80076b6:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].pwmch1_step = ((float)leds_info.leds[s_led].pwmch1_value1 - (float)leds_info.leds[s_led].pwmch1_value0) / (float)leds_info.leds[s_led].step_cnt;
 80076ba:	4952      	ldr	r1, [pc, #328]	; (8007804 <leds_setFade+0x5b0>)
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4613      	mov	r3, r2
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	4413      	add	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	440b      	add	r3, r1
 80076c8:	3319      	adds	r3, #25
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076d6:	494b      	ldr	r1, [pc, #300]	; (8007804 <leds_setFade+0x5b0>)
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4613      	mov	r3, r2
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	440b      	add	r3, r1
 80076e4:	3318      	adds	r3, #24
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80076f6:	4943      	ldr	r1, [pc, #268]	; (8007804 <leds_setFade+0x5b0>)
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4613      	mov	r3, r2
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	4413      	add	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	440b      	add	r3, r1
 8007704:	3338      	adds	r3, #56	; 0x38
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007714:	493b      	ldr	r1, [pc, #236]	; (8007804 <leds_setFade+0x5b0>)
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4613      	mov	r3, r2
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	4413      	add	r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	440b      	add	r3, r1
 8007722:	331c      	adds	r3, #28
 8007724:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].pwmch2_step = ((float)leds_info.leds[s_led].pwmch2_value1 - (float)leds_info.leds[s_led].pwmch2_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007728:	4936      	ldr	r1, [pc, #216]	; (8007804 <leds_setFade+0x5b0>)
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4613      	mov	r3, r2
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	4413      	add	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	440b      	add	r3, r1
 8007736:	3325      	adds	r3, #37	; 0x25
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007744:	492f      	ldr	r1, [pc, #188]	; (8007804 <leds_setFade+0x5b0>)
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4613      	mov	r3, r2
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	4413      	add	r3, r2
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	440b      	add	r3, r1
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007760:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007764:	4927      	ldr	r1, [pc, #156]	; (8007804 <leds_setFade+0x5b0>)
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4613      	mov	r3, r2
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	440b      	add	r3, r1
 8007772:	3338      	adds	r3, #56	; 0x38
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800777e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007782:	4920      	ldr	r1, [pc, #128]	; (8007804 <leds_setFade+0x5b0>)
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4613      	mov	r3, r2
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	4413      	add	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	440b      	add	r3, r1
 8007790:	3328      	adds	r3, #40	; 0x28
 8007792:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].mode = led_fade;
 8007796:	491b      	ldr	r1, [pc, #108]	; (8007804 <leds_setFade+0x5b0>)
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4613      	mov	r3, r2
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	4413      	add	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	440b      	add	r3, r1
 80077a4:	3302      	adds	r3, #2
 80077a6:	2203      	movs	r2, #3
 80077a8:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = LEDS_FADE_STEP_TIME;
 80077aa:	4916      	ldr	r1, [pc, #88]	; (8007804 <leds_setFade+0x5b0>)
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4613      	mov	r3, r2
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	4413      	add	r3, r2
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	440b      	add	r3, r1
 80077b8:	3304      	adds	r3, #4
 80077ba:	2214      	movs	r2, #20
 80077bc:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 80077be:	4911      	ldr	r1, [pc, #68]	; (8007804 <leds_setFade+0x5b0>)
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4613      	mov	r3, r2
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4413      	add	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	440b      	add	r3, r1
 80077cc:	3348      	adds	r3, #72	; 0x48
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11c      	bne.n	800780e <leds_setFade+0x5ba>
 80077d4:	490b      	ldr	r1, [pc, #44]	; (8007804 <leds_setFade+0x5b0>)
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4613      	mov	r3, r2
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	4413      	add	r3, r2
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	440b      	add	r3, r1
 80077e2:	330c      	adds	r3, #12
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b2d8      	uxtb	r0, r3
 80077e8:	4906      	ldr	r1, [pc, #24]	; (8007804 <leds_setFade+0x5b0>)
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4613      	mov	r3, r2
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	4413      	add	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	440b      	add	r3, r1
 80077f6:	3344      	adds	r3, #68	; 0x44
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4602      	mov	r2, r0
 80077fe:	635a      	str	r2, [r3, #52]	; 0x34
 8007800:	e004      	b.n	800780c <leds_setFade+0x5b8>
 8007802:	bf00      	nop
 8007804:	200009d8 	.word	0x200009d8
 8007808:	cccccccd 	.word	0xcccccccd
 800780c:	e059      	b.n	80078c2 <leds_setFade+0x66e>
 800780e:	49ae      	ldr	r1, [pc, #696]	; (8007ac8 <leds_setFade+0x874>)
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4613      	mov	r3, r2
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	4413      	add	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	440b      	add	r3, r1
 800781c:	3348      	adds	r3, #72	; 0x48
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b04      	cmp	r3, #4
 8007822:	d116      	bne.n	8007852 <leds_setFade+0x5fe>
 8007824:	49a8      	ldr	r1, [pc, #672]	; (8007ac8 <leds_setFade+0x874>)
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4613      	mov	r3, r2
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	4413      	add	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	440b      	add	r3, r1
 8007832:	330c      	adds	r3, #12
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	b2d8      	uxtb	r0, r3
 8007838:	49a3      	ldr	r1, [pc, #652]	; (8007ac8 <leds_setFade+0x874>)
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4613      	mov	r3, r2
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	4413      	add	r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	440b      	add	r3, r1
 8007846:	3344      	adds	r3, #68	; 0x44
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4603      	mov	r3, r0
 800784e:	6393      	str	r3, [r2, #56]	; 0x38
 8007850:	e037      	b.n	80078c2 <leds_setFade+0x66e>
 8007852:	499d      	ldr	r1, [pc, #628]	; (8007ac8 <leds_setFade+0x874>)
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4613      	mov	r3, r2
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	4413      	add	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	440b      	add	r3, r1
 8007860:	3348      	adds	r3, #72	; 0x48
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d116      	bne.n	8007896 <leds_setFade+0x642>
 8007868:	4997      	ldr	r1, [pc, #604]	; (8007ac8 <leds_setFade+0x874>)
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4613      	mov	r3, r2
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	4413      	add	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	440b      	add	r3, r1
 8007876:	330c      	adds	r3, #12
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b2d8      	uxtb	r0, r3
 800787c:	4992      	ldr	r1, [pc, #584]	; (8007ac8 <leds_setFade+0x874>)
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4613      	mov	r3, r2
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	440b      	add	r3, r1
 800788a:	3344      	adds	r3, #68	; 0x44
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4603      	mov	r3, r0
 8007892:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007894:	e015      	b.n	80078c2 <leds_setFade+0x66e>
 8007896:	498c      	ldr	r1, [pc, #560]	; (8007ac8 <leds_setFade+0x874>)
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4613      	mov	r3, r2
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	4413      	add	r3, r2
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	440b      	add	r3, r1
 80078a4:	330c      	adds	r3, #12
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	b2d8      	uxtb	r0, r3
 80078aa:	4987      	ldr	r1, [pc, #540]	; (8007ac8 <leds_setFade+0x874>)
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4613      	mov	r3, r2
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	4413      	add	r3, r2
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	440b      	add	r3, r1
 80078b8:	3344      	adds	r3, #68	; 0x44
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4603      	mov	r3, r0
 80078c0:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch1_tim, leds_info.leds[s_led].pwmch1_timch, leds_info.leds[s_led].pwmch1_value0);
 80078c2:	4981      	ldr	r1, [pc, #516]	; (8007ac8 <leds_setFade+0x874>)
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4613      	mov	r3, r2
 80078c8:	011b      	lsls	r3, r3, #4
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	440b      	add	r3, r1
 80078d0:	3350      	adds	r3, #80	; 0x50
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d116      	bne.n	8007906 <leds_setFade+0x6b2>
 80078d8:	497b      	ldr	r1, [pc, #492]	; (8007ac8 <leds_setFade+0x874>)
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4613      	mov	r3, r2
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	4413      	add	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	440b      	add	r3, r1
 80078e6:	3318      	adds	r3, #24
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b2d8      	uxtb	r0, r3
 80078ec:	4976      	ldr	r1, [pc, #472]	; (8007ac8 <leds_setFade+0x874>)
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4613      	mov	r3, r2
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	4413      	add	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	440b      	add	r3, r1
 80078fa:	334c      	adds	r3, #76	; 0x4c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4602      	mov	r2, r0
 8007902:	635a      	str	r2, [r3, #52]	; 0x34
 8007904:	e059      	b.n	80079ba <leds_setFade+0x766>
 8007906:	4970      	ldr	r1, [pc, #448]	; (8007ac8 <leds_setFade+0x874>)
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4613      	mov	r3, r2
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	4413      	add	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	440b      	add	r3, r1
 8007914:	3350      	adds	r3, #80	; 0x50
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d116      	bne.n	800794a <leds_setFade+0x6f6>
 800791c:	496a      	ldr	r1, [pc, #424]	; (8007ac8 <leds_setFade+0x874>)
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4613      	mov	r3, r2
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	4413      	add	r3, r2
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	440b      	add	r3, r1
 800792a:	3318      	adds	r3, #24
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b2d8      	uxtb	r0, r3
 8007930:	4965      	ldr	r1, [pc, #404]	; (8007ac8 <leds_setFade+0x874>)
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4613      	mov	r3, r2
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	440b      	add	r3, r1
 800793e:	334c      	adds	r3, #76	; 0x4c
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4603      	mov	r3, r0
 8007946:	6393      	str	r3, [r2, #56]	; 0x38
 8007948:	e037      	b.n	80079ba <leds_setFade+0x766>
 800794a:	495f      	ldr	r1, [pc, #380]	; (8007ac8 <leds_setFade+0x874>)
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4613      	mov	r3, r2
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	4413      	add	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	3350      	adds	r3, #80	; 0x50
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d116      	bne.n	800798e <leds_setFade+0x73a>
 8007960:	4959      	ldr	r1, [pc, #356]	; (8007ac8 <leds_setFade+0x874>)
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4613      	mov	r3, r2
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3318      	adds	r3, #24
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b2d8      	uxtb	r0, r3
 8007974:	4954      	ldr	r1, [pc, #336]	; (8007ac8 <leds_setFade+0x874>)
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4613      	mov	r3, r2
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	4413      	add	r3, r2
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	440b      	add	r3, r1
 8007982:	334c      	adds	r3, #76	; 0x4c
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4603      	mov	r3, r0
 800798a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800798c:	e015      	b.n	80079ba <leds_setFade+0x766>
 800798e:	494e      	ldr	r1, [pc, #312]	; (8007ac8 <leds_setFade+0x874>)
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4613      	mov	r3, r2
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	4413      	add	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	440b      	add	r3, r1
 800799c:	3318      	adds	r3, #24
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b2d8      	uxtb	r0, r3
 80079a2:	4949      	ldr	r1, [pc, #292]	; (8007ac8 <leds_setFade+0x874>)
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4613      	mov	r3, r2
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	4413      	add	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	440b      	add	r3, r1
 80079b0:	334c      	adds	r3, #76	; 0x4c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4603      	mov	r3, r0
 80079b8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch2_tim, leds_info.leds[s_led].pwmch2_timch, leds_info.leds[s_led].pwmch2_value0);
 80079ba:	4943      	ldr	r1, [pc, #268]	; (8007ac8 <leds_setFade+0x874>)
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4613      	mov	r3, r2
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	4413      	add	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	440b      	add	r3, r1
 80079c8:	3358      	adds	r3, #88	; 0x58
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d116      	bne.n	80079fe <leds_setFade+0x7aa>
 80079d0:	493d      	ldr	r1, [pc, #244]	; (8007ac8 <leds_setFade+0x874>)
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4613      	mov	r3, r2
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4413      	add	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	440b      	add	r3, r1
 80079de:	3324      	adds	r3, #36	; 0x24
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b2d8      	uxtb	r0, r3
 80079e4:	4938      	ldr	r1, [pc, #224]	; (8007ac8 <leds_setFade+0x874>)
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4613      	mov	r3, r2
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	4413      	add	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	440b      	add	r3, r1
 80079f2:	3354      	adds	r3, #84	; 0x54
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4602      	mov	r2, r0
 80079fa:	635a      	str	r2, [r3, #52]	; 0x34
 80079fc:	e05c      	b.n	8007ab8 <leds_setFade+0x864>
 80079fe:	4932      	ldr	r1, [pc, #200]	; (8007ac8 <leds_setFade+0x874>)
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4613      	mov	r3, r2
 8007a04:	011b      	lsls	r3, r3, #4
 8007a06:	4413      	add	r3, r2
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	440b      	add	r3, r1
 8007a0c:	3358      	adds	r3, #88	; 0x58
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d116      	bne.n	8007a42 <leds_setFade+0x7ee>
 8007a14:	492c      	ldr	r1, [pc, #176]	; (8007ac8 <leds_setFade+0x874>)
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	4413      	add	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	440b      	add	r3, r1
 8007a22:	3324      	adds	r3, #36	; 0x24
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b2d8      	uxtb	r0, r3
 8007a28:	4927      	ldr	r1, [pc, #156]	; (8007ac8 <leds_setFade+0x874>)
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4413      	add	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	440b      	add	r3, r1
 8007a36:	3354      	adds	r3, #84	; 0x54
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	6393      	str	r3, [r2, #56]	; 0x38
 8007a40:	e03a      	b.n	8007ab8 <leds_setFade+0x864>
 8007a42:	4921      	ldr	r1, [pc, #132]	; (8007ac8 <leds_setFade+0x874>)
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4613      	mov	r3, r2
 8007a48:	011b      	lsls	r3, r3, #4
 8007a4a:	4413      	add	r3, r2
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	440b      	add	r3, r1
 8007a50:	3358      	adds	r3, #88	; 0x58
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d116      	bne.n	8007a86 <leds_setFade+0x832>
 8007a58:	491b      	ldr	r1, [pc, #108]	; (8007ac8 <leds_setFade+0x874>)
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	4413      	add	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	440b      	add	r3, r1
 8007a66:	3324      	adds	r3, #36	; 0x24
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b2d8      	uxtb	r0, r3
 8007a6c:	4916      	ldr	r1, [pc, #88]	; (8007ac8 <leds_setFade+0x874>)
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4613      	mov	r3, r2
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	440b      	add	r3, r1
 8007a7a:	3354      	adds	r3, #84	; 0x54
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4603      	mov	r3, r0
 8007a82:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007a84:	e018      	b.n	8007ab8 <leds_setFade+0x864>
 8007a86:	4910      	ldr	r1, [pc, #64]	; (8007ac8 <leds_setFade+0x874>)
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	4413      	add	r3, r2
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	440b      	add	r3, r1
 8007a94:	3324      	adds	r3, #36	; 0x24
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b2d8      	uxtb	r0, r3
 8007a9a:	490b      	ldr	r1, [pc, #44]	; (8007ac8 <leds_setFade+0x874>)
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	4413      	add	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3354      	adds	r3, #84	; 0x54
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab2:	e001      	b.n	8007ab8 <leds_setFade+0x864>
		}
	}
	else
	{
		return 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e000      	b.n	8007aba <leds_setFade+0x866>
	}

	return 1;
 8007ab8:	2301      	movs	r3, #1
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	200009d8 	.word	0x200009d8

08007acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ad0:	f003 fafa 	bl	800b0c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ad4:	f000 f814 	bl	8007b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ad8:	f000 f9be 	bl	8007e58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007adc:	f000 f8ca 	bl	8007c74 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8007ae0:	f000 f966 	bl	8007db0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007ae4:	f000 f98e 	bl	8007e04 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8007ae8:	f000 f8f2 	bl	8007cd0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8007aec:	f000 f870 	bl	8007bd0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8007af0:	f00d f96c 	bl	8014dcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 8007af4:	f003 f968 	bl	800adc8 <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 8007af8:	f003 f996 	bl	800ae28 <system_Task>
 8007afc:	e7fc      	b.n	8007af8 <main+0x2c>
	...

08007b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b094      	sub	sp, #80	; 0x50
 8007b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b06:	f107 0320 	add.w	r3, r7, #32
 8007b0a:	2230      	movs	r2, #48	; 0x30
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f00d fe84 	bl	801581c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b14:	f107 030c 	add.w	r3, r7, #12
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	605a      	str	r2, [r3, #4]
 8007b1e:	609a      	str	r2, [r3, #8]
 8007b20:	60da      	str	r2, [r3, #12]
 8007b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b24:	2300      	movs	r3, #0
 8007b26:	60bb      	str	r3, [r7, #8]
 8007b28:	4b27      	ldr	r3, [pc, #156]	; (8007bc8 <SystemClock_Config+0xc8>)
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	4a26      	ldr	r2, [pc, #152]	; (8007bc8 <SystemClock_Config+0xc8>)
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b32:	6413      	str	r3, [r2, #64]	; 0x40
 8007b34:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <SystemClock_Config+0xc8>)
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b40:	2300      	movs	r3, #0
 8007b42:	607b      	str	r3, [r7, #4]
 8007b44:	4b21      	ldr	r3, [pc, #132]	; (8007bcc <SystemClock_Config+0xcc>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a20      	ldr	r2, [pc, #128]	; (8007bcc <SystemClock_Config+0xcc>)
 8007b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <SystemClock_Config+0xcc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b66:	2302      	movs	r3, #2
 8007b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8007b70:	230f      	movs	r3, #15
 8007b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8007b74:	2390      	movs	r3, #144	; 0x90
 8007b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007b78:	2304      	movs	r3, #4
 8007b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8007b7c:	2305      	movs	r3, #5
 8007b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b80:	f107 0320 	add.w	r3, r7, #32
 8007b84:	4618      	mov	r0, r3
 8007b86:	f006 fffb 	bl	800eb80 <HAL_RCC_OscConfig>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007b90:	f000 fa68 	bl	8008064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b94:	230f      	movs	r3, #15
 8007b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	2101      	movs	r1, #1
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f007 fa5d 	bl	800f070 <HAL_RCC_ClockConfig>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8007bbc:	f000 fa52 	bl	8008064 <Error_Handler>
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	3750      	adds	r7, #80	; 0x50
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	40007000 	.word	0x40007000

08007bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007be2:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007be4:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <MX_ADC1_Init+0x9c>)
 8007be6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007be8:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007bee:	4b1e      	ldr	r3, [pc, #120]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007bf4:	4b1c      	ldr	r3, [pc, #112]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007bfa:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c08:	4b17      	ldr	r3, [pc, #92]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007c0e:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c10:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <MX_ADC1_Init+0xa0>)
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007c14:	4b14      	ldr	r3, [pc, #80]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c28:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007c2e:	480e      	ldr	r0, [pc, #56]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c30:	f003 fab0 	bl	800b194 <HAL_ADC_Init>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8007c3a:	f000 fa13 	bl	8008064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007c42:	2301      	movs	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007c4a:	463b      	mov	r3, r7
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4806      	ldr	r0, [pc, #24]	; (8007c68 <MX_ADC1_Init+0x98>)
 8007c50:	f003 fcd4 	bl	800b5fc <HAL_ADC_ConfigChannel>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8007c5a:	f000 fa03 	bl	8008064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000a70 	.word	0x20000a70
 8007c6c:	40012000 	.word	0x40012000
 8007c70:	0f000001 	.word	0x0f000001

08007c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007c78:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007c7a:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <MX_I2C1_Init+0x54>)
 8007c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007c80:	4a12      	ldr	r2, [pc, #72]	; (8007ccc <MX_I2C1_Init+0x58>)
 8007c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007c8a:	4b0e      	ldr	r3, [pc, #56]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007c9e:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007ca4:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007cb0:	4804      	ldr	r0, [pc, #16]	; (8007cc4 <MX_I2C1_Init+0x50>)
 8007cb2:	f004 fd29 	bl	800c708 <HAL_I2C_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007cbc:	f000 f9d2 	bl	8008064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007cc0:	bf00      	nop
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000ab8 	.word	0x20000ab8
 8007cc8:	40005400 	.word	0x40005400
 8007ccc:	000186a0 	.word	0x000186a0

08007cd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cd6:	f107 0320 	add.w	r3, r7, #32
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ce0:	1d3b      	adds	r3, r7, #4
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	609a      	str	r2, [r3, #8]
 8007cea:	60da      	str	r2, [r3, #12]
 8007cec:	611a      	str	r2, [r3, #16]
 8007cee:	615a      	str	r2, [r3, #20]
 8007cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007cf2:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007cf4:	4a2d      	ldr	r2, [pc, #180]	; (8007dac <MX_TIM3_Init+0xdc>)
 8007cf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8007cf8:	4b2b      	ldr	r3, [pc, #172]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007cfa:	2277      	movs	r2, #119	; 0x77
 8007cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cfe:	4b2a      	ldr	r3, [pc, #168]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007d04:	4b28      	ldr	r3, [pc, #160]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d06:	f242 720f 	movw	r2, #9999	; 0x270f
 8007d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d0c:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d12:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007d18:	4823      	ldr	r0, [pc, #140]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d1a:	f007 fc77 	bl	800f60c <HAL_TIM_PWM_Init>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007d24:	f000 f99e 	bl	8008064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d30:	f107 0320 	add.w	r3, r7, #32
 8007d34:	4619      	mov	r1, r3
 8007d36:	481c      	ldr	r0, [pc, #112]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d38:	f008 f98c 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8007d42:	f000 f98f 	bl	8008064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d46:	2360      	movs	r3, #96	; 0x60
 8007d48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4812      	ldr	r0, [pc, #72]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d5e:	f007 fe5d 	bl	800fa1c <HAL_TIM_PWM_ConfigChannel>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8007d68:	f000 f97c 	bl	8008064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d6c:	1d3b      	adds	r3, r7, #4
 8007d6e:	2204      	movs	r2, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	480d      	ldr	r0, [pc, #52]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d74:	f007 fe52 	bl	800fa1c <HAL_TIM_PWM_ConfigChannel>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007d7e:	f000 f971 	bl	8008064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007d82:	1d3b      	adds	r3, r7, #4
 8007d84:	2208      	movs	r2, #8
 8007d86:	4619      	mov	r1, r3
 8007d88:	4807      	ldr	r0, [pc, #28]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d8a:	f007 fe47 	bl	800fa1c <HAL_TIM_PWM_ConfigChannel>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8007d94:	f000 f966 	bl	8008064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007d98:	4803      	ldr	r0, [pc, #12]	; (8007da8 <MX_TIM3_Init+0xd8>)
 8007d9a:	f000 fa47 	bl	800822c <HAL_TIM_MspPostInit>

}
 8007d9e:	bf00      	nop
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000b0c 	.word	0x20000b0c
 8007dac:	40000400 	.word	0x40000400

08007db0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007db4:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007db6:	4a12      	ldr	r2, [pc, #72]	; (8007e00 <MX_USART1_UART_Init+0x50>)
 8007db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007dc8:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007dce:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007dd6:	220c      	movs	r2, #12
 8007dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dda:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007de6:	4805      	ldr	r0, [pc, #20]	; (8007dfc <MX_USART1_UART_Init+0x4c>)
 8007de8:	f008 f9b6 	bl	8010158 <HAL_UART_Init>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007df2:	f000 f937 	bl	8008064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007df6:	bf00      	nop
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000b54 	.word	0x20000b54
 8007e00:	40011000 	.word	0x40011000

08007e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007e08:	4b11      	ldr	r3, [pc, #68]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <MX_USART2_UART_Init+0x50>)
 8007e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007e16:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007e1c:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e2a:	220c      	movs	r2, #12
 8007e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e2e:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e34:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007e3a:	4805      	ldr	r0, [pc, #20]	; (8007e50 <MX_USART2_UART_Init+0x4c>)
 8007e3c:	f008 f98c 	bl	8010158 <HAL_UART_Init>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007e46:	f000 f90d 	bl	8008064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007e4a:	bf00      	nop
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000b98 	.word	0x20000b98
 8007e54:	40004400 	.word	0x40004400

08007e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e5e:	f107 0314 	add.w	r3, r7, #20
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	605a      	str	r2, [r3, #4]
 8007e68:	609a      	str	r2, [r3, #8]
 8007e6a:	60da      	str	r2, [r3, #12]
 8007e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	4b45      	ldr	r3, [pc, #276]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	4a44      	ldr	r2, [pc, #272]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007e78:	f043 0304 	orr.w	r3, r3, #4
 8007e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e7e:	4b42      	ldr	r3, [pc, #264]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b3e      	ldr	r3, [pc, #248]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	4a3d      	ldr	r2, [pc, #244]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e98:	6313      	str	r3, [r2, #48]	; 0x30
 8007e9a:	4b3b      	ldr	r3, [pc, #236]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	4b37      	ldr	r3, [pc, #220]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	4a36      	ldr	r2, [pc, #216]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb6:	4b34      	ldr	r3, [pc, #208]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	4b30      	ldr	r3, [pc, #192]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	4a2f      	ldr	r2, [pc, #188]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ed2:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <MX_GPIO_Init+0x130>)
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	607b      	str	r3, [r7, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ee4:	4829      	ldr	r0, [pc, #164]	; (8007f8c <MX_GPIO_Init+0x134>)
 8007ee6:	f004 fbf5 	bl	800c6d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M0_GPIO_Port, MODEM_M0_Pin, GPIO_PIN_RESET);
 8007eea:	2200      	movs	r2, #0
 8007eec:	2120      	movs	r1, #32
 8007eee:	4828      	ldr	r0, [pc, #160]	; (8007f90 <MX_GPIO_Init+0x138>)
 8007ef0:	f004 fbf0 	bl	800c6d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007efa:	4826      	ldr	r0, [pc, #152]	; (8007f94 <MX_GPIO_Init+0x13c>)
 8007efc:	f004 fbea 	bl	800c6d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M1_GPIO_Port, MODEM_M1_Pin, GPIO_PIN_SET);
 8007f00:	2201      	movs	r2, #1
 8007f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f06:	4822      	ldr	r0, [pc, #136]	; (8007f90 <MX_GPIO_Init+0x138>)
 8007f08:	f004 fbe4 	bl	800c6d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8007f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8007f1e:	f107 0314 	add.w	r3, r7, #20
 8007f22:	4619      	mov	r1, r3
 8007f24:	4819      	ldr	r0, [pc, #100]	; (8007f8c <MX_GPIO_Init+0x134>)
 8007f26:	f004 f955 	bl	800c1d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 8007f2a:	f248 0320 	movw	r3, #32800	; 0x8020
 8007f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f30:	2301      	movs	r3, #1
 8007f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f34:	2301      	movs	r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4619      	mov	r1, r3
 8007f42:	4813      	ldr	r0, [pc, #76]	; (8007f90 <MX_GPIO_Init+0x138>)
 8007f44:	f004 f946 	bl	800c1d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 8007f48:	2340      	movs	r3, #64	; 0x40
 8007f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	4619      	mov	r1, r3
 8007f5a:	480d      	ldr	r0, [pc, #52]	; (8007f90 <MX_GPIO_Init+0x138>)
 8007f5c:	f004 f93a 	bl	800c1d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 8007f60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f66:	2301      	movs	r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 8007f72:	f107 0314 	add.w	r3, r7, #20
 8007f76:	4619      	mov	r1, r3
 8007f78:	4806      	ldr	r0, [pc, #24]	; (8007f94 <MX_GPIO_Init+0x13c>)
 8007f7a:	f004 f92b 	bl	800c1d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007f7e:	bf00      	nop
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	40020800 	.word	0x40020800
 8007f90:	40020000 	.word	0x40020000
 8007f94:	40020400 	.word	0x40020400

08007f98 <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8007f9c:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007f9e:	4a12      	ldr	r2, [pc, #72]	; (8007fe8 <MX_USART1_UART_Init115200+0x50>)
 8007fa0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007fa8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007faa:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fbe:	220c      	movs	r2, #12
 8007fc0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007fc2:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007fc8:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8007fce:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <MX_USART1_UART_Init115200+0x4c>)
 8007fd0:	f008 f8c2 	bl	8010158 <HAL_UART_Init>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 8007fda:	f000 f843 	bl	8008064 <Error_Handler>
	}
}
 8007fde:	bf00      	nop
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000b54 	.word	0x20000b54
 8007fe8:	40011000 	.word	0x40011000

08007fec <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f003 f819 	bl	800b02c <system_UART_RxCpltCallback>
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <MX_UARTReInit>:

void MX_UARTReInit()
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8008008:	4803      	ldr	r0, [pc, #12]	; (8008018 <MX_UARTReInit+0x14>)
 800800a:	f008 f8f2 	bl	80101f2 <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 800800e:	f7ff fecf 	bl	8007db0 <MX_USART1_UART_Init>
	return;
 8008012:	bf00      	nop
}
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000b54 	.word	0x20000b54

0800801c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f002 ffcb 	bl	800afc0 <system_ADC_ConvCpltCallback>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a07      	ldr	r2, [pc, #28]	; (8008060 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d101      	bne.n	800804a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008046:	f003 f861 	bl	800b10c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 800804a:	f003 f873 	bl	800b134 <HAL_GetTick>
 800804e:	4603      	mov	r3, r0
 8008050:	4618      	mov	r0, r3
 8008052:	f002 fe6f 	bl	800ad34 <system_Timer>
  /* USER CODE END Callback 1 */
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40000800 	.word	0x40000800

08008064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008064:	b480      	push	{r7}
 8008066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008068:	b672      	cpsid	i
}
 800806a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800806c:	e7fe      	b.n	800806c <Error_Handler+0x8>
	...

08008070 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008076:	2300      	movs	r3, #0
 8008078:	607b      	str	r3, [r7, #4]
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <HAL_MspInit+0x4c>)
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	4a0f      	ldr	r2, [pc, #60]	; (80080bc <HAL_MspInit+0x4c>)
 8008080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008084:	6453      	str	r3, [r2, #68]	; 0x44
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <HAL_MspInit+0x4c>)
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808e:	607b      	str	r3, [r7, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008092:	2300      	movs	r3, #0
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <HAL_MspInit+0x4c>)
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	4a08      	ldr	r2, [pc, #32]	; (80080bc <HAL_MspInit+0x4c>)
 800809c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a0:	6413      	str	r3, [r2, #64]	; 0x40
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <HAL_MspInit+0x4c>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40023800 	.word	0x40023800

080080c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	; 0x28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c8:	f107 0314 	add.w	r3, r7, #20
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	609a      	str	r2, [r3, #8]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1b      	ldr	r2, [pc, #108]	; (800814c <HAL_ADC_MspInit+0x8c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d12f      	bne.n	8008142 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_ADC_MspInit+0x90>)
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_ADC_MspInit+0x90>)
 80080ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f0:	6453      	str	r3, [r2, #68]	; 0x44
 80080f2:	4b17      	ldr	r3, [pc, #92]	; (8008150 <HAL_ADC_MspInit+0x90>)
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	4b13      	ldr	r3, [pc, #76]	; (8008150 <HAL_ADC_MspInit+0x90>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	4a12      	ldr	r2, [pc, #72]	; (8008150 <HAL_ADC_MspInit+0x90>)
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	6313      	str	r3, [r2, #48]	; 0x30
 800810e:	4b10      	ldr	r3, [pc, #64]	; (8008150 <HAL_ADC_MspInit+0x90>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 800811a:	2301      	movs	r3, #1
 800811c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800811e:	2303      	movs	r3, #3
 8008120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 8008126:	f107 0314 	add.w	r3, r7, #20
 800812a:	4619      	mov	r1, r3
 800812c:	4809      	ldr	r0, [pc, #36]	; (8008154 <HAL_ADC_MspInit+0x94>)
 800812e:	f004 f851 	bl	800c1d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8008132:	2200      	movs	r2, #0
 8008134:	2100      	movs	r1, #0
 8008136:	2012      	movs	r0, #18
 8008138:	f003 fd74 	bl	800bc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800813c:	2012      	movs	r0, #18
 800813e:	f003 fd8d 	bl	800bc5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008142:	bf00      	nop
 8008144:	3728      	adds	r7, #40	; 0x28
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	40012000 	.word	0x40012000
 8008150:	40023800 	.word	0x40023800
 8008154:	40020000 	.word	0x40020000

08008158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	; 0x28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008160:	f107 0314 	add.w	r3, r7, #20
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	605a      	str	r2, [r3, #4]
 800816a:	609a      	str	r2, [r3, #8]
 800816c:	60da      	str	r2, [r3, #12]
 800816e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a19      	ldr	r2, [pc, #100]	; (80081dc <HAL_I2C_MspInit+0x84>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d12b      	bne.n	80081d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800817a:	2300      	movs	r3, #0
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <HAL_I2C_MspInit+0x88>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	4a17      	ldr	r2, [pc, #92]	; (80081e0 <HAL_I2C_MspInit+0x88>)
 8008184:	f043 0302 	orr.w	r3, r3, #2
 8008188:	6313      	str	r3, [r2, #48]	; 0x30
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_I2C_MspInit+0x88>)
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 8008196:	23c0      	movs	r3, #192	; 0xc0
 8008198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800819a:	2312      	movs	r3, #18
 800819c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800819e:	2301      	movs	r3, #1
 80081a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081a2:	2303      	movs	r3, #3
 80081a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80081a6:	2304      	movs	r3, #4
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081aa:	f107 0314 	add.w	r3, r7, #20
 80081ae:	4619      	mov	r1, r3
 80081b0:	480c      	ldr	r0, [pc, #48]	; (80081e4 <HAL_I2C_MspInit+0x8c>)
 80081b2:	f004 f80f 	bl	800c1d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <HAL_I2C_MspInit+0x88>)
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	4a08      	ldr	r2, [pc, #32]	; (80081e0 <HAL_I2C_MspInit+0x88>)
 80081c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081c4:	6413      	str	r3, [r2, #64]	; 0x40
 80081c6:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <HAL_I2C_MspInit+0x88>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80081d2:	bf00      	nop
 80081d4:	3728      	adds	r7, #40	; 0x28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40005400 	.word	0x40005400
 80081e0:	40023800 	.word	0x40023800
 80081e4:	40020400 	.word	0x40020400

080081e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a0b      	ldr	r2, [pc, #44]	; (8008224 <HAL_TIM_PWM_MspInit+0x3c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10d      	bne.n	8008216 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <HAL_TIM_PWM_MspInit+0x40>)
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	4a09      	ldr	r2, [pc, #36]	; (8008228 <HAL_TIM_PWM_MspInit+0x40>)
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	6413      	str	r3, [r2, #64]	; 0x40
 800820a:	4b07      	ldr	r3, [pc, #28]	; (8008228 <HAL_TIM_PWM_MspInit+0x40>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40000400 	.word	0x40000400
 8008228:	40023800 	.word	0x40023800

0800822c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008234:	f107 030c 	add.w	r3, r7, #12
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	605a      	str	r2, [r3, #4]
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a12      	ldr	r2, [pc, #72]	; (8008294 <HAL_TIM_MspPostInit+0x68>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d11d      	bne.n	800828a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800824e:	2300      	movs	r3, #0
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	4b11      	ldr	r3, [pc, #68]	; (8008298 <HAL_TIM_MspPostInit+0x6c>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	4a10      	ldr	r2, [pc, #64]	; (8008298 <HAL_TIM_MspPostInit+0x6c>)
 8008258:	f043 0302 	orr.w	r3, r3, #2
 800825c:	6313      	str	r3, [r2, #48]	; 0x30
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <HAL_TIM_MspPostInit+0x6c>)
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 800826a:	2331      	movs	r3, #49	; 0x31
 800826c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800826e:	2302      	movs	r3, #2
 8008270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800827a:	2302      	movs	r3, #2
 800827c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800827e:	f107 030c 	add.w	r3, r7, #12
 8008282:	4619      	mov	r1, r3
 8008284:	4805      	ldr	r0, [pc, #20]	; (800829c <HAL_TIM_MspPostInit+0x70>)
 8008286:	f003 ffa5 	bl	800c1d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800828a:	bf00      	nop
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40000400 	.word	0x40000400
 8008298:	40023800 	.word	0x40023800
 800829c:	40020400 	.word	0x40020400

080082a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08c      	sub	sp, #48	; 0x30
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a8:	f107 031c 	add.w	r3, r7, #28
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	605a      	str	r2, [r3, #4]
 80082b2:	609a      	str	r2, [r3, #8]
 80082b4:	60da      	str	r2, [r3, #12]
 80082b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a36      	ldr	r2, [pc, #216]	; (8008398 <HAL_UART_MspInit+0xf8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d135      	bne.n	800832e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	4b35      	ldr	r3, [pc, #212]	; (800839c <HAL_UART_MspInit+0xfc>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	4a34      	ldr	r2, [pc, #208]	; (800839c <HAL_UART_MspInit+0xfc>)
 80082cc:	f043 0310 	orr.w	r3, r3, #16
 80082d0:	6453      	str	r3, [r2, #68]	; 0x44
 80082d2:	4b32      	ldr	r3, [pc, #200]	; (800839c <HAL_UART_MspInit+0xfc>)
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	f003 0310 	and.w	r3, r3, #16
 80082da:	61bb      	str	r3, [r7, #24]
 80082dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	4b2e      	ldr	r3, [pc, #184]	; (800839c <HAL_UART_MspInit+0xfc>)
 80082e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e6:	4a2d      	ldr	r2, [pc, #180]	; (800839c <HAL_UART_MspInit+0xfc>)
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	6313      	str	r3, [r2, #48]	; 0x30
 80082ee:	4b2b      	ldr	r3, [pc, #172]	; (800839c <HAL_UART_MspInit+0xfc>)
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 80082fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80082fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008300:	2302      	movs	r3, #2
 8008302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008304:	2300      	movs	r3, #0
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008308:	2303      	movs	r3, #3
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800830c:	2307      	movs	r3, #7
 800830e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008310:	f107 031c 	add.w	r3, r7, #28
 8008314:	4619      	mov	r1, r3
 8008316:	4822      	ldr	r0, [pc, #136]	; (80083a0 <HAL_UART_MspInit+0x100>)
 8008318:	f003 ff5c 	bl	800c1d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800831c:	2200      	movs	r2, #0
 800831e:	2100      	movs	r1, #0
 8008320:	2025      	movs	r0, #37	; 0x25
 8008322:	f003 fc7f 	bl	800bc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008326:	2025      	movs	r0, #37	; 0x25
 8008328:	f003 fc98 	bl	800bc5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800832c:	e030      	b.n	8008390 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a1c      	ldr	r2, [pc, #112]	; (80083a4 <HAL_UART_MspInit+0x104>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d12b      	bne.n	8008390 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008338:	2300      	movs	r3, #0
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	4b17      	ldr	r3, [pc, #92]	; (800839c <HAL_UART_MspInit+0xfc>)
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	4a16      	ldr	r2, [pc, #88]	; (800839c <HAL_UART_MspInit+0xfc>)
 8008342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008346:	6413      	str	r3, [r2, #64]	; 0x40
 8008348:	4b14      	ldr	r3, [pc, #80]	; (800839c <HAL_UART_MspInit+0xfc>)
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	4b10      	ldr	r3, [pc, #64]	; (800839c <HAL_UART_MspInit+0xfc>)
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4a0f      	ldr	r2, [pc, #60]	; (800839c <HAL_UART_MspInit+0xfc>)
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	6313      	str	r3, [r2, #48]	; 0x30
 8008364:	4b0d      	ldr	r3, [pc, #52]	; (800839c <HAL_UART_MspInit+0xfc>)
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8008370:	230c      	movs	r3, #12
 8008372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008374:	2302      	movs	r3, #2
 8008376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008378:	2300      	movs	r3, #0
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800837c:	2303      	movs	r3, #3
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008380:	2307      	movs	r3, #7
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008384:	f107 031c 	add.w	r3, r7, #28
 8008388:	4619      	mov	r1, r3
 800838a:	4805      	ldr	r0, [pc, #20]	; (80083a0 <HAL_UART_MspInit+0x100>)
 800838c:	f003 ff22 	bl	800c1d4 <HAL_GPIO_Init>
}
 8008390:	bf00      	nop
 8008392:	3730      	adds	r7, #48	; 0x30
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40011000 	.word	0x40011000
 800839c:	40023800 	.word	0x40023800
 80083a0:	40020000 	.word	0x40020000
 80083a4:	40004400 	.word	0x40004400

080083a8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a12      	ldr	r2, [pc, #72]	; (8008400 <HAL_UART_MspDeInit+0x58>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d10e      	bne.n	80083d8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <HAL_UART_MspDeInit+0x5c>)
 80083bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083be:	4a11      	ldr	r2, [pc, #68]	; (8008404 <HAL_UART_MspDeInit+0x5c>)
 80083c0:	f023 0310 	bic.w	r3, r3, #16
 80083c4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 80083c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083ca:	480f      	ldr	r0, [pc, #60]	; (8008408 <HAL_UART_MspDeInit+0x60>)
 80083cc:	f004 f886 	bl	800c4dc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80083d0:	2025      	movs	r0, #37	; 0x25
 80083d2:	f003 fc51 	bl	800bc78 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80083d6:	e00e      	b.n	80083f6 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a0b      	ldr	r2, [pc, #44]	; (800840c <HAL_UART_MspDeInit+0x64>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d109      	bne.n	80083f6 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <HAL_UART_MspDeInit+0x5c>)
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	4a07      	ldr	r2, [pc, #28]	; (8008404 <HAL_UART_MspDeInit+0x5c>)
 80083e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083ec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 80083ee:	210c      	movs	r1, #12
 80083f0:	4805      	ldr	r0, [pc, #20]	; (8008408 <HAL_UART_MspDeInit+0x60>)
 80083f2:	f004 f873 	bl	800c4dc <HAL_GPIO_DeInit>
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40011000 	.word	0x40011000
 8008404:	40023800 	.word	0x40023800
 8008408:	40020000 	.word	0x40020000
 800840c:	40004400 	.word	0x40004400

08008410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08e      	sub	sp, #56	; 0x38
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	4b33      	ldr	r3, [pc, #204]	; (80084f4 <HAL_InitTick+0xe4>)
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	4a32      	ldr	r2, [pc, #200]	; (80084f4 <HAL_InitTick+0xe4>)
 800842a:	f043 0304 	orr.w	r3, r3, #4
 800842e:	6413      	str	r3, [r2, #64]	; 0x40
 8008430:	4b30      	ldr	r3, [pc, #192]	; (80084f4 <HAL_InitTick+0xe4>)
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800843c:	f107 0210 	add.w	r2, r7, #16
 8008440:	f107 0314 	add.w	r3, r7, #20
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f006 fff2 	bl	800f430 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d103      	bne.n	800845e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008456:	f006 ffc3 	bl	800f3e0 <HAL_RCC_GetPCLK1Freq>
 800845a:	6378      	str	r0, [r7, #52]	; 0x34
 800845c:	e004      	b.n	8008468 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800845e:	f006 ffbf 	bl	800f3e0 <HAL_RCC_GetPCLK1Freq>
 8008462:	4603      	mov	r3, r0
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	4a23      	ldr	r2, [pc, #140]	; (80084f8 <HAL_InitTick+0xe8>)
 800846c:	fba2 2303 	umull	r2, r3, r2, r3
 8008470:	0c9b      	lsrs	r3, r3, #18
 8008472:	3b01      	subs	r3, #1
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8008476:	4b21      	ldr	r3, [pc, #132]	; (80084fc <HAL_InitTick+0xec>)
 8008478:	4a21      	ldr	r2, [pc, #132]	; (8008500 <HAL_InitTick+0xf0>)
 800847a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800847c:	4b1f      	ldr	r3, [pc, #124]	; (80084fc <HAL_InitTick+0xec>)
 800847e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008482:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8008484:	4a1d      	ldr	r2, [pc, #116]	; (80084fc <HAL_InitTick+0xec>)
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800848a:	4b1c      	ldr	r3, [pc, #112]	; (80084fc <HAL_InitTick+0xec>)
 800848c:	2200      	movs	r2, #0
 800848e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008490:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <HAL_InitTick+0xec>)
 8008492:	2200      	movs	r2, #0
 8008494:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008496:	4b19      	ldr	r3, [pc, #100]	; (80084fc <HAL_InitTick+0xec>)
 8008498:	2200      	movs	r2, #0
 800849a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800849c:	4817      	ldr	r0, [pc, #92]	; (80084fc <HAL_InitTick+0xec>)
 800849e:	f006 fff9 	bl	800f494 <HAL_TIM_Base_Init>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80084a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11b      	bne.n	80084e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80084b0:	4812      	ldr	r0, [pc, #72]	; (80084fc <HAL_InitTick+0xec>)
 80084b2:	f007 f849 	bl	800f548 <HAL_TIM_Base_Start_IT>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80084bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d111      	bne.n	80084e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80084c4:	201e      	movs	r0, #30
 80084c6:	f003 fbc9 	bl	800bc5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b0f      	cmp	r3, #15
 80084ce:	d808      	bhi.n	80084e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80084d0:	2200      	movs	r2, #0
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	201e      	movs	r0, #30
 80084d6:	f003 fba5 	bl	800bc24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80084da:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <HAL_InitTick+0xf4>)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	e002      	b.n	80084e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80084e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3738      	adds	r7, #56	; 0x38
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	40023800 	.word	0x40023800
 80084f8:	431bde83 	.word	0x431bde83
 80084fc:	20000bdc 	.word	0x20000bdc
 8008500:	40000800 	.word	0x40000800
 8008504:	200000e8 	.word	0x200000e8

08008508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800850c:	e7fe      	b.n	800850c <NMI_Handler+0x4>

0800850e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800850e:	b480      	push	{r7}
 8008510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008512:	e7fe      	b.n	8008512 <HardFault_Handler+0x4>

08008514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008518:	e7fe      	b.n	8008518 <MemManage_Handler+0x4>

0800851a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800851a:	b480      	push	{r7}
 800851c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800851e:	e7fe      	b.n	800851e <BusFault_Handler+0x4>

08008520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008524:	e7fe      	b.n	8008524 <UsageFault_Handler+0x4>

08008526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008526:	b480      	push	{r7}
 8008528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800852a:	bf00      	nop
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008542:	b480      	push	{r7}
 8008544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008546:	bf00      	nop
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008564:	4802      	ldr	r0, [pc, #8]	; (8008570 <ADC_IRQHandler+0x10>)
 8008566:	f002 ff17 	bl	800b398 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800856a:	bf00      	nop
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000a70 	.word	0x20000a70

08008574 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008578:	4802      	ldr	r0, [pc, #8]	; (8008584 <TIM4_IRQHandler+0x10>)
 800857a:	f007 f947 	bl	800f80c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800857e:	bf00      	nop
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000bdc 	.word	0x20000bdc

08008588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800858c:	4802      	ldr	r0, [pc, #8]	; (8008598 <USART1_IRQHandler+0x10>)
 800858e:	f008 f835 	bl	80105fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008592:	bf00      	nop
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000b54 	.word	0x20000b54

0800859c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80085a0:	4802      	ldr	r0, [pc, #8]	; (80085ac <OTG_FS_IRQHandler+0x10>)
 80085a2:	f005 f9c0 	bl	800d926 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80085a6:	bf00      	nop
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200025b0 	.word	0x200025b0

080085b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <SystemInit+0x20>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ba:	4a05      	ldr	r2, [pc, #20]	; (80085d0 <SystemInit+0x20>)
 80085bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80085c4:	bf00      	nop
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	e000ed00 	.word	0xe000ed00

080085d4 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
 80085e0:	e010      	b.n	8008604 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4a0c      	ldr	r2, [pc, #48]	; (8008618 <modem_Timer+0x44>)
 80085e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <modem_Timer+0x2a>
			modem_info.timer[i]--;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	4a09      	ldr	r2, [pc, #36]	; (8008618 <modem_Timer+0x44>)
 80085f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085f6:	3a01      	subs	r2, #1
 80085f8:	4907      	ldr	r1, [pc, #28]	; (8008618 <modem_Timer+0x44>)
 80085fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	3301      	adds	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d9eb      	bls.n	80085e2 <modem_Timer+0xe>
		}
	}

	return;
 800860a:	bf00      	nop
}
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000c24 	.word	0x20000c24

0800861c <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8008620:	2201      	movs	r2, #1
 8008622:	f248 0120 	movw	r1, #32800	; 0x8020
 8008626:	480c      	ldr	r0, [pc, #48]	; (8008658 <modem_InitTask+0x3c>)
 8008628:	f004 f854 	bl	800c6d4 <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <modem_InitTask+0x40>)
 800862e:	2200      	movs	r2, #0
 8008630:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <modem_InitTask+0x40>)
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <modem_InitTask+0x40>)
 800863c:	2200      	movs	r2, #0
 800863e:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8008640:	4b06      	ldr	r3, [pc, #24]	; (800865c <modem_InitTask+0x40>)
 8008642:	2200      	movs	r2, #0
 8008644:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <modem_InitTask+0x40>)
 8008648:	2200      	movs	r2, #0
 800864a:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <modem_InitTask+0x40>)
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8008654:	bf00      	nop
}
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40020000 	.word	0x40020000
 800865c:	20000c24 	.word	0x20000c24

08008660 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8008666:	4b80      	ldr	r3, [pc, #512]	; (8008868 <modem_Task+0x208>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10f      	bne.n	800868e <modem_Task+0x2e>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 800866e:	2140      	movs	r1, #64	; 0x40
 8008670:	487e      	ldr	r0, [pc, #504]	; (800886c <modem_Task+0x20c>)
 8008672:	f004 f817 	bl	800c6a4 <HAL_GPIO_ReadPin>
 8008676:	4603      	mov	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	f040 80b0 	bne.w	80087de <modem_Task+0x17e>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 800867e:	4b7c      	ldr	r3, [pc, #496]	; (8008870 <modem_Task+0x210>)
 8008680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008684:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8008686:	4b78      	ldr	r3, [pc, #480]	; (8008868 <modem_Task+0x208>)
 8008688:	2201      	movs	r2, #1
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e0a7      	b.n	80087de <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 800868e:	4b76      	ldr	r3, [pc, #472]	; (8008868 <modem_Task+0x208>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d11e      	bne.n	80086d4 <modem_Task+0x74>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8008696:	4b76      	ldr	r3, [pc, #472]	; (8008870 <modem_Task+0x210>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 809f 	bne.w	80087de <modem_Task+0x17e>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 80086a0:	23c2      	movs	r3, #194	; 0xc2
 80086a2:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 80086a4:	23ff      	movs	r3, #255	; 0xff
 80086a6:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 80086a8:	23ff      	movs	r3, #255	; 0xff
 80086aa:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 80086ac:	233d      	movs	r3, #61	; 0x3d
 80086ae:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 80086b0:	2306      	movs	r3, #6
 80086b2:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 80086b4:	2344      	movs	r3, #68	; 0x44
 80086b6:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 80086b8:	1d39      	adds	r1, r7, #4
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	2206      	movs	r2, #6
 80086c0:	486c      	ldr	r0, [pc, #432]	; (8008874 <modem_Task+0x214>)
 80086c2:	f007 fdc5 	bl	8010250 <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 80086c6:	4b6a      	ldr	r3, [pc, #424]	; (8008870 <modem_Task+0x210>)
 80086c8:	2264      	movs	r2, #100	; 0x64
 80086ca:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 80086cc:	4b66      	ldr	r3, [pc, #408]	; (8008868 <modem_Task+0x208>)
 80086ce:	2202      	movs	r2, #2
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e084      	b.n	80087de <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 80086d4:	4b64      	ldr	r3, [pc, #400]	; (8008868 <modem_Task+0x208>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d114      	bne.n	8008706 <modem_Task+0xa6>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 80086dc:	4b64      	ldr	r3, [pc, #400]	; (8008870 <modem_Task+0x210>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d17c      	bne.n	80087de <modem_Task+0x17e>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 80086e4:	23c1      	movs	r3, #193	; 0xc1
 80086e6:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 80086e8:	23c1      	movs	r3, #193	; 0xc1
 80086ea:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 80086ec:	23c1      	movs	r3, #193	; 0xc1
 80086ee:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 80086f0:	1d39      	adds	r1, r7, #4
 80086f2:	f04f 33ff 	mov.w	r3, #4294967295
 80086f6:	2203      	movs	r2, #3
 80086f8:	485e      	ldr	r0, [pc, #376]	; (8008874 <modem_Task+0x214>)
 80086fa:	f007 fda9 	bl	8010250 <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 80086fe:	4b5a      	ldr	r3, [pc, #360]	; (8008868 <modem_Task+0x208>)
 8008700:	2203      	movs	r2, #3
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e06b      	b.n	80087de <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8008706:	4b58      	ldr	r3, [pc, #352]	; (8008868 <modem_Task+0x208>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b03      	cmp	r3, #3
 800870c:	d115      	bne.n	800873a <modem_Task+0xda>
	{
		if( _modem_par_flag == 1 )
 800870e:	4b5a      	ldr	r3, [pc, #360]	; (8008878 <modem_Task+0x218>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d163      	bne.n	80087de <modem_Task+0x17e>
		{
			_modem_par_flag = 0;
 8008716:	4b58      	ldr	r3, [pc, #352]	; (8008878 <modem_Task+0x218>)
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 800871c:	2200      	movs	r2, #0
 800871e:	f248 0120 	movw	r1, #32800	; 0x8020
 8008722:	4852      	ldr	r0, [pc, #328]	; (800886c <modem_Task+0x20c>)
 8008724:	f003 ffd6 	bl	800c6d4 <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8008728:	f002 fbfe 	bl	800af28 <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 800872c:	4b50      	ldr	r3, [pc, #320]	; (8008870 <modem_Task+0x210>)
 800872e:	2264      	movs	r2, #100	; 0x64
 8008730:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8008732:	4b4d      	ldr	r3, [pc, #308]	; (8008868 <modem_Task+0x208>)
 8008734:	2204      	movs	r2, #4
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	e051      	b.n	80087de <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy )
 800873a:	4b4b      	ldr	r3, [pc, #300]	; (8008868 <modem_Task+0x208>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b04      	cmp	r3, #4
 8008740:	d107      	bne.n	8008752 <modem_Task+0xf2>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8008742:	4b4b      	ldr	r3, [pc, #300]	; (8008870 <modem_Task+0x210>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d149      	bne.n	80087de <modem_Task+0x17e>
			_modem_cur_state = modem_ready;
 800874a:	4b47      	ldr	r3, [pc, #284]	; (8008868 <modem_Task+0x208>)
 800874c:	2205      	movs	r2, #5
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e045      	b.n	80087de <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8008752:	4b45      	ldr	r3, [pc, #276]	; (8008868 <modem_Task+0x208>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b05      	cmp	r3, #5
 8008758:	d141      	bne.n	80087de <modem_Task+0x17e>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 800875a:	4b45      	ldr	r3, [pc, #276]	; (8008870 <modem_Task+0x210>)
 800875c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008760:	2b00      	cmp	r3, #0
 8008762:	d024      	beq.n	80087ae <modem_Task+0x14e>
 8008764:	4b42      	ldr	r3, [pc, #264]	; (8008870 <modem_Task+0x210>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d120      	bne.n	80087ae <modem_Task+0x14e>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 800876c:	4b40      	ldr	r3, [pc, #256]	; (8008870 <modem_Task+0x210>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8008772:	4b3f      	ldr	r3, [pc, #252]	; (8008870 <modem_Task+0x210>)
 8008774:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008778:	2b14      	cmp	r3, #20
 800877a:	d90a      	bls.n	8008792 <modem_Task+0x132>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	2214      	movs	r2, #20
 8008782:	493e      	ldr	r1, [pc, #248]	; (800887c <modem_Task+0x21c>)
 8008784:	483b      	ldr	r0, [pc, #236]	; (8008874 <modem_Task+0x214>)
 8008786:	f007 fd63 	bl	8010250 <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 800878a:	2014      	movs	r0, #20
 800878c:	f000 f9da 	bl	8008b44 <modem_RemTxData>
 8008790:	e00d      	b.n	80087ae <modem_Task+0x14e>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8008792:	4b37      	ldr	r3, [pc, #220]	; (8008870 <modem_Task+0x210>)
 8008794:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008798:	b29a      	uxth	r2, r3
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	4937      	ldr	r1, [pc, #220]	; (800887c <modem_Task+0x21c>)
 80087a0:	4834      	ldr	r0, [pc, #208]	; (8008874 <modem_Task+0x214>)
 80087a2:	f007 fd55 	bl	8010250 <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 80087a6:	4b32      	ldr	r3, [pc, #200]	; (8008870 <modem_Task+0x210>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 80087ae:	4b30      	ldr	r3, [pc, #192]	; (8008870 <modem_Task+0x210>)
 80087b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d012      	beq.n	80087de <modem_Task+0x17e>
		{
			_modem_led_start = 1;
 80087b8:	4b31      	ldr	r3, [pc, #196]	; (8008880 <modem_Task+0x220>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 80087be:	4b2c      	ldr	r3, [pc, #176]	; (8008870 <modem_Task+0x210>)
 80087c0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80087c4:	b2d8      	uxtb	r0, r3
 80087c6:	4b2a      	ldr	r3, [pc, #168]	; (8008870 <modem_Task+0x210>)
 80087c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80087cc:	3b01      	subs	r3, #1
 80087ce:	461a      	mov	r2, r3
 80087d0:	492c      	ldr	r1, [pc, #176]	; (8008884 <modem_Task+0x224>)
 80087d2:	f002 fbbf 	bl	800af54 <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 80087d6:	4b26      	ldr	r3, [pc, #152]	; (8008870 <modem_Task+0x210>)
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 80087de:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <modem_Task+0x228>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <modem_Task+0x19c>
	{
		if( _modem_led_start == 1 )
 80087e6:	4b26      	ldr	r3, [pc, #152]	; (8008880 <modem_Task+0x220>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d138      	bne.n	8008860 <modem_Task+0x200>
		{
			_modem_led_start = 0;
 80087ee:	4b24      	ldr	r3, [pc, #144]	; (8008880 <modem_Task+0x220>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <modem_Task+0x228>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 80087fa:	e031      	b.n	8008860 <modem_Task+0x200>
	else if( _modem_led_state == 1 )
 80087fc:	4b22      	ldr	r3, [pc, #136]	; (8008888 <modem_Task+0x228>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d10c      	bne.n	800881e <modem_Task+0x1be>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8008804:	2201      	movs	r2, #1
 8008806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800880a:	4820      	ldr	r0, [pc, #128]	; (800888c <modem_Task+0x22c>)
 800880c:	f003 ff62 	bl	800c6d4 <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8008810:	4b17      	ldr	r3, [pc, #92]	; (8008870 <modem_Task+0x210>)
 8008812:	2214      	movs	r2, #20
 8008814:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8008816:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <modem_Task+0x228>)
 8008818:	2202      	movs	r2, #2
 800881a:	701a      	strb	r2, [r3, #0]
	return;
 800881c:	e020      	b.n	8008860 <modem_Task+0x200>
	else if( _modem_led_state == 2 )
 800881e:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <modem_Task+0x228>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d110      	bne.n	8008848 <modem_Task+0x1e8>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <modem_Task+0x210>)
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d118      	bne.n	8008860 <modem_Task+0x200>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 800882e:	2200      	movs	r2, #0
 8008830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008834:	4815      	ldr	r0, [pc, #84]	; (800888c <modem_Task+0x22c>)
 8008836:	f003 ff4d 	bl	800c6d4 <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <modem_Task+0x210>)
 800883c:	2232      	movs	r2, #50	; 0x32
 800883e:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8008840:	4b11      	ldr	r3, [pc, #68]	; (8008888 <modem_Task+0x228>)
 8008842:	2203      	movs	r2, #3
 8008844:	701a      	strb	r2, [r3, #0]
	return;
 8008846:	e00b      	b.n	8008860 <modem_Task+0x200>
	else if( _modem_led_state == 3 )
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <modem_Task+0x228>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d107      	bne.n	8008860 <modem_Task+0x200>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <modem_Task+0x210>)
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d103      	bne.n	8008860 <modem_Task+0x200>
			_modem_led_state = 0;
 8008858:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <modem_Task+0x228>)
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
	return;
 800885e:	bf00      	nop
 8008860:	bf00      	nop
}
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000dcc 	.word	0x20000dcc
 800886c:	40020000 	.word	0x40020000
 8008870:	20000c24 	.word	0x20000c24
 8008874:	20000b54 	.word	0x20000b54
 8008878:	20000ddb 	.word	0x20000ddb
 800887c:	20000d3c 	.word	0x20000d3c
 8008880:	20000ddc 	.word	0x20000ddc
 8008884:	20000cb9 	.word	0x20000cb9
 8008888:	20000ddd 	.word	0x20000ddd
 800888c:	40020400 	.word	0x40020400

08008890 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 800889a:	4b5f      	ldr	r3, [pc, #380]	; (8008a18 <modem_RcvData+0x188>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d01a      	beq.n	80088d8 <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 80088a2:	4b5e      	ldr	r3, [pc, #376]	; (8008a1c <modem_RcvData+0x18c>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f040 80b1 	bne.w	8008a0e <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 80088ac:	4b5c      	ldr	r3, [pc, #368]	; (8008a20 <modem_RcvData+0x190>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	b2d1      	uxtb	r1, r2
 80088b4:	4a5a      	ldr	r2, [pc, #360]	; (8008a20 <modem_RcvData+0x190>)
 80088b6:	7011      	strb	r1, [r2, #0]
 80088b8:	4619      	mov	r1, r3
 80088ba:	4a5a      	ldr	r2, [pc, #360]	; (8008a24 <modem_RcvData+0x194>)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 80088c0:	4b57      	ldr	r3, [pc, #348]	; (8008a20 <modem_RcvData+0x190>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b06      	cmp	r3, #6
 80088c6:	f040 80a2 	bne.w	8008a0e <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 80088ca:	4b55      	ldr	r3, [pc, #340]	; (8008a20 <modem_RcvData+0x190>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 80088d0:	4b52      	ldr	r3, [pc, #328]	; (8008a1c <modem_RcvData+0x18c>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 80088d6:	e09a      	b.n	8008a0e <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 80088d8:	4b53      	ldr	r3, [pc, #332]	; (8008a28 <modem_RcvData+0x198>)
 80088da:	8a1b      	ldrh	r3, [r3, #16]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3301      	adds	r3, #1
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 80088e8:	4b4f      	ldr	r3, [pc, #316]	; (8008a28 <modem_RcvData+0x198>)
 80088ea:	4611      	mov	r1, r2
 80088ec:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 80088ee:	4b4e      	ldr	r3, [pc, #312]	; (8008a28 <modem_RcvData+0x198>)
 80088f0:	4413      	add	r3, r2
 80088f2:	79fa      	ldrb	r2, [r7, #7]
 80088f4:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 80088f6:	4b4c      	ldr	r3, [pc, #304]	; (8008a28 <modem_RcvData+0x198>)
 80088f8:	7b1b      	ldrb	r3, [r3, #12]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d12a      	bne.n	8008956 <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8008900:	4b49      	ldr	r3, [pc, #292]	; (8008a28 <modem_RcvData+0x198>)
 8008902:	8a1b      	ldrh	r3, [r3, #16]
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b02      	subs	r3, #2
 8008908:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 800890a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890e:	b29b      	uxth	r3, r3
 8008910:	4619      	mov	r1, r3
 8008912:	4846      	ldr	r0, [pc, #280]	; (8008a2c <modem_RcvData+0x19c>)
 8008914:	f000 f8ce 	bl	8008ab4 <modem_ringBufRead16b>
 8008918:	4603      	mov	r3, r0
 800891a:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 800891c:	897b      	ldrh	r3, [r7, #10]
 800891e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008922:	4293      	cmp	r3, r2
 8008924:	d173      	bne.n	8008a0e <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 8008926:	4b40      	ldr	r3, [pc, #256]	; (8008a28 <modem_RcvData+0x198>)
 8008928:	8a1b      	ldrh	r3, [r3, #16]
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b02      	subs	r3, #2
 800892e:	b29b      	uxth	r3, r3
 8008930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008934:	b29a      	uxth	r2, r3
 8008936:	4b3c      	ldr	r3, [pc, #240]	; (8008a28 <modem_RcvData+0x198>)
 8008938:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	b29a      	uxth	r2, r3
 800893e:	4b3c      	ldr	r3, [pc, #240]	; (8008a30 <modem_RcvData+0x1a0>)
 8008940:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	b29b      	uxth	r3, r3
 8008946:	3b02      	subs	r3, #2
 8008948:	b29a      	uxth	r2, r3
 800894a:	4b37      	ldr	r3, [pc, #220]	; (8008a28 <modem_RcvData+0x198>)
 800894c:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 800894e:	4b36      	ldr	r3, [pc, #216]	; (8008a28 <modem_RcvData+0x198>)
 8008950:	2201      	movs	r2, #1
 8008952:	731a      	strb	r2, [r3, #12]
	return;
 8008954:	e05b      	b.n	8008a0e <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 8008956:	4b34      	ldr	r3, [pc, #208]	; (8008a28 <modem_RcvData+0x198>)
 8008958:	7b1b      	ldrb	r3, [r3, #12]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	d156      	bne.n	8008a0e <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8008960:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <modem_RcvData+0x1a0>)
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <modem_RcvData+0x1a0>)
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <modem_RcvData+0x1a0>)
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d14c      	bne.n	8008a0e <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8008974:	4b2c      	ldr	r3, [pc, #176]	; (8008a28 <modem_RcvData+0x198>)
 8008976:	2200      	movs	r2, #0
 8008978:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800897a:	4b2b      	ldr	r3, [pc, #172]	; (8008a28 <modem_RcvData+0x198>)
 800897c:	89db      	ldrh	r3, [r3, #14]
 800897e:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 8008980:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <modem_RcvData+0x198>)
 8008982:	8a5b      	ldrh	r3, [r3, #18]
 8008984:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 8008986:	3303      	adds	r3, #3
 8008988:	b29a      	uxth	r2, r3
 800898a:	237f      	movs	r3, #127	; 0x7f
 800898c:	4827      	ldr	r0, [pc, #156]	; (8008a2c <modem_RcvData+0x19c>)
 800898e:	f7fa fe8b 	bl	80036a8 <crc16_RingBuf>
 8008992:	4603      	mov	r3, r0
 8008994:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 8008996:	4b24      	ldr	r3, [pc, #144]	; (8008a28 <modem_RcvData+0x198>)
 8008998:	8a1b      	ldrh	r3, [r3, #16]
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 80089a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	4820      	ldr	r0, [pc, #128]	; (8008a2c <modem_RcvData+0x19c>)
 80089aa:	f000 f883 	bl	8008ab4 <modem_ringBufRead16b>
 80089ae:	4603      	mov	r3, r0
 80089b0:	461a      	mov	r2, r3
 80089b2:	89bb      	ldrh	r3, [r7, #12]
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d12a      	bne.n	8008a0e <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 80089b8:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <modem_RcvData+0x198>)
 80089ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d125      	bne.n	8008a0e <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 80089c2:	2300      	movs	r3, #0
 80089c4:	81fb      	strh	r3, [r7, #14]
 80089c6:	e014      	b.n	80089f2 <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80089c8:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <modem_RcvData+0x198>)
 80089ca:	89db      	ldrh	r3, [r3, #14]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	1cda      	adds	r2, r3, #3
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	4413      	add	r3, r2
 80089d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 80089d8:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80089da:	4913      	ldr	r1, [pc, #76]	; (8008a28 <modem_RcvData+0x198>)
 80089dc:	440a      	add	r2, r1
 80089de:	7d12      	ldrb	r2, [r2, #20]
 80089e0:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 80089e2:	4a11      	ldr	r2, [pc, #68]	; (8008a28 <modem_RcvData+0x198>)
 80089e4:	4413      	add	r3, r2
 80089e6:	460a      	mov	r2, r1
 80089e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	3301      	adds	r3, #1
 80089f0:	81fb      	strh	r3, [r7, #14]
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <modem_RcvData+0x198>)
 80089f4:	8a5b      	ldrh	r3, [r3, #18]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	89fa      	ldrh	r2, [r7, #14]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d3e4      	bcc.n	80089c8 <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <modem_RcvData+0x198>)
 8008a00:	8a5b      	ldrh	r3, [r3, #18]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	4b08      	ldr	r3, [pc, #32]	; (8008a28 <modem_RcvData+0x198>)
 8008a08:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
}
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20000dcc 	.word	0x20000dcc
 8008a1c:	20000ddb 	.word	0x20000ddb
 8008a20:	20000dda 	.word	0x20000dda
 8008a24:	20000dd0 	.word	0x20000dd0
 8008a28:	20000c24 	.word	0x20000c24
 8008a2c:	20000c38 	.word	0x20000c38
 8008a30:	20000dde 	.word	0x20000dde

08008a34 <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 8008a42:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a46:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8008a48:	f107 0316 	add.w	r3, r7, #22
 8008a4c:	2102      	movs	r1, #2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f850 	bl	8008af4 <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	3303      	adds	r3, #3
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8008a5e:	f107 0315 	add.w	r3, r7, #21
 8008a62:	2101      	movs	r1, #1
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f845 	bl	8008af4 <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8008a6e:	f107 0315 	add.w	r3, r7, #21
 8008a72:	2101      	movs	r1, #1
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f83d 	bl	8008af4 <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	68b8      	ldr	r0, [r7, #8]
 8008a7e:	f000 f839 	bl	8008af4 <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 8008a82:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <modem_TrmData+0x78>)
 8008a84:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4808      	ldr	r0, [pc, #32]	; (8008ab0 <modem_TrmData+0x7c>)
 8008a8e:	f7fa fde1 	bl	8003654 <crc16_calc>
 8008a92:	4603      	mov	r3, r0
 8008a94:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8008a96:	f107 0316 	add.w	r3, r7, #22
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f829 	bl	8008af4 <modem_AddTxData>

	return;
 8008aa2:	bf00      	nop
}
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000c24 	.word	0x20000c24
 8008ab0:	20000d3c 	.word	0x20000d3c

08008ab4 <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 8008ac0:	887b      	ldrh	r3, [r7, #2]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	4413      	add	r3, r2
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	887b      	ldrh	r3, [r7, #2]
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	440b      	add	r3, r1
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 8008afe:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <modem_AddTxData+0x4c>)
 8008b00:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008b04:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d814      	bhi.n	8008b38 <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <modem_AddTxData+0x4c>)
 8008b10:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008b14:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008b18:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <modem_AddTxData+0x4c>)
 8008b1a:	4413      	add	r3, r2
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f00c fead 	bl	8015880 <memcpy>
	modem_info.tx_buf_bytes += len;
 8008b26:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <modem_AddTxData+0x4c>)
 8008b28:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	4413      	add	r3, r2
 8008b30:	4a03      	ldr	r2, [pc, #12]	; (8008b40 <modem_AddTxData+0x4c>)
 8008b32:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 8008b36:	e000      	b.n	8008b3a <modem_AddTxData+0x46>
		return;
 8008b38:	bf00      	nop
}
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000c24 	.word	0x20000c24

08008b44 <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b0a2      	sub	sp, #136	; 0x88
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 8008b4c:	4b18      	ldr	r3, [pc, #96]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b4e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d826      	bhi.n	8008ba6 <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d023      	beq.n	8008ba6 <modem_RemTxData+0x62>
 8008b5e:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b60:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01e      	beq.n	8008ba6 <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 8008b68:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b6a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	4a0f      	ldr	r2, [pc, #60]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b74:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8008b7e:	4a0c      	ldr	r2, [pc, #48]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b80:	1899      	adds	r1, r3, r2
 8008b82:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b84:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8008b88:	f107 0308 	add.w	r3, r7, #8
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f00c fe77 	bl	8015880 <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 8008b92:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <modem_RemTxData+0x6c>)
 8008b94:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4805      	ldr	r0, [pc, #20]	; (8008bb4 <modem_RemTxData+0x70>)
 8008ba0:	f00c fe6e 	bl	8015880 <memcpy>

	return;
 8008ba4:	e000      	b.n	8008ba8 <modem_RemTxData+0x64>
		return;
 8008ba6:	bf00      	nop
}
 8008ba8:	3788      	adds	r7, #136	; 0x88
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000c24 	.word	0x20000c24
 8008bb4:	20000d3c 	.word	0x20000d3c

08008bb8 <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e016      	b.n	8008bf4 <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	4a0f      	ldr	r2, [pc, #60]	; (8008c08 <motor_Timer+0x50>)
 8008bca:	3304      	adds	r3, #4
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <motor_Timer+0x36>
			motor_info.timer[i]--;
 8008bd6:	7bfa      	ldrb	r2, [r7, #15]
 8008bd8:	490b      	ldr	r1, [pc, #44]	; (8008c08 <motor_Timer+0x50>)
 8008bda:	1d13      	adds	r3, r2, #4
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	1e59      	subs	r1, r3, #1
 8008be4:	4808      	ldr	r0, [pc, #32]	; (8008c08 <motor_Timer+0x50>)
 8008be6:	1d13      	adds	r3, r2, #4
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4403      	add	r3, r0
 8008bec:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	73fb      	strb	r3, [r7, #15]
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0e5      	beq.n	8008bc6 <motor_Timer+0xe>
		}
	}

	return;
 8008bfa:	bf00      	nop
}
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	20000de0 	.word	0x20000de0

08008c0c <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 8008c12:	4b22      	ldr	r3, [pc, #136]	; (8008c9c <motor_InitTask+0x90>)
 8008c14:	4a22      	ldr	r2, [pc, #136]	; (8008ca0 <motor_InitTask+0x94>)
 8008c16:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 8008c18:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <motor_InitTask+0x90>)
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 8008c1e:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <motor_InitTask+0x90>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <motor_InitTask+0x90>)
 8008c26:	f240 2217 	movw	r2, #535	; 0x217
 8008c2a:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <motor_InitTask+0x90>)
 8008c2e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008c32:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 8008c34:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <motor_InitTask+0x90>)
 8008c36:	89db      	ldrh	r3, [r3, #14]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <motor_InitTask+0x90>)
 8008c3c:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 8008c3e:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <motor_InitTask+0x90>)
 8008c40:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008c44:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 8008c46:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <motor_InitTask+0x90>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	71fb      	strb	r3, [r7, #7]
 8008c50:	e016      	b.n	8008c80 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 8008c52:	79fa      	ldrb	r2, [r7, #7]
 8008c54:	4911      	ldr	r1, [pc, #68]	; (8008c9c <motor_InitTask+0x90>)
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	79fa      	ldrb	r2, [r7, #7]
 8008c64:	490d      	ldr	r1, [pc, #52]	; (8008c9c <motor_InitTask+0x90>)
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	3304      	adds	r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4619      	mov	r1, r3
 8008c76:	f006 fd19 	bl	800f6ac <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	71fb      	strb	r3, [r7, #7]
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0e5      	beq.n	8008c52 <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <motor_InitTask+0x90>)
 8008c88:	7b1b      	ldrb	r3, [r3, #12]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f000 f92e 	bl	8008ef0 <motor_setTorque>

	return;
 8008c94:	bf00      	nop
}
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000de0 	.word	0x20000de0
 8008ca0:	20000b0c 	.word	0x20000b0c

08008ca4 <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 8008ca8:	bf00      	nop
}
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	460a      	mov	r2, r1
 8008cbe:	71fb      	strb	r3, [r7, #7]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8109 	bne.w	8008ede <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 8008ccc:	79fa      	ldrb	r2, [r7, #7]
 8008cce:	4987      	ldr	r1, [pc, #540]	; (8008eec <motor_setEnable+0x238>)
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3308      	adds	r3, #8
 8008cdc:	79ba      	ldrb	r2, [r7, #6]
 8008cde:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 8008ce0:	79fa      	ldrb	r2, [r7, #7]
 8008ce2:	4982      	ldr	r1, [pc, #520]	; (8008eec <motor_setEnable+0x238>)
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	3308      	adds	r3, #8
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d178      	bne.n	8008dea <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8008cf8:	79fa      	ldrb	r2, [r7, #7]
 8008cfa:	497c      	ldr	r1, [pc, #496]	; (8008eec <motor_setEnable+0x238>)
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	3304      	adds	r3, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d115      	bne.n	8008d3a <motor_setEnable+0x86>
 8008d0e:	79fa      	ldrb	r2, [r7, #7]
 8008d10:	4976      	ldr	r1, [pc, #472]	; (8008eec <motor_setEnable+0x238>)
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	330a      	adds	r3, #10
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	b298      	uxth	r0, r3
 8008d22:	79fa      	ldrb	r2, [r7, #7]
 8008d24:	4971      	ldr	r1, [pc, #452]	; (8008eec <motor_setEnable+0x238>)
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4602      	mov	r2, r0
 8008d36:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 8008d38:	e0d2      	b.n	8008ee0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8008d3a:	79fa      	ldrb	r2, [r7, #7]
 8008d3c:	496b      	ldr	r1, [pc, #428]	; (8008eec <motor_setEnable+0x238>)
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	3304      	adds	r3, #4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d115      	bne.n	8008d7c <motor_setEnable+0xc8>
 8008d50:	79fa      	ldrb	r2, [r7, #7]
 8008d52:	4966      	ldr	r1, [pc, #408]	; (8008eec <motor_setEnable+0x238>)
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	330a      	adds	r3, #10
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b298      	uxth	r0, r3
 8008d64:	79fa      	ldrb	r2, [r7, #7]
 8008d66:	4961      	ldr	r1, [pc, #388]	; (8008eec <motor_setEnable+0x238>)
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4603      	mov	r3, r0
 8008d78:	6393      	str	r3, [r2, #56]	; 0x38
 8008d7a:	e0af      	b.n	8008edc <motor_setEnable+0x228>
 8008d7c:	79fa      	ldrb	r2, [r7, #7]
 8008d7e:	495b      	ldr	r1, [pc, #364]	; (8008eec <motor_setEnable+0x238>)
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d115      	bne.n	8008dbe <motor_setEnable+0x10a>
 8008d92:	79fa      	ldrb	r2, [r7, #7]
 8008d94:	4955      	ldr	r1, [pc, #340]	; (8008eec <motor_setEnable+0x238>)
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	330a      	adds	r3, #10
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b298      	uxth	r0, r3
 8008da6:	79fa      	ldrb	r2, [r7, #7]
 8008da8:	4950      	ldr	r1, [pc, #320]	; (8008eec <motor_setEnable+0x238>)
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4603      	mov	r3, r0
 8008dba:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008dbc:	e08e      	b.n	8008edc <motor_setEnable+0x228>
 8008dbe:	79fa      	ldrb	r2, [r7, #7]
 8008dc0:	494a      	ldr	r1, [pc, #296]	; (8008eec <motor_setEnable+0x238>)
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	330a      	adds	r3, #10
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b298      	uxth	r0, r3
 8008dd2:	79fa      	ldrb	r2, [r7, #7]
 8008dd4:	4945      	ldr	r1, [pc, #276]	; (8008eec <motor_setEnable+0x238>)
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4603      	mov	r3, r0
 8008de6:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8008de8:	e07a      	b.n	8008ee0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8008dea:	79fa      	ldrb	r2, [r7, #7]
 8008dec:	493f      	ldr	r1, [pc, #252]	; (8008eec <motor_setEnable+0x238>)
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	440b      	add	r3, r1
 8008df8:	3304      	adds	r3, #4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d115      	bne.n	8008e2c <motor_setEnable+0x178>
 8008e00:	79fa      	ldrb	r2, [r7, #7]
 8008e02:	493a      	ldr	r1, [pc, #232]	; (8008eec <motor_setEnable+0x238>)
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	330e      	adds	r3, #14
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b298      	uxth	r0, r3
 8008e14:	79fa      	ldrb	r2, [r7, #7]
 8008e16:	4935      	ldr	r1, [pc, #212]	; (8008eec <motor_setEnable+0x238>)
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4602      	mov	r2, r0
 8008e28:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8008e2a:	e059      	b.n	8008ee0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8008e2c:	79fa      	ldrb	r2, [r7, #7]
 8008e2e:	492f      	ldr	r1, [pc, #188]	; (8008eec <motor_setEnable+0x238>)
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d115      	bne.n	8008e6e <motor_setEnable+0x1ba>
 8008e42:	79fa      	ldrb	r2, [r7, #7]
 8008e44:	4929      	ldr	r1, [pc, #164]	; (8008eec <motor_setEnable+0x238>)
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	330e      	adds	r3, #14
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b298      	uxth	r0, r3
 8008e56:	79fa      	ldrb	r2, [r7, #7]
 8008e58:	4924      	ldr	r1, [pc, #144]	; (8008eec <motor_setEnable+0x238>)
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	4603      	mov	r3, r0
 8008e6a:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8008e6c:	e038      	b.n	8008ee0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8008e6e:	79fa      	ldrb	r2, [r7, #7]
 8008e70:	491e      	ldr	r1, [pc, #120]	; (8008eec <motor_setEnable+0x238>)
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d115      	bne.n	8008eb0 <motor_setEnable+0x1fc>
 8008e84:	79fa      	ldrb	r2, [r7, #7]
 8008e86:	4919      	ldr	r1, [pc, #100]	; (8008eec <motor_setEnable+0x238>)
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	330e      	adds	r3, #14
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	b298      	uxth	r0, r3
 8008e98:	79fa      	ldrb	r2, [r7, #7]
 8008e9a:	4914      	ldr	r1, [pc, #80]	; (8008eec <motor_setEnable+0x238>)
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4603      	mov	r3, r0
 8008eac:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8008eae:	e017      	b.n	8008ee0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8008eb0:	79fa      	ldrb	r2, [r7, #7]
 8008eb2:	490e      	ldr	r1, [pc, #56]	; (8008eec <motor_setEnable+0x238>)
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	330e      	adds	r3, #14
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b298      	uxth	r0, r3
 8008ec4:	79fa      	ldrb	r2, [r7, #7]
 8008ec6:	4909      	ldr	r1, [pc, #36]	; (8008eec <motor_setEnable+0x238>)
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8008eda:	e001      	b.n	8008ee0 <motor_setEnable+0x22c>
 8008edc:	e000      	b.n	8008ee0 <motor_setEnable+0x22c>
		return;
 8008ede:	bf00      	nop
}
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000de0 	.word	0x20000de0

08008ef0 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460a      	mov	r2, r1
 8008efa:	71fb      	strb	r3, [r7, #7]
 8008efc:	4613      	mov	r3, r2
 8008efe:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f040 80d9 	bne.w	80090ba <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 8008f08:	79fa      	ldrb	r2, [r7, #7]
 8008f0a:	496f      	ldr	r1, [pc, #444]	; (80090c8 <motor_setTorque+0x1d8>)
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	330c      	adds	r3, #12
 8008f18:	79ba      	ldrb	r2, [r7, #6]
 8008f1a:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 8008f1c:	79bb      	ldrb	r3, [r7, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d114      	bne.n	8008f4c <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 8008f22:	79f9      	ldrb	r1, [r7, #7]
 8008f24:	79fa      	ldrb	r2, [r7, #7]
 8008f26:	4868      	ldr	r0, [pc, #416]	; (80090c8 <motor_setTorque+0x1d8>)
 8008f28:	460b      	mov	r3, r1
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4403      	add	r3, r0
 8008f32:	330e      	adds	r3, #14
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b298      	uxth	r0, r3
 8008f38:	4963      	ldr	r1, [pc, #396]	; (80090c8 <motor_setTorque+0x1d8>)
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	440b      	add	r3, r1
 8008f44:	330a      	adds	r3, #10
 8008f46:	4602      	mov	r2, r0
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e031      	b.n	8008fb0 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8008f4c:	79fa      	ldrb	r2, [r7, #7]
 8008f4e:	495e      	ldr	r1, [pc, #376]	; (80090c8 <motor_setTorque+0x1d8>)
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	440b      	add	r3, r1
 8008f5a:	330c      	adds	r3, #12
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 8008f62:	79fa      	ldrb	r2, [r7, #7]
 8008f64:	4958      	ldr	r1, [pc, #352]	; (80090c8 <motor_setTorque+0x1d8>)
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	3310      	adds	r3, #16
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8008f76:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 8008f78:	79fa      	ldrb	r2, [r7, #7]
 8008f7a:	4953      	ldr	r1, [pc, #332]	; (80090c8 <motor_setTorque+0x1d8>)
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3312      	adds	r3, #18
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4623      	mov	r3, r4
 8008f90:	2264      	movs	r2, #100	; 0x64
 8008f92:	2101      	movs	r1, #1
 8008f94:	f000 f89a 	bl	80090cc <motor_map>
 8008f98:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 8008f9a:	79fa      	ldrb	r2, [r7, #7]
 8008f9c:	b298      	uxth	r0, r3
 8008f9e:	494a      	ldr	r1, [pc, #296]	; (80090c8 <motor_setTorque+0x1d8>)
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	330a      	adds	r3, #10
 8008fac:	4602      	mov	r2, r0
 8008fae:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8008fb0:	79fa      	ldrb	r2, [r7, #7]
 8008fb2:	4945      	ldr	r1, [pc, #276]	; (80090c8 <motor_setTorque+0x1d8>)
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d17a      	bne.n	80090be <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8008fc8:	79fa      	ldrb	r2, [r7, #7]
 8008fca:	493f      	ldr	r1, [pc, #252]	; (80090c8 <motor_setTorque+0x1d8>)
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d115      	bne.n	800900a <motor_setTorque+0x11a>
 8008fde:	79fa      	ldrb	r2, [r7, #7]
 8008fe0:	4939      	ldr	r1, [pc, #228]	; (80090c8 <motor_setTorque+0x1d8>)
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	330a      	adds	r3, #10
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b298      	uxth	r0, r3
 8008ff2:	79fa      	ldrb	r2, [r7, #7]
 8008ff4:	4934      	ldr	r1, [pc, #208]	; (80090c8 <motor_setTorque+0x1d8>)
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4602      	mov	r2, r0
 8009006:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8009008:	e059      	b.n	80090be <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800900a:	79fa      	ldrb	r2, [r7, #7]
 800900c:	492e      	ldr	r1, [pc, #184]	; (80090c8 <motor_setTorque+0x1d8>)
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	3304      	adds	r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b04      	cmp	r3, #4
 800901e:	d115      	bne.n	800904c <motor_setTorque+0x15c>
 8009020:	79fa      	ldrb	r2, [r7, #7]
 8009022:	4929      	ldr	r1, [pc, #164]	; (80090c8 <motor_setTorque+0x1d8>)
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	330a      	adds	r3, #10
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b298      	uxth	r0, r3
 8009034:	79fa      	ldrb	r2, [r7, #7]
 8009036:	4924      	ldr	r1, [pc, #144]	; (80090c8 <motor_setTorque+0x1d8>)
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4603      	mov	r3, r0
 8009048:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800904a:	e038      	b.n	80090be <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800904c:	79fa      	ldrb	r2, [r7, #7]
 800904e:	491e      	ldr	r1, [pc, #120]	; (80090c8 <motor_setTorque+0x1d8>)
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	3304      	adds	r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b08      	cmp	r3, #8
 8009060:	d115      	bne.n	800908e <motor_setTorque+0x19e>
 8009062:	79fa      	ldrb	r2, [r7, #7]
 8009064:	4918      	ldr	r1, [pc, #96]	; (80090c8 <motor_setTorque+0x1d8>)
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	330a      	adds	r3, #10
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b298      	uxth	r0, r3
 8009076:	79fa      	ldrb	r2, [r7, #7]
 8009078:	4913      	ldr	r1, [pc, #76]	; (80090c8 <motor_setTorque+0x1d8>)
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	440b      	add	r3, r1
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	4603      	mov	r3, r0
 800908a:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800908c:	e017      	b.n	80090be <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800908e:	79fa      	ldrb	r2, [r7, #7]
 8009090:	490d      	ldr	r1, [pc, #52]	; (80090c8 <motor_setTorque+0x1d8>)
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	330a      	adds	r3, #10
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b298      	uxth	r0, r3
 80090a2:	79fa      	ldrb	r2, [r7, #7]
 80090a4:	4908      	ldr	r1, [pc, #32]	; (80090c8 <motor_setTorque+0x1d8>)
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	440b      	add	r3, r1
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4603      	mov	r3, r0
 80090b6:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80090b8:	e001      	b.n	80090be <motor_setTorque+0x1ce>
		return;
 80090ba:	bf00      	nop
 80090bc:	e000      	b.n	80090c0 <motor_setTorque+0x1d0>
	return;
 80090be:	bf00      	nop
}
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd90      	pop	{r4, r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000de0 	.word	0x20000de0

080090cc <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	69b9      	ldr	r1, [r7, #24]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	1a8a      	subs	r2, r1, r2
 80090e6:	fb03 f202 	mul.w	r2, r3, r2
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	1acb      	subs	r3, r1, r3
 80090f0:	fb92 f2f3 	sdiv	r2, r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	4413      	add	r3, r2
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8009112:	89fb      	ldrh	r3, [r7, #14]
 8009114:	2b05      	cmp	r3, #5
 8009116:	d821      	bhi.n	800915c <cfg_NodeMotorVarProp+0x58>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <cfg_NodeMotorVarProp+0x1c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009139 	.word	0x08009139
 8009124:	0800913f 	.word	0x0800913f
 8009128:	08009145 	.word	0x08009145
 800912c:	0800914b 	.word	0x0800914b
 8009130:	08009151 	.word	0x08009151
 8009134:	08009157 	.word	0x08009157
	{
		case MOTOR_ENA:				str = "Enable"; break;
 8009138:	4b2e      	ldr	r3, [pc, #184]	; (80091f4 <cfg_NodeMotorVarProp+0xf0>)
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e010      	b.n	8009160 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 800913e:	4b2e      	ldr	r3, [pc, #184]	; (80091f8 <cfg_NodeMotorVarProp+0xf4>)
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	e00d      	b.n	8009160 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 8009144:	4b2d      	ldr	r3, [pc, #180]	; (80091fc <cfg_NodeMotorVarProp+0xf8>)
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	e00a      	b.n	8009160 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 800914a:	4b2d      	ldr	r3, [pc, #180]	; (8009200 <cfg_NodeMotorVarProp+0xfc>)
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	e007      	b.n	8009160 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 8009150:	4b2c      	ldr	r3, [pc, #176]	; (8009204 <cfg_NodeMotorVarProp+0x100>)
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e004      	b.n	8009160 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 8009156:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <cfg_NodeMotorVarProp+0x104>)
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	e001      	b.n	8009160 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 800915c:	2302      	movs	r3, #2
 800915e:	e042      	b.n	80091e6 <cfg_NodeMotorVarProp+0xe2>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00f      	beq.n	8009186 <cfg_NodeMotorVarProp+0x82>
 8009166:	e007      	b.n	8009178 <cfg_NodeMotorVarProp+0x74>
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	1c53      	adds	r3, r2, #1
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	1c59      	adds	r1, r3, #1
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	7812      	ldrb	r2, [r2, #0]
 8009176:	701a      	strb	r2, [r3, #0]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f3      	bne.n	8009168 <cfg_NodeMotorVarProp+0x64>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d02b      	beq.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
 800918c:	89fb      	ldrh	r3, [r7, #14]
 800918e:	2b05      	cmp	r3, #5
 8009190:	d826      	bhi.n	80091e0 <cfg_NodeMotorVarProp+0xdc>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <cfg_NodeMotorVarProp+0x94>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091b1 	.word	0x080091b1
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	080091c9 	.word	0x080091c9
 80091a8:	080091d1 	.word	0x080091d1
 80091ac:	080091d9 	.word	0x080091d9
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2223      	movs	r2, #35	; 0x23
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	e015      	b.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e011      	b.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2212      	movs	r2, #18
 80091c4:	801a      	strh	r2, [r3, #0]
 80091c6:	e00d      	b.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2222      	movs	r2, #34	; 0x22
 80091cc:	801a      	strh	r2, [r3, #0]
 80091ce:	e009      	b.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2222      	movs	r2, #34	; 0x22
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	e005      	b.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2222      	movs	r2, #34	; 0x22
 80091dc:	801a      	strh	r2, [r3, #0]
 80091de:	e001      	b.n	80091e4 <cfg_NodeMotorVarProp+0xe0>
		default: return CFG_ERROR_VARID;
 80091e0:	2302      	movs	r3, #2
 80091e2:	e000      	b.n	80091e6 <cfg_NodeMotorVarProp+0xe2>
	}
	return CFG_ERROR_NONE;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	080160c0 	.word	0x080160c0
 80091f8:	080160c8 	.word	0x080160c8
 80091fc:	080160d8 	.word	0x080160d8
 8009200:	080160e4 	.word	0x080160e4
 8009204:	080160f0 	.word	0x080160f0
 8009208:	080160f8 	.word	0x080160f8

0800920c <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d03e      	beq.n	800929c <cfg_NodeMotorVarGet+0x90>
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	2b05      	cmp	r3, #5
 8009222:	d839      	bhi.n	8009298 <cfg_NodeMotorVarGet+0x8c>
 8009224:	a201      	add	r2, pc, #4	; (adr r2, 800922c <cfg_NodeMotorVarGet+0x20>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	08009245 	.word	0x08009245
 8009230:	08009253 	.word	0x08009253
 8009234:	08009261 	.word	0x08009261
 8009238:	0800926f 	.word	0x0800926f
 800923c:	0800927d 	.word	0x0800927d
 8009240:	0800928b 	.word	0x0800928b
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 8009244:	4b19      	ldr	r3, [pc, #100]	; (80092ac <cfg_NodeMotorVarGet+0xa0>)
 8009246:	7a1b      	ldrb	r3, [r3, #8]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e024      	b.n	800929c <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <cfg_NodeMotorVarGet+0xa0>)
 8009254:	7b1b      	ldrb	r3, [r3, #12]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	461a      	mov	r2, r3
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e01d      	b.n	800929c <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 8009260:	4b12      	ldr	r3, [pc, #72]	; (80092ac <cfg_NodeMotorVarGet+0xa0>)
 8009262:	895b      	ldrh	r3, [r3, #10]
 8009264:	b29b      	uxth	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e016      	b.n	800929c <cfg_NodeMotorVarGet+0x90>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <cfg_NodeMotorVarGet+0xa0>)
 8009270:	89db      	ldrh	r3, [r3, #14]
 8009272:	b29b      	uxth	r3, r3
 8009274:	461a      	mov	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	e00f      	b.n	800929c <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <cfg_NodeMotorVarGet+0xa0>)
 800927e:	8a1b      	ldrh	r3, [r3, #16]
 8009280:	b29b      	uxth	r3, r3
 8009282:	461a      	mov	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	e008      	b.n	800929c <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 800928a:	4b08      	ldr	r3, [pc, #32]	; (80092ac <cfg_NodeMotorVarGet+0xa0>)
 800928c:	8a5b      	ldrh	r3, [r3, #18]
 800928e:	b29b      	uxth	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	e001      	b.n	800929c <cfg_NodeMotorVarGet+0x90>
		default: return CFG_ERROR_VARID;
 8009298:	2302      	movs	r3, #2
 800929a:	e000      	b.n	800929e <cfg_NodeMotorVarGet+0x92>
	}
	return CFG_ERROR_NONE;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	20000de0 	.word	0x20000de0

080092b0 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d037      	beq.n	8009332 <cfg_NodeMotorVarSet+0x82>
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	2b05      	cmp	r3, #5
 80092c6:	d831      	bhi.n	800932c <cfg_NodeMotorVarSet+0x7c>
 80092c8:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <cfg_NodeMotorVarSet+0x20>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	080092e9 	.word	0x080092e9
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009331 	.word	0x08009331
 80092dc:	08009309 	.word	0x08009309
 80092e0:	08009315 	.word	0x08009315
 80092e4:	08009321 	.word	0x08009321
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	4619      	mov	r1, r3
 80092f0:	2000      	movs	r0, #0
 80092f2:	f7ff fcdf 	bl	8008cb4 <motor_setEnable>
 80092f6:	e01c      	b.n	8009332 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	2000      	movs	r0, #0
 8009302:	f7ff fdf5 	bl	8008ef0 <motor_setTorque>
 8009306:	e014      	b.n	8009332 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	b29a      	uxth	r2, r3
 800930e:	4b0b      	ldr	r3, [pc, #44]	; (800933c <cfg_NodeMotorVarSet+0x8c>)
 8009310:	81da      	strh	r2, [r3, #14]
 8009312:	e00e      	b.n	8009332 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	b29a      	uxth	r2, r3
 800931a:	4b08      	ldr	r3, [pc, #32]	; (800933c <cfg_NodeMotorVarSet+0x8c>)
 800931c:	821a      	strh	r2, [r3, #16]
 800931e:	e008      	b.n	8009332 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	b29a      	uxth	r2, r3
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <cfg_NodeMotorVarSet+0x8c>)
 8009328:	825a      	strh	r2, [r3, #18]
 800932a:	e002      	b.n	8009332 <cfg_NodeMotorVarSet+0x82>
		default: return CFG_ERROR_VARID;
 800932c:	2302      	movs	r3, #2
 800932e:	e001      	b.n	8009334 <cfg_NodeMotorVarSet+0x84>
		case MOTOR_CUR_PWM:			break;
 8009330:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000de0 	.word	0x20000de0

08009340 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
 800934c:	e010      	b.n	8009370 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	4a0c      	ldr	r2, [pc, #48]	; (8009384 <rc_Timer+0x44>)
 8009352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d007      	beq.n	800936a <rc_Timer+0x2a>
			rc_info.timer[i]--;
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	4a09      	ldr	r2, [pc, #36]	; (8009384 <rc_Timer+0x44>)
 800935e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009362:	3a01      	subs	r2, #1
 8009364:	4907      	ldr	r1, [pc, #28]	; (8009384 <rc_Timer+0x44>)
 8009366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	3301      	adds	r3, #1
 800936e:	73fb      	strb	r3, [r7, #15]
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d9eb      	bls.n	800934e <rc_Timer+0xe>
		}
	}

	return;
 8009376:	bf00      	nop
}
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000e04 	.word	0x20000e04

08009388 <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 800938c:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <rc_InitTask+0x4c>)
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8009394:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <rc_InitTask+0x4c>)
 8009396:	2200      	movs	r2, #0
 8009398:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <rc_InitTask+0x4c>)
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 80093a4:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <rc_InitTask+0x4c>)
 80093a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80093aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 80093ae:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <rc_InitTask+0x4c>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 80093b6:	4b07      	ldr	r3, [pc, #28]	; (80093d4 <rc_InitTask+0x4c>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 80093bc:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <rc_InitTask+0x4c>)
 80093be:	2200      	movs	r2, #0
 80093c0:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 80093c2:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <rc_InitTask+0x4c>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	721a      	strb	r2, [r3, #8]

	return;
 80093c8:	bf00      	nop
}
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000e04 	.word	0x20000e04

080093d8 <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 80093de:	4b53      	ldr	r3, [pc, #332]	; (800952c <rc_Task+0x154>)
 80093e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d047      	beq.n	8009478 <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 80093e8:	4b50      	ldr	r3, [pc, #320]	; (800952c <rc_Task+0x154>)
 80093ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80093ee:	4a4f      	ldr	r2, [pc, #316]	; (800952c <rc_Task+0x154>)
 80093f0:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 80093f2:	4b4e      	ldr	r3, [pc, #312]	; (800952c <rc_Task+0x154>)
 80093f4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <rc_Task+0x2e>
			rc_info.connected = 1;
 80093fe:	4b4b      	ldr	r3, [pc, #300]	; (800952c <rc_Task+0x154>)
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 8009406:	4b49      	ldr	r3, [pc, #292]	; (800952c <rc_Task+0x154>)
 8009408:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800940c:	b2db      	uxtb	r3, r3
 800940e:	b25a      	sxtb	r2, r3
 8009410:	4b46      	ldr	r3, [pc, #280]	; (800952c <rc_Task+0x154>)
 8009412:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 8009416:	4b45      	ldr	r3, [pc, #276]	; (800952c <rc_Task+0x154>)
 8009418:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800941c:	b2db      	uxtb	r3, r3
 800941e:	b25a      	sxtb	r2, r3
 8009420:	4b42      	ldr	r3, [pc, #264]	; (800952c <rc_Task+0x154>)
 8009422:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 8009426:	4b41      	ldr	r3, [pc, #260]	; (800952c <rc_Task+0x154>)
 8009428:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800942c:	b2db      	uxtb	r3, r3
 800942e:	b25a      	sxtb	r2, r3
 8009430:	4b3e      	ldr	r3, [pc, #248]	; (800952c <rc_Task+0x154>)
 8009432:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 8009436:	4b3d      	ldr	r3, [pc, #244]	; (800952c <rc_Task+0x154>)
 8009438:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800943c:	b2db      	uxtb	r3, r3
 800943e:	b25a      	sxtb	r2, r3
 8009440:	4b3a      	ldr	r3, [pc, #232]	; (800952c <rc_Task+0x154>)
 8009442:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8009446:	4b39      	ldr	r3, [pc, #228]	; (800952c <rc_Task+0x154>)
 8009448:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800944c:	b2da      	uxtb	r2, r3
 800944e:	4b37      	ldr	r3, [pc, #220]	; (800952c <rc_Task+0x154>)
 8009450:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8009454:	4b35      	ldr	r3, [pc, #212]	; (800952c <rc_Task+0x154>)
 8009456:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800945a:	b2da      	uxtb	r2, r3
 800945c:	4b33      	ldr	r3, [pc, #204]	; (800952c <rc_Task+0x154>)
 800945e:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 8009462:	4b32      	ldr	r3, [pc, #200]	; (800952c <rc_Task+0x154>)
 8009464:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009468:	3301      	adds	r3, #1
 800946a:	4a30      	ldr	r2, [pc, #192]	; (800952c <rc_Task+0x154>)
 800946c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8009470:	4b2e      	ldr	r3, [pc, #184]	; (800952c <rc_Task+0x154>)
 8009472:	2200      	movs	r2, #0
 8009474:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8009478:	4b2c      	ldr	r3, [pc, #176]	; (800952c <rc_Task+0x154>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <rc_Task+0xbc>
 8009480:	4b2a      	ldr	r3, [pc, #168]	; (800952c <rc_Task+0x154>)
 8009482:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d103      	bne.n	8009494 <rc_Task+0xbc>
		rc_info.connected = 0;
 800948c:	4b27      	ldr	r3, [pc, #156]	; (800952c <rc_Task+0x154>)
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8009494:	4b25      	ldr	r3, [pc, #148]	; (800952c <rc_Task+0x154>)
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d142      	bne.n	8009522 <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 800949c:	4b23      	ldr	r3, [pc, #140]	; (800952c <rc_Task+0x154>)
 800949e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d13c      	bne.n	8009522 <rc_Task+0x14a>
 80094a8:	4b20      	ldr	r3, [pc, #128]	; (800952c <rc_Task+0x154>)
 80094aa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d136      	bne.n	8009522 <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 80094b4:	4b1d      	ldr	r3, [pc, #116]	; (800952c <rc_Task+0x154>)
 80094b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094ba:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 80094bc:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 80094c0:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 80094c2:	1d3b      	adds	r3, r7, #4
 80094c4:	2102      	movs	r1, #2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f904 	bl	80096d4 <rc_AddTxData>
		tmp_u8 = 5;
 80094cc:	2305      	movs	r3, #5
 80094ce:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 80094d0:	1dfb      	adds	r3, r7, #7
 80094d2:	2101      	movs	r1, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f8fd 	bl	80096d4 <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 80094da:	4b15      	ldr	r3, [pc, #84]	; (8009530 <rc_Task+0x158>)
 80094dc:	7d5b      	ldrb	r3, [r3, #21]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 80094e2:	1dfb      	adds	r3, r7, #7
 80094e4:	2101      	movs	r1, #1
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f8f4 	bl	80096d4 <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 80094ec:	4b11      	ldr	r3, [pc, #68]	; (8009534 <rc_Task+0x15c>)
 80094ee:	89db      	ldrh	r3, [r3, #14]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 80094f4:	1d3b      	adds	r3, r7, #4
 80094f6:	2102      	movs	r1, #2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f8eb 	bl	80096d4 <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 80094fe:	4b0e      	ldr	r3, [pc, #56]	; (8009538 <rc_Task+0x160>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	4619      	mov	r1, r3
 8009506:	480d      	ldr	r0, [pc, #52]	; (800953c <rc_Task+0x164>)
 8009508:	f7fa f8a4 	bl	8003654 <crc16_calc>
 800950c:	4603      	mov	r3, r0
 800950e:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009510:	1d3b      	adds	r3, r7, #4
 8009512:	2102      	movs	r1, #2
 8009514:	4618      	mov	r0, r3
 8009516:	f000 f8dd 	bl	80096d4 <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 800951a:	4b07      	ldr	r3, [pc, #28]	; (8009538 <rc_Task+0x160>)
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
	}

	return;
 8009520:	bf00      	nop
 8009522:	bf00      	nop
}
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000e04 	.word	0x20000e04
 8009530:	20000284 	.word	0x20000284
 8009534:	20000350 	.word	0x20000350
 8009538:	20000fb4 	.word	0x20000fb4
 800953c:	20000f34 	.word	0x20000f34

08009540 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 800954a:	4b4f      	ldr	r3, [pc, #316]	; (8009688 <rc_RcvData+0x148>)
 800954c:	899b      	ldrh	r3, [r3, #12]
 800954e:	b29b      	uxth	r3, r3
 8009550:	3301      	adds	r3, #1
 8009552:	b29b      	uxth	r3, r3
 8009554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009558:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 800955a:	4b4b      	ldr	r3, [pc, #300]	; (8009688 <rc_RcvData+0x148>)
 800955c:	4611      	mov	r1, r2
 800955e:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8009560:	4b49      	ldr	r3, [pc, #292]	; (8009688 <rc_RcvData+0x148>)
 8009562:	4413      	add	r3, r2
 8009564:	79fa      	ldrb	r2, [r7, #7]
 8009566:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8009568:	4b47      	ldr	r3, [pc, #284]	; (8009688 <rc_RcvData+0x148>)
 800956a:	7a1b      	ldrb	r3, [r3, #8]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d12a      	bne.n	80095c8 <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8009572:	4b45      	ldr	r3, [pc, #276]	; (8009688 <rc_RcvData+0x148>)
 8009574:	899b      	ldrh	r3, [r3, #12]
 8009576:	b29b      	uxth	r3, r3
 8009578:	3b02      	subs	r3, #2
 800957a:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 800957c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009580:	b29b      	uxth	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	4841      	ldr	r0, [pc, #260]	; (800968c <rc_RcvData+0x14c>)
 8009586:	f000 f885 	bl	8009694 <rc_ringBufRead16b>
 800958a:	4603      	mov	r3, r0
 800958c:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 800958e:	897b      	ldrh	r3, [r7, #10]
 8009590:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8009594:	4293      	cmp	r3, r2
 8009596:	d173      	bne.n	8009680 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8009598:	4b3b      	ldr	r3, [pc, #236]	; (8009688 <rc_RcvData+0x148>)
 800959a:	899b      	ldrh	r3, [r3, #12]
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b02      	subs	r3, #2
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	4b37      	ldr	r3, [pc, #220]	; (8009688 <rc_RcvData+0x148>)
 80095aa:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	4b37      	ldr	r3, [pc, #220]	; (8009690 <rc_RcvData+0x150>)
 80095b2:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	3b02      	subs	r3, #2
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	4b32      	ldr	r3, [pc, #200]	; (8009688 <rc_RcvData+0x148>)
 80095be:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 80095c0:	4b31      	ldr	r3, [pc, #196]	; (8009688 <rc_RcvData+0x148>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 80095c6:	e05b      	b.n	8009680 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 80095c8:	4b2f      	ldr	r3, [pc, #188]	; (8009688 <rc_RcvData+0x148>)
 80095ca:	7a1b      	ldrb	r3, [r3, #8]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d156      	bne.n	8009680 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 80095d2:	4b2f      	ldr	r3, [pc, #188]	; (8009690 <rc_RcvData+0x150>)
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	4b2d      	ldr	r3, [pc, #180]	; (8009690 <rc_RcvData+0x150>)
 80095dc:	801a      	strh	r2, [r3, #0]
 80095de:	4b2c      	ldr	r3, [pc, #176]	; (8009690 <rc_RcvData+0x150>)
 80095e0:	881b      	ldrh	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d14c      	bne.n	8009680 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 80095e6:	4b28      	ldr	r3, [pc, #160]	; (8009688 <rc_RcvData+0x148>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 80095ec:	4b26      	ldr	r3, [pc, #152]	; (8009688 <rc_RcvData+0x148>)
 80095ee:	895b      	ldrh	r3, [r3, #10]
 80095f0:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 80095f2:	4b25      	ldr	r3, [pc, #148]	; (8009688 <rc_RcvData+0x148>)
 80095f4:	89db      	ldrh	r3, [r3, #14]
 80095f6:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 80095f8:	3303      	adds	r3, #3
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	237f      	movs	r3, #127	; 0x7f
 80095fe:	4823      	ldr	r0, [pc, #140]	; (800968c <rc_RcvData+0x14c>)
 8009600:	f7fa f852 	bl	80036a8 <crc16_RingBuf>
 8009604:	4603      	mov	r3, r0
 8009606:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8009608:	4b1f      	ldr	r3, [pc, #124]	; (8009688 <rc_RcvData+0x148>)
 800960a:	899b      	ldrh	r3, [r3, #12]
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8009612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009616:	b29b      	uxth	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	481c      	ldr	r0, [pc, #112]	; (800968c <rc_RcvData+0x14c>)
 800961c:	f000 f83a 	bl	8009694 <rc_ringBufRead16b>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	89bb      	ldrh	r3, [r7, #12]
 8009626:	4293      	cmp	r3, r2
 8009628:	d12a      	bne.n	8009680 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 800962a:	4b17      	ldr	r3, [pc, #92]	; (8009688 <rc_RcvData+0x148>)
 800962c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009630:	2b00      	cmp	r3, #0
 8009632:	d125      	bne.n	8009680 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8009634:	2300      	movs	r3, #0
 8009636:	81fb      	strh	r3, [r7, #14]
 8009638:	e014      	b.n	8009664 <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 800963a:	4b13      	ldr	r3, [pc, #76]	; (8009688 <rc_RcvData+0x148>)
 800963c:	895b      	ldrh	r3, [r3, #10]
 800963e:	b29b      	uxth	r3, r3
 8009640:	1cda      	adds	r2, r3, #3
 8009642:	89fb      	ldrh	r3, [r7, #14]
 8009644:	4413      	add	r3, r2
 8009646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 800964a:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 800964c:	490e      	ldr	r1, [pc, #56]	; (8009688 <rc_RcvData+0x148>)
 800964e:	440a      	add	r2, r1
 8009650:	7c12      	ldrb	r2, [r2, #16]
 8009652:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8009654:	4a0c      	ldr	r2, [pc, #48]	; (8009688 <rc_RcvData+0x148>)
 8009656:	4413      	add	r3, r2
 8009658:	460a      	mov	r2, r1
 800965a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 800965e:	89fb      	ldrh	r3, [r7, #14]
 8009660:	3301      	adds	r3, #1
 8009662:	81fb      	strh	r3, [r7, #14]
 8009664:	4b08      	ldr	r3, [pc, #32]	; (8009688 <rc_RcvData+0x148>)
 8009666:	89db      	ldrh	r3, [r3, #14]
 8009668:	b29b      	uxth	r3, r3
 800966a:	89fa      	ldrh	r2, [r7, #14]
 800966c:	429a      	cmp	r2, r3
 800966e:	d3e4      	bcc.n	800963a <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8009670:	4b05      	ldr	r3, [pc, #20]	; (8009688 <rc_RcvData+0x148>)
 8009672:	89db      	ldrh	r3, [r3, #14]
 8009674:	b29b      	uxth	r3, r3
 8009676:	461a      	mov	r2, r3
 8009678:	4b03      	ldr	r3, [pc, #12]	; (8009688 <rc_RcvData+0x148>)
 800967a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 800967e:	bf00      	nop
 8009680:	bf00      	nop
}
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000e04 	.word	0x20000e04
 800968c:	20000e14 	.word	0x20000e14
 8009690:	20000fb8 	.word	0x20000fb8

08009694 <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 80096a0:	887b      	ldrh	r3, [r7, #2]
 80096a2:	3301      	adds	r3, #1
 80096a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	021b      	lsls	r3, r3, #8
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	887b      	ldrh	r3, [r7, #2]
 80096b8:	6879      	ldr	r1, [r7, #4]
 80096ba:	440b      	add	r3, r1
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	4413      	add	r3, r2
 80096c2:	81fb      	strh	r3, [r7, #14]

	return tmp;
 80096c4:	89fb      	ldrh	r3, [r7, #14]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
	...

080096d4 <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 80096de:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <rc_AddTxData+0x40>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d80f      	bhi.n	800970c <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 80096ec:	4b09      	ldr	r3, [pc, #36]	; (8009714 <rc_AddTxData+0x40>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a09      	ldr	r2, [pc, #36]	; (8009718 <rc_AddTxData+0x44>)
 80096f2:	4413      	add	r3, r2
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f00c f8c1 	bl	8015880 <memcpy>
	_rc_tx_buf_len += len;
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <rc_AddTxData+0x40>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	4413      	add	r3, r2
 8009706:	4a03      	ldr	r2, [pc, #12]	; (8009714 <rc_AddTxData+0x40>)
 8009708:	6013      	str	r3, [r2, #0]

	return;
 800970a:	e000      	b.n	800970e <rc_AddTxData+0x3a>
		return;
 800970c:	bf00      	nop
}
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000fb4 	.word	0x20000fb4
 8009718:	20000f34 	.word	0x20000f34

0800971c <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800972a:	89fb      	ldrh	r3, [r7, #14]
 800972c:	2b09      	cmp	r3, #9
 800972e:	d835      	bhi.n	800979c <cfg_NodeRcVarProp+0x80>
 8009730:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <cfg_NodeRcVarProp+0x1c>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009761 	.word	0x08009761
 800973c:	08009767 	.word	0x08009767
 8009740:	0800976d 	.word	0x0800976d
 8009744:	08009773 	.word	0x08009773
 8009748:	08009779 	.word	0x08009779
 800974c:	0800977f 	.word	0x0800977f
 8009750:	08009785 	.word	0x08009785
 8009754:	0800978b 	.word	0x0800978b
 8009758:	08009791 	.word	0x08009791
 800975c:	08009797 	.word	0x08009797
	{
		case RC_ENA:				str = "Enable"; break;
 8009760:	4b40      	ldr	r3, [pc, #256]	; (8009864 <cfg_NodeRcVarProp+0x148>)
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	e01c      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8009766:	4b40      	ldr	r3, [pc, #256]	; (8009868 <cfg_NodeRcVarProp+0x14c>)
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e019      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 800976c:	4b3f      	ldr	r3, [pc, #252]	; (800986c <cfg_NodeRcVarProp+0x150>)
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	e016      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8009772:	4b3f      	ldr	r3, [pc, #252]	; (8009870 <cfg_NodeRcVarProp+0x154>)
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	e013      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8009778:	4b3e      	ldr	r3, [pc, #248]	; (8009874 <cfg_NodeRcVarProp+0x158>)
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	e010      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 800977e:	4b3e      	ldr	r3, [pc, #248]	; (8009878 <cfg_NodeRcVarProp+0x15c>)
 8009780:	617b      	str	r3, [r7, #20]
 8009782:	e00d      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8009784:	4b3d      	ldr	r3, [pc, #244]	; (800987c <cfg_NodeRcVarProp+0x160>)
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e00a      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 800978a:	4b3d      	ldr	r3, [pc, #244]	; (8009880 <cfg_NodeRcVarProp+0x164>)
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	e007      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8009790:	4b3c      	ldr	r3, [pc, #240]	; (8009884 <cfg_NodeRcVarProp+0x168>)
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e004      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8009796:	4b3c      	ldr	r3, [pc, #240]	; (8009888 <cfg_NodeRcVarProp+0x16c>)
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	e001      	b.n	80097a0 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 800979c:	2302      	movs	r3, #2
 800979e:	e05a      	b.n	8009856 <cfg_NodeRcVarProp+0x13a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00f      	beq.n	80097c6 <cfg_NodeRcVarProp+0xaa>
 80097a6:	e007      	b.n	80097b8 <cfg_NodeRcVarProp+0x9c>
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	1c53      	adds	r3, r2, #1
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	1c59      	adds	r1, r3, #1
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	7812      	ldrb	r2, [r2, #0]
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1f3      	bne.n	80097a8 <cfg_NodeRcVarProp+0x8c>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d043      	beq.n	8009854 <cfg_NodeRcVarProp+0x138>
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	d83e      	bhi.n	8009850 <cfg_NodeRcVarProp+0x134>
 80097d2:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <cfg_NodeRcVarProp+0xbc>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	08009801 	.word	0x08009801
 80097dc:	08009809 	.word	0x08009809
 80097e0:	08009811 	.word	0x08009811
 80097e4:	08009819 	.word	0x08009819
 80097e8:	08009821 	.word	0x08009821
 80097ec:	08009829 	.word	0x08009829
 80097f0:	08009831 	.word	0x08009831
 80097f4:	08009839 	.word	0x08009839
 80097f8:	08009841 	.word	0x08009841
 80097fc:	08009849 	.word	0x08009849
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2223      	movs	r2, #35	; 0x23
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e025      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2222      	movs	r2, #34	; 0x22
 800980c:	801a      	strh	r2, [r3, #0]
 800980e:	e021      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2223      	movs	r2, #35	; 0x23
 8009814:	801a      	strh	r2, [r3, #0]
 8009816:	e01d      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2212      	movs	r2, #18
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	e019      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2211      	movs	r2, #17
 8009824:	801a      	strh	r2, [r3, #0]
 8009826:	e015      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2211      	movs	r2, #17
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	e011      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2211      	movs	r2, #17
 8009834:	801a      	strh	r2, [r3, #0]
 8009836:	e00d      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2211      	movs	r2, #17
 800983c:	801a      	strh	r2, [r3, #0]
 800983e:	e009      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2213      	movs	r2, #19
 8009844:	801a      	strh	r2, [r3, #0]
 8009846:	e005      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2213      	movs	r2, #19
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	e001      	b.n	8009854 <cfg_NodeRcVarProp+0x138>
		default: return CFG_ERROR_VARID;
 8009850:	2302      	movs	r3, #2
 8009852:	e000      	b.n	8009856 <cfg_NodeRcVarProp+0x13a>
	}
	return CFG_ERROR_NONE;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	08016100 	.word	0x08016100
 8009868:	08016108 	.word	0x08016108
 800986c:	08016120 	.word	0x08016120
 8009870:	08016130 	.word	0x08016130
 8009874:	08016140 	.word	0x08016140
 8009878:	0801614c 	.word	0x0801614c
 800987c:	08016158 	.word	0x08016158
 8009880:	08016168 	.word	0x08016168
 8009884:	08016178 	.word	0x08016178
 8009888:	08016184 	.word	0x08016184

0800988c <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d06a      	beq.n	8009974 <cfg_NodeRcVarGet+0xe8>
 800989e:	88fb      	ldrh	r3, [r7, #6]
 80098a0:	2b09      	cmp	r3, #9
 80098a2:	d865      	bhi.n	8009970 <cfg_NodeRcVarGet+0xe4>
 80098a4:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <cfg_NodeRcVarGet+0x20>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098d5 	.word	0x080098d5
 80098b0:	080098e5 	.word	0x080098e5
 80098b4:	080098f5 	.word	0x080098f5
 80098b8:	08009905 	.word	0x08009905
 80098bc:	08009911 	.word	0x08009911
 80098c0:	08009921 	.word	0x08009921
 80098c4:	08009931 	.word	0x08009931
 80098c8:	08009941 	.word	0x08009941
 80098cc:	08009951 	.word	0x08009951
 80098d0:	08009961 	.word	0x08009961
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 80098d4:	4b2b      	ldr	r3, [pc, #172]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 80098d6:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e047      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 80098e4:	4b27      	ldr	r3, [pc, #156]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 80098e6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e03f      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 80098f4:	4b23      	ldr	r3, [pc, #140]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 80098f6:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e037      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 8009904:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009906:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e031      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 8009910:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009912:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8009916:	b25b      	sxtb	r3, r3
 8009918:	461a      	mov	r2, r3
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	e029      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 8009920:	4b18      	ldr	r3, [pc, #96]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009922:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8009926:	b25b      	sxtb	r3, r3
 8009928:	461a      	mov	r2, r3
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e021      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 8009930:	4b14      	ldr	r3, [pc, #80]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009932:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8009936:	b25b      	sxtb	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e019      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 8009940:	4b10      	ldr	r3, [pc, #64]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009942:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8009946:	b25b      	sxtb	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e011      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 8009950:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009952:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8009956:	b2db      	uxtb	r3, r3
 8009958:	461a      	mov	r2, r3
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	e009      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 8009960:	4b08      	ldr	r3, [pc, #32]	; (8009984 <cfg_NodeRcVarGet+0xf8>)
 8009962:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8009966:	b2db      	uxtb	r3, r3
 8009968:	461a      	mov	r2, r3
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e001      	b.n	8009974 <cfg_NodeRcVarGet+0xe8>
		default: return CFG_ERROR_VARID;
 8009970:	2302      	movs	r3, #2
 8009972:	e000      	b.n	8009976 <cfg_NodeRcVarGet+0xea>
	}
	return CFG_ERROR_NONE;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000e04 	.word	0x20000e04

08009988 <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	6039      	str	r1, [r7, #0]
 8009992:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d032      	beq.n	8009a00 <cfg_NodeRcVarSet+0x78>
 800999a:	88fb      	ldrh	r3, [r7, #6]
 800999c:	2b09      	cmp	r3, #9
 800999e:	d82c      	bhi.n	80099fa <cfg_NodeRcVarSet+0x72>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <cfg_NodeRcVarSet+0x20>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099df 	.word	0x080099df
 80099b0:	080099ed 	.word	0x080099ed
 80099b4:	080099ff 	.word	0x080099ff
 80099b8:	080099ff 	.word	0x080099ff
 80099bc:	080099ff 	.word	0x080099ff
 80099c0:	080099ff 	.word	0x080099ff
 80099c4:	080099ff 	.word	0x080099ff
 80099c8:	080099ff 	.word	0x080099ff
 80099cc:	080099ff 	.word	0x080099ff
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <cfg_NodeRcVarSet+0x88>)
 80099d8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 80099dc:	e010      	b.n	8009a00 <cfg_NodeRcVarSet+0x78>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <cfg_NodeRcVarSet+0x88>)
 80099e6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80099ea:	e009      	b.n	8009a00 <cfg_NodeRcVarSet+0x78>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <cfg_NodeRcVarSet+0x88>)
 80099f4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80099f8:	e002      	b.n	8009a00 <cfg_NodeRcVarSet+0x78>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 80099fa:	2302      	movs	r3, #2
 80099fc:	e001      	b.n	8009a02 <cfg_NodeRcVarSet+0x7a>
		case RC_RX_PKT_CNT:			break;
 80099fe:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	20000e04 	.word	0x20000e04

08009a14 <sens_Timer>:
void sens_SetAccelRange(uint8_t range);

volatile sens_infoTypeDef sens_info;

void sens_Timer(uint32_t res)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
#ifdef NO_SENS
	return;
#endif //NO_SENS

	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
 8009a20:	e010      	b.n	8009a44 <sens_Timer+0x30>
	{
		if( sens_info.timer[i] > 0 ){
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	4a0c      	ldr	r2, [pc, #48]	; (8009a58 <sens_Timer+0x44>)
 8009a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <sens_Timer+0x2a>
			sens_info.timer[i]--;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	4a09      	ldr	r2, [pc, #36]	; (8009a58 <sens_Timer+0x44>)
 8009a32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009a36:	3a01      	subs	r2, #1
 8009a38:	4907      	ldr	r1, [pc, #28]	; (8009a58 <sens_Timer+0x44>)
 8009a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	3301      	adds	r3, #1
 8009a42:	73fb      	strb	r3, [r7, #15]
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0eb      	beq.n	8009a22 <sens_Timer+0xe>
		}
	}

	return;
 8009a4a:	bf00      	nop
}
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20000fbc 	.word	0x20000fbc

08009a5c <sens_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_InitTask()
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	//Init state
	sens_info.state = 0;
 8009a60:	4b03      	ldr	r3, [pc, #12]	; (8009a70 <sens_InitTask+0x14>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	711a      	strb	r2, [r3, #4]

	return;
 8009a66:	bf00      	nop
}
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	20000fbc 	.word	0x20000fbc

08009a74 <sens_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_Task(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af02      	add	r7, sp, #8
#endif //NO_SENS

	static uint16_t t_cal_step = 0;

	//Reset
	if( sens_info.state == 0 )
 8009a7a:	4b56      	ldr	r3, [pc, #344]	; (8009bd4 <sens_Task+0x160>)
 8009a7c:	791b      	ldrb	r3, [r3, #4]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d116      	bne.n	8009ab2 <sens_Task+0x3e>
	{
		sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 8009a84:	2180      	movs	r1, #128	; 0x80
 8009a86:	206b      	movs	r0, #107	; 0x6b
 8009a88:	f000 fa92 	bl	8009fb0 <sens_WriteByte>
		sens_info.timer[SENS_TMR_PROC] = 5000;
 8009a8c:	4b51      	ldr	r3, [pc, #324]	; (8009bd4 <sens_Task+0x160>)
 8009a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a92:	601a      	str	r2, [r3, #0]
		sens_info.state = 1;
 8009a94:	4b4f      	ldr	r3, [pc, #316]	; (8009bd4 <sens_Task+0x160>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	711a      	strb	r2, [r3, #4]
		leds_setBlink(LED_SIM_BLUE, 50, 1000, 0, 0, 1);
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009aa8:	2132      	movs	r1, #50	; 0x32
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f7fc fff2 	bl	8006a94 <leds_setBlink>
			sens_info.timer[SENS_TMR_PROC] = 1;
			sens_UpdData();
		}
	}

	return;
 8009ab0:	e08d      	b.n	8009bce <sens_Task+0x15a>
	else if( sens_info.state == 1 )
 8009ab2:	4b48      	ldr	r3, [pc, #288]	; (8009bd4 <sens_Task+0x160>)
 8009ab4:	791b      	ldrb	r3, [r3, #4]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d12e      	bne.n	8009b1a <sens_Task+0xa6>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8009abc:	4b45      	ldr	r3, [pc, #276]	; (8009bd4 <sens_Task+0x160>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 8084 	bne.w	8009bce <sens_Task+0x15a>
			sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x00);
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	206b      	movs	r0, #107	; 0x6b
 8009aca:	f000 fa71 	bl	8009fb0 <sens_WriteByte>
			sens_SetGyroRange(GYRO_RANGE_250DPS);
 8009ace:	2000      	movs	r0, #0
 8009ad0:	f000 f8c8 	bl	8009c64 <sens_SetGyroRange>
			sens_SetAccelRange(ACCEL_RANGE_2G);
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	f000 f8d9 	bl	8009c8c <sens_SetAccelRange>
			sens_WriteByte(SENS_REG_CONFIG, 0x00);
 8009ada:	2100      	movs	r1, #0
 8009adc:	201a      	movs	r0, #26
 8009ade:	f000 fa67 	bl	8009fb0 <sens_WriteByte>
			t_cal_step = SENS_CAL_STEP_NUM;
 8009ae2:	4b3d      	ldr	r3, [pc, #244]	; (8009bd8 <sens_Task+0x164>)
 8009ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ae8:	801a      	strh	r2, [r3, #0]
			sens_info.gyro_x_bias = 0.0;
 8009aea:	4b3a      	ldr	r3, [pc, #232]	; (8009bd4 <sens_Task+0x160>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	615a      	str	r2, [r3, #20]
			sens_info.gyro_y_bias = 0.0;
 8009af0:	4b38      	ldr	r3, [pc, #224]	; (8009bd4 <sens_Task+0x160>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	619a      	str	r2, [r3, #24]
			sens_info.gyro_z_bias = 0.0;
 8009af6:	4b37      	ldr	r3, [pc, #220]	; (8009bd4 <sens_Task+0x160>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	61da      	str	r2, [r3, #28]
			sens_info.state = 2;
 8009afc:	4b35      	ldr	r3, [pc, #212]	; (8009bd4 <sens_Task+0x160>)
 8009afe:	2202      	movs	r2, #2
 8009b00:	711a      	strb	r2, [r3, #4]
			leds_setBlink(LED_SIM_BLUE, 50, 500, 0, 0, 1);
 8009b02:	2301      	movs	r3, #1
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	2300      	movs	r3, #0
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009b10:	2132      	movs	r1, #50	; 0x32
 8009b12:	2000      	movs	r0, #0
 8009b14:	f7fc ffbe 	bl	8006a94 <leds_setBlink>
	return;
 8009b18:	e059      	b.n	8009bce <sens_Task+0x15a>
	else if( sens_info.state == 2 )
 8009b1a:	4b2e      	ldr	r3, [pc, #184]	; (8009bd4 <sens_Task+0x160>)
 8009b1c:	791b      	ldrb	r3, [r3, #4]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d145      	bne.n	8009bb0 <sens_Task+0x13c>
		if( t_cal_step > 0 )
 8009b24:	4b2c      	ldr	r3, [pc, #176]	; (8009bd8 <sens_Task+0x164>)
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00f      	beq.n	8009b4c <sens_Task+0xd8>
			if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8009b2c:	4b29      	ldr	r3, [pc, #164]	; (8009bd4 <sens_Task+0x160>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d14c      	bne.n	8009bce <sens_Task+0x15a>
				sens_CalibrateStep();
 8009b34:	f000 f854 	bl	8009be0 <sens_CalibrateStep>
				t_cal_step -= 1;
 8009b38:	4b27      	ldr	r3, [pc, #156]	; (8009bd8 <sens_Task+0x164>)
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	4b25      	ldr	r3, [pc, #148]	; (8009bd8 <sens_Task+0x164>)
 8009b42:	801a      	strh	r2, [r3, #0]
				sens_info.timer[SENS_TMR_PROC] = 1;
 8009b44:	4b23      	ldr	r3, [pc, #140]	; (8009bd4 <sens_Task+0x160>)
 8009b46:	2201      	movs	r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
	return;
 8009b4a:	e040      	b.n	8009bce <sens_Task+0x15a>
			sens_info.gyro_x_bias /= SENS_CAL_STEP_NUM;
 8009b4c:	4b21      	ldr	r3, [pc, #132]	; (8009bd4 <sens_Task+0x160>)
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	4a22      	ldr	r2, [pc, #136]	; (8009bdc <sens_Task+0x168>)
 8009b52:	fb82 1203 	smull	r1, r2, r2, r3
 8009b56:	1192      	asrs	r2, r2, #6
 8009b58:	17db      	asrs	r3, r3, #31
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	4a1d      	ldr	r2, [pc, #116]	; (8009bd4 <sens_Task+0x160>)
 8009b5e:	6153      	str	r3, [r2, #20]
			sens_info.gyro_y_bias /= SENS_CAL_STEP_NUM;
 8009b60:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <sens_Task+0x160>)
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	4a1d      	ldr	r2, [pc, #116]	; (8009bdc <sens_Task+0x168>)
 8009b66:	fb82 1203 	smull	r1, r2, r2, r3
 8009b6a:	1192      	asrs	r2, r2, #6
 8009b6c:	17db      	asrs	r3, r3, #31
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <sens_Task+0x160>)
 8009b72:	6193      	str	r3, [r2, #24]
			sens_info.gyro_z_bias /= SENS_CAL_STEP_NUM;
 8009b74:	4b17      	ldr	r3, [pc, #92]	; (8009bd4 <sens_Task+0x160>)
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	4a18      	ldr	r2, [pc, #96]	; (8009bdc <sens_Task+0x168>)
 8009b7a:	fb82 1203 	smull	r1, r2, r2, r3
 8009b7e:	1192      	asrs	r2, r2, #6
 8009b80:	17db      	asrs	r3, r3, #31
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	4a13      	ldr	r2, [pc, #76]	; (8009bd4 <sens_Task+0x160>)
 8009b86:	61d3      	str	r3, [r2, #28]
			sens_info.timer[SENS_TMR_PROC] = 1;
 8009b88:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <sens_Task+0x160>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
			sens_SetAccelRange(ACCEL_RANGE_8G);
 8009b8e:	2010      	movs	r0, #16
 8009b90:	f000 f87c 	bl	8009c8c <sens_SetAccelRange>
			sens_info.state = 3;
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <sens_Task+0x160>)
 8009b96:	2203      	movs	r2, #3
 8009b98:	711a      	strb	r2, [r3, #4]
			leds_setBlink(LED_SIM_BLUE, 50, 100, 0, 0, 1);
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	2264      	movs	r2, #100	; 0x64
 8009ba6:	2132      	movs	r1, #50	; 0x32
 8009ba8:	2000      	movs	r0, #0
 8009baa:	f7fc ff73 	bl	8006a94 <leds_setBlink>
	return;
 8009bae:	e00e      	b.n	8009bce <sens_Task+0x15a>
	else if( sens_info.state == 3 )
 8009bb0:	4b08      	ldr	r3, [pc, #32]	; (8009bd4 <sens_Task+0x160>)
 8009bb2:	791b      	ldrb	r3, [r3, #4]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d109      	bne.n	8009bce <sens_Task+0x15a>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <sens_Task+0x160>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d105      	bne.n	8009bce <sens_Task+0x15a>
			sens_info.timer[SENS_TMR_PROC] = 1;
 8009bc2:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <sens_Task+0x160>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
			sens_UpdData();
 8009bc8:	f000 f876 	bl	8009cb8 <sens_UpdData>
	return;
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
}
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000fbc 	.word	0x20000fbc
 8009bd8:	20001010 	.word	0x20001010
 8009bdc:	10624dd3 	.word	0x10624dd3

08009be0 <sens_CalibrateStep>:

//
void sens_CalibrateStep()
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    int16_t gyroX, gyroY, gyroZ;

	HAL_I2C_Mem_Read(&hi2c1, SENS_I2C_ADDR, SENS_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
 8009be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bea:	9302      	str	r3, [sp, #8]
 8009bec:	2306      	movs	r3, #6
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	2243      	movs	r2, #67	; 0x43
 8009bf8:	21d0      	movs	r1, #208	; 0xd0
 8009bfa:	4818      	ldr	r0, [pc, #96]	; (8009c5c <sens_CalibrateStep+0x7c>)
 8009bfc:	f002 ffc2 	bl	800cb84 <HAL_I2C_Mem_Read>
	gyroX = (int16_t)(buffer[0] << 8 | buffer[1]);
 8009c00:	793b      	ldrb	r3, [r7, #4]
 8009c02:	021b      	lsls	r3, r3, #8
 8009c04:	b21a      	sxth	r2, r3
 8009c06:	797b      	ldrb	r3, [r7, #5]
 8009c08:	b21b      	sxth	r3, r3
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	81fb      	strh	r3, [r7, #14]
	gyroY = (int16_t)(buffer[2] << 8 | buffer[3]);
 8009c0e:	79bb      	ldrb	r3, [r7, #6]
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	b21a      	sxth	r2, r3
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	81bb      	strh	r3, [r7, #12]
	gyroZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 8009c1c:	7a3b      	ldrb	r3, [r7, #8]
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	b21a      	sxth	r2, r3
 8009c22:	7a7b      	ldrb	r3, [r7, #9]
 8009c24:	b21b      	sxth	r3, r3
 8009c26:	4313      	orrs	r3, r2
 8009c28:	817b      	strh	r3, [r7, #10]

	sens_info.gyro_x_bias += gyroX;
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <sens_CalibrateStep+0x80>)
 8009c2c:	695a      	ldr	r2, [r3, #20]
 8009c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c32:	4413      	add	r3, r2
 8009c34:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <sens_CalibrateStep+0x80>)
 8009c36:	6153      	str	r3, [r2, #20]
	sens_info.gyro_y_bias += gyroY;
 8009c38:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <sens_CalibrateStep+0x80>)
 8009c3a:	699a      	ldr	r2, [r3, #24]
 8009c3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009c40:	4413      	add	r3, r2
 8009c42:	4a07      	ldr	r2, [pc, #28]	; (8009c60 <sens_CalibrateStep+0x80>)
 8009c44:	6193      	str	r3, [r2, #24]
	sens_info.gyro_z_bias += gyroZ;
 8009c46:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <sens_CalibrateStep+0x80>)
 8009c48:	69da      	ldr	r2, [r3, #28]
 8009c4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009c4e:	4413      	add	r3, r2
 8009c50:	4a03      	ldr	r2, [pc, #12]	; (8009c60 <sens_CalibrateStep+0x80>)
 8009c52:	61d3      	str	r3, [r2, #28]
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000ab8 	.word	0x20000ab8
 8009c60:	20000fbc 	.word	0x20000fbc

08009c64 <sens_SetGyroRange>:

//
void sens_SetGyroRange(uint8_t range)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
	sens_info.gyro_range = range;
 8009c6e:	4a06      	ldr	r2, [pc, #24]	; (8009c88 <sens_SetGyroRange+0x24>)
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	7153      	strb	r3, [r2, #5]
	sens_WriteByte(SENS_REG_GYRO_CONFIG, range);
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	4619      	mov	r1, r3
 8009c78:	201b      	movs	r0, #27
 8009c7a:	f000 f999 	bl	8009fb0 <sens_WriteByte>

    return;
 8009c7e:	bf00      	nop
}
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000fbc 	.word	0x20000fbc

08009c8c <sens_SetAccelRange>:

//
void sens_SetAccelRange(uint8_t range)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	71fb      	strb	r3, [r7, #7]
	sens_info.accel_range = range;
 8009c96:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <sens_SetAccelRange+0x24>)
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	f882 3020 	strb.w	r3, [r2, #32]
	sens_WriteByte(SENS_REG_ACCEL_CONFIG, range);
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	201c      	movs	r0, #28
 8009ca4:	f000 f984 	bl	8009fb0 <sens_WriteByte>

    return;
 8009ca8:	bf00      	nop
}
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20000fbc 	.word	0x20000fbc
 8009cb4:	00000000 	.word	0x00000000

08009cb8 <sens_UpdData>:

//
HAL_StatusTypeDef sens_UpdData()
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08a      	sub	sp, #40	; 0x28
 8009cbc:	af00      	add	r7, sp, #0
    uint8_t buf[14];
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_ACCEL_XOUT_H, buf, 14);
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	220e      	movs	r2, #14
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	203b      	movs	r0, #59	; 0x3b
 8009cc6:	f000 f98f 	bl	8009fe8 <sens_Read>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8009cce:	7ffb      	ldrb	r3, [r7, #31]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <sens_UpdData+0x20>
        return status;
 8009cd4:	7ffb      	ldrb	r3, [r7, #31]
 8009cd6:	e157      	b.n	8009f88 <sens_UpdData+0x2d0>
    }

    int16_t raw_accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8009cd8:	783b      	ldrb	r3, [r7, #0]
 8009cda:	021b      	lsls	r3, r3, #8
 8009cdc:	b21a      	sxth	r2, r3
 8009cde:	787b      	ldrb	r3, [r7, #1]
 8009ce0:	b21b      	sxth	r3, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	83bb      	strh	r3, [r7, #28]
    int16_t raw_accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 8009ce6:	78bb      	ldrb	r3, [r7, #2]
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	b21a      	sxth	r2, r3
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	b21b      	sxth	r3, r3
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	837b      	strh	r3, [r7, #26]
    int16_t raw_accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 8009cf4:	793b      	ldrb	r3, [r7, #4]
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	b21a      	sxth	r2, r3
 8009cfa:	797b      	ldrb	r3, [r7, #5]
 8009cfc:	b21b      	sxth	r3, r3
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	833b      	strh	r3, [r7, #24]
    int16_t raw_temp = (int16_t)(buf[6] << 8 | buf[7]);
 8009d02:	79bb      	ldrb	r3, [r7, #6]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	b21a      	sxth	r2, r3
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	b21b      	sxth	r3, r3
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_x = (int16_t)(buf[8] << 8 | buf[9]);
 8009d10:	7a3b      	ldrb	r3, [r7, #8]
 8009d12:	021b      	lsls	r3, r3, #8
 8009d14:	b21a      	sxth	r2, r3
 8009d16:	7a7b      	ldrb	r3, [r7, #9]
 8009d18:	b21b      	sxth	r3, r3
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	82bb      	strh	r3, [r7, #20]
    int16_t raw_gyro_y = (int16_t)(buf[10] << 8 | buf[11]);
 8009d1e:	7abb      	ldrb	r3, [r7, #10]
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	b21a      	sxth	r2, r3
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	827b      	strh	r3, [r7, #18]
    int16_t raw_gyro_z = (int16_t)(buf[12] << 8 | buf[13]);
 8009d2c:	7b3b      	ldrb	r3, [r7, #12]
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	b21a      	sxth	r2, r3
 8009d32:	7b7b      	ldrb	r3, [r7, #13]
 8009d34:	b21b      	sxth	r3, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	823b      	strh	r3, [r7, #16]

    float gyro_sens;
    float accel_sens;

    switch (sens_info.gyro_range) {
 8009d3a:	4b97      	ldr	r3, [pc, #604]	; (8009f98 <sens_UpdData+0x2e0>)
 8009d3c:	795b      	ldrb	r3, [r3, #5]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b18      	cmp	r3, #24
 8009d42:	d841      	bhi.n	8009dc8 <sens_UpdData+0x110>
 8009d44:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <sens_UpdData+0x94>)
 8009d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4a:	bf00      	nop
 8009d4c:	08009db1 	.word	0x08009db1
 8009d50:	08009dc9 	.word	0x08009dc9
 8009d54:	08009dc9 	.word	0x08009dc9
 8009d58:	08009dc9 	.word	0x08009dc9
 8009d5c:	08009dc9 	.word	0x08009dc9
 8009d60:	08009dc9 	.word	0x08009dc9
 8009d64:	08009dc9 	.word	0x08009dc9
 8009d68:	08009dc9 	.word	0x08009dc9
 8009d6c:	08009db7 	.word	0x08009db7
 8009d70:	08009dc9 	.word	0x08009dc9
 8009d74:	08009dc9 	.word	0x08009dc9
 8009d78:	08009dc9 	.word	0x08009dc9
 8009d7c:	08009dc9 	.word	0x08009dc9
 8009d80:	08009dc9 	.word	0x08009dc9
 8009d84:	08009dc9 	.word	0x08009dc9
 8009d88:	08009dc9 	.word	0x08009dc9
 8009d8c:	08009dbd 	.word	0x08009dbd
 8009d90:	08009dc9 	.word	0x08009dc9
 8009d94:	08009dc9 	.word	0x08009dc9
 8009d98:	08009dc9 	.word	0x08009dc9
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	08009dc3 	.word	0x08009dc3
        case GYRO_RANGE_250DPS:
            gyro_sens = GYRO_SENS_250DPS;
 8009db0:	4b7a      	ldr	r3, [pc, #488]	; (8009f9c <sens_UpdData+0x2e4>)
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009db4:	e008      	b.n	8009dc8 <sens_UpdData+0x110>
        case GYRO_RANGE_500DPS:
            gyro_sens = GYRO_SENS_500DPS;
 8009db6:	4b7a      	ldr	r3, [pc, #488]	; (8009fa0 <sens_UpdData+0x2e8>)
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dba:	e005      	b.n	8009dc8 <sens_UpdData+0x110>
        case GYRO_RANGE_1000DPS:
            gyro_sens = GYRO_SENS_1000DPS;
 8009dbc:	4b79      	ldr	r3, [pc, #484]	; (8009fa4 <sens_UpdData+0x2ec>)
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dc0:	e002      	b.n	8009dc8 <sens_UpdData+0x110>
        case GYRO_RANGE_2000DPS:
            gyro_sens = GYRO_SENS_2000DPS;
 8009dc2:	4b79      	ldr	r3, [pc, #484]	; (8009fa8 <sens_UpdData+0x2f0>)
 8009dc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dc6:	bf00      	nop
    }
    switch (sens_info.accel_range) {
 8009dc8:	4b73      	ldr	r3, [pc, #460]	; (8009f98 <sens_UpdData+0x2e0>)
 8009dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b18      	cmp	r3, #24
 8009dd2:	d845      	bhi.n	8009e60 <sens_UpdData+0x1a8>
 8009dd4:	a201      	add	r2, pc, #4	; (adr r2, 8009ddc <sens_UpdData+0x124>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e41 	.word	0x08009e41
 8009de0:	08009e61 	.word	0x08009e61
 8009de4:	08009e61 	.word	0x08009e61
 8009de8:	08009e61 	.word	0x08009e61
 8009dec:	08009e61 	.word	0x08009e61
 8009df0:	08009e61 	.word	0x08009e61
 8009df4:	08009e61 	.word	0x08009e61
 8009df8:	08009e61 	.word	0x08009e61
 8009dfc:	08009e49 	.word	0x08009e49
 8009e00:	08009e61 	.word	0x08009e61
 8009e04:	08009e61 	.word	0x08009e61
 8009e08:	08009e61 	.word	0x08009e61
 8009e0c:	08009e61 	.word	0x08009e61
 8009e10:	08009e61 	.word	0x08009e61
 8009e14:	08009e61 	.word	0x08009e61
 8009e18:	08009e61 	.word	0x08009e61
 8009e1c:	08009e51 	.word	0x08009e51
 8009e20:	08009e61 	.word	0x08009e61
 8009e24:	08009e61 	.word	0x08009e61
 8009e28:	08009e61 	.word	0x08009e61
 8009e2c:	08009e61 	.word	0x08009e61
 8009e30:	08009e61 	.word	0x08009e61
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e59 	.word	0x08009e59
        case ACCEL_RANGE_2G:
            accel_sens = ACCEL_SENS_2G;
 8009e40:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8009e44:	623b      	str	r3, [r7, #32]
            break;
 8009e46:	e00b      	b.n	8009e60 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_4G:
            accel_sens = ACCEL_SENS_4G;
 8009e48:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8009e4c:	623b      	str	r3, [r7, #32]
            break;
 8009e4e:	e007      	b.n	8009e60 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_8G:
            accel_sens = ACCEL_SENS_8G;
 8009e50:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8009e54:	623b      	str	r3, [r7, #32]
            break;
 8009e56:	e003      	b.n	8009e60 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_16G:
            accel_sens = ACCEL_SENS_16G;
 8009e58:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8009e5c:	623b      	str	r3, [r7, #32]
            break;
 8009e5e:	bf00      	nop
    }

    sens_info.accel_x = (float)raw_accel_x / accel_sens; // g
 8009e60:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009e64:	ee07 3a90 	vmov	s15, r3
 8009e68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8009e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e74:	4b48      	ldr	r3, [pc, #288]	; (8009f98 <sens_UpdData+0x2e0>)
 8009e76:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    sens_info.accel_y = (float)raw_accel_y / accel_sens; // g
 8009e7a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e86:	ed97 7a08 	vldr	s14, [r7, #32]
 8009e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8e:	4b42      	ldr	r3, [pc, #264]	; (8009f98 <sens_UpdData+0x2e0>)
 8009e90:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    sens_info.accel_z = (float)raw_accel_z / accel_sens; // g
 8009e94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ea0:	ed97 7a08 	vldr	s14, [r7, #32]
 8009ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea8:	4b3b      	ldr	r3, [pc, #236]	; (8009f98 <sens_UpdData+0x2e0>)
 8009eaa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    sens_info.gyro_x = ((float)raw_gyro_x / gyro_sens) - ((float)sens_info.gyro_x_bias  / gyro_sens); // °/s
 8009eae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec2:	4b35      	ldr	r3, [pc, #212]	; (8009f98 <sens_UpdData+0x2e0>)
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009ece:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009ed2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eda:	4b2f      	ldr	r3, [pc, #188]	; (8009f98 <sens_UpdData+0x2e0>)
 8009edc:	edc3 7a02 	vstr	s15, [r3, #8]
    sens_info.gyro_y = ((float)raw_gyro_y / gyro_sens) - ((float)sens_info.gyro_y_bias  / gyro_sens); // °/s
 8009ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef4:	4b28      	ldr	r3, [pc, #160]	; (8009f98 <sens_UpdData+0x2e0>)
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009f00:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009f04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f0c:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <sens_UpdData+0x2e0>)
 8009f0e:	edc3 7a03 	vstr	s15, [r3, #12]
    sens_info.gyro_z = ((float)raw_gyro_z / gyro_sens) - ((float)sens_info.gyro_z_bias  / gyro_sens); // °/s
 8009f12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009f1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f26:	4b1c      	ldr	r3, [pc, #112]	; (8009f98 <sens_UpdData+0x2e0>)
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009f32:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009f36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f3e:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <sens_UpdData+0x2e0>)
 8009f40:	edc3 7a04 	vstr	s15, [r3, #16]
    sens_info.temperature = ((float)raw_temp / 340.0) + 36.53; // °C
 8009f44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f50:	ee17 0a90 	vmov	r0, s15
 8009f54:	f7f6 faac 	bl	80004b0 <__aeabi_f2d>
 8009f58:	f04f 0200 	mov.w	r2, #0
 8009f5c:	4b13      	ldr	r3, [pc, #76]	; (8009fac <sens_UpdData+0x2f4>)
 8009f5e:	f7f6 fc29 	bl	80007b4 <__aeabi_ddiv>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	a309      	add	r3, pc, #36	; (adr r3, 8009f90 <sens_UpdData+0x2d8>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 f940 	bl	80001f4 <__adddf3>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f7f6 fda0 	bl	8000ac0 <__aeabi_d2f>
 8009f80:	4603      	mov	r3, r0
 8009f82:	4a05      	ldr	r2, [pc, #20]	; (8009f98 <sens_UpdData+0x2e0>)
 8009f84:	6313      	str	r3, [r2, #48]	; 0x30

    return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3728      	adds	r7, #40	; 0x28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	0a3d70a4 	.word	0x0a3d70a4
 8009f94:	404243d7 	.word	0x404243d7
 8009f98:	20000fbc 	.word	0x20000fbc
 8009f9c:	43030000 	.word	0x43030000
 8009fa0:	42830000 	.word	0x42830000
 8009fa4:	42033333 	.word	0x42033333
 8009fa8:	41833333 	.word	0x41833333
 8009fac:	40754000 	.word	0x40754000

08009fb0 <sens_WriteByte>:

void sens_WriteByte(uint8_t reg, uint8_t data)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af04      	add	r7, sp, #16
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	460a      	mov	r2, r1
 8009fba:	71fb      	strb	r3, [r7, #7]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	2301      	movs	r3, #1
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	1dbb      	adds	r3, r7, #6
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	21d0      	movs	r1, #208	; 0xd0
 8009fd6:	4803      	ldr	r0, [pc, #12]	; (8009fe4 <sens_WriteByte+0x34>)
 8009fd8:	f002 fcda 	bl	800c990 <HAL_I2C_Mem_Write>

    return;
 8009fdc:	bf00      	nop
}
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20000ab8 	.word	0x20000ab8

08009fe8 <sens_Read>:

HAL_StatusTypeDef sens_Read(uint8_t reg, uint8_t* data, uint16_t size)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af04      	add	r7, sp, #16
 8009fee:	4603      	mov	r3, r0
 8009ff0:	6039      	str	r1, [r7, #0]
 8009ff2:	71fb      	strb	r3, [r7, #7]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a000:	9302      	str	r3, [sp, #8]
 800a002:	88bb      	ldrh	r3, [r7, #4]
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	2301      	movs	r3, #1
 800a00c:	21d0      	movs	r1, #208	; 0xd0
 800a00e:	4807      	ldr	r0, [pc, #28]	; (800a02c <sens_Read+0x44>)
 800a010:	f002 fdb8 	bl	800cb84 <HAL_I2C_Mem_Read>
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <sens_Read+0x3a>
		return status;
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	e000      	b.n	800a024 <sens_Read+0x3c>
	}

    return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000ab8 	.word	0x20000ab8

0800a030 <cfg_NodeSensVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeSensVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800a03e:	89fb      	ldrh	r3, [r7, #14]
 800a040:	2b0c      	cmp	r3, #12
 800a042:	d844      	bhi.n	800a0ce <cfg_NodeSensVarProp+0x9e>
 800a044:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <cfg_NodeSensVarProp+0x1c>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a081 	.word	0x0800a081
 800a050:	0800a087 	.word	0x0800a087
 800a054:	0800a08d 	.word	0x0800a08d
 800a058:	0800a093 	.word	0x0800a093
 800a05c:	0800a099 	.word	0x0800a099
 800a060:	0800a09f 	.word	0x0800a09f
 800a064:	0800a0a5 	.word	0x0800a0a5
 800a068:	0800a0ab 	.word	0x0800a0ab
 800a06c:	0800a0b1 	.word	0x0800a0b1
 800a070:	0800a0b7 	.word	0x0800a0b7
 800a074:	0800a0bd 	.word	0x0800a0bd
 800a078:	0800a0c3 	.word	0x0800a0c3
 800a07c:	0800a0c9 	.word	0x0800a0c9
	{
		case SENS_STATE:		str = "State"; break;
 800a080:	4b4e      	ldr	r3, [pc, #312]	; (800a1bc <cfg_NodeSensVarProp+0x18c>)
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	e025      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_X:		str = "Gyro X"; break;
 800a086:	4b4e      	ldr	r3, [pc, #312]	; (800a1c0 <cfg_NodeSensVarProp+0x190>)
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	e022      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Y:		str = "Gyro Y"; break;
 800a08c:	4b4d      	ldr	r3, [pc, #308]	; (800a1c4 <cfg_NodeSensVarProp+0x194>)
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e01f      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Z:		str = "Gyro Z"; break;
 800a092:	4b4d      	ldr	r3, [pc, #308]	; (800a1c8 <cfg_NodeSensVarProp+0x198>)
 800a094:	617b      	str	r3, [r7, #20]
 800a096:	e01c      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_X:		str = "Accel X"; break;
 800a098:	4b4c      	ldr	r3, [pc, #304]	; (800a1cc <cfg_NodeSensVarProp+0x19c>)
 800a09a:	617b      	str	r3, [r7, #20]
 800a09c:	e019      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Y:		str = "Accel Y"; break;
 800a09e:	4b4c      	ldr	r3, [pc, #304]	; (800a1d0 <cfg_NodeSensVarProp+0x1a0>)
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	e016      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Z:		str = "Accel Z"; break;
 800a0a4:	4b4b      	ldr	r3, [pc, #300]	; (800a1d4 <cfg_NodeSensVarProp+0x1a4>)
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	e013      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_TEMPERATURE:	str = "Temperature"; break;
 800a0aa:	4b4b      	ldr	r3, [pc, #300]	; (800a1d8 <cfg_NodeSensVarProp+0x1a8>)
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e010      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_SAT_NUM:		str = "GNSS sat number"; break;
 800a0b0:	4b4a      	ldr	r3, [pc, #296]	; (800a1dc <cfg_NodeSensVarProp+0x1ac>)
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e00d      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_LATITUDE:		str = "GNSS latitude"; break;
 800a0b6:	4b4a      	ldr	r3, [pc, #296]	; (800a1e0 <cfg_NodeSensVarProp+0x1b0>)
 800a0b8:	617b      	str	r3, [r7, #20]
 800a0ba:	e00a      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_LONGITUDE:	str = "GNSS longitude"; break;
 800a0bc:	4b49      	ldr	r3, [pc, #292]	; (800a1e4 <cfg_NodeSensVarProp+0x1b4>)
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e007      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_ALTTITUDE:	str = "GNSS altitude"; break;
 800a0c2:	4b49      	ldr	r3, [pc, #292]	; (800a1e8 <cfg_NodeSensVarProp+0x1b8>)
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e004      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		case SENS_SPEED:		str = "GNSS speed"; break;
 800a0c8:	4b48      	ldr	r3, [pc, #288]	; (800a1ec <cfg_NodeSensVarProp+0x1bc>)
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	e001      	b.n	800a0d2 <cfg_NodeSensVarProp+0xa2>
		default: return CFG_ERROR_VARID;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e06d      	b.n	800a1ae <cfg_NodeSensVarProp+0x17e>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00f      	beq.n	800a0f8 <cfg_NodeSensVarProp+0xc8>
 800a0d8:	e007      	b.n	800a0ea <cfg_NodeSensVarProp+0xba>
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	1c53      	adds	r3, r2, #1
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	1c59      	adds	r1, r3, #1
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	701a      	strb	r2, [r3, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f3      	bne.n	800a0da <cfg_NodeSensVarProp+0xaa>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d056      	beq.n	800a1ac <cfg_NodeSensVarProp+0x17c>
 800a0fe:	89fb      	ldrh	r3, [r7, #14]
 800a100:	2b0c      	cmp	r3, #12
 800a102:	d851      	bhi.n	800a1a8 <cfg_NodeSensVarProp+0x178>
 800a104:	a201      	add	r2, pc, #4	; (adr r2, 800a10c <cfg_NodeSensVarProp+0xdc>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a141 	.word	0x0800a141
 800a110:	0800a149 	.word	0x0800a149
 800a114:	0800a151 	.word	0x0800a151
 800a118:	0800a159 	.word	0x0800a159
 800a11c:	0800a161 	.word	0x0800a161
 800a120:	0800a169 	.word	0x0800a169
 800a124:	0800a171 	.word	0x0800a171
 800a128:	0800a179 	.word	0x0800a179
 800a12c:	0800a181 	.word	0x0800a181
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a191 	.word	0x0800a191
 800a138:	0800a199 	.word	0x0800a199
 800a13c:	0800a1a1 	.word	0x0800a1a1
	{
		case SENS_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	801a      	strh	r2, [r3, #0]
 800a146:	e031      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2214      	movs	r2, #20
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	e02d      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2214      	movs	r2, #20
 800a154:	801a      	strh	r2, [r3, #0]
 800a156:	e029      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2214      	movs	r2, #20
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	e025      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2214      	movs	r2, #20
 800a164:	801a      	strh	r2, [r3, #0]
 800a166:	e021      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2214      	movs	r2, #20
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	e01d      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2214      	movs	r2, #20
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e019      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_TEMPERATURE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2214      	movs	r2, #20
 800a17c:	801a      	strh	r2, [r3, #0]
 800a17e:	e015      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_SAT_NUM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2212      	movs	r2, #18
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	e011      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_LATITUDE:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2211      	movs	r2, #17
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e00d      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_LONGITUDE:	*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2211      	movs	r2, #17
 800a194:	801a      	strh	r2, [r3, #0]
 800a196:	e009      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_ALTTITUDE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2214      	movs	r2, #20
 800a19c:	801a      	strh	r2, [r3, #0]
 800a19e:	e005      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		case SENS_SPEED:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2211      	movs	r2, #17
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	e001      	b.n	800a1ac <cfg_NodeSensVarProp+0x17c>
		default: return CFG_ERROR_VARID;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e000      	b.n	800a1ae <cfg_NodeSensVarProp+0x17e>
	}
	return CFG_ERROR_NONE;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	08016194 	.word	0x08016194
 800a1c0:	0801619c 	.word	0x0801619c
 800a1c4:	080161a4 	.word	0x080161a4
 800a1c8:	080161ac 	.word	0x080161ac
 800a1cc:	080161b4 	.word	0x080161b4
 800a1d0:	080161bc 	.word	0x080161bc
 800a1d4:	080161c4 	.word	0x080161c4
 800a1d8:	080161cc 	.word	0x080161cc
 800a1dc:	080161d8 	.word	0x080161d8
 800a1e0:	080161e8 	.word	0x080161e8
 800a1e4:	080161f8 	.word	0x080161f8
 800a1e8:	08016208 	.word	0x08016208
 800a1ec:	08016218 	.word	0x08016218

0800a1f0 <cfg_NodeSensVarGet>:

uint16_t cfg_NodeSensVarGet(uint16_t varid, void *value)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	6039      	str	r1, [r7, #0]
 800a1fa:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d068      	beq.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	2b0c      	cmp	r3, #12
 800a206:	d863      	bhi.n	800a2d0 <cfg_NodeSensVarGet+0xe0>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <cfg_NodeSensVarGet+0x20>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a245 	.word	0x0800a245
 800a214:	0800a253 	.word	0x0800a253
 800a218:	0800a25d 	.word	0x0800a25d
 800a21c:	0800a267 	.word	0x0800a267
 800a220:	0800a271 	.word	0x0800a271
 800a224:	0800a27b 	.word	0x0800a27b
 800a228:	0800a285 	.word	0x0800a285
 800a22c:	0800a28f 	.word	0x0800a28f
 800a230:	0800a299 	.word	0x0800a299
 800a234:	0800a2a9 	.word	0x0800a2a9
 800a238:	0800a2b3 	.word	0x0800a2b3
 800a23c:	0800a2bd 	.word	0x0800a2bd
 800a240:	0800a2c7 	.word	0x0800a2c7
	{
		case SENS_STATE:		*(uint32_t*)value = sens_info.state; break;
 800a244:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a246:	791b      	ldrb	r3, [r3, #4]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	e040      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_X:		*(float*)value = sens_info.gyro_x; break;
 800a252:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	e03b      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Y:		*(float*)value = sens_info.gyro_y; break;
 800a25c:	4b21      	ldr	r3, [pc, #132]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e036      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Z:		*(float*)value = sens_info.gyro_z; break;
 800a266:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a268:	691a      	ldr	r2, [r3, #16]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	e031      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_X:		*(float*)value = sens_info.accel_x; break;
 800a270:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	e02c      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Y:		*(float*)value = sens_info.accel_y; break;
 800a27a:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e027      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Z:		*(float*)value = sens_info.accel_z; break;
 800a284:	4b17      	ldr	r3, [pc, #92]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	e022      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_TEMPERATURE:	*(float*)value = sens_info.temperature; break;
 800a28e:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e01d      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_SAT_NUM:		*(int32_t*)value = sens_info.sat_num; break;
 800a298:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a29a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	e015      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_LATITUDE:		*(int32_t*)value = sens_info.latitude; break;
 800a2a8:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a2aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	e010      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_LONGITUDE:	*(int32_t*)value = sens_info.longitude; break;
 800a2b2:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e00b      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_ALTTITUDE:	*(float*)value = sens_info.altitude; break;
 800a2bc:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a2be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e006      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		case SENS_SPEED:		*(int32_t*)value = sens_info.speed; break;
 800a2c6:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <cfg_NodeSensVarGet+0xf4>)
 800a2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	e001      	b.n	800a2d4 <cfg_NodeSensVarGet+0xe4>
		default: return CFG_ERROR_VARID;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e000      	b.n	800a2d6 <cfg_NodeSensVarGet+0xe6>
	}
	return CFG_ERROR_NONE;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20000fbc 	.word	0x20000fbc

0800a2e8 <cfg_NodeSensVarSet>:

uint16_t cfg_NodeSensVarSet(uint16_t varid, void *value)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	6039      	str	r1, [r7, #0]
 800a2f2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <cfg_NodeSensVarSet+0x28>
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <cfg_NodeSensVarSet+0x24>
	{
		case SENS_STATE:		sens_info.state = (uint8_t)*(uint32_t*)value; break;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	4b06      	ldr	r3, [pc, #24]	; (800a320 <cfg_NodeSensVarSet+0x38>)
 800a308:	711a      	strb	r2, [r3, #4]
 800a30a:	e001      	b.n	800a310 <cfg_NodeSensVarSet+0x28>
		default: return CFG_ERROR_VARID;
 800a30c:	2302      	movs	r3, #2
 800a30e:	e000      	b.n	800a312 <cfg_NodeSensVarSet+0x2a>
	}
	return CFG_ERROR_NONE;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	20000fbc 	.word	0x20000fbc

0800a324 <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
 800a330:	e014      	b.n	800a35c <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	4a0e      	ldr	r2, [pc, #56]	; (800a370 <servo_Timer+0x4c>)
 800a336:	330c      	adds	r3, #12
 800a338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00a      	beq.n	800a356 <servo_Timer+0x32>
			servo_info.timer[i]--;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	490b      	ldr	r1, [pc, #44]	; (800a370 <servo_Timer+0x4c>)
 800a344:	f103 020c 	add.w	r2, r3, #12
 800a348:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a34c:	3a01      	subs	r2, #1
 800a34e:	4908      	ldr	r1, [pc, #32]	; (800a370 <servo_Timer+0x4c>)
 800a350:	330c      	adds	r3, #12
 800a352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	3301      	adds	r3, #1
 800a35a:	73fb      	strb	r3, [r7, #15]
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d0e7      	beq.n	800a332 <servo_Timer+0xe>
		}
	}

	return;
 800a362:	bf00      	nop
}
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	20001014 	.word	0x20001014

0800a374 <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 800a37a:	4b3d      	ldr	r3, [pc, #244]	; (800a470 <servo_InitTask+0xfc>)
 800a37c:	4a3d      	ldr	r2, [pc, #244]	; (800a474 <servo_InitTask+0x100>)
 800a37e:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 800a380:	4b3b      	ldr	r3, [pc, #236]	; (800a470 <servo_InitTask+0xfc>)
 800a382:	2200      	movs	r2, #0
 800a384:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 800a386:	4b3a      	ldr	r3, [pc, #232]	; (800a470 <servo_InitTask+0xfc>)
 800a388:	2200      	movs	r2, #0
 800a38a:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 800a38c:	4b38      	ldr	r3, [pc, #224]	; (800a470 <servo_InitTask+0xfc>)
 800a38e:	2200      	movs	r2, #0
 800a390:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 800a392:	4b37      	ldr	r3, [pc, #220]	; (800a470 <servo_InitTask+0xfc>)
 800a394:	2200      	movs	r2, #0
 800a396:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 80;
 800a398:	4b35      	ldr	r3, [pc, #212]	; (800a470 <servo_InitTask+0xfc>)
 800a39a:	2250      	movs	r2, #80	; 0x50
 800a39c:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 100;
 800a39e:	4b34      	ldr	r3, [pc, #208]	; (800a470 <servo_InitTask+0xfc>)
 800a3a0:	2264      	movs	r2, #100	; 0x64
 800a3a2:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 125;
 800a3a4:	4b32      	ldr	r3, [pc, #200]	; (800a470 <servo_InitTask+0xfc>)
 800a3a6:	227d      	movs	r2, #125	; 0x7d
 800a3a8:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 800a3aa:	4b31      	ldr	r3, [pc, #196]	; (800a470 <servo_InitTask+0xfc>)
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 800a3b0:	4b2f      	ldr	r3, [pc, #188]	; (800a470 <servo_InitTask+0xfc>)
 800a3b2:	4a30      	ldr	r2, [pc, #192]	; (800a474 <servo_InitTask+0x100>)
 800a3b4:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 800a3b6:	4b2e      	ldr	r3, [pc, #184]	; (800a470 <servo_InitTask+0xfc>)
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 800a3bc:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <servo_InitTask+0xfc>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 800a3c2:	4b2b      	ldr	r3, [pc, #172]	; (800a470 <servo_InitTask+0xfc>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 800a3c8:	4b29      	ldr	r3, [pc, #164]	; (800a470 <servo_InitTask+0xfc>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 45;
 800a3d0:	4b27      	ldr	r3, [pc, #156]	; (800a470 <servo_InitTask+0xfc>)
 800a3d2:	222d      	movs	r2, #45	; 0x2d
 800a3d4:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 800a3d6:	4b26      	ldr	r3, [pc, #152]	; (800a470 <servo_InitTask+0xfc>)
 800a3d8:	225a      	movs	r2, #90	; 0x5a
 800a3da:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 125;
 800a3dc:	4b24      	ldr	r3, [pc, #144]	; (800a470 <servo_InitTask+0xfc>)
 800a3de:	227d      	movs	r2, #125	; 0x7d
 800a3e0:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 800a3e2:	4b23      	ldr	r3, [pc, #140]	; (800a470 <servo_InitTask+0xfc>)
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	71fb      	strb	r3, [r7, #7]
 800a3ee:	e02a      	b.n	800a446 <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 800a3f0:	79fa      	ldrb	r2, [r7, #7]
 800a3f2:	491f      	ldr	r1, [pc, #124]	; (800a470 <servo_InitTask+0xfc>)
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	4413      	add	r3, r2
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	440b      	add	r3, r1
 800a3fe:	330a      	adds	r3, #10
 800a400:	2200      	movs	r2, #0
 800a402:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 800a404:	79fa      	ldrb	r2, [r7, #7]
 800a406:	491a      	ldr	r1, [pc, #104]	; (800a470 <servo_InitTask+0xfc>)
 800a408:	4613      	mov	r3, r2
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	4413      	add	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	440b      	add	r3, r1
 800a412:	330c      	adds	r3, #12
 800a414:	2200      	movs	r2, #0
 800a416:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 800a418:	79fa      	ldrb	r2, [r7, #7]
 800a41a:	4915      	ldr	r1, [pc, #84]	; (800a470 <servo_InitTask+0xfc>)
 800a41c:	4613      	mov	r3, r2
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	4413      	add	r3, r2
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	440b      	add	r3, r1
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	79fa      	ldrb	r2, [r7, #7]
 800a42a:	4911      	ldr	r1, [pc, #68]	; (800a470 <servo_InitTask+0xfc>)
 800a42c:	4613      	mov	r3, r2
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	4413      	add	r3, r2
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	440b      	add	r3, r1
 800a436:	3304      	adds	r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4619      	mov	r1, r3
 800a43c:	f005 f936 	bl	800f6ac <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	3301      	adds	r3, #1
 800a444:	71fb      	strb	r3, [r7, #7]
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d9d1      	bls.n	800a3f0 <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 800a44c:	4b08      	ldr	r3, [pc, #32]	; (800a470 <servo_InitTask+0xfc>)
 800a44e:	8a5b      	ldrh	r3, [r3, #18]
 800a450:	b29b      	uxth	r3, r3
 800a452:	4619      	mov	r1, r3
 800a454:	2000      	movs	r0, #0
 800a456:	f000 f82b 	bl	800a4b0 <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <servo_InitTask+0xfc>)
 800a45c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4619      	mov	r1, r3
 800a462:	2001      	movs	r0, #1
 800a464:	f000 f824 	bl	800a4b0 <servo_setAng>

	return;
 800a468:	bf00      	nop
}
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20001014 	.word	0x20001014
 800a474:	20000b0c 	.word	0x20000b0c

0800a478 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 800a47c:	bf00      	nop
}
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	4603      	mov	r3, r0
 800a48e:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 800a490:	88fb      	ldrh	r3, [r7, #6]
 800a492:	461a      	mov	r2, r3
 800a494:	0052      	lsls	r2, r2, #1
 800a496:	4413      	add	r3, r2
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	33f5      	adds	r3, #245	; 0xf5
 800a49e:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 800a4a0:	89fb      	ldrh	r3, [r7, #14]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3714      	adds	r7, #20
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	460a      	mov	r2, r1
 800a4ba:	71fb      	strb	r3, [r7, #7]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	f200 809f 	bhi.w	800a606 <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 800a4c8:	79fa      	ldrb	r2, [r7, #7]
 800a4ca:	4952      	ldr	r1, [pc, #328]	; (800a614 <servo_setAng+0x164>)
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	4413      	add	r3, r2
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	440b      	add	r3, r1
 800a4d6:	330c      	adds	r3, #12
 800a4d8:	88ba      	ldrh	r2, [r7, #4]
 800a4da:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 800a4dc:	79fc      	ldrb	r4, [r7, #7]
 800a4de:	88bb      	ldrh	r3, [r7, #4]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff ffd0 	bl	800a486 <servo_angToPWM>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4a4a      	ldr	r2, [pc, #296]	; (800a614 <servo_setAng+0x164>)
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	4423      	add	r3, r4
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	4413      	add	r3, r2
 800a4f6:	330a      	adds	r3, #10
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 800a4fc:	79fa      	ldrb	r2, [r7, #7]
 800a4fe:	4945      	ldr	r1, [pc, #276]	; (800a614 <servo_setAng+0x164>)
 800a500:	4613      	mov	r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	440b      	add	r3, r1
 800a50a:	3308      	adds	r3, #8
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	d17a      	bne.n	800a60a <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800a514:	79fa      	ldrb	r2, [r7, #7]
 800a516:	493f      	ldr	r1, [pc, #252]	; (800a614 <servo_setAng+0x164>)
 800a518:	4613      	mov	r3, r2
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	4413      	add	r3, r2
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	440b      	add	r3, r1
 800a522:	3304      	adds	r3, #4
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d115      	bne.n	800a556 <servo_setAng+0xa6>
 800a52a:	79fa      	ldrb	r2, [r7, #7]
 800a52c:	4939      	ldr	r1, [pc, #228]	; (800a614 <servo_setAng+0x164>)
 800a52e:	4613      	mov	r3, r2
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	4413      	add	r3, r2
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	440b      	add	r3, r1
 800a538:	330a      	adds	r3, #10
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	b298      	uxth	r0, r3
 800a53e:	79fa      	ldrb	r2, [r7, #7]
 800a540:	4934      	ldr	r1, [pc, #208]	; (800a614 <servo_setAng+0x164>)
 800a542:	4613      	mov	r3, r2
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	4413      	add	r3, r2
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	440b      	add	r3, r1
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4602      	mov	r2, r0
 800a552:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 800a554:	e059      	b.n	800a60a <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800a556:	79fa      	ldrb	r2, [r7, #7]
 800a558:	492e      	ldr	r1, [pc, #184]	; (800a614 <servo_setAng+0x164>)
 800a55a:	4613      	mov	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	4413      	add	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	440b      	add	r3, r1
 800a564:	3304      	adds	r3, #4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d115      	bne.n	800a598 <servo_setAng+0xe8>
 800a56c:	79fa      	ldrb	r2, [r7, #7]
 800a56e:	4929      	ldr	r1, [pc, #164]	; (800a614 <servo_setAng+0x164>)
 800a570:	4613      	mov	r3, r2
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	440b      	add	r3, r1
 800a57a:	330a      	adds	r3, #10
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	b298      	uxth	r0, r3
 800a580:	79fa      	ldrb	r2, [r7, #7]
 800a582:	4924      	ldr	r1, [pc, #144]	; (800a614 <servo_setAng+0x164>)
 800a584:	4613      	mov	r3, r2
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	4413      	add	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	440b      	add	r3, r1
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	4603      	mov	r3, r0
 800a594:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800a596:	e038      	b.n	800a60a <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800a598:	79fa      	ldrb	r2, [r7, #7]
 800a59a:	491e      	ldr	r1, [pc, #120]	; (800a614 <servo_setAng+0x164>)
 800a59c:	4613      	mov	r3, r2
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	4413      	add	r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	440b      	add	r3, r1
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b08      	cmp	r3, #8
 800a5ac:	d115      	bne.n	800a5da <servo_setAng+0x12a>
 800a5ae:	79fa      	ldrb	r2, [r7, #7]
 800a5b0:	4918      	ldr	r1, [pc, #96]	; (800a614 <servo_setAng+0x164>)
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	4413      	add	r3, r2
 800a5b8:	00db      	lsls	r3, r3, #3
 800a5ba:	440b      	add	r3, r1
 800a5bc:	330a      	adds	r3, #10
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	b298      	uxth	r0, r3
 800a5c2:	79fa      	ldrb	r2, [r7, #7]
 800a5c4:	4913      	ldr	r1, [pc, #76]	; (800a614 <servo_setAng+0x164>)
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	4413      	add	r3, r2
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	440b      	add	r3, r1
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800a5d8:	e017      	b.n	800a60a <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800a5da:	79fa      	ldrb	r2, [r7, #7]
 800a5dc:	490d      	ldr	r1, [pc, #52]	; (800a614 <servo_setAng+0x164>)
 800a5de:	4613      	mov	r3, r2
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	4413      	add	r3, r2
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	440b      	add	r3, r1
 800a5e8:	330a      	adds	r3, #10
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b298      	uxth	r0, r3
 800a5ee:	79fa      	ldrb	r2, [r7, #7]
 800a5f0:	4908      	ldr	r1, [pc, #32]	; (800a614 <servo_setAng+0x164>)
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	4413      	add	r3, r2
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	440b      	add	r3, r1
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	4603      	mov	r3, r0
 800a602:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800a604:	e001      	b.n	800a60a <servo_setAng+0x15a>
		return;
 800a606:	bf00      	nop
 800a608:	e000      	b.n	800a60c <servo_setAng+0x15c>
	return;
 800a60a:	bf00      	nop
}
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd90      	pop	{r4, r7, pc}
 800a612:	bf00      	nop
 800a614:	20001014 	.word	0x20001014

0800a618 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	4603      	mov	r3, r0
 800a620:	460a      	mov	r2, r1
 800a622:	71fb      	strb	r3, [r7, #7]
 800a624:	4613      	mov	r3, r2
 800a626:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d854      	bhi.n	800a6d8 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 800a62e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a632:	2b64      	cmp	r3, #100	; 0x64
 800a634:	dc52      	bgt.n	800a6dc <servo_setPercnet+0xc4>
 800a636:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a63a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800a63e:	db4d      	blt.n	800a6dc <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 800a640:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a644:	2b00      	cmp	r3, #0
 800a646:	db1f      	blt.n	800a688 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800a648:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800a64c:	79fa      	ldrb	r2, [r7, #7]
 800a64e:	4925      	ldr	r1, [pc, #148]	; (800a6e4 <servo_setPercnet+0xcc>)
 800a650:	4613      	mov	r3, r2
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	4413      	add	r3, r2
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	440b      	add	r3, r1
 800a65a:	3312      	adds	r3, #18
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800a660:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 800a662:	79fa      	ldrb	r2, [r7, #7]
 800a664:	491f      	ldr	r1, [pc, #124]	; (800a6e4 <servo_setPercnet+0xcc>)
 800a666:	4613      	mov	r3, r2
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	4413      	add	r3, r2
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	440b      	add	r3, r1
 800a670:	3314      	adds	r3, #20
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4623      	mov	r3, r4
 800a67a:	2264      	movs	r2, #100	; 0x64
 800a67c:	2100      	movs	r1, #0
 800a67e:	f000 f929 	bl	800a8d4 <servo_map>
 800a682:	4603      	mov	r3, r0
 800a684:	81fb      	strh	r3, [r7, #14]
 800a686:	e020      	b.n	800a6ca <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800a688:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800a68c:	79fa      	ldrb	r2, [r7, #7]
 800a68e:	4915      	ldr	r1, [pc, #84]	; (800a6e4 <servo_setPercnet+0xcc>)
 800a690:	4613      	mov	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	4413      	add	r3, r2
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	440b      	add	r3, r1
 800a69a:	3312      	adds	r3, #18
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800a6a0:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 800a6a2:	79fa      	ldrb	r2, [r7, #7]
 800a6a4:	490f      	ldr	r1, [pc, #60]	; (800a6e4 <servo_setPercnet+0xcc>)
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	4413      	add	r3, r2
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3310      	adds	r3, #16
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800a6be:	f04f 31ff 	mov.w	r1, #4294967295
 800a6c2:	f000 f907 	bl	800a8d4 <servo_map>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 800a6ca:	89fa      	ldrh	r2, [r7, #14]
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff feed 	bl	800a4b0 <servo_setAng>

	return;
 800a6d6:	e002      	b.n	800a6de <servo_setPercnet+0xc6>
		return;
 800a6d8:	bf00      	nop
 800a6da:	e000      	b.n	800a6de <servo_setPercnet+0xc6>
		return;
 800a6dc:	bf00      	nop
}
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd90      	pop	{r4, r7, pc}
 800a6e4:	20001014 	.word	0x20001014

0800a6e8 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	460a      	mov	r2, r1
 800a6f2:	71fb      	strb	r3, [r7, #7]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	f200 80e1 	bhi.w	800a8c2 <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 800a700:	79fa      	ldrb	r2, [r7, #7]
 800a702:	4973      	ldr	r1, [pc, #460]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a704:	4613      	mov	r3, r2
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	4413      	add	r3, r2
 800a70a:	00db      	lsls	r3, r3, #3
 800a70c:	440b      	add	r3, r1
 800a70e:	3308      	adds	r3, #8
 800a710:	79ba      	ldrb	r2, [r7, #6]
 800a712:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 800a714:	79fa      	ldrb	r2, [r7, #7]
 800a716:	496e      	ldr	r1, [pc, #440]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a718:	4613      	mov	r3, r2
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	4413      	add	r3, r2
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	440b      	add	r3, r1
 800a722:	3308      	adds	r3, #8
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d178      	bne.n	800a81e <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800a72c:	79fa      	ldrb	r2, [r7, #7]
 800a72e:	4968      	ldr	r1, [pc, #416]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a730:	4613      	mov	r3, r2
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	4413      	add	r3, r2
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	440b      	add	r3, r1
 800a73a:	3304      	adds	r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d115      	bne.n	800a76e <servo_setEnable+0x86>
 800a742:	79fa      	ldrb	r2, [r7, #7]
 800a744:	4962      	ldr	r1, [pc, #392]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a746:	4613      	mov	r3, r2
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	4413      	add	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	440b      	add	r3, r1
 800a750:	330a      	adds	r3, #10
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	b298      	uxth	r0, r3
 800a756:	79fa      	ldrb	r2, [r7, #7]
 800a758:	495d      	ldr	r1, [pc, #372]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a75a:	4613      	mov	r3, r2
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4413      	add	r3, r2
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	440b      	add	r3, r1
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4602      	mov	r2, r0
 800a76a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 800a76c:	e0aa      	b.n	800a8c4 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800a76e:	79fa      	ldrb	r2, [r7, #7]
 800a770:	4957      	ldr	r1, [pc, #348]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a772:	4613      	mov	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	4413      	add	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	440b      	add	r3, r1
 800a77c:	3304      	adds	r3, #4
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b04      	cmp	r3, #4
 800a782:	d115      	bne.n	800a7b0 <servo_setEnable+0xc8>
 800a784:	79fa      	ldrb	r2, [r7, #7]
 800a786:	4952      	ldr	r1, [pc, #328]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a788:	4613      	mov	r3, r2
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	4413      	add	r3, r2
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	440b      	add	r3, r1
 800a792:	330a      	adds	r3, #10
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b298      	uxth	r0, r3
 800a798:	79fa      	ldrb	r2, [r7, #7]
 800a79a:	494d      	ldr	r1, [pc, #308]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a79c:	4613      	mov	r3, r2
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	4413      	add	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	440b      	add	r3, r1
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6393      	str	r3, [r2, #56]	; 0x38
 800a7ae:	e087      	b.n	800a8c0 <servo_setEnable+0x1d8>
 800a7b0:	79fa      	ldrb	r2, [r7, #7]
 800a7b2:	4947      	ldr	r1, [pc, #284]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	4413      	add	r3, r2
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	440b      	add	r3, r1
 800a7be:	3304      	adds	r3, #4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b08      	cmp	r3, #8
 800a7c4:	d115      	bne.n	800a7f2 <servo_setEnable+0x10a>
 800a7c6:	79fa      	ldrb	r2, [r7, #7]
 800a7c8:	4941      	ldr	r1, [pc, #260]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	330a      	adds	r3, #10
 800a7d6:	881b      	ldrh	r3, [r3, #0]
 800a7d8:	b298      	uxth	r0, r3
 800a7da:	79fa      	ldrb	r2, [r7, #7]
 800a7dc:	493c      	ldr	r1, [pc, #240]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a7de:	4613      	mov	r3, r2
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	4413      	add	r3, r2
 800a7e4:	00db      	lsls	r3, r3, #3
 800a7e6:	440b      	add	r3, r1
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a7f0:	e066      	b.n	800a8c0 <servo_setEnable+0x1d8>
 800a7f2:	79fa      	ldrb	r2, [r7, #7]
 800a7f4:	4936      	ldr	r1, [pc, #216]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4413      	add	r3, r2
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	440b      	add	r3, r1
 800a800:	330a      	adds	r3, #10
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b298      	uxth	r0, r3
 800a806:	79fa      	ldrb	r2, [r7, #7]
 800a808:	4931      	ldr	r1, [pc, #196]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a80a:	4613      	mov	r3, r2
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	4413      	add	r3, r2
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	440b      	add	r3, r1
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4603      	mov	r3, r0
 800a81a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800a81c:	e052      	b.n	800a8c4 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800a81e:	79fa      	ldrb	r2, [r7, #7]
 800a820:	492b      	ldr	r1, [pc, #172]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a822:	4613      	mov	r3, r2
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	4413      	add	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	440b      	add	r3, r1
 800a82c:	3304      	adds	r3, #4
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <servo_setEnable+0x164>
 800a834:	79fa      	ldrb	r2, [r7, #7]
 800a836:	4926      	ldr	r1, [pc, #152]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a838:	4613      	mov	r3, r2
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4413      	add	r3, r2
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	440b      	add	r3, r1
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2200      	movs	r2, #0
 800a848:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800a84a:	e03b      	b.n	800a8c4 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800a84c:	79fa      	ldrb	r2, [r7, #7]
 800a84e:	4920      	ldr	r1, [pc, #128]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a850:	4613      	mov	r3, r2
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	4413      	add	r3, r2
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	440b      	add	r3, r1
 800a85a:	3304      	adds	r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d10b      	bne.n	800a87a <servo_setEnable+0x192>
 800a862:	79fa      	ldrb	r2, [r7, #7]
 800a864:	491a      	ldr	r1, [pc, #104]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a866:	4613      	mov	r3, r2
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	4413      	add	r3, r2
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	440b      	add	r3, r1
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800a878:	e024      	b.n	800a8c4 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800a87a:	79fa      	ldrb	r2, [r7, #7]
 800a87c:	4914      	ldr	r1, [pc, #80]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a87e:	4613      	mov	r3, r2
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	4413      	add	r3, r2
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	440b      	add	r3, r1
 800a888:	3304      	adds	r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	d10b      	bne.n	800a8a8 <servo_setEnable+0x1c0>
 800a890:	79fa      	ldrb	r2, [r7, #7]
 800a892:	490f      	ldr	r1, [pc, #60]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a894:	4613      	mov	r3, r2
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	4413      	add	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	440b      	add	r3, r1
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800a8a6:	e00d      	b.n	800a8c4 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800a8a8:	79fa      	ldrb	r2, [r7, #7]
 800a8aa:	4909      	ldr	r1, [pc, #36]	; (800a8d0 <servo_setEnable+0x1e8>)
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	4413      	add	r3, r2
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	440b      	add	r3, r1
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800a8be:	e001      	b.n	800a8c4 <servo_setEnable+0x1dc>
 800a8c0:	e000      	b.n	800a8c4 <servo_setEnable+0x1dc>
		return;
 800a8c2:	bf00      	nop
}
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	20001014 	.word	0x20001014

0800a8d4 <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	1a8a      	subs	r2, r1, r2
 800a8ee:	fb03 f202 	mul.w	r2, r3, r2
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	1acb      	subs	r3, r1, r3
 800a8f8:	fb92 f2f3 	sdiv	r2, r2, r3
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	4413      	add	r3, r2
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800a91a:	89fb      	ldrh	r3, [r7, #14]
 800a91c:	2b0d      	cmp	r3, #13
 800a91e:	d849      	bhi.n	800a9b4 <cfg_NodeServoVarProp+0xa8>
 800a920:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <cfg_NodeServoVarProp+0x1c>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a961 	.word	0x0800a961
 800a92c:	0800a967 	.word	0x0800a967
 800a930:	0800a96d 	.word	0x0800a96d
 800a934:	0800a973 	.word	0x0800a973
 800a938:	0800a979 	.word	0x0800a979
 800a93c:	0800a97f 	.word	0x0800a97f
 800a940:	0800a985 	.word	0x0800a985
 800a944:	0800a98b 	.word	0x0800a98b
 800a948:	0800a991 	.word	0x0800a991
 800a94c:	0800a997 	.word	0x0800a997
 800a950:	0800a99d 	.word	0x0800a99d
 800a954:	0800a9a3 	.word	0x0800a9a3
 800a958:	0800a9a9 	.word	0x0800a9a9
 800a95c:	0800a9af 	.word	0x0800a9af
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 800a960:	4b52      	ldr	r3, [pc, #328]	; (800aaac <cfg_NodeServoVarProp+0x1a0>)
 800a962:	617b      	str	r3, [r7, #20]
 800a964:	e028      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 800a966:	4b52      	ldr	r3, [pc, #328]	; (800aab0 <cfg_NodeServoVarProp+0x1a4>)
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	e025      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 800a96c:	4b51      	ldr	r3, [pc, #324]	; (800aab4 <cfg_NodeServoVarProp+0x1a8>)
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e022      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 800a972:	4b51      	ldr	r3, [pc, #324]	; (800aab8 <cfg_NodeServoVarProp+0x1ac>)
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	e01f      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 800a978:	4b50      	ldr	r3, [pc, #320]	; (800aabc <cfg_NodeServoVarProp+0x1b0>)
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	e01c      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 800a97e:	4b50      	ldr	r3, [pc, #320]	; (800aac0 <cfg_NodeServoVarProp+0x1b4>)
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	e019      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 800a984:	4b4f      	ldr	r3, [pc, #316]	; (800aac4 <cfg_NodeServoVarProp+0x1b8>)
 800a986:	617b      	str	r3, [r7, #20]
 800a988:	e016      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 800a98a:	4b4f      	ldr	r3, [pc, #316]	; (800aac8 <cfg_NodeServoVarProp+0x1bc>)
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	e013      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 800a990:	4b4e      	ldr	r3, [pc, #312]	; (800aacc <cfg_NodeServoVarProp+0x1c0>)
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	e010      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 800a996:	4b4e      	ldr	r3, [pc, #312]	; (800aad0 <cfg_NodeServoVarProp+0x1c4>)
 800a998:	617b      	str	r3, [r7, #20]
 800a99a:	e00d      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 800a99c:	4b4d      	ldr	r3, [pc, #308]	; (800aad4 <cfg_NodeServoVarProp+0x1c8>)
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e00a      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 800a9a2:	4b4d      	ldr	r3, [pc, #308]	; (800aad8 <cfg_NodeServoVarProp+0x1cc>)
 800a9a4:	617b      	str	r3, [r7, #20]
 800a9a6:	e007      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 800a9a8:	4b4c      	ldr	r3, [pc, #304]	; (800aadc <cfg_NodeServoVarProp+0x1d0>)
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	e004      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 800a9ae:	4b4c      	ldr	r3, [pc, #304]	; (800aae0 <cfg_NodeServoVarProp+0x1d4>)
 800a9b0:	617b      	str	r3, [r7, #20]
 800a9b2:	e001      	b.n	800a9b8 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	e072      	b.n	800aa9e <cfg_NodeServoVarProp+0x192>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00f      	beq.n	800a9de <cfg_NodeServoVarProp+0xd2>
 800a9be:	e007      	b.n	800a9d0 <cfg_NodeServoVarProp+0xc4>
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	1c53      	adds	r3, r2, #1
 800a9c4:	617b      	str	r3, [r7, #20]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	1c59      	adds	r1, r3, #1
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	7812      	ldrb	r2, [r2, #0]
 800a9ce:	701a      	strb	r2, [r3, #0]
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1f3      	bne.n	800a9c0 <cfg_NodeServoVarProp+0xb4>
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d05b      	beq.n	800aa9c <cfg_NodeServoVarProp+0x190>
 800a9e4:	89fb      	ldrh	r3, [r7, #14]
 800a9e6:	2b0d      	cmp	r3, #13
 800a9e8:	d856      	bhi.n	800aa98 <cfg_NodeServoVarProp+0x18c>
 800a9ea:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <cfg_NodeServoVarProp+0xe4>)
 800a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f0:	0800aa29 	.word	0x0800aa29
 800a9f4:	0800aa31 	.word	0x0800aa31
 800a9f8:	0800aa39 	.word	0x0800aa39
 800a9fc:	0800aa41 	.word	0x0800aa41
 800aa00:	0800aa49 	.word	0x0800aa49
 800aa04:	0800aa51 	.word	0x0800aa51
 800aa08:	0800aa59 	.word	0x0800aa59
 800aa0c:	0800aa61 	.word	0x0800aa61
 800aa10:	0800aa69 	.word	0x0800aa69
 800aa14:	0800aa71 	.word	0x0800aa71
 800aa18:	0800aa79 	.word	0x0800aa79
 800aa1c:	0800aa81 	.word	0x0800aa81
 800aa20:	0800aa89 	.word	0x0800aa89
 800aa24:	0800aa91 	.word	0x0800aa91
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2223      	movs	r2, #35	; 0x23
 800aa2c:	801a      	strh	r2, [r3, #0]
 800aa2e:	e035      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	801a      	strh	r2, [r3, #0]
 800aa36:	e031      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2212      	movs	r2, #18
 800aa3c:	801a      	strh	r2, [r3, #0]
 800aa3e:	e02d      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	801a      	strh	r2, [r3, #0]
 800aa46:	e029      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2222      	movs	r2, #34	; 0x22
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e025      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2222      	movs	r2, #34	; 0x22
 800aa54:	801a      	strh	r2, [r3, #0]
 800aa56:	e021      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2222      	movs	r2, #34	; 0x22
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e01d      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2223      	movs	r2, #35	; 0x23
 800aa64:	801a      	strh	r2, [r3, #0]
 800aa66:	e019      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	801a      	strh	r2, [r3, #0]
 800aa6e:	e015      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2212      	movs	r2, #18
 800aa74:	801a      	strh	r2, [r3, #0]
 800aa76:	e011      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	e00d      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2222      	movs	r2, #34	; 0x22
 800aa84:	801a      	strh	r2, [r3, #0]
 800aa86:	e009      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2222      	movs	r2, #34	; 0x22
 800aa8c:	801a      	strh	r2, [r3, #0]
 800aa8e:	e005      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2222      	movs	r2, #34	; 0x22
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e001      	b.n	800aa9c <cfg_NodeServoVarProp+0x190>
		default: return CFG_ERROR_VARID;
 800aa98:	2302      	movs	r3, #2
 800aa9a:	e000      	b.n	800aa9e <cfg_NodeServoVarProp+0x192>
	}
	return CFG_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	08016224 	.word	0x08016224
 800aab0:	08016230 	.word	0x08016230
 800aab4:	08016244 	.word	0x08016244
 800aab8:	08016258 	.word	0x08016258
 800aabc:	0801626c 	.word	0x0801626c
 800aac0:	0801627c 	.word	0x0801627c
 800aac4:	08016290 	.word	0x08016290
 800aac8:	080162a0 	.word	0x080162a0
 800aacc:	080162b0 	.word	0x080162b0
 800aad0:	080162c4 	.word	0x080162c4
 800aad4:	080162d8 	.word	0x080162d8
 800aad8:	080162ec 	.word	0x080162ec
 800aadc:	080162fc 	.word	0x080162fc
 800aae0:	08016310 	.word	0x08016310

0800aae4 <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 808a 	beq.w	800ac0c <cfg_NodeServoVarGet+0x128>
 800aaf8:	88fb      	ldrh	r3, [r7, #6]
 800aafa:	2b0d      	cmp	r3, #13
 800aafc:	f200 8084 	bhi.w	800ac08 <cfg_NodeServoVarGet+0x124>
 800ab00:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <cfg_NodeServoVarGet+0x24>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800ab41 	.word	0x0800ab41
 800ab0c:	0800ab4f 	.word	0x0800ab4f
 800ab10:	0800ab5d 	.word	0x0800ab5d
 800ab14:	0800ab6b 	.word	0x0800ab6b
 800ab18:	0800ab79 	.word	0x0800ab79
 800ab1c:	0800ab87 	.word	0x0800ab87
 800ab20:	0800ab95 	.word	0x0800ab95
 800ab24:	0800aba3 	.word	0x0800aba3
 800ab28:	0800abb3 	.word	0x0800abb3
 800ab2c:	0800abc1 	.word	0x0800abc1
 800ab30:	0800abcf 	.word	0x0800abcf
 800ab34:	0800abdf 	.word	0x0800abdf
 800ab38:	0800abed 	.word	0x0800abed
 800ab3c:	0800abfb 	.word	0x0800abfb
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 800ab40:	4b36      	ldr	r3, [pc, #216]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab42:	7a1b      	ldrb	r3, [r3, #8]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	461a      	mov	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	e05e      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 800ab4e:	4b33      	ldr	r3, [pc, #204]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab50:	899b      	ldrh	r3, [r3, #12]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	601a      	str	r2, [r3, #0]
 800ab5a:	e057      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 800ab5c:	4b2f      	ldr	r3, [pc, #188]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab5e:	895b      	ldrh	r3, [r3, #10]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	461a      	mov	r2, r3
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e050      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 800ab6a:	4b2c      	ldr	r3, [pc, #176]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab6c:	7b9b      	ldrb	r3, [r3, #14]
 800ab6e:	b25b      	sxtb	r3, r3
 800ab70:	461a      	mov	r2, r3
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	e049      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 800ab78:	4b28      	ldr	r3, [pc, #160]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab7a:	8a1b      	ldrh	r3, [r3, #16]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	461a      	mov	r2, r3
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	e042      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 800ab86:	4b25      	ldr	r3, [pc, #148]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab88:	8a5b      	ldrh	r3, [r3, #18]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e03b      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 800ab94:	4b21      	ldr	r3, [pc, #132]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800ab96:	8a9b      	ldrh	r3, [r3, #20]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e034      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 800aba2:	4b1e      	ldr	r3, [pc, #120]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800aba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	461a      	mov	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	e02c      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 800abb2:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800abb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	461a      	mov	r2, r3
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	e025      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 800abc0:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800abc2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	e01e      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800abd0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800abd4:	b25b      	sxtb	r3, r3
 800abd6:	461a      	mov	r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	e016      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800abe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	461a      	mov	r2, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	e00f      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 800abec:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800abee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	461a      	mov	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	e008      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 800abfa:	4b08      	ldr	r3, [pc, #32]	; (800ac1c <cfg_NodeServoVarGet+0x138>)
 800abfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	461a      	mov	r2, r3
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	e001      	b.n	800ac0c <cfg_NodeServoVarGet+0x128>
		default: return CFG_ERROR_VARID;
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e000      	b.n	800ac0e <cfg_NodeServoVarGet+0x12a>
	}
	return CFG_ERROR_NONE;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20001014 	.word	0x20001014

0800ac20 <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	6039      	str	r1, [r7, #0]
 800ac2a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d079      	beq.n	800ad26 <cfg_NodeServoVarSet+0x106>
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	2b0d      	cmp	r3, #13
 800ac36:	d873      	bhi.n	800ad20 <cfg_NodeServoVarSet+0x100>
 800ac38:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <cfg_NodeServoVarSet+0x20>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800ac79 	.word	0x0800ac79
 800ac44:	0800ac89 	.word	0x0800ac89
 800ac48:	0800ad25 	.word	0x0800ad25
 800ac4c:	0800ac99 	.word	0x0800ac99
 800ac50:	0800aca9 	.word	0x0800aca9
 800ac54:	0800acb5 	.word	0x0800acb5
 800ac58:	0800acc1 	.word	0x0800acc1
 800ac5c:	0800accd 	.word	0x0800accd
 800ac60:	0800acdd 	.word	0x0800acdd
 800ac64:	0800ad25 	.word	0x0800ad25
 800ac68:	0800aced 	.word	0x0800aced
 800ac6c:	0800acfd 	.word	0x0800acfd
 800ac70:	0800ad09 	.word	0x0800ad09
 800ac74:	0800ad15 	.word	0x0800ad15
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	4619      	mov	r1, r3
 800ac80:	2000      	movs	r0, #0
 800ac82:	f7ff fd31 	bl	800a6e8 <servo_setEnable>
 800ac86:	e04e      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	4619      	mov	r1, r3
 800ac90:	2000      	movs	r0, #0
 800ac92:	f7ff fc0d 	bl	800a4b0 <servo_setAng>
 800ac96:	e046      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	b25b      	sxtb	r3, r3
 800ac9e:	4619      	mov	r1, r3
 800aca0:	2000      	movs	r0, #0
 800aca2:	f7ff fcb9 	bl	800a618 <servo_setPercnet>
 800aca6:	e03e      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	b29a      	uxth	r2, r3
 800acae:	4b20      	ldr	r3, [pc, #128]	; (800ad30 <cfg_NodeServoVarSet+0x110>)
 800acb0:	821a      	strh	r2, [r3, #16]
 800acb2:	e038      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	b29a      	uxth	r2, r3
 800acba:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <cfg_NodeServoVarSet+0x110>)
 800acbc:	825a      	strh	r2, [r3, #18]
 800acbe:	e032      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <cfg_NodeServoVarSet+0x110>)
 800acc8:	829a      	strh	r2, [r3, #20]
 800acca:	e02c      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	4619      	mov	r1, r3
 800acd4:	2001      	movs	r0, #1
 800acd6:	f7ff fd07 	bl	800a6e8 <servo_setEnable>
 800acda:	e024      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	4619      	mov	r1, r3
 800ace4:	2001      	movs	r0, #1
 800ace6:	f7ff fbe3 	bl	800a4b0 <servo_setAng>
 800acea:	e01c      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	b25b      	sxtb	r3, r3
 800acf2:	4619      	mov	r1, r3
 800acf4:	2001      	movs	r0, #1
 800acf6:	f7ff fc8f 	bl	800a618 <servo_setPercnet>
 800acfa:	e014      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <cfg_NodeServoVarSet+0x110>)
 800ad04:	851a      	strh	r2, [r3, #40]	; 0x28
 800ad06:	e00e      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	4b08      	ldr	r3, [pc, #32]	; (800ad30 <cfg_NodeServoVarSet+0x110>)
 800ad10:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad12:	e008      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <cfg_NodeServoVarSet+0x110>)
 800ad1c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ad1e:	e002      	b.n	800ad26 <cfg_NodeServoVarSet+0x106>
		default: return CFG_ERROR_VARID;
 800ad20:	2302      	movs	r3, #2
 800ad22:	e001      	b.n	800ad28 <cfg_NodeServoVarSet+0x108>
		case SERVO_ROLL_CUR_PWM:			break;
 800ad24:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	20001014 	.word	0x20001014

0800ad34 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 800ad3c:	4b20      	ldr	r3, [pc, #128]	; (800adc0 <system_Timer+0x8c>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4413      	add	r3, r2
 800ad44:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <system_Timer+0x8c>)
 800ad46:	6013      	str	r3, [r2, #0]
	leds_Timer(res);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f8 fd0f 	bl	800376c <leds_Timer>
	cfg_Timer(res);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7f7 fa18 	bl	8002184 <cfg_Timer>
	modem_Timer(res);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7fd fc3d 	bl	80085d4 <modem_Timer>
	servo_Timer(res);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff fae2 	bl	800a324 <servo_Timer>
	motor_Timer(res);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7fd ff29 	bl	8008bb8 <motor_Timer>
	rc_Timer(res);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7fe faea 	bl	8009340 <rc_Timer>
	battery_Timer(res);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7f6 fe05 	bl	800197c <battery_Timer>
	autopilot_Timer(res);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f6 f872 	bl	8000e5c <autopilot_Timer>
	sens_Timer(res);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fe fe4b 	bl	8009a14 <sens_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]
 800ad82:	e014      	b.n	800adae <system_Timer+0x7a>
	{
		if( system_info.timer[i] != 0 ){
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	4a0f      	ldr	r2, [pc, #60]	; (800adc4 <system_Timer+0x90>)
 800ad88:	3312      	adds	r3, #18
 800ad8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <system_Timer+0x74>
			system_info.timer[i]--;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	490b      	ldr	r1, [pc, #44]	; (800adc4 <system_Timer+0x90>)
 800ad96:	f103 0212 	add.w	r2, r3, #18
 800ad9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad9e:	3a01      	subs	r2, #1
 800ada0:	4908      	ldr	r1, [pc, #32]	; (800adc4 <system_Timer+0x90>)
 800ada2:	3312      	adds	r3, #18
 800ada4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	3301      	adds	r3, #1
 800adac:	73fb      	strb	r3, [r7, #15]
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d9e7      	bls.n	800ad84 <system_Timer+0x50>
		}
	}
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	200010a4 	.word	0x200010a4
 800adc4:	20001054 	.word	0x20001054

0800adc8 <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 800adcc:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <system_Init+0x50>)
 800adce:	2200      	movs	r2, #0
 800add0:	705a      	strb	r2, [r3, #1]
	leds_InitTask();
 800add2:	f7f8 fd07 	bl	80037e4 <leds_InitTask>
	modem_InitTask();
 800add6:	f7fd fc21 	bl	800861c <modem_InitTask>
	servo_InitTask();
 800adda:	f7ff facb 	bl	800a374 <servo_InitTask>
	motor_InitTask();
 800adde:	f7fd ff15 	bl	8008c0c <motor_InitTask>
	rc_InitTask();
 800ade2:	f7fe fad1 	bl	8009388 <rc_InitTask>
	sens_InitTask();
 800ade6:	f7fe fe39 	bl	8009a5c <sens_InitTask>
	battery_InitTask(10000);
 800adea:	f242 7010 	movw	r0, #10000	; 0x2710
 800adee:	f7f6 fde3 	bl	80019b8 <battery_InitTask>
	autopilot_InitTask();
 800adf2:	f7f6 f857 	bl	8000ea4 <autopilot_InitTask>
	cfg_InitTask();
 800adf6:	f7f7 f9fb 	bl	80021f0 <cfg_InitTask>
	system_info.usb_rx_flag = 0;
 800adfa:	4b07      	ldr	r3, [pc, #28]	; (800ae18 <system_Init+0x50>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800ae02:	2201      	movs	r2, #1
 800ae04:	4905      	ldr	r1, [pc, #20]	; (800ae1c <system_Init+0x54>)
 800ae06:	4806      	ldr	r0, [pc, #24]	; (800ae20 <system_Init+0x58>)
 800ae08:	f005 fab4 	bl	8010374 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 800ae0c:	4805      	ldr	r0, [pc, #20]	; (800ae24 <system_Init+0x5c>)
 800ae0e:	f000 fa05 	bl	800b21c <HAL_ADC_Start_IT>
	//leds_setBlink(LED_SIM_BLUE, 200, 1000, 0, 0, 1);
}
 800ae12:	bf00      	nop
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20001054 	.word	0x20001054
 800ae1c:	200010a8 	.word	0x200010a8
 800ae20:	20000b54 	.word	0x20000b54
 800ae24:	20000a70 	.word	0x20000a70

0800ae28 <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	uint32_t i;

	leds_Task();
 800ae2e:	f7f9 f859 	bl	8003ee4 <leds_Task>
	cfg_Task();
 800ae32:	f7f7 fa43 	bl	80022bc <cfg_Task>
	modem_Task();
 800ae36:	f7fd fc13 	bl	8008660 <modem_Task>
	motor_Task();
 800ae3a:	f7fd ff33 	bl	8008ca4 <motor_Task>
	servo_Task();
 800ae3e:	f7ff fb1b 	bl	800a478 <servo_Task>
	rc_Task();
 800ae42:	f7fe fac9 	bl	80093d8 <rc_Task>
	sens_Task();
 800ae46:	f7fe fe15 	bl	8009a74 <sens_Task>
	battery_Task();
 800ae4a:	f7f6 fdd1 	bl	80019f0 <battery_Task>
	autopilot_Task();
 800ae4e:	f7f6 f8a3 	bl	8000f98 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 800ae52:	4b30      	ldr	r3, [pc, #192]	; (800af14 <system_Task+0xec>)
 800ae54:	789b      	ldrb	r3, [r3, #2]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d109      	bne.n	800ae70 <system_Task+0x48>
 800ae5c:	4b2d      	ldr	r3, [pc, #180]	; (800af14 <system_Task+0xec>)
 800ae5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d105      	bne.n	800ae70 <system_Task+0x48>
	{
		system_info.adc_cplt = 0;
 800ae64:	4b2b      	ldr	r3, [pc, #172]	; (800af14 <system_Task+0xec>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 800ae6a:	482b      	ldr	r0, [pc, #172]	; (800af18 <system_Task+0xf0>)
 800ae6c:	f000 f9d6 	bl	800b21c <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 800ae70:	4b2a      	ldr	r3, [pc, #168]	; (800af1c <system_Task+0xf4>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d10f      	bne.n	800ae9a <system_Task+0x72>
	{
		_system_restart_uart = 0;
 800ae7a:	4b28      	ldr	r3, [pc, #160]	; (800af1c <system_Task+0xf4>)
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 800ae80:	f7fd f8c0 	bl	8008004 <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800ae84:	2201      	movs	r2, #1
 800ae86:	4926      	ldr	r1, [pc, #152]	; (800af20 <system_Task+0xf8>)
 800ae88:	4826      	ldr	r0, [pc, #152]	; (800af24 <system_Task+0xfc>)
 800ae8a:	f005 fa73 	bl	8010374 <HAL_UART_Receive_IT>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <system_Task+0x72>
			_system_restart_uart = 1;
 800ae94:	4b21      	ldr	r3, [pc, #132]	; (800af1c <system_Task+0xf4>)
 800ae96:	2201      	movs	r2, #1
 800ae98:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//USB Rx
	if( system_info.usb_rx_flag == 1 )
 800ae9a:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <system_Task+0xec>)
 800ae9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d118      	bne.n	800aed8 <system_Task+0xb0>
	{
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	e00c      	b.n	800aec6 <system_Task+0x9e>
			cfg_RcvData(CFG_IFACE_CH1_USB, system_info.usb_rx_buf[i]);
 800aeac:	4a19      	ldr	r2, [pc, #100]	; (800af14 <system_Task+0xec>)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	3303      	adds	r3, #3
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	4619      	mov	r1, r3
 800aeba:	2001      	movs	r0, #1
 800aebc:	f7f7 fe16 	bl	8002aec <cfg_RcvData>
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	4b13      	ldr	r3, [pc, #76]	; (800af14 <system_Task+0xec>)
 800aec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d3ed      	bcc.n	800aeac <system_Task+0x84>
		}
		system_info.usb_rx_flag = 0;
 800aed0:	4b10      	ldr	r3, [pc, #64]	; (800af14 <system_Task+0xec>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}

	//System reset
	if( system_info.reset_req == 1 )
 800aed8:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <system_Task+0xec>)
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d106      	bne.n	800aef0 <system_Task+0xc8>
	{
		system_info.reset_req = 2;
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <system_Task+0xec>)
 800aee4:	2202      	movs	r2, #2
 800aee6:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 800aee8:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <system_Task+0xec>)
 800aeea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aeee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 800aef0:	4b08      	ldr	r3, [pc, #32]	; (800af14 <system_Task+0xec>)
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d108      	bne.n	800af0c <system_Task+0xe4>
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <system_Task+0xec>)
 800aefc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <system_Task+0xe4>
	{
		system_info.reset_req = 0;
 800af02:	4b04      	ldr	r3, [pc, #16]	; (800af14 <system_Task+0xec>)
 800af04:	2200      	movs	r2, #0
 800af06:	705a      	strb	r2, [r3, #1]
		system_Reset();
 800af08:	f00b f852 	bl	8015fb0 <__system_Reset_veneer>
	}
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20001054 	.word	0x20001054
 800af18:	20000a70 	.word	0x20000a70
 800af1c:	200010a9 	.word	0x200010a9
 800af20:	200010a8 	.word	0x200010a8
 800af24:	20000b54 	.word	0x20000b54

0800af28 <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 800af2c:	4807      	ldr	r0, [pc, #28]	; (800af4c <system_UARTmodemSet115200+0x24>)
 800af2e:	f005 fa51 	bl	80103d4 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 800af32:	4806      	ldr	r0, [pc, #24]	; (800af4c <system_UARTmodemSet115200+0x24>)
 800af34:	f005 f95d 	bl	80101f2 <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 800af38:	f7fd f82e 	bl	8007f98 <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800af3c:	2201      	movs	r2, #1
 800af3e:	4904      	ldr	r1, [pc, #16]	; (800af50 <system_UARTmodemSet115200+0x28>)
 800af40:	4802      	ldr	r0, [pc, #8]	; (800af4c <system_UARTmodemSet115200+0x24>)
 800af42:	f005 fa17 	bl	8010374 <HAL_UART_Receive_IT>
	return;
 800af46:	bf00      	nop
}
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000b54 	.word	0x20000b54
 800af50:	200010a8 	.word	0x200010a8

0800af54 <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d112      	bne.n	800af8e <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 800af68:	2300      	movs	r3, #0
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e00a      	b.n	800af84 <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	4413      	add	r3, r2
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	4619      	mov	r1, r3
 800af78:	2000      	movs	r0, #0
 800af7a:	f7f7 fdb7 	bl	8002aec <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	3301      	adds	r3, #1
 800af82:	617b      	str	r3, [r7, #20]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d3f0      	bcc.n	800af6e <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 800af8c:	e014      	b.n	800afb8 <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d111      	bne.n	800afb8 <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 800af94:	2300      	movs	r3, #0
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	e009      	b.n	800afae <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	4413      	add	r3, r2
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe facc 	bl	8009540 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	3301      	adds	r3, #1
 800afac:	617b      	str	r3, [r7, #20]
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d3f1      	bcc.n	800af9a <system_ModemRxCallback+0x46>
	return;
 800afb6:	bf00      	nop
 800afb8:	bf00      	nop
}
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a14      	ldr	r2, [pc, #80]	; (800b01c <system_ADC_ConvCpltCallback+0x5c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d120      	bne.n	800b012 <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 800afd0:	4812      	ldr	r0, [pc, #72]	; (800b01c <system_ADC_ConvCpltCallback+0x5c>)
 800afd2:	f000 faf1 	bl	800b5b8 <HAL_ADC_GetValue>
 800afd6:	ee07 0a90 	vmov	s15, r0
 800afda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afde:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b020 <system_ADC_ConvCpltCallback+0x60>
 800afe2:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 800afe6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800afea:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 800afee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff2:	ee17 3a90 	vmov	r3, s15
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <system_ADC_ConvCpltCallback+0x64>)
 800affa:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 800affc:	4b09      	ldr	r3, [pc, #36]	; (800b024 <system_ADC_ConvCpltCallback+0x64>)
 800affe:	2201      	movs	r2, #1
 800b000:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 800b002:	4b09      	ldr	r3, [pc, #36]	; (800b028 <system_ADC_ConvCpltCallback+0x68>)
 800b004:	2201      	movs	r2, #1
 800b006:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 800b008:	4b07      	ldr	r3, [pc, #28]	; (800b028 <system_ADC_ConvCpltCallback+0x68>)
 800b00a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b00e:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	return;
 800b010:	bf00      	nop
 800b012:	bf00      	nop
}
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20000a70 	.word	0x20000a70
 800b020:	3f4e4ce5 	.word	0x3f4e4ce5
 800b024:	20000350 	.word	0x20000350
 800b028:	20001054 	.word	0x20001054

0800b02c <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a0c      	ldr	r2, [pc, #48]	; (800b068 <system_UART_RxCpltCallback+0x3c>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d110      	bne.n	800b05e <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 800b03c:	4b0b      	ldr	r3, [pc, #44]	; (800b06c <system_UART_RxCpltCallback+0x40>)
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	b2db      	uxtb	r3, r3
 800b042:	4618      	mov	r0, r3
 800b044:	f7fd fc24 	bl	8008890 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800b048:	2201      	movs	r2, #1
 800b04a:	4908      	ldr	r1, [pc, #32]	; (800b06c <system_UART_RxCpltCallback+0x40>)
 800b04c:	4806      	ldr	r0, [pc, #24]	; (800b068 <system_UART_RxCpltCallback+0x3c>)
 800b04e:	f005 f991 	bl	8010374 <HAL_UART_Receive_IT>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 800b058:	4b05      	ldr	r3, [pc, #20]	; (800b070 <system_UART_RxCpltCallback+0x44>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000b54 	.word	0x20000b54
 800b06c:	200010a8 	.word	0x200010a8
 800b070:	200010a9 	.word	0x200010a9

0800b074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b074:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b0ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b078:	480d      	ldr	r0, [pc, #52]	; (800b0b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b07a:	490e      	ldr	r1, [pc, #56]	; (800b0b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b07c:	4a0e      	ldr	r2, [pc, #56]	; (800b0b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b07e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b080:	e002      	b.n	800b088 <LoopCopyDataInit>

0800b082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b086:	3304      	adds	r3, #4

0800b088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b08a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b08c:	d3f9      	bcc.n	800b082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b08e:	4a0b      	ldr	r2, [pc, #44]	; (800b0bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b090:	4c0b      	ldr	r4, [pc, #44]	; (800b0c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b092:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b094:	e001      	b.n	800b09a <LoopFillZerobss>

0800b096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b098:	3204      	adds	r2, #4

0800b09a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b09a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b09c:	d3fb      	bcc.n	800b096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b09e:	f7fd fa87 	bl	80085b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b0a2:	f00a fbc9 	bl	8015838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b0a6:	f7fc fd11 	bl	8007acc <main>
  bx  lr    
 800b0aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b0ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b0b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b0b4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 800b0b8:	08016a00 	.word	0x08016a00
  ldr r2, =_sbss
 800b0bc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 800b0c0:	20002e14 	.word	0x20002e14

0800b0c4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b0c4:	e7fe      	b.n	800b0c4 <DMA1_Stream0_IRQHandler>
	...

0800b0c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <HAL_Init+0x40>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a0d      	ldr	r2, [pc, #52]	; (800b108 <HAL_Init+0x40>)
 800b0d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b0d8:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <HAL_Init+0x40>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a0a      	ldr	r2, [pc, #40]	; (800b108 <HAL_Init+0x40>)
 800b0de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b0e4:	4b08      	ldr	r3, [pc, #32]	; (800b108 <HAL_Init+0x40>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a07      	ldr	r2, [pc, #28]	; (800b108 <HAL_Init+0x40>)
 800b0ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b0f0:	2003      	movs	r0, #3
 800b0f2:	f000 fd8c 	bl	800bc0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b0f6:	200f      	movs	r0, #15
 800b0f8:	f7fd f98a 	bl	8008410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b0fc:	f7fc ffb8 	bl	8008070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	40023c00 	.word	0x40023c00

0800b10c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b10c:	b480      	push	{r7}
 800b10e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <HAL_IncTick+0x20>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	4b06      	ldr	r3, [pc, #24]	; (800b130 <HAL_IncTick+0x24>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4413      	add	r3, r2
 800b11c:	4a04      	ldr	r2, [pc, #16]	; (800b130 <HAL_IncTick+0x24>)
 800b11e:	6013      	str	r3, [r2, #0]
}
 800b120:	bf00      	nop
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	200000ec 	.word	0x200000ec
 800b130:	200010ac 	.word	0x200010ac

0800b134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b134:	b480      	push	{r7}
 800b136:	af00      	add	r7, sp, #0
  return uwTick;
 800b138:	4b03      	ldr	r3, [pc, #12]	; (800b148 <HAL_GetTick+0x14>)
 800b13a:	681b      	ldr	r3, [r3, #0]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	200010ac 	.word	0x200010ac

0800b14c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b154:	f7ff ffee 	bl	800b134 <HAL_GetTick>
 800b158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d005      	beq.n	800b172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b166:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <HAL_Delay+0x44>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4413      	add	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b172:	bf00      	nop
 800b174:	f7ff ffde 	bl	800b134 <HAL_GetTick>
 800b178:	4602      	mov	r2, r0
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	429a      	cmp	r2, r3
 800b182:	d8f7      	bhi.n	800b174 <HAL_Delay+0x28>
  {
  }
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	200000ec 	.word	0x200000ec

0800b194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e033      	b.n	800b212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7fc ff84 	bl	80080c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f003 0310 	and.w	r3, r3, #16
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d118      	bne.n	800b204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b1da:	f023 0302 	bic.w	r3, r3, #2
 800b1de:	f043 0202 	orr.w	r2, r3, #2
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb3a 	bl	800b860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f6:	f023 0303 	bic.w	r3, r3, #3
 800b1fa:	f043 0201 	orr.w	r2, r3, #1
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	641a      	str	r2, [r3, #64]	; 0x40
 800b202:	e001      	b.n	800b208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800b224:	2300      	movs	r3, #0
 800b226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <HAL_ADC_Start_IT+0x1a>
 800b232:	2302      	movs	r3, #2
 800b234:	e0a1      	b.n	800b37a <HAL_ADC_Start_IT+0x15e>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d018      	beq.n	800b27e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689a      	ldr	r2, [r3, #8]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0201 	orr.w	r2, r2, #1
 800b25a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b25c:	4b4a      	ldr	r3, [pc, #296]	; (800b388 <HAL_ADC_Start_IT+0x16c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a4a      	ldr	r2, [pc, #296]	; (800b38c <HAL_ADC_Start_IT+0x170>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	0c9a      	lsrs	r2, r3, #18
 800b268:	4613      	mov	r3, r2
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	4413      	add	r3, r2
 800b26e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800b270:	e002      	b.n	800b278 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	3b01      	subs	r3, #1
 800b276:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1f9      	bne.n	800b272 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d169      	bne.n	800b360 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b294:	f023 0301 	bic.w	r3, r3, #1
 800b298:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d007      	beq.n	800b2be <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b2b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ca:	d106      	bne.n	800b2da <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d0:	f023 0206 	bic.w	r2, r3, #6
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	645a      	str	r2, [r3, #68]	; 0x44
 800b2d8:	e002      	b.n	800b2e0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b2e8:	4b29      	ldr	r3, [pc, #164]	; (800b390 <HAL_ADC_Start_IT+0x174>)
 800b2ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b2f4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	6812      	ldr	r2, [r2, #0]
 800b300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b304:	f043 0320 	orr.w	r3, r3, #32
 800b308:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f003 031f 	and.w	r3, r3, #31
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10f      	bne.n	800b336 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d129      	bne.n	800b378 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689a      	ldr	r2, [r3, #8]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b332:	609a      	str	r2, [r3, #8]
 800b334:	e020      	b.n	800b378 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a16      	ldr	r2, [pc, #88]	; (800b394 <HAL_ADC_Start_IT+0x178>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d11b      	bne.n	800b378 <HAL_ADC_Start_IT+0x15c>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d114      	bne.n	800b378 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689a      	ldr	r2, [r3, #8]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b35c:	609a      	str	r2, [r3, #8]
 800b35e:	e00b      	b.n	800b378 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	f043 0210 	orr.w	r2, r3, #16
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b370:	f043 0201 	orr.w	r2, r3, #1
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	200000e4 	.word	0x200000e4
 800b38c:	431bde83 	.word	0x431bde83
 800b390:	40012300 	.word	0x40012300
 800b394:	40012000 	.word	0x40012000

0800b398 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f003 0302 	and.w	r3, r3, #2
 800b3be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d049      	beq.n	800b462 <HAL_ADC_IRQHandler+0xca>
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d046      	beq.n	800b462 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d8:	f003 0310 	and.w	r3, r3, #16
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d105      	bne.n	800b3ec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d12b      	bne.n	800b452 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d127      	bne.n	800b452 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d006      	beq.n	800b41e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d119      	bne.n	800b452 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0220 	bic.w	r2, r2, #32
 800b42c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	f043 0201 	orr.w	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7fc fde2 	bl	800801c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f06f 0212 	mvn.w	r2, #18
 800b460:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b470:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d057      	beq.n	800b528 <HAL_ADC_IRQHandler+0x190>
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d054      	beq.n	800b528 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b482:	f003 0310 	and.w	r3, r3, #16
 800b486:	2b00      	cmp	r3, #0
 800b488:	d105      	bne.n	800b496 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d139      	bne.n	800b518 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d006      	beq.n	800b4c0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d12b      	bne.n	800b518 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d124      	bne.n	800b518 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d11d      	bne.n	800b518 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d119      	bne.n	800b518 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d105      	bne.n	800b518 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b510:	f043 0201 	orr.w	r2, r3, #1
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fa9d 	bl	800ba58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f06f 020c 	mvn.w	r2, #12
 800b526:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b536:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d017      	beq.n	800b56e <HAL_ADC_IRQHandler+0x1d6>
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d014      	beq.n	800b56e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d10d      	bne.n	800b56e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f837 	bl	800b5d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f06f 0201 	mvn.w	r2, #1
 800b56c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f003 0320 	and.w	r3, r3, #32
 800b574:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b57c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d015      	beq.n	800b5b0 <HAL_ADC_IRQHandler+0x218>
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d012      	beq.n	800b5b0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58e:	f043 0202 	orr.w	r2, r3, #2
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f06f 0220 	mvn.w	r2, #32
 800b59e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f820 	bl	800b5e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f06f 0220 	mvn.w	r2, #32
 800b5ae:	601a      	str	r2, [r3, #0]
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800b5da:	bf00      	nop
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b5ee:	bf00      	nop
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
	...

0800b5fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b610:	2b01      	cmp	r3, #1
 800b612:	d101      	bne.n	800b618 <HAL_ADC_ConfigChannel+0x1c>
 800b614:	2302      	movs	r3, #2
 800b616:	e113      	b.n	800b840 <HAL_ADC_ConfigChannel+0x244>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b09      	cmp	r3, #9
 800b626:	d925      	bls.n	800b674 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68d9      	ldr	r1, [r3, #12]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	b29b      	uxth	r3, r3
 800b634:	461a      	mov	r2, r3
 800b636:	4613      	mov	r3, r2
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	4413      	add	r3, r2
 800b63c:	3b1e      	subs	r3, #30
 800b63e:	2207      	movs	r2, #7
 800b640:	fa02 f303 	lsl.w	r3, r2, r3
 800b644:	43da      	mvns	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	400a      	ands	r2, r1
 800b64c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68d9      	ldr	r1, [r3, #12]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689a      	ldr	r2, [r3, #8]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	4618      	mov	r0, r3
 800b660:	4603      	mov	r3, r0
 800b662:	005b      	lsls	r3, r3, #1
 800b664:	4403      	add	r3, r0
 800b666:	3b1e      	subs	r3, #30
 800b668:	409a      	lsls	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	60da      	str	r2, [r3, #12]
 800b672:	e022      	b.n	800b6ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6919      	ldr	r1, [r3, #16]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	4613      	mov	r3, r2
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	4413      	add	r3, r2
 800b688:	2207      	movs	r2, #7
 800b68a:	fa02 f303 	lsl.w	r3, r2, r3
 800b68e:	43da      	mvns	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	400a      	ands	r2, r1
 800b696:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6919      	ldr	r1, [r3, #16]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	689a      	ldr	r2, [r3, #8]
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	005b      	lsls	r3, r3, #1
 800b6ae:	4403      	add	r3, r0
 800b6b0:	409a      	lsls	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	430a      	orrs	r2, r1
 800b6b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	2b06      	cmp	r3, #6
 800b6c0:	d824      	bhi.n	800b70c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	3b05      	subs	r3, #5
 800b6d4:	221f      	movs	r2, #31
 800b6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6da:	43da      	mvns	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	400a      	ands	r2, r1
 800b6e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3b05      	subs	r3, #5
 800b6fe:	fa00 f203 	lsl.w	r2, r0, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	430a      	orrs	r2, r1
 800b708:	635a      	str	r2, [r3, #52]	; 0x34
 800b70a:	e04c      	b.n	800b7a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2b0c      	cmp	r3, #12
 800b712:	d824      	bhi.n	800b75e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	3b23      	subs	r3, #35	; 0x23
 800b726:	221f      	movs	r2, #31
 800b728:	fa02 f303 	lsl.w	r3, r2, r3
 800b72c:	43da      	mvns	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	400a      	ands	r2, r1
 800b734:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	b29b      	uxth	r3, r3
 800b742:	4618      	mov	r0, r3
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	4613      	mov	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	3b23      	subs	r3, #35	; 0x23
 800b750:	fa00 f203 	lsl.w	r2, r0, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	430a      	orrs	r2, r1
 800b75a:	631a      	str	r2, [r3, #48]	; 0x30
 800b75c:	e023      	b.n	800b7a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	3b41      	subs	r3, #65	; 0x41
 800b770:	221f      	movs	r2, #31
 800b772:	fa02 f303 	lsl.w	r3, r2, r3
 800b776:	43da      	mvns	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	400a      	ands	r2, r1
 800b77e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	4618      	mov	r0, r3
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	3b41      	subs	r3, #65	; 0x41
 800b79a:	fa00 f203 	lsl.w	r2, r0, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b7a6:	4b29      	ldr	r3, [pc, #164]	; (800b84c <HAL_ADC_ConfigChannel+0x250>)
 800b7a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a28      	ldr	r2, [pc, #160]	; (800b850 <HAL_ADC_ConfigChannel+0x254>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d10f      	bne.n	800b7d4 <HAL_ADC_ConfigChannel+0x1d8>
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b12      	cmp	r3, #18
 800b7ba:	d10b      	bne.n	800b7d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a1d      	ldr	r2, [pc, #116]	; (800b850 <HAL_ADC_ConfigChannel+0x254>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d12b      	bne.n	800b836 <HAL_ADC_ConfigChannel+0x23a>
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a1c      	ldr	r2, [pc, #112]	; (800b854 <HAL_ADC_ConfigChannel+0x258>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d003      	beq.n	800b7f0 <HAL_ADC_ConfigChannel+0x1f4>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b11      	cmp	r3, #17
 800b7ee:	d122      	bne.n	800b836 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a11      	ldr	r2, [pc, #68]	; (800b854 <HAL_ADC_ConfigChannel+0x258>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d111      	bne.n	800b836 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <HAL_ADC_ConfigChannel+0x25c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a11      	ldr	r2, [pc, #68]	; (800b85c <HAL_ADC_ConfigChannel+0x260>)
 800b818:	fba2 2303 	umull	r2, r3, r2, r3
 800b81c:	0c9a      	lsrs	r2, r3, #18
 800b81e:	4613      	mov	r3, r2
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	4413      	add	r3, r2
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b828:	e002      	b.n	800b830 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1f9      	bne.n	800b82a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	40012300 	.word	0x40012300
 800b850:	40012000 	.word	0x40012000
 800b854:	10000012 	.word	0x10000012
 800b858:	200000e4 	.word	0x200000e4
 800b85c:	431bde83 	.word	0x431bde83

0800b860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b868:	4b79      	ldr	r3, [pc, #484]	; (800ba50 <ADC_Init+0x1f0>)
 800b86a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	431a      	orrs	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6859      	ldr	r1, [r3, #4]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	021a      	lsls	r2, r3, #8
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b8b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	6859      	ldr	r1, [r3, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	430a      	orrs	r2, r1
 800b8ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6899      	ldr	r1, [r3, #8]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f2:	4a58      	ldr	r2, [pc, #352]	; (800ba54 <ADC_Init+0x1f4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d022      	beq.n	800b93e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689a      	ldr	r2, [r3, #8]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6899      	ldr	r1, [r3, #8]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	430a      	orrs	r2, r1
 800b918:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6899      	ldr	r1, [r3, #8]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	430a      	orrs	r2, r1
 800b93a:	609a      	str	r2, [r3, #8]
 800b93c:	e00f      	b.n	800b95e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b94c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	689a      	ldr	r2, [r3, #8]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b95c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0202 	bic.w	r2, r2, #2
 800b96c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6899      	ldr	r1, [r3, #8]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7e1b      	ldrb	r3, [r3, #24]
 800b978:	005a      	lsls	r2, r3, #1
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	430a      	orrs	r2, r1
 800b980:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01b      	beq.n	800b9c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b99a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b9aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6859      	ldr	r1, [r3, #4]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	035a      	lsls	r2, r3, #13
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	605a      	str	r2, [r3, #4]
 800b9c2:	e007      	b.n	800b9d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800b9e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	051a      	lsls	r2, r3, #20
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689a      	ldr	r2, [r3, #8]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6899      	ldr	r1, [r3, #8]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba16:	025a      	lsls	r2, r3, #9
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	689a      	ldr	r2, [r3, #8]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6899      	ldr	r1, [r3, #8]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	029a      	lsls	r2, r3, #10
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	609a      	str	r2, [r3, #8]
}
 800ba44:	bf00      	nop
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	40012300 	.word	0x40012300
 800ba54:	0f000001 	.word	0x0f000001

0800ba58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f003 0307 	and.w	r3, r3, #7
 800ba7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <__NVIC_SetPriorityGrouping+0x44>)
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ba88:	4013      	ands	r3, r2
 800ba8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ba94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ba98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ba9e:	4a04      	ldr	r2, [pc, #16]	; (800bab0 <__NVIC_SetPriorityGrouping+0x44>)
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	60d3      	str	r3, [r2, #12]
}
 800baa4:	bf00      	nop
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	e000ed00 	.word	0xe000ed00

0800bab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bab8:	4b04      	ldr	r3, [pc, #16]	; (800bacc <__NVIC_GetPriorityGrouping+0x18>)
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	0a1b      	lsrs	r3, r3, #8
 800babe:	f003 0307 	and.w	r3, r3, #7
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	e000ed00 	.word	0xe000ed00

0800bad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	db0b      	blt.n	800bafa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	f003 021f 	and.w	r2, r3, #31
 800bae8:	4907      	ldr	r1, [pc, #28]	; (800bb08 <__NVIC_EnableIRQ+0x38>)
 800baea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baee:	095b      	lsrs	r3, r3, #5
 800baf0:	2001      	movs	r0, #1
 800baf2:	fa00 f202 	lsl.w	r2, r0, r2
 800baf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bafa:	bf00      	nop
 800bafc:	370c      	adds	r7, #12
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	e000e100 	.word	0xe000e100

0800bb0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	4603      	mov	r3, r0
 800bb14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	db12      	blt.n	800bb44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	f003 021f 	and.w	r2, r3, #31
 800bb24:	490a      	ldr	r1, [pc, #40]	; (800bb50 <__NVIC_DisableIRQ+0x44>)
 800bb26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb2a:	095b      	lsrs	r3, r3, #5
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	fa00 f202 	lsl.w	r2, r0, r2
 800bb32:	3320      	adds	r3, #32
 800bb34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bb38:	f3bf 8f4f 	dsb	sy
}
 800bb3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb3e:	f3bf 8f6f 	isb	sy
}
 800bb42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	e000e100 	.word	0xe000e100

0800bb54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	6039      	str	r1, [r7, #0]
 800bb5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	db0a      	blt.n	800bb7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	490c      	ldr	r1, [pc, #48]	; (800bba0 <__NVIC_SetPriority+0x4c>)
 800bb6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb72:	0112      	lsls	r2, r2, #4
 800bb74:	b2d2      	uxtb	r2, r2
 800bb76:	440b      	add	r3, r1
 800bb78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bb7c:	e00a      	b.n	800bb94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	4908      	ldr	r1, [pc, #32]	; (800bba4 <__NVIC_SetPriority+0x50>)
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	3b04      	subs	r3, #4
 800bb8c:	0112      	lsls	r2, r2, #4
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	440b      	add	r3, r1
 800bb92:	761a      	strb	r2, [r3, #24]
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	e000e100 	.word	0xe000e100
 800bba4:	e000ed00 	.word	0xe000ed00

0800bba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b089      	sub	sp, #36	; 0x24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f003 0307 	and.w	r3, r3, #7
 800bbba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	f1c3 0307 	rsb	r3, r3, #7
 800bbc2:	2b04      	cmp	r3, #4
 800bbc4:	bf28      	it	cs
 800bbc6:	2304      	movcs	r3, #4
 800bbc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	2b06      	cmp	r3, #6
 800bbd0:	d902      	bls.n	800bbd8 <NVIC_EncodePriority+0x30>
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	3b03      	subs	r3, #3
 800bbd6:	e000      	b.n	800bbda <NVIC_EncodePriority+0x32>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	43da      	mvns	r2, r3
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	401a      	ands	r2, r3
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bbf0:	f04f 31ff 	mov.w	r1, #4294967295
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfa:	43d9      	mvns	r1, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc00:	4313      	orrs	r3, r2
         );
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3724      	adds	r7, #36	; 0x24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff ff28 	bl	800ba6c <__NVIC_SetPriorityGrouping>
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
 800bc30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bc36:	f7ff ff3d 	bl	800bab4 <__NVIC_GetPriorityGrouping>
 800bc3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	68b9      	ldr	r1, [r7, #8]
 800bc40:	6978      	ldr	r0, [r7, #20]
 800bc42:	f7ff ffb1 	bl	800bba8 <NVIC_EncodePriority>
 800bc46:	4602      	mov	r2, r0
 800bc48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff ff80 	bl	800bb54 <__NVIC_SetPriority>
}
 800bc54:	bf00      	nop
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bc66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff ff30 	bl	800bad0 <__NVIC_EnableIRQ>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	4603      	mov	r3, r0
 800bc80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800bc82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff ff40 	bl	800bb0c <__NVIC_DisableIRQ>
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bca0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bca2:	f7ff fa47 	bl	800b134 <HAL_GetTick>
 800bca6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d008      	beq.n	800bcc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2280      	movs	r2, #128	; 0x80
 800bcb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e052      	b.n	800bd6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 0216 	bic.w	r2, r2, #22
 800bcd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	695a      	ldr	r2, [r3, #20]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bce4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d103      	bne.n	800bcf6 <HAL_DMA_Abort+0x62>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d007      	beq.n	800bd06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 0208 	bic.w	r2, r2, #8
 800bd04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f022 0201 	bic.w	r2, r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bd16:	e013      	b.n	800bd40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bd18:	f7ff fa0c 	bl	800b134 <HAL_GetTick>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	d90c      	bls.n	800bd40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2203      	movs	r2, #3
 800bd30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e015      	b.n	800bd6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e4      	bne.n	800bd18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd52:	223f      	movs	r2, #63	; 0x3f
 800bd54:	409a      	lsls	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d004      	beq.n	800bd92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2280      	movs	r2, #128	; 0x80
 800bd8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e00c      	b.n	800bdac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2205      	movs	r2, #5
 800bd96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f022 0201 	bic.w	r2, r2, #1
 800bda8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bdca:	4b23      	ldr	r3, [pc, #140]	; (800be58 <HAL_FLASH_Program+0xa0>)
 800bdcc:	7e1b      	ldrb	r3, [r3, #24]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d101      	bne.n	800bdd6 <HAL_FLASH_Program+0x1e>
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	e03b      	b.n	800be4e <HAL_FLASH_Program+0x96>
 800bdd6:	4b20      	ldr	r3, [pc, #128]	; (800be58 <HAL_FLASH_Program+0xa0>)
 800bdd8:	2201      	movs	r2, #1
 800bdda:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bde0:	f000 f870 	bl	800bec4 <FLASH_WaitForLastOperation>
 800bde4:	4603      	mov	r3, r0
 800bde6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d12b      	bne.n	800be46 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d105      	bne.n	800be00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800bdf4:	783b      	ldrb	r3, [r7, #0]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68b8      	ldr	r0, [r7, #8]
 800bdfa:	f000 f91b 	bl	800c034 <FLASH_Program_Byte>
 800bdfe:	e016      	b.n	800be2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d105      	bne.n	800be12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800be06:	883b      	ldrh	r3, [r7, #0]
 800be08:	4619      	mov	r1, r3
 800be0a:	68b8      	ldr	r0, [r7, #8]
 800be0c:	f000 f8ee 	bl	800bfec <FLASH_Program_HalfWord>
 800be10:	e00d      	b.n	800be2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d105      	bne.n	800be24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	4619      	mov	r1, r3
 800be1c:	68b8      	ldr	r0, [r7, #8]
 800be1e:	f000 f8c3 	bl	800bfa8 <FLASH_Program_Word>
 800be22:	e004      	b.n	800be2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800be24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be28:	68b8      	ldr	r0, [r7, #8]
 800be2a:	f000 f88b 	bl	800bf44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800be2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800be32:	f000 f847 	bl	800bec4 <FLASH_WaitForLastOperation>
 800be36:	4603      	mov	r3, r0
 800be38:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800be3a:	4b08      	ldr	r3, [pc, #32]	; (800be5c <HAL_FLASH_Program+0xa4>)
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	4a07      	ldr	r2, [pc, #28]	; (800be5c <HAL_FLASH_Program+0xa4>)
 800be40:	f023 0301 	bic.w	r3, r3, #1
 800be44:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800be46:	4b04      	ldr	r3, [pc, #16]	; (800be58 <HAL_FLASH_Program+0xa0>)
 800be48:	2200      	movs	r2, #0
 800be4a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	200010b0 	.word	0x200010b0
 800be5c:	40023c00 	.word	0x40023c00

0800be60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800be6a:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <HAL_FLASH_Unlock+0x38>)
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da0b      	bge.n	800be8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800be72:	4b09      	ldr	r3, [pc, #36]	; (800be98 <HAL_FLASH_Unlock+0x38>)
 800be74:	4a09      	ldr	r2, [pc, #36]	; (800be9c <HAL_FLASH_Unlock+0x3c>)
 800be76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800be78:	4b07      	ldr	r3, [pc, #28]	; (800be98 <HAL_FLASH_Unlock+0x38>)
 800be7a:	4a09      	ldr	r2, [pc, #36]	; (800bea0 <HAL_FLASH_Unlock+0x40>)
 800be7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800be7e:	4b06      	ldr	r3, [pc, #24]	; (800be98 <HAL_FLASH_Unlock+0x38>)
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	da01      	bge.n	800be8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800be8a:	79fb      	ldrb	r3, [r7, #7]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	40023c00 	.word	0x40023c00
 800be9c:	45670123 	.word	0x45670123
 800bea0:	cdef89ab 	.word	0xcdef89ab

0800bea4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bea4:	b480      	push	{r7}
 800bea6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <HAL_FLASH_Lock+0x1c>)
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	4a04      	ldr	r2, [pc, #16]	; (800bec0 <HAL_FLASH_Lock+0x1c>)
 800beae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800beb2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	40023c00 	.word	0x40023c00

0800bec4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bed0:	4b1a      	ldr	r3, [pc, #104]	; (800bf3c <FLASH_WaitForLastOperation+0x78>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800bed6:	f7ff f92d 	bl	800b134 <HAL_GetTick>
 800beda:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800bedc:	e010      	b.n	800bf00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee4:	d00c      	beq.n	800bf00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d007      	beq.n	800befc <FLASH_WaitForLastOperation+0x38>
 800beec:	f7ff f922 	bl	800b134 <HAL_GetTick>
 800bef0:	4602      	mov	r2, r0
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d201      	bcs.n	800bf00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800befc:	2303      	movs	r3, #3
 800befe:	e019      	b.n	800bf34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800bf00:	4b0f      	ldr	r3, [pc, #60]	; (800bf40 <FLASH_WaitForLastOperation+0x7c>)
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e8      	bne.n	800bede <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800bf0c:	4b0c      	ldr	r3, [pc, #48]	; (800bf40 <FLASH_WaitForLastOperation+0x7c>)
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800bf18:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <FLASH_WaitForLastOperation+0x7c>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800bf1e:	4b08      	ldr	r3, [pc, #32]	; (800bf40 <FLASH_WaitForLastOperation+0x7c>)
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800bf2a:	f000 f8a5 	bl	800c078 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e000      	b.n	800bf34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
  
}  
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	200010b0 	.word	0x200010b0
 800bf40:	40023c00 	.word	0x40023c00

0800bf44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bf50:	4b14      	ldr	r3, [pc, #80]	; (800bfa4 <FLASH_Program_DoubleWord+0x60>)
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	4a13      	ldr	r2, [pc, #76]	; (800bfa4 <FLASH_Program_DoubleWord+0x60>)
 800bf56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800bf5c:	4b11      	ldr	r3, [pc, #68]	; (800bfa4 <FLASH_Program_DoubleWord+0x60>)
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	4a10      	ldr	r2, [pc, #64]	; (800bfa4 <FLASH_Program_DoubleWord+0x60>)
 800bf62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bf66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bf68:	4b0e      	ldr	r3, [pc, #56]	; (800bfa4 <FLASH_Program_DoubleWord+0x60>)
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	4a0d      	ldr	r2, [pc, #52]	; (800bfa4 <FLASH_Program_DoubleWord+0x60>)
 800bf6e:	f043 0301 	orr.w	r3, r3, #1
 800bf72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800bf7a:	f3bf 8f6f 	isb	sy
}
 800bf7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800bf80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf84:	f04f 0200 	mov.w	r2, #0
 800bf88:	f04f 0300 	mov.w	r3, #0
 800bf8c:	000a      	movs	r2, r1
 800bf8e:	2300      	movs	r3, #0
 800bf90:	68f9      	ldr	r1, [r7, #12]
 800bf92:	3104      	adds	r1, #4
 800bf94:	4613      	mov	r3, r2
 800bf96:	600b      	str	r3, [r1, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	40023c00 	.word	0x40023c00

0800bfa8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <FLASH_Program_Word+0x40>)
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	4a0c      	ldr	r2, [pc, #48]	; (800bfe8 <FLASH_Program_Word+0x40>)
 800bfb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800bfbe:	4b0a      	ldr	r3, [pc, #40]	; (800bfe8 <FLASH_Program_Word+0x40>)
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	4a09      	ldr	r2, [pc, #36]	; (800bfe8 <FLASH_Program_Word+0x40>)
 800bfc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bfca:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <FLASH_Program_Word+0x40>)
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	4a06      	ldr	r2, [pc, #24]	; (800bfe8 <FLASH_Program_Word+0x40>)
 800bfd0:	f043 0301 	orr.w	r3, r3, #1
 800bfd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	601a      	str	r2, [r3, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	40023c00 	.word	0x40023c00

0800bfec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bff8:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <FLASH_Program_HalfWord+0x44>)
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	4a0c      	ldr	r2, [pc, #48]	; (800c030 <FLASH_Program_HalfWord+0x44>)
 800bffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c002:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c004:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <FLASH_Program_HalfWord+0x44>)
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	4a09      	ldr	r2, [pc, #36]	; (800c030 <FLASH_Program_HalfWord+0x44>)
 800c00a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c00e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c010:	4b07      	ldr	r3, [pc, #28]	; (800c030 <FLASH_Program_HalfWord+0x44>)
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	4a06      	ldr	r2, [pc, #24]	; (800c030 <FLASH_Program_HalfWord+0x44>)
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	887a      	ldrh	r2, [r7, #2]
 800c020:	801a      	strh	r2, [r3, #0]
}
 800c022:	bf00      	nop
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	40023c00 	.word	0x40023c00

0800c034 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c040:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <FLASH_Program_Byte+0x40>)
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	4a0b      	ldr	r2, [pc, #44]	; (800c074 <FLASH_Program_Byte+0x40>)
 800c046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c04a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <FLASH_Program_Byte+0x40>)
 800c04e:	4a09      	ldr	r2, [pc, #36]	; (800c074 <FLASH_Program_Byte+0x40>)
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c054:	4b07      	ldr	r3, [pc, #28]	; (800c074 <FLASH_Program_Byte+0x40>)
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	4a06      	ldr	r2, [pc, #24]	; (800c074 <FLASH_Program_Byte+0x40>)
 800c05a:	f043 0301 	orr.w	r3, r3, #1
 800c05e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	701a      	strb	r2, [r3, #0]
}
 800c066:	bf00      	nop
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	40023c00 	.word	0x40023c00

0800c078 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800c078:	b480      	push	{r7}
 800c07a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c07c:	4b2f      	ldr	r3, [pc, #188]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	f003 0310 	and.w	r3, r3, #16
 800c084:	2b00      	cmp	r3, #0
 800c086:	d008      	beq.n	800c09a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	f043 0310 	orr.w	r3, r3, #16
 800c090:	4a2b      	ldr	r2, [pc, #172]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c092:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c094:	4b29      	ldr	r3, [pc, #164]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c096:	2210      	movs	r2, #16
 800c098:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c09a:	4b28      	ldr	r3, [pc, #160]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f003 0320 	and.w	r3, r3, #32
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d008      	beq.n	800c0b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c0a6:	4b26      	ldr	r3, [pc, #152]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	f043 0308 	orr.w	r3, r3, #8
 800c0ae:	4a24      	ldr	r2, [pc, #144]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c0b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800c0b2:	4b22      	ldr	r3, [pc, #136]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c0b8:	4b20      	ldr	r3, [pc, #128]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d008      	beq.n	800c0d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c0c4:	4b1e      	ldr	r3, [pc, #120]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c0c6:	69db      	ldr	r3, [r3, #28]
 800c0c8:	f043 0304 	orr.w	r3, r3, #4
 800c0cc:	4a1c      	ldr	r2, [pc, #112]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c0ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800c0d0:	4b1a      	ldr	r3, [pc, #104]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c0d2:	2240      	movs	r2, #64	; 0x40
 800c0d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800c0d6:	4b19      	ldr	r3, [pc, #100]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d008      	beq.n	800c0f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800c0e2:	4b17      	ldr	r3, [pc, #92]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	f043 0302 	orr.w	r3, r3, #2
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c0ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800c0ee:	4b13      	ldr	r3, [pc, #76]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c0f0:	2280      	movs	r2, #128	; 0x80
 800c0f2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800c0f4:	4b11      	ldr	r3, [pc, #68]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d009      	beq.n	800c114 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800c100:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	f043 0301 	orr.w	r3, r3, #1
 800c108:	4a0d      	ldr	r2, [pc, #52]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c10a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800c10c:	4b0b      	ldr	r3, [pc, #44]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c10e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c112:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c114:	4b09      	ldr	r3, [pc, #36]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	f003 0302 	and.w	r3, r3, #2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d008      	beq.n	800c132 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c120:	4b07      	ldr	r3, [pc, #28]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	f043 0320 	orr.w	r3, r3, #32
 800c128:	4a05      	ldr	r2, [pc, #20]	; (800c140 <FLASH_SetErrorCode+0xc8>)
 800c12a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800c12c:	4b03      	ldr	r3, [pc, #12]	; (800c13c <FLASH_SetErrorCode+0xc4>)
 800c12e:	2202      	movs	r2, #2
 800c130:	60da      	str	r2, [r3, #12]
  }
}
 800c132:	bf00      	nop
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	40023c00 	.word	0x40023c00
 800c140:	200010b0 	.word	0x200010b0

0800c144 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800c150:	2300      	movs	r3, #0
 800c152:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d102      	bne.n	800c160 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	60fb      	str	r3, [r7, #12]
 800c15e:	e010      	b.n	800c182 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d103      	bne.n	800c16e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	e009      	b.n	800c182 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d103      	bne.n	800c17c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c174:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c178:	60fb      	str	r3, [r7, #12]
 800c17a:	e002      	b.n	800c182 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c17c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c180:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c182:	4b13      	ldr	r3, [pc, #76]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	4a12      	ldr	r2, [pc, #72]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c18c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800c18e:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c190:	691a      	ldr	r2, [r3, #16]
 800c192:	490f      	ldr	r1, [pc, #60]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4313      	orrs	r3, r2
 800c198:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c19a:	4b0d      	ldr	r3, [pc, #52]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	4a0c      	ldr	r2, [pc, #48]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c1a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c1a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c1a8:	691a      	ldr	r2, [r3, #16]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	4a07      	ldr	r2, [pc, #28]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c1b2:	f043 0302 	orr.w	r3, r3, #2
 800c1b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	4a04      	ldr	r2, [pc, #16]	; (800c1d0 <FLASH_Erase_Sector+0x8c>)
 800c1be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1c2:	6113      	str	r3, [r2, #16]
}
 800c1c4:	bf00      	nop
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr
 800c1d0:	40023c00 	.word	0x40023c00

0800c1d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b089      	sub	sp, #36	; 0x24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	61fb      	str	r3, [r7, #28]
 800c1ee:	e159      	b.n	800c4a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	4013      	ands	r3, r2
 800c202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	429a      	cmp	r2, r3
 800c20a:	f040 8148 	bne.w	800c49e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f003 0303 	and.w	r3, r3, #3
 800c216:	2b01      	cmp	r3, #1
 800c218:	d005      	beq.n	800c226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c222:	2b02      	cmp	r3, #2
 800c224:	d130      	bne.n	800c288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	2203      	movs	r2, #3
 800c232:	fa02 f303 	lsl.w	r3, r2, r3
 800c236:	43db      	mvns	r3, r3
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	4013      	ands	r3, r2
 800c23c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	fa02 f303 	lsl.w	r3, r2, r3
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	69ba      	ldr	r2, [r7, #24]
 800c254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c25c:	2201      	movs	r2, #1
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	fa02 f303 	lsl.w	r3, r2, r3
 800c264:	43db      	mvns	r3, r3
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	4013      	ands	r3, r2
 800c26a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	091b      	lsrs	r3, r3, #4
 800c272:	f003 0201 	and.w	r2, r3, #1
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	fa02 f303 	lsl.w	r3, r2, r3
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	4313      	orrs	r3, r2
 800c280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	f003 0303 	and.w	r3, r3, #3
 800c290:	2b03      	cmp	r3, #3
 800c292:	d017      	beq.n	800c2c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	2203      	movs	r2, #3
 800c2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a4:	43db      	mvns	r3, r3
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b8:	69ba      	ldr	r2, [r7, #24]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d123      	bne.n	800c318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	08da      	lsrs	r2, r3, #3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3208      	adds	r2, #8
 800c2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	f003 0307 	and.w	r3, r3, #7
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	220f      	movs	r2, #15
 800c2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ec:	43db      	mvns	r3, r3
 800c2ee:	69ba      	ldr	r2, [r7, #24]
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	691a      	ldr	r2, [r3, #16]
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	fa02 f303 	lsl.w	r3, r2, r3
 800c304:	69ba      	ldr	r2, [r7, #24]
 800c306:	4313      	orrs	r3, r2
 800c308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	08da      	lsrs	r2, r3, #3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3208      	adds	r2, #8
 800c312:	69b9      	ldr	r1, [r7, #24]
 800c314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	2203      	movs	r2, #3
 800c324:	fa02 f303 	lsl.w	r3, r2, r3
 800c328:	43db      	mvns	r3, r3
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	4013      	ands	r3, r2
 800c32e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f003 0203 	and.w	r2, r3, #3
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	005b      	lsls	r3, r3, #1
 800c33c:	fa02 f303 	lsl.w	r3, r2, r3
 800c340:	69ba      	ldr	r2, [r7, #24]
 800c342:	4313      	orrs	r3, r2
 800c344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	69ba      	ldr	r2, [r7, #24]
 800c34a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 80a2 	beq.w	800c49e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	4b57      	ldr	r3, [pc, #348]	; (800c4bc <HAL_GPIO_Init+0x2e8>)
 800c360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c362:	4a56      	ldr	r2, [pc, #344]	; (800c4bc <HAL_GPIO_Init+0x2e8>)
 800c364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c368:	6453      	str	r3, [r2, #68]	; 0x44
 800c36a:	4b54      	ldr	r3, [pc, #336]	; (800c4bc <HAL_GPIO_Init+0x2e8>)
 800c36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c36e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c376:	4a52      	ldr	r2, [pc, #328]	; (800c4c0 <HAL_GPIO_Init+0x2ec>)
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	089b      	lsrs	r3, r3, #2
 800c37c:	3302      	adds	r3, #2
 800c37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f003 0303 	and.w	r3, r3, #3
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	220f      	movs	r2, #15
 800c38e:	fa02 f303 	lsl.w	r3, r2, r3
 800c392:	43db      	mvns	r3, r3
 800c394:	69ba      	ldr	r2, [r7, #24]
 800c396:	4013      	ands	r3, r2
 800c398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a49      	ldr	r2, [pc, #292]	; (800c4c4 <HAL_GPIO_Init+0x2f0>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d019      	beq.n	800c3d6 <HAL_GPIO_Init+0x202>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a48      	ldr	r2, [pc, #288]	; (800c4c8 <HAL_GPIO_Init+0x2f4>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d013      	beq.n	800c3d2 <HAL_GPIO_Init+0x1fe>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4a47      	ldr	r2, [pc, #284]	; (800c4cc <HAL_GPIO_Init+0x2f8>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d00d      	beq.n	800c3ce <HAL_GPIO_Init+0x1fa>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a46      	ldr	r2, [pc, #280]	; (800c4d0 <HAL_GPIO_Init+0x2fc>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d007      	beq.n	800c3ca <HAL_GPIO_Init+0x1f6>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a45      	ldr	r2, [pc, #276]	; (800c4d4 <HAL_GPIO_Init+0x300>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d101      	bne.n	800c3c6 <HAL_GPIO_Init+0x1f2>
 800c3c2:	2304      	movs	r3, #4
 800c3c4:	e008      	b.n	800c3d8 <HAL_GPIO_Init+0x204>
 800c3c6:	2307      	movs	r3, #7
 800c3c8:	e006      	b.n	800c3d8 <HAL_GPIO_Init+0x204>
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e004      	b.n	800c3d8 <HAL_GPIO_Init+0x204>
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e002      	b.n	800c3d8 <HAL_GPIO_Init+0x204>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <HAL_GPIO_Init+0x204>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	69fa      	ldr	r2, [r7, #28]
 800c3da:	f002 0203 	and.w	r2, r2, #3
 800c3de:	0092      	lsls	r2, r2, #2
 800c3e0:	4093      	lsls	r3, r2
 800c3e2:	69ba      	ldr	r2, [r7, #24]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c3e8:	4935      	ldr	r1, [pc, #212]	; (800c4c0 <HAL_GPIO_Init+0x2ec>)
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	089b      	lsrs	r3, r3, #2
 800c3ee:	3302      	adds	r3, #2
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c3f6:	4b38      	ldr	r3, [pc, #224]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	43db      	mvns	r3, r3
 800c400:	69ba      	ldr	r2, [r7, #24]
 800c402:	4013      	ands	r3, r2
 800c404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	4313      	orrs	r3, r2
 800c418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c41a:	4a2f      	ldr	r2, [pc, #188]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c420:	4b2d      	ldr	r3, [pc, #180]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	43db      	mvns	r3, r3
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	4013      	ands	r3, r2
 800c42e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c43c:	69ba      	ldr	r2, [r7, #24]
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	4313      	orrs	r3, r2
 800c442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c444:	4a24      	ldr	r2, [pc, #144]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c44a:	4b23      	ldr	r3, [pc, #140]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	43db      	mvns	r3, r3
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	4013      	ands	r3, r2
 800c458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c46e:	4a1a      	ldr	r2, [pc, #104]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c474:	4b18      	ldr	r3, [pc, #96]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	43db      	mvns	r3, r3
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	4013      	ands	r3, r2
 800c482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c490:	69ba      	ldr	r2, [r7, #24]
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	4313      	orrs	r3, r2
 800c496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c498:	4a0f      	ldr	r2, [pc, #60]	; (800c4d8 <HAL_GPIO_Init+0x304>)
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	61fb      	str	r3, [r7, #28]
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	f67f aea2 	bls.w	800c1f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c4ac:	bf00      	nop
 800c4ae:	bf00      	nop
 800c4b0:	3724      	adds	r7, #36	; 0x24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	40023800 	.word	0x40023800
 800c4c0:	40013800 	.word	0x40013800
 800c4c4:	40020000 	.word	0x40020000
 800c4c8:	40020400 	.word	0x40020400
 800c4cc:	40020800 	.word	0x40020800
 800c4d0:	40020c00 	.word	0x40020c00
 800c4d4:	40021000 	.word	0x40021000
 800c4d8:	40013c00 	.word	0x40013c00

0800c4dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	e0bb      	b.n	800c670 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c500:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	4013      	ands	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	429a      	cmp	r2, r3
 800c510:	f040 80ab 	bne.w	800c66a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c514:	4a5c      	ldr	r2, [pc, #368]	; (800c688 <HAL_GPIO_DeInit+0x1ac>)
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	089b      	lsrs	r3, r3, #2
 800c51a:	3302      	adds	r3, #2
 800c51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c520:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	220f      	movs	r2, #15
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	4013      	ands	r3, r2
 800c534:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a54      	ldr	r2, [pc, #336]	; (800c68c <HAL_GPIO_DeInit+0x1b0>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d019      	beq.n	800c572 <HAL_GPIO_DeInit+0x96>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a53      	ldr	r2, [pc, #332]	; (800c690 <HAL_GPIO_DeInit+0x1b4>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d013      	beq.n	800c56e <HAL_GPIO_DeInit+0x92>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a52      	ldr	r2, [pc, #328]	; (800c694 <HAL_GPIO_DeInit+0x1b8>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00d      	beq.n	800c56a <HAL_GPIO_DeInit+0x8e>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a51      	ldr	r2, [pc, #324]	; (800c698 <HAL_GPIO_DeInit+0x1bc>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d007      	beq.n	800c566 <HAL_GPIO_DeInit+0x8a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a50      	ldr	r2, [pc, #320]	; (800c69c <HAL_GPIO_DeInit+0x1c0>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d101      	bne.n	800c562 <HAL_GPIO_DeInit+0x86>
 800c55e:	2304      	movs	r3, #4
 800c560:	e008      	b.n	800c574 <HAL_GPIO_DeInit+0x98>
 800c562:	2307      	movs	r3, #7
 800c564:	e006      	b.n	800c574 <HAL_GPIO_DeInit+0x98>
 800c566:	2303      	movs	r3, #3
 800c568:	e004      	b.n	800c574 <HAL_GPIO_DeInit+0x98>
 800c56a:	2302      	movs	r3, #2
 800c56c:	e002      	b.n	800c574 <HAL_GPIO_DeInit+0x98>
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <HAL_GPIO_DeInit+0x98>
 800c572:	2300      	movs	r3, #0
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	f002 0203 	and.w	r2, r2, #3
 800c57a:	0092      	lsls	r2, r2, #2
 800c57c:	4093      	lsls	r3, r2
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	429a      	cmp	r2, r3
 800c582:	d132      	bne.n	800c5ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c584:	4b46      	ldr	r3, [pc, #280]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	43db      	mvns	r3, r3
 800c58c:	4944      	ldr	r1, [pc, #272]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c58e:	4013      	ands	r3, r2
 800c590:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c592:	4b43      	ldr	r3, [pc, #268]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	43db      	mvns	r3, r3
 800c59a:	4941      	ldr	r1, [pc, #260]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c5a0:	4b3f      	ldr	r3, [pc, #252]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	43db      	mvns	r3, r3
 800c5a8:	493d      	ldr	r1, [pc, #244]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c5ae:	4b3c      	ldr	r3, [pc, #240]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c5b0:	689a      	ldr	r2, [r3, #8]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	43db      	mvns	r3, r3
 800c5b6:	493a      	ldr	r1, [pc, #232]	; (800c6a0 <HAL_GPIO_DeInit+0x1c4>)
 800c5b8:	4013      	ands	r3, r2
 800c5ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	220f      	movs	r2, #15
 800c5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c5cc:	4a2e      	ldr	r2, [pc, #184]	; (800c688 <HAL_GPIO_DeInit+0x1ac>)
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	089b      	lsrs	r3, r3, #2
 800c5d2:	3302      	adds	r3, #2
 800c5d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	43da      	mvns	r2, r3
 800c5dc:	482a      	ldr	r0, [pc, #168]	; (800c688 <HAL_GPIO_DeInit+0x1ac>)
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	089b      	lsrs	r3, r3, #2
 800c5e2:	400a      	ands	r2, r1
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	2103      	movs	r1, #3
 800c5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5f8:	43db      	mvns	r3, r3
 800c5fa:	401a      	ands	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	08da      	lsrs	r2, r3, #3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3208      	adds	r2, #8
 800c608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	f003 0307 	and.w	r3, r3, #7
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	220f      	movs	r2, #15
 800c616:	fa02 f303 	lsl.w	r3, r2, r3
 800c61a:	43db      	mvns	r3, r3
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	08d2      	lsrs	r2, r2, #3
 800c620:	4019      	ands	r1, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3208      	adds	r2, #8
 800c626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	68da      	ldr	r2, [r3, #12]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	005b      	lsls	r3, r3, #1
 800c632:	2103      	movs	r1, #3
 800c634:	fa01 f303 	lsl.w	r3, r1, r3
 800c638:	43db      	mvns	r3, r3
 800c63a:	401a      	ands	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685a      	ldr	r2, [r3, #4]
 800c644:	2101      	movs	r1, #1
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	fa01 f303 	lsl.w	r3, r1, r3
 800c64c:	43db      	mvns	r3, r3
 800c64e:	401a      	ands	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	2103      	movs	r1, #3
 800c65e:	fa01 f303 	lsl.w	r3, r1, r3
 800c662:	43db      	mvns	r3, r3
 800c664:	401a      	ands	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	3301      	adds	r3, #1
 800c66e:	617b      	str	r3, [r7, #20]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2b0f      	cmp	r3, #15
 800c674:	f67f af40 	bls.w	800c4f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c678:	bf00      	nop
 800c67a:	bf00      	nop
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	40013800 	.word	0x40013800
 800c68c:	40020000 	.word	0x40020000
 800c690:	40020400 	.word	0x40020400
 800c694:	40020800 	.word	0x40020800
 800c698:	40020c00 	.word	0x40020c00
 800c69c:	40021000 	.word	0x40021000
 800c6a0:	40013c00 	.word	0x40013c00

0800c6a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	691a      	ldr	r2, [r3, #16]
 800c6b4:	887b      	ldrh	r3, [r7, #2]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	73fb      	strb	r3, [r7, #15]
 800c6c0:	e001      	b.n	800c6c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	807b      	strh	r3, [r7, #2]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c6e4:	787b      	ldrb	r3, [r7, #1]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c6ea:	887a      	ldrh	r2, [r7, #2]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c6f0:	e003      	b.n	800c6fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c6f2:	887b      	ldrh	r3, [r7, #2]
 800c6f4:	041a      	lsls	r2, r3, #16
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	619a      	str	r2, [r3, #24]
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
	...

0800c708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	e12b      	b.n	800c972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7fb fd12 	bl	8008158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2224      	movs	r2, #36	; 0x24
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 0201 	bic.w	r2, r2, #1
 800c74a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c75a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c76a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c76c:	f002 fe38 	bl	800f3e0 <HAL_RCC_GetPCLK1Freq>
 800c770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	4a81      	ldr	r2, [pc, #516]	; (800c97c <HAL_I2C_Init+0x274>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d807      	bhi.n	800c78c <HAL_I2C_Init+0x84>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4a80      	ldr	r2, [pc, #512]	; (800c980 <HAL_I2C_Init+0x278>)
 800c780:	4293      	cmp	r3, r2
 800c782:	bf94      	ite	ls
 800c784:	2301      	movls	r3, #1
 800c786:	2300      	movhi	r3, #0
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	e006      	b.n	800c79a <HAL_I2C_Init+0x92>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4a7d      	ldr	r2, [pc, #500]	; (800c984 <HAL_I2C_Init+0x27c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	bf94      	ite	ls
 800c794:	2301      	movls	r3, #1
 800c796:	2300      	movhi	r3, #0
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e0e7      	b.n	800c972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	4a78      	ldr	r2, [pc, #480]	; (800c988 <HAL_I2C_Init+0x280>)
 800c7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7aa:	0c9b      	lsrs	r3, r3, #18
 800c7ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6a1b      	ldr	r3, [r3, #32]
 800c7c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a6a      	ldr	r2, [pc, #424]	; (800c97c <HAL_I2C_Init+0x274>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d802      	bhi.n	800c7dc <HAL_I2C_Init+0xd4>
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	e009      	b.n	800c7f0 <HAL_I2C_Init+0xe8>
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
 800c7e6:	4a69      	ldr	r2, [pc, #420]	; (800c98c <HAL_I2C_Init+0x284>)
 800c7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ec:	099b      	lsrs	r3, r3, #6
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	430b      	orrs	r3, r1
 800c7f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	69db      	ldr	r3, [r3, #28]
 800c7fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	495c      	ldr	r1, [pc, #368]	; (800c97c <HAL_I2C_Init+0x274>)
 800c80c:	428b      	cmp	r3, r1
 800c80e:	d819      	bhi.n	800c844 <HAL_I2C_Init+0x13c>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	1e59      	subs	r1, r3, #1
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c81e:	1c59      	adds	r1, r3, #1
 800c820:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c824:	400b      	ands	r3, r1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00a      	beq.n	800c840 <HAL_I2C_Init+0x138>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	1e59      	subs	r1, r3, #1
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	fbb1 f3f3 	udiv	r3, r1, r3
 800c838:	3301      	adds	r3, #1
 800c83a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c83e:	e051      	b.n	800c8e4 <HAL_I2C_Init+0x1dc>
 800c840:	2304      	movs	r3, #4
 800c842:	e04f      	b.n	800c8e4 <HAL_I2C_Init+0x1dc>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d111      	bne.n	800c870 <HAL_I2C_Init+0x168>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	1e58      	subs	r0, r3, #1
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6859      	ldr	r1, [r3, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	440b      	add	r3, r1
 800c85a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c85e:	3301      	adds	r3, #1
 800c860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c864:	2b00      	cmp	r3, #0
 800c866:	bf0c      	ite	eq
 800c868:	2301      	moveq	r3, #1
 800c86a:	2300      	movne	r3, #0
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	e012      	b.n	800c896 <HAL_I2C_Init+0x18e>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	1e58      	subs	r0, r3, #1
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6859      	ldr	r1, [r3, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	440b      	add	r3, r1
 800c87e:	0099      	lsls	r1, r3, #2
 800c880:	440b      	add	r3, r1
 800c882:	fbb0 f3f3 	udiv	r3, r0, r3
 800c886:	3301      	adds	r3, #1
 800c888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bf0c      	ite	eq
 800c890:	2301      	moveq	r3, #1
 800c892:	2300      	movne	r3, #0
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <HAL_I2C_Init+0x196>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e022      	b.n	800c8e4 <HAL_I2C_Init+0x1dc>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10e      	bne.n	800c8c4 <HAL_I2C_Init+0x1bc>
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	1e58      	subs	r0, r3, #1
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6859      	ldr	r1, [r3, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	440b      	add	r3, r1
 800c8b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8c2:	e00f      	b.n	800c8e4 <HAL_I2C_Init+0x1dc>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	1e58      	subs	r0, r3, #1
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6859      	ldr	r1, [r3, #4]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	0099      	lsls	r1, r3, #2
 800c8d4:	440b      	add	r3, r1
 800c8d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800c8da:	3301      	adds	r3, #1
 800c8dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	6809      	ldr	r1, [r1, #0]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	69da      	ldr	r2, [r3, #28]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	431a      	orrs	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	430a      	orrs	r2, r1
 800c906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	6911      	ldr	r1, [r2, #16]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	68d2      	ldr	r2, [r2, #12]
 800c91e:	4311      	orrs	r1, r2
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	6812      	ldr	r2, [r2, #0]
 800c924:	430b      	orrs	r3, r1
 800c926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	695a      	ldr	r2, [r3, #20]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	699b      	ldr	r3, [r3, #24]
 800c93a:	431a      	orrs	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	430a      	orrs	r2, r1
 800c942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2220      	movs	r2, #32
 800c95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	000186a0 	.word	0x000186a0
 800c980:	001e847f 	.word	0x001e847f
 800c984:	003d08ff 	.word	0x003d08ff
 800c988:	431bde83 	.word	0x431bde83
 800c98c:	10624dd3 	.word	0x10624dd3

0800c990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b088      	sub	sp, #32
 800c994:	af02      	add	r7, sp, #8
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	4608      	mov	r0, r1
 800c99a:	4611      	mov	r1, r2
 800c99c:	461a      	mov	r2, r3
 800c99e:	4603      	mov	r3, r0
 800c9a0:	817b      	strh	r3, [r7, #10]
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	813b      	strh	r3, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c9aa:	f7fe fbc3 	bl	800b134 <HAL_GetTick>
 800c9ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	f040 80d9 	bne.w	800cb70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	2319      	movs	r3, #25
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	496d      	ldr	r1, [pc, #436]	; (800cb7c <HAL_I2C_Mem_Write+0x1ec>)
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 fc7f 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e0cc      	b.n	800cb72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d101      	bne.n	800c9e6 <HAL_I2C_Mem_Write+0x56>
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	e0c5      	b.n	800cb72 <HAL_I2C_Mem_Write+0x1e2>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d007      	beq.n	800ca0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f042 0201 	orr.w	r2, r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2221      	movs	r2, #33	; 0x21
 800ca20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2240      	movs	r2, #64	; 0x40
 800ca28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6a3a      	ldr	r2, [r7, #32]
 800ca36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4a4d      	ldr	r2, [pc, #308]	; (800cb80 <HAL_I2C_Mem_Write+0x1f0>)
 800ca4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ca4e:	88f8      	ldrh	r0, [r7, #6]
 800ca50:	893a      	ldrh	r2, [r7, #8]
 800ca52:	8979      	ldrh	r1, [r7, #10]
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f000 fab6 	bl	800cfd0 <I2C_RequestMemoryWrite>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d052      	beq.n	800cb10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e081      	b.n	800cb72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 fd00 	bl	800d478 <I2C_WaitOnTXEFlagUntilTimeout>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00d      	beq.n	800ca9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca82:	2b04      	cmp	r3, #4
 800ca84:	d107      	bne.n	800ca96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e06b      	b.n	800cb72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9e:	781a      	ldrb	r2, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cab4:	3b01      	subs	r3, #1
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	f003 0304 	and.w	r3, r3, #4
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d11b      	bne.n	800cb10 <HAL_I2C_Mem_Write+0x180>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d017      	beq.n	800cb10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae4:	781a      	ldrb	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf0:	1c5a      	adds	r2, r3, #1
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cafa:	3b01      	subs	r3, #1
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1aa      	bne.n	800ca6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb18:	697a      	ldr	r2, [r7, #20]
 800cb1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f000 fcec 	bl	800d4fa <I2C_WaitOnBTFFlagUntilTimeout>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00d      	beq.n	800cb44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d107      	bne.n	800cb40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	e016      	b.n	800cb72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2220      	movs	r2, #32
 800cb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	e000      	b.n	800cb72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cb70:	2302      	movs	r3, #2
  }
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	00100002 	.word	0x00100002
 800cb80:	ffff0000 	.word	0xffff0000

0800cb84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08c      	sub	sp, #48	; 0x30
 800cb88:	af02      	add	r7, sp, #8
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	4611      	mov	r1, r2
 800cb90:	461a      	mov	r2, r3
 800cb92:	4603      	mov	r3, r0
 800cb94:	817b      	strh	r3, [r7, #10]
 800cb96:	460b      	mov	r3, r1
 800cb98:	813b      	strh	r3, [r7, #8]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb9e:	f7fe fac9 	bl	800b134 <HAL_GetTick>
 800cba2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b20      	cmp	r3, #32
 800cbae:	f040 8208 	bne.w	800cfc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	2319      	movs	r3, #25
 800cbb8:	2201      	movs	r2, #1
 800cbba:	497b      	ldr	r1, [pc, #492]	; (800cda8 <HAL_I2C_Mem_Read+0x224>)
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 fb85 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	e1fb      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d101      	bne.n	800cbda <HAL_I2C_Mem_Read+0x56>
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	e1f4      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2201      	movs	r2, #1
 800cbde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d007      	beq.n	800cc00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f042 0201 	orr.w	r2, r2, #1
 800cbfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2222      	movs	r2, #34	; 0x22
 800cc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2240      	movs	r2, #64	; 0x40
 800cc1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cc30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4a5b      	ldr	r2, [pc, #364]	; (800cdac <HAL_I2C_Mem_Read+0x228>)
 800cc40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cc42:	88f8      	ldrh	r0, [r7, #6]
 800cc44:	893a      	ldrh	r2, [r7, #8]
 800cc46:	8979      	ldrh	r1, [r7, #10]
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	4603      	mov	r3, r0
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f000 fa52 	bl	800d0fc <I2C_RequestMemoryRead>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e1b0      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d113      	bne.n	800cc92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	623b      	str	r3, [r7, #32]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	623b      	str	r3, [r7, #32]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	623b      	str	r3, [r7, #32]
 800cc7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	e184      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d11b      	bne.n	800ccd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61fb      	str	r3, [r7, #28]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	61fb      	str	r3, [r7, #28]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	61fb      	str	r3, [r7, #28]
 800ccbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	e164      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d11b      	bne.n	800cd12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cce8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61bb      	str	r3, [r7, #24]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	61bb      	str	r3, [r7, #24]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	61bb      	str	r3, [r7, #24]
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	e144      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd12:	2300      	movs	r3, #0
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cd28:	e138      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	f200 80f1 	bhi.w	800cf16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d123      	bne.n	800cd84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 fc1b 	bl	800d57c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e139      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	691a      	ldr	r2, [r3, #16]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5a:	b2d2      	uxtb	r2, r2
 800cd5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd82:	e10b      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d14e      	bne.n	800ce2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	2200      	movs	r2, #0
 800cd94:	4906      	ldr	r1, [pc, #24]	; (800cdb0 <HAL_I2C_Mem_Read+0x22c>)
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 fa98 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d008      	beq.n	800cdb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e10e      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
 800cda6:	bf00      	nop
 800cda8:	00100002 	.word	0x00100002
 800cdac:	ffff0000 	.word	0xffff0000
 800cdb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	691a      	ldr	r2, [r3, #16]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdce:	b2d2      	uxtb	r2, r2
 800cdd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd6:	1c5a      	adds	r2, r3, #1
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cde0:	3b01      	subs	r3, #1
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	691a      	ldr	r2, [r3, #16]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	b2d2      	uxtb	r2, r2
 800ce02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce12:	3b01      	subs	r3, #1
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	3b01      	subs	r3, #1
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce28:	e0b8      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	2200      	movs	r2, #0
 800ce32:	4966      	ldr	r1, [pc, #408]	; (800cfcc <HAL_I2C_Mem_Read+0x448>)
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f000 fa49 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e0bf      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	691a      	ldr	r2, [r3, #16]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce70:	3b01      	subs	r3, #1
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	494f      	ldr	r1, [pc, #316]	; (800cfcc <HAL_I2C_Mem_Read+0x448>)
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f000 fa1b 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e091      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ceae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	691a      	ldr	r2, [r3, #16]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceba:	b2d2      	uxtb	r2, r2
 800cebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	1c5a      	adds	r2, r3, #1
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cecc:	3b01      	subs	r3, #1
 800cece:	b29a      	uxth	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	3b01      	subs	r3, #1
 800cedc:	b29a      	uxth	r2, r3
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	691a      	ldr	r2, [r3, #16]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceec:	b2d2      	uxtb	r2, r2
 800ceee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	1c5a      	adds	r2, r3, #1
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cefe:	3b01      	subs	r3, #1
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf14:	e042      	b.n	800cf9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 fb2e 	bl	800d57c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e04c      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	691a      	ldr	r2, [r3, #16]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf34:	b2d2      	uxtb	r2, r2
 800cf36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf46:	3b01      	subs	r3, #1
 800cf48:	b29a      	uxth	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	3b01      	subs	r3, #1
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	f003 0304 	and.w	r3, r3, #4
 800cf66:	2b04      	cmp	r3, #4
 800cf68:	d118      	bne.n	800cf9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	691a      	ldr	r2, [r3, #16]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	b2d2      	uxtb	r2, r2
 800cf76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7c:	1c5a      	adds	r2, r3, #1
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf86:	3b01      	subs	r3, #1
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	3b01      	subs	r3, #1
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f47f aec2 	bne.w	800cd2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2220      	movs	r2, #32
 800cfaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e000      	b.n	800cfc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cfc2:	2302      	movs	r3, #2
  }
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3728      	adds	r7, #40	; 0x28
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	00010004 	.word	0x00010004

0800cfd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	4608      	mov	r0, r1
 800cfda:	4611      	mov	r1, r2
 800cfdc:	461a      	mov	r2, r3
 800cfde:	4603      	mov	r3, r0
 800cfe0:	817b      	strh	r3, [r7, #10]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	813b      	strh	r3, [r7, #8]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	2200      	movs	r2, #0
 800d002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f000 f960 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00d      	beq.n	800d02e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d01c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d020:	d103      	bne.n	800d02a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d028:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e05f      	b.n	800d0ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d02e:	897b      	ldrh	r3, [r7, #10]
 800d030:	b2db      	uxtb	r3, r3
 800d032:	461a      	mov	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d03c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	6a3a      	ldr	r2, [r7, #32]
 800d042:	492d      	ldr	r1, [pc, #180]	; (800d0f8 <I2C_RequestMemoryWrite+0x128>)
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f998 	bl	800d37a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	e04c      	b.n	800d0ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d054:	2300      	movs	r3, #0
 800d056:	617b      	str	r3, [r7, #20]
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d06c:	6a39      	ldr	r1, [r7, #32]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f000 fa02 	bl	800d478 <I2C_WaitOnTXEFlagUntilTimeout>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00d      	beq.n	800d096 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	2b04      	cmp	r3, #4
 800d080:	d107      	bne.n	800d092 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d090:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e02b      	b.n	800d0ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d096:	88fb      	ldrh	r3, [r7, #6]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d105      	bne.n	800d0a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d09c:	893b      	ldrh	r3, [r7, #8]
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	611a      	str	r2, [r3, #16]
 800d0a6:	e021      	b.n	800d0ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d0a8:	893b      	ldrh	r3, [r7, #8]
 800d0aa:	0a1b      	lsrs	r3, r3, #8
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b8:	6a39      	ldr	r1, [r7, #32]
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f000 f9dc 	bl	800d478 <I2C_WaitOnTXEFlagUntilTimeout>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00d      	beq.n	800d0e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	d107      	bne.n	800d0de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e005      	b.n	800d0ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d0e2:	893b      	ldrh	r3, [r7, #8]
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	00010002 	.word	0x00010002

0800d0fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b088      	sub	sp, #32
 800d100:	af02      	add	r7, sp, #8
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	4608      	mov	r0, r1
 800d106:	4611      	mov	r1, r2
 800d108:	461a      	mov	r2, r3
 800d10a:	4603      	mov	r3, r0
 800d10c:	817b      	strh	r3, [r7, #10]
 800d10e:	460b      	mov	r3, r1
 800d110:	813b      	strh	r3, [r7, #8]
 800d112:	4613      	mov	r3, r2
 800d114:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d124:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 f8c2 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00d      	beq.n	800d16a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d15c:	d103      	bne.n	800d166 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d166:	2303      	movs	r3, #3
 800d168:	e0aa      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d16a:	897b      	ldrh	r3, [r7, #10]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	461a      	mov	r2, r3
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	6a3a      	ldr	r2, [r7, #32]
 800d17e:	4952      	ldr	r1, [pc, #328]	; (800d2c8 <I2C_RequestMemoryRead+0x1cc>)
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 f8fa 	bl	800d37a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d001      	beq.n	800d190 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e097      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d190:	2300      	movs	r3, #0
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	695b      	ldr	r3, [r3, #20]
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	699b      	ldr	r3, [r3, #24]
 800d1a2:	617b      	str	r3, [r7, #20]
 800d1a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1a8:	6a39      	ldr	r1, [r7, #32]
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f000 f964 	bl	800d478 <I2C_WaitOnTXEFlagUntilTimeout>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00d      	beq.n	800d1d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d107      	bne.n	800d1ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e076      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d1d2:	88fb      	ldrh	r3, [r7, #6]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d105      	bne.n	800d1e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d1d8:	893b      	ldrh	r3, [r7, #8]
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	611a      	str	r2, [r3, #16]
 800d1e2:	e021      	b.n	800d228 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d1e4:	893b      	ldrh	r3, [r7, #8]
 800d1e6:	0a1b      	lsrs	r3, r3, #8
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f4:	6a39      	ldr	r1, [r7, #32]
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f000 f93e 	bl	800d478 <I2C_WaitOnTXEFlagUntilTimeout>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00d      	beq.n	800d21e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d206:	2b04      	cmp	r3, #4
 800d208:	d107      	bne.n	800d21a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	e050      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d21e:	893b      	ldrh	r3, [r7, #8]
 800d220:	b2da      	uxtb	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22a:	6a39      	ldr	r1, [r7, #32]
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 f923 	bl	800d478 <I2C_WaitOnTXEFlagUntilTimeout>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00d      	beq.n	800d254 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23c:	2b04      	cmp	r3, #4
 800d23e:	d107      	bne.n	800d250 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d24e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	e035      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d262:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f000 f82b 	bl	800d2cc <I2C_WaitOnFlagUntilTimeout>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00d      	beq.n	800d298 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d28a:	d103      	bne.n	800d294 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d292:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e013      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d298:	897b      	ldrh	r3, [r7, #10]
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	f043 0301 	orr.w	r3, r3, #1
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	6a3a      	ldr	r2, [r7, #32]
 800d2ac:	4906      	ldr	r1, [pc, #24]	; (800d2c8 <I2C_RequestMemoryRead+0x1cc>)
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 f863 	bl	800d37a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e000      	b.n	800d2c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	00010002 	.word	0x00010002

0800d2cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	603b      	str	r3, [r7, #0]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2dc:	e025      	b.n	800d32a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e4:	d021      	beq.n	800d32a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2e6:	f7fd ff25 	bl	800b134 <HAL_GetTick>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	683a      	ldr	r2, [r7, #0]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d302      	bcc.n	800d2fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d116      	bne.n	800d32a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2220      	movs	r2, #32
 800d306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d316:	f043 0220 	orr.w	r2, r3, #32
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e023      	b.n	800d372 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	0c1b      	lsrs	r3, r3, #16
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b01      	cmp	r3, #1
 800d332:	d10d      	bne.n	800d350 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	43da      	mvns	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	4013      	ands	r3, r2
 800d340:	b29b      	uxth	r3, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	bf0c      	ite	eq
 800d346:	2301      	moveq	r3, #1
 800d348:	2300      	movne	r3, #0
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	461a      	mov	r2, r3
 800d34e:	e00c      	b.n	800d36a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	43da      	mvns	r2, r3
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	4013      	ands	r3, r2
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bf0c      	ite	eq
 800d362:	2301      	moveq	r3, #1
 800d364:	2300      	movne	r3, #0
 800d366:	b2db      	uxtb	r3, r3
 800d368:	461a      	mov	r2, r3
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d0b6      	beq.n	800d2de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	607a      	str	r2, [r7, #4]
 800d386:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d388:	e051      	b.n	800d42e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d398:	d123      	bne.n	800d3e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d3b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2220      	movs	r2, #32
 800d3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ce:	f043 0204 	orr.w	r2, r3, #4
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e046      	b.n	800d470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e8:	d021      	beq.n	800d42e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3ea:	f7fd fea3 	bl	800b134 <HAL_GetTick>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d302      	bcc.n	800d400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d116      	bne.n	800d42e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2220      	movs	r2, #32
 800d40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	f043 0220 	orr.w	r2, r3, #32
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e020      	b.n	800d470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	0c1b      	lsrs	r3, r3, #16
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b01      	cmp	r3, #1
 800d436:	d10c      	bne.n	800d452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	43da      	mvns	r2, r3
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	4013      	ands	r3, r2
 800d444:	b29b      	uxth	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	bf14      	ite	ne
 800d44a:	2301      	movne	r3, #1
 800d44c:	2300      	moveq	r3, #0
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	e00b      	b.n	800d46a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	43da      	mvns	r2, r3
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	4013      	ands	r3, r2
 800d45e:	b29b      	uxth	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	bf14      	ite	ne
 800d464:	2301      	movne	r3, #1
 800d466:	2300      	moveq	r3, #0
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d18d      	bne.n	800d38a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d484:	e02d      	b.n	800d4e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f000 f8ce 	bl	800d628 <I2C_IsAcknowledgeFailed>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e02d      	b.n	800d4f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49c:	d021      	beq.n	800d4e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d49e:	f7fd fe49 	bl	800b134 <HAL_GetTick>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d302      	bcc.n	800d4b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d116      	bne.n	800d4e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ce:	f043 0220 	orr.w	r2, r3, #32
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e007      	b.n	800d4f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ec:	2b80      	cmp	r3, #128	; 0x80
 800d4ee:	d1ca      	bne.n	800d486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	60f8      	str	r0, [r7, #12]
 800d502:	60b9      	str	r1, [r7, #8]
 800d504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d506:	e02d      	b.n	800d564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f88d 	bl	800d628 <I2C_IsAcknowledgeFailed>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d001      	beq.n	800d518 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e02d      	b.n	800d574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d021      	beq.n	800d564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d520:	f7fd fe08 	bl	800b134 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d302      	bcc.n	800d536 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d116      	bne.n	800d564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2220      	movs	r2, #32
 800d540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d550:	f043 0220 	orr.w	r2, r3, #32
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e007      	b.n	800d574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	f003 0304 	and.w	r3, r3, #4
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d1ca      	bne.n	800d508 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d588:	e042      	b.n	800d610 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b10      	cmp	r3, #16
 800d596:	d119      	bne.n	800d5cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f06f 0210 	mvn.w	r2, #16
 800d5a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e029      	b.n	800d620 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5cc:	f7fd fdb2 	bl	800b134 <HAL_GetTick>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d302      	bcc.n	800d5e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d116      	bne.n	800d610 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2220      	movs	r2, #32
 800d5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fc:	f043 0220 	orr.w	r2, r3, #32
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	e007      	b.n	800d620 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61a:	2b40      	cmp	r3, #64	; 0x40
 800d61c:	d1b5      	bne.n	800d58a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d63a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d63e:	d11b      	bne.n	800d678 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d648:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2220      	movs	r2, #32
 800d654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d664:	f043 0204 	orr.w	r2, r3, #4
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	e000      	b.n	800d67a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d686:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d688:	b08f      	sub	sp, #60	; 0x3c
 800d68a:	af0a      	add	r7, sp, #40	; 0x28
 800d68c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e10f      	b.n	800d8b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f007 fda8 	bl	8015208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2203      	movs	r2, #3
 800d6bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d102      	bne.n	800d6d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f004 f877 	bl	80117ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	603b      	str	r3, [r7, #0]
 800d6e2:	687e      	ldr	r6, [r7, #4]
 800d6e4:	466d      	mov	r5, sp
 800d6e6:	f106 0410 	add.w	r4, r6, #16
 800d6ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d6f6:	e885 0003 	stmia.w	r5, {r0, r1}
 800d6fa:	1d33      	adds	r3, r6, #4
 800d6fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6fe:	6838      	ldr	r0, [r7, #0]
 800d700:	f003 ff4e 	bl	80115a0 <USB_CoreInit>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d005      	beq.n	800d716 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2202      	movs	r2, #2
 800d70e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e0d0      	b.n	800d8b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2100      	movs	r1, #0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f004 f865 	bl	80117ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d722:	2300      	movs	r3, #0
 800d724:	73fb      	strb	r3, [r7, #15]
 800d726:	e04a      	b.n	800d7be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d728:	7bfa      	ldrb	r2, [r7, #15]
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	4613      	mov	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	4413      	add	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	440b      	add	r3, r1
 800d736:	333d      	adds	r3, #61	; 0x3d
 800d738:	2201      	movs	r2, #1
 800d73a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d73c:	7bfa      	ldrb	r2, [r7, #15]
 800d73e:	6879      	ldr	r1, [r7, #4]
 800d740:	4613      	mov	r3, r2
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	4413      	add	r3, r2
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	440b      	add	r3, r1
 800d74a:	333c      	adds	r3, #60	; 0x3c
 800d74c:	7bfa      	ldrb	r2, [r7, #15]
 800d74e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d750:	7bfa      	ldrb	r2, [r7, #15]
 800d752:	7bfb      	ldrb	r3, [r7, #15]
 800d754:	b298      	uxth	r0, r3
 800d756:	6879      	ldr	r1, [r7, #4]
 800d758:	4613      	mov	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	4413      	add	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	440b      	add	r3, r1
 800d762:	3344      	adds	r3, #68	; 0x44
 800d764:	4602      	mov	r2, r0
 800d766:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d768:	7bfa      	ldrb	r2, [r7, #15]
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	4613      	mov	r3, r2
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	4413      	add	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	440b      	add	r3, r1
 800d776:	3340      	adds	r3, #64	; 0x40
 800d778:	2200      	movs	r2, #0
 800d77a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d77c:	7bfa      	ldrb	r2, [r7, #15]
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	4413      	add	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	440b      	add	r3, r1
 800d78a:	3348      	adds	r3, #72	; 0x48
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d790:	7bfa      	ldrb	r2, [r7, #15]
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	4613      	mov	r3, r2
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	4413      	add	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	440b      	add	r3, r1
 800d79e:	334c      	adds	r3, #76	; 0x4c
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d7a4:	7bfa      	ldrb	r2, [r7, #15]
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	4413      	add	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3354      	adds	r3, #84	; 0x54
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	73fb      	strb	r3, [r7, #15]
 800d7be:	7bfa      	ldrb	r2, [r7, #15]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d3af      	bcc.n	800d728 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	73fb      	strb	r3, [r7, #15]
 800d7cc:	e044      	b.n	800d858 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d7ce:	7bfa      	ldrb	r2, [r7, #15]
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	4413      	add	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	440b      	add	r3, r1
 800d7dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d7e4:	7bfa      	ldrb	r2, [r7, #15]
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	440b      	add	r3, r1
 800d7f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800d7f6:	7bfa      	ldrb	r2, [r7, #15]
 800d7f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d7fa:	7bfa      	ldrb	r2, [r7, #15]
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	00db      	lsls	r3, r3, #3
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d810:	7bfa      	ldrb	r2, [r7, #15]
 800d812:	6879      	ldr	r1, [r7, #4]
 800d814:	4613      	mov	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	4413      	add	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	440b      	add	r3, r1
 800d81e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d826:	7bfa      	ldrb	r2, [r7, #15]
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	4613      	mov	r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	4413      	add	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	440b      	add	r3, r1
 800d834:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d83c:	7bfa      	ldrb	r2, [r7, #15]
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	4613      	mov	r3, r2
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	4413      	add	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	440b      	add	r3, r1
 800d84a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d852:	7bfb      	ldrb	r3, [r7, #15]
 800d854:	3301      	adds	r3, #1
 800d856:	73fb      	strb	r3, [r7, #15]
 800d858:	7bfa      	ldrb	r2, [r7, #15]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d3b5      	bcc.n	800d7ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	603b      	str	r3, [r7, #0]
 800d868:	687e      	ldr	r6, [r7, #4]
 800d86a:	466d      	mov	r5, sp
 800d86c:	f106 0410 	add.w	r4, r6, #16
 800d870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d87c:	e885 0003 	stmia.w	r5, {r0, r1}
 800d880:	1d33      	adds	r3, r6, #4
 800d882:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d884:	6838      	ldr	r0, [r7, #0]
 800d886:	f003 fffd 	bl	8011884 <USB_DevInit>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d005      	beq.n	800d89c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d898:	2301      	movs	r3, #1
 800d89a:	e00d      	b.n	800d8b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f005 f94c 	bl	8012b4e <USB_DevDisconnect>

  return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <HAL_PCD_Start+0x1c>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e020      	b.n	800d91e <HAL_PCD_Start+0x5e>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d109      	bne.n	800d900 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d005      	beq.n	800d900 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f003 ff4f 	bl	80117a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4618      	mov	r0, r3
 800d910:	f005 f8fc 	bl	8012b0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d926:	b590      	push	{r4, r7, lr}
 800d928:	b08d      	sub	sp, #52	; 0x34
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f005 f9ba 	bl	8012cb6 <USB_GetMode>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	f040 848a 	bne.w	800e25e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4618      	mov	r0, r3
 800d950:	f005 f91e 	bl	8012b90 <USB_ReadInterrupts>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8480 	beq.w	800e25c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	0a1b      	lsrs	r3, r3, #8
 800d966:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4618      	mov	r0, r3
 800d976:	f005 f90b 	bl	8012b90 <USB_ReadInterrupts>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	2b02      	cmp	r3, #2
 800d982:	d107      	bne.n	800d994 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	695a      	ldr	r2, [r3, #20]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f002 0202 	and.w	r2, r2, #2
 800d992:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4618      	mov	r0, r3
 800d99a:	f005 f8f9 	bl	8012b90 <USB_ReadInterrupts>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	f003 0310 	and.w	r3, r3, #16
 800d9a4:	2b10      	cmp	r3, #16
 800d9a6:	d161      	bne.n	800da6c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	699a      	ldr	r2, [r3, #24]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f022 0210 	bic.w	r2, r2, #16
 800d9b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d9b8:	6a3b      	ldr	r3, [r7, #32]
 800d9ba:	6a1b      	ldr	r3, [r3, #32]
 800d9bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	f003 020f 	and.w	r2, r3, #15
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	4413      	add	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	0c5b      	lsrs	r3, r3, #17
 800d9dc:	f003 030f 	and.w	r3, r3, #15
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d124      	bne.n	800da2e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d035      	beq.n	800da5c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	091b      	lsrs	r3, r3, #4
 800d9f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d9fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	461a      	mov	r2, r3
 800da02:	6a38      	ldr	r0, [r7, #32]
 800da04:	f004 ff30 	bl	8012868 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	691a      	ldr	r2, [r3, #16]
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	091b      	lsrs	r3, r3, #4
 800da10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da14:	441a      	add	r2, r3
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	6a1a      	ldr	r2, [r3, #32]
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	091b      	lsrs	r3, r3, #4
 800da22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da26:	441a      	add	r2, r3
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	621a      	str	r2, [r3, #32]
 800da2c:	e016      	b.n	800da5c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	0c5b      	lsrs	r3, r3, #17
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	2b06      	cmp	r3, #6
 800da38:	d110      	bne.n	800da5c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800da40:	2208      	movs	r2, #8
 800da42:	4619      	mov	r1, r3
 800da44:	6a38      	ldr	r0, [r7, #32]
 800da46:	f004 ff0f 	bl	8012868 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	6a1a      	ldr	r2, [r3, #32]
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	091b      	lsrs	r3, r3, #4
 800da52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da56:	441a      	add	r2, r3
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	699a      	ldr	r2, [r3, #24]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f042 0210 	orr.w	r2, r2, #16
 800da6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4618      	mov	r0, r3
 800da72:	f005 f88d 	bl	8012b90 <USB_ReadInterrupts>
 800da76:	4603      	mov	r3, r0
 800da78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da80:	f040 80a7 	bne.w	800dbd2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800da84:	2300      	movs	r3, #0
 800da86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4618      	mov	r0, r3
 800da8e:	f005 f892 	bl	8012bb6 <USB_ReadDevAllOutEpInterrupt>
 800da92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800da94:	e099      	b.n	800dbca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800da96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f000 808e 	beq.w	800dbbe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daa8:	b2d2      	uxtb	r2, r2
 800daaa:	4611      	mov	r1, r2
 800daac:	4618      	mov	r0, r3
 800daae:	f005 f8b6 	bl	8012c1e <USB_ReadDevOutEPInterrupt>
 800dab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00c      	beq.n	800dad8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	015a      	lsls	r2, r3, #5
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	4413      	add	r3, r2
 800dac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daca:	461a      	mov	r2, r3
 800dacc:	2301      	movs	r3, #1
 800dace:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800dad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fec2 	bl	800e85c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	f003 0308 	and.w	r3, r3, #8
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00c      	beq.n	800dafc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800dae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae4:	015a      	lsls	r2, r3, #5
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	4413      	add	r3, r2
 800daea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daee:	461a      	mov	r2, r3
 800daf0:	2308      	movs	r3, #8
 800daf2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800daf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 ff98 	bl	800ea2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	f003 0310 	and.w	r3, r3, #16
 800db02:	2b00      	cmp	r3, #0
 800db04:	d008      	beq.n	800db18 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db08:	015a      	lsls	r2, r3, #5
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	4413      	add	r3, r2
 800db0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db12:	461a      	mov	r2, r3
 800db14:	2310      	movs	r3, #16
 800db16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	f003 0302 	and.w	r3, r3, #2
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d030      	beq.n	800db84 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db2a:	2b80      	cmp	r3, #128	; 0x80
 800db2c:	d109      	bne.n	800db42 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	69fa      	ldr	r2, [r7, #28]
 800db38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db40:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800db42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db44:	4613      	mov	r3, r2
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	4413      	add	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	4413      	add	r3, r2
 800db54:	3304      	adds	r3, #4
 800db56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	78db      	ldrb	r3, [r3, #3]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d108      	bne.n	800db72 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	2200      	movs	r2, #0
 800db64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f007 fc47 	bl	8015400 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	015a      	lsls	r2, r3, #5
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	4413      	add	r3, r2
 800db7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db7e:	461a      	mov	r2, r3
 800db80:	2302      	movs	r3, #2
 800db82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	f003 0320 	and.w	r3, r3, #32
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d008      	beq.n	800dba0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	015a      	lsls	r2, r3, #5
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	4413      	add	r3, r2
 800db96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db9a:	461a      	mov	r2, r3
 800db9c:	2320      	movs	r3, #32
 800db9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d009      	beq.n	800dbbe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	015a      	lsls	r2, r3, #5
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800dbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800dbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc6:	085b      	lsrs	r3, r3, #1
 800dbc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800dbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f47f af62 	bne.w	800da96 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f004 ffda 	bl	8012b90 <USB_ReadInterrupts>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dbe6:	f040 80db 	bne.w	800dda0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f004 fffb 	bl	8012bea <USB_ReadDevAllInEpInterrupt>
 800dbf4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800dbfa:	e0cd      	b.n	800dd98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 80c2 	beq.w	800dd8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc0e:	b2d2      	uxtb	r2, r2
 800dc10:	4611      	mov	r1, r2
 800dc12:	4618      	mov	r0, r3
 800dc14:	f005 f821 	bl	8012c5a <USB_ReadDevInEPInterrupt>
 800dc18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f003 0301 	and.w	r3, r3, #1
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d057      	beq.n	800dcd4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	f003 030f 	and.w	r3, r3, #15
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc30:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	43db      	mvns	r3, r3
 800dc3e:	69f9      	ldr	r1, [r7, #28]
 800dc40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc44:	4013      	ands	r3, r2
 800dc46:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	015a      	lsls	r2, r3, #5
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	4413      	add	r3, r2
 800dc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc54:	461a      	mov	r2, r3
 800dc56:	2301      	movs	r3, #1
 800dc58:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d132      	bne.n	800dcc8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc66:	4613      	mov	r3, r2
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	4413      	add	r3, r2
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	440b      	add	r3, r1
 800dc70:	334c      	adds	r3, #76	; 0x4c
 800dc72:	6819      	ldr	r1, [r3, #0]
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc78:	4613      	mov	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	4413      	add	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4403      	add	r3, r0
 800dc82:	3348      	adds	r3, #72	; 0x48
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4419      	add	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	4413      	add	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4403      	add	r3, r0
 800dc96:	334c      	adds	r3, #76	; 0x4c
 800dc98:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d113      	bne.n	800dcc8 <HAL_PCD_IRQHandler+0x3a2>
 800dca0:	6879      	ldr	r1, [r7, #4]
 800dca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca4:	4613      	mov	r3, r2
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	4413      	add	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	440b      	add	r3, r1
 800dcae:	3354      	adds	r3, #84	; 0x54
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d108      	bne.n	800dcc8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6818      	ldr	r0, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	f005 f828 	bl	8012d18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f007 fb1b 	bl	801530a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	f003 0308 	and.w	r3, r3, #8
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d008      	beq.n	800dcf0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	015a      	lsls	r2, r3, #5
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	4413      	add	r3, r2
 800dce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcea:	461a      	mov	r2, r3
 800dcec:	2308      	movs	r3, #8
 800dcee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	f003 0310 	and.w	r3, r3, #16
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d008      	beq.n	800dd0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfc:	015a      	lsls	r2, r3, #5
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	4413      	add	r3, r2
 800dd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd06:	461a      	mov	r2, r3
 800dd08:	2310      	movs	r3, #16
 800dd0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d008      	beq.n	800dd28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	015a      	lsls	r2, r3, #5
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd22:	461a      	mov	r2, r3
 800dd24:	2340      	movs	r3, #64	; 0x40
 800dd26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d023      	beq.n	800dd7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800dd32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd34:	6a38      	ldr	r0, [r7, #32]
 800dd36:	f003 ff09 	bl	8011b4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800dd3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	00db      	lsls	r3, r3, #3
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	3338      	adds	r3, #56	; 0x38
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	4413      	add	r3, r2
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	78db      	ldrb	r3, [r3, #3]
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d108      	bne.n	800dd68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	4619      	mov	r1, r3
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f007 fb5e 	bl	8015424 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	015a      	lsls	r2, r3, #5
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	4413      	add	r3, r2
 800dd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd74:	461a      	mov	r2, r3
 800dd76:	2302      	movs	r3, #2
 800dd78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d003      	beq.n	800dd8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800dd84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fcdb 	bl	800e742 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	3301      	adds	r3, #1
 800dd90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	085b      	lsrs	r3, r3, #1
 800dd96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f47f af2e 	bne.w	800dbfc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f004 fef3 	bl	8012b90 <USB_ReadInterrupts>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddb4:	d122      	bne.n	800ddfc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	69fa      	ldr	r2, [r7, #28]
 800ddc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddc4:	f023 0301 	bic.w	r3, r3, #1
 800ddc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d108      	bne.n	800dde6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800dddc:	2100      	movs	r1, #0
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fec2 	bl	800eb68 <HAL_PCDEx_LPM_Callback>
 800dde4:	e002      	b.n	800ddec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f007 fafc 	bl	80153e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	695a      	ldr	r2, [r3, #20]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ddfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4618      	mov	r0, r3
 800de02:	f004 fec5 	bl	8012b90 <USB_ReadInterrupts>
 800de06:	4603      	mov	r3, r0
 800de08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de10:	d112      	bne.n	800de38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d102      	bne.n	800de28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f007 fab8 	bl	8015398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	695a      	ldr	r2, [r3, #20]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800de36:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f004 fea7 	bl	8012b90 <USB_ReadInterrupts>
 800de42:	4603      	mov	r3, r0
 800de44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de4c:	f040 80b7 	bne.w	800dfbe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	69fa      	ldr	r2, [r7, #28]
 800de5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de5e:	f023 0301 	bic.w	r3, r3, #1
 800de62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2110      	movs	r1, #16
 800de6a:	4618      	mov	r0, r3
 800de6c:	f003 fe6e 	bl	8011b4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de70:	2300      	movs	r3, #0
 800de72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de74:	e046      	b.n	800df04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	015a      	lsls	r2, r3, #5
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	4413      	add	r3, r2
 800de7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de82:	461a      	mov	r2, r3
 800de84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	015a      	lsls	r2, r3, #5
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	4413      	add	r3, r2
 800de92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de9a:	0151      	lsls	r1, r2, #5
 800de9c:	69fa      	ldr	r2, [r7, #28]
 800de9e:	440a      	add	r2, r1
 800dea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dea8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb6:	461a      	mov	r2, r3
 800deb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800debc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	015a      	lsls	r2, r3, #5
 800dec2:	69fb      	ldr	r3, [r7, #28]
 800dec4:	4413      	add	r3, r2
 800dec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dece:	0151      	lsls	r1, r2, #5
 800ded0:	69fa      	ldr	r2, [r7, #28]
 800ded2:	440a      	add	r2, r1
 800ded4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ded8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dedc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	015a      	lsls	r2, r3, #5
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	4413      	add	r3, r2
 800dee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deee:	0151      	lsls	r1, r2, #5
 800def0:	69fa      	ldr	r2, [r7, #28]
 800def2:	440a      	add	r2, r1
 800def4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800def8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800defc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800defe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df00:	3301      	adds	r3, #1
 800df02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d3b3      	bcc.n	800de76 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df14:	69db      	ldr	r3, [r3, #28]
 800df16:	69fa      	ldr	r2, [r7, #28]
 800df18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800df20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df26:	2b00      	cmp	r3, #0
 800df28:	d016      	beq.n	800df58 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df34:	69fa      	ldr	r2, [r7, #28]
 800df36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df3a:	f043 030b 	orr.w	r3, r3, #11
 800df3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df4a:	69fa      	ldr	r2, [r7, #28]
 800df4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df50:	f043 030b 	orr.w	r3, r3, #11
 800df54:	6453      	str	r3, [r2, #68]	; 0x44
 800df56:	e015      	b.n	800df84 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df5e:	695b      	ldr	r3, [r3, #20]
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800df6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800df6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	69fa      	ldr	r2, [r7, #28]
 800df7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df7e:	f043 030b 	orr.w	r3, r3, #11
 800df82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	69fa      	ldr	r2, [r7, #28]
 800df8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800df96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6818      	ldr	r0, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	691b      	ldr	r3, [r3, #16]
 800dfa0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	f004 feb5 	bl	8012d18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	695a      	ldr	r2, [r3, #20]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800dfbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f004 fde4 	bl	8012b90 <USB_ReadInterrupts>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfd2:	d124      	bne.n	800e01e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f004 fe7a 	bl	8012cd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f003 fe2f 	bl	8011c46 <USB_GetDevSpeed>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	461a      	mov	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681c      	ldr	r4, [r3, #0]
 800dff4:	f001 f9e8 	bl	800f3c8 <HAL_RCC_GetHCLKFreq>
 800dff8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	461a      	mov	r2, r3
 800e002:	4620      	mov	r0, r4
 800e004:	f003 fb2e 	bl	8011664 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f007 f9a6 	bl	801535a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	695a      	ldr	r2, [r3, #20]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e01c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4618      	mov	r0, r3
 800e024:	f004 fdb4 	bl	8012b90 <USB_ReadInterrupts>
 800e028:	4603      	mov	r3, r0
 800e02a:	f003 0308 	and.w	r3, r3, #8
 800e02e:	2b08      	cmp	r3, #8
 800e030:	d10a      	bne.n	800e048 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f007 f983 	bl	801533e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	695a      	ldr	r2, [r3, #20]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f002 0208 	and.w	r2, r2, #8
 800e046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f004 fd9f 	bl	8012b90 <USB_ReadInterrupts>
 800e052:	4603      	mov	r3, r0
 800e054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e058:	2b80      	cmp	r3, #128	; 0x80
 800e05a:	d122      	bne.n	800e0a2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e05c:	6a3b      	ldr	r3, [r7, #32]
 800e05e:	699b      	ldr	r3, [r3, #24]
 800e060:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e068:	2301      	movs	r3, #1
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24
 800e06c:	e014      	b.n	800e098 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e072:	4613      	mov	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	4413      	add	r3, r2
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	440b      	add	r3, r1
 800e07c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d105      	bne.n	800e092 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fb27 	bl	800e6e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e094:	3301      	adds	r3, #1
 800e096:	627b      	str	r3, [r7, #36]	; 0x24
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d3e5      	bcc.n	800e06e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f004 fd72 	bl	8012b90 <USB_ReadInterrupts>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0b6:	d13b      	bne.n	800e130 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e0bc:	e02b      	b.n	800e116 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c0:	015a      	lsls	r2, r3, #5
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e0ce:	6879      	ldr	r1, [r7, #4]
 800e0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	4413      	add	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	440b      	add	r3, r1
 800e0dc:	3340      	adds	r3, #64	; 0x40
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d115      	bne.n	800e110 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e0e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	da12      	bge.n	800e110 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e0ea:	6879      	ldr	r1, [r7, #4]
 800e0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	00db      	lsls	r3, r3, #3
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	440b      	add	r3, r1
 800e0f8:	333f      	adds	r3, #63	; 0x3f
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e106:	b2db      	uxtb	r3, r3
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fae8 	bl	800e6e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	3301      	adds	r3, #1
 800e114:	627b      	str	r3, [r7, #36]	; 0x24
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d3ce      	bcc.n	800e0be <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	695a      	ldr	r2, [r3, #20]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e12e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4618      	mov	r0, r3
 800e136:	f004 fd2b 	bl	8012b90 <USB_ReadInterrupts>
 800e13a:	4603      	mov	r3, r0
 800e13c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e144:	d155      	bne.n	800e1f2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e146:	2301      	movs	r3, #1
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
 800e14a:	e045      	b.n	800e1d8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	4413      	add	r3, r2
 800e154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e160:	4613      	mov	r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	4413      	add	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	440b      	add	r3, r1
 800e16a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	2b01      	cmp	r3, #1
 800e172:	d12e      	bne.n	800e1d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e174:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e176:	2b00      	cmp	r3, #0
 800e178:	da2b      	bge.n	800e1d2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e186:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d121      	bne.n	800e1d2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	4613      	mov	r3, r2
 800e194:	00db      	lsls	r3, r3, #3
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	695b      	ldr	r3, [r3, #20]
 800e1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10a      	bne.n	800e1d2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	69fa      	ldr	r2, [r7, #28]
 800e1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1ce:	6053      	str	r3, [r2, #4]
            break;
 800e1d0:	e007      	b.n	800e1e2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d3b4      	bcc.n	800e14c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	695a      	ldr	r2, [r3, #20]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e1f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f004 fcca 	bl	8012b90 <USB_ReadInterrupts>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e206:	d10a      	bne.n	800e21e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f007 f91d 	bl	8015448 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	695a      	ldr	r2, [r3, #20]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e21c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4618      	mov	r0, r3
 800e224:	f004 fcb4 	bl	8012b90 <USB_ReadInterrupts>
 800e228:	4603      	mov	r3, r0
 800e22a:	f003 0304 	and.w	r3, r3, #4
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d115      	bne.n	800e25e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f007 f90d 	bl	8015464 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6859      	ldr	r1, [r3, #4]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	69ba      	ldr	r2, [r7, #24]
 800e256:	430a      	orrs	r2, r1
 800e258:	605a      	str	r2, [r3, #4]
 800e25a:	e000      	b.n	800e25e <HAL_PCD_IRQHandler+0x938>
      return;
 800e25c:	bf00      	nop
    }
  }
}
 800e25e:	3734      	adds	r7, #52	; 0x34
 800e260:	46bd      	mov	sp, r7
 800e262:	bd90      	pop	{r4, r7, pc}

0800e264 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	460b      	mov	r3, r1
 800e26e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e276:	2b01      	cmp	r3, #1
 800e278:	d101      	bne.n	800e27e <HAL_PCD_SetAddress+0x1a>
 800e27a:	2302      	movs	r3, #2
 800e27c:	e013      	b.n	800e2a6 <HAL_PCD_SetAddress+0x42>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	78fa      	ldrb	r2, [r7, #3]
 800e28a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	78fa      	ldrb	r2, [r7, #3]
 800e294:	4611      	mov	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f004 fc12 	bl	8012ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	4608      	mov	r0, r1
 800e2b8:	4611      	mov	r1, r2
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	4603      	mov	r3, r0
 800e2be:	70fb      	strb	r3, [r7, #3]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	803b      	strh	r3, [r7, #0]
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e2cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	da0f      	bge.n	800e2f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2d4:	78fb      	ldrb	r3, [r7, #3]
 800e2d6:	f003 020f 	and.w	r2, r3, #15
 800e2da:	4613      	mov	r3, r2
 800e2dc:	00db      	lsls	r3, r3, #3
 800e2de:	4413      	add	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	3338      	adds	r3, #56	; 0x38
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	705a      	strb	r2, [r3, #1]
 800e2f2:	e00f      	b.n	800e314 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e2f4:	78fb      	ldrb	r3, [r7, #3]
 800e2f6:	f003 020f 	and.w	r2, r3, #15
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	00db      	lsls	r3, r3, #3
 800e2fe:	4413      	add	r3, r2
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	4413      	add	r3, r2
 800e30a:	3304      	adds	r3, #4
 800e30c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e314:	78fb      	ldrb	r3, [r7, #3]
 800e316:	f003 030f 	and.w	r3, r3, #15
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e320:	883a      	ldrh	r2, [r7, #0]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	78ba      	ldrb	r2, [r7, #2]
 800e32a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	785b      	ldrb	r3, [r3, #1]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	b29a      	uxth	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e33e:	78bb      	ldrb	r3, [r7, #2]
 800e340:	2b02      	cmp	r3, #2
 800e342:	d102      	bne.n	800e34a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e350:	2b01      	cmp	r3, #1
 800e352:	d101      	bne.n	800e358 <HAL_PCD_EP_Open+0xaa>
 800e354:	2302      	movs	r3, #2
 800e356:	e00e      	b.n	800e376 <HAL_PCD_EP_Open+0xc8>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68f9      	ldr	r1, [r7, #12]
 800e366:	4618      	mov	r0, r3
 800e368:	f003 fc92 	bl	8011c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800e374:	7afb      	ldrb	r3, [r7, #11]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b084      	sub	sp, #16
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	460b      	mov	r3, r1
 800e388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e38a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	da0f      	bge.n	800e3b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e392:	78fb      	ldrb	r3, [r7, #3]
 800e394:	f003 020f 	and.w	r2, r3, #15
 800e398:	4613      	mov	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	4413      	add	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	3338      	adds	r3, #56	; 0x38
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	705a      	strb	r2, [r3, #1]
 800e3b0:	e00f      	b.n	800e3d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3b2:	78fb      	ldrb	r3, [r7, #3]
 800e3b4:	f003 020f 	and.w	r2, r3, #15
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	00db      	lsls	r3, r3, #3
 800e3bc:	4413      	add	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e3d2:	78fb      	ldrb	r3, [r7, #3]
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d101      	bne.n	800e3ec <HAL_PCD_EP_Close+0x6e>
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	e00e      	b.n	800e40a <HAL_PCD_EP_Close+0x8c>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68f9      	ldr	r1, [r7, #12]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f003 fcd0 	bl	8011da0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b086      	sub	sp, #24
 800e416:	af00      	add	r7, sp, #0
 800e418:	60f8      	str	r0, [r7, #12]
 800e41a:	607a      	str	r2, [r7, #4]
 800e41c:	603b      	str	r3, [r7, #0]
 800e41e:	460b      	mov	r3, r1
 800e420:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e422:	7afb      	ldrb	r3, [r7, #11]
 800e424:	f003 020f 	and.w	r2, r3, #15
 800e428:	4613      	mov	r3, r2
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4413      	add	r3, r2
 800e438:	3304      	adds	r3, #4
 800e43a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	2200      	movs	r2, #0
 800e44c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2200      	movs	r2, #0
 800e452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e454:	7afb      	ldrb	r3, [r7, #11]
 800e456:	f003 030f 	and.w	r3, r3, #15
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d102      	bne.n	800e46e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e46e:	7afb      	ldrb	r3, [r7, #11]
 800e470:	f003 030f 	and.w	r3, r3, #15
 800e474:	2b00      	cmp	r3, #0
 800e476:	d109      	bne.n	800e48c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6818      	ldr	r0, [r3, #0]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	b2db      	uxtb	r3, r3
 800e482:	461a      	mov	r2, r3
 800e484:	6979      	ldr	r1, [r7, #20]
 800e486:	f003 ffaf 	bl	80123e8 <USB_EP0StartXfer>
 800e48a:	e008      	b.n	800e49e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6818      	ldr	r0, [r3, #0]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	b2db      	uxtb	r3, r3
 800e496:	461a      	mov	r2, r3
 800e498:	6979      	ldr	r1, [r7, #20]
 800e49a:	f003 fd5d 	bl	8011f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3718      	adds	r7, #24
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e4b4:	78fb      	ldrb	r3, [r7, #3]
 800e4b6:	f003 020f 	and.w	r2, r3, #15
 800e4ba:	6879      	ldr	r1, [r7, #4]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	440b      	add	r3, r1
 800e4c6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e4ca:	681b      	ldr	r3, [r3, #0]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	607a      	str	r2, [r7, #4]
 800e4e2:	603b      	str	r3, [r7, #0]
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4e8:	7afb      	ldrb	r3, [r7, #11]
 800e4ea:	f003 020f 	and.w	r2, r3, #15
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	00db      	lsls	r3, r3, #3
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	3338      	adds	r3, #56	; 0x38
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	2200      	movs	r2, #0
 800e510:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2201      	movs	r2, #1
 800e516:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e518:	7afb      	ldrb	r3, [r7, #11]
 800e51a:	f003 030f 	and.w	r3, r3, #15
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d102      	bne.n	800e532 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e532:	7afb      	ldrb	r3, [r7, #11]
 800e534:	f003 030f 	and.w	r3, r3, #15
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d109      	bne.n	800e550 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6818      	ldr	r0, [r3, #0]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	461a      	mov	r2, r3
 800e548:	6979      	ldr	r1, [r7, #20]
 800e54a:	f003 ff4d 	bl	80123e8 <USB_EP0StartXfer>
 800e54e:	e008      	b.n	800e562 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6818      	ldr	r0, [r3, #0]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	691b      	ldr	r3, [r3, #16]
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	461a      	mov	r2, r3
 800e55c:	6979      	ldr	r1, [r7, #20]
 800e55e:	f003 fcfb 	bl	8011f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3718      	adds	r7, #24
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e578:	78fb      	ldrb	r3, [r7, #3]
 800e57a:	f003 020f 	and.w	r2, r3, #15
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	429a      	cmp	r2, r3
 800e584:	d901      	bls.n	800e58a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e050      	b.n	800e62c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e58a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	da0f      	bge.n	800e5b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e592:	78fb      	ldrb	r3, [r7, #3]
 800e594:	f003 020f 	and.w	r2, r3, #15
 800e598:	4613      	mov	r3, r2
 800e59a:	00db      	lsls	r3, r3, #3
 800e59c:	4413      	add	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	3338      	adds	r3, #56	; 0x38
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	705a      	strb	r2, [r3, #1]
 800e5b0:	e00d      	b.n	800e5ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e5b2:	78fa      	ldrb	r2, [r7, #3]
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	4413      	add	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	f003 030f 	and.w	r3, r3, #15
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d101      	bne.n	800e5ee <HAL_PCD_EP_SetStall+0x82>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	e01e      	b.n	800e62c <HAL_PCD_EP_SetStall+0xc0>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68f9      	ldr	r1, [r7, #12]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f004 f98b 	bl	8012918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e602:	78fb      	ldrb	r3, [r7, #3]
 800e604:	f003 030f 	and.w	r3, r3, #15
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6818      	ldr	r0, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	b2d9      	uxtb	r1, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e61c:	461a      	mov	r2, r3
 800e61e:	f004 fb7b 	bl	8012d18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2200      	movs	r2, #0
 800e626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e640:	78fb      	ldrb	r3, [r7, #3]
 800e642:	f003 020f 	and.w	r2, r3, #15
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d901      	bls.n	800e652 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e64e:	2301      	movs	r3, #1
 800e650:	e042      	b.n	800e6d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e656:	2b00      	cmp	r3, #0
 800e658:	da0f      	bge.n	800e67a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e65a:	78fb      	ldrb	r3, [r7, #3]
 800e65c:	f003 020f 	and.w	r2, r3, #15
 800e660:	4613      	mov	r3, r2
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	4413      	add	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	3338      	adds	r3, #56	; 0x38
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4413      	add	r3, r2
 800e66e:	3304      	adds	r3, #4
 800e670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2201      	movs	r2, #1
 800e676:	705a      	strb	r2, [r3, #1]
 800e678:	e00f      	b.n	800e69a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e67a:	78fb      	ldrb	r3, [r7, #3]
 800e67c:	f003 020f 	and.w	r2, r3, #15
 800e680:	4613      	mov	r3, r2
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	4413      	add	r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	4413      	add	r3, r2
 800e690:	3304      	adds	r3, #4
 800e692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2200      	movs	r2, #0
 800e698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	f003 030f 	and.w	r3, r3, #15
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d101      	bne.n	800e6ba <HAL_PCD_EP_ClrStall+0x86>
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	e00e      	b.n	800e6d8 <HAL_PCD_EP_ClrStall+0xa4>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68f9      	ldr	r1, [r7, #12]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f004 f993 	bl	80129f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e6ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da0c      	bge.n	800e70e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e6f4:	78fb      	ldrb	r3, [r7, #3]
 800e6f6:	f003 020f 	and.w	r2, r3, #15
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	00db      	lsls	r3, r3, #3
 800e6fe:	4413      	add	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	3338      	adds	r3, #56	; 0x38
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	4413      	add	r3, r2
 800e708:	3304      	adds	r3, #4
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	e00c      	b.n	800e728 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e70e:	78fb      	ldrb	r3, [r7, #3]
 800e710:	f003 020f 	and.w	r2, r3, #15
 800e714:	4613      	mov	r3, r2
 800e716:	00db      	lsls	r3, r3, #3
 800e718:	4413      	add	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	4413      	add	r3, r2
 800e724:	3304      	adds	r3, #4
 800e726:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68f9      	ldr	r1, [r7, #12]
 800e72e:	4618      	mov	r0, r3
 800e730:	f003 ffb2 	bl	8012698 <USB_EPStopXfer>
 800e734:	4603      	mov	r3, r0
 800e736:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e738:	7afb      	ldrb	r3, [r7, #11]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b08a      	sub	sp, #40	; 0x28
 800e746:	af02      	add	r7, sp, #8
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	4613      	mov	r3, r2
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	4413      	add	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	3338      	adds	r3, #56	; 0x38
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	4413      	add	r3, r2
 800e766:	3304      	adds	r3, #4
 800e768:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	6a1a      	ldr	r2, [r3, #32]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	699b      	ldr	r3, [r3, #24]
 800e772:	429a      	cmp	r2, r3
 800e774:	d901      	bls.n	800e77a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	e06c      	b.n	800e854 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	699a      	ldr	r2, [r3, #24]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	69fa      	ldr	r2, [r7, #28]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d902      	bls.n	800e796 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	3303      	adds	r3, #3
 800e79a:	089b      	lsrs	r3, r3, #2
 800e79c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e79e:	e02b      	b.n	800e7f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	699a      	ldr	r2, [r3, #24]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	69fa      	ldr	r2, [r7, #28]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d902      	bls.n	800e7bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	3303      	adds	r3, #3
 800e7c0:	089b      	lsrs	r3, r3, #2
 800e7c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6919      	ldr	r1, [r3, #16]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	4603      	mov	r3, r0
 800e7da:	6978      	ldr	r0, [r7, #20]
 800e7dc:	f004 f806 	bl	80127ec <USB_WritePacket>

    ep->xfer_buff  += len;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	691a      	ldr	r2, [r3, #16]
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	441a      	add	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6a1a      	ldr	r2, [r3, #32]
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	441a      	add	r2, r3
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e804:	699b      	ldr	r3, [r3, #24]
 800e806:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e808:	69ba      	ldr	r2, [r7, #24]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d809      	bhi.n	800e822 <PCD_WriteEmptyTxFifo+0xe0>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6a1a      	ldr	r2, [r3, #32]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e816:	429a      	cmp	r2, r3
 800e818:	d203      	bcs.n	800e822 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1be      	bne.n	800e7a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	699a      	ldr	r2, [r3, #24]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d811      	bhi.n	800e852 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	f003 030f 	and.w	r3, r3, #15
 800e834:	2201      	movs	r2, #1
 800e836:	fa02 f303 	lsl.w	r3, r2, r3
 800e83a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	43db      	mvns	r3, r3
 800e848:	6939      	ldr	r1, [r7, #16]
 800e84a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e84e:	4013      	ands	r3, r2
 800e850:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3720      	adds	r7, #32
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b088      	sub	sp, #32
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	333c      	adds	r3, #60	; 0x3c
 800e874:	3304      	adds	r3, #4
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	691b      	ldr	r3, [r3, #16]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d17b      	bne.n	800e98a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	f003 0308 	and.w	r3, r3, #8
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d015      	beq.n	800e8c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	4a61      	ldr	r2, [pc, #388]	; (800ea24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	f240 80b9 	bls.w	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f000 80b3 	beq.w	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	015a      	lsls	r2, r3, #5
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8be:	461a      	mov	r2, r3
 800e8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8c4:	6093      	str	r3, [r2, #8]
 800e8c6:	e0a7      	b.n	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	f003 0320 	and.w	r3, r3, #32
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d009      	beq.n	800e8e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	015a      	lsls	r2, r3, #5
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	4413      	add	r3, r2
 800e8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8de:	461a      	mov	r2, r3
 800e8e0:	2320      	movs	r3, #32
 800e8e2:	6093      	str	r3, [r2, #8]
 800e8e4:	e098      	b.n	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f040 8093 	bne.w	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	4a4b      	ldr	r2, [pc, #300]	; (800ea24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d90f      	bls.n	800e91a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00a      	beq.n	800e91a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	015a      	lsls	r2, r3, #5
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	4413      	add	r3, r2
 800e90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e910:	461a      	mov	r2, r3
 800e912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e916:	6093      	str	r3, [r2, #8]
 800e918:	e07e      	b.n	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	4613      	mov	r3, r2
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	4413      	add	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4413      	add	r3, r2
 800e92c:	3304      	adds	r3, #4
 800e92e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	69da      	ldr	r2, [r3, #28]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	0159      	lsls	r1, r3, #5
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	440b      	add	r3, r1
 800e93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e946:	1ad2      	subs	r2, r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d114      	bne.n	800e97c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d109      	bne.n	800e96e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e964:	461a      	mov	r2, r3
 800e966:	2101      	movs	r1, #1
 800e968:	f004 f9d6 	bl	8012d18 <USB_EP0_OutStart>
 800e96c:	e006      	b.n	800e97c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	691a      	ldr	r2, [r3, #16]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6a1b      	ldr	r3, [r3, #32]
 800e976:	441a      	add	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	4619      	mov	r1, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f006 fca6 	bl	80152d4 <HAL_PCD_DataOutStageCallback>
 800e988:	e046      	b.n	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	4a26      	ldr	r2, [pc, #152]	; (800ea28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d124      	bne.n	800e9dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00a      	beq.n	800e9b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ae:	6093      	str	r3, [r2, #8]
 800e9b0:	e032      	b.n	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	f003 0320 	and.w	r3, r3, #32
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d008      	beq.n	800e9ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	015a      	lsls	r2, r3, #5
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	2320      	movs	r3, #32
 800e9cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f006 fc7d 	bl	80152d4 <HAL_PCD_DataOutStageCallback>
 800e9da:	e01d      	b.n	800ea18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d114      	bne.n	800ea0c <PCD_EP_OutXfrComplete_int+0x1b0>
 800e9e2:	6879      	ldr	r1, [r7, #4]
 800e9e4:	683a      	ldr	r2, [r7, #0]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	4413      	add	r3, r2
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	440b      	add	r3, r1
 800e9f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d108      	bne.n	800ea0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6818      	ldr	r0, [r3, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ea04:	461a      	mov	r2, r3
 800ea06:	2100      	movs	r1, #0
 800ea08:	f004 f986 	bl	8012d18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	4619      	mov	r1, r3
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f006 fc5e 	bl	80152d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3720      	adds	r7, #32
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	4f54300a 	.word	0x4f54300a
 800ea28:	4f54310a 	.word	0x4f54310a

0800ea2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	333c      	adds	r3, #60	; 0x3c
 800ea44:	3304      	adds	r3, #4
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	015a      	lsls	r2, r3, #5
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	4413      	add	r3, r2
 800ea52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	4a15      	ldr	r2, [pc, #84]	; (800eab4 <PCD_EP_OutSetupPacket_int+0x88>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d90e      	bls.n	800ea80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d009      	beq.n	800ea80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	015a      	lsls	r2, r3, #5
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	4413      	add	r3, r2
 800ea74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea78:	461a      	mov	r2, r3
 800ea7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f006 fc15 	bl	80152b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	4a0a      	ldr	r2, [pc, #40]	; (800eab4 <PCD_EP_OutSetupPacket_int+0x88>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d90c      	bls.n	800eaa8 <PCD_EP_OutSetupPacket_int+0x7c>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d108      	bne.n	800eaa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6818      	ldr	r0, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	f004 f938 	bl	8012d18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800eaa8:	2300      	movs	r3, #0
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	4f54300a 	.word	0x4f54300a

0800eab8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	460b      	mov	r3, r1
 800eac2:	70fb      	strb	r3, [r7, #3]
 800eac4:	4613      	mov	r3, r2
 800eac6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eace:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ead0:	78fb      	ldrb	r3, [r7, #3]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d107      	bne.n	800eae6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ead6:	883b      	ldrh	r3, [r7, #0]
 800ead8:	0419      	lsls	r1, r3, #16
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	430a      	orrs	r2, r1
 800eae2:	629a      	str	r2, [r3, #40]	; 0x28
 800eae4:	e028      	b.n	800eb38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaec:	0c1b      	lsrs	r3, r3, #16
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
 800eaf8:	e00d      	b.n	800eb16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
 800eb00:	3340      	adds	r3, #64	; 0x40
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	4413      	add	r3, r2
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	0c1b      	lsrs	r3, r3, #16
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800eb10:	7bfb      	ldrb	r3, [r7, #15]
 800eb12:	3301      	adds	r3, #1
 800eb14:	73fb      	strb	r3, [r7, #15]
 800eb16:	7bfa      	ldrb	r2, [r7, #15]
 800eb18:	78fb      	ldrb	r3, [r7, #3]
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d3ec      	bcc.n	800eafa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800eb20:	883b      	ldrh	r3, [r7, #0]
 800eb22:	0418      	lsls	r0, r3, #16
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6819      	ldr	r1, [r3, #0]
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	4302      	orrs	r2, r0
 800eb30:	3340      	adds	r3, #64	; 0x40
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	440b      	add	r3, r1
 800eb36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	887a      	ldrh	r2, [r7, #2]
 800eb58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	460b      	mov	r3, r1
 800eb72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d101      	bne.n	800eb92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e267      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d075      	beq.n	800ec8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800eb9e:	4b88      	ldr	r3, [pc, #544]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f003 030c 	and.w	r3, r3, #12
 800eba6:	2b04      	cmp	r3, #4
 800eba8:	d00c      	beq.n	800ebc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ebaa:	4b85      	ldr	r3, [pc, #532]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ebb2:	2b08      	cmp	r3, #8
 800ebb4:	d112      	bne.n	800ebdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ebb6:	4b82      	ldr	r3, [pc, #520]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ebbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebc2:	d10b      	bne.n	800ebdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebc4:	4b7e      	ldr	r3, [pc, #504]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d05b      	beq.n	800ec88 <HAL_RCC_OscConfig+0x108>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d157      	bne.n	800ec88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e242      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebe4:	d106      	bne.n	800ebf4 <HAL_RCC_OscConfig+0x74>
 800ebe6:	4b76      	ldr	r3, [pc, #472]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a75      	ldr	r2, [pc, #468]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ebec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	e01d      	b.n	800ec30 <HAL_RCC_OscConfig+0xb0>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ebfc:	d10c      	bne.n	800ec18 <HAL_RCC_OscConfig+0x98>
 800ebfe:	4b70      	ldr	r3, [pc, #448]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a6f      	ldr	r2, [pc, #444]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	4b6d      	ldr	r3, [pc, #436]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a6c      	ldr	r2, [pc, #432]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec14:	6013      	str	r3, [r2, #0]
 800ec16:	e00b      	b.n	800ec30 <HAL_RCC_OscConfig+0xb0>
 800ec18:	4b69      	ldr	r3, [pc, #420]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a68      	ldr	r2, [pc, #416]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec22:	6013      	str	r3, [r2, #0]
 800ec24:	4b66      	ldr	r3, [pc, #408]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a65      	ldr	r2, [pc, #404]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d013      	beq.n	800ec60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec38:	f7fc fa7c 	bl	800b134 <HAL_GetTick>
 800ec3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec3e:	e008      	b.n	800ec52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ec40:	f7fc fa78 	bl	800b134 <HAL_GetTick>
 800ec44:	4602      	mov	r2, r0
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	2b64      	cmp	r3, #100	; 0x64
 800ec4c:	d901      	bls.n	800ec52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ec4e:	2303      	movs	r3, #3
 800ec50:	e207      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec52:	4b5b      	ldr	r3, [pc, #364]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d0f0      	beq.n	800ec40 <HAL_RCC_OscConfig+0xc0>
 800ec5e:	e014      	b.n	800ec8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec60:	f7fc fa68 	bl	800b134 <HAL_GetTick>
 800ec64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ec66:	e008      	b.n	800ec7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ec68:	f7fc fa64 	bl	800b134 <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	2b64      	cmp	r3, #100	; 0x64
 800ec74:	d901      	bls.n	800ec7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ec76:	2303      	movs	r3, #3
 800ec78:	e1f3      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ec7a:	4b51      	ldr	r3, [pc, #324]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1f0      	bne.n	800ec68 <HAL_RCC_OscConfig+0xe8>
 800ec86:	e000      	b.n	800ec8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ec88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f003 0302 	and.w	r3, r3, #2
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d063      	beq.n	800ed5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ec96:	4b4a      	ldr	r3, [pc, #296]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	f003 030c 	and.w	r3, r3, #12
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00b      	beq.n	800ecba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eca2:	4b47      	ldr	r3, [pc, #284]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800eca4:	689b      	ldr	r3, [r3, #8]
 800eca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ecaa:	2b08      	cmp	r3, #8
 800ecac:	d11c      	bne.n	800ece8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ecae:	4b44      	ldr	r3, [pc, #272]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d116      	bne.n	800ece8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ecba:	4b41      	ldr	r3, [pc, #260]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f003 0302 	and.w	r3, r3, #2
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d005      	beq.n	800ecd2 <HAL_RCC_OscConfig+0x152>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d001      	beq.n	800ecd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e1c7      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ecd2:	4b3b      	ldr	r3, [pc, #236]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	4937      	ldr	r1, [pc, #220]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ece2:	4313      	orrs	r3, r2
 800ece4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ece6:	e03a      	b.n	800ed5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d020      	beq.n	800ed32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ecf0:	4b34      	ldr	r3, [pc, #208]	; (800edc4 <HAL_RCC_OscConfig+0x244>)
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecf6:	f7fc fa1d 	bl	800b134 <HAL_GetTick>
 800ecfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ecfc:	e008      	b.n	800ed10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ecfe:	f7fc fa19 	bl	800b134 <HAL_GetTick>
 800ed02:	4602      	mov	r2, r0
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	d901      	bls.n	800ed10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	e1a8      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed10:	4b2b      	ldr	r3, [pc, #172]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f003 0302 	and.w	r3, r3, #2
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d0f0      	beq.n	800ecfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed1c:	4b28      	ldr	r3, [pc, #160]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	00db      	lsls	r3, r3, #3
 800ed2a:	4925      	ldr	r1, [pc, #148]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	600b      	str	r3, [r1, #0]
 800ed30:	e015      	b.n	800ed5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ed32:	4b24      	ldr	r3, [pc, #144]	; (800edc4 <HAL_RCC_OscConfig+0x244>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed38:	f7fc f9fc 	bl	800b134 <HAL_GetTick>
 800ed3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ed3e:	e008      	b.n	800ed52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ed40:	f7fc f9f8 	bl	800b134 <HAL_GetTick>
 800ed44:	4602      	mov	r2, r0
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	d901      	bls.n	800ed52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ed4e:	2303      	movs	r3, #3
 800ed50:	e187      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ed52:	4b1b      	ldr	r3, [pc, #108]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f003 0302 	and.w	r3, r3, #2
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1f0      	bne.n	800ed40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 0308 	and.w	r3, r3, #8
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d036      	beq.n	800edd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d016      	beq.n	800eda0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ed72:	4b15      	ldr	r3, [pc, #84]	; (800edc8 <HAL_RCC_OscConfig+0x248>)
 800ed74:	2201      	movs	r2, #1
 800ed76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed78:	f7fc f9dc 	bl	800b134 <HAL_GetTick>
 800ed7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ed7e:	e008      	b.n	800ed92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ed80:	f7fc f9d8 	bl	800b134 <HAL_GetTick>
 800ed84:	4602      	mov	r2, r0
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d901      	bls.n	800ed92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e167      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ed92:	4b0b      	ldr	r3, [pc, #44]	; (800edc0 <HAL_RCC_OscConfig+0x240>)
 800ed94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed96:	f003 0302 	and.w	r3, r3, #2
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d0f0      	beq.n	800ed80 <HAL_RCC_OscConfig+0x200>
 800ed9e:	e01b      	b.n	800edd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eda0:	4b09      	ldr	r3, [pc, #36]	; (800edc8 <HAL_RCC_OscConfig+0x248>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eda6:	f7fc f9c5 	bl	800b134 <HAL_GetTick>
 800edaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800edac:	e00e      	b.n	800edcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800edae:	f7fc f9c1 	bl	800b134 <HAL_GetTick>
 800edb2:	4602      	mov	r2, r0
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d907      	bls.n	800edcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800edbc:	2303      	movs	r3, #3
 800edbe:	e150      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
 800edc0:	40023800 	.word	0x40023800
 800edc4:	42470000 	.word	0x42470000
 800edc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800edcc:	4b88      	ldr	r3, [pc, #544]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800edce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edd0:	f003 0302 	and.w	r3, r3, #2
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1ea      	bne.n	800edae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f003 0304 	and.w	r3, r3, #4
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 8097 	beq.w	800ef14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ede6:	2300      	movs	r3, #0
 800ede8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800edea:	4b81      	ldr	r3, [pc, #516]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800edec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10f      	bne.n	800ee16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800edf6:	2300      	movs	r3, #0
 800edf8:	60bb      	str	r3, [r7, #8]
 800edfa:	4b7d      	ldr	r3, [pc, #500]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800edfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edfe:	4a7c      	ldr	r2, [pc, #496]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee04:	6413      	str	r3, [r2, #64]	; 0x40
 800ee06:	4b7a      	ldr	r3, [pc, #488]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee0e:	60bb      	str	r3, [r7, #8]
 800ee10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ee12:	2301      	movs	r3, #1
 800ee14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee16:	4b77      	ldr	r3, [pc, #476]	; (800eff4 <HAL_RCC_OscConfig+0x474>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d118      	bne.n	800ee54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee22:	4b74      	ldr	r3, [pc, #464]	; (800eff4 <HAL_RCC_OscConfig+0x474>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a73      	ldr	r2, [pc, #460]	; (800eff4 <HAL_RCC_OscConfig+0x474>)
 800ee28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee2e:	f7fc f981 	bl	800b134 <HAL_GetTick>
 800ee32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee34:	e008      	b.n	800ee48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee36:	f7fc f97d 	bl	800b134 <HAL_GetTick>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	2b02      	cmp	r3, #2
 800ee42:	d901      	bls.n	800ee48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e10c      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee48:	4b6a      	ldr	r3, [pc, #424]	; (800eff4 <HAL_RCC_OscConfig+0x474>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d0f0      	beq.n	800ee36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d106      	bne.n	800ee6a <HAL_RCC_OscConfig+0x2ea>
 800ee5c:	4b64      	ldr	r3, [pc, #400]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee60:	4a63      	ldr	r2, [pc, #396]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee62:	f043 0301 	orr.w	r3, r3, #1
 800ee66:	6713      	str	r3, [r2, #112]	; 0x70
 800ee68:	e01c      	b.n	800eea4 <HAL_RCC_OscConfig+0x324>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	2b05      	cmp	r3, #5
 800ee70:	d10c      	bne.n	800ee8c <HAL_RCC_OscConfig+0x30c>
 800ee72:	4b5f      	ldr	r3, [pc, #380]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee76:	4a5e      	ldr	r2, [pc, #376]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee78:	f043 0304 	orr.w	r3, r3, #4
 800ee7c:	6713      	str	r3, [r2, #112]	; 0x70
 800ee7e:	4b5c      	ldr	r3, [pc, #368]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee82:	4a5b      	ldr	r2, [pc, #364]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee84:	f043 0301 	orr.w	r3, r3, #1
 800ee88:	6713      	str	r3, [r2, #112]	; 0x70
 800ee8a:	e00b      	b.n	800eea4 <HAL_RCC_OscConfig+0x324>
 800ee8c:	4b58      	ldr	r3, [pc, #352]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee90:	4a57      	ldr	r2, [pc, #348]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee92:	f023 0301 	bic.w	r3, r3, #1
 800ee96:	6713      	str	r3, [r2, #112]	; 0x70
 800ee98:	4b55      	ldr	r3, [pc, #340]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee9c:	4a54      	ldr	r2, [pc, #336]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ee9e:	f023 0304 	bic.w	r3, r3, #4
 800eea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d015      	beq.n	800eed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eeac:	f7fc f942 	bl	800b134 <HAL_GetTick>
 800eeb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eeb2:	e00a      	b.n	800eeca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eeb4:	f7fc f93e 	bl	800b134 <HAL_GetTick>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	f241 3288 	movw	r2, #5000	; 0x1388
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d901      	bls.n	800eeca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800eec6:	2303      	movs	r3, #3
 800eec8:	e0cb      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eeca:	4b49      	ldr	r3, [pc, #292]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800eecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d0ee      	beq.n	800eeb4 <HAL_RCC_OscConfig+0x334>
 800eed6:	e014      	b.n	800ef02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eed8:	f7fc f92c 	bl	800b134 <HAL_GetTick>
 800eedc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eede:	e00a      	b.n	800eef6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eee0:	f7fc f928 	bl	800b134 <HAL_GetTick>
 800eee4:	4602      	mov	r2, r0
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d901      	bls.n	800eef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800eef2:	2303      	movs	r3, #3
 800eef4:	e0b5      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800eef6:	4b3e      	ldr	r3, [pc, #248]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800eef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eefa:	f003 0302 	and.w	r3, r3, #2
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1ee      	bne.n	800eee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ef02:	7dfb      	ldrb	r3, [r7, #23]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d105      	bne.n	800ef14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef08:	4b39      	ldr	r3, [pc, #228]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ef0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef0c:	4a38      	ldr	r2, [pc, #224]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ef0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 80a1 	beq.w	800f060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ef1e:	4b34      	ldr	r3, [pc, #208]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	f003 030c 	and.w	r3, r3, #12
 800ef26:	2b08      	cmp	r3, #8
 800ef28:	d05c      	beq.n	800efe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	699b      	ldr	r3, [r3, #24]
 800ef2e:	2b02      	cmp	r3, #2
 800ef30:	d141      	bne.n	800efb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef32:	4b31      	ldr	r3, [pc, #196]	; (800eff8 <HAL_RCC_OscConfig+0x478>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef38:	f7fc f8fc 	bl	800b134 <HAL_GetTick>
 800ef3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef3e:	e008      	b.n	800ef52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef40:	f7fc f8f8 	bl	800b134 <HAL_GetTick>
 800ef44:	4602      	mov	r2, r0
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	2b02      	cmp	r3, #2
 800ef4c:	d901      	bls.n	800ef52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ef4e:	2303      	movs	r3, #3
 800ef50:	e087      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef52:	4b27      	ldr	r3, [pc, #156]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1f0      	bne.n	800ef40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	69da      	ldr	r2, [r3, #28]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	431a      	orrs	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6c:	019b      	lsls	r3, r3, #6
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef74:	085b      	lsrs	r3, r3, #1
 800ef76:	3b01      	subs	r3, #1
 800ef78:	041b      	lsls	r3, r3, #16
 800ef7a:	431a      	orrs	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	061b      	lsls	r3, r3, #24
 800ef82:	491b      	ldr	r1, [pc, #108]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800ef84:	4313      	orrs	r3, r2
 800ef86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ef88:	4b1b      	ldr	r3, [pc, #108]	; (800eff8 <HAL_RCC_OscConfig+0x478>)
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef8e:	f7fc f8d1 	bl	800b134 <HAL_GetTick>
 800ef92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef94:	e008      	b.n	800efa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef96:	f7fc f8cd 	bl	800b134 <HAL_GetTick>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	2b02      	cmp	r3, #2
 800efa2:	d901      	bls.n	800efa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800efa4:	2303      	movs	r3, #3
 800efa6:	e05c      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800efa8:	4b11      	ldr	r3, [pc, #68]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d0f0      	beq.n	800ef96 <HAL_RCC_OscConfig+0x416>
 800efb4:	e054      	b.n	800f060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efb6:	4b10      	ldr	r3, [pc, #64]	; (800eff8 <HAL_RCC_OscConfig+0x478>)
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efbc:	f7fc f8ba 	bl	800b134 <HAL_GetTick>
 800efc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800efc2:	e008      	b.n	800efd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800efc4:	f7fc f8b6 	bl	800b134 <HAL_GetTick>
 800efc8:	4602      	mov	r2, r0
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d901      	bls.n	800efd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800efd2:	2303      	movs	r3, #3
 800efd4:	e045      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800efd6:	4b06      	ldr	r3, [pc, #24]	; (800eff0 <HAL_RCC_OscConfig+0x470>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1f0      	bne.n	800efc4 <HAL_RCC_OscConfig+0x444>
 800efe2:	e03d      	b.n	800f060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d107      	bne.n	800effc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	e038      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
 800eff0:	40023800 	.word	0x40023800
 800eff4:	40007000 	.word	0x40007000
 800eff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800effc:	4b1b      	ldr	r3, [pc, #108]	; (800f06c <HAL_RCC_OscConfig+0x4ec>)
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d028      	beq.n	800f05c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f014:	429a      	cmp	r2, r3
 800f016:	d121      	bne.n	800f05c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f022:	429a      	cmp	r2, r3
 800f024:	d11a      	bne.n	800f05c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f02c:	4013      	ands	r3, r2
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f034:	4293      	cmp	r3, r2
 800f036:	d111      	bne.n	800f05c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f042:	085b      	lsrs	r3, r3, #1
 800f044:	3b01      	subs	r3, #1
 800f046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f048:	429a      	cmp	r2, r3
 800f04a:	d107      	bne.n	800f05c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f058:	429a      	cmp	r2, r3
 800f05a:	d001      	beq.n	800f060 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e000      	b.n	800f062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	40023800 	.word	0x40023800

0800f070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d101      	bne.n	800f084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f080:	2301      	movs	r3, #1
 800f082:	e0cc      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f084:	4b68      	ldr	r3, [pc, #416]	; (800f228 <HAL_RCC_ClockConfig+0x1b8>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 0307 	and.w	r3, r3, #7
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d90c      	bls.n	800f0ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f092:	4b65      	ldr	r3, [pc, #404]	; (800f228 <HAL_RCC_ClockConfig+0x1b8>)
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	b2d2      	uxtb	r2, r2
 800f098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f09a:	4b63      	ldr	r3, [pc, #396]	; (800f228 <HAL_RCC_ClockConfig+0x1b8>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f003 0307 	and.w	r3, r3, #7
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d001      	beq.n	800f0ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e0b8      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f003 0302 	and.w	r3, r3, #2
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d020      	beq.n	800f0fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f003 0304 	and.w	r3, r3, #4
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d005      	beq.n	800f0d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f0c4:	4b59      	ldr	r3, [pc, #356]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	4a58      	ldr	r2, [pc, #352]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f0ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f0ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f003 0308 	and.w	r3, r3, #8
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d005      	beq.n	800f0e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f0dc:	4b53      	ldr	r3, [pc, #332]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	4a52      	ldr	r2, [pc, #328]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f0e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f0e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f0e8:	4b50      	ldr	r3, [pc, #320]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	494d      	ldr	r1, [pc, #308]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d044      	beq.n	800f190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d107      	bne.n	800f11e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f10e:	4b47      	ldr	r3, [pc, #284]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f116:	2b00      	cmp	r3, #0
 800f118:	d119      	bne.n	800f14e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e07f      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	2b02      	cmp	r3, #2
 800f124:	d003      	beq.n	800f12e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d107      	bne.n	800f13e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f12e:	4b3f      	ldr	r3, [pc, #252]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f136:	2b00      	cmp	r3, #0
 800f138:	d109      	bne.n	800f14e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f13a:	2301      	movs	r3, #1
 800f13c:	e06f      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f13e:	4b3b      	ldr	r3, [pc, #236]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f003 0302 	and.w	r3, r3, #2
 800f146:	2b00      	cmp	r3, #0
 800f148:	d101      	bne.n	800f14e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	e067      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f14e:	4b37      	ldr	r3, [pc, #220]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	f023 0203 	bic.w	r2, r3, #3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	4934      	ldr	r1, [pc, #208]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f15c:	4313      	orrs	r3, r2
 800f15e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f160:	f7fb ffe8 	bl	800b134 <HAL_GetTick>
 800f164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f166:	e00a      	b.n	800f17e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f168:	f7fb ffe4 	bl	800b134 <HAL_GetTick>
 800f16c:	4602      	mov	r2, r0
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	f241 3288 	movw	r2, #5000	; 0x1388
 800f176:	4293      	cmp	r3, r2
 800f178:	d901      	bls.n	800f17e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f17a:	2303      	movs	r3, #3
 800f17c:	e04f      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f17e:	4b2b      	ldr	r3, [pc, #172]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	f003 020c 	and.w	r2, r3, #12
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d1eb      	bne.n	800f168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f190:	4b25      	ldr	r3, [pc, #148]	; (800f228 <HAL_RCC_ClockConfig+0x1b8>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f003 0307 	and.w	r3, r3, #7
 800f198:	683a      	ldr	r2, [r7, #0]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d20c      	bcs.n	800f1b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f19e:	4b22      	ldr	r3, [pc, #136]	; (800f228 <HAL_RCC_ClockConfig+0x1b8>)
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	b2d2      	uxtb	r2, r2
 800f1a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1a6:	4b20      	ldr	r3, [pc, #128]	; (800f228 <HAL_RCC_ClockConfig+0x1b8>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 0307 	and.w	r3, r3, #7
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d001      	beq.n	800f1b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e032      	b.n	800f21e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f003 0304 	and.w	r3, r3, #4
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d008      	beq.n	800f1d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f1c4:	4b19      	ldr	r3, [pc, #100]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	4916      	ldr	r1, [pc, #88]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f003 0308 	and.w	r3, r3, #8
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d009      	beq.n	800f1f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f1e2:	4b12      	ldr	r3, [pc, #72]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	00db      	lsls	r3, r3, #3
 800f1f0:	490e      	ldr	r1, [pc, #56]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f1f6:	f000 f821 	bl	800f23c <HAL_RCC_GetSysClockFreq>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	4b0b      	ldr	r3, [pc, #44]	; (800f22c <HAL_RCC_ClockConfig+0x1bc>)
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	091b      	lsrs	r3, r3, #4
 800f202:	f003 030f 	and.w	r3, r3, #15
 800f206:	490a      	ldr	r1, [pc, #40]	; (800f230 <HAL_RCC_ClockConfig+0x1c0>)
 800f208:	5ccb      	ldrb	r3, [r1, r3]
 800f20a:	fa22 f303 	lsr.w	r3, r2, r3
 800f20e:	4a09      	ldr	r2, [pc, #36]	; (800f234 <HAL_RCC_ClockConfig+0x1c4>)
 800f210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <HAL_RCC_ClockConfig+0x1c8>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4618      	mov	r0, r3
 800f218:	f7f9 f8fa 	bl	8008410 <HAL_InitTick>

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	40023c00 	.word	0x40023c00
 800f22c:	40023800 	.word	0x40023800
 800f230:	08016968 	.word	0x08016968
 800f234:	200000e4 	.word	0x200000e4
 800f238:	200000e8 	.word	0x200000e8

0800f23c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f23c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f240:	b090      	sub	sp, #64	; 0x40
 800f242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f244:	2300      	movs	r3, #0
 800f246:	637b      	str	r3, [r7, #52]	; 0x34
 800f248:	2300      	movs	r3, #0
 800f24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f24c:	2300      	movs	r3, #0
 800f24e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800f250:	2300      	movs	r3, #0
 800f252:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f254:	4b59      	ldr	r3, [pc, #356]	; (800f3bc <HAL_RCC_GetSysClockFreq+0x180>)
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f003 030c 	and.w	r3, r3, #12
 800f25c:	2b08      	cmp	r3, #8
 800f25e:	d00d      	beq.n	800f27c <HAL_RCC_GetSysClockFreq+0x40>
 800f260:	2b08      	cmp	r3, #8
 800f262:	f200 80a1 	bhi.w	800f3a8 <HAL_RCC_GetSysClockFreq+0x16c>
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <HAL_RCC_GetSysClockFreq+0x34>
 800f26a:	2b04      	cmp	r3, #4
 800f26c:	d003      	beq.n	800f276 <HAL_RCC_GetSysClockFreq+0x3a>
 800f26e:	e09b      	b.n	800f3a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f270:	4b53      	ldr	r3, [pc, #332]	; (800f3c0 <HAL_RCC_GetSysClockFreq+0x184>)
 800f272:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800f274:	e09b      	b.n	800f3ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f276:	4b53      	ldr	r3, [pc, #332]	; (800f3c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800f278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800f27a:	e098      	b.n	800f3ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f27c:	4b4f      	ldr	r3, [pc, #316]	; (800f3bc <HAL_RCC_GetSysClockFreq+0x180>)
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f284:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f286:	4b4d      	ldr	r3, [pc, #308]	; (800f3bc <HAL_RCC_GetSysClockFreq+0x180>)
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d028      	beq.n	800f2e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f292:	4b4a      	ldr	r3, [pc, #296]	; (800f3bc <HAL_RCC_GetSysClockFreq+0x180>)
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	099b      	lsrs	r3, r3, #6
 800f298:	2200      	movs	r2, #0
 800f29a:	623b      	str	r3, [r7, #32]
 800f29c:	627a      	str	r2, [r7, #36]	; 0x24
 800f29e:	6a3b      	ldr	r3, [r7, #32]
 800f2a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	4b47      	ldr	r3, [pc, #284]	; (800f3c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800f2a8:	fb03 f201 	mul.w	r2, r3, r1
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	fb00 f303 	mul.w	r3, r0, r3
 800f2b2:	4413      	add	r3, r2
 800f2b4:	4a43      	ldr	r2, [pc, #268]	; (800f3c4 <HAL_RCC_GetSysClockFreq+0x188>)
 800f2b6:	fba0 1202 	umull	r1, r2, r0, r2
 800f2ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2bc:	460a      	mov	r2, r1
 800f2be:	62ba      	str	r2, [r7, #40]	; 0x28
 800f2c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2c2:	4413      	add	r3, r2
 800f2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	61bb      	str	r3, [r7, #24]
 800f2cc:	61fa      	str	r2, [r7, #28]
 800f2ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f2d6:	f7f1 fc43 	bl	8000b60 <__aeabi_uldivmod>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	4613      	mov	r3, r2
 800f2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e2:	e053      	b.n	800f38c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f2e4:	4b35      	ldr	r3, [pc, #212]	; (800f3bc <HAL_RCC_GetSysClockFreq+0x180>)
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	099b      	lsrs	r3, r3, #6
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	613b      	str	r3, [r7, #16]
 800f2ee:	617a      	str	r2, [r7, #20]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800f2f6:	f04f 0b00 	mov.w	fp, #0
 800f2fa:	4652      	mov	r2, sl
 800f2fc:	465b      	mov	r3, fp
 800f2fe:	f04f 0000 	mov.w	r0, #0
 800f302:	f04f 0100 	mov.w	r1, #0
 800f306:	0159      	lsls	r1, r3, #5
 800f308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f30c:	0150      	lsls	r0, r2, #5
 800f30e:	4602      	mov	r2, r0
 800f310:	460b      	mov	r3, r1
 800f312:	ebb2 080a 	subs.w	r8, r2, sl
 800f316:	eb63 090b 	sbc.w	r9, r3, fp
 800f31a:	f04f 0200 	mov.w	r2, #0
 800f31e:	f04f 0300 	mov.w	r3, #0
 800f322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800f326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800f32a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800f32e:	ebb2 0408 	subs.w	r4, r2, r8
 800f332:	eb63 0509 	sbc.w	r5, r3, r9
 800f336:	f04f 0200 	mov.w	r2, #0
 800f33a:	f04f 0300 	mov.w	r3, #0
 800f33e:	00eb      	lsls	r3, r5, #3
 800f340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f344:	00e2      	lsls	r2, r4, #3
 800f346:	4614      	mov	r4, r2
 800f348:	461d      	mov	r5, r3
 800f34a:	eb14 030a 	adds.w	r3, r4, sl
 800f34e:	603b      	str	r3, [r7, #0]
 800f350:	eb45 030b 	adc.w	r3, r5, fp
 800f354:	607b      	str	r3, [r7, #4]
 800f356:	f04f 0200 	mov.w	r2, #0
 800f35a:	f04f 0300 	mov.w	r3, #0
 800f35e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f362:	4629      	mov	r1, r5
 800f364:	028b      	lsls	r3, r1, #10
 800f366:	4621      	mov	r1, r4
 800f368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f36c:	4621      	mov	r1, r4
 800f36e:	028a      	lsls	r2, r1, #10
 800f370:	4610      	mov	r0, r2
 800f372:	4619      	mov	r1, r3
 800f374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f376:	2200      	movs	r2, #0
 800f378:	60bb      	str	r3, [r7, #8]
 800f37a:	60fa      	str	r2, [r7, #12]
 800f37c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f380:	f7f1 fbee 	bl	8000b60 <__aeabi_uldivmod>
 800f384:	4602      	mov	r2, r0
 800f386:	460b      	mov	r3, r1
 800f388:	4613      	mov	r3, r2
 800f38a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f38c:	4b0b      	ldr	r3, [pc, #44]	; (800f3bc <HAL_RCC_GetSysClockFreq+0x180>)
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	0c1b      	lsrs	r3, r3, #16
 800f392:	f003 0303 	and.w	r3, r3, #3
 800f396:	3301      	adds	r3, #1
 800f398:	005b      	lsls	r3, r3, #1
 800f39a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800f39c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800f3a6:	e002      	b.n	800f3ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f3a8:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <HAL_RCC_GetSysClockFreq+0x184>)
 800f3aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800f3ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3740      	adds	r7, #64	; 0x40
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3ba:	bf00      	nop
 800f3bc:	40023800 	.word	0x40023800
 800f3c0:	00f42400 	.word	0x00f42400
 800f3c4:	017d7840 	.word	0x017d7840

0800f3c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f3cc:	4b03      	ldr	r3, [pc, #12]	; (800f3dc <HAL_RCC_GetHCLKFreq+0x14>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	200000e4 	.word	0x200000e4

0800f3e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f3e4:	f7ff fff0 	bl	800f3c8 <HAL_RCC_GetHCLKFreq>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	4b05      	ldr	r3, [pc, #20]	; (800f400 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	0a9b      	lsrs	r3, r3, #10
 800f3f0:	f003 0307 	and.w	r3, r3, #7
 800f3f4:	4903      	ldr	r1, [pc, #12]	; (800f404 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3f6:	5ccb      	ldrb	r3, [r1, r3]
 800f3f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	40023800 	.word	0x40023800
 800f404:	08016978 	.word	0x08016978

0800f408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f40c:	f7ff ffdc 	bl	800f3c8 <HAL_RCC_GetHCLKFreq>
 800f410:	4602      	mov	r2, r0
 800f412:	4b05      	ldr	r3, [pc, #20]	; (800f428 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	0b5b      	lsrs	r3, r3, #13
 800f418:	f003 0307 	and.w	r3, r3, #7
 800f41c:	4903      	ldr	r1, [pc, #12]	; (800f42c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f41e:	5ccb      	ldrb	r3, [r1, r3]
 800f420:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f424:	4618      	mov	r0, r3
 800f426:	bd80      	pop	{r7, pc}
 800f428:	40023800 	.word	0x40023800
 800f42c:	08016978 	.word	0x08016978

0800f430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	220f      	movs	r2, #15
 800f43e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f440:	4b12      	ldr	r3, [pc, #72]	; (800f48c <HAL_RCC_GetClockConfig+0x5c>)
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	f003 0203 	and.w	r2, r3, #3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f44c:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <HAL_RCC_GetClockConfig+0x5c>)
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f458:	4b0c      	ldr	r3, [pc, #48]	; (800f48c <HAL_RCC_GetClockConfig+0x5c>)
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f464:	4b09      	ldr	r3, [pc, #36]	; (800f48c <HAL_RCC_GetClockConfig+0x5c>)
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	08db      	lsrs	r3, r3, #3
 800f46a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f472:	4b07      	ldr	r3, [pc, #28]	; (800f490 <HAL_RCC_GetClockConfig+0x60>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 0207 	and.w	r2, r3, #7
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	601a      	str	r2, [r3, #0]
}
 800f47e:	bf00      	nop
 800f480:	370c      	adds	r7, #12
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	40023800 	.word	0x40023800
 800f490:	40023c00 	.word	0x40023c00

0800f494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e041      	b.n	800f52a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d106      	bne.n	800f4c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 f839 	bl	800f532 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	3304      	adds	r3, #4
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	f000 fb8c 	bl	800fbf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800f532:	b480      	push	{r7}
 800f534:	b083      	sub	sp, #12
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f53a:	bf00      	nop
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
	...

0800f548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f556:	b2db      	uxtb	r3, r3
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d001      	beq.n	800f560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f55c:	2301      	movs	r3, #1
 800f55e:	e044      	b.n	800f5ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2202      	movs	r2, #2
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68da      	ldr	r2, [r3, #12]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f042 0201 	orr.w	r2, r2, #1
 800f576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a1e      	ldr	r2, [pc, #120]	; (800f5f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d018      	beq.n	800f5b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f58a:	d013      	beq.n	800f5b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a1a      	ldr	r2, [pc, #104]	; (800f5fc <HAL_TIM_Base_Start_IT+0xb4>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d00e      	beq.n	800f5b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a19      	ldr	r2, [pc, #100]	; (800f600 <HAL_TIM_Base_Start_IT+0xb8>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d009      	beq.n	800f5b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4a17      	ldr	r2, [pc, #92]	; (800f604 <HAL_TIM_Base_Start_IT+0xbc>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d004      	beq.n	800f5b4 <HAL_TIM_Base_Start_IT+0x6c>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a16      	ldr	r2, [pc, #88]	; (800f608 <HAL_TIM_Base_Start_IT+0xc0>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d111      	bne.n	800f5d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	f003 0307 	and.w	r3, r3, #7
 800f5be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2b06      	cmp	r3, #6
 800f5c4:	d010      	beq.n	800f5e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f042 0201 	orr.w	r2, r2, #1
 800f5d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5d6:	e007      	b.n	800f5e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f042 0201 	orr.w	r2, r2, #1
 800f5e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	40010000 	.word	0x40010000
 800f5fc:	40000400 	.word	0x40000400
 800f600:	40000800 	.word	0x40000800
 800f604:	40000c00 	.word	0x40000c00
 800f608:	40014000 	.word	0x40014000

0800f60c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e041      	b.n	800f6a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d106      	bne.n	800f638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7f8 fdd8 	bl	80081e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2202      	movs	r2, #2
 800f63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3304      	adds	r3, #4
 800f648:	4619      	mov	r1, r3
 800f64a:	4610      	mov	r0, r2
 800f64c:	f000 fad0 	bl	800fbf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
	...

0800f6ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d109      	bne.n	800f6d0 <HAL_TIM_PWM_Start+0x24>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	bf14      	ite	ne
 800f6c8:	2301      	movne	r3, #1
 800f6ca:	2300      	moveq	r3, #0
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	e022      	b.n	800f716 <HAL_TIM_PWM_Start+0x6a>
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	2b04      	cmp	r3, #4
 800f6d4:	d109      	bne.n	800f6ea <HAL_TIM_PWM_Start+0x3e>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	bf14      	ite	ne
 800f6e2:	2301      	movne	r3, #1
 800f6e4:	2300      	moveq	r3, #0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	e015      	b.n	800f716 <HAL_TIM_PWM_Start+0x6a>
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	2b08      	cmp	r3, #8
 800f6ee:	d109      	bne.n	800f704 <HAL_TIM_PWM_Start+0x58>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	bf14      	ite	ne
 800f6fc:	2301      	movne	r3, #1
 800f6fe:	2300      	moveq	r3, #0
 800f700:	b2db      	uxtb	r3, r3
 800f702:	e008      	b.n	800f716 <HAL_TIM_PWM_Start+0x6a>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	bf14      	ite	ne
 800f710:	2301      	movne	r3, #1
 800f712:	2300      	moveq	r3, #0
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e068      	b.n	800f7f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d104      	bne.n	800f72e <HAL_TIM_PWM_Start+0x82>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2202      	movs	r2, #2
 800f728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f72c:	e013      	b.n	800f756 <HAL_TIM_PWM_Start+0xaa>
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b04      	cmp	r3, #4
 800f732:	d104      	bne.n	800f73e <HAL_TIM_PWM_Start+0x92>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2202      	movs	r2, #2
 800f738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f73c:	e00b      	b.n	800f756 <HAL_TIM_PWM_Start+0xaa>
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	2b08      	cmp	r3, #8
 800f742:	d104      	bne.n	800f74e <HAL_TIM_PWM_Start+0xa2>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2202      	movs	r2, #2
 800f748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f74c:	e003      	b.n	800f756 <HAL_TIM_PWM_Start+0xaa>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2202      	movs	r2, #2
 800f752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2201      	movs	r2, #1
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	4618      	mov	r0, r3
 800f760:	f000 fc52 	bl	8010008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4a23      	ldr	r2, [pc, #140]	; (800f7f8 <HAL_TIM_PWM_Start+0x14c>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d107      	bne.n	800f77e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f77c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4a1d      	ldr	r2, [pc, #116]	; (800f7f8 <HAL_TIM_PWM_Start+0x14c>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d018      	beq.n	800f7ba <HAL_TIM_PWM_Start+0x10e>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f790:	d013      	beq.n	800f7ba <HAL_TIM_PWM_Start+0x10e>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	4a19      	ldr	r2, [pc, #100]	; (800f7fc <HAL_TIM_PWM_Start+0x150>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d00e      	beq.n	800f7ba <HAL_TIM_PWM_Start+0x10e>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a17      	ldr	r2, [pc, #92]	; (800f800 <HAL_TIM_PWM_Start+0x154>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d009      	beq.n	800f7ba <HAL_TIM_PWM_Start+0x10e>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a16      	ldr	r2, [pc, #88]	; (800f804 <HAL_TIM_PWM_Start+0x158>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d004      	beq.n	800f7ba <HAL_TIM_PWM_Start+0x10e>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a14      	ldr	r2, [pc, #80]	; (800f808 <HAL_TIM_PWM_Start+0x15c>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d111      	bne.n	800f7de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f003 0307 	and.w	r3, r3, #7
 800f7c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2b06      	cmp	r3, #6
 800f7ca:	d010      	beq.n	800f7ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f042 0201 	orr.w	r2, r2, #1
 800f7da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7dc:	e007      	b.n	800f7ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f042 0201 	orr.w	r2, r2, #1
 800f7ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	40010000 	.word	0x40010000
 800f7fc:	40000400 	.word	0x40000400
 800f800:	40000800 	.word	0x40000800
 800f804:	40000c00 	.word	0x40000c00
 800f808:	40014000 	.word	0x40014000

0800f80c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	691b      	ldr	r3, [r3, #16]
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d122      	bne.n	800f868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d11b      	bne.n	800f868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f06f 0202 	mvn.w	r2, #2
 800f838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2201      	movs	r2, #1
 800f83e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	699b      	ldr	r3, [r3, #24]
 800f846:	f003 0303 	and.w	r3, r3, #3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d003      	beq.n	800f856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 f9b0 	bl	800fbb4 <HAL_TIM_IC_CaptureCallback>
 800f854:	e005      	b.n	800f862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 f9a2 	bl	800fba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f000 f9b3 	bl	800fbc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	691b      	ldr	r3, [r3, #16]
 800f86e:	f003 0304 	and.w	r3, r3, #4
 800f872:	2b04      	cmp	r3, #4
 800f874:	d122      	bne.n	800f8bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	f003 0304 	and.w	r3, r3, #4
 800f880:	2b04      	cmp	r3, #4
 800f882:	d11b      	bne.n	800f8bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f06f 0204 	mvn.w	r2, #4
 800f88c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2202      	movs	r2, #2
 800f892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d003      	beq.n	800f8aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 f986 	bl	800fbb4 <HAL_TIM_IC_CaptureCallback>
 800f8a8:	e005      	b.n	800f8b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 f978 	bl	800fba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 f989 	bl	800fbc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	f003 0308 	and.w	r3, r3, #8
 800f8c6:	2b08      	cmp	r3, #8
 800f8c8:	d122      	bne.n	800f910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	f003 0308 	and.w	r3, r3, #8
 800f8d4:	2b08      	cmp	r3, #8
 800f8d6:	d11b      	bne.n	800f910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f06f 0208 	mvn.w	r2, #8
 800f8e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2204      	movs	r2, #4
 800f8e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	69db      	ldr	r3, [r3, #28]
 800f8ee:	f003 0303 	and.w	r3, r3, #3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d003      	beq.n	800f8fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f95c 	bl	800fbb4 <HAL_TIM_IC_CaptureCallback>
 800f8fc:	e005      	b.n	800f90a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 f94e 	bl	800fba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f95f 	bl	800fbc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	691b      	ldr	r3, [r3, #16]
 800f916:	f003 0310 	and.w	r3, r3, #16
 800f91a:	2b10      	cmp	r3, #16
 800f91c:	d122      	bne.n	800f964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	f003 0310 	and.w	r3, r3, #16
 800f928:	2b10      	cmp	r3, #16
 800f92a:	d11b      	bne.n	800f964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f06f 0210 	mvn.w	r2, #16
 800f934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2208      	movs	r2, #8
 800f93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f946:	2b00      	cmp	r3, #0
 800f948:	d003      	beq.n	800f952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f932 	bl	800fbb4 <HAL_TIM_IC_CaptureCallback>
 800f950:	e005      	b.n	800f95e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f924 	bl	800fba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f935 	bl	800fbc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	f003 0301 	and.w	r3, r3, #1
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d10e      	bne.n	800f990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	f003 0301 	and.w	r3, r3, #1
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d107      	bne.n	800f990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f06f 0201 	mvn.w	r2, #1
 800f988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7f8 fb52 	bl	8008034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f99a:	2b80      	cmp	r3, #128	; 0x80
 800f99c:	d10e      	bne.n	800f9bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9a8:	2b80      	cmp	r3, #128	; 0x80
 800f9aa:	d107      	bne.n	800f9bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fbc4 	bl	8010144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c6:	2b40      	cmp	r3, #64	; 0x40
 800f9c8:	d10e      	bne.n	800f9e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d4:	2b40      	cmp	r3, #64	; 0x40
 800f9d6:	d107      	bne.n	800f9e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f9e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f8fa 	bl	800fbdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	f003 0320 	and.w	r3, r3, #32
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	d10e      	bne.n	800fa14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	f003 0320 	and.w	r3, r3, #32
 800fa00:	2b20      	cmp	r3, #32
 800fa02:	d107      	bne.n	800fa14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f06f 0220 	mvn.w	r2, #32
 800fa0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 fb8e 	bl	8010130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa14:	bf00      	nop
 800fa16:	3708      	adds	r7, #8
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b086      	sub	sp, #24
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d101      	bne.n	800fa3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fa36:	2302      	movs	r3, #2
 800fa38:	e0ae      	b.n	800fb98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2b0c      	cmp	r3, #12
 800fa46:	f200 809f 	bhi.w	800fb88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800fa4a:	a201      	add	r2, pc, #4	; (adr r2, 800fa50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa50:	0800fa85 	.word	0x0800fa85
 800fa54:	0800fb89 	.word	0x0800fb89
 800fa58:	0800fb89 	.word	0x0800fb89
 800fa5c:	0800fb89 	.word	0x0800fb89
 800fa60:	0800fac5 	.word	0x0800fac5
 800fa64:	0800fb89 	.word	0x0800fb89
 800fa68:	0800fb89 	.word	0x0800fb89
 800fa6c:	0800fb89 	.word	0x0800fb89
 800fa70:	0800fb07 	.word	0x0800fb07
 800fa74:	0800fb89 	.word	0x0800fb89
 800fa78:	0800fb89 	.word	0x0800fb89
 800fa7c:	0800fb89 	.word	0x0800fb89
 800fa80:	0800fb47 	.word	0x0800fb47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	68b9      	ldr	r1, [r7, #8]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f000 f930 	bl	800fcf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	699a      	ldr	r2, [r3, #24]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f042 0208 	orr.w	r2, r2, #8
 800fa9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	699a      	ldr	r2, [r3, #24]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	f022 0204 	bic.w	r2, r2, #4
 800faae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6999      	ldr	r1, [r3, #24]
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	691a      	ldr	r2, [r3, #16]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	430a      	orrs	r2, r1
 800fac0:	619a      	str	r2, [r3, #24]
      break;
 800fac2:	e064      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	68b9      	ldr	r1, [r7, #8]
 800faca:	4618      	mov	r0, r3
 800facc:	f000 f976 	bl	800fdbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	699a      	ldr	r2, [r3, #24]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	699a      	ldr	r2, [r3, #24]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6999      	ldr	r1, [r3, #24]
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	021a      	lsls	r2, r3, #8
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	430a      	orrs	r2, r1
 800fb02:	619a      	str	r2, [r3, #24]
      break;
 800fb04:	e043      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 f9c1 	bl	800fe94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	69da      	ldr	r2, [r3, #28]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f042 0208 	orr.w	r2, r2, #8
 800fb20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	69da      	ldr	r2, [r3, #28]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f022 0204 	bic.w	r2, r2, #4
 800fb30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	69d9      	ldr	r1, [r3, #28]
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	691a      	ldr	r2, [r3, #16]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	430a      	orrs	r2, r1
 800fb42:	61da      	str	r2, [r3, #28]
      break;
 800fb44:	e023      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68b9      	ldr	r1, [r7, #8]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f000 fa0b 	bl	800ff68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	69da      	ldr	r2, [r3, #28]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	69da      	ldr	r2, [r3, #28]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	69d9      	ldr	r1, [r3, #28]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	021a      	lsls	r2, r3, #8
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	430a      	orrs	r2, r1
 800fb84:	61da      	str	r2, [r3, #28]
      break;
 800fb86:	e002      	b.n	800fb8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	75fb      	strb	r3, [r7, #23]
      break;
 800fb8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fba8:	bf00      	nop
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fbbc:	bf00      	nop
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fbd0:	bf00      	nop
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fbe4:	bf00      	nop
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	4a34      	ldr	r2, [pc, #208]	; (800fcd4 <TIM_Base_SetConfig+0xe4>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d00f      	beq.n	800fc28 <TIM_Base_SetConfig+0x38>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc0e:	d00b      	beq.n	800fc28 <TIM_Base_SetConfig+0x38>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4a31      	ldr	r2, [pc, #196]	; (800fcd8 <TIM_Base_SetConfig+0xe8>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d007      	beq.n	800fc28 <TIM_Base_SetConfig+0x38>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	4a30      	ldr	r2, [pc, #192]	; (800fcdc <TIM_Base_SetConfig+0xec>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d003      	beq.n	800fc28 <TIM_Base_SetConfig+0x38>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4a2f      	ldr	r2, [pc, #188]	; (800fce0 <TIM_Base_SetConfig+0xf0>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d108      	bne.n	800fc3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a25      	ldr	r2, [pc, #148]	; (800fcd4 <TIM_Base_SetConfig+0xe4>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d01b      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc48:	d017      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4a22      	ldr	r2, [pc, #136]	; (800fcd8 <TIM_Base_SetConfig+0xe8>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d013      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4a21      	ldr	r2, [pc, #132]	; (800fcdc <TIM_Base_SetConfig+0xec>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d00f      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4a20      	ldr	r2, [pc, #128]	; (800fce0 <TIM_Base_SetConfig+0xf0>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d00b      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4a1f      	ldr	r2, [pc, #124]	; (800fce4 <TIM_Base_SetConfig+0xf4>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d007      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a1e      	ldr	r2, [pc, #120]	; (800fce8 <TIM_Base_SetConfig+0xf8>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d003      	beq.n	800fc7a <TIM_Base_SetConfig+0x8a>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a1d      	ldr	r2, [pc, #116]	; (800fcec <TIM_Base_SetConfig+0xfc>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d108      	bne.n	800fc8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	695b      	ldr	r3, [r3, #20]
 800fc96:	4313      	orrs	r3, r2
 800fc98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	689a      	ldr	r2, [r3, #8]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a08      	ldr	r2, [pc, #32]	; (800fcd4 <TIM_Base_SetConfig+0xe4>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d103      	bne.n	800fcc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	691a      	ldr	r2, [r3, #16]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	615a      	str	r2, [r3, #20]
}
 800fcc6:	bf00      	nop
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	40010000 	.word	0x40010000
 800fcd8:	40000400 	.word	0x40000400
 800fcdc:	40000800 	.word	0x40000800
 800fce0:	40000c00 	.word	0x40000c00
 800fce4:	40014000 	.word	0x40014000
 800fce8:	40014400 	.word	0x40014400
 800fcec:	40014800 	.word	0x40014800

0800fcf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	f023 0201 	bic.w	r2, r3, #1
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f023 0303 	bic.w	r3, r3, #3
 800fd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f023 0302 	bic.w	r3, r3, #2
 800fd38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	697a      	ldr	r2, [r7, #20]
 800fd40:	4313      	orrs	r3, r2
 800fd42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a1c      	ldr	r2, [pc, #112]	; (800fdb8 <TIM_OC1_SetConfig+0xc8>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d10c      	bne.n	800fd66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f023 0308 	bic.w	r3, r3, #8
 800fd52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	697a      	ldr	r2, [r7, #20]
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f023 0304 	bic.w	r3, r3, #4
 800fd64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	4a13      	ldr	r2, [pc, #76]	; (800fdb8 <TIM_OC1_SetConfig+0xc8>)
 800fd6a:	4293      	cmp	r3, r2
 800fd6c:	d111      	bne.n	800fd92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	695b      	ldr	r3, [r3, #20]
 800fd82:	693a      	ldr	r2, [r7, #16]
 800fd84:	4313      	orrs	r3, r2
 800fd86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	693a      	ldr	r2, [r7, #16]
 800fd96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	697a      	ldr	r2, [r7, #20]
 800fdaa:	621a      	str	r2, [r3, #32]
}
 800fdac:	bf00      	nop
 800fdae:	371c      	adds	r7, #28
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr
 800fdb8:	40010000 	.word	0x40010000

0800fdbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b087      	sub	sp, #28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	f023 0210 	bic.w	r2, r3, #16
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a1b      	ldr	r3, [r3, #32]
 800fdd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	021b      	lsls	r3, r3, #8
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	f023 0320 	bic.w	r3, r3, #32
 800fe06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	011b      	lsls	r3, r3, #4
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	4313      	orrs	r3, r2
 800fe12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4a1e      	ldr	r2, [pc, #120]	; (800fe90 <TIM_OC2_SetConfig+0xd4>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d10d      	bne.n	800fe38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	011b      	lsls	r3, r3, #4
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	4a15      	ldr	r2, [pc, #84]	; (800fe90 <TIM_OC2_SetConfig+0xd4>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d113      	bne.n	800fe68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	695b      	ldr	r3, [r3, #20]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	693a      	ldr	r2, [r7, #16]
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	693a      	ldr	r2, [r7, #16]
 800fe64:	4313      	orrs	r3, r2
 800fe66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	693a      	ldr	r2, [r7, #16]
 800fe6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	685a      	ldr	r2, [r3, #4]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	621a      	str	r2, [r3, #32]
}
 800fe82:	bf00      	nop
 800fe84:	371c      	adds	r7, #28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	40010000 	.word	0x40010000

0800fe94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b087      	sub	sp, #28
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a1b      	ldr	r3, [r3, #32]
 800feae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	69db      	ldr	r3, [r3, #28]
 800feba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f023 0303 	bic.w	r3, r3, #3
 800feca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	68fa      	ldr	r2, [r7, #12]
 800fed2:	4313      	orrs	r3, r2
 800fed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fedc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	021b      	lsls	r3, r3, #8
 800fee4:	697a      	ldr	r2, [r7, #20]
 800fee6:	4313      	orrs	r3, r2
 800fee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4a1d      	ldr	r2, [pc, #116]	; (800ff64 <TIM_OC3_SetConfig+0xd0>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d10d      	bne.n	800ff0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	021b      	lsls	r3, r3, #8
 800ff00:	697a      	ldr	r2, [r7, #20]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a14      	ldr	r2, [pc, #80]	; (800ff64 <TIM_OC3_SetConfig+0xd0>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d113      	bne.n	800ff3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	695b      	ldr	r3, [r3, #20]
 800ff2a:	011b      	lsls	r3, r3, #4
 800ff2c:	693a      	ldr	r2, [r7, #16]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	011b      	lsls	r3, r3, #4
 800ff38:	693a      	ldr	r2, [r7, #16]
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	697a      	ldr	r2, [r7, #20]
 800ff56:	621a      	str	r2, [r3, #32]
}
 800ff58:	bf00      	nop
 800ff5a:	371c      	adds	r7, #28
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	40010000 	.word	0x40010000

0800ff68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b087      	sub	sp, #28
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a1b      	ldr	r3, [r3, #32]
 800ff76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a1b      	ldr	r3, [r3, #32]
 800ff82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	69db      	ldr	r3, [r3, #28]
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	021b      	lsls	r3, r3, #8
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	031b      	lsls	r3, r3, #12
 800ffba:	693a      	ldr	r2, [r7, #16]
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a10      	ldr	r2, [pc, #64]	; (8010004 <TIM_OC4_SetConfig+0x9c>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d109      	bne.n	800ffdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ffce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	019b      	lsls	r3, r3, #6
 800ffd6:	697a      	ldr	r2, [r7, #20]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	697a      	ldr	r2, [r7, #20]
 800ffe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	621a      	str	r2, [r3, #32]
}
 800fff6:	bf00      	nop
 800fff8:	371c      	adds	r7, #28
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	40010000 	.word	0x40010000

08010008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010008:	b480      	push	{r7}
 801000a:	b087      	sub	sp, #28
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	f003 031f 	and.w	r3, r3, #31
 801001a:	2201      	movs	r2, #1
 801001c:	fa02 f303 	lsl.w	r3, r2, r3
 8010020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	6a1a      	ldr	r2, [r3, #32]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	43db      	mvns	r3, r3
 801002a:	401a      	ands	r2, r3
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6a1a      	ldr	r2, [r3, #32]
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	f003 031f 	and.w	r3, r3, #31
 801003a:	6879      	ldr	r1, [r7, #4]
 801003c:	fa01 f303 	lsl.w	r3, r1, r3
 8010040:	431a      	orrs	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	621a      	str	r2, [r3, #32]
}
 8010046:	bf00      	nop
 8010048:	371c      	adds	r7, #28
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
	...

08010054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010064:	2b01      	cmp	r3, #1
 8010066:	d101      	bne.n	801006c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010068:	2302      	movs	r3, #2
 801006a:	e050      	b.n	801010e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2202      	movs	r2, #2
 8010078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	689b      	ldr	r3, [r3, #8]
 801008a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	4313      	orrs	r3, r2
 801009c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a1c      	ldr	r2, [pc, #112]	; (801011c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d018      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100b8:	d013      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a18      	ldr	r2, [pc, #96]	; (8010120 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d00e      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a16      	ldr	r2, [pc, #88]	; (8010124 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d009      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a15      	ldr	r2, [pc, #84]	; (8010128 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d004      	beq.n	80100e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a13      	ldr	r2, [pc, #76]	; (801012c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d10c      	bne.n	80100fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801010c:	2300      	movs	r3, #0
}
 801010e:	4618      	mov	r0, r3
 8010110:	3714      	adds	r7, #20
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	40010000 	.word	0x40010000
 8010120:	40000400 	.word	0x40000400
 8010124:	40000800 	.word	0x40000800
 8010128:	40000c00 	.word	0x40000c00
 801012c:	40014000 	.word	0x40014000

08010130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010166:	2301      	movs	r3, #1
 8010168:	e03f      	b.n	80101ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7f8 f88e 	bl	80082a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2224      	movs	r2, #36	; 0x24
 8010188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	68da      	ldr	r2, [r3, #12]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801019a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 ff8b 	bl	80110b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	691a      	ldr	r2, [r3, #16]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80101b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	695a      	ldr	r2, [r3, #20]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80101c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	68da      	ldr	r2, [r3, #12]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80101d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2220      	movs	r2, #32
 80101dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2220      	movs	r2, #32
 80101e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80101e8:	2300      	movs	r3, #0
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3708      	adds	r7, #8
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b082      	sub	sp, #8
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d101      	bne.n	8010204 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010200:	2301      	movs	r3, #1
 8010202:	e021      	b.n	8010248 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2224      	movs	r2, #36	; 0x24
 8010208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	68da      	ldr	r2, [r3, #12]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801021a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f7f8 f8c3 	bl	80083a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2200      	movs	r2, #0
 8010242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b08a      	sub	sp, #40	; 0x28
 8010254:	af02      	add	r7, sp, #8
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	603b      	str	r3, [r7, #0]
 801025c:	4613      	mov	r3, r2
 801025e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010260:	2300      	movs	r3, #0
 8010262:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801026a:	b2db      	uxtb	r3, r3
 801026c:	2b20      	cmp	r3, #32
 801026e:	d17c      	bne.n	801036a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d002      	beq.n	801027c <HAL_UART_Transmit+0x2c>
 8010276:	88fb      	ldrh	r3, [r7, #6]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801027c:	2301      	movs	r3, #1
 801027e:	e075      	b.n	801036c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010286:	2b01      	cmp	r3, #1
 8010288:	d101      	bne.n	801028e <HAL_UART_Transmit+0x3e>
 801028a:	2302      	movs	r3, #2
 801028c:	e06e      	b.n	801036c <HAL_UART_Transmit+0x11c>
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2201      	movs	r2, #1
 8010292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2221      	movs	r2, #33	; 0x21
 80102a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80102a4:	f7fa ff46 	bl	800b134 <HAL_GetTick>
 80102a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	88fa      	ldrh	r2, [r7, #6]
 80102ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	88fa      	ldrh	r2, [r7, #6]
 80102b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102be:	d108      	bne.n	80102d2 <HAL_UART_Transmit+0x82>
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d104      	bne.n	80102d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80102c8:	2300      	movs	r3, #0
 80102ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	61bb      	str	r3, [r7, #24]
 80102d0:	e003      	b.n	80102da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102d6:	2300      	movs	r3, #0
 80102d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2200      	movs	r2, #0
 80102de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80102e2:	e02a      	b.n	801033a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	2200      	movs	r2, #0
 80102ec:	2180      	movs	r1, #128	; 0x80
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f000 fc3c 	bl	8010b6c <UART_WaitOnFlagUntilTimeout>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d001      	beq.n	80102fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80102fa:	2303      	movs	r3, #3
 80102fc:	e036      	b.n	801036c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d10b      	bne.n	801031c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	881b      	ldrh	r3, [r3, #0]
 8010308:	461a      	mov	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010312:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	3302      	adds	r3, #2
 8010318:	61bb      	str	r3, [r7, #24]
 801031a:	e007      	b.n	801032c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	781a      	ldrb	r2, [r3, #0]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	3301      	adds	r3, #1
 801032a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010330:	b29b      	uxth	r3, r3
 8010332:	3b01      	subs	r3, #1
 8010334:	b29a      	uxth	r2, r3
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801033e:	b29b      	uxth	r3, r3
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1cf      	bne.n	80102e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	2200      	movs	r2, #0
 801034c:	2140      	movs	r1, #64	; 0x40
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f000 fc0c 	bl	8010b6c <UART_WaitOnFlagUntilTimeout>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801035a:	2303      	movs	r3, #3
 801035c:	e006      	b.n	801036c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2220      	movs	r2, #32
 8010362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010366:	2300      	movs	r3, #0
 8010368:	e000      	b.n	801036c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801036a:	2302      	movs	r3, #2
  }
}
 801036c:	4618      	mov	r0, r3
 801036e:	3720      	adds	r7, #32
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	4613      	mov	r3, r2
 8010380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b20      	cmp	r3, #32
 801038c:	d11d      	bne.n	80103ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <HAL_UART_Receive_IT+0x26>
 8010394:	88fb      	ldrh	r3, [r7, #6]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d101      	bne.n	801039e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801039a:	2301      	movs	r3, #1
 801039c:	e016      	b.n	80103cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d101      	bne.n	80103ac <HAL_UART_Receive_IT+0x38>
 80103a8:	2302      	movs	r3, #2
 80103aa:	e00f      	b.n	80103cc <HAL_UART_Receive_IT+0x58>
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80103ba:	88fb      	ldrh	r3, [r7, #6]
 80103bc:	461a      	mov	r2, r3
 80103be:	68b9      	ldr	r1, [r7, #8]
 80103c0:	68f8      	ldr	r0, [r7, #12]
 80103c2:	f000 fc41 	bl	8010c48 <UART_Start_Receive_IT>
 80103c6:	4603      	mov	r3, r0
 80103c8:	e000      	b.n	80103cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80103ca:	2302      	movs	r3, #2
  }
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b0a2      	sub	sp, #136	; 0x88
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80103dc:	2301      	movs	r3, #1
 80103de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	330c      	adds	r3, #12
 80103e8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ec:	e853 3f00 	ldrex	r3, [r3]
 80103f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80103f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103f4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80103f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	330c      	adds	r3, #12
 8010402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010408:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801040c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801040e:	e841 2300 	strex	r3, r2, [r1]
 8010412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1e3      	bne.n	80103e2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3314      	adds	r3, #20
 8010420:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010424:	e853 3f00 	ldrex	r3, [r3]
 8010428:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801042a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801042c:	f023 0301 	bic.w	r3, r3, #1
 8010430:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3314      	adds	r3, #20
 8010438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801043a:	65ba      	str	r2, [r7, #88]	; 0x58
 801043c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010442:	e841 2300 	strex	r3, r2, [r1]
 8010446:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1e5      	bne.n	801041a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010452:	2b01      	cmp	r3, #1
 8010454:	d119      	bne.n	801048a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	330c      	adds	r3, #12
 801045c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010460:	e853 3f00 	ldrex	r3, [r3]
 8010464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010468:	f023 0310 	bic.w	r3, r3, #16
 801046c:	67bb      	str	r3, [r7, #120]	; 0x78
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	330c      	adds	r3, #12
 8010474:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010476:	647a      	str	r2, [r7, #68]	; 0x44
 8010478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801047c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801047e:	e841 2300 	strex	r3, r2, [r1]
 8010482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1e5      	bne.n	8010456 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00f      	beq.n	80104b2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	695b      	ldr	r3, [r3, #20]
 8010498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801049c:	2b80      	cmp	r3, #128	; 0x80
 801049e:	d104      	bne.n	80104aa <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104a4:	4a53      	ldr	r2, [pc, #332]	; (80105f4 <HAL_UART_Abort_IT+0x220>)
 80104a6:	651a      	str	r2, [r3, #80]	; 0x50
 80104a8:	e003      	b.n	80104b2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ae:	2200      	movs	r2, #0
 80104b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00f      	beq.n	80104da <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	695b      	ldr	r3, [r3, #20]
 80104c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104c4:	2b40      	cmp	r3, #64	; 0x40
 80104c6:	d104      	bne.n	80104d2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104cc:	4a4a      	ldr	r2, [pc, #296]	; (80105f8 <HAL_UART_Abort_IT+0x224>)
 80104ce:	651a      	str	r2, [r3, #80]	; 0x50
 80104d0:	e003      	b.n	80104da <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104d6:	2200      	movs	r2, #0
 80104d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	695b      	ldr	r3, [r3, #20]
 80104e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104e4:	2b80      	cmp	r3, #128	; 0x80
 80104e6:	d12d      	bne.n	8010544 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	3314      	adds	r3, #20
 80104ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f2:	e853 3f00 	ldrex	r3, [r3]
 80104f6:	623b      	str	r3, [r7, #32]
   return(result);
 80104f8:	6a3b      	ldr	r3, [r7, #32]
 80104fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104fe:	677b      	str	r3, [r7, #116]	; 0x74
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	3314      	adds	r3, #20
 8010506:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010508:	633a      	str	r2, [r7, #48]	; 0x30
 801050a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801050c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801050e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010510:	e841 2300 	strex	r3, r2, [r1]
 8010514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1e5      	bne.n	80104e8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00f      	beq.n	8010544 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010528:	4618      	mov	r0, r3
 801052a:	f7fb fc23 	bl	800bd74 <HAL_DMA_Abort_IT>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d004      	beq.n	801053e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010538:	2200      	movs	r2, #0
 801053a:	651a      	str	r2, [r3, #80]	; 0x50
 801053c:	e002      	b.n	8010544 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 801053e:	2300      	movs	r3, #0
 8010540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	695b      	ldr	r3, [r3, #20]
 801054a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801054e:	2b40      	cmp	r3, #64	; 0x40
 8010550:	d130      	bne.n	80105b4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	3314      	adds	r3, #20
 8010558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	e853 3f00 	ldrex	r3, [r3]
 8010560:	60fb      	str	r3, [r7, #12]
   return(result);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010568:	673b      	str	r3, [r7, #112]	; 0x70
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3314      	adds	r3, #20
 8010570:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010572:	61fa      	str	r2, [r7, #28]
 8010574:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010576:	69b9      	ldr	r1, [r7, #24]
 8010578:	69fa      	ldr	r2, [r7, #28]
 801057a:	e841 2300 	strex	r3, r2, [r1]
 801057e:	617b      	str	r3, [r7, #20]
   return(result);
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1e5      	bne.n	8010552 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801058a:	2b00      	cmp	r3, #0
 801058c:	d012      	beq.n	80105b4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010592:	4618      	mov	r0, r3
 8010594:	f7fb fbee 	bl	800bd74 <HAL_DMA_Abort_IT>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d007      	beq.n	80105ae <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a2:	2200      	movs	r2, #0
 80105a4:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80105a6:	2301      	movs	r3, #1
 80105a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105ac:	e002      	b.n	80105b4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80105ae:	2300      	movs	r3, #0
 80105b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80105b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d116      	bne.n	80105ea <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2200      	movs	r2, #0
 80105c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2220      	movs	r2, #32
 80105d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2220      	movs	r2, #32
 80105da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 faab 	bl	8010b40 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3788      	adds	r7, #136	; 0x88
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	08010db3 	.word	0x08010db3
 80105f8:	08010e13 	.word	0x08010e13

080105fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b0ba      	sub	sp, #232	; 0xe8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	695b      	ldr	r3, [r3, #20]
 801061e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010622:	2300      	movs	r3, #0
 8010624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010628:	2300      	movs	r3, #0
 801062a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801062e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010632:	f003 030f 	and.w	r3, r3, #15
 8010636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801063a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10f      	bne.n	8010662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010646:	f003 0320 	and.w	r3, r3, #32
 801064a:	2b00      	cmp	r3, #0
 801064c:	d009      	beq.n	8010662 <HAL_UART_IRQHandler+0x66>
 801064e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010652:	f003 0320 	and.w	r3, r3, #32
 8010656:	2b00      	cmp	r3, #0
 8010658:	d003      	beq.n	8010662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 fc71 	bl	8010f42 <UART_Receive_IT>
      return;
 8010660:	e256      	b.n	8010b10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010666:	2b00      	cmp	r3, #0
 8010668:	f000 80de 	beq.w	8010828 <HAL_UART_IRQHandler+0x22c>
 801066c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010670:	f003 0301 	and.w	r3, r3, #1
 8010674:	2b00      	cmp	r3, #0
 8010676:	d106      	bne.n	8010686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801067c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010680:	2b00      	cmp	r3, #0
 8010682:	f000 80d1 	beq.w	8010828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801068a:	f003 0301 	and.w	r3, r3, #1
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <HAL_UART_IRQHandler+0xae>
 8010692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801069a:	2b00      	cmp	r3, #0
 801069c:	d005      	beq.n	80106aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a2:	f043 0201 	orr.w	r2, r3, #1
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80106aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106ae:	f003 0304 	and.w	r3, r3, #4
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <HAL_UART_IRQHandler+0xd2>
 80106b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106ba:	f003 0301 	and.w	r3, r3, #1
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d005      	beq.n	80106ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c6:	f043 0202 	orr.w	r2, r3, #2
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80106ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106d2:	f003 0302 	and.w	r3, r3, #2
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00b      	beq.n	80106f2 <HAL_UART_IRQHandler+0xf6>
 80106da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106de:	f003 0301 	and.w	r3, r3, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d005      	beq.n	80106f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ea:	f043 0204 	orr.w	r2, r3, #4
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80106f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106f6:	f003 0308 	and.w	r3, r3, #8
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d011      	beq.n	8010722 <HAL_UART_IRQHandler+0x126>
 80106fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010702:	f003 0320 	and.w	r3, r3, #32
 8010706:	2b00      	cmp	r3, #0
 8010708:	d105      	bne.n	8010716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801070a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801070e:	f003 0301 	and.w	r3, r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	d005      	beq.n	8010722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071a:	f043 0208 	orr.w	r2, r3, #8
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010726:	2b00      	cmp	r3, #0
 8010728:	f000 81ed 	beq.w	8010b06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801072c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010730:	f003 0320 	and.w	r3, r3, #32
 8010734:	2b00      	cmp	r3, #0
 8010736:	d008      	beq.n	801074a <HAL_UART_IRQHandler+0x14e>
 8010738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801073c:	f003 0320 	and.w	r3, r3, #32
 8010740:	2b00      	cmp	r3, #0
 8010742:	d002      	beq.n	801074a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fbfc 	bl	8010f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	695b      	ldr	r3, [r3, #20]
 8010750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010754:	2b40      	cmp	r3, #64	; 0x40
 8010756:	bf0c      	ite	eq
 8010758:	2301      	moveq	r3, #1
 801075a:	2300      	movne	r3, #0
 801075c:	b2db      	uxtb	r3, r3
 801075e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010766:	f003 0308 	and.w	r3, r3, #8
 801076a:	2b00      	cmp	r3, #0
 801076c:	d103      	bne.n	8010776 <HAL_UART_IRQHandler+0x17a>
 801076e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010772:	2b00      	cmp	r3, #0
 8010774:	d04f      	beq.n	8010816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 faa4 	bl	8010cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	695b      	ldr	r3, [r3, #20]
 8010782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010786:	2b40      	cmp	r3, #64	; 0x40
 8010788:	d141      	bne.n	801080e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	3314      	adds	r3, #20
 8010790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010798:	e853 3f00 	ldrex	r3, [r3]
 801079c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80107a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3314      	adds	r3, #20
 80107b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80107b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80107ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80107c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80107c6:	e841 2300 	strex	r3, r2, [r1]
 80107ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80107ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1d9      	bne.n	801078a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d013      	beq.n	8010806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e2:	4a7d      	ldr	r2, [pc, #500]	; (80109d8 <HAL_UART_IRQHandler+0x3dc>)
 80107e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fb fac2 	bl	800bd74 <HAL_DMA_Abort_IT>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d016      	beq.n	8010824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107fc:	687a      	ldr	r2, [r7, #4]
 80107fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010800:	4610      	mov	r0, r2
 8010802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010804:	e00e      	b.n	8010824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 f990 	bl	8010b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801080c:	e00a      	b.n	8010824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 f98c 	bl	8010b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010814:	e006      	b.n	8010824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 f988 	bl	8010b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010822:	e170      	b.n	8010b06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010824:	bf00      	nop
    return;
 8010826:	e16e      	b.n	8010b06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082c:	2b01      	cmp	r3, #1
 801082e:	f040 814a 	bne.w	8010ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010836:	f003 0310 	and.w	r3, r3, #16
 801083a:	2b00      	cmp	r3, #0
 801083c:	f000 8143 	beq.w	8010ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010844:	f003 0310 	and.w	r3, r3, #16
 8010848:	2b00      	cmp	r3, #0
 801084a:	f000 813c 	beq.w	8010ac6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801084e:	2300      	movs	r3, #0
 8010850:	60bb      	str	r3, [r7, #8]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	60bb      	str	r3, [r7, #8]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	60bb      	str	r3, [r7, #8]
 8010862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	695b      	ldr	r3, [r3, #20]
 801086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801086e:	2b40      	cmp	r3, #64	; 0x40
 8010870:	f040 80b4 	bne.w	80109dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010884:	2b00      	cmp	r3, #0
 8010886:	f000 8140 	beq.w	8010b0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801088e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010892:	429a      	cmp	r2, r3
 8010894:	f080 8139 	bcs.w	8010b0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801089e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108aa:	f000 8088 	beq.w	80109be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	330c      	adds	r3, #12
 80108b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108bc:	e853 3f00 	ldrex	r3, [r3]
 80108c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80108c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	330c      	adds	r3, #12
 80108d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80108da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80108de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80108e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80108ea:	e841 2300 	strex	r3, r2, [r1]
 80108ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80108f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1d9      	bne.n	80108ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	3314      	adds	r3, #20
 8010900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010904:	e853 3f00 	ldrex	r3, [r3]
 8010908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801090a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801090c:	f023 0301 	bic.w	r3, r3, #1
 8010910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	3314      	adds	r3, #20
 801091a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801091e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801092a:	e841 2300 	strex	r3, r2, [r1]
 801092e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1e1      	bne.n	80108fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3314      	adds	r3, #20
 801093c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801093e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010940:	e853 3f00 	ldrex	r3, [r3]
 8010944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801094c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	3314      	adds	r3, #20
 8010956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801095a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801095c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801095e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010962:	e841 2300 	strex	r3, r2, [r1]
 8010966:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1e3      	bne.n	8010936 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2220      	movs	r2, #32
 8010972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	330c      	adds	r3, #12
 8010982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010986:	e853 3f00 	ldrex	r3, [r3]
 801098a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801098c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801098e:	f023 0310 	bic.w	r3, r3, #16
 8010992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	330c      	adds	r3, #12
 801099c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80109a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80109a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80109a8:	e841 2300 	strex	r3, r2, [r1]
 80109ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80109ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d1e3      	bne.n	801097c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fb f96b 	bl	800bc94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	4619      	mov	r1, r3
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 f8c0 	bl	8010b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80109d4:	e099      	b.n	8010b0a <HAL_UART_IRQHandler+0x50e>
 80109d6:	bf00      	nop
 80109d8:	08010d8b 	.word	0x08010d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	1ad3      	subs	r3, r2, r3
 80109e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f000 808b 	beq.w	8010b0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80109f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 8086 	beq.w	8010b0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	330c      	adds	r3, #12
 8010a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0c:	e853 3f00 	ldrex	r3, [r3]
 8010a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	330c      	adds	r3, #12
 8010a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010a26:	647a      	str	r2, [r7, #68]	; 0x44
 8010a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a2e:	e841 2300 	strex	r3, r2, [r1]
 8010a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1e3      	bne.n	8010a02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	3314      	adds	r3, #20
 8010a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a44:	e853 3f00 	ldrex	r3, [r3]
 8010a48:	623b      	str	r3, [r7, #32]
   return(result);
 8010a4a:	6a3b      	ldr	r3, [r7, #32]
 8010a4c:	f023 0301 	bic.w	r3, r3, #1
 8010a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	3314      	adds	r3, #20
 8010a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8010a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1e3      	bne.n	8010a3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2220      	movs	r2, #32
 8010a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	330c      	adds	r3, #12
 8010a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	e853 3f00 	ldrex	r3, [r3]
 8010a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f023 0310 	bic.w	r3, r3, #16
 8010a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	330c      	adds	r3, #12
 8010aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010aa4:	61fa      	str	r2, [r7, #28]
 8010aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa8:	69b9      	ldr	r1, [r7, #24]
 8010aaa:	69fa      	ldr	r2, [r7, #28]
 8010aac:	e841 2300 	strex	r3, r2, [r1]
 8010ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1e3      	bne.n	8010a80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010abc:	4619      	mov	r1, r3
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f848 	bl	8010b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010ac4:	e023      	b.n	8010b0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d009      	beq.n	8010ae6 <HAL_UART_IRQHandler+0x4ea>
 8010ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d003      	beq.n	8010ae6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f9c7 	bl	8010e72 <UART_Transmit_IT>
    return;
 8010ae4:	e014      	b.n	8010b10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d00e      	beq.n	8010b10 <HAL_UART_IRQHandler+0x514>
 8010af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d008      	beq.n	8010b10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 fa07 	bl	8010f12 <UART_EndTransmit_IT>
    return;
 8010b04:	e004      	b.n	8010b10 <HAL_UART_IRQHandler+0x514>
    return;
 8010b06:	bf00      	nop
 8010b08:	e002      	b.n	8010b10 <HAL_UART_IRQHandler+0x514>
      return;
 8010b0a:	bf00      	nop
 8010b0c:	e000      	b.n	8010b10 <HAL_UART_IRQHandler+0x514>
      return;
 8010b0e:	bf00      	nop
  }
}
 8010b10:	37e8      	adds	r7, #232	; 0xe8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop

08010b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010b20:	bf00      	nop
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010b34:	bf00      	nop
 8010b36:	370c      	adds	r7, #12
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010b48:	bf00      	nop
 8010b4a:	370c      	adds	r7, #12
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b52:	4770      	bx	lr

08010b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010b60:	bf00      	nop
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b090      	sub	sp, #64	; 0x40
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	603b      	str	r3, [r7, #0]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b7c:	e050      	b.n	8010c20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b84:	d04c      	beq.n	8010c20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d007      	beq.n	8010b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8010b8c:	f7fa fad2 	bl	800b134 <HAL_GetTick>
 8010b90:	4602      	mov	r2, r0
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d241      	bcs.n	8010c20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	330c      	adds	r3, #12
 8010ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	e853 3f00 	ldrex	r3, [r3]
 8010baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	330c      	adds	r3, #12
 8010bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bbc:	637a      	str	r2, [r7, #52]	; 0x34
 8010bbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bc4:	e841 2300 	strex	r3, r2, [r1]
 8010bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d1e5      	bne.n	8010b9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	3314      	adds	r3, #20
 8010bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	e853 3f00 	ldrex	r3, [r3]
 8010bde:	613b      	str	r3, [r7, #16]
   return(result);
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	f023 0301 	bic.w	r3, r3, #1
 8010be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3314      	adds	r3, #20
 8010bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bf0:	623a      	str	r2, [r7, #32]
 8010bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf4:	69f9      	ldr	r1, [r7, #28]
 8010bf6:	6a3a      	ldr	r2, [r7, #32]
 8010bf8:	e841 2300 	strex	r3, r2, [r1]
 8010bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1e5      	bne.n	8010bd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2220      	movs	r2, #32
 8010c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2220      	movs	r2, #32
 8010c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2200      	movs	r2, #0
 8010c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8010c1c:	2303      	movs	r3, #3
 8010c1e:	e00f      	b.n	8010c40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	4013      	ands	r3, r2
 8010c2a:	68ba      	ldr	r2, [r7, #8]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	bf0c      	ite	eq
 8010c30:	2301      	moveq	r3, #1
 8010c32:	2300      	movne	r3, #0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	461a      	mov	r2, r3
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d09f      	beq.n	8010b7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010c3e:	2300      	movs	r3, #0
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3740      	adds	r7, #64	; 0x40
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	4613      	mov	r3, r2
 8010c54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	88fa      	ldrh	r2, [r7, #6]
 8010c60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	88fa      	ldrh	r2, [r7, #6]
 8010c66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2222      	movs	r2, #34	; 0x22
 8010c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d007      	beq.n	8010c96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68da      	ldr	r2, [r3, #12]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	695a      	ldr	r2, [r3, #20]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f042 0201 	orr.w	r2, r2, #1
 8010ca4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	68da      	ldr	r2, [r3, #12]
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f042 0220 	orr.w	r2, r2, #32
 8010cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010cb6:	2300      	movs	r3, #0
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b095      	sub	sp, #84	; 0x54
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	330c      	adds	r3, #12
 8010cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	330c      	adds	r3, #12
 8010cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010cec:	643a      	str	r2, [r7, #64]	; 0x40
 8010cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cf4:	e841 2300 	strex	r3, r2, [r1]
 8010cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1e5      	bne.n	8010ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3314      	adds	r3, #20
 8010d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	e853 3f00 	ldrex	r3, [r3]
 8010d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	f023 0301 	bic.w	r3, r3, #1
 8010d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	3314      	adds	r3, #20
 8010d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d28:	e841 2300 	strex	r3, r2, [r1]
 8010d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1e5      	bne.n	8010d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d119      	bne.n	8010d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	330c      	adds	r3, #12
 8010d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	e853 3f00 	ldrex	r3, [r3]
 8010d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	f023 0310 	bic.w	r3, r3, #16
 8010d52:	647b      	str	r3, [r7, #68]	; 0x44
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	330c      	adds	r3, #12
 8010d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d5c:	61ba      	str	r2, [r7, #24]
 8010d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d60:	6979      	ldr	r1, [r7, #20]
 8010d62:	69ba      	ldr	r2, [r7, #24]
 8010d64:	e841 2300 	strex	r3, r2, [r1]
 8010d68:	613b      	str	r3, [r7, #16]
   return(result);
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d1e5      	bne.n	8010d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2220      	movs	r2, #32
 8010d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010d7e:	bf00      	nop
 8010d80:	3754      	adds	r7, #84	; 0x54
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2200      	movs	r2, #0
 8010da2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f7ff fec1 	bl	8010b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010daa:	bf00      	nop
 8010dac:	3710      	adds	r7, #16
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b084      	sub	sp, #16
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbe:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d004      	beq.n	8010dda <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d117      	bne.n	8010e0a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2200      	movs	r2, #0
 8010de4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2200      	movs	r2, #0
 8010dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2220      	movs	r2, #32
 8010df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2220      	movs	r2, #32
 8010df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f7ff fe9c 	bl	8010b40 <HAL_UART_AbortCpltCallback>
 8010e08:	e000      	b.n	8010e0c <UART_DMATxAbortCallback+0x5a>
      return;
 8010e0a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b084      	sub	sp, #16
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e24:	2200      	movs	r2, #0
 8010e26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d004      	beq.n	8010e3a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d117      	bne.n	8010e6a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2200      	movs	r2, #0
 8010e44:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2220      	movs	r2, #32
 8010e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2220      	movs	r2, #32
 8010e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f7ff fe6c 	bl	8010b40 <HAL_UART_AbortCpltCallback>
 8010e68:	e000      	b.n	8010e6c <UART_DMARxAbortCallback+0x5a>
      return;
 8010e6a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010e72:	b480      	push	{r7}
 8010e74:	b085      	sub	sp, #20
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	2b21      	cmp	r3, #33	; 0x21
 8010e84:	d13e      	bne.n	8010f04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e8e:	d114      	bne.n	8010eba <UART_Transmit_IT+0x48>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	691b      	ldr	r3, [r3, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d110      	bne.n	8010eba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6a1b      	ldr	r3, [r3, #32]
 8010e9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	881b      	ldrh	r3, [r3, #0]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010eac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6a1b      	ldr	r3, [r3, #32]
 8010eb2:	1c9a      	adds	r2, r3, #2
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	621a      	str	r2, [r3, #32]
 8010eb8:	e008      	b.n	8010ecc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6a1b      	ldr	r3, [r3, #32]
 8010ebe:	1c59      	adds	r1, r3, #1
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	6211      	str	r1, [r2, #32]
 8010ec4:	781a      	ldrb	r2, [r3, #0]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	4619      	mov	r1, r3
 8010eda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d10f      	bne.n	8010f00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	68da      	ldr	r2, [r3, #12]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010eee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010efe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010f00:	2300      	movs	r3, #0
 8010f02:	e000      	b.n	8010f06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010f04:	2302      	movs	r3, #2
  }
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3714      	adds	r7, #20
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68da      	ldr	r2, [r3, #12]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2220      	movs	r2, #32
 8010f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7ff fdf0 	bl	8010b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3708      	adds	r7, #8
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b08c      	sub	sp, #48	; 0x30
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	2b22      	cmp	r3, #34	; 0x22
 8010f54:	f040 80ab 	bne.w	80110ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f60:	d117      	bne.n	8010f92 <UART_Receive_IT+0x50>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d113      	bne.n	8010f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f8a:	1c9a      	adds	r2, r3, #2
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8010f90:	e026      	b.n	8010fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fa4:	d007      	beq.n	8010fb6 <UART_Receive_IT+0x74>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10a      	bne.n	8010fc4 <UART_Receive_IT+0x82>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	691b      	ldr	r3, [r3, #16]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d106      	bne.n	8010fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc0:	701a      	strb	r2, [r3, #0]
 8010fc2:	e008      	b.n	8010fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fd0:	b2da      	uxtb	r2, r3
 8010fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fda:	1c5a      	adds	r2, r3, #1
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	4619      	mov	r1, r3
 8010fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d15a      	bne.n	80110aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	68da      	ldr	r2, [r3, #12]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	f022 0220 	bic.w	r2, r2, #32
 8011002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	68da      	ldr	r2, [r3, #12]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	695a      	ldr	r2, [r3, #20]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f022 0201 	bic.w	r2, r2, #1
 8011022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2220      	movs	r2, #32
 8011028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011030:	2b01      	cmp	r3, #1
 8011032:	d135      	bne.n	80110a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	330c      	adds	r3, #12
 8011040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	e853 3f00 	ldrex	r3, [r3]
 8011048:	613b      	str	r3, [r7, #16]
   return(result);
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	f023 0310 	bic.w	r3, r3, #16
 8011050:	627b      	str	r3, [r7, #36]	; 0x24
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	330c      	adds	r3, #12
 8011058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801105a:	623a      	str	r2, [r7, #32]
 801105c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801105e:	69f9      	ldr	r1, [r7, #28]
 8011060:	6a3a      	ldr	r2, [r7, #32]
 8011062:	e841 2300 	strex	r3, r2, [r1]
 8011066:	61bb      	str	r3, [r7, #24]
   return(result);
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1e5      	bne.n	801103a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f003 0310 	and.w	r3, r3, #16
 8011078:	2b10      	cmp	r3, #16
 801107a:	d10a      	bne.n	8011092 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801107c:	2300      	movs	r3, #0
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	60fb      	str	r3, [r7, #12]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	60fb      	str	r3, [r7, #12]
 8011090:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011096:	4619      	mov	r1, r3
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7ff fd5b 	bl	8010b54 <HAL_UARTEx_RxEventCallback>
 801109e:	e002      	b.n	80110a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7f6 ffa3 	bl	8007fec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80110a6:	2300      	movs	r3, #0
 80110a8:	e002      	b.n	80110b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	e000      	b.n	80110b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80110ae:	2302      	movs	r3, #2
  }
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3730      	adds	r7, #48	; 0x30
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110bc:	b0c0      	sub	sp, #256	; 0x100
 80110be:	af00      	add	r7, sp, #0
 80110c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	691b      	ldr	r3, [r3, #16]
 80110cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80110d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110d4:	68d9      	ldr	r1, [r3, #12]
 80110d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	ea40 0301 	orr.w	r3, r0, r1
 80110e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80110e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110e6:	689a      	ldr	r2, [r3, #8]
 80110e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	431a      	orrs	r2, r3
 80110f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110f4:	695b      	ldr	r3, [r3, #20]
 80110f6:	431a      	orrs	r2, r3
 80110f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80110fc:	69db      	ldr	r3, [r3, #28]
 80110fe:	4313      	orrs	r3, r2
 8011100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011110:	f021 010c 	bic.w	r1, r1, #12
 8011114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801111e:	430b      	orrs	r3, r1
 8011120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	695b      	ldr	r3, [r3, #20]
 801112a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801112e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011132:	6999      	ldr	r1, [r3, #24]
 8011134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	ea40 0301 	orr.w	r3, r0, r1
 801113e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	4b8f      	ldr	r3, [pc, #572]	; (8011384 <UART_SetConfig+0x2cc>)
 8011148:	429a      	cmp	r2, r3
 801114a:	d005      	beq.n	8011158 <UART_SetConfig+0xa0>
 801114c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	4b8d      	ldr	r3, [pc, #564]	; (8011388 <UART_SetConfig+0x2d0>)
 8011154:	429a      	cmp	r2, r3
 8011156:	d104      	bne.n	8011162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011158:	f7fe f956 	bl	800f408 <HAL_RCC_GetPCLK2Freq>
 801115c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8011160:	e003      	b.n	801116a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011162:	f7fe f93d 	bl	800f3e0 <HAL_RCC_GetPCLK1Freq>
 8011166:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801116a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801116e:	69db      	ldr	r3, [r3, #28]
 8011170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011174:	f040 810c 	bne.w	8011390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801117c:	2200      	movs	r2, #0
 801117e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801118a:	4622      	mov	r2, r4
 801118c:	462b      	mov	r3, r5
 801118e:	1891      	adds	r1, r2, r2
 8011190:	65b9      	str	r1, [r7, #88]	; 0x58
 8011192:	415b      	adcs	r3, r3
 8011194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801119a:	4621      	mov	r1, r4
 801119c:	eb12 0801 	adds.w	r8, r2, r1
 80111a0:	4629      	mov	r1, r5
 80111a2:	eb43 0901 	adc.w	r9, r3, r1
 80111a6:	f04f 0200 	mov.w	r2, #0
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80111b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80111b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80111ba:	4690      	mov	r8, r2
 80111bc:	4699      	mov	r9, r3
 80111be:	4623      	mov	r3, r4
 80111c0:	eb18 0303 	adds.w	r3, r8, r3
 80111c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80111c8:	462b      	mov	r3, r5
 80111ca:	eb49 0303 	adc.w	r3, r9, r3
 80111ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80111d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80111de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80111e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80111e6:	460b      	mov	r3, r1
 80111e8:	18db      	adds	r3, r3, r3
 80111ea:	653b      	str	r3, [r7, #80]	; 0x50
 80111ec:	4613      	mov	r3, r2
 80111ee:	eb42 0303 	adc.w	r3, r2, r3
 80111f2:	657b      	str	r3, [r7, #84]	; 0x54
 80111f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80111f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80111fc:	f7ef fcb0 	bl	8000b60 <__aeabi_uldivmod>
 8011200:	4602      	mov	r2, r0
 8011202:	460b      	mov	r3, r1
 8011204:	4b61      	ldr	r3, [pc, #388]	; (801138c <UART_SetConfig+0x2d4>)
 8011206:	fba3 2302 	umull	r2, r3, r3, r2
 801120a:	095b      	lsrs	r3, r3, #5
 801120c:	011c      	lsls	r4, r3, #4
 801120e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011212:	2200      	movs	r2, #0
 8011214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011218:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801121c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8011220:	4642      	mov	r2, r8
 8011222:	464b      	mov	r3, r9
 8011224:	1891      	adds	r1, r2, r2
 8011226:	64b9      	str	r1, [r7, #72]	; 0x48
 8011228:	415b      	adcs	r3, r3
 801122a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801122c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8011230:	4641      	mov	r1, r8
 8011232:	eb12 0a01 	adds.w	sl, r2, r1
 8011236:	4649      	mov	r1, r9
 8011238:	eb43 0b01 	adc.w	fp, r3, r1
 801123c:	f04f 0200 	mov.w	r2, #0
 8011240:	f04f 0300 	mov.w	r3, #0
 8011244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801124c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011250:	4692      	mov	sl, r2
 8011252:	469b      	mov	fp, r3
 8011254:	4643      	mov	r3, r8
 8011256:	eb1a 0303 	adds.w	r3, sl, r3
 801125a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801125e:	464b      	mov	r3, r9
 8011260:	eb4b 0303 	adc.w	r3, fp, r3
 8011264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011274:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801127c:	460b      	mov	r3, r1
 801127e:	18db      	adds	r3, r3, r3
 8011280:	643b      	str	r3, [r7, #64]	; 0x40
 8011282:	4613      	mov	r3, r2
 8011284:	eb42 0303 	adc.w	r3, r2, r3
 8011288:	647b      	str	r3, [r7, #68]	; 0x44
 801128a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801128e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011292:	f7ef fc65 	bl	8000b60 <__aeabi_uldivmod>
 8011296:	4602      	mov	r2, r0
 8011298:	460b      	mov	r3, r1
 801129a:	4611      	mov	r1, r2
 801129c:	4b3b      	ldr	r3, [pc, #236]	; (801138c <UART_SetConfig+0x2d4>)
 801129e:	fba3 2301 	umull	r2, r3, r3, r1
 80112a2:	095b      	lsrs	r3, r3, #5
 80112a4:	2264      	movs	r2, #100	; 0x64
 80112a6:	fb02 f303 	mul.w	r3, r2, r3
 80112aa:	1acb      	subs	r3, r1, r3
 80112ac:	00db      	lsls	r3, r3, #3
 80112ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80112b2:	4b36      	ldr	r3, [pc, #216]	; (801138c <UART_SetConfig+0x2d4>)
 80112b4:	fba3 2302 	umull	r2, r3, r3, r2
 80112b8:	095b      	lsrs	r3, r3, #5
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80112c0:	441c      	add	r4, r3
 80112c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80112c6:	2200      	movs	r2, #0
 80112c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80112cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80112d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80112d4:	4642      	mov	r2, r8
 80112d6:	464b      	mov	r3, r9
 80112d8:	1891      	adds	r1, r2, r2
 80112da:	63b9      	str	r1, [r7, #56]	; 0x38
 80112dc:	415b      	adcs	r3, r3
 80112de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80112e4:	4641      	mov	r1, r8
 80112e6:	1851      	adds	r1, r2, r1
 80112e8:	6339      	str	r1, [r7, #48]	; 0x30
 80112ea:	4649      	mov	r1, r9
 80112ec:	414b      	adcs	r3, r1
 80112ee:	637b      	str	r3, [r7, #52]	; 0x34
 80112f0:	f04f 0200 	mov.w	r2, #0
 80112f4:	f04f 0300 	mov.w	r3, #0
 80112f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80112fc:	4659      	mov	r1, fp
 80112fe:	00cb      	lsls	r3, r1, #3
 8011300:	4651      	mov	r1, sl
 8011302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011306:	4651      	mov	r1, sl
 8011308:	00ca      	lsls	r2, r1, #3
 801130a:	4610      	mov	r0, r2
 801130c:	4619      	mov	r1, r3
 801130e:	4603      	mov	r3, r0
 8011310:	4642      	mov	r2, r8
 8011312:	189b      	adds	r3, r3, r2
 8011314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011318:	464b      	mov	r3, r9
 801131a:	460a      	mov	r2, r1
 801131c:	eb42 0303 	adc.w	r3, r2, r3
 8011320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011330:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8011338:	460b      	mov	r3, r1
 801133a:	18db      	adds	r3, r3, r3
 801133c:	62bb      	str	r3, [r7, #40]	; 0x28
 801133e:	4613      	mov	r3, r2
 8011340:	eb42 0303 	adc.w	r3, r2, r3
 8011344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801134a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801134e:	f7ef fc07 	bl	8000b60 <__aeabi_uldivmod>
 8011352:	4602      	mov	r2, r0
 8011354:	460b      	mov	r3, r1
 8011356:	4b0d      	ldr	r3, [pc, #52]	; (801138c <UART_SetConfig+0x2d4>)
 8011358:	fba3 1302 	umull	r1, r3, r3, r2
 801135c:	095b      	lsrs	r3, r3, #5
 801135e:	2164      	movs	r1, #100	; 0x64
 8011360:	fb01 f303 	mul.w	r3, r1, r3
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	3332      	adds	r3, #50	; 0x32
 801136a:	4a08      	ldr	r2, [pc, #32]	; (801138c <UART_SetConfig+0x2d4>)
 801136c:	fba2 2303 	umull	r2, r3, r2, r3
 8011370:	095b      	lsrs	r3, r3, #5
 8011372:	f003 0207 	and.w	r2, r3, #7
 8011376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4422      	add	r2, r4
 801137e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011380:	e106      	b.n	8011590 <UART_SetConfig+0x4d8>
 8011382:	bf00      	nop
 8011384:	40011000 	.word	0x40011000
 8011388:	40011400 	.word	0x40011400
 801138c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011394:	2200      	movs	r2, #0
 8011396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801139a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801139e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80113a2:	4642      	mov	r2, r8
 80113a4:	464b      	mov	r3, r9
 80113a6:	1891      	adds	r1, r2, r2
 80113a8:	6239      	str	r1, [r7, #32]
 80113aa:	415b      	adcs	r3, r3
 80113ac:	627b      	str	r3, [r7, #36]	; 0x24
 80113ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80113b2:	4641      	mov	r1, r8
 80113b4:	1854      	adds	r4, r2, r1
 80113b6:	4649      	mov	r1, r9
 80113b8:	eb43 0501 	adc.w	r5, r3, r1
 80113bc:	f04f 0200 	mov.w	r2, #0
 80113c0:	f04f 0300 	mov.w	r3, #0
 80113c4:	00eb      	lsls	r3, r5, #3
 80113c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80113ca:	00e2      	lsls	r2, r4, #3
 80113cc:	4614      	mov	r4, r2
 80113ce:	461d      	mov	r5, r3
 80113d0:	4643      	mov	r3, r8
 80113d2:	18e3      	adds	r3, r4, r3
 80113d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80113d8:	464b      	mov	r3, r9
 80113da:	eb45 0303 	adc.w	r3, r5, r3
 80113de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80113e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80113ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80113f2:	f04f 0200 	mov.w	r2, #0
 80113f6:	f04f 0300 	mov.w	r3, #0
 80113fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80113fe:	4629      	mov	r1, r5
 8011400:	008b      	lsls	r3, r1, #2
 8011402:	4621      	mov	r1, r4
 8011404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011408:	4621      	mov	r1, r4
 801140a:	008a      	lsls	r2, r1, #2
 801140c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011410:	f7ef fba6 	bl	8000b60 <__aeabi_uldivmod>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	4b60      	ldr	r3, [pc, #384]	; (801159c <UART_SetConfig+0x4e4>)
 801141a:	fba3 2302 	umull	r2, r3, r3, r2
 801141e:	095b      	lsrs	r3, r3, #5
 8011420:	011c      	lsls	r4, r3, #4
 8011422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011426:	2200      	movs	r2, #0
 8011428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801142c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011434:	4642      	mov	r2, r8
 8011436:	464b      	mov	r3, r9
 8011438:	1891      	adds	r1, r2, r2
 801143a:	61b9      	str	r1, [r7, #24]
 801143c:	415b      	adcs	r3, r3
 801143e:	61fb      	str	r3, [r7, #28]
 8011440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011444:	4641      	mov	r1, r8
 8011446:	1851      	adds	r1, r2, r1
 8011448:	6139      	str	r1, [r7, #16]
 801144a:	4649      	mov	r1, r9
 801144c:	414b      	adcs	r3, r1
 801144e:	617b      	str	r3, [r7, #20]
 8011450:	f04f 0200 	mov.w	r2, #0
 8011454:	f04f 0300 	mov.w	r3, #0
 8011458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801145c:	4659      	mov	r1, fp
 801145e:	00cb      	lsls	r3, r1, #3
 8011460:	4651      	mov	r1, sl
 8011462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011466:	4651      	mov	r1, sl
 8011468:	00ca      	lsls	r2, r1, #3
 801146a:	4610      	mov	r0, r2
 801146c:	4619      	mov	r1, r3
 801146e:	4603      	mov	r3, r0
 8011470:	4642      	mov	r2, r8
 8011472:	189b      	adds	r3, r3, r2
 8011474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011478:	464b      	mov	r3, r9
 801147a:	460a      	mov	r2, r1
 801147c:	eb42 0303 	adc.w	r3, r2, r3
 8011480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	67bb      	str	r3, [r7, #120]	; 0x78
 801148e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011490:	f04f 0200 	mov.w	r2, #0
 8011494:	f04f 0300 	mov.w	r3, #0
 8011498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801149c:	4649      	mov	r1, r9
 801149e:	008b      	lsls	r3, r1, #2
 80114a0:	4641      	mov	r1, r8
 80114a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80114a6:	4641      	mov	r1, r8
 80114a8:	008a      	lsls	r2, r1, #2
 80114aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80114ae:	f7ef fb57 	bl	8000b60 <__aeabi_uldivmod>
 80114b2:	4602      	mov	r2, r0
 80114b4:	460b      	mov	r3, r1
 80114b6:	4611      	mov	r1, r2
 80114b8:	4b38      	ldr	r3, [pc, #224]	; (801159c <UART_SetConfig+0x4e4>)
 80114ba:	fba3 2301 	umull	r2, r3, r3, r1
 80114be:	095b      	lsrs	r3, r3, #5
 80114c0:	2264      	movs	r2, #100	; 0x64
 80114c2:	fb02 f303 	mul.w	r3, r2, r3
 80114c6:	1acb      	subs	r3, r1, r3
 80114c8:	011b      	lsls	r3, r3, #4
 80114ca:	3332      	adds	r3, #50	; 0x32
 80114cc:	4a33      	ldr	r2, [pc, #204]	; (801159c <UART_SetConfig+0x4e4>)
 80114ce:	fba2 2303 	umull	r2, r3, r2, r3
 80114d2:	095b      	lsrs	r3, r3, #5
 80114d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114d8:	441c      	add	r4, r3
 80114da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80114de:	2200      	movs	r2, #0
 80114e0:	673b      	str	r3, [r7, #112]	; 0x70
 80114e2:	677a      	str	r2, [r7, #116]	; 0x74
 80114e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80114e8:	4642      	mov	r2, r8
 80114ea:	464b      	mov	r3, r9
 80114ec:	1891      	adds	r1, r2, r2
 80114ee:	60b9      	str	r1, [r7, #8]
 80114f0:	415b      	adcs	r3, r3
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80114f8:	4641      	mov	r1, r8
 80114fa:	1851      	adds	r1, r2, r1
 80114fc:	6039      	str	r1, [r7, #0]
 80114fe:	4649      	mov	r1, r9
 8011500:	414b      	adcs	r3, r1
 8011502:	607b      	str	r3, [r7, #4]
 8011504:	f04f 0200 	mov.w	r2, #0
 8011508:	f04f 0300 	mov.w	r3, #0
 801150c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011510:	4659      	mov	r1, fp
 8011512:	00cb      	lsls	r3, r1, #3
 8011514:	4651      	mov	r1, sl
 8011516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801151a:	4651      	mov	r1, sl
 801151c:	00ca      	lsls	r2, r1, #3
 801151e:	4610      	mov	r0, r2
 8011520:	4619      	mov	r1, r3
 8011522:	4603      	mov	r3, r0
 8011524:	4642      	mov	r2, r8
 8011526:	189b      	adds	r3, r3, r2
 8011528:	66bb      	str	r3, [r7, #104]	; 0x68
 801152a:	464b      	mov	r3, r9
 801152c:	460a      	mov	r2, r1
 801152e:	eb42 0303 	adc.w	r3, r2, r3
 8011532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	2200      	movs	r2, #0
 801153c:	663b      	str	r3, [r7, #96]	; 0x60
 801153e:	667a      	str	r2, [r7, #100]	; 0x64
 8011540:	f04f 0200 	mov.w	r2, #0
 8011544:	f04f 0300 	mov.w	r3, #0
 8011548:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801154c:	4649      	mov	r1, r9
 801154e:	008b      	lsls	r3, r1, #2
 8011550:	4641      	mov	r1, r8
 8011552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011556:	4641      	mov	r1, r8
 8011558:	008a      	lsls	r2, r1, #2
 801155a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801155e:	f7ef faff 	bl	8000b60 <__aeabi_uldivmod>
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	4b0d      	ldr	r3, [pc, #52]	; (801159c <UART_SetConfig+0x4e4>)
 8011568:	fba3 1302 	umull	r1, r3, r3, r2
 801156c:	095b      	lsrs	r3, r3, #5
 801156e:	2164      	movs	r1, #100	; 0x64
 8011570:	fb01 f303 	mul.w	r3, r1, r3
 8011574:	1ad3      	subs	r3, r2, r3
 8011576:	011b      	lsls	r3, r3, #4
 8011578:	3332      	adds	r3, #50	; 0x32
 801157a:	4a08      	ldr	r2, [pc, #32]	; (801159c <UART_SetConfig+0x4e4>)
 801157c:	fba2 2303 	umull	r2, r3, r2, r3
 8011580:	095b      	lsrs	r3, r3, #5
 8011582:	f003 020f 	and.w	r2, r3, #15
 8011586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4422      	add	r2, r4
 801158e:	609a      	str	r2, [r3, #8]
}
 8011590:	bf00      	nop
 8011592:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011596:	46bd      	mov	sp, r7
 8011598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801159c:	51eb851f 	.word	0x51eb851f

080115a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80115a0:	b084      	sub	sp, #16
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b084      	sub	sp, #16
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	f107 001c 	add.w	r0, r7, #28
 80115ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d122      	bne.n	80115fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80115cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80115e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d105      	bne.n	80115f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f001 fbee 	bl	8012dd4 <USB_CoreReset>
 80115f8:	4603      	mov	r3, r0
 80115fa:	73fb      	strb	r3, [r7, #15]
 80115fc:	e01a      	b.n	8011634 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f001 fbe2 	bl	8012dd4 <USB_CoreReset>
 8011610:	4603      	mov	r3, r0
 8011612:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011616:	2b00      	cmp	r3, #0
 8011618:	d106      	bne.n	8011628 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801161e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	639a      	str	r2, [r3, #56]	; 0x38
 8011626:	e005      	b.n	8011634 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801162c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011636:	2b01      	cmp	r3, #1
 8011638:	d10b      	bne.n	8011652 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	689b      	ldr	r3, [r3, #8]
 801163e:	f043 0206 	orr.w	r2, r3, #6
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	f043 0220 	orr.w	r2, r3, #32
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011652:	7bfb      	ldrb	r3, [r7, #15]
}
 8011654:	4618      	mov	r0, r3
 8011656:	3710      	adds	r7, #16
 8011658:	46bd      	mov	sp, r7
 801165a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801165e:	b004      	add	sp, #16
 8011660:	4770      	bx	lr
	...

08011664 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011664:	b480      	push	{r7}
 8011666:	b087      	sub	sp, #28
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	4613      	mov	r3, r2
 8011670:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011672:	79fb      	ldrb	r3, [r7, #7]
 8011674:	2b02      	cmp	r3, #2
 8011676:	d165      	bne.n	8011744 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	4a41      	ldr	r2, [pc, #260]	; (8011780 <USB_SetTurnaroundTime+0x11c>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d906      	bls.n	801168e <USB_SetTurnaroundTime+0x2a>
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	4a40      	ldr	r2, [pc, #256]	; (8011784 <USB_SetTurnaroundTime+0x120>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d202      	bcs.n	801168e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011688:	230f      	movs	r3, #15
 801168a:	617b      	str	r3, [r7, #20]
 801168c:	e062      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	4a3c      	ldr	r2, [pc, #240]	; (8011784 <USB_SetTurnaroundTime+0x120>)
 8011692:	4293      	cmp	r3, r2
 8011694:	d306      	bcc.n	80116a4 <USB_SetTurnaroundTime+0x40>
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	4a3b      	ldr	r2, [pc, #236]	; (8011788 <USB_SetTurnaroundTime+0x124>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d202      	bcs.n	80116a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801169e:	230e      	movs	r3, #14
 80116a0:	617b      	str	r3, [r7, #20]
 80116a2:	e057      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	4a38      	ldr	r2, [pc, #224]	; (8011788 <USB_SetTurnaroundTime+0x124>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d306      	bcc.n	80116ba <USB_SetTurnaroundTime+0x56>
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	4a37      	ldr	r2, [pc, #220]	; (801178c <USB_SetTurnaroundTime+0x128>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d202      	bcs.n	80116ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80116b4:	230d      	movs	r3, #13
 80116b6:	617b      	str	r3, [r7, #20]
 80116b8:	e04c      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	4a33      	ldr	r2, [pc, #204]	; (801178c <USB_SetTurnaroundTime+0x128>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d306      	bcc.n	80116d0 <USB_SetTurnaroundTime+0x6c>
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	4a32      	ldr	r2, [pc, #200]	; (8011790 <USB_SetTurnaroundTime+0x12c>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d802      	bhi.n	80116d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80116ca:	230c      	movs	r3, #12
 80116cc:	617b      	str	r3, [r7, #20]
 80116ce:	e041      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	4a2f      	ldr	r2, [pc, #188]	; (8011790 <USB_SetTurnaroundTime+0x12c>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d906      	bls.n	80116e6 <USB_SetTurnaroundTime+0x82>
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	4a2e      	ldr	r2, [pc, #184]	; (8011794 <USB_SetTurnaroundTime+0x130>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d802      	bhi.n	80116e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80116e0:	230b      	movs	r3, #11
 80116e2:	617b      	str	r3, [r7, #20]
 80116e4:	e036      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	4a2a      	ldr	r2, [pc, #168]	; (8011794 <USB_SetTurnaroundTime+0x130>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d906      	bls.n	80116fc <USB_SetTurnaroundTime+0x98>
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	4a29      	ldr	r2, [pc, #164]	; (8011798 <USB_SetTurnaroundTime+0x134>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d802      	bhi.n	80116fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80116f6:	230a      	movs	r3, #10
 80116f8:	617b      	str	r3, [r7, #20]
 80116fa:	e02b      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	4a26      	ldr	r2, [pc, #152]	; (8011798 <USB_SetTurnaroundTime+0x134>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d906      	bls.n	8011712 <USB_SetTurnaroundTime+0xae>
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	4a25      	ldr	r2, [pc, #148]	; (801179c <USB_SetTurnaroundTime+0x138>)
 8011708:	4293      	cmp	r3, r2
 801170a:	d202      	bcs.n	8011712 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801170c:	2309      	movs	r3, #9
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e020      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	4a21      	ldr	r2, [pc, #132]	; (801179c <USB_SetTurnaroundTime+0x138>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d306      	bcc.n	8011728 <USB_SetTurnaroundTime+0xc4>
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	4a20      	ldr	r2, [pc, #128]	; (80117a0 <USB_SetTurnaroundTime+0x13c>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d802      	bhi.n	8011728 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011722:	2308      	movs	r3, #8
 8011724:	617b      	str	r3, [r7, #20]
 8011726:	e015      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	4a1d      	ldr	r2, [pc, #116]	; (80117a0 <USB_SetTurnaroundTime+0x13c>)
 801172c:	4293      	cmp	r3, r2
 801172e:	d906      	bls.n	801173e <USB_SetTurnaroundTime+0xda>
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	4a1c      	ldr	r2, [pc, #112]	; (80117a4 <USB_SetTurnaroundTime+0x140>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d202      	bcs.n	801173e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011738:	2307      	movs	r3, #7
 801173a:	617b      	str	r3, [r7, #20]
 801173c:	e00a      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801173e:	2306      	movs	r3, #6
 8011740:	617b      	str	r3, [r7, #20]
 8011742:	e007      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011744:	79fb      	ldrb	r3, [r7, #7]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d102      	bne.n	8011750 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801174a:	2309      	movs	r3, #9
 801174c:	617b      	str	r3, [r7, #20]
 801174e:	e001      	b.n	8011754 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011750:	2309      	movs	r3, #9
 8011752:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	68da      	ldr	r2, [r3, #12]
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	029b      	lsls	r3, r3, #10
 8011768:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801176c:	431a      	orrs	r2, r3
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	371c      	adds	r7, #28
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr
 8011780:	00d8acbf 	.word	0x00d8acbf
 8011784:	00e4e1c0 	.word	0x00e4e1c0
 8011788:	00f42400 	.word	0x00f42400
 801178c:	01067380 	.word	0x01067380
 8011790:	011a499f 	.word	0x011a499f
 8011794:	01312cff 	.word	0x01312cff
 8011798:	014ca43f 	.word	0x014ca43f
 801179c:	016e3600 	.word	0x016e3600
 80117a0:	01a6ab1f 	.word	0x01a6ab1f
 80117a4:	01e84800 	.word	0x01e84800

080117a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	f043 0201 	orr.w	r2, r3, #1
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr

080117ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80117ca:	b480      	push	{r7}
 80117cc:	b083      	sub	sp, #12
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	f023 0201 	bic.w	r2, r3, #1
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	370c      	adds	r7, #12
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	460b      	mov	r3, r1
 80117f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80117f8:	2300      	movs	r3, #0
 80117fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011808:	78fb      	ldrb	r3, [r7, #3]
 801180a:	2b01      	cmp	r3, #1
 801180c:	d115      	bne.n	801183a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801181a:	2001      	movs	r0, #1
 801181c:	f7f9 fc96 	bl	800b14c <HAL_Delay>
      ms++;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	3301      	adds	r3, #1
 8011824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f001 fa45 	bl	8012cb6 <USB_GetMode>
 801182c:	4603      	mov	r3, r0
 801182e:	2b01      	cmp	r3, #1
 8011830:	d01e      	beq.n	8011870 <USB_SetCurrentMode+0x84>
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2b31      	cmp	r3, #49	; 0x31
 8011836:	d9f0      	bls.n	801181a <USB_SetCurrentMode+0x2e>
 8011838:	e01a      	b.n	8011870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801183a:	78fb      	ldrb	r3, [r7, #3]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d115      	bne.n	801186c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801184c:	2001      	movs	r0, #1
 801184e:	f7f9 fc7d 	bl	800b14c <HAL_Delay>
      ms++;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	3301      	adds	r3, #1
 8011856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f001 fa2c 	bl	8012cb6 <USB_GetMode>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d005      	beq.n	8011870 <USB_SetCurrentMode+0x84>
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b31      	cmp	r3, #49	; 0x31
 8011868:	d9f0      	bls.n	801184c <USB_SetCurrentMode+0x60>
 801186a:	e001      	b.n	8011870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801186c:	2301      	movs	r3, #1
 801186e:	e005      	b.n	801187c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b32      	cmp	r3, #50	; 0x32
 8011874:	d101      	bne.n	801187a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011876:	2301      	movs	r3, #1
 8011878:	e000      	b.n	801187c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801187a:	2300      	movs	r3, #0
}
 801187c:	4618      	mov	r0, r3
 801187e:	3710      	adds	r7, #16
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}

08011884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011884:	b084      	sub	sp, #16
 8011886:	b580      	push	{r7, lr}
 8011888:	b086      	sub	sp, #24
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
 801188e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011896:	2300      	movs	r3, #0
 8011898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801189e:	2300      	movs	r3, #0
 80118a0:	613b      	str	r3, [r7, #16]
 80118a2:	e009      	b.n	80118b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	3340      	adds	r3, #64	; 0x40
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	4413      	add	r3, r2
 80118ae:	2200      	movs	r2, #0
 80118b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	3301      	adds	r3, #1
 80118b6:	613b      	str	r3, [r7, #16]
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	2b0e      	cmp	r3, #14
 80118bc:	d9f2      	bls.n	80118a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80118be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d11c      	bne.n	80118fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	68fa      	ldr	r2, [r7, #12]
 80118ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80118d2:	f043 0302 	orr.w	r3, r3, #2
 80118d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	639a      	str	r2, [r3, #56]	; 0x38
 80118fc:	e00b      	b.n	8011916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801190e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801191c:	461a      	mov	r2, r3
 801191e:	2300      	movs	r3, #0
 8011920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011928:	4619      	mov	r1, r3
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011930:	461a      	mov	r2, r3
 8011932:	680b      	ldr	r3, [r1, #0]
 8011934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	2b01      	cmp	r3, #1
 801193a:	d10c      	bne.n	8011956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d104      	bne.n	801194c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011942:	2100      	movs	r1, #0
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f965 	bl	8011c14 <USB_SetDevSpeed>
 801194a:	e008      	b.n	801195e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801194c:	2101      	movs	r1, #1
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 f960 	bl	8011c14 <USB_SetDevSpeed>
 8011954:	e003      	b.n	801195e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011956:	2103      	movs	r1, #3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f000 f95b 	bl	8011c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801195e:	2110      	movs	r1, #16
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f000 f8f3 	bl	8011b4c <USB_FlushTxFifo>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d001      	beq.n	8011970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 801196c:	2301      	movs	r3, #1
 801196e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 f91f 	bl	8011bb4 <USB_FlushRxFifo>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d001      	beq.n	8011980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 801197c:	2301      	movs	r3, #1
 801197e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011986:	461a      	mov	r2, r3
 8011988:	2300      	movs	r3, #0
 801198a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011992:	461a      	mov	r2, r3
 8011994:	2300      	movs	r3, #0
 8011996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801199e:	461a      	mov	r2, r3
 80119a0:	2300      	movs	r3, #0
 80119a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80119a4:	2300      	movs	r3, #0
 80119a6:	613b      	str	r3, [r7, #16]
 80119a8:	e043      	b.n	8011a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	015a      	lsls	r2, r3, #5
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	4413      	add	r3, r2
 80119b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119c0:	d118      	bne.n	80119f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d10a      	bne.n	80119de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	015a      	lsls	r2, r3, #5
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	4413      	add	r3, r2
 80119d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119d4:	461a      	mov	r2, r3
 80119d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80119da:	6013      	str	r3, [r2, #0]
 80119dc:	e013      	b.n	8011a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	015a      	lsls	r2, r3, #5
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	4413      	add	r3, r2
 80119e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ea:	461a      	mov	r2, r3
 80119ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80119f0:	6013      	str	r3, [r2, #0]
 80119f2:	e008      	b.n	8011a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a00:	461a      	mov	r2, r3
 8011a02:	2300      	movs	r3, #0
 8011a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	015a      	lsls	r2, r3, #5
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a12:	461a      	mov	r2, r3
 8011a14:	2300      	movs	r3, #0
 8011a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	015a      	lsls	r2, r3, #5
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	4413      	add	r3, r2
 8011a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a24:	461a      	mov	r2, r3
 8011a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	3301      	adds	r3, #1
 8011a30:	613b      	str	r3, [r7, #16]
 8011a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a34:	693a      	ldr	r2, [r7, #16]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d3b7      	bcc.n	80119aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	613b      	str	r3, [r7, #16]
 8011a3e:	e043      	b.n	8011ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	015a      	lsls	r2, r3, #5
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	4413      	add	r3, r2
 8011a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a56:	d118      	bne.n	8011a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10a      	bne.n	8011a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	015a      	lsls	r2, r3, #5
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	4413      	add	r3, r2
 8011a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011a70:	6013      	str	r3, [r2, #0]
 8011a72:	e013      	b.n	8011a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	015a      	lsls	r2, r3, #5
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a80:	461a      	mov	r2, r3
 8011a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	e008      	b.n	8011a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	015a      	lsls	r2, r3, #5
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	4413      	add	r3, r2
 8011a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a96:	461a      	mov	r2, r3
 8011a98:	2300      	movs	r3, #0
 8011a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	015a      	lsls	r2, r3, #5
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	4413      	add	r3, r2
 8011aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	2300      	movs	r3, #0
 8011aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	015a      	lsls	r2, r3, #5
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aba:	461a      	mov	r2, r3
 8011abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	613b      	str	r3, [r7, #16]
 8011ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aca:	693a      	ldr	r2, [r7, #16]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d3b7      	bcc.n	8011a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ad6:	691b      	ldr	r3, [r3, #16]
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d105      	bne.n	8011b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	699b      	ldr	r3, [r3, #24]
 8011afc:	f043 0210 	orr.w	r2, r3, #16
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	699a      	ldr	r2, [r3, #24]
 8011b08:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <USB_DevInit+0x2c4>)
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d005      	beq.n	8011b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	699b      	ldr	r3, [r3, #24]
 8011b1a:	f043 0208 	orr.w	r2, r3, #8
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d107      	bne.n	8011b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b30:	f043 0304 	orr.w	r3, r3, #4
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3718      	adds	r7, #24
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b44:	b004      	add	sp, #16
 8011b46:	4770      	bx	lr
 8011b48:	803c3800 	.word	0x803c3800

08011b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b085      	sub	sp, #20
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011b56:	2300      	movs	r3, #0
 8011b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	4a13      	ldr	r2, [pc, #76]	; (8011bb0 <USB_FlushTxFifo+0x64>)
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d901      	bls.n	8011b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011b68:	2303      	movs	r3, #3
 8011b6a:	e01b      	b.n	8011ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	daf2      	bge.n	8011b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011b74:	2300      	movs	r3, #0
 8011b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	019b      	lsls	r3, r3, #6
 8011b7c:	f043 0220 	orr.w	r2, r3, #32
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	3301      	adds	r3, #1
 8011b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	4a08      	ldr	r2, [pc, #32]	; (8011bb0 <USB_FlushTxFifo+0x64>)
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d901      	bls.n	8011b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011b92:	2303      	movs	r3, #3
 8011b94:	e006      	b.n	8011ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	691b      	ldr	r3, [r3, #16]
 8011b9a:	f003 0320 	and.w	r3, r3, #32
 8011b9e:	2b20      	cmp	r3, #32
 8011ba0:	d0f0      	beq.n	8011b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3714      	adds	r7, #20
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	00030d40 	.word	0x00030d40

08011bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b085      	sub	sp, #20
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	4a11      	ldr	r2, [pc, #68]	; (8011c10 <USB_FlushRxFifo+0x5c>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d901      	bls.n	8011bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011bce:	2303      	movs	r3, #3
 8011bd0:	e018      	b.n	8011c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	daf2      	bge.n	8011bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2210      	movs	r2, #16
 8011be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	3301      	adds	r3, #1
 8011be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	4a08      	ldr	r2, [pc, #32]	; (8011c10 <USB_FlushRxFifo+0x5c>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d901      	bls.n	8011bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011bf2:	2303      	movs	r3, #3
 8011bf4:	e006      	b.n	8011c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	f003 0310 	and.w	r3, r3, #16
 8011bfe:	2b10      	cmp	r3, #16
 8011c00:	d0f0      	beq.n	8011be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011c02:	2300      	movs	r3, #0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3714      	adds	r7, #20
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr
 8011c10:	00030d40 	.word	0x00030d40

08011c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011c14:	b480      	push	{r7}
 8011c16:	b085      	sub	sp, #20
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	78fb      	ldrb	r3, [r7, #3]
 8011c2e:	68f9      	ldr	r1, [r7, #12]
 8011c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c34:	4313      	orrs	r3, r2
 8011c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011c38:	2300      	movs	r3, #0
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3714      	adds	r7, #20
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr

08011c46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011c46:	b480      	push	{r7}
 8011c48:	b087      	sub	sp, #28
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c58:	689b      	ldr	r3, [r3, #8]
 8011c5a:	f003 0306 	and.w	r3, r3, #6
 8011c5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d102      	bne.n	8011c6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011c66:	2300      	movs	r3, #0
 8011c68:	75fb      	strb	r3, [r7, #23]
 8011c6a:	e00a      	b.n	8011c82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	2b02      	cmp	r3, #2
 8011c70:	d002      	beq.n	8011c78 <USB_GetDevSpeed+0x32>
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2b06      	cmp	r3, #6
 8011c76:	d102      	bne.n	8011c7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011c78:	2302      	movs	r3, #2
 8011c7a:	75fb      	strb	r3, [r7, #23]
 8011c7c:	e001      	b.n	8011c82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011c7e:	230f      	movs	r3, #15
 8011c80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	371c      	adds	r7, #28
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr

08011c90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	785b      	ldrb	r3, [r3, #1]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d13a      	bne.n	8011d22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cb2:	69da      	ldr	r2, [r3, #28]
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f003 030f 	and.w	r3, r3, #15
 8011cbc:	2101      	movs	r1, #1
 8011cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	68f9      	ldr	r1, [r7, #12]
 8011cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cca:	4313      	orrs	r3, r2
 8011ccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	015a      	lsls	r2, r3, #5
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d155      	bne.n	8011d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	015a      	lsls	r2, r3, #5
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	4413      	add	r3, r2
 8011cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	791b      	ldrb	r3, [r3, #4]
 8011cfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011d00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	059b      	lsls	r3, r3, #22
 8011d06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	68ba      	ldr	r2, [r7, #8]
 8011d0c:	0151      	lsls	r1, r2, #5
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	440a      	add	r2, r1
 8011d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d1e:	6013      	str	r3, [r2, #0]
 8011d20:	e036      	b.n	8011d90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d28:	69da      	ldr	r2, [r3, #28]
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	f003 030f 	and.w	r3, r3, #15
 8011d32:	2101      	movs	r1, #1
 8011d34:	fa01 f303 	lsl.w	r3, r1, r3
 8011d38:	041b      	lsls	r3, r3, #16
 8011d3a:	68f9      	ldr	r1, [r7, #12]
 8011d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d40:	4313      	orrs	r3, r2
 8011d42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	015a      	lsls	r2, r3, #5
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d11a      	bne.n	8011d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	015a      	lsls	r2, r3, #5
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	4413      	add	r3, r2
 8011d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	791b      	ldrb	r3, [r3, #4]
 8011d74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d76:	430b      	orrs	r3, r1
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	68ba      	ldr	r2, [r7, #8]
 8011d7c:	0151      	lsls	r1, r2, #5
 8011d7e:	68fa      	ldr	r2, [r7, #12]
 8011d80:	440a      	add	r2, r1
 8011d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011d90:	2300      	movs	r3, #0
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3714      	adds	r7, #20
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr
	...

08011da0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	785b      	ldrb	r3, [r3, #1]
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d161      	bne.n	8011e80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	015a      	lsls	r2, r3, #5
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	4413      	add	r3, r2
 8011dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011dd2:	d11f      	bne.n	8011e14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	015a      	lsls	r2, r3, #5
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	4413      	add	r3, r2
 8011ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	0151      	lsls	r1, r2, #5
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	440a      	add	r2, r1
 8011dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011df2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	015a      	lsls	r2, r3, #5
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	4413      	add	r3, r2
 8011dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	0151      	lsls	r1, r2, #5
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	440a      	add	r2, r1
 8011e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	f003 030f 	and.w	r3, r3, #15
 8011e24:	2101      	movs	r1, #1
 8011e26:	fa01 f303 	lsl.w	r3, r1, r3
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	43db      	mvns	r3, r3
 8011e2e:	68f9      	ldr	r1, [r7, #12]
 8011e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e34:	4013      	ands	r3, r2
 8011e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e3e:	69da      	ldr	r2, [r3, #28]
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f003 030f 	and.w	r3, r3, #15
 8011e48:	2101      	movs	r1, #1
 8011e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	43db      	mvns	r3, r3
 8011e52:	68f9      	ldr	r1, [r7, #12]
 8011e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e58:	4013      	ands	r3, r2
 8011e5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	015a      	lsls	r2, r3, #5
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	4413      	add	r3, r2
 8011e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e68:	681a      	ldr	r2, [r3, #0]
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	0159      	lsls	r1, r3, #5
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	440b      	add	r3, r1
 8011e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e76:	4619      	mov	r1, r3
 8011e78:	4b35      	ldr	r3, [pc, #212]	; (8011f50 <USB_DeactivateEndpoint+0x1b0>)
 8011e7a:	4013      	ands	r3, r2
 8011e7c:	600b      	str	r3, [r1, #0]
 8011e7e:	e060      	b.n	8011f42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	015a      	lsls	r2, r3, #5
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	4413      	add	r3, r2
 8011e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e96:	d11f      	bne.n	8011ed8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	015a      	lsls	r2, r3, #5
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	4413      	add	r3, r2
 8011ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	68ba      	ldr	r2, [r7, #8]
 8011ea8:	0151      	lsls	r1, r2, #5
 8011eaa:	68fa      	ldr	r2, [r7, #12]
 8011eac:	440a      	add	r2, r1
 8011eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011eb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011eb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	015a      	lsls	r2, r3, #5
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	68ba      	ldr	r2, [r7, #8]
 8011ec8:	0151      	lsls	r1, r2, #5
 8011eca:	68fa      	ldr	r2, [r7, #12]
 8011ecc:	440a      	add	r2, r1
 8011ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	f003 030f 	and.w	r3, r3, #15
 8011ee8:	2101      	movs	r1, #1
 8011eea:	fa01 f303 	lsl.w	r3, r1, r3
 8011eee:	041b      	lsls	r3, r3, #16
 8011ef0:	43db      	mvns	r3, r3
 8011ef2:	68f9      	ldr	r1, [r7, #12]
 8011ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ef8:	4013      	ands	r3, r2
 8011efa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f02:	69da      	ldr	r2, [r3, #28]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	f003 030f 	and.w	r3, r3, #15
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8011f12:	041b      	lsls	r3, r3, #16
 8011f14:	43db      	mvns	r3, r3
 8011f16:	68f9      	ldr	r1, [r7, #12]
 8011f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f1c:	4013      	ands	r3, r2
 8011f1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	015a      	lsls	r2, r3, #5
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	4413      	add	r3, r2
 8011f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	0159      	lsls	r1, r3, #5
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	440b      	add	r3, r1
 8011f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <USB_DeactivateEndpoint+0x1b4>)
 8011f3e:	4013      	ands	r3, r2
 8011f40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011f42:	2300      	movs	r3, #0
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3714      	adds	r7, #20
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr
 8011f50:	ec337800 	.word	0xec337800
 8011f54:	eff37800 	.word	0xeff37800

08011f58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b08a      	sub	sp, #40	; 0x28
 8011f5c:	af02      	add	r7, sp, #8
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	4613      	mov	r3, r2
 8011f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	785b      	ldrb	r3, [r3, #1]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	f040 815c 	bne.w	8012232 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	699b      	ldr	r3, [r3, #24]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d132      	bne.n	8011fe8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	015a      	lsls	r2, r3, #5
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	4413      	add	r3, r2
 8011f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	69ba      	ldr	r2, [r7, #24]
 8011f92:	0151      	lsls	r1, r2, #5
 8011f94:	69fa      	ldr	r2, [r7, #28]
 8011f96:	440a      	add	r2, r1
 8011f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	015a      	lsls	r2, r3, #5
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	4413      	add	r3, r2
 8011fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb2:	691b      	ldr	r3, [r3, #16]
 8011fb4:	69ba      	ldr	r2, [r7, #24]
 8011fb6:	0151      	lsls	r1, r2, #5
 8011fb8:	69fa      	ldr	r2, [r7, #28]
 8011fba:	440a      	add	r2, r1
 8011fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	015a      	lsls	r2, r3, #5
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	4413      	add	r3, r2
 8011fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fd2:	691b      	ldr	r3, [r3, #16]
 8011fd4:	69ba      	ldr	r2, [r7, #24]
 8011fd6:	0151      	lsls	r1, r2, #5
 8011fd8:	69fa      	ldr	r2, [r7, #28]
 8011fda:	440a      	add	r2, r1
 8011fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fe0:	0cdb      	lsrs	r3, r3, #19
 8011fe2:	04db      	lsls	r3, r3, #19
 8011fe4:	6113      	str	r3, [r2, #16]
 8011fe6:	e074      	b.n	80120d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	69ba      	ldr	r2, [r7, #24]
 8011ff8:	0151      	lsls	r1, r2, #5
 8011ffa:	69fa      	ldr	r2, [r7, #28]
 8011ffc:	440a      	add	r2, r1
 8011ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012002:	0cdb      	lsrs	r3, r3, #19
 8012004:	04db      	lsls	r3, r3, #19
 8012006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	015a      	lsls	r2, r3, #5
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	4413      	add	r3, r2
 8012010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012014:	691b      	ldr	r3, [r3, #16]
 8012016:	69ba      	ldr	r2, [r7, #24]
 8012018:	0151      	lsls	r1, r2, #5
 801201a:	69fa      	ldr	r2, [r7, #28]
 801201c:	440a      	add	r2, r1
 801201e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801202a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	015a      	lsls	r2, r3, #5
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	4413      	add	r3, r2
 8012034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012038:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	6999      	ldr	r1, [r3, #24]
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	440b      	add	r3, r1
 8012044:	1e59      	subs	r1, r3, #1
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	fbb1 f3f3 	udiv	r3, r1, r3
 801204e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012050:	4b9d      	ldr	r3, [pc, #628]	; (80122c8 <USB_EPStartXfer+0x370>)
 8012052:	400b      	ands	r3, r1
 8012054:	69b9      	ldr	r1, [r7, #24]
 8012056:	0148      	lsls	r0, r1, #5
 8012058:	69f9      	ldr	r1, [r7, #28]
 801205a:	4401      	add	r1, r0
 801205c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012060:	4313      	orrs	r3, r2
 8012062:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	015a      	lsls	r2, r3, #5
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	4413      	add	r3, r2
 801206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012070:	691a      	ldr	r2, [r3, #16]
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	699b      	ldr	r3, [r3, #24]
 8012076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801207a:	69b9      	ldr	r1, [r7, #24]
 801207c:	0148      	lsls	r0, r1, #5
 801207e:	69f9      	ldr	r1, [r7, #28]
 8012080:	4401      	add	r1, r0
 8012082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012086:	4313      	orrs	r3, r2
 8012088:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	791b      	ldrb	r3, [r3, #4]
 801208e:	2b01      	cmp	r3, #1
 8012090:	d11f      	bne.n	80120d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	015a      	lsls	r2, r3, #5
 8012096:	69fb      	ldr	r3, [r7, #28]
 8012098:	4413      	add	r3, r2
 801209a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801209e:	691b      	ldr	r3, [r3, #16]
 80120a0:	69ba      	ldr	r2, [r7, #24]
 80120a2:	0151      	lsls	r1, r2, #5
 80120a4:	69fa      	ldr	r2, [r7, #28]
 80120a6:	440a      	add	r2, r1
 80120a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80120b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	015a      	lsls	r2, r3, #5
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	4413      	add	r3, r2
 80120ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120be:	691b      	ldr	r3, [r3, #16]
 80120c0:	69ba      	ldr	r2, [r7, #24]
 80120c2:	0151      	lsls	r1, r2, #5
 80120c4:	69fa      	ldr	r2, [r7, #28]
 80120c6:	440a      	add	r2, r1
 80120c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80120d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80120d2:	79fb      	ldrb	r3, [r7, #7]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d14b      	bne.n	8012170 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	695b      	ldr	r3, [r3, #20]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d009      	beq.n	80120f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	015a      	lsls	r2, r3, #5
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	4413      	add	r3, r2
 80120e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120ec:	461a      	mov	r2, r3
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	791b      	ldrb	r3, [r3, #4]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d128      	bne.n	801214e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012102:	689b      	ldr	r3, [r3, #8]
 8012104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012108:	2b00      	cmp	r3, #0
 801210a:	d110      	bne.n	801212e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	015a      	lsls	r2, r3, #5
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	4413      	add	r3, r2
 8012114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	69ba      	ldr	r2, [r7, #24]
 801211c:	0151      	lsls	r1, r2, #5
 801211e:	69fa      	ldr	r2, [r7, #28]
 8012120:	440a      	add	r2, r1
 8012122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801212a:	6013      	str	r3, [r2, #0]
 801212c:	e00f      	b.n	801214e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	015a      	lsls	r2, r3, #5
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	4413      	add	r3, r2
 8012136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	69ba      	ldr	r2, [r7, #24]
 801213e:	0151      	lsls	r1, r2, #5
 8012140:	69fa      	ldr	r2, [r7, #28]
 8012142:	440a      	add	r2, r1
 8012144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801214c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	015a      	lsls	r2, r3, #5
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	4413      	add	r3, r2
 8012156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	69ba      	ldr	r2, [r7, #24]
 801215e:	0151      	lsls	r1, r2, #5
 8012160:	69fa      	ldr	r2, [r7, #28]
 8012162:	440a      	add	r2, r1
 8012164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	e133      	b.n	80123d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	015a      	lsls	r2, r3, #5
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	4413      	add	r3, r2
 8012178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	69ba      	ldr	r2, [r7, #24]
 8012180:	0151      	lsls	r1, r2, #5
 8012182:	69fa      	ldr	r2, [r7, #28]
 8012184:	440a      	add	r2, r1
 8012186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801218a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801218e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	791b      	ldrb	r3, [r3, #4]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d015      	beq.n	80121c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	699b      	ldr	r3, [r3, #24]
 801219c:	2b00      	cmp	r3, #0
 801219e:	f000 811b 	beq.w	80123d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	f003 030f 	and.w	r3, r3, #15
 80121b2:	2101      	movs	r1, #1
 80121b4:	fa01 f303 	lsl.w	r3, r1, r3
 80121b8:	69f9      	ldr	r1, [r7, #28]
 80121ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121be:	4313      	orrs	r3, r2
 80121c0:	634b      	str	r3, [r1, #52]	; 0x34
 80121c2:	e109      	b.n	80123d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ca:	689b      	ldr	r3, [r3, #8]
 80121cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d110      	bne.n	80121f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	015a      	lsls	r2, r3, #5
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	4413      	add	r3, r2
 80121dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	69ba      	ldr	r2, [r7, #24]
 80121e4:	0151      	lsls	r1, r2, #5
 80121e6:	69fa      	ldr	r2, [r7, #28]
 80121e8:	440a      	add	r2, r1
 80121ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80121f2:	6013      	str	r3, [r2, #0]
 80121f4:	e00f      	b.n	8012216 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	015a      	lsls	r2, r3, #5
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	4413      	add	r3, r2
 80121fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	69ba      	ldr	r2, [r7, #24]
 8012206:	0151      	lsls	r1, r2, #5
 8012208:	69fa      	ldr	r2, [r7, #28]
 801220a:	440a      	add	r2, r1
 801220c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012214:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	6919      	ldr	r1, [r3, #16]
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	781a      	ldrb	r2, [r3, #0]
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	699b      	ldr	r3, [r3, #24]
 8012222:	b298      	uxth	r0, r3
 8012224:	79fb      	ldrb	r3, [r7, #7]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	4603      	mov	r3, r0
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f000 fade 	bl	80127ec <USB_WritePacket>
 8012230:	e0d2      	b.n	80123d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012232:	69bb      	ldr	r3, [r7, #24]
 8012234:	015a      	lsls	r2, r3, #5
 8012236:	69fb      	ldr	r3, [r7, #28]
 8012238:	4413      	add	r3, r2
 801223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	69ba      	ldr	r2, [r7, #24]
 8012242:	0151      	lsls	r1, r2, #5
 8012244:	69fa      	ldr	r2, [r7, #28]
 8012246:	440a      	add	r2, r1
 8012248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801224c:	0cdb      	lsrs	r3, r3, #19
 801224e:	04db      	lsls	r3, r3, #19
 8012250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012252:	69bb      	ldr	r3, [r7, #24]
 8012254:	015a      	lsls	r2, r3, #5
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	4413      	add	r3, r2
 801225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	69ba      	ldr	r2, [r7, #24]
 8012262:	0151      	lsls	r1, r2, #5
 8012264:	69fa      	ldr	r2, [r7, #28]
 8012266:	440a      	add	r2, r1
 8012268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801226c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012274:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	699b      	ldr	r3, [r3, #24]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d126      	bne.n	80122cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	015a      	lsls	r2, r3, #5
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	4413      	add	r3, r2
 8012286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801228a:	691a      	ldr	r2, [r3, #16]
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012294:	69b9      	ldr	r1, [r7, #24]
 8012296:	0148      	lsls	r0, r1, #5
 8012298:	69f9      	ldr	r1, [r7, #28]
 801229a:	4401      	add	r1, r0
 801229c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80122a0:	4313      	orrs	r3, r2
 80122a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	015a      	lsls	r2, r3, #5
 80122a8:	69fb      	ldr	r3, [r7, #28]
 80122aa:	4413      	add	r3, r2
 80122ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122b0:	691b      	ldr	r3, [r3, #16]
 80122b2:	69ba      	ldr	r2, [r7, #24]
 80122b4:	0151      	lsls	r1, r2, #5
 80122b6:	69fa      	ldr	r2, [r7, #28]
 80122b8:	440a      	add	r2, r1
 80122ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80122c2:	6113      	str	r3, [r2, #16]
 80122c4:	e03a      	b.n	801233c <USB_EPStartXfer+0x3e4>
 80122c6:	bf00      	nop
 80122c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	699a      	ldr	r2, [r3, #24]
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	4413      	add	r3, r2
 80122d6:	1e5a      	subs	r2, r3, #1
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80122e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	8afa      	ldrh	r2, [r7, #22]
 80122e8:	fb03 f202 	mul.w	r2, r3, r2
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	015a      	lsls	r2, r3, #5
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	4413      	add	r3, r2
 80122f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122fc:	691a      	ldr	r2, [r3, #16]
 80122fe:	8afb      	ldrh	r3, [r7, #22]
 8012300:	04d9      	lsls	r1, r3, #19
 8012302:	4b38      	ldr	r3, [pc, #224]	; (80123e4 <USB_EPStartXfer+0x48c>)
 8012304:	400b      	ands	r3, r1
 8012306:	69b9      	ldr	r1, [r7, #24]
 8012308:	0148      	lsls	r0, r1, #5
 801230a:	69f9      	ldr	r1, [r7, #28]
 801230c:	4401      	add	r1, r0
 801230e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012312:	4313      	orrs	r3, r2
 8012314:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012316:	69bb      	ldr	r3, [r7, #24]
 8012318:	015a      	lsls	r2, r3, #5
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	4413      	add	r3, r2
 801231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012322:	691a      	ldr	r2, [r3, #16]
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	69db      	ldr	r3, [r3, #28]
 8012328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801232c:	69b9      	ldr	r1, [r7, #24]
 801232e:	0148      	lsls	r0, r1, #5
 8012330:	69f9      	ldr	r1, [r7, #28]
 8012332:	4401      	add	r1, r0
 8012334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012338:	4313      	orrs	r3, r2
 801233a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801233c:	79fb      	ldrb	r3, [r7, #7]
 801233e:	2b01      	cmp	r3, #1
 8012340:	d10d      	bne.n	801235e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	691b      	ldr	r3, [r3, #16]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d009      	beq.n	801235e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	6919      	ldr	r1, [r3, #16]
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	015a      	lsls	r2, r3, #5
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	4413      	add	r3, r2
 8012356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801235a:	460a      	mov	r2, r1
 801235c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	791b      	ldrb	r3, [r3, #4]
 8012362:	2b01      	cmp	r3, #1
 8012364:	d128      	bne.n	80123b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012372:	2b00      	cmp	r3, #0
 8012374:	d110      	bne.n	8012398 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	015a      	lsls	r2, r3, #5
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	4413      	add	r3, r2
 801237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	69ba      	ldr	r2, [r7, #24]
 8012386:	0151      	lsls	r1, r2, #5
 8012388:	69fa      	ldr	r2, [r7, #28]
 801238a:	440a      	add	r2, r1
 801238c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012394:	6013      	str	r3, [r2, #0]
 8012396:	e00f      	b.n	80123b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	015a      	lsls	r2, r3, #5
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	4413      	add	r3, r2
 80123a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	69ba      	ldr	r2, [r7, #24]
 80123a8:	0151      	lsls	r1, r2, #5
 80123aa:	69fa      	ldr	r2, [r7, #28]
 80123ac:	440a      	add	r2, r1
 80123ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80123b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	015a      	lsls	r2, r3, #5
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	4413      	add	r3, r2
 80123c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	69ba      	ldr	r2, [r7, #24]
 80123c8:	0151      	lsls	r1, r2, #5
 80123ca:	69fa      	ldr	r2, [r7, #28]
 80123cc:	440a      	add	r2, r1
 80123ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80123d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	1ff80000 	.word	0x1ff80000

080123e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b087      	sub	sp, #28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	4613      	mov	r3, r2
 80123f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	785b      	ldrb	r3, [r3, #1]
 8012404:	2b01      	cmp	r3, #1
 8012406:	f040 80ce 	bne.w	80125a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	699b      	ldr	r3, [r3, #24]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d132      	bne.n	8012478 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	015a      	lsls	r2, r3, #5
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	4413      	add	r3, r2
 801241a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801241e:	691b      	ldr	r3, [r3, #16]
 8012420:	693a      	ldr	r2, [r7, #16]
 8012422:	0151      	lsls	r1, r2, #5
 8012424:	697a      	ldr	r2, [r7, #20]
 8012426:	440a      	add	r2, r1
 8012428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801242c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	015a      	lsls	r2, r3, #5
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	4413      	add	r3, r2
 801243e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012442:	691b      	ldr	r3, [r3, #16]
 8012444:	693a      	ldr	r2, [r7, #16]
 8012446:	0151      	lsls	r1, r2, #5
 8012448:	697a      	ldr	r2, [r7, #20]
 801244a:	440a      	add	r2, r1
 801244c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	015a      	lsls	r2, r3, #5
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	4413      	add	r3, r2
 801245e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012462:	691b      	ldr	r3, [r3, #16]
 8012464:	693a      	ldr	r2, [r7, #16]
 8012466:	0151      	lsls	r1, r2, #5
 8012468:	697a      	ldr	r2, [r7, #20]
 801246a:	440a      	add	r2, r1
 801246c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012470:	0cdb      	lsrs	r3, r3, #19
 8012472:	04db      	lsls	r3, r3, #19
 8012474:	6113      	str	r3, [r2, #16]
 8012476:	e04e      	b.n	8012516 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	015a      	lsls	r2, r3, #5
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	4413      	add	r3, r2
 8012480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	693a      	ldr	r2, [r7, #16]
 8012488:	0151      	lsls	r1, r2, #5
 801248a:	697a      	ldr	r2, [r7, #20]
 801248c:	440a      	add	r2, r1
 801248e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012492:	0cdb      	lsrs	r3, r3, #19
 8012494:	04db      	lsls	r3, r3, #19
 8012496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	015a      	lsls	r2, r3, #5
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	4413      	add	r3, r2
 80124a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124a4:	691b      	ldr	r3, [r3, #16]
 80124a6:	693a      	ldr	r2, [r7, #16]
 80124a8:	0151      	lsls	r1, r2, #5
 80124aa:	697a      	ldr	r2, [r7, #20]
 80124ac:	440a      	add	r2, r1
 80124ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80124b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80124ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	699a      	ldr	r2, [r3, #24]
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d903      	bls.n	80124d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	68da      	ldr	r2, [r3, #12]
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	015a      	lsls	r2, r3, #5
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	4413      	add	r3, r2
 80124d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124dc:	691b      	ldr	r3, [r3, #16]
 80124de:	693a      	ldr	r2, [r7, #16]
 80124e0:	0151      	lsls	r1, r2, #5
 80124e2:	697a      	ldr	r2, [r7, #20]
 80124e4:	440a      	add	r2, r1
 80124e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80124ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	015a      	lsls	r2, r3, #5
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	4413      	add	r3, r2
 80124f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124fc:	691a      	ldr	r2, [r3, #16]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	699b      	ldr	r3, [r3, #24]
 8012502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012506:	6939      	ldr	r1, [r7, #16]
 8012508:	0148      	lsls	r0, r1, #5
 801250a:	6979      	ldr	r1, [r7, #20]
 801250c:	4401      	add	r1, r0
 801250e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012512:	4313      	orrs	r3, r2
 8012514:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012516:	79fb      	ldrb	r3, [r7, #7]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d11e      	bne.n	801255a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	695b      	ldr	r3, [r3, #20]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d009      	beq.n	8012538 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	015a      	lsls	r2, r3, #5
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	4413      	add	r3, r2
 801252c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012530:	461a      	mov	r2, r3
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	695b      	ldr	r3, [r3, #20]
 8012536:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	015a      	lsls	r2, r3, #5
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	4413      	add	r3, r2
 8012540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	693a      	ldr	r2, [r7, #16]
 8012548:	0151      	lsls	r1, r2, #5
 801254a:	697a      	ldr	r2, [r7, #20]
 801254c:	440a      	add	r2, r1
 801254e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012556:	6013      	str	r3, [r2, #0]
 8012558:	e097      	b.n	801268a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	015a      	lsls	r2, r3, #5
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	4413      	add	r3, r2
 8012562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	693a      	ldr	r2, [r7, #16]
 801256a:	0151      	lsls	r1, r2, #5
 801256c:	697a      	ldr	r2, [r7, #20]
 801256e:	440a      	add	r2, r1
 8012570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012578:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	699b      	ldr	r3, [r3, #24]
 801257e:	2b00      	cmp	r3, #0
 8012580:	f000 8083 	beq.w	801268a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801258a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	f003 030f 	and.w	r3, r3, #15
 8012594:	2101      	movs	r1, #1
 8012596:	fa01 f303 	lsl.w	r3, r1, r3
 801259a:	6979      	ldr	r1, [r7, #20]
 801259c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125a0:	4313      	orrs	r3, r2
 80125a2:	634b      	str	r3, [r1, #52]	; 0x34
 80125a4:	e071      	b.n	801268a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	015a      	lsls	r2, r3, #5
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	4413      	add	r3, r2
 80125ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b2:	691b      	ldr	r3, [r3, #16]
 80125b4:	693a      	ldr	r2, [r7, #16]
 80125b6:	0151      	lsls	r1, r2, #5
 80125b8:	697a      	ldr	r2, [r7, #20]
 80125ba:	440a      	add	r2, r1
 80125bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125c0:	0cdb      	lsrs	r3, r3, #19
 80125c2:	04db      	lsls	r3, r3, #19
 80125c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	015a      	lsls	r2, r3, #5
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	4413      	add	r3, r2
 80125ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125d2:	691b      	ldr	r3, [r3, #16]
 80125d4:	693a      	ldr	r2, [r7, #16]
 80125d6:	0151      	lsls	r1, r2, #5
 80125d8:	697a      	ldr	r2, [r7, #20]
 80125da:	440a      	add	r2, r1
 80125dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80125e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80125e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	699b      	ldr	r3, [r3, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d003      	beq.n	80125fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	68da      	ldr	r2, [r3, #12]
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	68da      	ldr	r2, [r3, #12]
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	015a      	lsls	r2, r3, #5
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	4413      	add	r3, r2
 801260a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	693a      	ldr	r2, [r7, #16]
 8012612:	0151      	lsls	r1, r2, #5
 8012614:	697a      	ldr	r2, [r7, #20]
 8012616:	440a      	add	r2, r1
 8012618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801261c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	015a      	lsls	r2, r3, #5
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	4413      	add	r3, r2
 801262a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801262e:	691a      	ldr	r2, [r3, #16]
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	69db      	ldr	r3, [r3, #28]
 8012634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012638:	6939      	ldr	r1, [r7, #16]
 801263a:	0148      	lsls	r0, r1, #5
 801263c:	6979      	ldr	r1, [r7, #20]
 801263e:	4401      	add	r1, r0
 8012640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012644:	4313      	orrs	r3, r2
 8012646:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012648:	79fb      	ldrb	r3, [r7, #7]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d10d      	bne.n	801266a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d009      	beq.n	801266a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	6919      	ldr	r1, [r3, #16]
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	015a      	lsls	r2, r3, #5
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	4413      	add	r3, r2
 8012662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012666:	460a      	mov	r2, r1
 8012668:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	015a      	lsls	r2, r3, #5
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	4413      	add	r3, r2
 8012672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	693a      	ldr	r2, [r7, #16]
 801267a:	0151      	lsls	r1, r2, #5
 801267c:	697a      	ldr	r2, [r7, #20]
 801267e:	440a      	add	r2, r1
 8012680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012688:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801268a:	2300      	movs	r3, #0
}
 801268c:	4618      	mov	r0, r3
 801268e:	371c      	adds	r7, #28
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012698:	b480      	push	{r7}
 801269a:	b087      	sub	sp, #28
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80126a2:	2300      	movs	r3, #0
 80126a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80126a6:	2300      	movs	r3, #0
 80126a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	785b      	ldrb	r3, [r3, #1]
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d14a      	bne.n	801274c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	015a      	lsls	r2, r3, #5
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	4413      	add	r3, r2
 80126c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80126ce:	f040 8086 	bne.w	80127de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	015a      	lsls	r2, r3, #5
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	4413      	add	r3, r2
 80126dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	683a      	ldr	r2, [r7, #0]
 80126e4:	7812      	ldrb	r2, [r2, #0]
 80126e6:	0151      	lsls	r1, r2, #5
 80126e8:	693a      	ldr	r2, [r7, #16]
 80126ea:	440a      	add	r2, r1
 80126ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80126f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	015a      	lsls	r2, r3, #5
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	4413      	add	r3, r2
 8012700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	683a      	ldr	r2, [r7, #0]
 8012708:	7812      	ldrb	r2, [r2, #0]
 801270a:	0151      	lsls	r1, r2, #5
 801270c:	693a      	ldr	r2, [r7, #16]
 801270e:	440a      	add	r2, r1
 8012710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	3301      	adds	r3, #1
 801271e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f242 7210 	movw	r2, #10000	; 0x2710
 8012726:	4293      	cmp	r3, r2
 8012728:	d902      	bls.n	8012730 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801272a:	2301      	movs	r3, #1
 801272c:	75fb      	strb	r3, [r7, #23]
          break;
 801272e:	e056      	b.n	80127de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	015a      	lsls	r2, r3, #5
 8012736:	693b      	ldr	r3, [r7, #16]
 8012738:	4413      	add	r3, r2
 801273a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012748:	d0e7      	beq.n	801271a <USB_EPStopXfer+0x82>
 801274a:	e048      	b.n	80127de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	015a      	lsls	r2, r3, #5
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	4413      	add	r3, r2
 8012756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012764:	d13b      	bne.n	80127de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	015a      	lsls	r2, r3, #5
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	4413      	add	r3, r2
 8012770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	683a      	ldr	r2, [r7, #0]
 8012778:	7812      	ldrb	r2, [r2, #0]
 801277a:	0151      	lsls	r1, r2, #5
 801277c:	693a      	ldr	r2, [r7, #16]
 801277e:	440a      	add	r2, r1
 8012780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012788:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	015a      	lsls	r2, r3, #5
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	4413      	add	r3, r2
 8012794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	683a      	ldr	r2, [r7, #0]
 801279c:	7812      	ldrb	r2, [r2, #0]
 801279e:	0151      	lsls	r1, r2, #5
 80127a0:	693a      	ldr	r2, [r7, #16]
 80127a2:	440a      	add	r2, r1
 80127a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80127ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	3301      	adds	r3, #1
 80127b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d902      	bls.n	80127c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	75fb      	strb	r3, [r7, #23]
          break;
 80127c2:	e00c      	b.n	80127de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	015a      	lsls	r2, r3, #5
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	4413      	add	r3, r2
 80127ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127dc:	d0e7      	beq.n	80127ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80127de:	7dfb      	ldrb	r3, [r7, #23]
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	371c      	adds	r7, #28
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr

080127ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b089      	sub	sp, #36	; 0x24
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	4611      	mov	r1, r2
 80127f8:	461a      	mov	r2, r3
 80127fa:	460b      	mov	r3, r1
 80127fc:	71fb      	strb	r3, [r7, #7]
 80127fe:	4613      	mov	r3, r2
 8012800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801280a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801280e:	2b00      	cmp	r3, #0
 8012810:	d123      	bne.n	801285a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012812:	88bb      	ldrh	r3, [r7, #4]
 8012814:	3303      	adds	r3, #3
 8012816:	089b      	lsrs	r3, r3, #2
 8012818:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801281a:	2300      	movs	r3, #0
 801281c:	61bb      	str	r3, [r7, #24]
 801281e:	e018      	b.n	8012852 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012820:	79fb      	ldrb	r3, [r7, #7]
 8012822:	031a      	lsls	r2, r3, #12
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	4413      	add	r3, r2
 8012828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801282c:	461a      	mov	r2, r3
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	3301      	adds	r3, #1
 8012838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	3301      	adds	r3, #1
 801283e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	3301      	adds	r3, #1
 8012844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012846:	69fb      	ldr	r3, [r7, #28]
 8012848:	3301      	adds	r3, #1
 801284a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	3301      	adds	r3, #1
 8012850:	61bb      	str	r3, [r7, #24]
 8012852:	69ba      	ldr	r2, [r7, #24]
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	429a      	cmp	r2, r3
 8012858:	d3e2      	bcc.n	8012820 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801285a:	2300      	movs	r3, #0
}
 801285c:	4618      	mov	r0, r3
 801285e:	3724      	adds	r7, #36	; 0x24
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012868:	b480      	push	{r7}
 801286a:	b08b      	sub	sp, #44	; 0x2c
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	4613      	mov	r3, r2
 8012874:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801287e:	88fb      	ldrh	r3, [r7, #6]
 8012880:	089b      	lsrs	r3, r3, #2
 8012882:	b29b      	uxth	r3, r3
 8012884:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012886:	88fb      	ldrh	r3, [r7, #6]
 8012888:	f003 0303 	and.w	r3, r3, #3
 801288c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801288e:	2300      	movs	r3, #0
 8012890:	623b      	str	r3, [r7, #32]
 8012892:	e014      	b.n	80128be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801289a:	681a      	ldr	r2, [r3, #0]
 801289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289e:	601a      	str	r2, [r3, #0]
    pDest++;
 80128a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a2:	3301      	adds	r3, #1
 80128a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80128a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a8:	3301      	adds	r3, #1
 80128aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80128ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ae:	3301      	adds	r3, #1
 80128b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80128b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b4:	3301      	adds	r3, #1
 80128b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80128b8:	6a3b      	ldr	r3, [r7, #32]
 80128ba:	3301      	adds	r3, #1
 80128bc:	623b      	str	r3, [r7, #32]
 80128be:	6a3a      	ldr	r2, [r7, #32]
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d3e6      	bcc.n	8012894 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80128c6:	8bfb      	ldrh	r3, [r7, #30]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d01e      	beq.n	801290a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80128cc:	2300      	movs	r3, #0
 80128ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128d6:	461a      	mov	r2, r3
 80128d8:	f107 0310 	add.w	r3, r7, #16
 80128dc:	6812      	ldr	r2, [r2, #0]
 80128de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80128e0:	693a      	ldr	r2, [r7, #16]
 80128e2:	6a3b      	ldr	r3, [r7, #32]
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	fa22 f303 	lsr.w	r3, r2, r3
 80128ec:	b2da      	uxtb	r2, r3
 80128ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f0:	701a      	strb	r2, [r3, #0]
      i++;
 80128f2:	6a3b      	ldr	r3, [r7, #32]
 80128f4:	3301      	adds	r3, #1
 80128f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fa:	3301      	adds	r3, #1
 80128fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80128fe:	8bfb      	ldrh	r3, [r7, #30]
 8012900:	3b01      	subs	r3, #1
 8012902:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012904:	8bfb      	ldrh	r3, [r7, #30]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1ea      	bne.n	80128e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801290c:	4618      	mov	r0, r3
 801290e:	372c      	adds	r7, #44	; 0x2c
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	785b      	ldrb	r3, [r3, #1]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d12c      	bne.n	801298e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	015a      	lsls	r2, r3, #5
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	4413      	add	r3, r2
 801293c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	db12      	blt.n	801296c <USB_EPSetStall+0x54>
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d00f      	beq.n	801296c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	015a      	lsls	r2, r3, #5
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	4413      	add	r3, r2
 8012954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	68ba      	ldr	r2, [r7, #8]
 801295c:	0151      	lsls	r1, r2, #5
 801295e:	68fa      	ldr	r2, [r7, #12]
 8012960:	440a      	add	r2, r1
 8012962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012966:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801296a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	015a      	lsls	r2, r3, #5
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	4413      	add	r3, r2
 8012974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	68ba      	ldr	r2, [r7, #8]
 801297c:	0151      	lsls	r1, r2, #5
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	440a      	add	r2, r1
 8012982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801298a:	6013      	str	r3, [r2, #0]
 801298c:	e02b      	b.n	80129e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	015a      	lsls	r2, r3, #5
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	4413      	add	r3, r2
 8012996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	db12      	blt.n	80129c6 <USB_EPSetStall+0xae>
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00f      	beq.n	80129c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	015a      	lsls	r2, r3, #5
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	4413      	add	r3, r2
 80129ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	68ba      	ldr	r2, [r7, #8]
 80129b6:	0151      	lsls	r1, r2, #5
 80129b8:	68fa      	ldr	r2, [r7, #12]
 80129ba:	440a      	add	r2, r1
 80129bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80129c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80129c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	015a      	lsls	r2, r3, #5
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	4413      	add	r3, r2
 80129ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	68ba      	ldr	r2, [r7, #8]
 80129d6:	0151      	lsls	r1, r2, #5
 80129d8:	68fa      	ldr	r2, [r7, #12]
 80129da:	440a      	add	r2, r1
 80129dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80129e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80129e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3714      	adds	r7, #20
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr

080129f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	785b      	ldrb	r3, [r3, #1]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d128      	bne.n	8012a62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	015a      	lsls	r2, r3, #5
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	4413      	add	r3, r2
 8012a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	68ba      	ldr	r2, [r7, #8]
 8012a20:	0151      	lsls	r1, r2, #5
 8012a22:	68fa      	ldr	r2, [r7, #12]
 8012a24:	440a      	add	r2, r1
 8012a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012a2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	791b      	ldrb	r3, [r3, #4]
 8012a34:	2b03      	cmp	r3, #3
 8012a36:	d003      	beq.n	8012a40 <USB_EPClearStall+0x4c>
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	791b      	ldrb	r3, [r3, #4]
 8012a3c:	2b02      	cmp	r3, #2
 8012a3e:	d138      	bne.n	8012ab2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	015a      	lsls	r2, r3, #5
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	4413      	add	r3, r2
 8012a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	68ba      	ldr	r2, [r7, #8]
 8012a50:	0151      	lsls	r1, r2, #5
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	440a      	add	r2, r1
 8012a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a5e:	6013      	str	r3, [r2, #0]
 8012a60:	e027      	b.n	8012ab2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	015a      	lsls	r2, r3, #5
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	4413      	add	r3, r2
 8012a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	68ba      	ldr	r2, [r7, #8]
 8012a72:	0151      	lsls	r1, r2, #5
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	440a      	add	r2, r1
 8012a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012a80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	791b      	ldrb	r3, [r3, #4]
 8012a86:	2b03      	cmp	r3, #3
 8012a88:	d003      	beq.n	8012a92 <USB_EPClearStall+0x9e>
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	791b      	ldrb	r3, [r3, #4]
 8012a8e:	2b02      	cmp	r3, #2
 8012a90:	d10f      	bne.n	8012ab2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	015a      	lsls	r2, r3, #5
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	4413      	add	r3, r2
 8012a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	68ba      	ldr	r2, [r7, #8]
 8012aa2:	0151      	lsls	r1, r2, #5
 8012aa4:	68fa      	ldr	r2, [r7, #12]
 8012aa6:	440a      	add	r2, r1
 8012aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ab0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012ab2:	2300      	movs	r3, #0
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3714      	adds	r7, #20
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b085      	sub	sp, #20
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	460b      	mov	r3, r1
 8012aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ade:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012ae2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	78fb      	ldrb	r3, [r7, #3]
 8012aee:	011b      	lsls	r3, r3, #4
 8012af0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012af4:	68f9      	ldr	r1, [r7, #12]
 8012af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012afa:	4313      	orrs	r3, r2
 8012afc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3714      	adds	r7, #20
 8012b04:	46bd      	mov	sp, r7
 8012b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0a:	4770      	bx	lr

08012b0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012b26:	f023 0303 	bic.w	r3, r3, #3
 8012b2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	68fa      	ldr	r2, [r7, #12]
 8012b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b3a:	f023 0302 	bic.w	r3, r3, #2
 8012b3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3714      	adds	r7, #20
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr

08012b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012b4e:	b480      	push	{r7}
 8012b50:	b085      	sub	sp, #20
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	68fa      	ldr	r2, [r7, #12]
 8012b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012b68:	f023 0303 	bic.w	r3, r3, #3
 8012b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	68fa      	ldr	r2, [r7, #12]
 8012b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b7c:	f043 0302 	orr.w	r3, r3, #2
 8012b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3714      	adds	r7, #20
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b085      	sub	sp, #20
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	695b      	ldr	r3, [r3, #20]
 8012b9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	699b      	ldr	r3, [r3, #24]
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	4013      	ands	r3, r2
 8012ba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3714      	adds	r7, #20
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr

08012bb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012bb6:	b480      	push	{r7}
 8012bb8:	b085      	sub	sp, #20
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bc8:	699b      	ldr	r3, [r3, #24]
 8012bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bd2:	69db      	ldr	r3, [r3, #28]
 8012bd4:	68ba      	ldr	r2, [r7, #8]
 8012bd6:	4013      	ands	r3, r2
 8012bd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	0c1b      	lsrs	r3, r3, #16
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3714      	adds	r7, #20
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012bea:	b480      	push	{r7}
 8012bec:	b085      	sub	sp, #20
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c06:	69db      	ldr	r3, [r3, #28]
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	4013      	ands	r3, r2
 8012c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	b29b      	uxth	r3, r3
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3714      	adds	r7, #20
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr

08012c1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c1e:	b480      	push	{r7}
 8012c20:	b085      	sub	sp, #20
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
 8012c26:	460b      	mov	r3, r1
 8012c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012c2e:	78fb      	ldrb	r3, [r7, #3]
 8012c30:	015a      	lsls	r2, r3, #5
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	4413      	add	r3, r2
 8012c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c44:	695b      	ldr	r3, [r3, #20]
 8012c46:	68ba      	ldr	r2, [r7, #8]
 8012c48:	4013      	ands	r3, r2
 8012c4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012c4c:	68bb      	ldr	r3, [r7, #8]
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3714      	adds	r7, #20
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c5a:	b480      	push	{r7}
 8012c5c:	b087      	sub	sp, #28
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	460b      	mov	r3, r1
 8012c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c70:	691b      	ldr	r3, [r3, #16]
 8012c72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012c7e:	78fb      	ldrb	r3, [r7, #3]
 8012c80:	f003 030f 	and.w	r3, r3, #15
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	fa22 f303 	lsr.w	r3, r2, r3
 8012c8a:	01db      	lsls	r3, r3, #7
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	693a      	ldr	r2, [r7, #16]
 8012c90:	4313      	orrs	r3, r2
 8012c92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012c94:	78fb      	ldrb	r3, [r7, #3]
 8012c96:	015a      	lsls	r2, r3, #5
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ca0:	689b      	ldr	r3, [r3, #8]
 8012ca2:	693a      	ldr	r2, [r7, #16]
 8012ca4:	4013      	ands	r3, r2
 8012ca6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012ca8:	68bb      	ldr	r3, [r7, #8]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	371c      	adds	r7, #28
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr

08012cb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012cb6:	b480      	push	{r7}
 8012cb8:	b083      	sub	sp, #12
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	695b      	ldr	r3, [r3, #20]
 8012cc2:	f003 0301 	and.w	r3, r3, #1
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012cd2:	b480      	push	{r7}
 8012cd4:	b085      	sub	sp, #20
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012cf0:	f023 0307 	bic.w	r3, r3, #7
 8012cf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3714      	adds	r7, #20
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b087      	sub	sp, #28
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	460b      	mov	r3, r1
 8012d22:	607a      	str	r2, [r7, #4]
 8012d24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	333c      	adds	r3, #60	; 0x3c
 8012d2e:	3304      	adds	r3, #4
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	4a26      	ldr	r2, [pc, #152]	; (8012dd0 <USB_EP0_OutStart+0xb8>)
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	d90a      	bls.n	8012d52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d4c:	d101      	bne.n	8012d52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e037      	b.n	8012dc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d58:	461a      	mov	r2, r3
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d64:	691b      	ldr	r3, [r3, #16]
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d78:	691b      	ldr	r3, [r3, #16]
 8012d7a:	697a      	ldr	r2, [r7, #20]
 8012d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d80:	f043 0318 	orr.w	r3, r3, #24
 8012d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d8c:	691b      	ldr	r3, [r3, #16]
 8012d8e:	697a      	ldr	r2, [r7, #20]
 8012d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012d98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012d9a:	7afb      	ldrb	r3, [r7, #11]
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d10f      	bne.n	8012dc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da6:	461a      	mov	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	697a      	ldr	r2, [r7, #20]
 8012db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012dbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012dc0:	2300      	movs	r3, #0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	371c      	adds	r7, #28
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	4f54300a 	.word	0x4f54300a

08012dd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	3301      	adds	r3, #1
 8012de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	4a13      	ldr	r2, [pc, #76]	; (8012e38 <USB_CoreReset+0x64>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d901      	bls.n	8012df2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012dee:	2303      	movs	r3, #3
 8012df0:	e01b      	b.n	8012e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	daf2      	bge.n	8012de0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	691b      	ldr	r3, [r3, #16]
 8012e02:	f043 0201 	orr.w	r2, r3, #1
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	4a09      	ldr	r2, [pc, #36]	; (8012e38 <USB_CoreReset+0x64>)
 8012e14:	4293      	cmp	r3, r2
 8012e16:	d901      	bls.n	8012e1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012e18:	2303      	movs	r3, #3
 8012e1a:	e006      	b.n	8012e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	f003 0301 	and.w	r3, r3, #1
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d0f0      	beq.n	8012e0a <USB_CoreReset+0x36>

  return HAL_OK;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3714      	adds	r7, #20
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr
 8012e36:	bf00      	nop
 8012e38:	00030d40 	.word	0x00030d40

08012e3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b084      	sub	sp, #16
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	460b      	mov	r3, r1
 8012e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012e48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012e4c:	f002 fca2 	bl	8015794 <USBD_static_malloc>
 8012e50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d109      	bne.n	8012e6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	32b0      	adds	r2, #176	; 0xb0
 8012e62:	2100      	movs	r1, #0
 8012e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012e68:	2302      	movs	r3, #2
 8012e6a:	e0d4      	b.n	8013016 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012e6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012e70:	2100      	movs	r1, #0
 8012e72:	68f8      	ldr	r0, [r7, #12]
 8012e74:	f002 fcd2 	bl	801581c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	32b0      	adds	r2, #176	; 0xb0
 8012e82:	68f9      	ldr	r1, [r7, #12]
 8012e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	32b0      	adds	r2, #176	; 0xb0
 8012e92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	7c1b      	ldrb	r3, [r3, #16]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d138      	bne.n	8012f16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012ea4:	4b5e      	ldr	r3, [pc, #376]	; (8013020 <USBD_CDC_Init+0x1e4>)
 8012ea6:	7819      	ldrb	r1, [r3, #0]
 8012ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012eac:	2202      	movs	r2, #2
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f002 fb4d 	bl	801554e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012eb4:	4b5a      	ldr	r3, [pc, #360]	; (8013020 <USBD_CDC_Init+0x1e4>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	f003 020f 	and.w	r2, r3, #15
 8012ebc:	6879      	ldr	r1, [r7, #4]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	4413      	add	r3, r2
 8012ec4:	009b      	lsls	r3, r3, #2
 8012ec6:	440b      	add	r3, r1
 8012ec8:	3324      	adds	r3, #36	; 0x24
 8012eca:	2201      	movs	r2, #1
 8012ecc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012ece:	4b55      	ldr	r3, [pc, #340]	; (8013024 <USBD_CDC_Init+0x1e8>)
 8012ed0:	7819      	ldrb	r1, [r3, #0]
 8012ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ed6:	2202      	movs	r2, #2
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f002 fb38 	bl	801554e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012ede:	4b51      	ldr	r3, [pc, #324]	; (8013024 <USBD_CDC_Init+0x1e8>)
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	f003 020f 	and.w	r2, r3, #15
 8012ee6:	6879      	ldr	r1, [r7, #4]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	4413      	add	r3, r2
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	440b      	add	r3, r1
 8012ef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012efa:	4b4b      	ldr	r3, [pc, #300]	; (8013028 <USBD_CDC_Init+0x1ec>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	f003 020f 	and.w	r2, r3, #15
 8012f02:	6879      	ldr	r1, [r7, #4]
 8012f04:	4613      	mov	r3, r2
 8012f06:	009b      	lsls	r3, r3, #2
 8012f08:	4413      	add	r3, r2
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	440b      	add	r3, r1
 8012f0e:	3326      	adds	r3, #38	; 0x26
 8012f10:	2210      	movs	r2, #16
 8012f12:	801a      	strh	r2, [r3, #0]
 8012f14:	e035      	b.n	8012f82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012f16:	4b42      	ldr	r3, [pc, #264]	; (8013020 <USBD_CDC_Init+0x1e4>)
 8012f18:	7819      	ldrb	r1, [r3, #0]
 8012f1a:	2340      	movs	r3, #64	; 0x40
 8012f1c:	2202      	movs	r2, #2
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f002 fb15 	bl	801554e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012f24:	4b3e      	ldr	r3, [pc, #248]	; (8013020 <USBD_CDC_Init+0x1e4>)
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	f003 020f 	and.w	r2, r3, #15
 8012f2c:	6879      	ldr	r1, [r7, #4]
 8012f2e:	4613      	mov	r3, r2
 8012f30:	009b      	lsls	r3, r3, #2
 8012f32:	4413      	add	r3, r2
 8012f34:	009b      	lsls	r3, r3, #2
 8012f36:	440b      	add	r3, r1
 8012f38:	3324      	adds	r3, #36	; 0x24
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012f3e:	4b39      	ldr	r3, [pc, #228]	; (8013024 <USBD_CDC_Init+0x1e8>)
 8012f40:	7819      	ldrb	r1, [r3, #0]
 8012f42:	2340      	movs	r3, #64	; 0x40
 8012f44:	2202      	movs	r2, #2
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f002 fb01 	bl	801554e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f4c:	4b35      	ldr	r3, [pc, #212]	; (8013024 <USBD_CDC_Init+0x1e8>)
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	f003 020f 	and.w	r2, r3, #15
 8012f54:	6879      	ldr	r1, [r7, #4]
 8012f56:	4613      	mov	r3, r2
 8012f58:	009b      	lsls	r3, r3, #2
 8012f5a:	4413      	add	r3, r2
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	440b      	add	r3, r1
 8012f60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012f64:	2201      	movs	r2, #1
 8012f66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012f68:	4b2f      	ldr	r3, [pc, #188]	; (8013028 <USBD_CDC_Init+0x1ec>)
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	f003 020f 	and.w	r2, r3, #15
 8012f70:	6879      	ldr	r1, [r7, #4]
 8012f72:	4613      	mov	r3, r2
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	4413      	add	r3, r2
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	440b      	add	r3, r1
 8012f7c:	3326      	adds	r3, #38	; 0x26
 8012f7e:	2210      	movs	r2, #16
 8012f80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012f82:	4b29      	ldr	r3, [pc, #164]	; (8013028 <USBD_CDC_Init+0x1ec>)
 8012f84:	7819      	ldrb	r1, [r3, #0]
 8012f86:	2308      	movs	r3, #8
 8012f88:	2203      	movs	r2, #3
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f002 fadf 	bl	801554e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012f90:	4b25      	ldr	r3, [pc, #148]	; (8013028 <USBD_CDC_Init+0x1ec>)
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f003 020f 	and.w	r2, r3, #15
 8012f98:	6879      	ldr	r1, [r7, #4]
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	440b      	add	r3, r1
 8012fa4:	3324      	adds	r3, #36	; 0x24
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	33b0      	adds	r3, #176	; 0xb0
 8012fbc:	009b      	lsls	r3, r3, #2
 8012fbe:	4413      	add	r3, r2
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d101      	bne.n	8012fe4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012fe0:	2302      	movs	r3, #2
 8012fe2:	e018      	b.n	8013016 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	7c1b      	ldrb	r3, [r3, #16]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10a      	bne.n	8013002 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012fec:	4b0d      	ldr	r3, [pc, #52]	; (8013024 <USBD_CDC_Init+0x1e8>)
 8012fee:	7819      	ldrb	r1, [r3, #0]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f002 fb96 	bl	801572c <USBD_LL_PrepareReceive>
 8013000:	e008      	b.n	8013014 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013002:	4b08      	ldr	r3, [pc, #32]	; (8013024 <USBD_CDC_Init+0x1e8>)
 8013004:	7819      	ldrb	r1, [r3, #0]
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801300c:	2340      	movs	r3, #64	; 0x40
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f002 fb8c 	bl	801572c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013014:	2300      	movs	r3, #0
}
 8013016:	4618      	mov	r0, r3
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	20000177 	.word	0x20000177
 8013024:	20000178 	.word	0x20000178
 8013028:	20000179 	.word	0x20000179

0801302c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	460b      	mov	r3, r1
 8013036:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013038:	4b3a      	ldr	r3, [pc, #232]	; (8013124 <USBD_CDC_DeInit+0xf8>)
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	4619      	mov	r1, r3
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f002 faab 	bl	801559a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013044:	4b37      	ldr	r3, [pc, #220]	; (8013124 <USBD_CDC_DeInit+0xf8>)
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	f003 020f 	and.w	r2, r3, #15
 801304c:	6879      	ldr	r1, [r7, #4]
 801304e:	4613      	mov	r3, r2
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	4413      	add	r3, r2
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	440b      	add	r3, r1
 8013058:	3324      	adds	r3, #36	; 0x24
 801305a:	2200      	movs	r2, #0
 801305c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801305e:	4b32      	ldr	r3, [pc, #200]	; (8013128 <USBD_CDC_DeInit+0xfc>)
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	4619      	mov	r1, r3
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f002 fa98 	bl	801559a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801306a:	4b2f      	ldr	r3, [pc, #188]	; (8013128 <USBD_CDC_DeInit+0xfc>)
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	f003 020f 	and.w	r2, r3, #15
 8013072:	6879      	ldr	r1, [r7, #4]
 8013074:	4613      	mov	r3, r2
 8013076:	009b      	lsls	r3, r3, #2
 8013078:	4413      	add	r3, r2
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	440b      	add	r3, r1
 801307e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013082:	2200      	movs	r2, #0
 8013084:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013086:	4b29      	ldr	r3, [pc, #164]	; (801312c <USBD_CDC_DeInit+0x100>)
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	4619      	mov	r1, r3
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f002 fa84 	bl	801559a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013092:	4b26      	ldr	r3, [pc, #152]	; (801312c <USBD_CDC_DeInit+0x100>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	f003 020f 	and.w	r2, r3, #15
 801309a:	6879      	ldr	r1, [r7, #4]
 801309c:	4613      	mov	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	440b      	add	r3, r1
 80130a6:	3324      	adds	r3, #36	; 0x24
 80130a8:	2200      	movs	r2, #0
 80130aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80130ac:	4b1f      	ldr	r3, [pc, #124]	; (801312c <USBD_CDC_DeInit+0x100>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 020f 	and.w	r2, r3, #15
 80130b4:	6879      	ldr	r1, [r7, #4]
 80130b6:	4613      	mov	r3, r2
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	4413      	add	r3, r2
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	440b      	add	r3, r1
 80130c0:	3326      	adds	r3, #38	; 0x26
 80130c2:	2200      	movs	r2, #0
 80130c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	32b0      	adds	r2, #176	; 0xb0
 80130d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d01f      	beq.n	8013118 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	33b0      	adds	r3, #176	; 0xb0
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	4413      	add	r3, r2
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	32b0      	adds	r2, #176	; 0xb0
 80130f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f002 fb58 	bl	80157b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	32b0      	adds	r2, #176	; 0xb0
 801310a:	2100      	movs	r1, #0
 801310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013118:	2300      	movs	r3, #0
}
 801311a:	4618      	mov	r0, r3
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	20000177 	.word	0x20000177
 8013128:	20000178 	.word	0x20000178
 801312c:	20000179 	.word	0x20000179

08013130 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b086      	sub	sp, #24
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	32b0      	adds	r2, #176	; 0xb0
 8013144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013148:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801314a:	2300      	movs	r3, #0
 801314c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801314e:	2300      	movs	r3, #0
 8013150:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013152:	2300      	movs	r3, #0
 8013154:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801315c:	2303      	movs	r3, #3
 801315e:	e0bf      	b.n	80132e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013168:	2b00      	cmp	r3, #0
 801316a:	d050      	beq.n	801320e <USBD_CDC_Setup+0xde>
 801316c:	2b20      	cmp	r3, #32
 801316e:	f040 80af 	bne.w	80132d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	88db      	ldrh	r3, [r3, #6]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d03a      	beq.n	80131f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	b25b      	sxtb	r3, r3
 8013180:	2b00      	cmp	r3, #0
 8013182:	da1b      	bge.n	80131bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801318a:	687a      	ldr	r2, [r7, #4]
 801318c:	33b0      	adds	r3, #176	; 0xb0
 801318e:	009b      	lsls	r3, r3, #2
 8013190:	4413      	add	r3, r2
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	689b      	ldr	r3, [r3, #8]
 8013196:	683a      	ldr	r2, [r7, #0]
 8013198:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801319a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801319c:	683a      	ldr	r2, [r7, #0]
 801319e:	88d2      	ldrh	r2, [r2, #6]
 80131a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	88db      	ldrh	r3, [r3, #6]
 80131a6:	2b07      	cmp	r3, #7
 80131a8:	bf28      	it	cs
 80131aa:	2307      	movcs	r3, #7
 80131ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	89fa      	ldrh	r2, [r7, #14]
 80131b2:	4619      	mov	r1, r3
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f001 fd89 	bl	8014ccc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80131ba:	e090      	b.n	80132de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	785a      	ldrb	r2, [r3, #1]
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	88db      	ldrh	r3, [r3, #6]
 80131ca:	2b3f      	cmp	r3, #63	; 0x3f
 80131cc:	d803      	bhi.n	80131d6 <USBD_CDC_Setup+0xa6>
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	88db      	ldrh	r3, [r3, #6]
 80131d2:	b2da      	uxtb	r2, r3
 80131d4:	e000      	b.n	80131d8 <USBD_CDC_Setup+0xa8>
 80131d6:	2240      	movs	r2, #64	; 0x40
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80131de:	6939      	ldr	r1, [r7, #16]
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80131e6:	461a      	mov	r2, r3
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f001 fd9b 	bl	8014d24 <USBD_CtlPrepareRx>
      break;
 80131ee:	e076      	b.n	80132de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	33b0      	adds	r3, #176	; 0xb0
 80131fa:	009b      	lsls	r3, r3, #2
 80131fc:	4413      	add	r3, r2
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	689b      	ldr	r3, [r3, #8]
 8013202:	683a      	ldr	r2, [r7, #0]
 8013204:	7850      	ldrb	r0, [r2, #1]
 8013206:	2200      	movs	r2, #0
 8013208:	6839      	ldr	r1, [r7, #0]
 801320a:	4798      	blx	r3
      break;
 801320c:	e067      	b.n	80132de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	785b      	ldrb	r3, [r3, #1]
 8013212:	2b0b      	cmp	r3, #11
 8013214:	d851      	bhi.n	80132ba <USBD_CDC_Setup+0x18a>
 8013216:	a201      	add	r2, pc, #4	; (adr r2, 801321c <USBD_CDC_Setup+0xec>)
 8013218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801321c:	0801324d 	.word	0x0801324d
 8013220:	080132c9 	.word	0x080132c9
 8013224:	080132bb 	.word	0x080132bb
 8013228:	080132bb 	.word	0x080132bb
 801322c:	080132bb 	.word	0x080132bb
 8013230:	080132bb 	.word	0x080132bb
 8013234:	080132bb 	.word	0x080132bb
 8013238:	080132bb 	.word	0x080132bb
 801323c:	080132bb 	.word	0x080132bb
 8013240:	080132bb 	.word	0x080132bb
 8013244:	08013277 	.word	0x08013277
 8013248:	080132a1 	.word	0x080132a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013252:	b2db      	uxtb	r3, r3
 8013254:	2b03      	cmp	r3, #3
 8013256:	d107      	bne.n	8013268 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013258:	f107 030a 	add.w	r3, r7, #10
 801325c:	2202      	movs	r2, #2
 801325e:	4619      	mov	r1, r3
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f001 fd33 	bl	8014ccc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013266:	e032      	b.n	80132ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013268:	6839      	ldr	r1, [r7, #0]
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f001 fcbd 	bl	8014bea <USBD_CtlError>
            ret = USBD_FAIL;
 8013270:	2303      	movs	r3, #3
 8013272:	75fb      	strb	r3, [r7, #23]
          break;
 8013274:	e02b      	b.n	80132ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801327c:	b2db      	uxtb	r3, r3
 801327e:	2b03      	cmp	r3, #3
 8013280:	d107      	bne.n	8013292 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013282:	f107 030d 	add.w	r3, r7, #13
 8013286:	2201      	movs	r2, #1
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f001 fd1e 	bl	8014ccc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013290:	e01d      	b.n	80132ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013292:	6839      	ldr	r1, [r7, #0]
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f001 fca8 	bl	8014bea <USBD_CtlError>
            ret = USBD_FAIL;
 801329a:	2303      	movs	r3, #3
 801329c:	75fb      	strb	r3, [r7, #23]
          break;
 801329e:	e016      	b.n	80132ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132a6:	b2db      	uxtb	r3, r3
 80132a8:	2b03      	cmp	r3, #3
 80132aa:	d00f      	beq.n	80132cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80132ac:	6839      	ldr	r1, [r7, #0]
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f001 fc9b 	bl	8014bea <USBD_CtlError>
            ret = USBD_FAIL;
 80132b4:	2303      	movs	r3, #3
 80132b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80132b8:	e008      	b.n	80132cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80132ba:	6839      	ldr	r1, [r7, #0]
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f001 fc94 	bl	8014bea <USBD_CtlError>
          ret = USBD_FAIL;
 80132c2:	2303      	movs	r3, #3
 80132c4:	75fb      	strb	r3, [r7, #23]
          break;
 80132c6:	e002      	b.n	80132ce <USBD_CDC_Setup+0x19e>
          break;
 80132c8:	bf00      	nop
 80132ca:	e008      	b.n	80132de <USBD_CDC_Setup+0x1ae>
          break;
 80132cc:	bf00      	nop
      }
      break;
 80132ce:	e006      	b.n	80132de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80132d0:	6839      	ldr	r1, [r7, #0]
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f001 fc89 	bl	8014bea <USBD_CtlError>
      ret = USBD_FAIL;
 80132d8:	2303      	movs	r3, #3
 80132da:	75fb      	strb	r3, [r7, #23]
      break;
 80132dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80132de:	7dfb      	ldrb	r3, [r7, #23]
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3718      	adds	r7, #24
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	460b      	mov	r3, r1
 80132f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80132fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	32b0      	adds	r2, #176	; 0xb0
 8013306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801330e:	2303      	movs	r3, #3
 8013310:	e065      	b.n	80133de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	32b0      	adds	r2, #176	; 0xb0
 801331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013320:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013322:	78fb      	ldrb	r3, [r7, #3]
 8013324:	f003 020f 	and.w	r2, r3, #15
 8013328:	6879      	ldr	r1, [r7, #4]
 801332a:	4613      	mov	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	4413      	add	r3, r2
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	440b      	add	r3, r1
 8013334:	3318      	adds	r3, #24
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d02f      	beq.n	801339c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801333c:	78fb      	ldrb	r3, [r7, #3]
 801333e:	f003 020f 	and.w	r2, r3, #15
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	4613      	mov	r3, r2
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	4413      	add	r3, r2
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	440b      	add	r3, r1
 801334e:	3318      	adds	r3, #24
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	78fb      	ldrb	r3, [r7, #3]
 8013354:	f003 010f 	and.w	r1, r3, #15
 8013358:	68f8      	ldr	r0, [r7, #12]
 801335a:	460b      	mov	r3, r1
 801335c:	00db      	lsls	r3, r3, #3
 801335e:	440b      	add	r3, r1
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	4403      	add	r3, r0
 8013364:	3348      	adds	r3, #72	; 0x48
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	fbb2 f1f3 	udiv	r1, r2, r3
 801336c:	fb01 f303 	mul.w	r3, r1, r3
 8013370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013372:	2b00      	cmp	r3, #0
 8013374:	d112      	bne.n	801339c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013376:	78fb      	ldrb	r3, [r7, #3]
 8013378:	f003 020f 	and.w	r2, r3, #15
 801337c:	6879      	ldr	r1, [r7, #4]
 801337e:	4613      	mov	r3, r2
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	4413      	add	r3, r2
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	440b      	add	r3, r1
 8013388:	3318      	adds	r3, #24
 801338a:	2200      	movs	r2, #0
 801338c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801338e:	78f9      	ldrb	r1, [r7, #3]
 8013390:	2300      	movs	r3, #0
 8013392:	2200      	movs	r2, #0
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f002 f9a8 	bl	80156ea <USBD_LL_Transmit>
 801339a:	e01f      	b.n	80133dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	2200      	movs	r2, #0
 80133a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	33b0      	adds	r3, #176	; 0xb0
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	4413      	add	r3, r2
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	691b      	ldr	r3, [r3, #16]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d010      	beq.n	80133dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	33b0      	adds	r3, #176	; 0xb0
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4413      	add	r3, r2
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80133d8:	78fa      	ldrb	r2, [r7, #3]
 80133da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80133dc:	2300      	movs	r3, #0
}
 80133de:	4618      	mov	r0, r3
 80133e0:	3710      	adds	r7, #16
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}

080133e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80133e6:	b580      	push	{r7, lr}
 80133e8:	b084      	sub	sp, #16
 80133ea:	af00      	add	r7, sp, #0
 80133ec:	6078      	str	r0, [r7, #4]
 80133ee:	460b      	mov	r3, r1
 80133f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	32b0      	adds	r2, #176	; 0xb0
 80133fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	32b0      	adds	r2, #176	; 0xb0
 801340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d101      	bne.n	8013418 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013414:	2303      	movs	r3, #3
 8013416:	e01a      	b.n	801344e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013418:	78fb      	ldrb	r3, [r7, #3]
 801341a:	4619      	mov	r1, r3
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f002 f9a6 	bl	801576e <USBD_LL_GetRxDataSize>
 8013422:	4602      	mov	r2, r0
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	33b0      	adds	r3, #176	; 0xb0
 8013434:	009b      	lsls	r3, r3, #2
 8013436:	4413      	add	r3, r2
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013448:	4611      	mov	r1, r2
 801344a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801344c:	2300      	movs	r3, #0
}
 801344e:	4618      	mov	r0, r3
 8013450:	3710      	adds	r7, #16
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b084      	sub	sp, #16
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	32b0      	adds	r2, #176	; 0xb0
 8013468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801346c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d101      	bne.n	8013478 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013474:	2303      	movs	r3, #3
 8013476:	e025      	b.n	80134c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	33b0      	adds	r3, #176	; 0xb0
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4413      	add	r3, r2
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d01a      	beq.n	80134c2 <USBD_CDC_EP0_RxReady+0x6c>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013492:	2bff      	cmp	r3, #255	; 0xff
 8013494:	d015      	beq.n	80134c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	33b0      	adds	r3, #176	; 0xb0
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	4413      	add	r3, r2
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	68fa      	ldr	r2, [r7, #12]
 80134aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80134ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134b6:	b292      	uxth	r2, r2
 80134b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	22ff      	movs	r2, #255	; 0xff
 80134be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80134c2:	2300      	movs	r3, #0
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3710      	adds	r7, #16
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80134d4:	2182      	movs	r1, #130	; 0x82
 80134d6:	4818      	ldr	r0, [pc, #96]	; (8013538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80134d8:	f000 fd4f 	bl	8013f7a <USBD_GetEpDesc>
 80134dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80134de:	2101      	movs	r1, #1
 80134e0:	4815      	ldr	r0, [pc, #84]	; (8013538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80134e2:	f000 fd4a 	bl	8013f7a <USBD_GetEpDesc>
 80134e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80134e8:	2181      	movs	r1, #129	; 0x81
 80134ea:	4813      	ldr	r0, [pc, #76]	; (8013538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80134ec:	f000 fd45 	bl	8013f7a <USBD_GetEpDesc>
 80134f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d002      	beq.n	80134fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	2210      	movs	r2, #16
 80134fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d006      	beq.n	8013512 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	2200      	movs	r2, #0
 8013508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801350c:	711a      	strb	r2, [r3, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d006      	beq.n	8013526 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2200      	movs	r2, #0
 801351c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013520:	711a      	strb	r2, [r3, #4]
 8013522:	2200      	movs	r2, #0
 8013524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2243      	movs	r2, #67	; 0x43
 801352a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801352c:	4b02      	ldr	r3, [pc, #8]	; (8013538 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	20000134 	.word	0x20000134

0801353c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013544:	2182      	movs	r1, #130	; 0x82
 8013546:	4818      	ldr	r0, [pc, #96]	; (80135a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013548:	f000 fd17 	bl	8013f7a <USBD_GetEpDesc>
 801354c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801354e:	2101      	movs	r1, #1
 8013550:	4815      	ldr	r0, [pc, #84]	; (80135a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013552:	f000 fd12 	bl	8013f7a <USBD_GetEpDesc>
 8013556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013558:	2181      	movs	r1, #129	; 0x81
 801355a:	4813      	ldr	r0, [pc, #76]	; (80135a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801355c:	f000 fd0d 	bl	8013f7a <USBD_GetEpDesc>
 8013560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d002      	beq.n	801356e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	2210      	movs	r2, #16
 801356c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d006      	beq.n	8013582 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	2200      	movs	r2, #0
 8013578:	711a      	strb	r2, [r3, #4]
 801357a:	2200      	movs	r2, #0
 801357c:	f042 0202 	orr.w	r2, r2, #2
 8013580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d006      	beq.n	8013596 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2200      	movs	r2, #0
 801358c:	711a      	strb	r2, [r3, #4]
 801358e:	2200      	movs	r2, #0
 8013590:	f042 0202 	orr.w	r2, r2, #2
 8013594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2243      	movs	r2, #67	; 0x43
 801359a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801359c:	4b02      	ldr	r3, [pc, #8]	; (80135a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3718      	adds	r7, #24
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	20000134 	.word	0x20000134

080135ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b086      	sub	sp, #24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80135b4:	2182      	movs	r1, #130	; 0x82
 80135b6:	4818      	ldr	r0, [pc, #96]	; (8013618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135b8:	f000 fcdf 	bl	8013f7a <USBD_GetEpDesc>
 80135bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80135be:	2101      	movs	r1, #1
 80135c0:	4815      	ldr	r0, [pc, #84]	; (8013618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135c2:	f000 fcda 	bl	8013f7a <USBD_GetEpDesc>
 80135c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80135c8:	2181      	movs	r1, #129	; 0x81
 80135ca:	4813      	ldr	r0, [pc, #76]	; (8013618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135cc:	f000 fcd5 	bl	8013f7a <USBD_GetEpDesc>
 80135d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d002      	beq.n	80135de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	2210      	movs	r2, #16
 80135dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d006      	beq.n	80135f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	2200      	movs	r2, #0
 80135e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135ec:	711a      	strb	r2, [r3, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d006      	beq.n	8013606 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2200      	movs	r2, #0
 80135fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013600:	711a      	strb	r2, [r3, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2243      	movs	r2, #67	; 0x43
 801360a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801360c:	4b02      	ldr	r3, [pc, #8]	; (8013618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801360e:	4618      	mov	r0, r3
 8013610:	3718      	adds	r7, #24
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	20000134 	.word	0x20000134

0801361c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801361c:	b480      	push	{r7}
 801361e:	b083      	sub	sp, #12
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	220a      	movs	r2, #10
 8013628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801362a:	4b03      	ldr	r3, [pc, #12]	; (8013638 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801362c:	4618      	mov	r0, r3
 801362e:	370c      	adds	r7, #12
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr
 8013638:	200000f0 	.word	0x200000f0

0801363c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801363c:	b480      	push	{r7}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d101      	bne.n	8013650 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801364c:	2303      	movs	r3, #3
 801364e:	e009      	b.n	8013664 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	33b0      	adds	r3, #176	; 0xb0
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	4413      	add	r3, r2
 801365e:	683a      	ldr	r2, [r7, #0]
 8013660:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013670:	b480      	push	{r7}
 8013672:	b087      	sub	sp, #28
 8013674:	af00      	add	r7, sp, #0
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	32b0      	adds	r2, #176	; 0xb0
 8013686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801368a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d101      	bne.n	8013696 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013692:	2303      	movs	r3, #3
 8013694:	e008      	b.n	80136a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	68ba      	ldr	r2, [r7, #8]
 801369a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80136a6:	2300      	movs	r3, #0
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	371c      	adds	r7, #28
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr

080136b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b085      	sub	sp, #20
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	32b0      	adds	r2, #176	; 0xb0
 80136c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d101      	bne.n	80136d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80136d4:	2303      	movs	r3, #3
 80136d6:	e004      	b.n	80136e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	683a      	ldr	r2, [r7, #0]
 80136dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3714      	adds	r7, #20
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr
	...

080136f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	32b0      	adds	r2, #176	; 0xb0
 8013702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013706:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013708:	2301      	movs	r3, #1
 801370a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	32b0      	adds	r2, #176	; 0xb0
 8013716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d101      	bne.n	8013722 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801371e:	2303      	movs	r3, #3
 8013720:	e025      	b.n	801376e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013728:	2b00      	cmp	r3, #0
 801372a:	d11f      	bne.n	801376c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	2201      	movs	r2, #1
 8013730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013734:	4b10      	ldr	r3, [pc, #64]	; (8013778 <USBD_CDC_TransmitPacket+0x88>)
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	f003 020f 	and.w	r2, r3, #15
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	4613      	mov	r3, r2
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	4413      	add	r3, r2
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	4403      	add	r3, r0
 801374e:	3318      	adds	r3, #24
 8013750:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013752:	4b09      	ldr	r3, [pc, #36]	; (8013778 <USBD_CDC_TransmitPacket+0x88>)
 8013754:	7819      	ldrb	r1, [r3, #0]
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f001 ffc1 	bl	80156ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8013768:	2300      	movs	r3, #0
 801376a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801376c:	7bfb      	ldrb	r3, [r7, #15]
}
 801376e:	4618      	mov	r0, r3
 8013770:	3710      	adds	r7, #16
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	20000177 	.word	0x20000177

0801377c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	32b0      	adds	r2, #176	; 0xb0
 801378e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013792:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	32b0      	adds	r2, #176	; 0xb0
 801379e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d101      	bne.n	80137aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80137a6:	2303      	movs	r3, #3
 80137a8:	e018      	b.n	80137dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	7c1b      	ldrb	r3, [r3, #16]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d10a      	bne.n	80137c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137b2:	4b0c      	ldr	r3, [pc, #48]	; (80137e4 <USBD_CDC_ReceivePacket+0x68>)
 80137b4:	7819      	ldrb	r1, [r3, #0]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f001 ffb3 	bl	801572c <USBD_LL_PrepareReceive>
 80137c6:	e008      	b.n	80137da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137c8:	4b06      	ldr	r3, [pc, #24]	; (80137e4 <USBD_CDC_ReceivePacket+0x68>)
 80137ca:	7819      	ldrb	r1, [r3, #0]
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137d2:	2340      	movs	r3, #64	; 0x40
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f001 ffa9 	bl	801572c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3710      	adds	r7, #16
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	20000178 	.word	0x20000178

080137e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	4613      	mov	r3, r2
 80137f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d101      	bne.n	8013800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80137fc:	2303      	movs	r3, #3
 80137fe:	e01f      	b.n	8013840 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	2200      	movs	r2, #0
 8013804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2200      	movs	r2, #0
 801380c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2200      	movs	r2, #0
 8013814:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d003      	beq.n	8013826 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	68ba      	ldr	r2, [r7, #8]
 8013822:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	2201      	movs	r2, #1
 801382a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	79fa      	ldrb	r2, [r7, #7]
 8013832:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013834:	68f8      	ldr	r0, [r7, #12]
 8013836:	f001 fe23 	bl	8015480 <USBD_LL_Init>
 801383a:	4603      	mov	r3, r0
 801383c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3718      	adds	r7, #24
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013852:	2300      	movs	r3, #0
 8013854:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d101      	bne.n	8013860 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801385c:	2303      	movs	r3, #3
 801385e:	e025      	b.n	80138ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	683a      	ldr	r2, [r7, #0]
 8013864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	32ae      	adds	r2, #174	; 0xae
 8013872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00f      	beq.n	801389c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	32ae      	adds	r2, #174	; 0xae
 8013886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801388c:	f107 020e 	add.w	r2, r7, #14
 8013890:	4610      	mov	r0, r2
 8013892:	4798      	blx	r3
 8013894:	4602      	mov	r2, r0
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80138a2:	1c5a      	adds	r2, r3, #1
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80138aa:	2300      	movs	r3, #0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3710      	adds	r7, #16
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f001 fe2b 	bl	8015518 <USBD_LL_Start>
 80138c2:	4603      	mov	r3, r0
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	370c      	adds	r7, #12
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr

080138e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b084      	sub	sp, #16
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	6078      	str	r0, [r7, #4]
 80138ea:	460b      	mov	r3, r1
 80138ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80138ee:	2300      	movs	r3, #0
 80138f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d009      	beq.n	8013910 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	78fa      	ldrb	r2, [r7, #3]
 8013906:	4611      	mov	r1, r2
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	4798      	blx	r3
 801390c:	4603      	mov	r3, r0
 801390e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013910:	7bfb      	ldrb	r3, [r7, #15]
}
 8013912:	4618      	mov	r0, r3
 8013914:	3710      	adds	r7, #16
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}

0801391a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801391a:	b580      	push	{r7, lr}
 801391c:	b084      	sub	sp, #16
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	460b      	mov	r3, r1
 8013924:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013926:	2300      	movs	r3, #0
 8013928:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	78fa      	ldrb	r2, [r7, #3]
 8013934:	4611      	mov	r1, r2
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	4798      	blx	r3
 801393a:	4603      	mov	r3, r0
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013940:	2303      	movs	r3, #3
 8013942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013944:	7bfb      	ldrb	r3, [r7, #15]
}
 8013946:	4618      	mov	r0, r3
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b084      	sub	sp, #16
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
 8013956:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801395e:	6839      	ldr	r1, [r7, #0]
 8013960:	4618      	mov	r0, r3
 8013962:	f001 f908 	bl	8014b76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2201      	movs	r2, #1
 801396a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013974:	461a      	mov	r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013982:	f003 031f 	and.w	r3, r3, #31
 8013986:	2b02      	cmp	r3, #2
 8013988:	d01a      	beq.n	80139c0 <USBD_LL_SetupStage+0x72>
 801398a:	2b02      	cmp	r3, #2
 801398c:	d822      	bhi.n	80139d4 <USBD_LL_SetupStage+0x86>
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <USBD_LL_SetupStage+0x4a>
 8013992:	2b01      	cmp	r3, #1
 8013994:	d00a      	beq.n	80139ac <USBD_LL_SetupStage+0x5e>
 8013996:	e01d      	b.n	80139d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801399e:	4619      	mov	r1, r3
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 fb5f 	bl	8014064 <USBD_StdDevReq>
 80139a6:	4603      	mov	r3, r0
 80139a8:	73fb      	strb	r3, [r7, #15]
      break;
 80139aa:	e020      	b.n	80139ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139b2:	4619      	mov	r1, r3
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f000 fbc7 	bl	8014148 <USBD_StdItfReq>
 80139ba:	4603      	mov	r3, r0
 80139bc:	73fb      	strb	r3, [r7, #15]
      break;
 80139be:	e016      	b.n	80139ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139c6:	4619      	mov	r1, r3
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fc29 	bl	8014220 <USBD_StdEPReq>
 80139ce:	4603      	mov	r3, r0
 80139d0:	73fb      	strb	r3, [r7, #15]
      break;
 80139d2:	e00c      	b.n	80139ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80139da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	4619      	mov	r1, r3
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f001 fdf8 	bl	80155d8 <USBD_LL_StallEP>
 80139e8:	4603      	mov	r3, r0
 80139ea:	73fb      	strb	r3, [r7, #15]
      break;
 80139ec:	bf00      	nop
  }

  return ret;
 80139ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3710      	adds	r7, #16
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	460b      	mov	r3, r1
 8013a02:	607a      	str	r2, [r7, #4]
 8013a04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a06:	2300      	movs	r3, #0
 8013a08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013a0a:	7afb      	ldrb	r3, [r7, #11]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d16e      	bne.n	8013aee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013a16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013a1e:	2b03      	cmp	r3, #3
 8013a20:	f040 8098 	bne.w	8013b54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	689a      	ldr	r2, [r3, #8]
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d913      	bls.n	8013a58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	689a      	ldr	r2, [r3, #8]
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	68db      	ldr	r3, [r3, #12]
 8013a38:	1ad2      	subs	r2, r2, r3
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	68da      	ldr	r2, [r3, #12]
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	4293      	cmp	r3, r2
 8013a48:	bf28      	it	cs
 8013a4a:	4613      	movcs	r3, r2
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	6879      	ldr	r1, [r7, #4]
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f001 f984 	bl	8014d5e <USBD_CtlContinueRx>
 8013a56:	e07d      	b.n	8013b54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013a5e:	f003 031f 	and.w	r3, r3, #31
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	d014      	beq.n	8013a90 <USBD_LL_DataOutStage+0x98>
 8013a66:	2b02      	cmp	r3, #2
 8013a68:	d81d      	bhi.n	8013aa6 <USBD_LL_DataOutStage+0xae>
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d002      	beq.n	8013a74 <USBD_LL_DataOutStage+0x7c>
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d003      	beq.n	8013a7a <USBD_LL_DataOutStage+0x82>
 8013a72:	e018      	b.n	8013aa6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013a74:	2300      	movs	r3, #0
 8013a76:	75bb      	strb	r3, [r7, #22]
            break;
 8013a78:	e018      	b.n	8013aac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	4619      	mov	r1, r3
 8013a84:	68f8      	ldr	r0, [r7, #12]
 8013a86:	f000 fa5e 	bl	8013f46 <USBD_CoreFindIF>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	75bb      	strb	r3, [r7, #22]
            break;
 8013a8e:	e00d      	b.n	8013aac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	4619      	mov	r1, r3
 8013a9a:	68f8      	ldr	r0, [r7, #12]
 8013a9c:	f000 fa60 	bl	8013f60 <USBD_CoreFindEP>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	75bb      	strb	r3, [r7, #22]
            break;
 8013aa4:	e002      	b.n	8013aac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	75bb      	strb	r3, [r7, #22]
            break;
 8013aaa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013aac:	7dbb      	ldrb	r3, [r7, #22]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d119      	bne.n	8013ae6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	2b03      	cmp	r3, #3
 8013abc:	d113      	bne.n	8013ae6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013abe:	7dba      	ldrb	r2, [r7, #22]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	32ae      	adds	r2, #174	; 0xae
 8013ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac8:	691b      	ldr	r3, [r3, #16]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00b      	beq.n	8013ae6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013ace:	7dba      	ldrb	r2, [r7, #22]
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013ad6:	7dba      	ldrb	r2, [r7, #22]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	32ae      	adds	r2, #174	; 0xae
 8013adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae0:	691b      	ldr	r3, [r3, #16]
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f001 f94a 	bl	8014d80 <USBD_CtlSendStatus>
 8013aec:	e032      	b.n	8013b54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013aee:	7afb      	ldrb	r3, [r7, #11]
 8013af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013af4:	b2db      	uxtb	r3, r3
 8013af6:	4619      	mov	r1, r3
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	f000 fa31 	bl	8013f60 <USBD_CoreFindEP>
 8013afe:	4603      	mov	r3, r0
 8013b00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b02:	7dbb      	ldrb	r3, [r7, #22]
 8013b04:	2bff      	cmp	r3, #255	; 0xff
 8013b06:	d025      	beq.n	8013b54 <USBD_LL_DataOutStage+0x15c>
 8013b08:	7dbb      	ldrb	r3, [r7, #22]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d122      	bne.n	8013b54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	2b03      	cmp	r3, #3
 8013b18:	d117      	bne.n	8013b4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013b1a:	7dba      	ldrb	r2, [r7, #22]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	32ae      	adds	r2, #174	; 0xae
 8013b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b24:	699b      	ldr	r3, [r3, #24]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d00f      	beq.n	8013b4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013b2a:	7dba      	ldrb	r2, [r7, #22]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013b32:	7dba      	ldrb	r2, [r7, #22]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	32ae      	adds	r2, #174	; 0xae
 8013b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b3c:	699b      	ldr	r3, [r3, #24]
 8013b3e:	7afa      	ldrb	r2, [r7, #11]
 8013b40:	4611      	mov	r1, r2
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	4798      	blx	r3
 8013b46:	4603      	mov	r3, r0
 8013b48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013b4a:	7dfb      	ldrb	r3, [r7, #23]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d001      	beq.n	8013b54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013b50:	7dfb      	ldrb	r3, [r7, #23]
 8013b52:	e000      	b.n	8013b56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013b54:	2300      	movs	r3, #0
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	3718      	adds	r7, #24
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b086      	sub	sp, #24
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	60f8      	str	r0, [r7, #12]
 8013b66:	460b      	mov	r3, r1
 8013b68:	607a      	str	r2, [r7, #4]
 8013b6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013b6c:	7afb      	ldrb	r3, [r7, #11]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d16f      	bne.n	8013c52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	3314      	adds	r3, #20
 8013b76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d15a      	bne.n	8013c38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	689a      	ldr	r2, [r3, #8]
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	68db      	ldr	r3, [r3, #12]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d914      	bls.n	8013bb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	689a      	ldr	r2, [r3, #8]
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	1ad2      	subs	r2, r2, r3
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	689b      	ldr	r3, [r3, #8]
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	6879      	ldr	r1, [r7, #4]
 8013ba4:	68f8      	ldr	r0, [r7, #12]
 8013ba6:	f001 f8ac 	bl	8014d02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013baa:	2300      	movs	r3, #0
 8013bac:	2200      	movs	r2, #0
 8013bae:	2100      	movs	r1, #0
 8013bb0:	68f8      	ldr	r0, [r7, #12]
 8013bb2:	f001 fdbb 	bl	801572c <USBD_LL_PrepareReceive>
 8013bb6:	e03f      	b.n	8013c38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	68da      	ldr	r2, [r3, #12]
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	689b      	ldr	r3, [r3, #8]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d11c      	bne.n	8013bfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	685a      	ldr	r2, [r3, #4]
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d316      	bcc.n	8013bfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	685a      	ldr	r2, [r3, #4]
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d20f      	bcs.n	8013bfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013bde:	2200      	movs	r2, #0
 8013be0:	2100      	movs	r1, #0
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	f001 f88d 	bl	8014d02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2200      	movs	r2, #0
 8013bec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	f001 fd98 	bl	801572c <USBD_LL_PrepareReceive>
 8013bfc:	e01c      	b.n	8013c38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	2b03      	cmp	r3, #3
 8013c08:	d10f      	bne.n	8013c2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c10:	68db      	ldr	r3, [r3, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d009      	beq.n	8013c2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	68f8      	ldr	r0, [r7, #12]
 8013c28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c2a:	2180      	movs	r1, #128	; 0x80
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f001 fcd3 	bl	80155d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013c32:	68f8      	ldr	r0, [r7, #12]
 8013c34:	f001 f8b7 	bl	8014da6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d03a      	beq.n	8013cb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	f7ff fe42 	bl	80138cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013c50:	e032      	b.n	8013cb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013c52:	7afb      	ldrb	r3, [r7, #11]
 8013c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	68f8      	ldr	r0, [r7, #12]
 8013c5e:	f000 f97f 	bl	8013f60 <USBD_CoreFindEP>
 8013c62:	4603      	mov	r3, r0
 8013c64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
 8013c68:	2bff      	cmp	r3, #255	; 0xff
 8013c6a:	d025      	beq.n	8013cb8 <USBD_LL_DataInStage+0x15a>
 8013c6c:	7dfb      	ldrb	r3, [r7, #23]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d122      	bne.n	8013cb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	2b03      	cmp	r3, #3
 8013c7c:	d11c      	bne.n	8013cb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013c7e:	7dfa      	ldrb	r2, [r7, #23]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	32ae      	adds	r2, #174	; 0xae
 8013c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c88:	695b      	ldr	r3, [r3, #20]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d014      	beq.n	8013cb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013c8e:	7dfa      	ldrb	r2, [r7, #23]
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013c96:	7dfa      	ldrb	r2, [r7, #23]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	32ae      	adds	r2, #174	; 0xae
 8013c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca0:	695b      	ldr	r3, [r3, #20]
 8013ca2:	7afa      	ldrb	r2, [r7, #11]
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	4798      	blx	r3
 8013caa:	4603      	mov	r3, r0
 8013cac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013cae:	7dbb      	ldrb	r3, [r7, #22]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d001      	beq.n	8013cb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013cb4:	7dbb      	ldrb	r3, [r7, #22]
 8013cb6:	e000      	b.n	8013cba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3718      	adds	r7, #24
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}

08013cc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b084      	sub	sp, #16
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d014      	beq.n	8013d28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00e      	beq.n	8013d28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	6852      	ldr	r2, [r2, #4]
 8013d16:	b2d2      	uxtb	r2, r2
 8013d18:	4611      	mov	r1, r2
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	4798      	blx	r3
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d001      	beq.n	8013d28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013d24:	2303      	movs	r3, #3
 8013d26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d28:	2340      	movs	r3, #64	; 0x40
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	2100      	movs	r1, #0
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f001 fc0d 	bl	801554e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2201      	movs	r2, #1
 8013d38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2240      	movs	r2, #64	; 0x40
 8013d40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d44:	2340      	movs	r3, #64	; 0x40
 8013d46:	2200      	movs	r2, #0
 8013d48:	2180      	movs	r1, #128	; 0x80
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f001 fbff 	bl	801554e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2201      	movs	r2, #1
 8013d54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2240      	movs	r2, #64	; 0x40
 8013d5a:	621a      	str	r2, [r3, #32]

  return ret;
 8013d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3710      	adds	r7, #16
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013d66:	b480      	push	{r7}
 8013d68:	b083      	sub	sp, #12
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
 8013d6e:	460b      	mov	r3, r1
 8013d70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	78fa      	ldrb	r2, [r7, #3]
 8013d76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013d78:	2300      	movs	r3, #0
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	370c      	adds	r7, #12
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr

08013d86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013d86:	b480      	push	{r7}
 8013d88:	b083      	sub	sp, #12
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2204      	movs	r2, #4
 8013da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	370c      	adds	r7, #12
 8013daa:	46bd      	mov	sp, r7
 8013dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db0:	4770      	bx	lr

08013db2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013db2:	b480      	push	{r7}
 8013db4:	b083      	sub	sp, #12
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	2b04      	cmp	r3, #4
 8013dc4:	d106      	bne.n	8013dd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013dcc:	b2da      	uxtb	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	370c      	adds	r7, #12
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr

08013de2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	2b03      	cmp	r3, #3
 8013df4:	d110      	bne.n	8013e18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d00b      	beq.n	8013e18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e06:	69db      	ldr	r3, [r3, #28]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d005      	beq.n	8013e18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e12:	69db      	ldr	r3, [r3, #28]
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3708      	adds	r7, #8
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b082      	sub	sp, #8
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	32ae      	adds	r2, #174	; 0xae
 8013e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d101      	bne.n	8013e44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013e40:	2303      	movs	r3, #3
 8013e42:	e01c      	b.n	8013e7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e4a:	b2db      	uxtb	r3, r3
 8013e4c:	2b03      	cmp	r3, #3
 8013e4e:	d115      	bne.n	8013e7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	32ae      	adds	r2, #174	; 0xae
 8013e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e5e:	6a1b      	ldr	r3, [r3, #32]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00b      	beq.n	8013e7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	32ae      	adds	r2, #174	; 0xae
 8013e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e72:	6a1b      	ldr	r3, [r3, #32]
 8013e74:	78fa      	ldrb	r2, [r7, #3]
 8013e76:	4611      	mov	r1, r2
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013e7c:	2300      	movs	r3, #0
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013e86:	b580      	push	{r7, lr}
 8013e88:	b082      	sub	sp, #8
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
 8013e8e:	460b      	mov	r3, r1
 8013e90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	32ae      	adds	r2, #174	; 0xae
 8013e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013ea4:	2303      	movs	r3, #3
 8013ea6:	e01c      	b.n	8013ee2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d115      	bne.n	8013ee0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	32ae      	adds	r2, #174	; 0xae
 8013ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d00b      	beq.n	8013ee0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	32ae      	adds	r2, #174	; 0xae
 8013ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed8:	78fa      	ldrb	r2, [r7, #3]
 8013eda:	4611      	mov	r1, r2
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013ee0:	2300      	movs	r3, #0
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013eea:	b480      	push	{r7}
 8013eec:	b083      	sub	sp, #12
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013ef2:	2300      	movs	r3, #0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	370c      	adds	r7, #12
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr

08013f00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2201      	movs	r2, #1
 8013f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d00e      	beq.n	8013f3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	6852      	ldr	r2, [r2, #4]
 8013f2a:	b2d2      	uxtb	r2, r2
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	4798      	blx	r3
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d001      	beq.n	8013f3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013f38:	2303      	movs	r3, #3
 8013f3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3710      	adds	r7, #16
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}

08013f46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f46:	b480      	push	{r7}
 8013f48:	b083      	sub	sp, #12
 8013f4a:	af00      	add	r7, sp, #0
 8013f4c:	6078      	str	r0, [r7, #4]
 8013f4e:	460b      	mov	r3, r1
 8013f50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	370c      	adds	r7, #12
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	460b      	mov	r3, r1
 8013f6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	370c      	adds	r7, #12
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr

08013f7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b086      	sub	sp, #24
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	460b      	mov	r3, r1
 8013f84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	885b      	ldrh	r3, [r3, #2]
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d920      	bls.n	8013fe4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013faa:	e013      	b.n	8013fd4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013fac:	f107 030a 	add.w	r3, r7, #10
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	6978      	ldr	r0, [r7, #20]
 8013fb4:	f000 f81b 	bl	8013fee <USBD_GetNextDesc>
 8013fb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	785b      	ldrb	r3, [r3, #1]
 8013fbe:	2b05      	cmp	r3, #5
 8013fc0:	d108      	bne.n	8013fd4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	789b      	ldrb	r3, [r3, #2]
 8013fca:	78fa      	ldrb	r2, [r7, #3]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d008      	beq.n	8013fe2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	885b      	ldrh	r3, [r3, #2]
 8013fd8:	b29a      	uxth	r2, r3
 8013fda:	897b      	ldrh	r3, [r7, #10]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d8e5      	bhi.n	8013fac <USBD_GetEpDesc+0x32>
 8013fe0:	e000      	b.n	8013fe4 <USBD_GetEpDesc+0x6a>
          break;
 8013fe2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013fe4:	693b      	ldr	r3, [r7, #16]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3718      	adds	r7, #24
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}

08013fee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013fee:	b480      	push	{r7}
 8013ff0:	b085      	sub	sp, #20
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
 8013ff6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	881a      	ldrh	r2, [r3, #0]
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	b29b      	uxth	r3, r3
 8014006:	4413      	add	r3, r2
 8014008:	b29a      	uxth	r2, r3
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	461a      	mov	r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	4413      	add	r3, r2
 8014018:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801401a:	68fb      	ldr	r3, [r7, #12]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014028:	b480      	push	{r7}
 801402a:	b087      	sub	sp, #28
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	3301      	adds	r3, #1
 801403e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014046:	8a3b      	ldrh	r3, [r7, #16]
 8014048:	021b      	lsls	r3, r3, #8
 801404a:	b21a      	sxth	r2, r3
 801404c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014050:	4313      	orrs	r3, r2
 8014052:	b21b      	sxth	r3, r3
 8014054:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014056:	89fb      	ldrh	r3, [r7, #14]
}
 8014058:	4618      	mov	r0, r3
 801405a:	371c      	adds	r7, #28
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr

08014064 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801406e:	2300      	movs	r3, #0
 8014070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801407a:	2b40      	cmp	r3, #64	; 0x40
 801407c:	d005      	beq.n	801408a <USBD_StdDevReq+0x26>
 801407e:	2b40      	cmp	r3, #64	; 0x40
 8014080:	d857      	bhi.n	8014132 <USBD_StdDevReq+0xce>
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00f      	beq.n	80140a6 <USBD_StdDevReq+0x42>
 8014086:	2b20      	cmp	r3, #32
 8014088:	d153      	bne.n	8014132 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	32ae      	adds	r2, #174	; 0xae
 8014094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	6839      	ldr	r1, [r7, #0]
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	4798      	blx	r3
 80140a0:	4603      	mov	r3, r0
 80140a2:	73fb      	strb	r3, [r7, #15]
      break;
 80140a4:	e04a      	b.n	801413c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	785b      	ldrb	r3, [r3, #1]
 80140aa:	2b09      	cmp	r3, #9
 80140ac:	d83b      	bhi.n	8014126 <USBD_StdDevReq+0xc2>
 80140ae:	a201      	add	r2, pc, #4	; (adr r2, 80140b4 <USBD_StdDevReq+0x50>)
 80140b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140b4:	08014109 	.word	0x08014109
 80140b8:	0801411d 	.word	0x0801411d
 80140bc:	08014127 	.word	0x08014127
 80140c0:	08014113 	.word	0x08014113
 80140c4:	08014127 	.word	0x08014127
 80140c8:	080140e7 	.word	0x080140e7
 80140cc:	080140dd 	.word	0x080140dd
 80140d0:	08014127 	.word	0x08014127
 80140d4:	080140ff 	.word	0x080140ff
 80140d8:	080140f1 	.word	0x080140f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80140dc:	6839      	ldr	r1, [r7, #0]
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f000 fa3c 	bl	801455c <USBD_GetDescriptor>
          break;
 80140e4:	e024      	b.n	8014130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80140e6:	6839      	ldr	r1, [r7, #0]
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 fba1 	bl	8014830 <USBD_SetAddress>
          break;
 80140ee:	e01f      	b.n	8014130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80140f0:	6839      	ldr	r1, [r7, #0]
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 fbe0 	bl	80148b8 <USBD_SetConfig>
 80140f8:	4603      	mov	r3, r0
 80140fa:	73fb      	strb	r3, [r7, #15]
          break;
 80140fc:	e018      	b.n	8014130 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80140fe:	6839      	ldr	r1, [r7, #0]
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f000 fc83 	bl	8014a0c <USBD_GetConfig>
          break;
 8014106:	e013      	b.n	8014130 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 fcb4 	bl	8014a78 <USBD_GetStatus>
          break;
 8014110:	e00e      	b.n	8014130 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 fce3 	bl	8014ae0 <USBD_SetFeature>
          break;
 801411a:	e009      	b.n	8014130 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801411c:	6839      	ldr	r1, [r7, #0]
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f000 fd07 	bl	8014b32 <USBD_ClrFeature>
          break;
 8014124:	e004      	b.n	8014130 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fd5e 	bl	8014bea <USBD_CtlError>
          break;
 801412e:	bf00      	nop
      }
      break;
 8014130:	e004      	b.n	801413c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014132:	6839      	ldr	r1, [r7, #0]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 fd58 	bl	8014bea <USBD_CtlError>
      break;
 801413a:	bf00      	nop
  }

  return ret;
 801413c:	7bfb      	ldrb	r3, [r7, #15]
}
 801413e:	4618      	mov	r0, r3
 8014140:	3710      	adds	r7, #16
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop

08014148 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014152:	2300      	movs	r3, #0
 8014154:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801415e:	2b40      	cmp	r3, #64	; 0x40
 8014160:	d005      	beq.n	801416e <USBD_StdItfReq+0x26>
 8014162:	2b40      	cmp	r3, #64	; 0x40
 8014164:	d852      	bhi.n	801420c <USBD_StdItfReq+0xc4>
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <USBD_StdItfReq+0x26>
 801416a:	2b20      	cmp	r3, #32
 801416c:	d14e      	bne.n	801420c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014174:	b2db      	uxtb	r3, r3
 8014176:	3b01      	subs	r3, #1
 8014178:	2b02      	cmp	r3, #2
 801417a:	d840      	bhi.n	80141fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	889b      	ldrh	r3, [r3, #4]
 8014180:	b2db      	uxtb	r3, r3
 8014182:	2b01      	cmp	r3, #1
 8014184:	d836      	bhi.n	80141f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	889b      	ldrh	r3, [r3, #4]
 801418a:	b2db      	uxtb	r3, r3
 801418c:	4619      	mov	r1, r3
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f7ff fed9 	bl	8013f46 <USBD_CoreFindIF>
 8014194:	4603      	mov	r3, r0
 8014196:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014198:	7bbb      	ldrb	r3, [r7, #14]
 801419a:	2bff      	cmp	r3, #255	; 0xff
 801419c:	d01d      	beq.n	80141da <USBD_StdItfReq+0x92>
 801419e:	7bbb      	ldrb	r3, [r7, #14]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d11a      	bne.n	80141da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80141a4:	7bba      	ldrb	r2, [r7, #14]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	32ae      	adds	r2, #174	; 0xae
 80141aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ae:	689b      	ldr	r3, [r3, #8]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00f      	beq.n	80141d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80141b4:	7bba      	ldrb	r2, [r7, #14]
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80141bc:	7bba      	ldrb	r2, [r7, #14]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	32ae      	adds	r2, #174	; 0xae
 80141c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c6:	689b      	ldr	r3, [r3, #8]
 80141c8:	6839      	ldr	r1, [r7, #0]
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	4798      	blx	r3
 80141ce:	4603      	mov	r3, r0
 80141d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80141d2:	e004      	b.n	80141de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80141d4:	2303      	movs	r3, #3
 80141d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80141d8:	e001      	b.n	80141de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80141da:	2303      	movs	r3, #3
 80141dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	88db      	ldrh	r3, [r3, #6]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d110      	bne.n	8014208 <USBD_StdItfReq+0xc0>
 80141e6:	7bfb      	ldrb	r3, [r7, #15]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d10d      	bne.n	8014208 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f000 fdc7 	bl	8014d80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80141f2:	e009      	b.n	8014208 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80141f4:	6839      	ldr	r1, [r7, #0]
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f000 fcf7 	bl	8014bea <USBD_CtlError>
          break;
 80141fc:	e004      	b.n	8014208 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f000 fcf2 	bl	8014bea <USBD_CtlError>
          break;
 8014206:	e000      	b.n	801420a <USBD_StdItfReq+0xc2>
          break;
 8014208:	bf00      	nop
      }
      break;
 801420a:	e004      	b.n	8014216 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801420c:	6839      	ldr	r1, [r7, #0]
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f000 fceb 	bl	8014bea <USBD_CtlError>
      break;
 8014214:	bf00      	nop
  }

  return ret;
 8014216:	7bfb      	ldrb	r3, [r7, #15]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3710      	adds	r7, #16
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801422a:	2300      	movs	r3, #0
 801422c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	889b      	ldrh	r3, [r3, #4]
 8014232:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801423c:	2b40      	cmp	r3, #64	; 0x40
 801423e:	d007      	beq.n	8014250 <USBD_StdEPReq+0x30>
 8014240:	2b40      	cmp	r3, #64	; 0x40
 8014242:	f200 817f 	bhi.w	8014544 <USBD_StdEPReq+0x324>
 8014246:	2b00      	cmp	r3, #0
 8014248:	d02a      	beq.n	80142a0 <USBD_StdEPReq+0x80>
 801424a:	2b20      	cmp	r3, #32
 801424c:	f040 817a 	bne.w	8014544 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014250:	7bbb      	ldrb	r3, [r7, #14]
 8014252:	4619      	mov	r1, r3
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f7ff fe83 	bl	8013f60 <USBD_CoreFindEP>
 801425a:	4603      	mov	r3, r0
 801425c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801425e:	7b7b      	ldrb	r3, [r7, #13]
 8014260:	2bff      	cmp	r3, #255	; 0xff
 8014262:	f000 8174 	beq.w	801454e <USBD_StdEPReq+0x32e>
 8014266:	7b7b      	ldrb	r3, [r7, #13]
 8014268:	2b00      	cmp	r3, #0
 801426a:	f040 8170 	bne.w	801454e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801426e:	7b7a      	ldrb	r2, [r7, #13]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014276:	7b7a      	ldrb	r2, [r7, #13]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	32ae      	adds	r2, #174	; 0xae
 801427c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014280:	689b      	ldr	r3, [r3, #8]
 8014282:	2b00      	cmp	r3, #0
 8014284:	f000 8163 	beq.w	801454e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014288:	7b7a      	ldrb	r2, [r7, #13]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	32ae      	adds	r2, #174	; 0xae
 801428e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014292:	689b      	ldr	r3, [r3, #8]
 8014294:	6839      	ldr	r1, [r7, #0]
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	4798      	blx	r3
 801429a:	4603      	mov	r3, r0
 801429c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801429e:	e156      	b.n	801454e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	785b      	ldrb	r3, [r3, #1]
 80142a4:	2b03      	cmp	r3, #3
 80142a6:	d008      	beq.n	80142ba <USBD_StdEPReq+0x9a>
 80142a8:	2b03      	cmp	r3, #3
 80142aa:	f300 8145 	bgt.w	8014538 <USBD_StdEPReq+0x318>
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f000 809b 	beq.w	80143ea <USBD_StdEPReq+0x1ca>
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d03c      	beq.n	8014332 <USBD_StdEPReq+0x112>
 80142b8:	e13e      	b.n	8014538 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	2b02      	cmp	r3, #2
 80142c4:	d002      	beq.n	80142cc <USBD_StdEPReq+0xac>
 80142c6:	2b03      	cmp	r3, #3
 80142c8:	d016      	beq.n	80142f8 <USBD_StdEPReq+0xd8>
 80142ca:	e02c      	b.n	8014326 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142cc:	7bbb      	ldrb	r3, [r7, #14]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d00d      	beq.n	80142ee <USBD_StdEPReq+0xce>
 80142d2:	7bbb      	ldrb	r3, [r7, #14]
 80142d4:	2b80      	cmp	r3, #128	; 0x80
 80142d6:	d00a      	beq.n	80142ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80142d8:	7bbb      	ldrb	r3, [r7, #14]
 80142da:	4619      	mov	r1, r3
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f001 f97b 	bl	80155d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80142e2:	2180      	movs	r1, #128	; 0x80
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f001 f977 	bl	80155d8 <USBD_LL_StallEP>
 80142ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80142ec:	e020      	b.n	8014330 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80142ee:	6839      	ldr	r1, [r7, #0]
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f000 fc7a 	bl	8014bea <USBD_CtlError>
              break;
 80142f6:	e01b      	b.n	8014330 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	885b      	ldrh	r3, [r3, #2]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10e      	bne.n	801431e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014300:	7bbb      	ldrb	r3, [r7, #14]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d00b      	beq.n	801431e <USBD_StdEPReq+0xfe>
 8014306:	7bbb      	ldrb	r3, [r7, #14]
 8014308:	2b80      	cmp	r3, #128	; 0x80
 801430a:	d008      	beq.n	801431e <USBD_StdEPReq+0xfe>
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	88db      	ldrh	r3, [r3, #6]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d104      	bne.n	801431e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014314:	7bbb      	ldrb	r3, [r7, #14]
 8014316:	4619      	mov	r1, r3
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f001 f95d 	bl	80155d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f000 fd2e 	bl	8014d80 <USBD_CtlSendStatus>

              break;
 8014324:	e004      	b.n	8014330 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014326:	6839      	ldr	r1, [r7, #0]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 fc5e 	bl	8014bea <USBD_CtlError>
              break;
 801432e:	bf00      	nop
          }
          break;
 8014330:	e107      	b.n	8014542 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014338:	b2db      	uxtb	r3, r3
 801433a:	2b02      	cmp	r3, #2
 801433c:	d002      	beq.n	8014344 <USBD_StdEPReq+0x124>
 801433e:	2b03      	cmp	r3, #3
 8014340:	d016      	beq.n	8014370 <USBD_StdEPReq+0x150>
 8014342:	e04b      	b.n	80143dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014344:	7bbb      	ldrb	r3, [r7, #14]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d00d      	beq.n	8014366 <USBD_StdEPReq+0x146>
 801434a:	7bbb      	ldrb	r3, [r7, #14]
 801434c:	2b80      	cmp	r3, #128	; 0x80
 801434e:	d00a      	beq.n	8014366 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014350:	7bbb      	ldrb	r3, [r7, #14]
 8014352:	4619      	mov	r1, r3
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f001 f93f 	bl	80155d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801435a:	2180      	movs	r1, #128	; 0x80
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f001 f93b 	bl	80155d8 <USBD_LL_StallEP>
 8014362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014364:	e040      	b.n	80143e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014366:	6839      	ldr	r1, [r7, #0]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 fc3e 	bl	8014bea <USBD_CtlError>
              break;
 801436e:	e03b      	b.n	80143e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	885b      	ldrh	r3, [r3, #2]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d136      	bne.n	80143e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801437e:	2b00      	cmp	r3, #0
 8014380:	d004      	beq.n	801438c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014382:	7bbb      	ldrb	r3, [r7, #14]
 8014384:	4619      	mov	r1, r3
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f001 f945 	bl	8015616 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f000 fcf7 	bl	8014d80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014392:	7bbb      	ldrb	r3, [r7, #14]
 8014394:	4619      	mov	r1, r3
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f7ff fde2 	bl	8013f60 <USBD_CoreFindEP>
 801439c:	4603      	mov	r3, r0
 801439e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143a0:	7b7b      	ldrb	r3, [r7, #13]
 80143a2:	2bff      	cmp	r3, #255	; 0xff
 80143a4:	d01f      	beq.n	80143e6 <USBD_StdEPReq+0x1c6>
 80143a6:	7b7b      	ldrb	r3, [r7, #13]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d11c      	bne.n	80143e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80143ac:	7b7a      	ldrb	r2, [r7, #13]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80143b4:	7b7a      	ldrb	r2, [r7, #13]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	32ae      	adds	r2, #174	; 0xae
 80143ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143be:	689b      	ldr	r3, [r3, #8]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d010      	beq.n	80143e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80143c4:	7b7a      	ldrb	r2, [r7, #13]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	32ae      	adds	r2, #174	; 0xae
 80143ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ce:	689b      	ldr	r3, [r3, #8]
 80143d0:	6839      	ldr	r1, [r7, #0]
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	4798      	blx	r3
 80143d6:	4603      	mov	r3, r0
 80143d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80143da:	e004      	b.n	80143e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80143dc:	6839      	ldr	r1, [r7, #0]
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f000 fc03 	bl	8014bea <USBD_CtlError>
              break;
 80143e4:	e000      	b.n	80143e8 <USBD_StdEPReq+0x1c8>
              break;
 80143e6:	bf00      	nop
          }
          break;
 80143e8:	e0ab      	b.n	8014542 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143f0:	b2db      	uxtb	r3, r3
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d002      	beq.n	80143fc <USBD_StdEPReq+0x1dc>
 80143f6:	2b03      	cmp	r3, #3
 80143f8:	d032      	beq.n	8014460 <USBD_StdEPReq+0x240>
 80143fa:	e097      	b.n	801452c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143fc:	7bbb      	ldrb	r3, [r7, #14]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d007      	beq.n	8014412 <USBD_StdEPReq+0x1f2>
 8014402:	7bbb      	ldrb	r3, [r7, #14]
 8014404:	2b80      	cmp	r3, #128	; 0x80
 8014406:	d004      	beq.n	8014412 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014408:	6839      	ldr	r1, [r7, #0]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f000 fbed 	bl	8014bea <USBD_CtlError>
                break;
 8014410:	e091      	b.n	8014536 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014416:	2b00      	cmp	r3, #0
 8014418:	da0b      	bge.n	8014432 <USBD_StdEPReq+0x212>
 801441a:	7bbb      	ldrb	r3, [r7, #14]
 801441c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014420:	4613      	mov	r3, r2
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	4413      	add	r3, r2
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	3310      	adds	r3, #16
 801442a:	687a      	ldr	r2, [r7, #4]
 801442c:	4413      	add	r3, r2
 801442e:	3304      	adds	r3, #4
 8014430:	e00b      	b.n	801444a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014432:	7bbb      	ldrb	r3, [r7, #14]
 8014434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014438:	4613      	mov	r3, r2
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	4413      	add	r3, r2
 801443e:	009b      	lsls	r3, r3, #2
 8014440:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	4413      	add	r3, r2
 8014448:	3304      	adds	r3, #4
 801444a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	2200      	movs	r2, #0
 8014450:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	2202      	movs	r2, #2
 8014456:	4619      	mov	r1, r3
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 fc37 	bl	8014ccc <USBD_CtlSendData>
              break;
 801445e:	e06a      	b.n	8014536 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014464:	2b00      	cmp	r3, #0
 8014466:	da11      	bge.n	801448c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014468:	7bbb      	ldrb	r3, [r7, #14]
 801446a:	f003 020f 	and.w	r2, r3, #15
 801446e:	6879      	ldr	r1, [r7, #4]
 8014470:	4613      	mov	r3, r2
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	4413      	add	r3, r2
 8014476:	009b      	lsls	r3, r3, #2
 8014478:	440b      	add	r3, r1
 801447a:	3324      	adds	r3, #36	; 0x24
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d117      	bne.n	80144b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014482:	6839      	ldr	r1, [r7, #0]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 fbb0 	bl	8014bea <USBD_CtlError>
                  break;
 801448a:	e054      	b.n	8014536 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801448c:	7bbb      	ldrb	r3, [r7, #14]
 801448e:	f003 020f 	and.w	r2, r3, #15
 8014492:	6879      	ldr	r1, [r7, #4]
 8014494:	4613      	mov	r3, r2
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	4413      	add	r3, r2
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	440b      	add	r3, r1
 801449e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80144a2:	881b      	ldrh	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d104      	bne.n	80144b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144a8:	6839      	ldr	r1, [r7, #0]
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f000 fb9d 	bl	8014bea <USBD_CtlError>
                  break;
 80144b0:	e041      	b.n	8014536 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	da0b      	bge.n	80144d2 <USBD_StdEPReq+0x2b2>
 80144ba:	7bbb      	ldrb	r3, [r7, #14]
 80144bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80144c0:	4613      	mov	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	4413      	add	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	3310      	adds	r3, #16
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	4413      	add	r3, r2
 80144ce:	3304      	adds	r3, #4
 80144d0:	e00b      	b.n	80144ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144d2:	7bbb      	ldrb	r3, [r7, #14]
 80144d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144d8:	4613      	mov	r3, r2
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	4413      	add	r3, r2
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80144e4:	687a      	ldr	r2, [r7, #4]
 80144e6:	4413      	add	r3, r2
 80144e8:	3304      	adds	r3, #4
 80144ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80144ec:	7bbb      	ldrb	r3, [r7, #14]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <USBD_StdEPReq+0x2d8>
 80144f2:	7bbb      	ldrb	r3, [r7, #14]
 80144f4:	2b80      	cmp	r3, #128	; 0x80
 80144f6:	d103      	bne.n	8014500 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	2200      	movs	r2, #0
 80144fc:	601a      	str	r2, [r3, #0]
 80144fe:	e00e      	b.n	801451e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014500:	7bbb      	ldrb	r3, [r7, #14]
 8014502:	4619      	mov	r1, r3
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f001 f8a5 	bl	8015654 <USBD_LL_IsStallEP>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d003      	beq.n	8014518 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	2201      	movs	r2, #1
 8014514:	601a      	str	r2, [r3, #0]
 8014516:	e002      	b.n	801451e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2200      	movs	r2, #0
 801451c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	2202      	movs	r2, #2
 8014522:	4619      	mov	r1, r3
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f000 fbd1 	bl	8014ccc <USBD_CtlSendData>
              break;
 801452a:	e004      	b.n	8014536 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801452c:	6839      	ldr	r1, [r7, #0]
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 fb5b 	bl	8014bea <USBD_CtlError>
              break;
 8014534:	bf00      	nop
          }
          break;
 8014536:	e004      	b.n	8014542 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014538:	6839      	ldr	r1, [r7, #0]
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f000 fb55 	bl	8014bea <USBD_CtlError>
          break;
 8014540:	bf00      	nop
      }
      break;
 8014542:	e005      	b.n	8014550 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014544:	6839      	ldr	r1, [r7, #0]
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 fb4f 	bl	8014bea <USBD_CtlError>
      break;
 801454c:	e000      	b.n	8014550 <USBD_StdEPReq+0x330>
      break;
 801454e:	bf00      	nop
  }

  return ret;
 8014550:	7bfb      	ldrb	r3, [r7, #15]
}
 8014552:	4618      	mov	r0, r3
 8014554:	3710      	adds	r7, #16
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
	...

0801455c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014566:	2300      	movs	r3, #0
 8014568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801456a:	2300      	movs	r3, #0
 801456c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801456e:	2300      	movs	r3, #0
 8014570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	885b      	ldrh	r3, [r3, #2]
 8014576:	0a1b      	lsrs	r3, r3, #8
 8014578:	b29b      	uxth	r3, r3
 801457a:	3b01      	subs	r3, #1
 801457c:	2b06      	cmp	r3, #6
 801457e:	f200 8128 	bhi.w	80147d2 <USBD_GetDescriptor+0x276>
 8014582:	a201      	add	r2, pc, #4	; (adr r2, 8014588 <USBD_GetDescriptor+0x2c>)
 8014584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014588:	080145a5 	.word	0x080145a5
 801458c:	080145bd 	.word	0x080145bd
 8014590:	080145fd 	.word	0x080145fd
 8014594:	080147d3 	.word	0x080147d3
 8014598:	080147d3 	.word	0x080147d3
 801459c:	08014773 	.word	0x08014773
 80145a0:	0801479f 	.word	0x0801479f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	7c12      	ldrb	r2, [r2, #16]
 80145b0:	f107 0108 	add.w	r1, r7, #8
 80145b4:	4610      	mov	r0, r2
 80145b6:	4798      	blx	r3
 80145b8:	60f8      	str	r0, [r7, #12]
      break;
 80145ba:	e112      	b.n	80147e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	7c1b      	ldrb	r3, [r3, #16]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d10d      	bne.n	80145e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145cc:	f107 0208 	add.w	r2, r7, #8
 80145d0:	4610      	mov	r0, r2
 80145d2:	4798      	blx	r3
 80145d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	3301      	adds	r3, #1
 80145da:	2202      	movs	r2, #2
 80145dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80145de:	e100      	b.n	80147e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145e8:	f107 0208 	add.w	r2, r7, #8
 80145ec:	4610      	mov	r0, r2
 80145ee:	4798      	blx	r3
 80145f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	3301      	adds	r3, #1
 80145f6:	2202      	movs	r2, #2
 80145f8:	701a      	strb	r2, [r3, #0]
      break;
 80145fa:	e0f2      	b.n	80147e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	885b      	ldrh	r3, [r3, #2]
 8014600:	b2db      	uxtb	r3, r3
 8014602:	2b05      	cmp	r3, #5
 8014604:	f200 80ac 	bhi.w	8014760 <USBD_GetDescriptor+0x204>
 8014608:	a201      	add	r2, pc, #4	; (adr r2, 8014610 <USBD_GetDescriptor+0xb4>)
 801460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801460e:	bf00      	nop
 8014610:	08014629 	.word	0x08014629
 8014614:	0801465d 	.word	0x0801465d
 8014618:	08014691 	.word	0x08014691
 801461c:	080146c5 	.word	0x080146c5
 8014620:	080146f9 	.word	0x080146f9
 8014624:	0801472d 	.word	0x0801472d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801462e:	685b      	ldr	r3, [r3, #4]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d00b      	beq.n	801464c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	7c12      	ldrb	r2, [r2, #16]
 8014640:	f107 0108 	add.w	r1, r7, #8
 8014644:	4610      	mov	r0, r2
 8014646:	4798      	blx	r3
 8014648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801464a:	e091      	b.n	8014770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801464c:	6839      	ldr	r1, [r7, #0]
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 facb 	bl	8014bea <USBD_CtlError>
            err++;
 8014654:	7afb      	ldrb	r3, [r7, #11]
 8014656:	3301      	adds	r3, #1
 8014658:	72fb      	strb	r3, [r7, #11]
          break;
 801465a:	e089      	b.n	8014770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014662:	689b      	ldr	r3, [r3, #8]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00b      	beq.n	8014680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801466e:	689b      	ldr	r3, [r3, #8]
 8014670:	687a      	ldr	r2, [r7, #4]
 8014672:	7c12      	ldrb	r2, [r2, #16]
 8014674:	f107 0108 	add.w	r1, r7, #8
 8014678:	4610      	mov	r0, r2
 801467a:	4798      	blx	r3
 801467c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801467e:	e077      	b.n	8014770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014680:	6839      	ldr	r1, [r7, #0]
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 fab1 	bl	8014bea <USBD_CtlError>
            err++;
 8014688:	7afb      	ldrb	r3, [r7, #11]
 801468a:	3301      	adds	r3, #1
 801468c:	72fb      	strb	r3, [r7, #11]
          break;
 801468e:	e06f      	b.n	8014770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014696:	68db      	ldr	r3, [r3, #12]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d00b      	beq.n	80146b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	7c12      	ldrb	r2, [r2, #16]
 80146a8:	f107 0108 	add.w	r1, r7, #8
 80146ac:	4610      	mov	r0, r2
 80146ae:	4798      	blx	r3
 80146b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146b2:	e05d      	b.n	8014770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146b4:	6839      	ldr	r1, [r7, #0]
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 fa97 	bl	8014bea <USBD_CtlError>
            err++;
 80146bc:	7afb      	ldrb	r3, [r7, #11]
 80146be:	3301      	adds	r3, #1
 80146c0:	72fb      	strb	r3, [r7, #11]
          break;
 80146c2:	e055      	b.n	8014770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ca:	691b      	ldr	r3, [r3, #16]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d00b      	beq.n	80146e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146d6:	691b      	ldr	r3, [r3, #16]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	7c12      	ldrb	r2, [r2, #16]
 80146dc:	f107 0108 	add.w	r1, r7, #8
 80146e0:	4610      	mov	r0, r2
 80146e2:	4798      	blx	r3
 80146e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146e6:	e043      	b.n	8014770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146e8:	6839      	ldr	r1, [r7, #0]
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 fa7d 	bl	8014bea <USBD_CtlError>
            err++;
 80146f0:	7afb      	ldrb	r3, [r7, #11]
 80146f2:	3301      	adds	r3, #1
 80146f4:	72fb      	strb	r3, [r7, #11]
          break;
 80146f6:	e03b      	b.n	8014770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146fe:	695b      	ldr	r3, [r3, #20]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00b      	beq.n	801471c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801470a:	695b      	ldr	r3, [r3, #20]
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	7c12      	ldrb	r2, [r2, #16]
 8014710:	f107 0108 	add.w	r1, r7, #8
 8014714:	4610      	mov	r0, r2
 8014716:	4798      	blx	r3
 8014718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801471a:	e029      	b.n	8014770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801471c:	6839      	ldr	r1, [r7, #0]
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f000 fa63 	bl	8014bea <USBD_CtlError>
            err++;
 8014724:	7afb      	ldrb	r3, [r7, #11]
 8014726:	3301      	adds	r3, #1
 8014728:	72fb      	strb	r3, [r7, #11]
          break;
 801472a:	e021      	b.n	8014770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014732:	699b      	ldr	r3, [r3, #24]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d00b      	beq.n	8014750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801473e:	699b      	ldr	r3, [r3, #24]
 8014740:	687a      	ldr	r2, [r7, #4]
 8014742:	7c12      	ldrb	r2, [r2, #16]
 8014744:	f107 0108 	add.w	r1, r7, #8
 8014748:	4610      	mov	r0, r2
 801474a:	4798      	blx	r3
 801474c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801474e:	e00f      	b.n	8014770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014750:	6839      	ldr	r1, [r7, #0]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 fa49 	bl	8014bea <USBD_CtlError>
            err++;
 8014758:	7afb      	ldrb	r3, [r7, #11]
 801475a:	3301      	adds	r3, #1
 801475c:	72fb      	strb	r3, [r7, #11]
          break;
 801475e:	e007      	b.n	8014770 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014760:	6839      	ldr	r1, [r7, #0]
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f000 fa41 	bl	8014bea <USBD_CtlError>
          err++;
 8014768:	7afb      	ldrb	r3, [r7, #11]
 801476a:	3301      	adds	r3, #1
 801476c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801476e:	bf00      	nop
      }
      break;
 8014770:	e037      	b.n	80147e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	7c1b      	ldrb	r3, [r3, #16]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d109      	bne.n	801478e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014782:	f107 0208 	add.w	r2, r7, #8
 8014786:	4610      	mov	r0, r2
 8014788:	4798      	blx	r3
 801478a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801478c:	e029      	b.n	80147e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801478e:	6839      	ldr	r1, [r7, #0]
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f000 fa2a 	bl	8014bea <USBD_CtlError>
        err++;
 8014796:	7afb      	ldrb	r3, [r7, #11]
 8014798:	3301      	adds	r3, #1
 801479a:	72fb      	strb	r3, [r7, #11]
      break;
 801479c:	e021      	b.n	80147e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	7c1b      	ldrb	r3, [r3, #16]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d10d      	bne.n	80147c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ae:	f107 0208 	add.w	r2, r7, #8
 80147b2:	4610      	mov	r0, r2
 80147b4:	4798      	blx	r3
 80147b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	3301      	adds	r3, #1
 80147bc:	2207      	movs	r2, #7
 80147be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147c0:	e00f      	b.n	80147e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80147c2:	6839      	ldr	r1, [r7, #0]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 fa10 	bl	8014bea <USBD_CtlError>
        err++;
 80147ca:	7afb      	ldrb	r3, [r7, #11]
 80147cc:	3301      	adds	r3, #1
 80147ce:	72fb      	strb	r3, [r7, #11]
      break;
 80147d0:	e007      	b.n	80147e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80147d2:	6839      	ldr	r1, [r7, #0]
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f000 fa08 	bl	8014bea <USBD_CtlError>
      err++;
 80147da:	7afb      	ldrb	r3, [r7, #11]
 80147dc:	3301      	adds	r3, #1
 80147de:	72fb      	strb	r3, [r7, #11]
      break;
 80147e0:	bf00      	nop
  }

  if (err != 0U)
 80147e2:	7afb      	ldrb	r3, [r7, #11]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d11e      	bne.n	8014826 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	88db      	ldrh	r3, [r3, #6]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d016      	beq.n	801481e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80147f0:	893b      	ldrh	r3, [r7, #8]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00e      	beq.n	8014814 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	88da      	ldrh	r2, [r3, #6]
 80147fa:	893b      	ldrh	r3, [r7, #8]
 80147fc:	4293      	cmp	r3, r2
 80147fe:	bf28      	it	cs
 8014800:	4613      	movcs	r3, r2
 8014802:	b29b      	uxth	r3, r3
 8014804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014806:	893b      	ldrh	r3, [r7, #8]
 8014808:	461a      	mov	r2, r3
 801480a:	68f9      	ldr	r1, [r7, #12]
 801480c:	6878      	ldr	r0, [r7, #4]
 801480e:	f000 fa5d 	bl	8014ccc <USBD_CtlSendData>
 8014812:	e009      	b.n	8014828 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 f9e7 	bl	8014bea <USBD_CtlError>
 801481c:	e004      	b.n	8014828 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f000 faae 	bl	8014d80 <USBD_CtlSendStatus>
 8014824:	e000      	b.n	8014828 <USBD_GetDescriptor+0x2cc>
    return;
 8014826:	bf00      	nop
  }
}
 8014828:	3710      	adds	r7, #16
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop

08014830 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b084      	sub	sp, #16
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
 8014838:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	889b      	ldrh	r3, [r3, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d131      	bne.n	80148a6 <USBD_SetAddress+0x76>
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	88db      	ldrh	r3, [r3, #6]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d12d      	bne.n	80148a6 <USBD_SetAddress+0x76>
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	885b      	ldrh	r3, [r3, #2]
 801484e:	2b7f      	cmp	r3, #127	; 0x7f
 8014850:	d829      	bhi.n	80148a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	885b      	ldrh	r3, [r3, #2]
 8014856:	b2db      	uxtb	r3, r3
 8014858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801485c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014864:	b2db      	uxtb	r3, r3
 8014866:	2b03      	cmp	r3, #3
 8014868:	d104      	bne.n	8014874 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801486a:	6839      	ldr	r1, [r7, #0]
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f000 f9bc 	bl	8014bea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014872:	e01d      	b.n	80148b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	7bfa      	ldrb	r2, [r7, #15]
 8014878:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801487c:	7bfb      	ldrb	r3, [r7, #15]
 801487e:	4619      	mov	r1, r3
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 ff13 	bl	80156ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f000 fa7a 	bl	8014d80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801488c:	7bfb      	ldrb	r3, [r7, #15]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d004      	beq.n	801489c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2202      	movs	r2, #2
 8014896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801489a:	e009      	b.n	80148b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2201      	movs	r2, #1
 80148a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148a4:	e004      	b.n	80148b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80148a6:	6839      	ldr	r1, [r7, #0]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 f99e 	bl	8014bea <USBD_CtlError>
  }
}
 80148ae:	bf00      	nop
 80148b0:	bf00      	nop
 80148b2:	3710      	adds	r7, #16
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148c2:	2300      	movs	r3, #0
 80148c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	885b      	ldrh	r3, [r3, #2]
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	4b4e      	ldr	r3, [pc, #312]	; (8014a08 <USBD_SetConfig+0x150>)
 80148ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148d0:	4b4d      	ldr	r3, [pc, #308]	; (8014a08 <USBD_SetConfig+0x150>)
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	2b01      	cmp	r3, #1
 80148d6:	d905      	bls.n	80148e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 f985 	bl	8014bea <USBD_CtlError>
    return USBD_FAIL;
 80148e0:	2303      	movs	r3, #3
 80148e2:	e08c      	b.n	80149fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	2b02      	cmp	r3, #2
 80148ee:	d002      	beq.n	80148f6 <USBD_SetConfig+0x3e>
 80148f0:	2b03      	cmp	r3, #3
 80148f2:	d029      	beq.n	8014948 <USBD_SetConfig+0x90>
 80148f4:	e075      	b.n	80149e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80148f6:	4b44      	ldr	r3, [pc, #272]	; (8014a08 <USBD_SetConfig+0x150>)
 80148f8:	781b      	ldrb	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d020      	beq.n	8014940 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80148fe:	4b42      	ldr	r3, [pc, #264]	; (8014a08 <USBD_SetConfig+0x150>)
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	461a      	mov	r2, r3
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014908:	4b3f      	ldr	r3, [pc, #252]	; (8014a08 <USBD_SetConfig+0x150>)
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	4619      	mov	r1, r3
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f7fe ffe7 	bl	80138e2 <USBD_SetClassConfig>
 8014914:	4603      	mov	r3, r0
 8014916:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014918:	7bfb      	ldrb	r3, [r7, #15]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d008      	beq.n	8014930 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801491e:	6839      	ldr	r1, [r7, #0]
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f000 f962 	bl	8014bea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2202      	movs	r2, #2
 801492a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801492e:	e065      	b.n	80149fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 fa25 	bl	8014d80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2203      	movs	r2, #3
 801493a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801493e:	e05d      	b.n	80149fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f000 fa1d 	bl	8014d80 <USBD_CtlSendStatus>
      break;
 8014946:	e059      	b.n	80149fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014948:	4b2f      	ldr	r3, [pc, #188]	; (8014a08 <USBD_SetConfig+0x150>)
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d112      	bne.n	8014976 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2202      	movs	r2, #2
 8014954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014958:	4b2b      	ldr	r3, [pc, #172]	; (8014a08 <USBD_SetConfig+0x150>)
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	461a      	mov	r2, r3
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014962:	4b29      	ldr	r3, [pc, #164]	; (8014a08 <USBD_SetConfig+0x150>)
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	4619      	mov	r1, r3
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7fe ffd6 	bl	801391a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 fa06 	bl	8014d80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014974:	e042      	b.n	80149fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014976:	4b24      	ldr	r3, [pc, #144]	; (8014a08 <USBD_SetConfig+0x150>)
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	461a      	mov	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	685b      	ldr	r3, [r3, #4]
 8014980:	429a      	cmp	r2, r3
 8014982:	d02a      	beq.n	80149da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	b2db      	uxtb	r3, r3
 801498a:	4619      	mov	r1, r3
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7fe ffc4 	bl	801391a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014992:	4b1d      	ldr	r3, [pc, #116]	; (8014a08 <USBD_SetConfig+0x150>)
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	461a      	mov	r2, r3
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801499c:	4b1a      	ldr	r3, [pc, #104]	; (8014a08 <USBD_SetConfig+0x150>)
 801499e:	781b      	ldrb	r3, [r3, #0]
 80149a0:	4619      	mov	r1, r3
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f7fe ff9d 	bl	80138e2 <USBD_SetClassConfig>
 80149a8:	4603      	mov	r3, r0
 80149aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80149ac:	7bfb      	ldrb	r3, [r7, #15]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d00f      	beq.n	80149d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80149b2:	6839      	ldr	r1, [r7, #0]
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f000 f918 	bl	8014bea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	4619      	mov	r1, r3
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f7fe ffa9 	bl	801391a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2202      	movs	r2, #2
 80149cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80149d0:	e014      	b.n	80149fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 f9d4 	bl	8014d80 <USBD_CtlSendStatus>
      break;
 80149d8:	e010      	b.n	80149fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f000 f9d0 	bl	8014d80 <USBD_CtlSendStatus>
      break;
 80149e0:	e00c      	b.n	80149fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80149e2:	6839      	ldr	r1, [r7, #0]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 f900 	bl	8014bea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80149ea:	4b07      	ldr	r3, [pc, #28]	; (8014a08 <USBD_SetConfig+0x150>)
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	4619      	mov	r1, r3
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f7fe ff92 	bl	801391a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80149f6:	2303      	movs	r3, #3
 80149f8:	73fb      	strb	r3, [r7, #15]
      break;
 80149fa:	bf00      	nop
  }

  return ret;
 80149fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3710      	adds	r7, #16
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	200010d0 	.word	0x200010d0

08014a0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	88db      	ldrh	r3, [r3, #6]
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d004      	beq.n	8014a28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a1e:	6839      	ldr	r1, [r7, #0]
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f000 f8e2 	bl	8014bea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a26:	e023      	b.n	8014a70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	2b02      	cmp	r3, #2
 8014a32:	dc02      	bgt.n	8014a3a <USBD_GetConfig+0x2e>
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	dc03      	bgt.n	8014a40 <USBD_GetConfig+0x34>
 8014a38:	e015      	b.n	8014a66 <USBD_GetConfig+0x5a>
 8014a3a:	2b03      	cmp	r3, #3
 8014a3c:	d00b      	beq.n	8014a56 <USBD_GetConfig+0x4a>
 8014a3e:	e012      	b.n	8014a66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2200      	movs	r2, #0
 8014a44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	3308      	adds	r3, #8
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 f93c 	bl	8014ccc <USBD_CtlSendData>
        break;
 8014a54:	e00c      	b.n	8014a70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3304      	adds	r3, #4
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f000 f934 	bl	8014ccc <USBD_CtlSendData>
        break;
 8014a64:	e004      	b.n	8014a70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014a66:	6839      	ldr	r1, [r7, #0]
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f000 f8be 	bl	8014bea <USBD_CtlError>
        break;
 8014a6e:	bf00      	nop
}
 8014a70:	bf00      	nop
 8014a72:	3708      	adds	r7, #8
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b082      	sub	sp, #8
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	3b01      	subs	r3, #1
 8014a8c:	2b02      	cmp	r3, #2
 8014a8e:	d81e      	bhi.n	8014ace <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	88db      	ldrh	r3, [r3, #6]
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d004      	beq.n	8014aa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014a98:	6839      	ldr	r1, [r7, #0]
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f000 f8a5 	bl	8014bea <USBD_CtlError>
        break;
 8014aa0:	e01a      	b.n	8014ad8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d005      	beq.n	8014abe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	68db      	ldr	r3, [r3, #12]
 8014ab6:	f043 0202 	orr.w	r2, r3, #2
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	330c      	adds	r3, #12
 8014ac2:	2202      	movs	r2, #2
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f000 f900 	bl	8014ccc <USBD_CtlSendData>
      break;
 8014acc:	e004      	b.n	8014ad8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014ace:	6839      	ldr	r1, [r7, #0]
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 f88a 	bl	8014bea <USBD_CtlError>
      break;
 8014ad6:	bf00      	nop
  }
}
 8014ad8:	bf00      	nop
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	885b      	ldrh	r3, [r3, #2]
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d107      	bne.n	8014b02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2201      	movs	r2, #1
 8014af6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f000 f940 	bl	8014d80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014b00:	e013      	b.n	8014b2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	885b      	ldrh	r3, [r3, #2]
 8014b06:	2b02      	cmp	r3, #2
 8014b08:	d10b      	bne.n	8014b22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	889b      	ldrh	r3, [r3, #4]
 8014b0e:	0a1b      	lsrs	r3, r3, #8
 8014b10:	b29b      	uxth	r3, r3
 8014b12:	b2da      	uxtb	r2, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f930 	bl	8014d80 <USBD_CtlSendStatus>
}
 8014b20:	e003      	b.n	8014b2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f000 f860 	bl	8014bea <USBD_CtlError>
}
 8014b2a:	bf00      	nop
 8014b2c:	3708      	adds	r7, #8
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b082      	sub	sp, #8
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
 8014b3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	3b01      	subs	r3, #1
 8014b46:	2b02      	cmp	r3, #2
 8014b48:	d80b      	bhi.n	8014b62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	885b      	ldrh	r3, [r3, #2]
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d10c      	bne.n	8014b6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	f000 f910 	bl	8014d80 <USBD_CtlSendStatus>
      }
      break;
 8014b60:	e004      	b.n	8014b6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014b62:	6839      	ldr	r1, [r7, #0]
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f000 f840 	bl	8014bea <USBD_CtlError>
      break;
 8014b6a:	e000      	b.n	8014b6e <USBD_ClrFeature+0x3c>
      break;
 8014b6c:	bf00      	nop
  }
}
 8014b6e:	bf00      	nop
 8014b70:	3708      	adds	r7, #8
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b084      	sub	sp, #16
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	6078      	str	r0, [r7, #4]
 8014b7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	781a      	ldrb	r2, [r3, #0]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	781a      	ldrb	r2, [r3, #0]
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f7ff fa41 	bl	8014028 <SWAPBYTE>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	461a      	mov	r2, r3
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	3301      	adds	r3, #1
 8014bb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7ff fa34 	bl	8014028 <SWAPBYTE>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	f7ff fa27 	bl	8014028 <SWAPBYTE>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	461a      	mov	r2, r3
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	80da      	strh	r2, [r3, #6]
}
 8014be2:	bf00      	nop
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b082      	sub	sp, #8
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	6078      	str	r0, [r7, #4]
 8014bf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014bf4:	2180      	movs	r1, #128	; 0x80
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 fcee 	bl	80155d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bfc:	2100      	movs	r1, #0
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 fcea 	bl	80155d8 <USBD_LL_StallEP>
}
 8014c04:	bf00      	nop
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d036      	beq.n	8014c90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014c26:	6938      	ldr	r0, [r7, #16]
 8014c28:	f000 f836 	bl	8014c98 <USBD_GetLen>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	3301      	adds	r3, #1
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014c3a:	7dfb      	ldrb	r3, [r7, #23]
 8014c3c:	68ba      	ldr	r2, [r7, #8]
 8014c3e:	4413      	add	r3, r2
 8014c40:	687a      	ldr	r2, [r7, #4]
 8014c42:	7812      	ldrb	r2, [r2, #0]
 8014c44:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c46:	7dfb      	ldrb	r3, [r7, #23]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014c4c:	7dfb      	ldrb	r3, [r7, #23]
 8014c4e:	68ba      	ldr	r2, [r7, #8]
 8014c50:	4413      	add	r3, r2
 8014c52:	2203      	movs	r2, #3
 8014c54:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c56:	7dfb      	ldrb	r3, [r7, #23]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014c5c:	e013      	b.n	8014c86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014c5e:	7dfb      	ldrb	r3, [r7, #23]
 8014c60:	68ba      	ldr	r2, [r7, #8]
 8014c62:	4413      	add	r3, r2
 8014c64:	693a      	ldr	r2, [r7, #16]
 8014c66:	7812      	ldrb	r2, [r2, #0]
 8014c68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	613b      	str	r3, [r7, #16]
    idx++;
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
 8014c72:	3301      	adds	r3, #1
 8014c74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014c76:	7dfb      	ldrb	r3, [r7, #23]
 8014c78:	68ba      	ldr	r2, [r7, #8]
 8014c7a:	4413      	add	r3, r2
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014c80:	7dfb      	ldrb	r3, [r7, #23]
 8014c82:	3301      	adds	r3, #1
 8014c84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d1e7      	bne.n	8014c5e <USBD_GetString+0x52>
 8014c8e:	e000      	b.n	8014c92 <USBD_GetString+0x86>
    return;
 8014c90:	bf00      	nop
  }
}
 8014c92:	3718      	adds	r7, #24
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}

08014c98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b085      	sub	sp, #20
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014ca8:	e005      	b.n	8014cb6 <USBD_GetLen+0x1e>
  {
    len++;
 8014caa:	7bfb      	ldrb	r3, [r7, #15]
 8014cac:	3301      	adds	r3, #1
 8014cae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d1f5      	bne.n	8014caa <USBD_GetLen+0x12>
  }

  return len;
 8014cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3714      	adds	r7, #20
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr

08014ccc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b084      	sub	sp, #16
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2202      	movs	r2, #2
 8014cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	687a      	ldr	r2, [r7, #4]
 8014cea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	68ba      	ldr	r2, [r7, #8]
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	68f8      	ldr	r0, [r7, #12]
 8014cf4:	f000 fcf9 	bl	80156ea <USBD_LL_Transmit>

  return USBD_OK;
 8014cf8:	2300      	movs	r3, #0
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3710      	adds	r7, #16
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}

08014d02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014d02:	b580      	push	{r7, lr}
 8014d04:	b084      	sub	sp, #16
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	60f8      	str	r0, [r7, #12]
 8014d0a:	60b9      	str	r1, [r7, #8]
 8014d0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	68ba      	ldr	r2, [r7, #8]
 8014d12:	2100      	movs	r1, #0
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f000 fce8 	bl	80156ea <USBD_LL_Transmit>

  return USBD_OK;
 8014d1a:	2300      	movs	r3, #0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3710      	adds	r7, #16
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2203      	movs	r2, #3
 8014d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	68ba      	ldr	r2, [r7, #8]
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	68f8      	ldr	r0, [r7, #12]
 8014d50:	f000 fcec 	bl	801572c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d54:	2300      	movs	r3, #0
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3710      	adds	r7, #16
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}

08014d5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014d5e:	b580      	push	{r7, lr}
 8014d60:	b084      	sub	sp, #16
 8014d62:	af00      	add	r7, sp, #0
 8014d64:	60f8      	str	r0, [r7, #12]
 8014d66:	60b9      	str	r1, [r7, #8]
 8014d68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	68ba      	ldr	r2, [r7, #8]
 8014d6e:	2100      	movs	r1, #0
 8014d70:	68f8      	ldr	r0, [r7, #12]
 8014d72:	f000 fcdb 	bl	801572c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d76:	2300      	movs	r3, #0
}
 8014d78:	4618      	mov	r0, r3
 8014d7a:	3710      	adds	r7, #16
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}

08014d80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b082      	sub	sp, #8
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2204      	movs	r2, #4
 8014d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014d90:	2300      	movs	r3, #0
 8014d92:	2200      	movs	r2, #0
 8014d94:	2100      	movs	r1, #0
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f000 fca7 	bl	80156ea <USBD_LL_Transmit>

  return USBD_OK;
 8014d9c:	2300      	movs	r3, #0
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3708      	adds	r7, #8
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b082      	sub	sp, #8
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	2205      	movs	r2, #5
 8014db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014db6:	2300      	movs	r3, #0
 8014db8:	2200      	movs	r2, #0
 8014dba:	2100      	movs	r1, #0
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f000 fcb5 	bl	801572c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3708      	adds	r7, #8
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	4912      	ldr	r1, [pc, #72]	; (8014e1c <MX_USB_DEVICE_Init+0x50>)
 8014dd4:	4812      	ldr	r0, [pc, #72]	; (8014e20 <MX_USB_DEVICE_Init+0x54>)
 8014dd6:	f7fe fd07 	bl	80137e8 <USBD_Init>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d001      	beq.n	8014de4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014de0:	f7f3 f940 	bl	8008064 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014de4:	490f      	ldr	r1, [pc, #60]	; (8014e24 <MX_USB_DEVICE_Init+0x58>)
 8014de6:	480e      	ldr	r0, [pc, #56]	; (8014e20 <MX_USB_DEVICE_Init+0x54>)
 8014de8:	f7fe fd2e 	bl	8013848 <USBD_RegisterClass>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d001      	beq.n	8014df6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014df2:	f7f3 f937 	bl	8008064 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014df6:	490c      	ldr	r1, [pc, #48]	; (8014e28 <MX_USB_DEVICE_Init+0x5c>)
 8014df8:	4809      	ldr	r0, [pc, #36]	; (8014e20 <MX_USB_DEVICE_Init+0x54>)
 8014dfa:	f7fe fc1f 	bl	801363c <USBD_CDC_RegisterInterface>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d001      	beq.n	8014e08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014e04:	f7f3 f92e 	bl	8008064 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014e08:	4805      	ldr	r0, [pc, #20]	; (8014e20 <MX_USB_DEVICE_Init+0x54>)
 8014e0a:	f7fe fd53 	bl	80138b4 <USBD_Start>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d001      	beq.n	8014e18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014e14:	f7f3 f926 	bl	8008064 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014e18:	bf00      	nop
 8014e1a:	bd80      	pop	{r7, pc}
 8014e1c:	20000190 	.word	0x20000190
 8014e20:	200010d4 	.word	0x200010d4
 8014e24:	200000fc 	.word	0x200000fc
 8014e28:	2000017c 	.word	0x2000017c

08014e2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014e30:	2200      	movs	r2, #0
 8014e32:	4905      	ldr	r1, [pc, #20]	; (8014e48 <CDC_Init_FS+0x1c>)
 8014e34:	4805      	ldr	r0, [pc, #20]	; (8014e4c <CDC_Init_FS+0x20>)
 8014e36:	f7fe fc1b 	bl	8013670 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014e3a:	4905      	ldr	r1, [pc, #20]	; (8014e50 <CDC_Init_FS+0x24>)
 8014e3c:	4803      	ldr	r0, [pc, #12]	; (8014e4c <CDC_Init_FS+0x20>)
 8014e3e:	f7fe fc39 	bl	80136b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014e42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	20001bb0 	.word	0x20001bb0
 8014e4c:	200010d4 	.word	0x200010d4
 8014e50:	200013b0 	.word	0x200013b0

08014e54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014e54:	b480      	push	{r7}
 8014e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014e58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr

08014e64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	6039      	str	r1, [r7, #0]
 8014e6e:	71fb      	strb	r3, [r7, #7]
 8014e70:	4613      	mov	r3, r2
 8014e72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014e74:	79fb      	ldrb	r3, [r7, #7]
 8014e76:	2b23      	cmp	r3, #35	; 0x23
 8014e78:	d84a      	bhi.n	8014f10 <CDC_Control_FS+0xac>
 8014e7a:	a201      	add	r2, pc, #4	; (adr r2, 8014e80 <CDC_Control_FS+0x1c>)
 8014e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e80:	08014f11 	.word	0x08014f11
 8014e84:	08014f11 	.word	0x08014f11
 8014e88:	08014f11 	.word	0x08014f11
 8014e8c:	08014f11 	.word	0x08014f11
 8014e90:	08014f11 	.word	0x08014f11
 8014e94:	08014f11 	.word	0x08014f11
 8014e98:	08014f11 	.word	0x08014f11
 8014e9c:	08014f11 	.word	0x08014f11
 8014ea0:	08014f11 	.word	0x08014f11
 8014ea4:	08014f11 	.word	0x08014f11
 8014ea8:	08014f11 	.word	0x08014f11
 8014eac:	08014f11 	.word	0x08014f11
 8014eb0:	08014f11 	.word	0x08014f11
 8014eb4:	08014f11 	.word	0x08014f11
 8014eb8:	08014f11 	.word	0x08014f11
 8014ebc:	08014f11 	.word	0x08014f11
 8014ec0:	08014f11 	.word	0x08014f11
 8014ec4:	08014f11 	.word	0x08014f11
 8014ec8:	08014f11 	.word	0x08014f11
 8014ecc:	08014f11 	.word	0x08014f11
 8014ed0:	08014f11 	.word	0x08014f11
 8014ed4:	08014f11 	.word	0x08014f11
 8014ed8:	08014f11 	.word	0x08014f11
 8014edc:	08014f11 	.word	0x08014f11
 8014ee0:	08014f11 	.word	0x08014f11
 8014ee4:	08014f11 	.word	0x08014f11
 8014ee8:	08014f11 	.word	0x08014f11
 8014eec:	08014f11 	.word	0x08014f11
 8014ef0:	08014f11 	.word	0x08014f11
 8014ef4:	08014f11 	.word	0x08014f11
 8014ef8:	08014f11 	.word	0x08014f11
 8014efc:	08014f11 	.word	0x08014f11
 8014f00:	08014f11 	.word	0x08014f11
 8014f04:	08014f11 	.word	0x08014f11
 8014f08:	08014f11 	.word	0x08014f11
 8014f0c:	08014f11 	.word	0x08014f11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014f10:	bf00      	nop
  }

  return (USBD_OK);
 8014f12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	370c      	adds	r7, #12
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1e:	4770      	bx	lr

08014f20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]

	/*for( uint32_t i = 0; i < *Len; i++ ){

	}*/

	if( system_info.usb_rx_flag == 0 )
 8014f2a:	4b10      	ldr	r3, [pc, #64]	; (8014f6c <CDC_Receive_FS+0x4c>)
 8014f2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d10e      	bne.n	8014f54 <CDC_Receive_FS+0x34>
	{
		memcpy((void*)system_info.usb_rx_buf, Buf, *Len);
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	6879      	ldr	r1, [r7, #4]
 8014f3e:	480c      	ldr	r0, [pc, #48]	; (8014f70 <CDC_Receive_FS+0x50>)
 8014f40:	f000 fc9e 	bl	8015880 <memcpy>
		system_info.usb_rx_flag = 1;
 8014f44:	4b09      	ldr	r3, [pc, #36]	; (8014f6c <CDC_Receive_FS+0x4c>)
 8014f46:	2201      	movs	r2, #1
 8014f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		system_info.usb_rx_len = *Len;
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	4a06      	ldr	r2, [pc, #24]	; (8014f6c <CDC_Receive_FS+0x4c>)
 8014f52:	6453      	str	r3, [r2, #68]	; 0x44
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014f54:	6879      	ldr	r1, [r7, #4]
 8014f56:	4807      	ldr	r0, [pc, #28]	; (8014f74 <CDC_Receive_FS+0x54>)
 8014f58:	f7fe fbac 	bl	80136b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014f5c:	4805      	ldr	r0, [pc, #20]	; (8014f74 <CDC_Receive_FS+0x54>)
 8014f5e:	f7fe fc0d 	bl	801377c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014f62:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3708      	adds	r7, #8
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	20001054 	.word	0x20001054
 8014f70:	20001057 	.word	0x20001057
 8014f74:	200010d4 	.word	0x200010d4

08014f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b084      	sub	sp, #16
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	460b      	mov	r3, r1
 8014f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014f84:	2300      	movs	r3, #0
 8014f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014f88:	4b0d      	ldr	r3, [pc, #52]	; (8014fc0 <CDC_Transmit_FS+0x48>)
 8014f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d001      	beq.n	8014f9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	e00b      	b.n	8014fb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014f9e:	887b      	ldrh	r3, [r7, #2]
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	6879      	ldr	r1, [r7, #4]
 8014fa4:	4806      	ldr	r0, [pc, #24]	; (8014fc0 <CDC_Transmit_FS+0x48>)
 8014fa6:	f7fe fb63 	bl	8013670 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014faa:	4805      	ldr	r0, [pc, #20]	; (8014fc0 <CDC_Transmit_FS+0x48>)
 8014fac:	f7fe fba0 	bl	80136f0 <USBD_CDC_TransmitPacket>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3710      	adds	r7, #16
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	200010d4 	.word	0x200010d4

08014fc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b087      	sub	sp, #28
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	4613      	mov	r3, r2
 8014fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	371c      	adds	r7, #28
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe4:	4770      	bx	lr
	...

08014fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	4603      	mov	r3, r0
 8014ff0:	6039      	str	r1, [r7, #0]
 8014ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	2212      	movs	r2, #18
 8014ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014ffa:	4b03      	ldr	r3, [pc, #12]	; (8015008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	370c      	adds	r7, #12
 8015000:	46bd      	mov	sp, r7
 8015002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015006:	4770      	bx	lr
 8015008:	200001ac 	.word	0x200001ac

0801500c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	4603      	mov	r3, r0
 8015014:	6039      	str	r1, [r7, #0]
 8015016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	2204      	movs	r2, #4
 801501c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801501e:	4b03      	ldr	r3, [pc, #12]	; (801502c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015020:	4618      	mov	r0, r3
 8015022:	370c      	adds	r7, #12
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	200001c0 	.word	0x200001c0

08015030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
 8015036:	4603      	mov	r3, r0
 8015038:	6039      	str	r1, [r7, #0]
 801503a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801503c:	79fb      	ldrb	r3, [r7, #7]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d105      	bne.n	801504e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015042:	683a      	ldr	r2, [r7, #0]
 8015044:	4907      	ldr	r1, [pc, #28]	; (8015064 <USBD_FS_ProductStrDescriptor+0x34>)
 8015046:	4808      	ldr	r0, [pc, #32]	; (8015068 <USBD_FS_ProductStrDescriptor+0x38>)
 8015048:	f7ff fde0 	bl	8014c0c <USBD_GetString>
 801504c:	e004      	b.n	8015058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801504e:	683a      	ldr	r2, [r7, #0]
 8015050:	4904      	ldr	r1, [pc, #16]	; (8015064 <USBD_FS_ProductStrDescriptor+0x34>)
 8015052:	4805      	ldr	r0, [pc, #20]	; (8015068 <USBD_FS_ProductStrDescriptor+0x38>)
 8015054:	f7ff fdda 	bl	8014c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015058:	4b02      	ldr	r3, [pc, #8]	; (8015064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801505a:	4618      	mov	r0, r3
 801505c:	3708      	adds	r7, #8
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	200023b0 	.word	0x200023b0
 8015068:	08016320 	.word	0x08016320

0801506c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	4603      	mov	r3, r0
 8015074:	6039      	str	r1, [r7, #0]
 8015076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015078:	683a      	ldr	r2, [r7, #0]
 801507a:	4904      	ldr	r1, [pc, #16]	; (801508c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801507c:	4804      	ldr	r0, [pc, #16]	; (8015090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801507e:	f7ff fdc5 	bl	8014c0c <USBD_GetString>
  return USBD_StrDesc;
 8015082:	4b02      	ldr	r3, [pc, #8]	; (801508c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015084:	4618      	mov	r0, r3
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	200023b0 	.word	0x200023b0
 8015090:	08016338 	.word	0x08016338

08015094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	4603      	mov	r3, r0
 801509c:	6039      	str	r1, [r7, #0]
 801509e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	221a      	movs	r2, #26
 80150a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80150a6:	f000 f843 	bl	8015130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80150aa:	4b02      	ldr	r3, [pc, #8]	; (80150b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3708      	adds	r7, #8
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}
 80150b4:	200001c4 	.word	0x200001c4

080150b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	4603      	mov	r3, r0
 80150c0:	6039      	str	r1, [r7, #0]
 80150c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80150c4:	79fb      	ldrb	r3, [r7, #7]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d105      	bne.n	80150d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80150ca:	683a      	ldr	r2, [r7, #0]
 80150cc:	4907      	ldr	r1, [pc, #28]	; (80150ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80150ce:	4808      	ldr	r0, [pc, #32]	; (80150f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80150d0:	f7ff fd9c 	bl	8014c0c <USBD_GetString>
 80150d4:	e004      	b.n	80150e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80150d6:	683a      	ldr	r2, [r7, #0]
 80150d8:	4904      	ldr	r1, [pc, #16]	; (80150ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80150da:	4805      	ldr	r0, [pc, #20]	; (80150f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80150dc:	f7ff fd96 	bl	8014c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80150e0:	4b02      	ldr	r3, [pc, #8]	; (80150ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
 80150ea:	bf00      	nop
 80150ec:	200023b0 	.word	0x200023b0
 80150f0:	0801634c 	.word	0x0801634c

080150f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	4603      	mov	r3, r0
 80150fc:	6039      	str	r1, [r7, #0]
 80150fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015100:	79fb      	ldrb	r3, [r7, #7]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d105      	bne.n	8015112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015106:	683a      	ldr	r2, [r7, #0]
 8015108:	4907      	ldr	r1, [pc, #28]	; (8015128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801510a:	4808      	ldr	r0, [pc, #32]	; (801512c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801510c:	f7ff fd7e 	bl	8014c0c <USBD_GetString>
 8015110:	e004      	b.n	801511c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015112:	683a      	ldr	r2, [r7, #0]
 8015114:	4904      	ldr	r1, [pc, #16]	; (8015128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015116:	4805      	ldr	r0, [pc, #20]	; (801512c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015118:	f7ff fd78 	bl	8014c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801511c:	4b02      	ldr	r3, [pc, #8]	; (8015128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801511e:	4618      	mov	r0, r3
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	200023b0 	.word	0x200023b0
 801512c:	08016358 	.word	0x08016358

08015130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015136:	4b0f      	ldr	r3, [pc, #60]	; (8015174 <Get_SerialNum+0x44>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801513c:	4b0e      	ldr	r3, [pc, #56]	; (8015178 <Get_SerialNum+0x48>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015142:	4b0e      	ldr	r3, [pc, #56]	; (801517c <Get_SerialNum+0x4c>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015148:	68fa      	ldr	r2, [r7, #12]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	4413      	add	r3, r2
 801514e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d009      	beq.n	801516a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015156:	2208      	movs	r2, #8
 8015158:	4909      	ldr	r1, [pc, #36]	; (8015180 <Get_SerialNum+0x50>)
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f000 f814 	bl	8015188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015160:	2204      	movs	r2, #4
 8015162:	4908      	ldr	r1, [pc, #32]	; (8015184 <Get_SerialNum+0x54>)
 8015164:	68b8      	ldr	r0, [r7, #8]
 8015166:	f000 f80f 	bl	8015188 <IntToUnicode>
  }
}
 801516a:	bf00      	nop
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	1fff7a10 	.word	0x1fff7a10
 8015178:	1fff7a14 	.word	0x1fff7a14
 801517c:	1fff7a18 	.word	0x1fff7a18
 8015180:	200001c6 	.word	0x200001c6
 8015184:	200001d6 	.word	0x200001d6

08015188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015188:	b480      	push	{r7}
 801518a:	b087      	sub	sp, #28
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	4613      	mov	r3, r2
 8015194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015196:	2300      	movs	r3, #0
 8015198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801519a:	2300      	movs	r3, #0
 801519c:	75fb      	strb	r3, [r7, #23]
 801519e:	e027      	b.n	80151f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	0f1b      	lsrs	r3, r3, #28
 80151a4:	2b09      	cmp	r3, #9
 80151a6:	d80b      	bhi.n	80151c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	0f1b      	lsrs	r3, r3, #28
 80151ac:	b2da      	uxtb	r2, r3
 80151ae:	7dfb      	ldrb	r3, [r7, #23]
 80151b0:	005b      	lsls	r3, r3, #1
 80151b2:	4619      	mov	r1, r3
 80151b4:	68bb      	ldr	r3, [r7, #8]
 80151b6:	440b      	add	r3, r1
 80151b8:	3230      	adds	r2, #48	; 0x30
 80151ba:	b2d2      	uxtb	r2, r2
 80151bc:	701a      	strb	r2, [r3, #0]
 80151be:	e00a      	b.n	80151d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	0f1b      	lsrs	r3, r3, #28
 80151c4:	b2da      	uxtb	r2, r3
 80151c6:	7dfb      	ldrb	r3, [r7, #23]
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	4619      	mov	r1, r3
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	440b      	add	r3, r1
 80151d0:	3237      	adds	r2, #55	; 0x37
 80151d2:	b2d2      	uxtb	r2, r2
 80151d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	011b      	lsls	r3, r3, #4
 80151da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80151dc:	7dfb      	ldrb	r3, [r7, #23]
 80151de:	005b      	lsls	r3, r3, #1
 80151e0:	3301      	adds	r3, #1
 80151e2:	68ba      	ldr	r2, [r7, #8]
 80151e4:	4413      	add	r3, r2
 80151e6:	2200      	movs	r2, #0
 80151e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80151ea:	7dfb      	ldrb	r3, [r7, #23]
 80151ec:	3301      	adds	r3, #1
 80151ee:	75fb      	strb	r3, [r7, #23]
 80151f0:	7dfa      	ldrb	r2, [r7, #23]
 80151f2:	79fb      	ldrb	r3, [r7, #7]
 80151f4:	429a      	cmp	r2, r3
 80151f6:	d3d3      	bcc.n	80151a0 <IntToUnicode+0x18>
  }
}
 80151f8:	bf00      	nop
 80151fa:	bf00      	nop
 80151fc:	371c      	adds	r7, #28
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr
	...

08015208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b08a      	sub	sp, #40	; 0x28
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015210:	f107 0314 	add.w	r3, r7, #20
 8015214:	2200      	movs	r2, #0
 8015216:	601a      	str	r2, [r3, #0]
 8015218:	605a      	str	r2, [r3, #4]
 801521a:	609a      	str	r2, [r3, #8]
 801521c:	60da      	str	r2, [r3, #12]
 801521e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015228:	d13a      	bne.n	80152a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801522a:	2300      	movs	r3, #0
 801522c:	613b      	str	r3, [r7, #16]
 801522e:	4b1e      	ldr	r3, [pc, #120]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 8015230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015232:	4a1d      	ldr	r2, [pc, #116]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 8015234:	f043 0301 	orr.w	r3, r3, #1
 8015238:	6313      	str	r3, [r2, #48]	; 0x30
 801523a:	4b1b      	ldr	r3, [pc, #108]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 801523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801523e:	f003 0301 	and.w	r3, r3, #1
 8015242:	613b      	str	r3, [r7, #16]
 8015244:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015246:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801524a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801524c:	2302      	movs	r3, #2
 801524e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015250:	2300      	movs	r3, #0
 8015252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015254:	2303      	movs	r3, #3
 8015256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015258:	230a      	movs	r3, #10
 801525a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801525c:	f107 0314 	add.w	r3, r7, #20
 8015260:	4619      	mov	r1, r3
 8015262:	4812      	ldr	r0, [pc, #72]	; (80152ac <HAL_PCD_MspInit+0xa4>)
 8015264:	f7f6 ffb6 	bl	800c1d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015268:	4b0f      	ldr	r3, [pc, #60]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 801526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801526c:	4a0e      	ldr	r2, [pc, #56]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 801526e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015272:	6353      	str	r3, [r2, #52]	; 0x34
 8015274:	2300      	movs	r3, #0
 8015276:	60fb      	str	r3, [r7, #12]
 8015278:	4b0b      	ldr	r3, [pc, #44]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 801527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801527c:	4a0a      	ldr	r2, [pc, #40]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 801527e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015282:	6453      	str	r3, [r2, #68]	; 0x44
 8015284:	4b08      	ldr	r3, [pc, #32]	; (80152a8 <HAL_PCD_MspInit+0xa0>)
 8015286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801528c:	60fb      	str	r3, [r7, #12]
 801528e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015290:	2200      	movs	r2, #0
 8015292:	2100      	movs	r1, #0
 8015294:	2043      	movs	r0, #67	; 0x43
 8015296:	f7f6 fcc5 	bl	800bc24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801529a:	2043      	movs	r0, #67	; 0x43
 801529c:	f7f6 fcde 	bl	800bc5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80152a0:	bf00      	nop
 80152a2:	3728      	adds	r7, #40	; 0x28
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	40023800 	.word	0x40023800
 80152ac:	40020000 	.word	0x40020000

080152b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80152c4:	4619      	mov	r1, r3
 80152c6:	4610      	mov	r0, r2
 80152c8:	f7fe fb41 	bl	801394e <USBD_LL_SetupStage>
}
 80152cc:	bf00      	nop
 80152ce:	3708      	adds	r7, #8
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	460b      	mov	r3, r1
 80152de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80152e6:	78fa      	ldrb	r2, [r7, #3]
 80152e8:	6879      	ldr	r1, [r7, #4]
 80152ea:	4613      	mov	r3, r2
 80152ec:	00db      	lsls	r3, r3, #3
 80152ee:	4413      	add	r3, r2
 80152f0:	009b      	lsls	r3, r3, #2
 80152f2:	440b      	add	r3, r1
 80152f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	78fb      	ldrb	r3, [r7, #3]
 80152fc:	4619      	mov	r1, r3
 80152fe:	f7fe fb7b 	bl	80139f8 <USBD_LL_DataOutStage>
}
 8015302:	bf00      	nop
 8015304:	3708      	adds	r7, #8
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}

0801530a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b082      	sub	sp, #8
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
 8015312:	460b      	mov	r3, r1
 8015314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801531c:	78fa      	ldrb	r2, [r7, #3]
 801531e:	6879      	ldr	r1, [r7, #4]
 8015320:	4613      	mov	r3, r2
 8015322:	00db      	lsls	r3, r3, #3
 8015324:	4413      	add	r3, r2
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	440b      	add	r3, r1
 801532a:	334c      	adds	r3, #76	; 0x4c
 801532c:	681a      	ldr	r2, [r3, #0]
 801532e:	78fb      	ldrb	r3, [r7, #3]
 8015330:	4619      	mov	r1, r3
 8015332:	f7fe fc14 	bl	8013b5e <USBD_LL_DataInStage>
}
 8015336:	bf00      	nop
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801533e:	b580      	push	{r7, lr}
 8015340:	b082      	sub	sp, #8
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801534c:	4618      	mov	r0, r3
 801534e:	f7fe fd48 	bl	8013de2 <USBD_LL_SOF>
}
 8015352:	bf00      	nop
 8015354:	3708      	adds	r7, #8
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}

0801535a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b084      	sub	sp, #16
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015362:	2301      	movs	r3, #1
 8015364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	68db      	ldr	r3, [r3, #12]
 801536a:	2b02      	cmp	r3, #2
 801536c:	d001      	beq.n	8015372 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801536e:	f7f2 fe79 	bl	8008064 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015378:	7bfa      	ldrb	r2, [r7, #15]
 801537a:	4611      	mov	r1, r2
 801537c:	4618      	mov	r0, r3
 801537e:	f7fe fcf2 	bl	8013d66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015388:	4618      	mov	r0, r3
 801538a:	f7fe fc9a 	bl	8013cc2 <USBD_LL_Reset>
}
 801538e:	bf00      	nop
 8015390:	3710      	adds	r7, #16
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
	...

08015398 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fe fced 	bl	8013d86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	687a      	ldr	r2, [r7, #4]
 80153b8:	6812      	ldr	r2, [r2, #0]
 80153ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80153be:	f043 0301 	orr.w	r3, r3, #1
 80153c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6a1b      	ldr	r3, [r3, #32]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d005      	beq.n	80153d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80153cc:	4b04      	ldr	r3, [pc, #16]	; (80153e0 <HAL_PCD_SuspendCallback+0x48>)
 80153ce:	691b      	ldr	r3, [r3, #16]
 80153d0:	4a03      	ldr	r2, [pc, #12]	; (80153e0 <HAL_PCD_SuspendCallback+0x48>)
 80153d2:	f043 0306 	orr.w	r3, r3, #6
 80153d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80153d8:	bf00      	nop
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	e000ed00 	.word	0xe000ed00

080153e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7fe fcdd 	bl	8013db2 <USBD_LL_Resume>
}
 80153f8:	bf00      	nop
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	460b      	mov	r3, r1
 801540a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015412:	78fa      	ldrb	r2, [r7, #3]
 8015414:	4611      	mov	r1, r2
 8015416:	4618      	mov	r0, r3
 8015418:	f7fe fd35 	bl	8013e86 <USBD_LL_IsoOUTIncomplete>
}
 801541c:	bf00      	nop
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	460b      	mov	r3, r1
 801542e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015436:	78fa      	ldrb	r2, [r7, #3]
 8015438:	4611      	mov	r1, r2
 801543a:	4618      	mov	r0, r3
 801543c:	f7fe fcf1 	bl	8013e22 <USBD_LL_IsoINIncomplete>
}
 8015440:	bf00      	nop
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015456:	4618      	mov	r0, r3
 8015458:	f7fe fd47 	bl	8013eea <USBD_LL_DevConnected>
}
 801545c:	bf00      	nop
 801545e:	3708      	adds	r7, #8
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}

08015464 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015472:	4618      	mov	r0, r3
 8015474:	f7fe fd44 	bl	8013f00 <USBD_LL_DevDisconnected>
}
 8015478:	bf00      	nop
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}

08015480 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b082      	sub	sp, #8
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d13c      	bne.n	801550a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015490:	4a20      	ldr	r2, [pc, #128]	; (8015514 <USBD_LL_Init+0x94>)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	4a1e      	ldr	r2, [pc, #120]	; (8015514 <USBD_LL_Init+0x94>)
 801549c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80154a0:	4b1c      	ldr	r3, [pc, #112]	; (8015514 <USBD_LL_Init+0x94>)
 80154a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80154a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80154a8:	4b1a      	ldr	r3, [pc, #104]	; (8015514 <USBD_LL_Init+0x94>)
 80154aa:	2204      	movs	r2, #4
 80154ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80154ae:	4b19      	ldr	r3, [pc, #100]	; (8015514 <USBD_LL_Init+0x94>)
 80154b0:	2202      	movs	r2, #2
 80154b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80154b4:	4b17      	ldr	r3, [pc, #92]	; (8015514 <USBD_LL_Init+0x94>)
 80154b6:	2200      	movs	r2, #0
 80154b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80154ba:	4b16      	ldr	r3, [pc, #88]	; (8015514 <USBD_LL_Init+0x94>)
 80154bc:	2202      	movs	r2, #2
 80154be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80154c0:	4b14      	ldr	r3, [pc, #80]	; (8015514 <USBD_LL_Init+0x94>)
 80154c2:	2200      	movs	r2, #0
 80154c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80154c6:	4b13      	ldr	r3, [pc, #76]	; (8015514 <USBD_LL_Init+0x94>)
 80154c8:	2200      	movs	r2, #0
 80154ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80154cc:	4b11      	ldr	r3, [pc, #68]	; (8015514 <USBD_LL_Init+0x94>)
 80154ce:	2200      	movs	r2, #0
 80154d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80154d2:	4b10      	ldr	r3, [pc, #64]	; (8015514 <USBD_LL_Init+0x94>)
 80154d4:	2200      	movs	r2, #0
 80154d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80154d8:	4b0e      	ldr	r3, [pc, #56]	; (8015514 <USBD_LL_Init+0x94>)
 80154da:	2200      	movs	r2, #0
 80154dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80154de:	480d      	ldr	r0, [pc, #52]	; (8015514 <USBD_LL_Init+0x94>)
 80154e0:	f7f8 f8d1 	bl	800d686 <HAL_PCD_Init>
 80154e4:	4603      	mov	r3, r0
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d001      	beq.n	80154ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80154ea:	f7f2 fdbb 	bl	8008064 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80154ee:	2180      	movs	r1, #128	; 0x80
 80154f0:	4808      	ldr	r0, [pc, #32]	; (8015514 <USBD_LL_Init+0x94>)
 80154f2:	f7f9 fb28 	bl	800eb46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80154f6:	2240      	movs	r2, #64	; 0x40
 80154f8:	2100      	movs	r1, #0
 80154fa:	4806      	ldr	r0, [pc, #24]	; (8015514 <USBD_LL_Init+0x94>)
 80154fc:	f7f9 fadc 	bl	800eab8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015500:	2280      	movs	r2, #128	; 0x80
 8015502:	2101      	movs	r1, #1
 8015504:	4803      	ldr	r0, [pc, #12]	; (8015514 <USBD_LL_Init+0x94>)
 8015506:	f7f9 fad7 	bl	800eab8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801550a:	2300      	movs	r3, #0
}
 801550c:	4618      	mov	r0, r3
 801550e:	3708      	adds	r7, #8
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	200025b0 	.word	0x200025b0

08015518 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015520:	2300      	movs	r3, #0
 8015522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015524:	2300      	movs	r3, #0
 8015526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801552e:	4618      	mov	r0, r3
 8015530:	f7f8 f9c6 	bl	800d8c0 <HAL_PCD_Start>
 8015534:	4603      	mov	r3, r0
 8015536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015538:	7bfb      	ldrb	r3, [r7, #15]
 801553a:	4618      	mov	r0, r3
 801553c:	f000 f942 	bl	80157c4 <USBD_Get_USB_Status>
 8015540:	4603      	mov	r3, r0
 8015542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015544:	7bbb      	ldrb	r3, [r7, #14]
}
 8015546:	4618      	mov	r0, r3
 8015548:	3710      	adds	r7, #16
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b084      	sub	sp, #16
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
 8015556:	4608      	mov	r0, r1
 8015558:	4611      	mov	r1, r2
 801555a:	461a      	mov	r2, r3
 801555c:	4603      	mov	r3, r0
 801555e:	70fb      	strb	r3, [r7, #3]
 8015560:	460b      	mov	r3, r1
 8015562:	70bb      	strb	r3, [r7, #2]
 8015564:	4613      	mov	r3, r2
 8015566:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015568:	2300      	movs	r3, #0
 801556a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801556c:	2300      	movs	r3, #0
 801556e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015576:	78bb      	ldrb	r3, [r7, #2]
 8015578:	883a      	ldrh	r2, [r7, #0]
 801557a:	78f9      	ldrb	r1, [r7, #3]
 801557c:	f7f8 fe97 	bl	800e2ae <HAL_PCD_EP_Open>
 8015580:	4603      	mov	r3, r0
 8015582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015584:	7bfb      	ldrb	r3, [r7, #15]
 8015586:	4618      	mov	r0, r3
 8015588:	f000 f91c 	bl	80157c4 <USBD_Get_USB_Status>
 801558c:	4603      	mov	r3, r0
 801558e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015590:	7bbb      	ldrb	r3, [r7, #14]
}
 8015592:	4618      	mov	r0, r3
 8015594:	3710      	adds	r7, #16
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b084      	sub	sp, #16
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
 80155a2:	460b      	mov	r3, r1
 80155a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155a6:	2300      	movs	r3, #0
 80155a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155aa:	2300      	movs	r3, #0
 80155ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80155b4:	78fa      	ldrb	r2, [r7, #3]
 80155b6:	4611      	mov	r1, r2
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7f8 fee0 	bl	800e37e <HAL_PCD_EP_Close>
 80155be:	4603      	mov	r3, r0
 80155c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155c2:	7bfb      	ldrb	r3, [r7, #15]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f000 f8fd 	bl	80157c4 <USBD_Get_USB_Status>
 80155ca:	4603      	mov	r3, r0
 80155cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80155d0:	4618      	mov	r0, r3
 80155d2:	3710      	adds	r7, #16
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b084      	sub	sp, #16
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	460b      	mov	r3, r1
 80155e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155e4:	2300      	movs	r3, #0
 80155e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155e8:	2300      	movs	r3, #0
 80155ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80155f2:	78fa      	ldrb	r2, [r7, #3]
 80155f4:	4611      	mov	r1, r2
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7f8 ffb8 	bl	800e56c <HAL_PCD_EP_SetStall>
 80155fc:	4603      	mov	r3, r0
 80155fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015600:	7bfb      	ldrb	r3, [r7, #15]
 8015602:	4618      	mov	r0, r3
 8015604:	f000 f8de 	bl	80157c4 <USBD_Get_USB_Status>
 8015608:	4603      	mov	r3, r0
 801560a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801560c:	7bbb      	ldrb	r3, [r7, #14]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3710      	adds	r7, #16
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b084      	sub	sp, #16
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	460b      	mov	r3, r1
 8015620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015622:	2300      	movs	r3, #0
 8015624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015630:	78fa      	ldrb	r2, [r7, #3]
 8015632:	4611      	mov	r1, r2
 8015634:	4618      	mov	r0, r3
 8015636:	f7f8 fffd 	bl	800e634 <HAL_PCD_EP_ClrStall>
 801563a:	4603      	mov	r3, r0
 801563c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801563e:	7bfb      	ldrb	r3, [r7, #15]
 8015640:	4618      	mov	r0, r3
 8015642:	f000 f8bf 	bl	80157c4 <USBD_Get_USB_Status>
 8015646:	4603      	mov	r3, r0
 8015648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801564a:	7bbb      	ldrb	r3, [r7, #14]
}
 801564c:	4618      	mov	r0, r3
 801564e:	3710      	adds	r7, #16
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015654:	b480      	push	{r7}
 8015656:	b085      	sub	sp, #20
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	460b      	mov	r3, r1
 801565e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015666:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801566c:	2b00      	cmp	r3, #0
 801566e:	da0b      	bge.n	8015688 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015670:	78fb      	ldrb	r3, [r7, #3]
 8015672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015676:	68f9      	ldr	r1, [r7, #12]
 8015678:	4613      	mov	r3, r2
 801567a:	00db      	lsls	r3, r3, #3
 801567c:	4413      	add	r3, r2
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	440b      	add	r3, r1
 8015682:	333e      	adds	r3, #62	; 0x3e
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	e00b      	b.n	80156a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015688:	78fb      	ldrb	r3, [r7, #3]
 801568a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801568e:	68f9      	ldr	r1, [r7, #12]
 8015690:	4613      	mov	r3, r2
 8015692:	00db      	lsls	r3, r3, #3
 8015694:	4413      	add	r3, r2
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	440b      	add	r3, r1
 801569a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801569e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3714      	adds	r7, #20
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	460b      	mov	r3, r1
 80156b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156b8:	2300      	movs	r3, #0
 80156ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156bc:	2300      	movs	r3, #0
 80156be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80156c6:	78fa      	ldrb	r2, [r7, #3]
 80156c8:	4611      	mov	r1, r2
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7f8 fdca 	bl	800e264 <HAL_PCD_SetAddress>
 80156d0:	4603      	mov	r3, r0
 80156d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156d4:	7bfb      	ldrb	r3, [r7, #15]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f000 f874 	bl	80157c4 <USBD_Get_USB_Status>
 80156dc:	4603      	mov	r3, r0
 80156de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}

080156ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80156ea:	b580      	push	{r7, lr}
 80156ec:	b086      	sub	sp, #24
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	60f8      	str	r0, [r7, #12]
 80156f2:	607a      	str	r2, [r7, #4]
 80156f4:	603b      	str	r3, [r7, #0]
 80156f6:	460b      	mov	r3, r1
 80156f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156fa:	2300      	movs	r3, #0
 80156fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156fe:	2300      	movs	r3, #0
 8015700:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015708:	7af9      	ldrb	r1, [r7, #11]
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	687a      	ldr	r2, [r7, #4]
 801570e:	f7f8 fee3 	bl	800e4d8 <HAL_PCD_EP_Transmit>
 8015712:	4603      	mov	r3, r0
 8015714:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015716:	7dfb      	ldrb	r3, [r7, #23]
 8015718:	4618      	mov	r0, r3
 801571a:	f000 f853 	bl	80157c4 <USBD_Get_USB_Status>
 801571e:	4603      	mov	r3, r0
 8015720:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015722:	7dbb      	ldrb	r3, [r7, #22]
}
 8015724:	4618      	mov	r0, r3
 8015726:	3718      	adds	r7, #24
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b086      	sub	sp, #24
 8015730:	af00      	add	r7, sp, #0
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	607a      	str	r2, [r7, #4]
 8015736:	603b      	str	r3, [r7, #0]
 8015738:	460b      	mov	r3, r1
 801573a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801573c:	2300      	movs	r3, #0
 801573e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015740:	2300      	movs	r3, #0
 8015742:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801574a:	7af9      	ldrb	r1, [r7, #11]
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	687a      	ldr	r2, [r7, #4]
 8015750:	f7f8 fe5f 	bl	800e412 <HAL_PCD_EP_Receive>
 8015754:	4603      	mov	r3, r0
 8015756:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015758:	7dfb      	ldrb	r3, [r7, #23]
 801575a:	4618      	mov	r0, r3
 801575c:	f000 f832 	bl	80157c4 <USBD_Get_USB_Status>
 8015760:	4603      	mov	r3, r0
 8015762:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015764:	7dbb      	ldrb	r3, [r7, #22]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3718      	adds	r7, #24
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}

0801576e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801576e:	b580      	push	{r7, lr}
 8015770:	b082      	sub	sp, #8
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
 8015776:	460b      	mov	r3, r1
 8015778:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015780:	78fa      	ldrb	r2, [r7, #3]
 8015782:	4611      	mov	r1, r2
 8015784:	4618      	mov	r0, r3
 8015786:	f7f8 fe8f 	bl	800e4a8 <HAL_PCD_EP_GetRxCount>
 801578a:	4603      	mov	r3, r0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801579c:	4b03      	ldr	r3, [pc, #12]	; (80157ac <USBD_static_malloc+0x18>)
}
 801579e:	4618      	mov	r0, r3
 80157a0:	370c      	adds	r7, #12
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop
 80157ac:	20002abc 	.word	0x20002abc

080157b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]

}
 80157b8:	bf00      	nop
 80157ba:	370c      	adds	r7, #12
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr

080157c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80157c4:	b480      	push	{r7}
 80157c6:	b085      	sub	sp, #20
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157ce:	2300      	movs	r3, #0
 80157d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80157d2:	79fb      	ldrb	r3, [r7, #7]
 80157d4:	2b03      	cmp	r3, #3
 80157d6:	d817      	bhi.n	8015808 <USBD_Get_USB_Status+0x44>
 80157d8:	a201      	add	r2, pc, #4	; (adr r2, 80157e0 <USBD_Get_USB_Status+0x1c>)
 80157da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157de:	bf00      	nop
 80157e0:	080157f1 	.word	0x080157f1
 80157e4:	080157f7 	.word	0x080157f7
 80157e8:	080157fd 	.word	0x080157fd
 80157ec:	08015803 	.word	0x08015803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80157f0:	2300      	movs	r3, #0
 80157f2:	73fb      	strb	r3, [r7, #15]
    break;
 80157f4:	e00b      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80157f6:	2303      	movs	r3, #3
 80157f8:	73fb      	strb	r3, [r7, #15]
    break;
 80157fa:	e008      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80157fc:	2301      	movs	r3, #1
 80157fe:	73fb      	strb	r3, [r7, #15]
    break;
 8015800:	e005      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015802:	2303      	movs	r3, #3
 8015804:	73fb      	strb	r3, [r7, #15]
    break;
 8015806:	e002      	b.n	801580e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015808:	2303      	movs	r3, #3
 801580a:	73fb      	strb	r3, [r7, #15]
    break;
 801580c:	bf00      	nop
  }
  return usb_status;
 801580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015810:	4618      	mov	r0, r3
 8015812:	3714      	adds	r7, #20
 8015814:	46bd      	mov	sp, r7
 8015816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581a:	4770      	bx	lr

0801581c <memset>:
 801581c:	4402      	add	r2, r0
 801581e:	4603      	mov	r3, r0
 8015820:	4293      	cmp	r3, r2
 8015822:	d100      	bne.n	8015826 <memset+0xa>
 8015824:	4770      	bx	lr
 8015826:	f803 1b01 	strb.w	r1, [r3], #1
 801582a:	e7f9      	b.n	8015820 <memset+0x4>

0801582c <__errno>:
 801582c:	4b01      	ldr	r3, [pc, #4]	; (8015834 <__errno+0x8>)
 801582e:	6818      	ldr	r0, [r3, #0]
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	2000022c 	.word	0x2000022c

08015838 <__libc_init_array>:
 8015838:	b570      	push	{r4, r5, r6, lr}
 801583a:	4d0d      	ldr	r5, [pc, #52]	; (8015870 <__libc_init_array+0x38>)
 801583c:	4c0d      	ldr	r4, [pc, #52]	; (8015874 <__libc_init_array+0x3c>)
 801583e:	1b64      	subs	r4, r4, r5
 8015840:	10a4      	asrs	r4, r4, #2
 8015842:	2600      	movs	r6, #0
 8015844:	42a6      	cmp	r6, r4
 8015846:	d109      	bne.n	801585c <__libc_init_array+0x24>
 8015848:	4d0b      	ldr	r5, [pc, #44]	; (8015878 <__libc_init_array+0x40>)
 801584a:	4c0c      	ldr	r4, [pc, #48]	; (801587c <__libc_init_array+0x44>)
 801584c:	f000 fba2 	bl	8015f94 <_init>
 8015850:	1b64      	subs	r4, r4, r5
 8015852:	10a4      	asrs	r4, r4, #2
 8015854:	2600      	movs	r6, #0
 8015856:	42a6      	cmp	r6, r4
 8015858:	d105      	bne.n	8015866 <__libc_init_array+0x2e>
 801585a:	bd70      	pop	{r4, r5, r6, pc}
 801585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015860:	4798      	blx	r3
 8015862:	3601      	adds	r6, #1
 8015864:	e7ee      	b.n	8015844 <__libc_init_array+0xc>
 8015866:	f855 3b04 	ldr.w	r3, [r5], #4
 801586a:	4798      	blx	r3
 801586c:	3601      	adds	r6, #1
 801586e:	e7f2      	b.n	8015856 <__libc_init_array+0x1e>
 8015870:	080169f8 	.word	0x080169f8
 8015874:	080169f8 	.word	0x080169f8
 8015878:	080169f8 	.word	0x080169f8
 801587c:	080169fc 	.word	0x080169fc

08015880 <memcpy>:
 8015880:	440a      	add	r2, r1
 8015882:	4291      	cmp	r1, r2
 8015884:	f100 33ff 	add.w	r3, r0, #4294967295
 8015888:	d100      	bne.n	801588c <memcpy+0xc>
 801588a:	4770      	bx	lr
 801588c:	b510      	push	{r4, lr}
 801588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015896:	4291      	cmp	r1, r2
 8015898:	d1f9      	bne.n	801588e <memcpy+0xe>
 801589a:	bd10      	pop	{r4, pc}

0801589c <atan2>:
 801589c:	f000 b908 	b.w	8015ab0 <__ieee754_atan2>

080158a0 <sqrt>:
 80158a0:	b538      	push	{r3, r4, r5, lr}
 80158a2:	ed2d 8b02 	vpush	{d8}
 80158a6:	ec55 4b10 	vmov	r4, r5, d0
 80158aa:	f000 f825 	bl	80158f8 <__ieee754_sqrt>
 80158ae:	4622      	mov	r2, r4
 80158b0:	462b      	mov	r3, r5
 80158b2:	4620      	mov	r0, r4
 80158b4:	4629      	mov	r1, r5
 80158b6:	eeb0 8a40 	vmov.f32	s16, s0
 80158ba:	eef0 8a60 	vmov.f32	s17, s1
 80158be:	f7eb f8e9 	bl	8000a94 <__aeabi_dcmpun>
 80158c2:	b990      	cbnz	r0, 80158ea <sqrt+0x4a>
 80158c4:	2200      	movs	r2, #0
 80158c6:	2300      	movs	r3, #0
 80158c8:	4620      	mov	r0, r4
 80158ca:	4629      	mov	r1, r5
 80158cc:	f7eb f8ba 	bl	8000a44 <__aeabi_dcmplt>
 80158d0:	b158      	cbz	r0, 80158ea <sqrt+0x4a>
 80158d2:	f7ff ffab 	bl	801582c <__errno>
 80158d6:	2321      	movs	r3, #33	; 0x21
 80158d8:	6003      	str	r3, [r0, #0]
 80158da:	2200      	movs	r2, #0
 80158dc:	2300      	movs	r3, #0
 80158de:	4610      	mov	r0, r2
 80158e0:	4619      	mov	r1, r3
 80158e2:	f7ea ff67 	bl	80007b4 <__aeabi_ddiv>
 80158e6:	ec41 0b18 	vmov	d8, r0, r1
 80158ea:	eeb0 0a48 	vmov.f32	s0, s16
 80158ee:	eef0 0a68 	vmov.f32	s1, s17
 80158f2:	ecbd 8b02 	vpop	{d8}
 80158f6:	bd38      	pop	{r3, r4, r5, pc}

080158f8 <__ieee754_sqrt>:
 80158f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158fc:	ec55 4b10 	vmov	r4, r5, d0
 8015900:	4e67      	ldr	r6, [pc, #412]	; (8015aa0 <__ieee754_sqrt+0x1a8>)
 8015902:	43ae      	bics	r6, r5
 8015904:	ee10 0a10 	vmov	r0, s0
 8015908:	ee10 2a10 	vmov	r2, s0
 801590c:	4629      	mov	r1, r5
 801590e:	462b      	mov	r3, r5
 8015910:	d10d      	bne.n	801592e <__ieee754_sqrt+0x36>
 8015912:	f7ea fe25 	bl	8000560 <__aeabi_dmul>
 8015916:	4602      	mov	r2, r0
 8015918:	460b      	mov	r3, r1
 801591a:	4620      	mov	r0, r4
 801591c:	4629      	mov	r1, r5
 801591e:	f7ea fc69 	bl	80001f4 <__adddf3>
 8015922:	4604      	mov	r4, r0
 8015924:	460d      	mov	r5, r1
 8015926:	ec45 4b10 	vmov	d0, r4, r5
 801592a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801592e:	2d00      	cmp	r5, #0
 8015930:	dc0b      	bgt.n	801594a <__ieee754_sqrt+0x52>
 8015932:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015936:	4326      	orrs	r6, r4
 8015938:	d0f5      	beq.n	8015926 <__ieee754_sqrt+0x2e>
 801593a:	b135      	cbz	r5, 801594a <__ieee754_sqrt+0x52>
 801593c:	f7ea fc58 	bl	80001f0 <__aeabi_dsub>
 8015940:	4602      	mov	r2, r0
 8015942:	460b      	mov	r3, r1
 8015944:	f7ea ff36 	bl	80007b4 <__aeabi_ddiv>
 8015948:	e7eb      	b.n	8015922 <__ieee754_sqrt+0x2a>
 801594a:	1509      	asrs	r1, r1, #20
 801594c:	f000 808d 	beq.w	8015a6a <__ieee754_sqrt+0x172>
 8015950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015954:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8015958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801595c:	07c9      	lsls	r1, r1, #31
 801595e:	bf5c      	itt	pl
 8015960:	005b      	lslpl	r3, r3, #1
 8015962:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8015966:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801596a:	bf58      	it	pl
 801596c:	0052      	lslpl	r2, r2, #1
 801596e:	2500      	movs	r5, #0
 8015970:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015974:	1076      	asrs	r6, r6, #1
 8015976:	0052      	lsls	r2, r2, #1
 8015978:	f04f 0e16 	mov.w	lr, #22
 801597c:	46ac      	mov	ip, r5
 801597e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015982:	eb0c 0001 	add.w	r0, ip, r1
 8015986:	4298      	cmp	r0, r3
 8015988:	bfde      	ittt	le
 801598a:	1a1b      	suble	r3, r3, r0
 801598c:	eb00 0c01 	addle.w	ip, r0, r1
 8015990:	186d      	addle	r5, r5, r1
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	f1be 0e01 	subs.w	lr, lr, #1
 8015998:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801599c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80159a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80159a4:	d1ed      	bne.n	8015982 <__ieee754_sqrt+0x8a>
 80159a6:	4674      	mov	r4, lr
 80159a8:	2720      	movs	r7, #32
 80159aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80159ae:	4563      	cmp	r3, ip
 80159b0:	eb01 000e 	add.w	r0, r1, lr
 80159b4:	dc02      	bgt.n	80159bc <__ieee754_sqrt+0xc4>
 80159b6:	d113      	bne.n	80159e0 <__ieee754_sqrt+0xe8>
 80159b8:	4290      	cmp	r0, r2
 80159ba:	d811      	bhi.n	80159e0 <__ieee754_sqrt+0xe8>
 80159bc:	2800      	cmp	r0, #0
 80159be:	eb00 0e01 	add.w	lr, r0, r1
 80159c2:	da57      	bge.n	8015a74 <__ieee754_sqrt+0x17c>
 80159c4:	f1be 0f00 	cmp.w	lr, #0
 80159c8:	db54      	blt.n	8015a74 <__ieee754_sqrt+0x17c>
 80159ca:	f10c 0801 	add.w	r8, ip, #1
 80159ce:	eba3 030c 	sub.w	r3, r3, ip
 80159d2:	4290      	cmp	r0, r2
 80159d4:	bf88      	it	hi
 80159d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80159da:	1a12      	subs	r2, r2, r0
 80159dc:	440c      	add	r4, r1
 80159de:	46c4      	mov	ip, r8
 80159e0:	005b      	lsls	r3, r3, #1
 80159e2:	3f01      	subs	r7, #1
 80159e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80159e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80159ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80159f0:	d1dd      	bne.n	80159ae <__ieee754_sqrt+0xb6>
 80159f2:	4313      	orrs	r3, r2
 80159f4:	d01b      	beq.n	8015a2e <__ieee754_sqrt+0x136>
 80159f6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015aa4 <__ieee754_sqrt+0x1ac>
 80159fa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8015aa8 <__ieee754_sqrt+0x1b0>
 80159fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8015a02:	e9db 2300 	ldrd	r2, r3, [fp]
 8015a06:	f7ea fbf3 	bl	80001f0 <__aeabi_dsub>
 8015a0a:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a0e:	4602      	mov	r2, r0
 8015a10:	460b      	mov	r3, r1
 8015a12:	4640      	mov	r0, r8
 8015a14:	4649      	mov	r1, r9
 8015a16:	f7eb f81f 	bl	8000a58 <__aeabi_dcmple>
 8015a1a:	b140      	cbz	r0, 8015a2e <__ieee754_sqrt+0x136>
 8015a1c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015a20:	e9da 0100 	ldrd	r0, r1, [sl]
 8015a24:	e9db 2300 	ldrd	r2, r3, [fp]
 8015a28:	d126      	bne.n	8015a78 <__ieee754_sqrt+0x180>
 8015a2a:	3501      	adds	r5, #1
 8015a2c:	463c      	mov	r4, r7
 8015a2e:	106a      	asrs	r2, r5, #1
 8015a30:	0863      	lsrs	r3, r4, #1
 8015a32:	07e9      	lsls	r1, r5, #31
 8015a34:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015a38:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015a3c:	bf48      	it	mi
 8015a3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015a42:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8015a46:	461c      	mov	r4, r3
 8015a48:	e76d      	b.n	8015926 <__ieee754_sqrt+0x2e>
 8015a4a:	0ad3      	lsrs	r3, r2, #11
 8015a4c:	3815      	subs	r0, #21
 8015a4e:	0552      	lsls	r2, r2, #21
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d0fa      	beq.n	8015a4a <__ieee754_sqrt+0x152>
 8015a54:	02dc      	lsls	r4, r3, #11
 8015a56:	d50a      	bpl.n	8015a6e <__ieee754_sqrt+0x176>
 8015a58:	f1c1 0420 	rsb	r4, r1, #32
 8015a5c:	fa22 f404 	lsr.w	r4, r2, r4
 8015a60:	1e4d      	subs	r5, r1, #1
 8015a62:	408a      	lsls	r2, r1
 8015a64:	4323      	orrs	r3, r4
 8015a66:	1b41      	subs	r1, r0, r5
 8015a68:	e772      	b.n	8015950 <__ieee754_sqrt+0x58>
 8015a6a:	4608      	mov	r0, r1
 8015a6c:	e7f0      	b.n	8015a50 <__ieee754_sqrt+0x158>
 8015a6e:	005b      	lsls	r3, r3, #1
 8015a70:	3101      	adds	r1, #1
 8015a72:	e7ef      	b.n	8015a54 <__ieee754_sqrt+0x15c>
 8015a74:	46e0      	mov	r8, ip
 8015a76:	e7aa      	b.n	80159ce <__ieee754_sqrt+0xd6>
 8015a78:	f7ea fbbc 	bl	80001f4 <__adddf3>
 8015a7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a80:	4602      	mov	r2, r0
 8015a82:	460b      	mov	r3, r1
 8015a84:	4640      	mov	r0, r8
 8015a86:	4649      	mov	r1, r9
 8015a88:	f7ea ffdc 	bl	8000a44 <__aeabi_dcmplt>
 8015a8c:	b120      	cbz	r0, 8015a98 <__ieee754_sqrt+0x1a0>
 8015a8e:	1ca0      	adds	r0, r4, #2
 8015a90:	bf08      	it	eq
 8015a92:	3501      	addeq	r5, #1
 8015a94:	3402      	adds	r4, #2
 8015a96:	e7ca      	b.n	8015a2e <__ieee754_sqrt+0x136>
 8015a98:	3401      	adds	r4, #1
 8015a9a:	f024 0401 	bic.w	r4, r4, #1
 8015a9e:	e7c6      	b.n	8015a2e <__ieee754_sqrt+0x136>
 8015aa0:	7ff00000 	.word	0x7ff00000
 8015aa4:	20000230 	.word	0x20000230
 8015aa8:	20000238 	.word	0x20000238
 8015aac:	00000000 	.word	0x00000000

08015ab0 <__ieee754_atan2>:
 8015ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ab4:	ec57 6b11 	vmov	r6, r7, d1
 8015ab8:	4273      	negs	r3, r6
 8015aba:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8015c38 <__ieee754_atan2+0x188>
 8015abe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015ac2:	4333      	orrs	r3, r6
 8015ac4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015ac8:	4543      	cmp	r3, r8
 8015aca:	ec51 0b10 	vmov	r0, r1, d0
 8015ace:	ee11 5a10 	vmov	r5, s2
 8015ad2:	d80a      	bhi.n	8015aea <__ieee754_atan2+0x3a>
 8015ad4:	4244      	negs	r4, r0
 8015ad6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015ada:	4304      	orrs	r4, r0
 8015adc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015ae0:	4544      	cmp	r4, r8
 8015ae2:	ee10 9a10 	vmov	r9, s0
 8015ae6:	468e      	mov	lr, r1
 8015ae8:	d907      	bls.n	8015afa <__ieee754_atan2+0x4a>
 8015aea:	4632      	mov	r2, r6
 8015aec:	463b      	mov	r3, r7
 8015aee:	f7ea fb81 	bl	80001f4 <__adddf3>
 8015af2:	ec41 0b10 	vmov	d0, r0, r1
 8015af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015afa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015afe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015b02:	4334      	orrs	r4, r6
 8015b04:	d103      	bne.n	8015b0e <__ieee754_atan2+0x5e>
 8015b06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b0a:	f000 b899 	b.w	8015c40 <atan>
 8015b0e:	17bc      	asrs	r4, r7, #30
 8015b10:	f004 0402 	and.w	r4, r4, #2
 8015b14:	ea53 0909 	orrs.w	r9, r3, r9
 8015b18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015b1c:	d107      	bne.n	8015b2e <__ieee754_atan2+0x7e>
 8015b1e:	2c02      	cmp	r4, #2
 8015b20:	d05f      	beq.n	8015be2 <__ieee754_atan2+0x132>
 8015b22:	2c03      	cmp	r4, #3
 8015b24:	d1e5      	bne.n	8015af2 <__ieee754_atan2+0x42>
 8015b26:	a140      	add	r1, pc, #256	; (adr r1, 8015c28 <__ieee754_atan2+0x178>)
 8015b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b2c:	e7e1      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015b2e:	4315      	orrs	r5, r2
 8015b30:	d106      	bne.n	8015b40 <__ieee754_atan2+0x90>
 8015b32:	f1be 0f00 	cmp.w	lr, #0
 8015b36:	da5f      	bge.n	8015bf8 <__ieee754_atan2+0x148>
 8015b38:	a13d      	add	r1, pc, #244	; (adr r1, 8015c30 <__ieee754_atan2+0x180>)
 8015b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b3e:	e7d8      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015b40:	4542      	cmp	r2, r8
 8015b42:	d10f      	bne.n	8015b64 <__ieee754_atan2+0xb4>
 8015b44:	4293      	cmp	r3, r2
 8015b46:	f104 34ff 	add.w	r4, r4, #4294967295
 8015b4a:	d107      	bne.n	8015b5c <__ieee754_atan2+0xac>
 8015b4c:	2c02      	cmp	r4, #2
 8015b4e:	d84c      	bhi.n	8015bea <__ieee754_atan2+0x13a>
 8015b50:	4b33      	ldr	r3, [pc, #204]	; (8015c20 <__ieee754_atan2+0x170>)
 8015b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b5a:	e7ca      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015b5c:	2c02      	cmp	r4, #2
 8015b5e:	d848      	bhi.n	8015bf2 <__ieee754_atan2+0x142>
 8015b60:	4b30      	ldr	r3, [pc, #192]	; (8015c24 <__ieee754_atan2+0x174>)
 8015b62:	e7f6      	b.n	8015b52 <__ieee754_atan2+0xa2>
 8015b64:	4543      	cmp	r3, r8
 8015b66:	d0e4      	beq.n	8015b32 <__ieee754_atan2+0x82>
 8015b68:	1a9b      	subs	r3, r3, r2
 8015b6a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015b6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015b72:	da1e      	bge.n	8015bb2 <__ieee754_atan2+0x102>
 8015b74:	2f00      	cmp	r7, #0
 8015b76:	da01      	bge.n	8015b7c <__ieee754_atan2+0xcc>
 8015b78:	323c      	adds	r2, #60	; 0x3c
 8015b7a:	db1e      	blt.n	8015bba <__ieee754_atan2+0x10a>
 8015b7c:	4632      	mov	r2, r6
 8015b7e:	463b      	mov	r3, r7
 8015b80:	f7ea fe18 	bl	80007b4 <__aeabi_ddiv>
 8015b84:	ec41 0b10 	vmov	d0, r0, r1
 8015b88:	f000 f9fa 	bl	8015f80 <fabs>
 8015b8c:	f000 f858 	bl	8015c40 <atan>
 8015b90:	ec51 0b10 	vmov	r0, r1, d0
 8015b94:	2c01      	cmp	r4, #1
 8015b96:	d013      	beq.n	8015bc0 <__ieee754_atan2+0x110>
 8015b98:	2c02      	cmp	r4, #2
 8015b9a:	d015      	beq.n	8015bc8 <__ieee754_atan2+0x118>
 8015b9c:	2c00      	cmp	r4, #0
 8015b9e:	d0a8      	beq.n	8015af2 <__ieee754_atan2+0x42>
 8015ba0:	a317      	add	r3, pc, #92	; (adr r3, 8015c00 <__ieee754_atan2+0x150>)
 8015ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba6:	f7ea fb23 	bl	80001f0 <__aeabi_dsub>
 8015baa:	a317      	add	r3, pc, #92	; (adr r3, 8015c08 <__ieee754_atan2+0x158>)
 8015bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb0:	e014      	b.n	8015bdc <__ieee754_atan2+0x12c>
 8015bb2:	a117      	add	r1, pc, #92	; (adr r1, 8015c10 <__ieee754_atan2+0x160>)
 8015bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bb8:	e7ec      	b.n	8015b94 <__ieee754_atan2+0xe4>
 8015bba:	2000      	movs	r0, #0
 8015bbc:	2100      	movs	r1, #0
 8015bbe:	e7e9      	b.n	8015b94 <__ieee754_atan2+0xe4>
 8015bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	e794      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015bc8:	a30d      	add	r3, pc, #52	; (adr r3, 8015c00 <__ieee754_atan2+0x150>)
 8015bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bce:	f7ea fb0f 	bl	80001f0 <__aeabi_dsub>
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	a10c      	add	r1, pc, #48	; (adr r1, 8015c08 <__ieee754_atan2+0x158>)
 8015bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bdc:	f7ea fb08 	bl	80001f0 <__aeabi_dsub>
 8015be0:	e787      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015be2:	a109      	add	r1, pc, #36	; (adr r1, 8015c08 <__ieee754_atan2+0x158>)
 8015be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015be8:	e783      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015bea:	a10b      	add	r1, pc, #44	; (adr r1, 8015c18 <__ieee754_atan2+0x168>)
 8015bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bf0:	e77f      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	2100      	movs	r1, #0
 8015bf6:	e77c      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015bf8:	a105      	add	r1, pc, #20	; (adr r1, 8015c10 <__ieee754_atan2+0x160>)
 8015bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bfe:	e778      	b.n	8015af2 <__ieee754_atan2+0x42>
 8015c00:	33145c07 	.word	0x33145c07
 8015c04:	3ca1a626 	.word	0x3ca1a626
 8015c08:	54442d18 	.word	0x54442d18
 8015c0c:	400921fb 	.word	0x400921fb
 8015c10:	54442d18 	.word	0x54442d18
 8015c14:	3ff921fb 	.word	0x3ff921fb
 8015c18:	54442d18 	.word	0x54442d18
 8015c1c:	3fe921fb 	.word	0x3fe921fb
 8015c20:	08016980 	.word	0x08016980
 8015c24:	08016998 	.word	0x08016998
 8015c28:	54442d18 	.word	0x54442d18
 8015c2c:	c00921fb 	.word	0xc00921fb
 8015c30:	54442d18 	.word	0x54442d18
 8015c34:	bff921fb 	.word	0xbff921fb
 8015c38:	7ff00000 	.word	0x7ff00000
 8015c3c:	00000000 	.word	0x00000000

08015c40 <atan>:
 8015c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c44:	ec55 4b10 	vmov	r4, r5, d0
 8015c48:	4bc3      	ldr	r3, [pc, #780]	; (8015f58 <atan+0x318>)
 8015c4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015c4e:	429e      	cmp	r6, r3
 8015c50:	46ab      	mov	fp, r5
 8015c52:	dd18      	ble.n	8015c86 <atan+0x46>
 8015c54:	4bc1      	ldr	r3, [pc, #772]	; (8015f5c <atan+0x31c>)
 8015c56:	429e      	cmp	r6, r3
 8015c58:	dc01      	bgt.n	8015c5e <atan+0x1e>
 8015c5a:	d109      	bne.n	8015c70 <atan+0x30>
 8015c5c:	b144      	cbz	r4, 8015c70 <atan+0x30>
 8015c5e:	4622      	mov	r2, r4
 8015c60:	462b      	mov	r3, r5
 8015c62:	4620      	mov	r0, r4
 8015c64:	4629      	mov	r1, r5
 8015c66:	f7ea fac5 	bl	80001f4 <__adddf3>
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	460d      	mov	r5, r1
 8015c6e:	e006      	b.n	8015c7e <atan+0x3e>
 8015c70:	f1bb 0f00 	cmp.w	fp, #0
 8015c74:	f300 8131 	bgt.w	8015eda <atan+0x29a>
 8015c78:	a59b      	add	r5, pc, #620	; (adr r5, 8015ee8 <atan+0x2a8>)
 8015c7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015c7e:	ec45 4b10 	vmov	d0, r4, r5
 8015c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c86:	4bb6      	ldr	r3, [pc, #728]	; (8015f60 <atan+0x320>)
 8015c88:	429e      	cmp	r6, r3
 8015c8a:	dc14      	bgt.n	8015cb6 <atan+0x76>
 8015c8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015c90:	429e      	cmp	r6, r3
 8015c92:	dc0d      	bgt.n	8015cb0 <atan+0x70>
 8015c94:	a396      	add	r3, pc, #600	; (adr r3, 8015ef0 <atan+0x2b0>)
 8015c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9a:	ee10 0a10 	vmov	r0, s0
 8015c9e:	4629      	mov	r1, r5
 8015ca0:	f7ea faa8 	bl	80001f4 <__adddf3>
 8015ca4:	4baf      	ldr	r3, [pc, #700]	; (8015f64 <atan+0x324>)
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	f7ea feea 	bl	8000a80 <__aeabi_dcmpgt>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d1e6      	bne.n	8015c7e <atan+0x3e>
 8015cb0:	f04f 3aff 	mov.w	sl, #4294967295
 8015cb4:	e02b      	b.n	8015d0e <atan+0xce>
 8015cb6:	f000 f963 	bl	8015f80 <fabs>
 8015cba:	4bab      	ldr	r3, [pc, #684]	; (8015f68 <atan+0x328>)
 8015cbc:	429e      	cmp	r6, r3
 8015cbe:	ec55 4b10 	vmov	r4, r5, d0
 8015cc2:	f300 80bf 	bgt.w	8015e44 <atan+0x204>
 8015cc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015cca:	429e      	cmp	r6, r3
 8015ccc:	f300 80a0 	bgt.w	8015e10 <atan+0x1d0>
 8015cd0:	ee10 2a10 	vmov	r2, s0
 8015cd4:	ee10 0a10 	vmov	r0, s0
 8015cd8:	462b      	mov	r3, r5
 8015cda:	4629      	mov	r1, r5
 8015cdc:	f7ea fa8a 	bl	80001f4 <__adddf3>
 8015ce0:	4ba0      	ldr	r3, [pc, #640]	; (8015f64 <atan+0x324>)
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	f7ea fa84 	bl	80001f0 <__aeabi_dsub>
 8015ce8:	2200      	movs	r2, #0
 8015cea:	4606      	mov	r6, r0
 8015cec:	460f      	mov	r7, r1
 8015cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	f7ea fa7d 	bl	80001f4 <__adddf3>
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	4630      	mov	r0, r6
 8015d00:	4639      	mov	r1, r7
 8015d02:	f7ea fd57 	bl	80007b4 <__aeabi_ddiv>
 8015d06:	f04f 0a00 	mov.w	sl, #0
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	460d      	mov	r5, r1
 8015d0e:	4622      	mov	r2, r4
 8015d10:	462b      	mov	r3, r5
 8015d12:	4620      	mov	r0, r4
 8015d14:	4629      	mov	r1, r5
 8015d16:	f7ea fc23 	bl	8000560 <__aeabi_dmul>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	4680      	mov	r8, r0
 8015d20:	4689      	mov	r9, r1
 8015d22:	f7ea fc1d 	bl	8000560 <__aeabi_dmul>
 8015d26:	a374      	add	r3, pc, #464	; (adr r3, 8015ef8 <atan+0x2b8>)
 8015d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2c:	4606      	mov	r6, r0
 8015d2e:	460f      	mov	r7, r1
 8015d30:	f7ea fc16 	bl	8000560 <__aeabi_dmul>
 8015d34:	a372      	add	r3, pc, #456	; (adr r3, 8015f00 <atan+0x2c0>)
 8015d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d3a:	f7ea fa5b 	bl	80001f4 <__adddf3>
 8015d3e:	4632      	mov	r2, r6
 8015d40:	463b      	mov	r3, r7
 8015d42:	f7ea fc0d 	bl	8000560 <__aeabi_dmul>
 8015d46:	a370      	add	r3, pc, #448	; (adr r3, 8015f08 <atan+0x2c8>)
 8015d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d4c:	f7ea fa52 	bl	80001f4 <__adddf3>
 8015d50:	4632      	mov	r2, r6
 8015d52:	463b      	mov	r3, r7
 8015d54:	f7ea fc04 	bl	8000560 <__aeabi_dmul>
 8015d58:	a36d      	add	r3, pc, #436	; (adr r3, 8015f10 <atan+0x2d0>)
 8015d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5e:	f7ea fa49 	bl	80001f4 <__adddf3>
 8015d62:	4632      	mov	r2, r6
 8015d64:	463b      	mov	r3, r7
 8015d66:	f7ea fbfb 	bl	8000560 <__aeabi_dmul>
 8015d6a:	a36b      	add	r3, pc, #428	; (adr r3, 8015f18 <atan+0x2d8>)
 8015d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d70:	f7ea fa40 	bl	80001f4 <__adddf3>
 8015d74:	4632      	mov	r2, r6
 8015d76:	463b      	mov	r3, r7
 8015d78:	f7ea fbf2 	bl	8000560 <__aeabi_dmul>
 8015d7c:	a368      	add	r3, pc, #416	; (adr r3, 8015f20 <atan+0x2e0>)
 8015d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d82:	f7ea fa37 	bl	80001f4 <__adddf3>
 8015d86:	4642      	mov	r2, r8
 8015d88:	464b      	mov	r3, r9
 8015d8a:	f7ea fbe9 	bl	8000560 <__aeabi_dmul>
 8015d8e:	a366      	add	r3, pc, #408	; (adr r3, 8015f28 <atan+0x2e8>)
 8015d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d94:	4680      	mov	r8, r0
 8015d96:	4689      	mov	r9, r1
 8015d98:	4630      	mov	r0, r6
 8015d9a:	4639      	mov	r1, r7
 8015d9c:	f7ea fbe0 	bl	8000560 <__aeabi_dmul>
 8015da0:	a363      	add	r3, pc, #396	; (adr r3, 8015f30 <atan+0x2f0>)
 8015da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da6:	f7ea fa23 	bl	80001f0 <__aeabi_dsub>
 8015daa:	4632      	mov	r2, r6
 8015dac:	463b      	mov	r3, r7
 8015dae:	f7ea fbd7 	bl	8000560 <__aeabi_dmul>
 8015db2:	a361      	add	r3, pc, #388	; (adr r3, 8015f38 <atan+0x2f8>)
 8015db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db8:	f7ea fa1a 	bl	80001f0 <__aeabi_dsub>
 8015dbc:	4632      	mov	r2, r6
 8015dbe:	463b      	mov	r3, r7
 8015dc0:	f7ea fbce 	bl	8000560 <__aeabi_dmul>
 8015dc4:	a35e      	add	r3, pc, #376	; (adr r3, 8015f40 <atan+0x300>)
 8015dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dca:	f7ea fa11 	bl	80001f0 <__aeabi_dsub>
 8015dce:	4632      	mov	r2, r6
 8015dd0:	463b      	mov	r3, r7
 8015dd2:	f7ea fbc5 	bl	8000560 <__aeabi_dmul>
 8015dd6:	a35c      	add	r3, pc, #368	; (adr r3, 8015f48 <atan+0x308>)
 8015dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ddc:	f7ea fa08 	bl	80001f0 <__aeabi_dsub>
 8015de0:	4632      	mov	r2, r6
 8015de2:	463b      	mov	r3, r7
 8015de4:	f7ea fbbc 	bl	8000560 <__aeabi_dmul>
 8015de8:	4602      	mov	r2, r0
 8015dea:	460b      	mov	r3, r1
 8015dec:	4640      	mov	r0, r8
 8015dee:	4649      	mov	r1, r9
 8015df0:	f7ea fa00 	bl	80001f4 <__adddf3>
 8015df4:	4622      	mov	r2, r4
 8015df6:	462b      	mov	r3, r5
 8015df8:	f7ea fbb2 	bl	8000560 <__aeabi_dmul>
 8015dfc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015e00:	4602      	mov	r2, r0
 8015e02:	460b      	mov	r3, r1
 8015e04:	d14b      	bne.n	8015e9e <atan+0x25e>
 8015e06:	4620      	mov	r0, r4
 8015e08:	4629      	mov	r1, r5
 8015e0a:	f7ea f9f1 	bl	80001f0 <__aeabi_dsub>
 8015e0e:	e72c      	b.n	8015c6a <atan+0x2a>
 8015e10:	ee10 0a10 	vmov	r0, s0
 8015e14:	4b53      	ldr	r3, [pc, #332]	; (8015f64 <atan+0x324>)
 8015e16:	2200      	movs	r2, #0
 8015e18:	4629      	mov	r1, r5
 8015e1a:	f7ea f9e9 	bl	80001f0 <__aeabi_dsub>
 8015e1e:	4b51      	ldr	r3, [pc, #324]	; (8015f64 <atan+0x324>)
 8015e20:	4606      	mov	r6, r0
 8015e22:	460f      	mov	r7, r1
 8015e24:	2200      	movs	r2, #0
 8015e26:	4620      	mov	r0, r4
 8015e28:	4629      	mov	r1, r5
 8015e2a:	f7ea f9e3 	bl	80001f4 <__adddf3>
 8015e2e:	4602      	mov	r2, r0
 8015e30:	460b      	mov	r3, r1
 8015e32:	4630      	mov	r0, r6
 8015e34:	4639      	mov	r1, r7
 8015e36:	f7ea fcbd 	bl	80007b4 <__aeabi_ddiv>
 8015e3a:	f04f 0a01 	mov.w	sl, #1
 8015e3e:	4604      	mov	r4, r0
 8015e40:	460d      	mov	r5, r1
 8015e42:	e764      	b.n	8015d0e <atan+0xce>
 8015e44:	4b49      	ldr	r3, [pc, #292]	; (8015f6c <atan+0x32c>)
 8015e46:	429e      	cmp	r6, r3
 8015e48:	da1d      	bge.n	8015e86 <atan+0x246>
 8015e4a:	ee10 0a10 	vmov	r0, s0
 8015e4e:	4b48      	ldr	r3, [pc, #288]	; (8015f70 <atan+0x330>)
 8015e50:	2200      	movs	r2, #0
 8015e52:	4629      	mov	r1, r5
 8015e54:	f7ea f9cc 	bl	80001f0 <__aeabi_dsub>
 8015e58:	4b45      	ldr	r3, [pc, #276]	; (8015f70 <atan+0x330>)
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	460f      	mov	r7, r1
 8015e5e:	2200      	movs	r2, #0
 8015e60:	4620      	mov	r0, r4
 8015e62:	4629      	mov	r1, r5
 8015e64:	f7ea fb7c 	bl	8000560 <__aeabi_dmul>
 8015e68:	4b3e      	ldr	r3, [pc, #248]	; (8015f64 <atan+0x324>)
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	f7ea f9c2 	bl	80001f4 <__adddf3>
 8015e70:	4602      	mov	r2, r0
 8015e72:	460b      	mov	r3, r1
 8015e74:	4630      	mov	r0, r6
 8015e76:	4639      	mov	r1, r7
 8015e78:	f7ea fc9c 	bl	80007b4 <__aeabi_ddiv>
 8015e7c:	f04f 0a02 	mov.w	sl, #2
 8015e80:	4604      	mov	r4, r0
 8015e82:	460d      	mov	r5, r1
 8015e84:	e743      	b.n	8015d0e <atan+0xce>
 8015e86:	462b      	mov	r3, r5
 8015e88:	ee10 2a10 	vmov	r2, s0
 8015e8c:	4939      	ldr	r1, [pc, #228]	; (8015f74 <atan+0x334>)
 8015e8e:	2000      	movs	r0, #0
 8015e90:	f7ea fc90 	bl	80007b4 <__aeabi_ddiv>
 8015e94:	f04f 0a03 	mov.w	sl, #3
 8015e98:	4604      	mov	r4, r0
 8015e9a:	460d      	mov	r5, r1
 8015e9c:	e737      	b.n	8015d0e <atan+0xce>
 8015e9e:	4b36      	ldr	r3, [pc, #216]	; (8015f78 <atan+0x338>)
 8015ea0:	4e36      	ldr	r6, [pc, #216]	; (8015f7c <atan+0x33c>)
 8015ea2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eaa:	f7ea f9a1 	bl	80001f0 <__aeabi_dsub>
 8015eae:	4622      	mov	r2, r4
 8015eb0:	462b      	mov	r3, r5
 8015eb2:	f7ea f99d 	bl	80001f0 <__aeabi_dsub>
 8015eb6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8015eba:	4602      	mov	r2, r0
 8015ebc:	460b      	mov	r3, r1
 8015ebe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015ec2:	f7ea f995 	bl	80001f0 <__aeabi_dsub>
 8015ec6:	f1bb 0f00 	cmp.w	fp, #0
 8015eca:	4604      	mov	r4, r0
 8015ecc:	460d      	mov	r5, r1
 8015ece:	f6bf aed6 	bge.w	8015c7e <atan+0x3e>
 8015ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ed6:	461d      	mov	r5, r3
 8015ed8:	e6d1      	b.n	8015c7e <atan+0x3e>
 8015eda:	a51d      	add	r5, pc, #116	; (adr r5, 8015f50 <atan+0x310>)
 8015edc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015ee0:	e6cd      	b.n	8015c7e <atan+0x3e>
 8015ee2:	bf00      	nop
 8015ee4:	f3af 8000 	nop.w
 8015ee8:	54442d18 	.word	0x54442d18
 8015eec:	bff921fb 	.word	0xbff921fb
 8015ef0:	8800759c 	.word	0x8800759c
 8015ef4:	7e37e43c 	.word	0x7e37e43c
 8015ef8:	e322da11 	.word	0xe322da11
 8015efc:	3f90ad3a 	.word	0x3f90ad3a
 8015f00:	24760deb 	.word	0x24760deb
 8015f04:	3fa97b4b 	.word	0x3fa97b4b
 8015f08:	a0d03d51 	.word	0xa0d03d51
 8015f0c:	3fb10d66 	.word	0x3fb10d66
 8015f10:	c54c206e 	.word	0xc54c206e
 8015f14:	3fb745cd 	.word	0x3fb745cd
 8015f18:	920083ff 	.word	0x920083ff
 8015f1c:	3fc24924 	.word	0x3fc24924
 8015f20:	5555550d 	.word	0x5555550d
 8015f24:	3fd55555 	.word	0x3fd55555
 8015f28:	2c6a6c2f 	.word	0x2c6a6c2f
 8015f2c:	bfa2b444 	.word	0xbfa2b444
 8015f30:	52defd9a 	.word	0x52defd9a
 8015f34:	3fadde2d 	.word	0x3fadde2d
 8015f38:	af749a6d 	.word	0xaf749a6d
 8015f3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8015f40:	fe231671 	.word	0xfe231671
 8015f44:	3fbc71c6 	.word	0x3fbc71c6
 8015f48:	9998ebc4 	.word	0x9998ebc4
 8015f4c:	3fc99999 	.word	0x3fc99999
 8015f50:	54442d18 	.word	0x54442d18
 8015f54:	3ff921fb 	.word	0x3ff921fb
 8015f58:	440fffff 	.word	0x440fffff
 8015f5c:	7ff00000 	.word	0x7ff00000
 8015f60:	3fdbffff 	.word	0x3fdbffff
 8015f64:	3ff00000 	.word	0x3ff00000
 8015f68:	3ff2ffff 	.word	0x3ff2ffff
 8015f6c:	40038000 	.word	0x40038000
 8015f70:	3ff80000 	.word	0x3ff80000
 8015f74:	bff00000 	.word	0xbff00000
 8015f78:	080169d0 	.word	0x080169d0
 8015f7c:	080169b0 	.word	0x080169b0

08015f80 <fabs>:
 8015f80:	ec51 0b10 	vmov	r0, r1, d0
 8015f84:	ee10 2a10 	vmov	r2, s0
 8015f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f8c:	ec43 2b10 	vmov	d0, r2, r3
 8015f90:	4770      	bx	lr
	...

08015f94 <_init>:
 8015f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f96:	bf00      	nop
 8015f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f9a:	bc08      	pop	{r3}
 8015f9c:	469e      	mov	lr, r3
 8015f9e:	4770      	bx	lr

08015fa0 <_fini>:
 8015fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fa2:	bf00      	nop
 8015fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fa6:	bc08      	pop	{r3}
 8015fa8:	469e      	mov	lr, r3
 8015faa:	4770      	bx	lr
 8015fac:	0000      	movs	r0, r0
	...

08015fb0 <__system_Reset_veneer>:
 8015fb0:	f85f f000 	ldr.w	pc, [pc]	; 8015fb4 <__system_Reset_veneer+0x4>
 8015fb4:	20000241 	.word	0x20000241

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 08002099 08002109     ......... ...!..
20000040:	08001fc5 00010065 00000030 08001f31     ....e...0...1...
20000050:	08001f75 08001eb5 00010066 00000000     u.......f.......
	...
2000006c:	006627d9 0000000e 0800aae5 0800ac21     .'f.........!...
2000007c:	0800a90d 006627da 00000006 0800920d     .....'f.........
2000008c:	080092b1 08009105 006627db 0000000a     .........'f.....
2000009c:	0800988d 08009989 0800971d 006627dc     .............'f.
200000ac:	00000003 08001cc1 08001d29 08001c11     ........).......
200000bc:	006627dd 0000000d 0800a1f1 0800a2e9     .'f.............
200000cc:	0800a031 00010067 00000004 080018b9     1...g...........
200000dc:	08001931 080017e5                       1.......

200000e4 <SystemCoreClock>:
200000e4:	00f42400                                .$..

200000e8 <uwTickPrio>:
200000e8:	00000010                                ....

200000ec <uwTickFreq>:
200000ec:	00000001                                ....

200000f0 <USBD_CDC_DeviceQualifierDesc>:
200000f0:	0200060a 40000000 00000001              .......@....

200000fc <USBD_CDC>:
200000fc:	08012e3d 0801302d 08013131 00000000     =...-0..11......
2000010c:	08013457 080132e9 080133e7 00000000     W4...2...3......
	...
20000124:	0801353d 080134cd 080135ad 0801361d     =5...4...5...6..

20000134 <USBD_CDC_CfgDesc>:
20000134:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000144:	24050001 05011000 01000124 02022404     ...$....$....$..
20000154:	00062405 82050701 10000803 00010409     .$..............
20000164:	00000a02 01050700 00004002 02810507     .........@......
20000174:	                                         @..

20000177 <CDCInEpAdd>:
20000177:	                                         .

20000178 <CDCOutEpAdd>:
20000178:	                                         .

20000179 <CDCCmdEpAdd>:
20000179:	                                         ...

2000017c <USBD_Interface_fops_FS>:
2000017c:	08014e2d 08014e55 08014e65 08014f21     -N..UN..eN..!O..
2000018c:	08014fc5                                .O..

20000190 <FS_Desc>:
20000190:	08014fe9 0801500d 0801506d 08015031     .O...P..mP..1P..
200001a0:	08015095 080150b9 080150f5              .P...P...P..

200001ac <USBD_FS_DeviceDesc>:
200001ac:	02000112 40000202 57400483 02010200     .......@..@W....
200001bc:	00000103                                ....

200001c0 <USBD_LangIDDesc>:
200001c0:	04090304                                ....

200001c4 <USBD_StringSerial>:
200001c4:	0000031a 00000000 00000000 00000000     ................
	...

200001e0 <_impure_data>:
200001e0:	00000000 20002cdc 20002d44 20002dac     .....,. D-. .-. 
	...

2000022c <_impure_ptr>:
2000022c:	200001e0                                ... 

20000230 <one>:
20000230:	00000000 3ff00000                       .......?

20000238 <tiny>:
20000238:	c2f8f359 01a56e1f                       Y....n..

20000240 <system_Reset>:

__ramfunc void system_Reset()
{
20000240:	b480      	push	{r7}
20000242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20000244:	b672      	cpsid	i
}
20000246:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000248:	4b05      	ldr	r3, [pc, #20]	; (20000260 <system_Reset+0x20>)
2000024a:	68db      	ldr	r3, [r3, #12]
2000024c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20000250:	4903      	ldr	r1, [pc, #12]	; (20000260 <system_Reset+0x20>)
20000252:	4b04      	ldr	r3, [pc, #16]	; (20000264 <system_Reset+0x24>)
20000254:	4313      	orrs	r3, r2
20000256:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20000258:	f3bf 8f4f 	dsb	sy
}
2000025c:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
2000025e:	e7fe      	b.n	2000025e <system_Reset+0x1e>
20000260:	e000ed00 	.word	0xe000ed00
20000264:	05fa0004 	.word	0x05fa0004
