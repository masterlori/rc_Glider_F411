
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a820  0800a820  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800a820  0800a820  0001a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a828  0800a828  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a82c  0800a82c  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800a830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000009b0  20000104  0800a934  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ab4  0800a934  00020ab4  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00030000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00030000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019a70  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f28  00000000  00000000  00039ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015e8  00000000  00000000  0003dad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001478  00000000  00000000  0003f0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001abb7  00000000  00000000  00040530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cdf0  00000000  00000000  0005b0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009fb4b  00000000  00000000  00077ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00117a22  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005cc0  00000000  00000000  00117a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009f24 	.word	0x08009f24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08009f24 	.word	0x08009f24

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e010      	b.n	8000b88 <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <autopilot_Timer+0x44>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <autopilot_Timer+0x44>)
 8000b76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b7a:	3a01      	subs	r2, #1
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <autopilot_Timer+0x44>)
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	3301      	adds	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d9eb      	bls.n	8000b66 <autopilot_Timer+0xe>
		}
	}

	return;
 8000b8e:	bf00      	nop
}
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000120 	.word	0x20000120

08000ba0 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <autopilot_InitTask+0x84>)
 8000ba6:	22ff      	movs	r2, #255	; 0xff
 8000ba8:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <autopilot_InitTask+0x88>)
 8000bac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bb0:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <autopilot_InitTask+0x88>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	755a      	strb	r2, [r3, #21]
	autopilot_info.astart_elevator_en = 0;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <autopilot_InitTask+0x88>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	761a      	strb	r2, [r3, #24]
	autopilot_info.astart_motor_en = 0;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <autopilot_InitTask+0x88>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_val = -80;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <autopilot_InitTask+0x88>)
 8000bc6:	22b0      	movs	r2, #176	; 0xb0
 8000bc8:	769a      	strb	r2, [r3, #26]
	autopilot_info.astart_motor_val = 90;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <autopilot_InitTask+0x88>)
 8000bcc:	225a      	movs	r2, #90	; 0x5a
 8000bce:	76da      	strb	r2, [r3, #27]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bd8:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <autopilot_InitTask+0x90>)
 8000bda:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <autopilot_InitTask+0x94>)
 8000bec:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <autopilot_InitTask+0x98>)
 8000bf2:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <autopilot_InitTask+0x9c>)
 8000c04:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <autopilot_InitTask+0xa0>)
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <autopilot_InitTask+0x8c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c

	return;
 8000c18:	bf00      	nop
}
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000017c 	.word	0x2000017c
 8000c28:	20000120 	.word	0x20000120
 8000c2c:	2000014c 	.word	0x2000014c
 8000c30:	08000d31 	.word	0x08000d31
 8000c34:	08000d3f 	.word	0x08000d3f
 8000c38:	08000d4d 	.word	0x08000d4d
 8000c3c:	08000fdd 	.word	0x08000fdd
 8000c40:	08000ffd 	.word	0x08000ffd

08000c44 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <autopilot_Task+0x54>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d107      	bne.n	8000c62 <autopilot_Task+0x1e>
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <autopilot_Task+0x58>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f822 	bl	8000ca4 <autopilot_gotoState>
 8000c60:	e017      	b.n	8000c92 <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <autopilot_Task+0x54>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d813      	bhi.n	8000c94 <autopilot_Task+0x50>
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <autopilot_Task+0x54>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <autopilot_Task+0x5c>)
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4413      	add	r3, r2
 8000c78:	3304      	adds	r3, #4
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <autopilot_Task+0x50>
			autopilot_states[_cur_ap_state].main_func();
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <autopilot_Task+0x54>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <autopilot_Task+0x5c>)
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4798      	blx	r3
		}
	}


	return;
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
}
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000017c 	.word	0x2000017c
 8000c9c:	20000120 	.word	0x20000120
 8000ca0:	2000014c 	.word	0x2000014c

08000ca4 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d833      	bhi.n	8000d1c <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <autopilot_gotoState+0x80>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d812      	bhi.n	8000ce4 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <autopilot_gotoState+0x80>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <autopilot_gotoState+0x84>)
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	3308      	adds	r3, #8
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d008      	beq.n	8000ce4 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <autopilot_gotoState+0x80>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <autopilot_gotoState+0x84>)
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	4413      	add	r3, r2
 8000cde:	3308      	adds	r3, #8
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <autopilot_gotoState+0x84>)
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	4413      	add	r3, r2
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <autopilot_gotoState+0x84>)
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <autopilot_gotoState+0x84>)
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	330c      	adds	r3, #12
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <autopilot_gotoState+0x88>)
 8000d0c:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <autopilot_gotoState+0x80>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <autopilot_gotoState+0x88>)
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	7513      	strb	r3, [r2, #20]

	return;
 8000d1a:	e000      	b.n	8000d1e <autopilot_gotoState+0x7a>
		return;
 8000d1c:	bf00      	nop
}
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000017c 	.word	0x2000017c
 8000d28:	2000014c 	.word	0x2000014c
 8000d2c:	20000120 	.word	0x20000120

08000d30 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	autopilot_gotoState(AP_STATE_FULLMANUAL);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff ffb5 	bl	8000ca4 <autopilot_gotoState>

	return;
 8000d3a:	bf00      	nop
}
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0


	return;
 8000d42:	bf00      	nop
}
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 8000d52:	4b9a      	ldr	r3, [pc, #616]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8091 	bne.w	8000e7e <autopilot_stateFullManMain+0x132>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 8000d5c:	4b98      	ldr	r3, [pc, #608]	; (8000fc0 <autopilot_stateFullManMain+0x274>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4a98      	ldr	r2, [pc, #608]	; (8000fc4 <autopilot_stateFullManMain+0x278>)
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4413      	add	r3, r2
 8000d68:	330c      	adds	r3, #12
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a93      	ldr	r2, [pc, #588]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000d6e:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 8000d70:	4b95      	ldr	r3, [pc, #596]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000d72:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d17d      	bne.n	8000e78 <autopilot_stateFullManMain+0x12c>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 8000d7c:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000d7e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	2000      	movs	r0, #0
 8000d88:	f004 fa1e 	bl	80051c8 <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 8000d8c:	4b8b      	ldr	r3, [pc, #556]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000d8e:	7e1b      	ldrb	r3, [r3, #24]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d108      	bne.n	8000da8 <autopilot_stateFullManMain+0x5c>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 8000d96:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000d98:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	f004 fa11 	bl	80051c8 <servo_setPercnet>
 8000da6:	e013      	b.n	8000dd0 <autopilot_stateFullManMain+0x84>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 8000da8:	4b84      	ldr	r3, [pc, #528]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000daa:	7e9b      	ldrb	r3, [r3, #26]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	2001      	movs	r0, #1
 8000db2:	f004 fa09 	bl	80051c8 <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 8000db6:	4b84      	ldr	r3, [pc, #528]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000db8:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bfb8      	it	lt
 8000dc2:	425b      	neglt	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b32      	cmp	r3, #50	; 0x32
 8000dc8:	d902      	bls.n	8000dd0 <autopilot_stateFullManMain+0x84>
					autopilot_info.astart_elevator_en = 0;
 8000dca:	4b7c      	ldr	r3, [pc, #496]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8000dd0:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000dd2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	dc04      	bgt.n	8000de6 <autopilot_stateFullManMain+0x9a>
 8000ddc:	4b77      	ldr	r3, [pc, #476]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000dde:	7e5b      	ldrb	r3, [r3, #25]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d133      	bne.n	8000e4e <autopilot_stateFullManMain+0x102>
 8000de6:	4b75      	ldr	r3, [pc, #468]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000de8:	7d5b      	ldrb	r3, [r3, #21]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d12e      	bne.n	8000e4e <autopilot_stateFullManMain+0x102>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 8000df0:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000df2:	7e5b      	ldrb	r3, [r3, #25]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10e      	bne.n	8000e18 <autopilot_stateFullManMain+0xcc>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 8000dfa:	4b73      	ldr	r3, [pc, #460]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000dfc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	f000 f907 	bl	8001020 <autopilot_expRunningAverage>
 8000e12:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 8000e16:	e021      	b.n	8000e5c <autopilot_stateFullManMain+0x110>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000e1a:	7edb      	ldrb	r3, [r3, #27]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e26:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2a:	f000 f8f9 	bl	8001020 <autopilot_expRunningAverage>
 8000e2e:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 8000e32:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000e34:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bfb8      	it	lt
 8000e3e:	425b      	neglt	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b32      	cmp	r3, #50	; 0x32
 8000e44:	d90a      	bls.n	8000e5c <autopilot_stateFullManMain+0x110>
						autopilot_info.astart_motor_en = 0;
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	765a      	strb	r2, [r3, #25]
				if( autopilot_info.astart_motor_en == 0 ){
 8000e4c:	e006      	b.n	8000e5c <autopilot_stateFullManMain+0x110>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 8000e4e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8000fcc <autopilot_stateFullManMain+0x280>
 8000e52:	f000 f8e5 	bl	8001020 <autopilot_expRunningAverage>
 8000e56:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e5a:	e000      	b.n	8000e5e <autopilot_stateFullManMain+0x112>
				if( autopilot_info.astart_motor_en == 0 ){
 8000e5c:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 8000e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e66:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e6a:	793b      	ldrb	r3, [r7, #4]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2000      	movs	r0, #0
 8000e72:	f003 fa99 	bl	80043a8 <motor_setTorque>
 8000e76:	e002      	b.n	8000e7e <autopilot_stateFullManMain+0x132>

		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff ff13 	bl	8000ca4 <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000e80:	7d5b      	ldrb	r3, [r3, #21]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d131      	bne.n	8000eec <autopilot_stateFullManMain+0x1a0>
	{
		if(rc_info.connected == 1)
 8000e88:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000e8a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d12b      	bne.n	8000eec <autopilot_stateFullManMain+0x1a0>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8000e94:	4b4e      	ldr	r3, [pc, #312]	; (8000fd0 <autopilot_stateFullManMain+0x284>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10e      	bne.n	8000eba <autopilot_stateFullManMain+0x16e>
			{
				if( rc_info.axis_l_x < -70 )
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000e9e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8000ea8:	da20      	bge.n	8000eec <autopilot_stateFullManMain+0x1a0>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000eac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000eb0:	609a      	str	r2, [r3, #8]
					_ap_arm_st = 1;
 8000eb2:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <autopilot_stateFullManMain+0x284>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e018      	b.n	8000eec <autopilot_stateFullManMain+0x1a0>
				}
			}
			else if( _ap_arm_st == 1 )
 8000eba:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <autopilot_stateFullManMain+0x284>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d114      	bne.n	8000eec <autopilot_stateFullManMain+0x1a0>
			{
				if( rc_info.axis_l_x >= -70 ){
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000ec4:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8000ece:	db03      	blt.n	8000ed8 <autopilot_stateFullManMain+0x18c>
					_ap_arm_st = 0;
 8000ed0:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <autopilot_stateFullManMain+0x284>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e009      	b.n	8000eec <autopilot_stateFullManMain+0x1a0>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <autopilot_stateFullManMain+0x1a0>
					{
						autopilot_info.armed_flag = 1;
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	755a      	strb	r2, [r3, #21]
						_ap_arm_st = 0;
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <autopilot_stateFullManMain+0x284>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000eee:	7e1b      	ldrb	r3, [r3, #24]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d129      	bne.n	8000f4a <autopilot_stateFullManMain+0x1fe>
	{
		if( astart_elev_state == 0 )
 8000ef6:	4b37      	ldr	r3, [pc, #220]	; (8000fd4 <autopilot_stateFullManMain+0x288>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10d      	bne.n	8000f1a <autopilot_stateFullManMain+0x1ce>
		{
			if( rc_info.button_r == 1 )
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000f00:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d11f      	bne.n	8000f4a <autopilot_stateFullManMain+0x1fe>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000f0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f10:	611a      	str	r2, [r3, #16]
				astart_elev_state = 1;
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <autopilot_stateFullManMain+0x288>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e017      	b.n	8000f4a <autopilot_stateFullManMain+0x1fe>
			}
		}
		else if( astart_elev_state == 1 )
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <autopilot_stateFullManMain+0x288>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d113      	bne.n	8000f4a <autopilot_stateFullManMain+0x1fe>
		{
			if( rc_info.button_r != 1 ){
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000f24:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d003      	beq.n	8000f36 <autopilot_stateFullManMain+0x1ea>
				astart_elev_state = 0;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <autopilot_stateFullManMain+0x288>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e009      	b.n	8000f4a <autopilot_stateFullManMain+0x1fe>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <autopilot_stateFullManMain+0x1fe>
				{
					autopilot_info.astart_elevator_en = 1;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	761a      	strb	r2, [r3, #24]
					astart_elev_state = 0;
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <autopilot_stateFullManMain+0x288>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000f4c:	7e5b      	ldrb	r3, [r3, #25]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d12f      	bne.n	8000fb4 <autopilot_stateFullManMain+0x268>
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000f56:	7d5b      	ldrb	r3, [r3, #21]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d12a      	bne.n	8000fb4 <autopilot_stateFullManMain+0x268>
	{
		if( astart_mot_state == 0 )
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <autopilot_stateFullManMain+0x28c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <autopilot_stateFullManMain+0x236>
		{
			if( rc_info.button_l == 1 )
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000f68:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d120      	bne.n	8000fb4 <autopilot_stateFullManMain+0x268>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000f74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f78:	60da      	str	r2, [r3, #12]
				astart_mot_state = 1;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <autopilot_stateFullManMain+0x28c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8000f80:	e018      	b.n	8000fb4 <autopilot_stateFullManMain+0x268>
		else if( astart_mot_state == 1 )
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <autopilot_stateFullManMain+0x28c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d114      	bne.n	8000fb4 <autopilot_stateFullManMain+0x268>
			if( rc_info.button_l != 1 ){
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <autopilot_stateFullManMain+0x27c>)
 8000f8c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d003      	beq.n	8000f9e <autopilot_stateFullManMain+0x252>
				astart_mot_state = 0;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <autopilot_stateFullManMain+0x28c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	return;
 8000f9c:	e00a      	b.n	8000fb4 <autopilot_stateFullManMain+0x268>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <autopilot_stateFullManMain+0x268>
					autopilot_info.astart_motor_en = 1;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <autopilot_stateFullManMain+0x270>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	765a      	strb	r2, [r3, #25]
					astart_mot_state = 0;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <autopilot_stateFullManMain+0x28c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
	return;
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
}
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000120 	.word	0x20000120
 8000fc0:	2000017c 	.word	0x2000017c
 8000fc4:	2000014c 	.word	0x2000014c
 8000fc8:	20000884 	.word	0x20000884
 8000fcc:	00000000 	.word	0x00000000
 8000fd0:	20000148 	.word	0x20000148
 8000fd4:	2000017d 	.word	0x2000017d
 8000fd8:	2000017e 	.word	0x2000017e

08000fdc <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f004 f8f0 	bl	80051c8 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2001      	movs	r0, #1
 8000fec:	f004 f8ec 	bl	80051c8 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f003 f9d8 	bl	80043a8 <motor_setTorque>

	return;
 8000ff8:	bf00      	nop
}
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <autopilot_stateFailsafeMain+0x1c>)
 8001002:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d103      	bne.n	8001014 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff fe49 	bl	8000ca4 <autopilot_gotoState>
	}
	return;
 8001012:	bf00      	nop
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000884 	.word	0x20000884
 800101c:	00000000 	.word	0x00000000

08001020 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 800102a:	edd7 7a01 	vldr	s15, [r7, #4]
 800102e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	d104      	bne.n	8001042 <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <autopilot_expRunningAverage+0x88>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e025      	b.n	800108e <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <autopilot_expRunningAverage+0x88>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fb5c 	bl	8000704 <__aeabi_f2d>
 800104c:	4604      	mov	r4, r0
 800104e:	460d      	mov	r5, r1
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <autopilot_expRunningAverage+0x88>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ed97 7a01 	vldr	s14, [r7, #4]
 800105a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fb4f 	bl	8000704 <__aeabi_f2d>
 8001066:	a30e      	add	r3, pc, #56	; (adr r3, 80010a0 <autopilot_expRunningAverage+0x80>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff f8bc 	bl	80001e8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff f9e6 	bl	8000448 <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fb96 	bl	80007b4 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <autopilot_expRunningAverage+0x88>)
 800108c:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <autopilot_expRunningAverage+0x88>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	ee07 3a90 	vmov	s15, r3
}
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bdb0      	pop	{r4, r5, r7, pc}
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	3fb99999 	.word	0x3fb99999
 80010a8:	20000180 	.word	0x20000180

080010ac <cfg_NodeApVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <cfg_NodeApVarProp+0x1a>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d003      	beq.n	80010cc <cfg_NodeApVarProp+0x20>
 80010c4:	e005      	b.n	80010d2 <cfg_NodeApVarProp+0x26>
	{
		case AUTOPILOT_STATE:	str = "State"; break;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <cfg_NodeApVarProp+0x88>)
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e004      	b.n	80010d6 <cfg_NodeApVarProp+0x2a>
		case AUTOPILOT_ARMED:	str = "Armed"; break;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <cfg_NodeApVarProp+0x8c>)
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e001      	b.n	80010d6 <cfg_NodeApVarProp+0x2a>
		default: return CFG_ERROR_VARID;
 80010d2:	2302      	movs	r3, #2
 80010d4:	e027      	b.n	8001126 <cfg_NodeApVarProp+0x7a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00f      	beq.n	80010fc <cfg_NodeApVarProp+0x50>
 80010dc:	e007      	b.n	80010ee <cfg_NodeApVarProp+0x42>
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	1c53      	adds	r3, r2, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c59      	adds	r1, r3, #1
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	7812      	ldrb	r2, [r2, #0]
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f3      	bne.n	80010de <cfg_NodeApVarProp+0x32>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00f      	beq.n	8001122 <cfg_NodeApVarProp+0x76>
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <cfg_NodeApVarProp+0x62>
 8001108:	2b01      	cmp	r3, #1
 800110a:	d004      	beq.n	8001116 <cfg_NodeApVarProp+0x6a>
 800110c:	e007      	b.n	800111e <cfg_NodeApVarProp+0x72>
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2202      	movs	r2, #2
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	e006      	b.n	8001124 <cfg_NodeApVarProp+0x78>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2203      	movs	r2, #3
 800111a:	801a      	strh	r2, [r3, #0]
 800111c:	e002      	b.n	8001124 <cfg_NodeApVarProp+0x78>
		default: return CFG_ERROR_VARID;
 800111e:	2302      	movs	r3, #2
 8001120:	e001      	b.n	8001126 <cfg_NodeApVarProp+0x7a>
	}
	return CFG_ERROR_NONE;
 8001122:	bf00      	nop
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	08009f48 	.word	0x08009f48
 8001138:	08009f50 	.word	0x08009f50

0800113c <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d015      	beq.n	800117a <cfg_NodeApVarGet+0x3e>
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <cfg_NodeApVarGet+0x1e>
 8001154:	2b01      	cmp	r3, #1
 8001156:	d007      	beq.n	8001168 <cfg_NodeApVarGet+0x2c>
 8001158:	e00d      	b.n	8001176 <cfg_NodeApVarGet+0x3a>
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <cfg_NodeApVarGet+0x50>)
 800115c:	7d1b      	ldrb	r3, [r3, #20]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e009      	b.n	800117c <cfg_NodeApVarGet+0x40>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <cfg_NodeApVarGet+0x50>)
 800116a:	7d5b      	ldrb	r3, [r3, #21]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	461a      	mov	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e002      	b.n	800117c <cfg_NodeApVarGet+0x40>
		default: return CFG_ERROR_VARID;
 8001176:	2302      	movs	r3, #2
 8001178:	e001      	b.n	800117e <cfg_NodeApVarGet+0x42>
	}
	return CFG_ERROR_NONE;
 800117a:	bf00      	nop
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000120 	.word	0x20000120

08001190 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d013      	beq.n	80011ca <cfg_NodeApVarSet+0x3a>
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <cfg_NodeApVarSet+0x1e>
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d006      	beq.n	80011ba <cfg_NodeApVarSet+0x2a>
 80011ac:	e00b      	b.n	80011c6 <cfg_NodeApVarSet+0x36>
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <cfg_NodeApVarSet+0x4c>)
 80011b6:	751a      	strb	r2, [r3, #20]
 80011b8:	e008      	b.n	80011cc <cfg_NodeApVarSet+0x3c>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <cfg_NodeApVarSet+0x4c>)
 80011c2:	755a      	strb	r2, [r3, #21]
 80011c4:	e002      	b.n	80011cc <cfg_NodeApVarSet+0x3c>
		default: return CFG_ERROR_VARID;
 80011c6:	2302      	movs	r3, #2
 80011c8:	e001      	b.n	80011ce <cfg_NodeApVarSet+0x3e>
	}
	return CFG_ERROR_NONE;
 80011ca:	bf00      	nop
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000120 	.word	0x20000120

080011e0 <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <battery_Timer+0x34>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <battery_Timer+0x34>)
 80011f2:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <battery_Timer+0x38>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <battery_Timer+0x28>
		battery_info.timer--;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <battery_Timer+0x38>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <battery_Timer+0x38>)
 8001204:	6013      	str	r3, [r2, #0]
	}

	return;
 8001206:	bf00      	nop
 8001208:	bf00      	nop
}
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200001b0 	.word	0x200001b0
 8001218:	20000184 	.word	0x20000184

0800121c <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b63      	cmp	r3, #99	; 0x63
 8001228:	d801      	bhi.n	800122e <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <battery_InitTask+0x34>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <battery_InitTask+0x34>)
 8001236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800123a:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <battery_InitTask+0x34>)
 800123e:	2201      	movs	r2, #1
 8001240:	711a      	strb	r2, [r3, #4]

	return;
 8001242:	bf00      	nop
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000184 	.word	0x20000184

08001254 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <battery_Task+0xd8>)
 800125c:	7b5b      	ldrb	r3, [r3, #13]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d15e      	bne.n	8001322 <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 8001264:	4b31      	ldr	r3, [pc, #196]	; (800132c <battery_Task+0xd8>)
 8001266:	2200      	movs	r2, #0
 8001268:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <battery_Task+0xd8>)
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d109      	bne.n	8001288 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <battery_Task+0xd8>)
 8001276:	89db      	ldrh	r3, [r3, #14]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f858 	bl	8001330 <battery_filterInit>
			battery_info.init_flag = 0;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <battery_Task+0xd8>)
 8001282:	2200      	movs	r2, #0
 8001284:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 8001286:	e04c      	b.n	8001322 <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <battery_Task+0xd8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d148      	bne.n	8001322 <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <battery_Task+0xd8>)
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	4a25      	ldr	r2, [pc, #148]	; (800132c <battery_Task+0xd8>)
 8001296:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <battery_Task+0xd8>)
 800129a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3301      	adds	r3, #1
 80012a2:	425a      	negs	r2, r3
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	f002 0207 	and.w	r2, r2, #7
 80012ac:	bf58      	it	pl
 80012ae:	4253      	negpl	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <battery_Task+0xd8>)
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <battery_Task+0xd8>)
 80012ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <battery_Task+0xd8>)
 80012c4:	89db      	ldrh	r3, [r3, #14]
 80012c6:	b299      	uxth	r1, r3
 80012c8:	4a18      	ldr	r2, [pc, #96]	; (800132c <battery_Task+0xd8>)
 80012ca:	f100 0308 	add.w	r3, r0, #8
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	460a      	mov	r2, r1
 80012d4:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80012da:	2300      	movs	r3, #0
 80012dc:	70fb      	strb	r3, [r7, #3]
 80012de:	e00d      	b.n	80012fc <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <battery_Task+0xd8>)
 80012e4:	3308      	adds	r3, #8
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	3301      	adds	r3, #1
 80012fa:	70fb      	strb	r3, [r7, #3]
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	2b07      	cmp	r3, #7
 8001300:	d9ee      	bls.n	80012e0 <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <battery_Task+0xd8>)
 800130a:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <battery_Task+0xd8>)
 800130e:	8a1b      	ldrh	r3, [r3, #16]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f838 	bl	8001388 <battery_calcPerc>
 8001318:	4603      	mov	r3, r0
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <battery_Task+0xd8>)
 800131e:	749a      	strb	r2, [r3, #18]
	return;
 8001320:	bf00      	nop
 8001322:	bf00      	nop
}
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000184 	.word	0x20000184

08001330 <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e009      	b.n	8001354 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <battery_filterInit+0x54>)
 8001344:	3308      	adds	r3, #8
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	3301      	adds	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d9f2      	bls.n	8001340 <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <battery_filterInit+0x54>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <battery_filterInit+0x54>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <battery_filterInit+0x54>)
 800136a:	8a1b      	ldrh	r3, [r3, #16]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f80a 	bl	8001388 <battery_calcPerc>
 8001374:	4603      	mov	r3, r0
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <battery_filterInit+0x54>)
 800137a:	749a      	strb	r2, [r3, #18]

	return;
 800137c:	bf00      	nop
}
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000184 	.word	0x20000184

08001388 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <battery_calcPerc+0xb0>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d802      	bhi.n	80013aa <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <battery_calcPerc+0xb0>)
 80013a6:	885b      	ldrh	r3, [r3, #2]
 80013a8:	e041      	b.n	800142e <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <battery_calcPerc+0xb0>)
 80013ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80013ae:	88fa      	ldrh	r2, [r7, #6]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d302      	bcc.n	80013ba <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <battery_calcPerc+0xb0>)
 80013b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013b8:	e039      	b.n	800142e <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e011      	b.n	80013e4 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <battery_calcPerc+0xb0>)
 80013c4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d307      	bcc.n	80013de <battery_calcPerc+0x56>
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <battery_calcPerc+0xb0>)
 80013d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d906      	bls.n	80013ec <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	3301      	adds	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b0a      	cmp	r3, #10
 80013e8:	d9ea      	bls.n	80013c0 <battery_calcPerc+0x38>
 80013ea:	e000      	b.n	80013ee <battery_calcPerc+0x66>
		{
			break;
 80013ec:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80013ee:	88f8      	ldrh	r0, [r7, #6]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <battery_calcPerc+0xb0>)
 80013f4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80013f8:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <battery_calcPerc+0xb0>)
 8001400:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001404:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <battery_calcPerc+0xb0>)
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001410:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	3301      	adds	r3, #1
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <battery_calcPerc+0xb0>)
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	462b      	mov	r3, r5
 8001422:	4622      	mov	r2, r4
 8001424:	f000 f80a 	bl	800143c <analog_map>
 8001428:	4603      	mov	r3, r0
 800142a:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 800142c:	89bb      	ldrh	r3, [r7, #12]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bdb0      	pop	{r4, r5, r7, pc}
 8001436:	bf00      	nop
 8001438:	20000000 	.word	0x20000000

0800143c <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	1a8a      	subs	r2, r1, r2
 8001456:	fb03 f202 	mul.w	r2, r3, r2
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1acb      	subs	r3, r1, r3
 8001460:	fb92 f2f3 	sdiv	r2, r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4413      	add	r3, r2
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d00c      	beq.n	80014a2 <cfg_NodeBatVarProp+0x2e>
 8001488:	2b02      	cmp	r3, #2
 800148a:	dc0d      	bgt.n	80014a8 <cfg_NodeBatVarProp+0x34>
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <cfg_NodeBatVarProp+0x22>
 8001490:	2b01      	cmp	r3, #1
 8001492:	d003      	beq.n	800149c <cfg_NodeBatVarProp+0x28>
 8001494:	e008      	b.n	80014a8 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <cfg_NodeBatVarProp+0xa4>)
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e007      	b.n	80014ac <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <cfg_NodeBatVarProp+0xa8>)
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e004      	b.n	80014ac <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <cfg_NodeBatVarProp+0xac>)
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e001      	b.n	80014ac <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 80014a8:	2302      	movs	r3, #2
 80014aa:	e02f      	b.n	800150c <cfg_NodeBatVarProp+0x98>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00f      	beq.n	80014d2 <cfg_NodeBatVarProp+0x5e>
 80014b2:	e007      	b.n	80014c4 <cfg_NodeBatVarProp+0x50>
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	1c53      	adds	r3, r2, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1c59      	adds	r1, r3, #1
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f3      	bne.n	80014b4 <cfg_NodeBatVarProp+0x40>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d017      	beq.n	8001508 <cfg_NodeBatVarProp+0x94>
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d00e      	beq.n	80014fc <cfg_NodeBatVarProp+0x88>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	dc10      	bgt.n	8001504 <cfg_NodeBatVarProp+0x90>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <cfg_NodeBatVarProp+0x78>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d004      	beq.n	80014f4 <cfg_NodeBatVarProp+0x80>
 80014ea:	e00b      	b.n	8001504 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2212      	movs	r2, #18
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	e00a      	b.n	800150a <cfg_NodeBatVarProp+0x96>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2212      	movs	r2, #18
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	e006      	b.n	800150a <cfg_NodeBatVarProp+0x96>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2212      	movs	r2, #18
 8001500:	801a      	strh	r2, [r3, #0]
 8001502:	e002      	b.n	800150a <cfg_NodeBatVarProp+0x96>
		default: return CFG_ERROR_VARID;
 8001504:	2302      	movs	r3, #2
 8001506:	e001      	b.n	800150c <cfg_NodeBatVarProp+0x98>
	}
	return CFG_ERROR_NONE;
 8001508:	bf00      	nop
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	08009f58 	.word	0x08009f58
 800151c:	08009f60 	.word	0x08009f60
 8001520:	08009f74 	.word	0x08009f74

08001524 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d020      	beq.n	8001578 <cfg_NodeBatVarGet+0x54>
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d014      	beq.n	8001566 <cfg_NodeBatVarGet+0x42>
 800153c:	2b02      	cmp	r3, #2
 800153e:	dc19      	bgt.n	8001574 <cfg_NodeBatVarGet+0x50>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <cfg_NodeBatVarGet+0x26>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <cfg_NodeBatVarGet+0x34>
 8001548:	e014      	b.n	8001574 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <cfg_NodeBatVarGet+0x64>)
 800154c:	89db      	ldrh	r3, [r3, #14]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e010      	b.n	800157a <cfg_NodeBatVarGet+0x56>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <cfg_NodeBatVarGet+0x64>)
 800155a:	8a1b      	ldrh	r3, [r3, #16]
 800155c:	b29b      	uxth	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e009      	b.n	800157a <cfg_NodeBatVarGet+0x56>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <cfg_NodeBatVarGet+0x64>)
 8001568:	7c9b      	ldrb	r3, [r3, #18]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e002      	b.n	800157a <cfg_NodeBatVarGet+0x56>
		default: return CFG_ERROR_VARID;
 8001574:	2302      	movs	r3, #2
 8001576:	e001      	b.n	800157c <cfg_NodeBatVarGet+0x58>
	}
	return CFG_ERROR_NONE;
 8001578:	bf00      	nop
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	20000184 	.word	0x20000184

0800158c <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <cfg_NodeBatVarSet+0x28>
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d009      	beq.n	80015b8 <cfg_NodeBatVarSet+0x2c>
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	dc03      	bgt.n	80015b0 <cfg_NodeBatVarSet+0x24>
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <cfg_NodeBatVarSet+0x30>
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d007      	beq.n	80015c0 <cfg_NodeBatVarSet+0x34>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 80015b0:	2302      	movs	r3, #2
 80015b2:	e007      	b.n	80015c4 <cfg_NodeBatVarSet+0x38>
	}
	return CFG_ERROR_NONE;
 80015b4:	bf00      	nop
 80015b6:	e004      	b.n	80015c2 <cfg_NodeBatVarSet+0x36>
		case BAT_CHG_PERC:			break;
 80015b8:	bf00      	nop
 80015ba:	e002      	b.n	80015c2 <cfg_NodeBatVarSet+0x36>
		case BAT_VOLTAGE:			break;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <cfg_NodeBatVarSet+0x36>
		case BAT_FILTERED_VOLTAGE:	break;
 80015c0:	bf00      	nop
	return CFG_ERROR_NONE;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <cfg_GetNodeName>:
	{ NODE_AUTOPILOT, NODE_MAIN, AUTOPILOT_VAR_NUM, cfg_NodeApVarGet, cfg_NodeApVarSet, cfg_NodeApVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	f242 72dc 	movw	r2, #10204	; 0x27dc
 80015e2:	4293      	cmp	r3, r2
 80015e4:	dc38      	bgt.n	8001658 <cfg_GetNodeName+0x88>
 80015e6:	f242 72d9 	movw	r2, #10201	; 0x27d9
 80015ea:	4293      	cmp	r3, r2
 80015ec:	da0c      	bge.n	8001608 <cfg_GetNodeName+0x38>
 80015ee:	2b67      	cmp	r3, #103	; 0x67
 80015f0:	d02f      	beq.n	8001652 <cfg_GetNodeName+0x82>
 80015f2:	2b67      	cmp	r3, #103	; 0x67
 80015f4:	dc30      	bgt.n	8001658 <cfg_GetNodeName+0x88>
 80015f6:	2b66      	cmp	r3, #102	; 0x66
 80015f8:	d01c      	beq.n	8001634 <cfg_GetNodeName+0x64>
 80015fa:	2b66      	cmp	r3, #102	; 0x66
 80015fc:	dc2c      	bgt.n	8001658 <cfg_GetNodeName+0x88>
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d012      	beq.n	8001628 <cfg_GetNodeName+0x58>
 8001602:	2b65      	cmp	r3, #101	; 0x65
 8001604:	d013      	beq.n	800162e <cfg_GetNodeName+0x5e>
		case NODE_SERVO    	: str = "Servo"; break;
		case NODE_MOTOR    	: str = "Motor"; break;
		case NODE_RC    	: str = "RC"; break;
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		default:break;
 8001606:	e027      	b.n	8001658 <cfg_GetNodeName+0x88>
	switch( nodeid )
 8001608:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 800160c:	3b19      	subs	r3, #25
 800160e:	2b03      	cmp	r3, #3
 8001610:	d822      	bhi.n	8001658 <cfg_GetNodeName+0x88>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <cfg_GetNodeName+0x48>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	0800163b 	.word	0x0800163b
 800161c:	08001641 	.word	0x08001641
 8001620:	08001647 	.word	0x08001647
 8001624:	0800164d 	.word	0x0800164d
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <cfg_GetNodeName+0xc0>)
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e015      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_FW		: str = "Firmware"; break;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <cfg_GetNodeName+0xc4>)
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e012      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <cfg_GetNodeName+0xc8>)
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e00f      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_SERVO    	: str = "Servo"; break;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <cfg_GetNodeName+0xcc>)
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e00c      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_MOTOR    	: str = "Motor"; break;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <cfg_GetNodeName+0xd0>)
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	e009      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_RC    	: str = "RC"; break;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <cfg_GetNodeName+0xd4>)
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e006      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_BAT    	: str = "Battery"; break;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <cfg_GetNodeName+0xd8>)
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e003      	b.n	800165a <cfg_GetNodeName+0x8a>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <cfg_GetNodeName+0xdc>)
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e000      	b.n	800165a <cfg_GetNodeName+0x8a>
		default:break;
 8001658:	bf00      	nop
	}
	if( name )
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00f      	beq.n	8001680 <cfg_GetNodeName+0xb0>
	{
		while( *str ){
 8001660:	e007      	b.n	8001672 <cfg_GetNodeName+0xa2>
			*name++ = *str++;
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	1c53      	adds	r3, r2, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	701a      	strb	r2, [r3, #0]
		while( *str ){
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f3      	bne.n	8001662 <cfg_GetNodeName+0x92>
		}
		*name = 0;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	08009f80 	.word	0x08009f80
 8001694:	08009f8c 	.word	0x08009f8c
 8001698:	08009f98 	.word	0x08009f98
 800169c:	08009fac 	.word	0x08009fac
 80016a0:	08009fb4 	.word	0x08009fb4
 80016a4:	08009fbc 	.word	0x08009fbc
 80016a8:	08009fc0 	.word	0x08009fc0
 80016ac:	08009fc8 	.word	0x08009fc8

080016b0 <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <cfg_GetNode+0x58>)
 80016bc:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 80016be:	2300      	movs	r3, #0
 80016c0:	817b      	strh	r3, [r7, #10]
 80016c2:	e005      	b.n	80016d0 <cfg_GetNode+0x20>
 80016c4:	897b      	ldrh	r3, [r7, #10]
 80016c6:	3301      	adds	r3, #1
 80016c8:	817b      	strh	r3, [r7, #10]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3314      	adds	r3, #20
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <cfg_GetNode+0x5c>)
 80016d2:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	897a      	ldrh	r2, [r7, #10]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d204      	bcs.n	80016e8 <cfg_GetNode+0x38>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1ed      	bne.n	80016c4 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <cfg_GetNode+0x5c>)
 80016ea:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	897a      	ldrh	r2, [r7, #10]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <cfg_GetNode+0x4a>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	e000      	b.n	80016fc <cfg_GetNode+0x4c>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000030 	.word	0x20000030
 800170c:	200001b4 	.word	0x200001b4

08001710 <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <cfg_NodeFwVarProp+0x70>)
 8001726:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2214      	movs	r2, #20
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	e00d      	b.n	800174c <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <cfg_NodeFwVarProp+0x74>)
 8001738:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	801a      	strh	r2, [r3, #0]
 8001740:	e004      	b.n	800174c <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <cfg_NodeFwVarProp+0x78>)
 8001744:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2215      	movs	r2, #21
 800174a:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00f      	beq.n	8001772 <cfg_NodeFwVarProp+0x62>
 8001752:	e007      	b.n	8001764 <cfg_NodeFwVarProp+0x54>
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	1c53      	adds	r3, r2, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1c59      	adds	r1, r3, #1
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f3      	bne.n	8001754 <cfg_NodeFwVarProp+0x44>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	08009fd4 	.word	0x08009fd4
 8001784:	08009fdc 	.word	0x08009fdc
 8001788:	08009ff4 	.word	0x08009ff4

0800178c <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <cfg_NodeFwVarGet+0x40>)
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e00a      	b.n	80017bc <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d103      	bne.n	80017b4 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e003      	b.n	80017bc <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ba:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	3f666666 	.word	0x3f666666

080017d0 <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d106      	bne.n	80017f0 <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d012      	beq.n	8001810 <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 80017ea:	f001 f919 	bl	8002a20 <cfg_ClearFwBuf>
 80017ee:	e00f      	b.n	8001810 <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	2b2f      	cmp	r3, #47	; 0x2f
 80017f4:	d805      	bhi.n	8001802 <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 f928 	bl	8002a50 <cfg_WriteFwData>
 8001800:	e006      	b.n	8001810 <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b31      	cmp	r3, #49	; 0x31
 8001806:	d103      	bne.n	8001810 <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <cfg_NodeFwVarSet+0x4c>)
 800180a:	2201      	movs	r2, #1
 800180c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
	}
	return CFG_ERROR_NONE;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200001b4 	.word	0x200001b4

08001820 <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800182e:	89fb      	ldrh	r3, [r7, #14]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d817      	bhi.n	8001864 <cfg_NodeMainVarProp+0x44>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <cfg_NodeMainVarProp+0x1c>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001853 	.word	0x08001853
 8001844:	08001859 	.word	0x08001859
 8001848:	0800185f 	.word	0x0800185f
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <cfg_NodeMainVarProp+0xc4>)
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <cfg_NodeMainVarProp+0xc8>)
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e007      	b.n	8001868 <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <cfg_NodeMainVarProp+0xcc>)
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e004      	b.n	8001868 <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <cfg_NodeMainVarProp+0xd0>)
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e001      	b.n	8001868 <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8001864:	2302      	movs	r3, #2
 8001866:	e037      	b.n	80018d8 <cfg_NodeMainVarProp+0xb8>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <cfg_NodeMainVarProp+0x6e>
 800186e:	e007      	b.n	8001880 <cfg_NodeMainVarProp+0x60>
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	1c53      	adds	r3, r2, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1c59      	adds	r1, r3, #1
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f3      	bne.n	8001870 <cfg_NodeMainVarProp+0x50>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01f      	beq.n	80018d4 <cfg_NodeMainVarProp+0xb4>
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d81a      	bhi.n	80018d0 <cfg_NodeMainVarProp+0xb0>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <cfg_NodeMainVarProp+0x80>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018b9 	.word	0x080018b9
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018c9 	.word	0x080018c9
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2222      	movs	r2, #34	; 0x22
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	e00e      	b.n	80018d6 <cfg_NodeMainVarProp+0xb6>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2217      	movs	r2, #23
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	e00a      	b.n	80018d6 <cfg_NodeMainVarProp+0xb6>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2203      	movs	r2, #3
 80018c4:	801a      	strh	r2, [r3, #0]
 80018c6:	e006      	b.n	80018d6 <cfg_NodeMainVarProp+0xb6>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2203      	movs	r2, #3
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	e002      	b.n	80018d6 <cfg_NodeMainVarProp+0xb6>
		default: return CFG_ERROR_VARID;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e001      	b.n	80018d8 <cfg_NodeMainVarProp+0xb8>
	}
	return CFG_ERROR_NONE;
 80018d4:	bf00      	nop
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	08009ffc 	.word	0x08009ffc
 80018e8:	0800a008 	.word	0x0800a008
 80018ec:	0800a018 	.word	0x0800a018
 80018f0:	0800a028 	.word	0x0800a028

080018f4 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d026      	beq.n	8001954 <cfg_NodeMainVarGet+0x60>
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d821      	bhi.n	8001950 <cfg_NodeMainVarGet+0x5c>
 800190c:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <cfg_NodeMainVarGet+0x20>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001925 	.word	0x08001925
 8001918:	08001935 	.word	0x08001935
 800191c:	08001941 	.word	0x08001941
 8001920:	08001949 	.word	0x08001949
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <cfg_NodeMainVarGet+0x6c>)
 8001926:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e010      	b.n	8001956 <cfg_NodeMainVarGet+0x62>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 8001934:	f004 f9a2 	bl	8005c7c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e00a      	b.n	8001956 <cfg_NodeMainVarGet+0x62>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e006      	b.n	8001956 <cfg_NodeMainVarGet+0x62>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e002      	b.n	8001956 <cfg_NodeMainVarGet+0x62>
		default: return CFG_ERROR_VARID;
 8001950:	2302      	movs	r3, #2
 8001952:	e001      	b.n	8001958 <cfg_NodeMainVarGet+0x64>
	}
	return CFG_ERROR_NONE;
 8001954:	bf00      	nop
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200001b4 	.word	0x200001b4

08001964 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d025      	beq.n	80019c2 <cfg_NodeMainVarSet+0x5e>
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d820      	bhi.n	80019be <cfg_NodeMainVarSet+0x5a>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <cfg_NodeMainVarSet+0x20>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	08001995 	.word	0x08001995
 8001988:	080019c7 	.word	0x080019c7
 800198c:	080019a1 	.word	0x080019a1
 8001990:	080019af 	.word	0x080019af
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <cfg_NodeMainVarSet+0x78>)
 800199a:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
 800199e:	e017      	b.n	80019d0 <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <cfg_NodeMainVarSet+0x66>
 80019a8:	f000 fe64 	bl	8002674 <cfg_SaveSettings>
 80019ac:	e00d      	b.n	80019ca <cfg_NodeMainVarSet+0x66>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <cfg_NodeMainVarSet+0x6a>
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <cfg_NodeMainVarSet+0x7c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	705a      	strb	r2, [r3, #1]
 80019bc:	e007      	b.n	80019ce <cfg_NodeMainVarSet+0x6a>
		default: return CFG_ERROR_VARID;
 80019be:	2302      	movs	r3, #2
 80019c0:	e007      	b.n	80019d2 <cfg_NodeMainVarSet+0x6e>
	}
	return CFG_ERROR_NONE;
 80019c2:	bf00      	nop
 80019c4:	e004      	b.n	80019d0 <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <cfg_NodeMainVarSet+0x6c>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <cfg_NodeMainVarSet+0x6c>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 80019ce:	bf00      	nop
	return CFG_ERROR_NONE;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001b4 	.word	0x200001b4
 80019e0:	20000a7c 	.word	0x20000a7c

080019e4 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e023      	b.n	8001a3a <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <cfg_Timer+0x68>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d014      	beq.n	8001a34 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <cfg_Timer+0x68>)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	490a      	ldr	r1, [pc, #40]	; (8001a4c <cfg_Timer+0x68>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001a28:	fb00 f303 	mul.w	r3, r0, r3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a32:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0d8      	beq.n	80019f2 <cfg_Timer+0xe>
		}
	}

	return;
 8001a40:	bf00      	nop
}
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	200001b4 	.word	0x200001b4

08001a50 <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <cfg_InitTask+0xb8>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <cfg_InitTask+0xb8>)
 8001a60:	2208      	movs	r2, #8
 8001a62:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	e040      	b.n	8001aee <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <cfg_InitTask+0xb8>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <cfg_InitTask+0xb8>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	3302      	adds	r3, #2
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <cfg_InitTask+0xb8>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <cfg_InitTask+0xb8>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <cfg_InitTask+0xb8>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <cfg_InitTask+0xb8>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0bb      	beq.n	8001a6c <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <cfg_InitTask+0xb8>)
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <cfg_InitTask+0xbc>)
 8001af8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	cfg_LoadSettings();
 8001afc:	f000 fee2 	bl	80028c4 <cfg_LoadSettings>

	return;
 8001b00:	bf00      	nop
}
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200001b4 	.word	0x200001b4
 8001b0c:	08002e6d 	.word	0x08002e6d

08001b10 <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b099      	sub	sp, #100	; 0x64
 8001b14:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001b3e:	2300      	movs	r3, #0
 8001b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b42:	e3f3      	b.n	800232c <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 8001b44:	4ab8      	ldr	r2, [pc, #736]	; (8001e28 <cfg_Task+0x318>)
 8001b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b48:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d069      	beq.n	8001c30 <cfg_Task+0x120>
 8001b5c:	4ab2      	ldr	r2, [pc, #712]	; (8001e28 <cfg_Task+0x318>)
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d15d      	bne.n	8001c30 <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8001b74:	4aac      	ldr	r2, [pc, #688]	; (8001e28 <cfg_Task+0x318>)
 8001b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b78:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001b7c:	fb01 f303 	mul.w	r3, r1, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b86:	220a      	movs	r2, #10
 8001b88:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8001b8a:	4aa7      	ldr	r2, [pc, #668]	; (8001e28 <cfg_Task+0x318>)
 8001b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b0a      	cmp	r3, #10
 8001ba0:	d91c      	bls.n	8001bdc <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 8001ba2:	4aa1      	ldr	r2, [pc, #644]	; (8001e28 <cfg_Task+0x318>)
 8001ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bb8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bbc:	fb01 f202 	mul.w	r2, r1, r2
 8001bc0:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001bc4:	4998      	ldr	r1, [pc, #608]	; (8001e28 <cfg_Task+0x318>)
 8001bc6:	440a      	add	r2, r1
 8001bc8:	210a      	movs	r1, #10
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 8001bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	210a      	movs	r1, #10
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 f89f 	bl	8002d18 <cfg_RemTxData>
 8001bda:	e029      	b.n	8001c30 <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8001bdc:	4a92      	ldr	r2, [pc, #584]	; (8001e28 <cfg_Task+0x318>)
 8001bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bf2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bf6:	fb01 f202 	mul.w	r2, r1, r2
 8001bfa:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001bfe:	498a      	ldr	r1, [pc, #552]	; (8001e28 <cfg_Task+0x318>)
 8001c00:	1850      	adds	r0, r2, r1
 8001c02:	4989      	ldr	r1, [pc, #548]	; (8001e28 <cfg_Task+0x318>)
 8001c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c06:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8001c0a:	fb04 f202 	mul.w	r2, r4, r2
 8001c0e:	440a      	add	r2, r1
 8001c10:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8001c1a:	4a83      	ldr	r2, [pc, #524]	; (8001e28 <cfg_Task+0x318>)
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 8001c30:	4a7d      	ldr	r2, [pc, #500]	; (8001e28 <cfg_Task+0x318>)
 8001c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c34:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 836e 	beq.w	8002326 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 8001c4a:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <cfg_Task+0x318>)
 8001c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c4e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	4971      	ldr	r1, [pc, #452]	; (8001e28 <cfg_Task+0x318>)
 8001c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c64:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001c68:	fb00 f303 	mul.w	r3, r0, r3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001c72:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8001c74:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8001c78:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8001c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001c84:	2202      	movs	r2, #2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 ff08 	bl	8002a9c <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8001c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2202      	movs	r2, #2
 8001c92:	4966      	ldr	r1, [pc, #408]	; (8001e2c <cfg_Task+0x31c>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 ff01 	bl	8002a9c <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8001c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9c:	b298      	uxth	r0, r3
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	f203 2315 	addw	r3, r3, #533	; 0x215
 8001cac:	4a5e      	ldr	r2, [pc, #376]	; (8001e28 <cfg_Task+0x318>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f000 fef1 	bl	8002a9c <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8001cba:	4a5b      	ldr	r2, [pc, #364]	; (8001e28 <cfg_Task+0x318>)
 8001cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cbe:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8001cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4955      	ldr	r1, [pc, #340]	; (8001e30 <cfg_Task+0x320>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fedd 	bl	8002a9c <cfg_AddTxData>
 8001ce2:	e2db      	b.n	800229c <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <cfg_Task+0x318>)
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	f040 809c 	bne.w	8001e38 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 8001d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d02:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001d0e:	4a46      	ldr	r2, [pc, #280]	; (8001e28 <cfg_Task+0x318>)
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <cfg_Task+0x318>)
 8001d1e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d957      	bls.n	8001ddc <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8001d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001d34:	2202      	movs	r2, #2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 feb0 	bl	8002a9c <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 8001d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <cfg_Task+0x324>)
 8001d50:	4413      	add	r3, r2
 8001d52:	2202      	movs	r2, #2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f000 fea1 	bl	8002a9c <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d62:	461a      	mov	r2, r3
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <cfg_Task+0x324>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	3302      	adds	r3, #2
 8001d72:	2202      	movs	r2, #2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f000 fe91 	bl	8002a9c <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8001d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d7c:	b298      	uxth	r0, r3
 8001d7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d82:	461a      	mov	r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <cfg_Task+0x324>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	2202      	movs	r2, #2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f000 fe81 	bl	8002a9c <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8001d9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <cfg_Task+0x324>)
 8001da2:	460b      	mov	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	1d3a      	adds	r2, r7, #4
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc0c 	bl	80015d0 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fa0c 	bl	80001d8 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8001dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001dd2:	1d39      	adds	r1, r7, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fe61 	bl	8002a9c <cfg_AddTxData>
 8001dda:	e25f      	b.n	800229c <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001ddc:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <cfg_Task+0x318>)
 8001dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001df6:	b2d8      	uxtb	r0, r3
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <cfg_Task+0x318>)
 8001dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fe3c 	bl	8002a9c <cfg_AddTxData>
 8001e24:	e23a      	b.n	800229c <cfg_Task+0x78c>
 8001e26:	bf00      	nop
 8001e28:	200001b4 	.word	0x200001b4
 8001e2c:	200004d0 	.word	0x200004d0
 8001e30:	200004d8 	.word	0x200004d8
 8001e34:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 8001e38:	4ab0      	ldr	r2, [pc, #704]	; (80020fc <cfg_Task+0x5ec>)
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	f040 80a8 	bne.w	8001fa4 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8001e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e56:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001e62:	4aa6      	ldr	r2, [pc, #664]	; (80020fc <cfg_Task+0x5ec>)
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8001e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e72:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001e7e:	4a9f      	ldr	r2, [pc, #636]	; (80020fc <cfg_Task+0x5ec>)
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8001e8c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fc0d 	bl	80016b0 <cfg_GetNode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05e      	beq.n	8001f5a <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8001e9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fc05 	bl	80016b0 <cfg_GetNode>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8001eae:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8001eb2:	1d39      	adds	r1, r7, #4
 8001eb4:	4798      	blx	r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d129      	bne.n	8001f10 <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8001ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fde8 	bl	8002a9c <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fde0 	bl	8002a9c <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 8001edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fdd8 	bl	8002a9c <cfg_AddTxData>
						name_len = strlen(name) + 1;
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe f972 	bl	80001d8 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8001efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001f06:	1d39      	adds	r1, r7, #4
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fdc7 	bl	8002a9c <cfg_AddTxData>
 8001f0e:	e1c5      	b.n	800229c <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001f10:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <cfg_Task+0x5ec>)
 8001f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f14:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f2a:	b2d8      	uxtb	r0, r3
 8001f2c:	4a73      	ldr	r2, [pc, #460]	; (80020fc <cfg_Task+0x5ec>)
 8001f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f30:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001f3e:	4602      	mov	r2, r0
 8001f40:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 8001f42:	2304      	movs	r3, #4
 8001f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001f50:	2201      	movs	r2, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fda2 	bl	8002a9c <cfg_AddTxData>
 8001f58:	e1a0      	b.n	800229c <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001f5a:	4a68      	ldr	r2, [pc, #416]	; (80020fc <cfg_Task+0x5ec>)
 8001f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f74:	b2d8      	uxtb	r0, r3
 8001f76:	4a61      	ldr	r2, [pc, #388]	; (80020fc <cfg_Task+0x5ec>)
 8001f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001f88:	4602      	mov	r2, r0
 8001f8a:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8001f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd7d 	bl	8002a9c <cfg_AddTxData>
 8001fa2:	e17b      	b.n	800229c <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8001fa4:	4a55      	ldr	r2, [pc, #340]	; (80020fc <cfg_Task+0x5ec>)
 8001fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	f040 80a0 	bne.w	8002100 <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001fce:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <cfg_Task+0x5ec>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fde:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001fe2:	fb02 f303 	mul.w	r3, r2, r3
 8001fe6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001fea:	4a44      	ldr	r2, [pc, #272]	; (80020fc <cfg_Task+0x5ec>)
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8001ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffa:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8002006:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <cfg_Task+0x5ec>)
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8002014:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb49 	bl	80016b0 <cfg_GetNode>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d046      	beq.n	80020b2 <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002026:	b29b      	uxth	r3, r3
 8002028:	f107 0152 	add.w	r1, r7, #82	; 0x52
 800202c:	2202      	movs	r2, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fd34 	bl	8002a9c <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002036:	b29b      	uxth	r3, r3
 8002038:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800203c:	2202      	movs	r2, #2
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fd2c 	bl	8002a9c <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002044:	2300      	movs	r3, #0
 8002046:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800204a:	e021      	b.n	8002090 <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 800204c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb2d 	bl	80016b0 <cfg_GetNode>
 8002056:	4603      	mov	r3, r0
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800205e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002062:	440a      	add	r2, r1
 8002064:	b292      	uxth	r2, r2
 8002066:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800206a:	4610      	mov	r0, r2
 800206c:	4798      	blx	r3
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d114      	bne.n	800209e <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002076:	b29b      	uxth	r3, r3
 8002078:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800207c:	2204      	movs	r2, #4
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fd0c 	bl	8002a9c <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002088:	3301      	adds	r3, #1
 800208a:	b29b      	uxth	r3, r3
 800208c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002090:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002094:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002098:	429a      	cmp	r2, r3
 800209a:	d3d7      	bcc.n	800204c <cfg_Task+0x53c>
 800209c:	e000      	b.n	80020a0 <cfg_Task+0x590>
						}
						else{
							break;
 800209e:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 80020a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a2:	b298      	uxth	r0, r3
 80020a4:	f107 0246 	add.w	r2, r7, #70	; 0x46
 80020a8:	2302      	movs	r3, #2
 80020aa:	2109      	movs	r1, #9
 80020ac:	f000 fd48 	bl	8002b40 <cfg_IntertTxData>
 80020b0:	e0f4      	b.n	800229c <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <cfg_Task+0x5ec>)
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020cc:	b2d8      	uxtb	r0, r3
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <cfg_Task+0x5ec>)
 80020d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80020e0:	4602      	mov	r2, r0
 80020e2:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80020ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80020f2:	2201      	movs	r2, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fcd1 	bl	8002a9c <cfg_AddTxData>
 80020fa:	e0cf      	b.n	800229c <cfg_Task+0x78c>
 80020fc:	200001b4 	.word	0x200001b4
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 8002100:	4a8e      	ldr	r2, [pc, #568]	; (800233c <cfg_Task+0x82c>)
 8002102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002104:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b11      	cmp	r3, #17
 8002118:	f040 80c0 	bne.w	800229c <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 800211c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	f203 2316 	addw	r3, r3, #534	; 0x216
 800212a:	4a84      	ldr	r2, [pc, #528]	; (800233c <cfg_Task+0x82c>)
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002146:	4a7d      	ldr	r2, [pc, #500]	; (800233c <cfg_Task+0x82c>)
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002156:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8002162:	4a76      	ldr	r2, [pc, #472]	; (800233c <cfg_Task+0x82c>)
 8002164:	4413      	add	r3, r2
 8002166:	3304      	adds	r3, #4
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8002170:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fa9b 	bl	80016b0 <cfg_GetNode>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d069      	beq.n	8002254 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002182:	b29b      	uxth	r3, r3
 8002184:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002188:	2202      	movs	r2, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fc86 	bl	8002a9c <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002192:	b29b      	uxth	r3, r3
 8002194:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002198:	2202      	movs	r2, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fc7e 	bl	8002a9c <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80021a6:	e046      	b.n	8002236 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 80021a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021ac:	3303      	adds	r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021b2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80021b6:	fb01 f202 	mul.w	r2, r1, r2
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021c0:	4a5e      	ldr	r2, [pc, #376]	; (800233c <cfg_Task+0x82c>)
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80021ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fa6e 	bl	80016b0 <cfg_GetNode>
 80021d4:	4603      	mov	r3, r0
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80021dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80021e0:	440a      	add	r2, r1
 80021e2:	b292      	uxth	r2, r2
 80021e4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80021e8:	4610      	mov	r0, r2
 80021ea:	4798      	blx	r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d127      	bne.n	8002242 <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 80021f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fa5a 	bl	80016b0 <cfg_GetNode>
 80021fc:	4603      	mov	r3, r0
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8002204:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002208:	440a      	add	r2, r1
 800220a:	b292      	uxth	r2, r2
 800220c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002210:	4610      	mov	r0, r2
 8002212:	4798      	blx	r3
 8002214:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d113      	bne.n	8002242 <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 800221a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221c:	b29b      	uxth	r3, r3
 800221e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002222:	2204      	movs	r2, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fc39 	bl	8002a9c <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800222a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800222e:	3301      	adds	r3, #1
 8002230:	b29b      	uxth	r3, r3
 8002232:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002236:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800223a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800223e:	429a      	cmp	r2, r3
 8002240:	d3b2      	bcc.n	80021a8 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 8002242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002244:	b298      	uxth	r0, r3
 8002246:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800224a:	2302      	movs	r3, #2
 800224c:	2109      	movs	r1, #9
 800224e:	f000 fc77 	bl	8002b40 <cfg_IntertTxData>
 8002252:	e023      	b.n	800229c <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002254:	4a39      	ldr	r2, [pc, #228]	; (800233c <cfg_Task+0x82c>)
 8002256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002258:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <cfg_Task+0x82c>)
 8002272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002274:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002282:	4602      	mov	r2, r0
 8002284:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002286:	2303      	movs	r3, #3
 8002288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 800228c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228e:	b29b      	uxth	r3, r3
 8002290:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002294:	2201      	movs	r2, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fc00 	bl	8002a9c <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 800229c:	4a27      	ldr	r2, [pc, #156]	; (800233c <cfg_Task+0x82c>)
 800229e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3b04      	subs	r3, #4
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 80022ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022bc:	b298      	uxth	r0, r3
 80022be:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80022c2:	2301      	movs	r3, #1
 80022c4:	2104      	movs	r1, #4
 80022c6:	f000 fc3b 	bl	8002b40 <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 80022ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80022d8:	4a18      	ldr	r2, [pc, #96]	; (800233c <cfg_Task+0x82c>)
 80022da:	441a      	add	r2, r3
 80022dc:	4917      	ldr	r1, [pc, #92]	; (800233c <cfg_Task+0x82c>)
 80022de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80022e4:	fb00 f303 	mul.w	r3, r0, r3
 80022e8:	440b      	add	r3, r1
 80022ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 fdc7 	bl	8002e88 <crc16_calc>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8002300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002302:	b29b      	uxth	r3, r3
 8002304:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002308:	2202      	movs	r2, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fbc6 	bl	8002a9c <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <cfg_Task+0x82c>)
 8002312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002314:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002328:	3301      	adds	r3, #1
 800232a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	2b00      	cmp	r3, #0
 8002330:	f43f ac08 	beq.w	8001b44 <cfg_Task+0x34>
		}
	}

	return;
 8002334:	bf00      	nop
}
 8002336:	3764      	adds	r7, #100	; 0x64
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	200001b4 	.word	0x200001b4

08002340 <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	460a      	mov	r2, r1
 800234a:	80fb      	strh	r3, [r7, #6]
 800234c:	4613      	mov	r3, r2
 800234e:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 8164 	bne.w	8002620 <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002358:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	49b4      	ldr	r1, [pc, #720]	; (8002630 <cfg_RcvData+0x2f0>)
 800235e:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002362:	fb00 f202 	mul.w	r2, r0, r2
 8002366:	440a      	add	r2, r1
 8002368:	3204      	adds	r2, #4
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	b292      	uxth	r2, r2
 800236e:	3201      	adds	r2, #1
 8002370:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002372:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002374:	b2c9      	uxtb	r1, r1
 8002376:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002378:	49ad      	ldr	r1, [pc, #692]	; (8002630 <cfg_RcvData+0x2f0>)
 800237a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800237e:	fb00 f202 	mul.w	r2, r0, r2
 8002382:	440a      	add	r2, r1
 8002384:	3204      	adds	r2, #4
 8002386:	4621      	mov	r1, r4
 8002388:	8011      	strh	r1, [r2, #0]
 800238a:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 800238c:	4aa8      	ldr	r2, [pc, #672]	; (8002630 <cfg_RcvData+0x2f0>)
 800238e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	4403      	add	r3, r0
 800239a:	3308      	adds	r3, #8
 800239c:	797a      	ldrb	r2, [r7, #5]
 800239e:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4aa3      	ldr	r2, [pc, #652]	; (8002630 <cfg_RcvData+0x2f0>)
 80023a4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d17b      	bne.n	80024ae <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	3308      	adds	r3, #8
 80023c2:	4a9b      	ldr	r2, [pc, #620]	; (8002630 <cfg_RcvData+0x2f0>)
 80023c4:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4999      	ldr	r1, [pc, #612]	; (8002630 <cfg_RcvData+0x2f0>)
 80023ca:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80023ce:	fb00 f303 	mul.w	r3, r0, r3
 80023d2:	440b      	add	r3, r1
 80023d4:	3304      	adds	r3, #4
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b04      	subs	r3, #4
 80023dc:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f000 f927 	bl	8002638 <cfg_ringBufRead16b>
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	3308      	adds	r3, #8
 80023fa:	4a8d      	ldr	r2, [pc, #564]	; (8002630 <cfg_RcvData+0x2f0>)
 80023fc:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	498b      	ldr	r1, [pc, #556]	; (8002630 <cfg_RcvData+0x2f0>)
 8002402:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b02      	subs	r3, #2
 8002414:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002416:	b2db      	uxtb	r3, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f000 f90b 	bl	8002638 <cfg_ringBufRead16b>
 8002422:	4603      	mov	r3, r0
 8002424:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 800242c:	4293      	cmp	r3, r2
 800242e:	f040 80f9 	bne.w	8002624 <cfg_RcvData+0x2e4>
 8002432:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <cfg_RcvData+0x2f0>)
 8002434:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8002438:	b29b      	uxth	r3, r3
 800243a:	893a      	ldrh	r2, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 80f1 	bne.w	8002624 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <cfg_RcvData+0x2f0>)
 8002446:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b04      	subs	r3, #4
 8002458:	b29a      	uxth	r2, r3
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	b290      	uxth	r0, r2
 8002460:	4a73      	ldr	r2, [pc, #460]	; (8002630 <cfg_RcvData+0x2f0>)
 8002462:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3302      	adds	r3, #2
 800246e:	4602      	mov	r2, r0
 8002470:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 8002472:	797b      	ldrb	r3, [r7, #5]
 8002474:	b29b      	uxth	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <cfg_RcvData+0x2f4>)
 800247c:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	b29a      	uxth	r2, r3
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	3205      	adds	r2, #5
 8002486:	b290      	uxth	r0, r2
 8002488:	4a69      	ldr	r2, [pc, #420]	; (8002630 <cfg_RcvData+0x2f0>)
 800248a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3306      	adds	r3, #6
 8002496:	4602      	mov	r2, r0
 8002498:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	4a64      	ldr	r2, [pc, #400]	; (8002630 <cfg_RcvData+0x2f0>)
 800249e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 80024ac:	e0ba      	b.n	8002624 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4a5f      	ldr	r2, [pc, #380]	; (8002630 <cfg_RcvData+0x2f0>)
 80024b2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 80af 	bne.w	8002624 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <cfg_RcvData+0x2f4>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	b291      	uxth	r1, r2
 80024ce:	4a59      	ldr	r2, [pc, #356]	; (8002634 <cfg_RcvData+0x2f4>)
 80024d0:	8011      	strh	r1, [r2, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 80a8 	bne.w	8002628 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	4a55      	ldr	r2, [pc, #340]	; (8002630 <cfg_RcvData+0x2f0>)
 80024dc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	3308      	adds	r3, #8
 80024f6:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <cfg_RcvData+0x2f0>)
 80024f8:	1898      	adds	r0, r3, r2
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <cfg_RcvData+0x2f0>)
 80024fe:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3302      	adds	r3, #2
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b299      	uxth	r1, r3
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	4a47      	ldr	r2, [pc, #284]	; (8002630 <cfg_RcvData+0x2f0>)
 8002512:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8002516:	fb04 f303 	mul.w	r3, r4, r3
 800251a:	4413      	add	r3, r2
 800251c:	3306      	adds	r3, #6
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29a      	uxth	r2, r3
 8002522:	23ff      	movs	r3, #255	; 0xff
 8002524:	f000 fcda 	bl	8002edc <crc16_RingBuf>
 8002528:	4603      	mov	r3, r0
 800252a:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	3308      	adds	r3, #8
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <cfg_RcvData+0x2f0>)
 800253a:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	493c      	ldr	r1, [pc, #240]	; (8002630 <cfg_RcvData+0x2f0>)
 8002540:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002544:	fb00 f303 	mul.w	r3, r0, r3
 8002548:	440b      	add	r3, r1
 800254a:	3304      	adds	r3, #4
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002554:	b2db      	uxtb	r3, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 f86c 	bl	8002638 <cfg_ringBufRead16b>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	89bb      	ldrh	r3, [r7, #12]
 8002566:	4293      	cmp	r3, r2
 8002568:	d15c      	bne.n	8002624 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <cfg_RcvData+0x2f0>)
 800256e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d150      	bne.n	8002624 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8002582:	2300      	movs	r3, #0
 8002584:	81fb      	strh	r3, [r7, #14]
 8002586:	e028      	b.n	80025da <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8002588:	88f8      	ldrh	r0, [r7, #6]
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <cfg_RcvData+0x2f0>)
 800258e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29a      	uxth	r2, r3
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	4413      	add	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 80025a6:	88fa      	ldrh	r2, [r7, #6]
 80025a8:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 80025aa:	4c21      	ldr	r4, [pc, #132]	; (8002630 <cfg_RcvData+0x2f0>)
 80025ac:	f44f 7547 	mov.w	r5, #796	; 0x31c
 80025b0:	fb05 f000 	mul.w	r0, r5, r0
 80025b4:	4420      	add	r0, r4
 80025b6:	4401      	add	r1, r0
 80025b8:	3108      	adds	r1, #8
 80025ba:	7809      	ldrb	r1, [r1, #0]
 80025bc:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 80025be:	491c      	ldr	r1, [pc, #112]	; (8002630 <cfg_RcvData+0x2f0>)
 80025c0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80025c4:	fb00 f202 	mul.w	r2, r0, r2
 80025c8:	440a      	add	r2, r1
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025d0:	4622      	mov	r2, r4
 80025d2:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	3301      	adds	r3, #1
 80025d8:	81fb      	strh	r3, [r7, #14]
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <cfg_RcvData+0x2f0>)
 80025de:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3306      	adds	r3, #6
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	89fa      	ldrh	r2, [r7, #14]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3c9      	bcc.n	8002588 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <cfg_RcvData+0x2f0>)
 80025f8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3306      	adds	r3, #6
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29a      	uxth	r2, r3
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	4610      	mov	r0, r2
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <cfg_RcvData+0x2f0>)
 800260e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800261c:	6018      	str	r0, [r3, #0]
	return;
 800261e:	e001      	b.n	8002624 <cfg_RcvData+0x2e4>
		return;
 8002620:	bf00      	nop
 8002622:	e002      	b.n	800262a <cfg_RcvData+0x2ea>
	return;
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <cfg_RcvData+0x2ea>
			return;
 8002628:	bf00      	nop
}
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	200001b4 	.word	0x200001b4
 8002634:	200004ec 	.word	0x200004ec

08002638 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	3301      	adds	r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8002652:	89fb      	ldrh	r3, [r7, #14]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	b29a      	uxth	r2, r3
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	440b      	add	r3, r1
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4413      	add	r3, r2
 8002664:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002666:	89fb      	ldrh	r3, [r7, #14]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8002674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002678:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002686:	f102 020a 	add.w	r2, r2, #10
 800268a:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 800268c:	2300      	movs	r3, #0
 800268e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002692:	f102 020e 	add.w	r2, r2, #14
 8002696:	8013      	strh	r3, [r2, #0]
 8002698:	e079      	b.n	800278e <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800269a:	2300      	movs	r3, #0
 800269c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026a0:	f102 020c 	add.w	r2, r2, #12
 80026a4:	8013      	strh	r3, [r2, #0]
 80026a6:	e053      	b.n	8002750 <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80026a8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80026ac:	f103 030e 	add.w	r3, r3, #14
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	4981      	ldr	r1, [pc, #516]	; (80028b8 <cfg_SaveSettings+0x244>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3310      	adds	r3, #16
 80026c0:	681e      	ldr	r6, [r3, #0]
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	3b0e      	subs	r3, #14
 80026c8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80026cc:	f102 020c 	add.w	r2, r2, #12
 80026d0:	8810      	ldrh	r0, [r2, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	2100      	movs	r1, #0
 80026d6:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d028      	beq.n	800273a <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 80026e8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80026ec:	f103 030e 	add.w	r3, r3, #14
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	4971      	ldr	r1, [pc, #452]	; (80028b8 <cfg_SaveSettings+0x244>)
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3308      	adds	r3, #8
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002706:	f103 030a 	add.w	r3, r3, #10
 800270a:	8819      	ldrh	r1, [r3, #0]
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	3b0c      	subs	r3, #12
 8002712:	0089      	lsls	r1, r1, #2
 8002714:	4419      	add	r1, r3
 8002716:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800271a:	f103 030c 	add.w	r3, r3, #12
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	4790      	blx	r2
				var_cnt += 1;
 8002724:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002728:	f103 030a 	add.w	r3, r3, #10
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002734:	f102 020a 	add.w	r2, r2, #10
 8002738:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800273a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800273e:	f103 030c 	add.w	r3, r3, #12
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800274a:	f102 020c 	add.w	r2, r2, #12
 800274e:	8013      	strh	r3, [r2, #0]
 8002750:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002754:	f103 030e 	add.w	r3, r3, #14
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	4957      	ldr	r1, [pc, #348]	; (80028b8 <cfg_SaveSettings+0x244>)
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3304      	adds	r3, #4
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800276e:	f102 020c 	add.w	r2, r2, #12
 8002772:	8812      	ldrh	r2, [r2, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d397      	bcc.n	80026a8 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 8002778:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800277c:	f103 030e 	add.w	r3, r3, #14
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002788:	f102 020e 	add.w	r2, r2, #14
 800278c:	8013      	strh	r3, [r2, #0]
 800278e:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <cfg_SaveSettings+0x248>)
 8002790:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002794:	b29b      	uxth	r3, r3
 8002796:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800279a:	f102 020e 	add.w	r2, r2, #14
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f4ff af7a 	bcc.w	800269a <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 80027a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80027aa:	f103 030a 	add.w	r3, r3, #10
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d07a      	beq.n	80028aa <cfg_SaveSettings+0x236>
 80027b4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80027b8:	f103 030a 	add.w	r3, r3, #10
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d871      	bhi.n	80028aa <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 80027c6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80027ca:	f103 030a 	add.w	r3, r3, #10
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	3b0c      	subs	r3, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	2000      	movs	r0, #0
 80027da:	f000 fbb7 	bl	8002f4c <crc32_calc>
 80027de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80027e2:	f103 0304 	add.w	r3, r3, #4
 80027e6:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 80027e8:	f004 f8ba 	bl	8006960 <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 80027ec:	2102      	movs	r1, #2
 80027ee:	2007      	movs	r0, #7
 80027f0:	f004 fa28 	bl	8006c44 <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 80027f4:	4932      	ldr	r1, [pc, #200]	; (80028c0 <cfg_SaveSettings+0x24c>)
 80027f6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80027fa:	f103 030a 	add.w	r3, r3, #10
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2200      	movs	r2, #0
 8002802:	469a      	mov	sl, r3
 8002804:	4693      	mov	fp, r2
 8002806:	4652      	mov	r2, sl
 8002808:	465b      	mov	r3, fp
 800280a:	2002      	movs	r0, #2
 800280c:	f004 f854 	bl	80068b8 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <cfg_SaveSettings+0x24c>)
 8002812:	1d19      	adds	r1, r3, #4
 8002814:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002818:	f103 0304 	add.w	r3, r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	4698      	mov	r8, r3
 8002822:	4691      	mov	r9, r2
 8002824:	4642      	mov	r2, r8
 8002826:	464b      	mov	r3, r9
 8002828:	2002      	movs	r0, #2
 800282a:	f004 f845 	bl	80068b8 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 800282e:	2300      	movs	r3, #0
 8002830:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002834:	f102 020e 	add.w	r2, r2, #14
 8002838:	8013      	strh	r3, [r2, #0]
 800283a:	e027      	b.n	800288c <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 800283c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002840:	f103 030e 	add.w	r3, r3, #14
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	461a      	mov	r2, r3
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <cfg_SaveSettings+0x24c>)
 800284c:	3308      	adds	r3, #8
 800284e:	18d1      	adds	r1, r2, r3
 8002850:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002854:	f103 030e 	add.w	r3, r3, #14
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	f107 0210 	add.w	r2, r7, #16
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8002866:	2200      	movs	r2, #0
 8002868:	461c      	mov	r4, r3
 800286a:	4615      	mov	r5, r2
 800286c:	4622      	mov	r2, r4
 800286e:	462b      	mov	r3, r5
 8002870:	2002      	movs	r0, #2
 8002872:	f004 f821 	bl	80068b8 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8002876:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800287a:	f103 030e 	add.w	r3, r3, #14
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002886:	f102 020e 	add.w	r2, r2, #14
 800288a:	8013      	strh	r3, [r2, #0]
 800288c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002890:	f103 030e 	add.w	r3, r3, #14
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800289a:	f103 030a 	add.w	r3, r3, #10
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3cb      	bcc.n	800283c <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 80028a4:	f004 f87e 	bl	80069a4 <HAL_FLASH_Lock>

	}

	return;
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
}
 80028ac:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b8:	20000030 	.word	0x20000030
 80028bc:	200001b4 	.word	0x200001b4
 80028c0:	08060000 	.word	0x08060000

080028c4 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 80028d6:	4b4e      	ldr	r3, [pc, #312]	; (8002a10 <cfg_LoadSettings+0x14c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 80028dc:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <cfg_LoadSettings+0x14c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 808e 	beq.w	8002a06 <cfg_LoadSettings+0x142>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f200 8088 	bhi.w	8002a06 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 80028f6:	2300      	movs	r3, #0
 80028f8:	82fb      	strh	r3, [r7, #22]
 80028fa:	e029      	b.n	8002950 <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80028fc:	2300      	movs	r3, #0
 80028fe:	82bb      	strh	r3, [r7, #20]
 8002900:	e017      	b.n	8002932 <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002902:	8afa      	ldrh	r2, [r7, #22]
 8002904:	4943      	ldr	r1, [pc, #268]	; (8002a14 <cfg_LoadSettings+0x150>)
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3310      	adds	r3, #16
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	1dba      	adds	r2, r7, #6
 8002916:	8ab8      	ldrh	r0, [r7, #20]
 8002918:	2100      	movs	r1, #0
 800291a:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <cfg_LoadSettings+0x68>
					var_cnt += 1;
 8002926:	8a7b      	ldrh	r3, [r7, #18]
 8002928:	3301      	adds	r3, #1
 800292a:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800292c:	8abb      	ldrh	r3, [r7, #20]
 800292e:	3301      	adds	r3, #1
 8002930:	82bb      	strh	r3, [r7, #20]
 8002932:	8afa      	ldrh	r2, [r7, #22]
 8002934:	4937      	ldr	r1, [pc, #220]	; (8002a14 <cfg_LoadSettings+0x150>)
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3304      	adds	r3, #4
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	8aba      	ldrh	r2, [r7, #20]
 8002946:	429a      	cmp	r2, r3
 8002948:	d3db      	bcc.n	8002902 <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 800294a:	8afb      	ldrh	r3, [r7, #22]
 800294c:	3301      	adds	r3, #1
 800294e:	82fb      	strh	r3, [r7, #22]
 8002950:	4b31      	ldr	r3, [pc, #196]	; (8002a18 <cfg_LoadSettings+0x154>)
 8002952:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002956:	b29b      	uxth	r3, r3
 8002958:	8afa      	ldrh	r2, [r7, #22]
 800295a:	429a      	cmp	r2, r3
 800295c:	d3ce      	bcc.n	80028fc <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 800295e:	8a7b      	ldrh	r3, [r7, #18]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	429a      	cmp	r2, r3
 8002964:	d14f      	bne.n	8002a06 <cfg_LoadSettings+0x142>
 8002966:	8a7b      	ldrh	r3, [r7, #18]
 8002968:	461a      	mov	r2, r3
 800296a:	492c      	ldr	r1, [pc, #176]	; (8002a1c <cfg_LoadSettings+0x158>)
 800296c:	2000      	movs	r0, #0
 800296e:	f000 faed 	bl	8002f4c <crc32_calc>
 8002972:	4602      	mov	r2, r0
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4293      	cmp	r3, r2
 8002978:	d145      	bne.n	8002a06 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 800297a:	2300      	movs	r3, #0
 800297c:	82fb      	strh	r3, [r7, #22]
 800297e:	e03a      	b.n	80029f6 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002980:	2300      	movs	r3, #0
 8002982:	82bb      	strh	r3, [r7, #20]
 8002984:	e028      	b.n	80029d8 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002986:	8afa      	ldrh	r2, [r7, #22]
 8002988:	4922      	ldr	r1, [pc, #136]	; (8002a14 <cfg_LoadSettings+0x150>)
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3310      	adds	r3, #16
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1dba      	adds	r2, r7, #6
 800299a:	8ab8      	ldrh	r0, [r7, #20]
 800299c:	2100      	movs	r1, #0
 800299e:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 80029aa:	8afa      	ldrh	r2, [r7, #22]
 80029ac:	4919      	ldr	r1, [pc, #100]	; (8002a14 <cfg_LoadSettings+0x150>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	330c      	adds	r3, #12
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	8a3a      	ldrh	r2, [r7, #16]
 80029be:	3202      	adds	r2, #2
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4913      	ldr	r1, [pc, #76]	; (8002a10 <cfg_LoadSettings+0x14c>)
 80029c4:	4411      	add	r1, r2
 80029c6:	8aba      	ldrh	r2, [r7, #20]
 80029c8:	4610      	mov	r0, r2
 80029ca:	4798      	blx	r3
						load_var_cnt += 1;
 80029cc:	8a3b      	ldrh	r3, [r7, #16]
 80029ce:	3301      	adds	r3, #1
 80029d0:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80029d2:	8abb      	ldrh	r3, [r7, #20]
 80029d4:	3301      	adds	r3, #1
 80029d6:	82bb      	strh	r3, [r7, #20]
 80029d8:	8afa      	ldrh	r2, [r7, #22]
 80029da:	490e      	ldr	r1, [pc, #56]	; (8002a14 <cfg_LoadSettings+0x150>)
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	8aba      	ldrh	r2, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3ca      	bcc.n	8002986 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 80029f0:	8afb      	ldrh	r3, [r7, #22]
 80029f2:	3301      	adds	r3, #1
 80029f4:	82fb      	strh	r3, [r7, #22]
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <cfg_LoadSettings+0x154>)
 80029f8:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	8afa      	ldrh	r2, [r7, #22]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3bd      	bcc.n	8002980 <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
}
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	08060000 	.word	0x08060000
 8002a14:	20000030 	.word	0x20000030
 8002a18:	200001b4 	.word	0x200001b4
 8002a1c:	08060008 	.word	0x08060008

08002a20 <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002a24:	f003 ff9c 	bl	8006960 <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8002a28:	2102      	movs	r1, #2
 8002a2a:	2006      	movs	r0, #6
 8002a2c:	f004 f90a 	bl	8006c44 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 8002a30:	f003 ffb8 	bl	80069a4 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 8002a34:	4a03      	ldr	r2, [pc, #12]	; (8002a44 <cfg_ClearFwBuf+0x24>)
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <cfg_ClearFwBuf+0x28>)
 8002a38:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <cfg_ClearFwBuf+0x2c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

	return;
 8002a40:	bf00      	nop
}
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	08040000 	.word	0x08040000
 8002a48:	200004e4 	.word	0x200004e4
 8002a4c:	200004e8 	.word	0x200004e8

08002a50 <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002a58:	f003 ff82 	bl	8006960 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <cfg_WriteFwData+0x44>)
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	461c      	mov	r4, r3
 8002a66:	4615      	mov	r5, r2
 8002a68:	4622      	mov	r2, r4
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f003 ff23 	bl	80068b8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8002a72:	f003 ff97 	bl	80069a4 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <cfg_WriteFwData+0x44>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <cfg_WriteFwData+0x44>)
 8002a7e:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <cfg_WriteFwData+0x48>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <cfg_WriteFwData+0x48>)
 8002a88:	6013      	str	r3, [r2, #0]

	return;
 8002a8a:	bf00      	nop
}
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdb0      	pop	{r4, r5, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200004e4 	.word	0x200004e4
 8002a98:	200004e8 	.word	0x200004e8

08002a9c <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d13e      	bne.n	8002b2e <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <cfg_AddTxData+0xa0>)
 8002ab4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d831      	bhi.n	8002b32 <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 8002ace:	89fa      	ldrh	r2, [r7, #14]
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	491a      	ldr	r1, [pc, #104]	; (8002b3c <cfg_AddTxData+0xa0>)
 8002ad4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ae8:	fb01 f202 	mul.w	r2, r1, r2
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <cfg_AddTxData+0xa0>)
 8002af4:	4413      	add	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f007 f9fc 	bl	8009ef8 <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002b00:	89fb      	ldrh	r3, [r7, #14]
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <cfg_AddTxData+0xa0>)
 8002b04:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	440a      	add	r2, r1
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <cfg_AddTxData+0xa0>)
 8002b1c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002b20:	fb00 f303 	mul.w	r3, r0, r3
 8002b24:	440b      	add	r3, r1
 8002b26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b2a:	601a      	str	r2, [r3, #0]

	return;
 8002b2c:	e002      	b.n	8002b34 <cfg_AddTxData+0x98>
		return;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <cfg_AddTxData+0x98>
		return;
 8002b32:	bf00      	nop
}
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200001b4 	.word	0x200001b4

08002b40 <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b0c5      	sub	sp, #276	; 0x114
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4604      	mov	r4, r0
 8002b48:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002b4c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8002b50:	6001      	str	r1, [r0, #0]
 8002b52:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002b56:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002b5a:	600a      	str	r2, [r1, #0]
 8002b5c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002b60:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b6a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002b6e:	4622      	mov	r2, r4
 8002b70:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 8002b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b76:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f040 80c0 	bne.w	8002d02 <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b86:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	4a61      	ldr	r2, [pc, #388]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002b8e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ba2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ba6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f200 80aa 	bhi.w	8002d06 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 8002bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2bff      	cmp	r3, #255	; 0xff
 8002bbe:	f200 80a4 	bhi.w	8002d0a <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 8002bc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bc6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002bd0:	fb03 f202 	mul.w	r2, r3, r2
 8002bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002be6:	1899      	adds	r1, r3, r2
 8002be8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bec:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	4a48      	ldr	r2, [pc, #288]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002bf4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002bf8:	fb00 f303 	mul.w	r3, r0, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f007 f96f 	bl	8009ef8 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8002c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c1e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002c28:	fb03 f202 	mul.w	r2, r3, r2
 8002c2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002c3c:	4a35      	ldr	r2, [pc, #212]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002c3e:	1898      	adds	r0, r3, r2
 8002c40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c44:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	f007 f950 	bl	8009ef8 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8002c58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c5c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002c60:	881a      	ldrh	r2, [r3, #0]
 8002c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c66:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8002c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	440b      	add	r3, r1
 8002c78:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c7c:	fb01 f202 	mul.w	r2, r1, r2
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002c86:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002c88:	1898      	adds	r0, r3, r2
 8002c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c8e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002c96:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f007 f91e 	bl	8009ef8 <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002cbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cc0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002cc8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cdc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ce6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	440a      	add	r2, r1
 8002cee:	4909      	ldr	r1, [pc, #36]	; (8002d14 <cfg_IntertTxData+0x1d4>)
 8002cf0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002cf4:	fb00 f303 	mul.w	r3, r0, r3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cfe:	601a      	str	r2, [r3, #0]

	return;
 8002d00:	e004      	b.n	8002d0c <cfg_IntertTxData+0x1cc>
		return;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <cfg_IntertTxData+0x1cc>
		return;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <cfg_IntertTxData+0x1cc>
		return;
 8002d0a:	bf00      	nop
}
 8002d0c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	200001b4 	.word	0x200001b4

08002d18 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0c2      	sub	sp, #264	; 0x108
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d28:	6019      	str	r1, [r3, #0]
 8002d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d2e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d32:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 8002d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d38:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <cfg_RemTxData+0x150>)
 8002d40:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002d54:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d87f      	bhi.n	8002e5e <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 8002d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d078      	beq.n	8002e5e <cfg_RemTxData+0x146>
 8002d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d70:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <cfg_RemTxData+0x150>)
 8002d78:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d068      	beq.n	8002e5e <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8002d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002d90:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <cfg_RemTxData+0x150>)
 8002d98:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dac:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002db6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	1a8a      	subs	r2, r1, r2
 8002dbe:	492a      	ldr	r1, [pc, #168]	; (8002e68 <cfg_RemTxData+0x150>)
 8002dc0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002dc4:	fb00 f303 	mul.w	r3, r0, r3
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dce:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 8002dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dd4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002dde:	fb03 f202 	mul.w	r2, r3, r2
 8002de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002df2:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <cfg_RemTxData+0x150>)
 8002df4:	1899      	adds	r1, r3, r2
 8002df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dfa:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	; (8002e68 <cfg_RemTxData+0x150>)
 8002e02:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002e06:	fb00 f303 	mul.w	r3, r0, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	4618      	mov	r0, r3
 8002e18:	f007 f86e 	bl	8009ef8 <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8002e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e20:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <cfg_RemTxData+0x150>)
 8002e34:	1898      	adds	r0, r3, r2
 8002e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e3a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <cfg_RemTxData+0x150>)
 8002e42:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	4619      	mov	r1, r3
 8002e58:	f007 f84e 	bl	8009ef8 <memcpy>
	//free(tmp_buf);

	return;
 8002e5c:	e000      	b.n	8002e60 <cfg_RemTxData+0x148>
		return;
 8002e5e:	bf00      	nop
}
 8002e60:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200001b4 	.word	0x200001b4

08002e6c <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f001 f836 	bl	8003eec <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8002e80:	bf00      	nop
}
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8002e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e9c:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8002e9e:	e00e      	b.n	8002ebe <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 8002ea0:	897b      	ldrh	r3, [r7, #10]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	b2d9      	uxtb	r1, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1c58      	adds	r0, r3, #1
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	404b      	eors	r3, r1
 8002eb4:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <crc16_calc+0x50>)
 8002eb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002eba:	4053      	eors	r3, r2
 8002ebc:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	1e5a      	subs	r2, r3, #1
 8002ec2:	807a      	strh	r2, [r7, #2]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1eb      	bne.n	8002ea0 <crc16_calc+0x18>
	return crc;
 8002ec8:	897b      	ldrh	r3, [r7, #10]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	0800a208 	.word	0x0800a208

08002edc <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	4608      	mov	r0, r1
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	817b      	strh	r3, [r7, #10]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	813b      	strh	r3, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 8002ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efa:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 8002efc:	e017      	b.n	8002f2e <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 8002efe:	8afb      	ldrh	r3, [r7, #22]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	8afb      	ldrh	r3, [r7, #22]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	8979      	ldrh	r1, [r7, #10]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	4401      	add	r1, r0
 8002f0e:	7809      	ldrb	r1, [r1, #0]
 8002f10:	404b      	eors	r3, r1
 8002f12:	490d      	ldr	r1, [pc, #52]	; (8002f48 <crc16_RingBuf+0x6c>)
 8002f14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f18:	4053      	eors	r3, r2
 8002f1a:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 8002f1c:	897b      	ldrh	r3, [r7, #10]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8002f2e:	893b      	ldrh	r3, [r7, #8]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	813a      	strh	r2, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e2      	bne.n	8002efe <crc16_RingBuf+0x22>
	}
	return crc;
 8002f38:	8afb      	ldrh	r3, [r7, #22]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	0800a208 	.word	0x0800a208

08002f4c <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	80fb      	strh	r3, [r7, #6]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	60fb      	str	r3, [r7, #12]
  while (len--)
 8002f60:	e00f      	b.n	8002f82 <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	0e19      	lsrs	r1, r3, #24
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	404b      	eors	r3, r1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	490a      	ldr	r1, [pc, #40]	; (8002f9c <crc32_calc+0x50>)
 8002f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f78:	4053      	eors	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
      buf++;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	603b      	str	r3, [r7, #0]
  while (len--)
 8002f82:	88bb      	ldrh	r3, [r7, #4]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	80ba      	strh	r2, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ea      	bne.n	8002f62 <crc32_calc+0x16>
    }
  return crc;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	0800a408 	.word	0x0800a408

08002fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa4:	f002 fe34 	bl	8005c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fa8:	f000 f812 	bl	8002fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fac:	f000 f9bc 	bl	8003328 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002fb0:	f000 f8c8 	bl	8003144 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002fb4:	f000 f964 	bl	8003280 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002fb8:	f000 f98c 	bl	80032d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002fbc:	f000 f8f0 	bl	80031a0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002fc0:	f000 f86e 	bl	80030a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 8002fc4:	f002 fcd2 	bl	800596c <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 8002fc8:	f002 fcf8 	bl	80059bc <system_Task>
 8002fcc:	e7fc      	b.n	8002fc8 <main+0x28>
	...

08002fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b094      	sub	sp, #80	; 0x50
 8002fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd6:	f107 0320 	add.w	r3, r7, #32
 8002fda:	2230      	movs	r2, #48	; 0x30
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f006 ff98 	bl	8009f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <SystemClock_Config+0xc8>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <SystemClock_Config+0xc8>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	; 0x40
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <SystemClock_Config+0xc8>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	2300      	movs	r3, #0
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <SystemClock_Config+0xcc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a20      	ldr	r2, [pc, #128]	; (800309c <SystemClock_Config+0xcc>)
 800301a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <SystemClock_Config+0xcc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800302c:	2301      	movs	r3, #1
 800302e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003036:	2302      	movs	r3, #2
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800303a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003040:	230c      	movs	r3, #12
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003044:	2360      	movs	r3, #96	; 0x60
 8003046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003048:	2302      	movs	r3, #2
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800304c:	2304      	movs	r3, #4
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003050:	f107 0320 	add.w	r3, r7, #32
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fa1b 	bl	8007490 <HAL_RCC_OscConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003060:	f000 fa64 	bl	800352c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003064:	230f      	movs	r3, #15
 8003066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003068:	2302      	movs	r3, #2
 800306a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	2103      	movs	r1, #3
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fc7d 	bl	8007980 <HAL_RCC_ClockConfig>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800308c:	f000 fa4e 	bl	800352c <Error_Handler>
  }
}
 8003090:	bf00      	nop
 8003092:	3750      	adds	r7, #80	; 0x50
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000

080030a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030a6:	463b      	mov	r3, r7
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030b2:	4b21      	ldr	r3, [pc, #132]	; (8003138 <MX_ADC1_Init+0x98>)
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <MX_ADC1_Init+0x9c>)
 80030b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <MX_ADC1_Init+0x98>)
 80030ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <MX_ADC1_Init+0x98>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <MX_ADC1_Init+0x98>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <MX_ADC1_Init+0x98>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <MX_ADC1_Init+0x98>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <MX_ADC1_Init+0x98>)
 80030dc:	2200      	movs	r2, #0
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_ADC1_Init+0x98>)
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <MX_ADC1_Init+0xa0>)
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <MX_ADC1_Init+0x98>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <MX_ADC1_Init+0x98>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <MX_ADC1_Init+0x98>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <MX_ADC1_Init+0x98>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003100:	480d      	ldr	r0, [pc, #52]	; (8003138 <MX_ADC1_Init+0x98>)
 8003102:	f002 fdc7 	bl	8005c94 <HAL_ADC_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800310c:	f000 fa0e 	bl	800352c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003110:	2300      	movs	r3, #0
 8003112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003114:	2301      	movs	r3, #1
 8003116:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800311c:	463b      	mov	r3, r7
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_ADC1_Init+0x98>)
 8003122:	f002 ffeb 	bl	80060fc <HAL_ADC_ConfigChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800312c:	f000 f9fe 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200004f0 	.word	0x200004f0
 800313c:	40012000 	.word	0x40012000
 8003140:	0f000001 	.word	0x0f000001

08003144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <MX_I2C1_Init+0x50>)
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <MX_I2C1_Init+0x54>)
 800314c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <MX_I2C1_Init+0x50>)
 8003150:	4a12      	ldr	r2, [pc, #72]	; (800319c <MX_I2C1_Init+0x58>)
 8003152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <MX_I2C1_Init+0x50>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <MX_I2C1_Init+0x50>)
 800315c:	2200      	movs	r2, #0
 800315e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <MX_I2C1_Init+0x50>)
 8003162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <MX_I2C1_Init+0x50>)
 800316a:	2200      	movs	r2, #0
 800316c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <MX_I2C1_Init+0x50>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <MX_I2C1_Init+0x50>)
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <MX_I2C1_Init+0x50>)
 800317c:	2200      	movs	r2, #0
 800317e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003180:	4804      	ldr	r0, [pc, #16]	; (8003194 <MX_I2C1_Init+0x50>)
 8003182:	f004 f841 	bl	8007208 <HAL_I2C_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800318c:	f000 f9ce 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000538 	.word	0x20000538
 8003198:	40005400 	.word	0x40005400
 800319c:	000186a0 	.word	0x000186a0

080031a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	; 0x28
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a6:	f107 0320 	add.w	r3, r7, #32
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	615a      	str	r2, [r3, #20]
 80031c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031c4:	4a2d      	ldr	r2, [pc, #180]	; (800327c <MX_TIM3_Init+0xdc>)
 80031c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031ca:	22c7      	movs	r2, #199	; 0xc7
 80031cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ce:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80031da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031dc:	4b26      	ldr	r3, [pc, #152]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e2:	4b25      	ldr	r3, [pc, #148]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031e8:	4823      	ldr	r0, [pc, #140]	; (8003278 <MX_TIM3_Init+0xd8>)
 80031ea:	f004 fe97 	bl	8007f1c <HAL_TIM_PWM_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80031f4:	f000 f99a 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003200:	f107 0320 	add.w	r3, r7, #32
 8003204:	4619      	mov	r1, r3
 8003206:	481c      	ldr	r0, [pc, #112]	; (8003278 <MX_TIM3_Init+0xd8>)
 8003208:	f005 fbac 	bl	8008964 <HAL_TIMEx_MasterConfigSynchronization>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003212:	f000 f98b 	bl	800352c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003216:	2360      	movs	r3, #96	; 0x60
 8003218:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	2200      	movs	r2, #0
 800322a:	4619      	mov	r1, r3
 800322c:	4812      	ldr	r0, [pc, #72]	; (8003278 <MX_TIM3_Init+0xd8>)
 800322e:	f005 f87d 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003238:	f000 f978 	bl	800352c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	2204      	movs	r2, #4
 8003240:	4619      	mov	r1, r3
 8003242:	480d      	ldr	r0, [pc, #52]	; (8003278 <MX_TIM3_Init+0xd8>)
 8003244:	f005 f872 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800324e:	f000 f96d 	bl	800352c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	2208      	movs	r2, #8
 8003256:	4619      	mov	r1, r3
 8003258:	4807      	ldr	r0, [pc, #28]	; (8003278 <MX_TIM3_Init+0xd8>)
 800325a:	f005 f867 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003264:	f000 f962 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <MX_TIM3_Init+0xd8>)
 800326a:	f000 fa43 	bl	80036f4 <HAL_TIM_MspPostInit>

}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	; 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000058c 	.word	0x2000058c
 800327c:	40000400 	.word	0x40000400

08003280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <MX_USART1_UART_Init+0x50>)
 8003288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 800328c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <MX_USART1_UART_Init+0x4c>)
 80032b8:	f005 fbd6 	bl	8008a68 <HAL_UART_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032c2:	f000 f933 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200005d4 	.word	0x200005d4
 80032d0:	40011000 	.word	0x40011000

080032d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <MX_USART2_UART_Init+0x50>)
 80032dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 80032fa:	220c      	movs	r2, #12
 80032fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800330a:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_USART2_UART_Init+0x4c>)
 800330c:	f005 fbac 	bl	8008a68 <HAL_UART_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003316:	f000 f909 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000618 	.word	0x20000618
 8003324:	40004400 	.word	0x40004400

08003328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <MX_GPIO_Init+0x128>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a42      	ldr	r2, [pc, #264]	; (8003450 <MX_GPIO_Init+0x128>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <MX_GPIO_Init+0x128>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <MX_GPIO_Init+0x128>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <MX_GPIO_Init+0x128>)
 8003364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <MX_GPIO_Init+0x128>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b35      	ldr	r3, [pc, #212]	; (8003450 <MX_GPIO_Init+0x128>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <MX_GPIO_Init+0x128>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b32      	ldr	r3, [pc, #200]	; (8003450 <MX_GPIO_Init+0x128>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <MX_GPIO_Init+0x128>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <MX_GPIO_Init+0x128>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <MX_GPIO_Init+0x128>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80033ae:	2200      	movs	r2, #0
 80033b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033b4:	4827      	ldr	r0, [pc, #156]	; (8003454 <MX_GPIO_Init+0x12c>)
 80033b6:	f003 ff0d 	bl	80071d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 80033ba:	2200      	movs	r2, #0
 80033bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033c0:	4825      	ldr	r0, [pc, #148]	; (8003458 <MX_GPIO_Init+0x130>)
 80033c2:	f003 ff07 	bl	80071d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 80033c6:	2201      	movs	r2, #1
 80033c8:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80033cc:	4823      	ldr	r0, [pc, #140]	; (800345c <MX_GPIO_Init+0x134>)
 80033ce:	f003 ff01 	bl	80071d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80033d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d8:	2301      	movs	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	481a      	ldr	r0, [pc, #104]	; (8003454 <MX_GPIO_Init+0x12c>)
 80033ec:	f003 fc72 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 80033f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4813      	ldr	r0, [pc, #76]	; (8003458 <MX_GPIO_Init+0x130>)
 800340a:	f003 fc63 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 800340e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	4619      	mov	r1, r3
 8003422:	480e      	ldr	r0, [pc, #56]	; (800345c <MX_GPIO_Init+0x134>)
 8003424:	f003 fc56 	bl	8006cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 8003428:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800342c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342e:	2301      	movs	r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003432:	2301      	movs	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0314 	add.w	r3, r7, #20
 800343e:	4619      	mov	r1, r3
 8003440:	4806      	ldr	r0, [pc, #24]	; (800345c <MX_GPIO_Init+0x134>)
 8003442:	f003 fc47 	bl	8006cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003446:	bf00      	nop
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40020800 	.word	0x40020800
 8003458:	40020400 	.word	0x40020400
 800345c:	40020000 	.word	0x40020000

08003460 <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <MX_USART1_UART_Init115200+0x50>)
 8003468:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 800346c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003470:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 8003486:	220c      	movs	r2, #12
 8003488:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003496:	4805      	ldr	r0, [pc, #20]	; (80034ac <MX_USART1_UART_Init115200+0x4c>)
 8003498:	f005 fae6 	bl	8008a68 <HAL_UART_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 80034a2:	f000 f843 	bl	800352c <Error_Handler>
	}
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200005d4 	.word	0x200005d4
 80034b0:	40011000 	.word	0x40011000

080034b4 <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f002 fb59 	bl	8005b74 <system_UART_RxCpltCallback>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <MX_UARTReInit>:

void MX_UARTReInit()
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80034d0:	4803      	ldr	r0, [pc, #12]	; (80034e0 <MX_UARTReInit+0x14>)
 80034d2:	f005 fb16 	bl	8008b02 <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 80034d6:	f7ff fed3 	bl	8003280 <MX_USART1_UART_Init>
	return;
 80034da:	bf00      	nop
}
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200005d4 	.word	0x200005d4

080034e4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f002 fb0b 	bl	8005b08 <system_ADC_ConvCpltCallback>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800350e:	f002 fba1 	bl	8005c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 8003512:	f002 fbb3 	bl	8005c7c <HAL_GetTick>
 8003516:	4603      	mov	r3, r0
 8003518:	4618      	mov	r0, r3
 800351a:	f002 f9e5 	bl	80058e8 <system_Timer>
  /* USER CODE END Callback 1 */
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40000800 	.word	0x40000800

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003534:	e7fe      	b.n	8003534 <Error_Handler+0x8>
	...

08003538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_MspInit+0x4c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_MspInit+0x4c>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_MspInit+0x4c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_MspInit+0x4c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_MspInit+0x4c>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_MspInit+0x4c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_ADC_MspInit+0x8c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d12f      	bne.n	800360a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_ADC_MspInit+0x90>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_ADC_MspInit+0x90>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_ADC_MspInit+0x90>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_ADC_MspInit+0x90>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <HAL_ADC_MspInit+0x90>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6313      	str	r3, [r2, #48]	; 0x30
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <HAL_ADC_MspInit+0x90>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 80035e2:	2301      	movs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e6:	2303      	movs	r3, #3
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4809      	ldr	r0, [pc, #36]	; (800361c <HAL_ADC_MspInit+0x94>)
 80035f6:	f003 fb6d 	bl	8006cd4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2012      	movs	r0, #18
 8003600:	f003 f890 	bl	8006724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003604:	2012      	movs	r0, #18
 8003606:	f003 f8a9 	bl	800675c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40012000 	.word	0x40012000
 8003618:	40023800 	.word	0x40023800
 800361c:	40020000 	.word	0x40020000

08003620 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <HAL_I2C_MspInit+0x84>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12b      	bne.n	800369a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_I2C_MspInit+0x88>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_I2C_MspInit+0x88>)
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_I2C_MspInit+0x88>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 800365e:	23c0      	movs	r3, #192	; 0xc0
 8003660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003662:	2312      	movs	r3, #18
 8003664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003666:	2301      	movs	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366a:	2303      	movs	r3, #3
 800366c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800366e:	2304      	movs	r3, #4
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4619      	mov	r1, r3
 8003678:	480c      	ldr	r0, [pc, #48]	; (80036ac <HAL_I2C_MspInit+0x8c>)
 800367a:	f003 fb2b 	bl	8006cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_I2C_MspInit+0x88>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_I2C_MspInit+0x88>)
 8003688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_I2C_MspInit+0x88>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800369a:	bf00      	nop
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40005400 	.word	0x40005400
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020400 	.word	0x40020400

080036b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <HAL_TIM_PWM_MspInit+0x3c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10d      	bne.n	80036de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_TIM_PWM_MspInit+0x40>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_TIM_PWM_MspInit+0x40>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_TIM_PWM_MspInit+0x40>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_TIM_MspPostInit+0x68>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d11d      	bne.n	8003752 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <HAL_TIM_MspPostInit+0x6c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_TIM_MspPostInit+0x6c>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_TIM_MspPostInit+0x6c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 8003732:	2331      	movs	r3, #49	; 0x31
 8003734:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003742:	2302      	movs	r3, #2
 8003744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4619      	mov	r1, r3
 800374c:	4805      	ldr	r0, [pc, #20]	; (8003764 <HAL_TIM_MspPostInit+0x70>)
 800374e:	f003 fac1 	bl	8006cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003752:	bf00      	nop
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40000400 	.word	0x40000400
 8003760:	40023800 	.word	0x40023800
 8003764:	40020400 	.word	0x40020400

08003768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08c      	sub	sp, #48	; 0x30
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a36      	ldr	r2, [pc, #216]	; (8003860 <HAL_UART_MspInit+0xf8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d135      	bne.n	80037f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003794:	f043 0310 	orr.w	r3, r3, #16
 8003798:	6453      	str	r3, [r2, #68]	; 0x44
 800379a:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_UART_MspInit+0xfc>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_UART_MspInit+0xfc>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <HAL_UART_MspInit+0xfc>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_UART_MspInit+0xfc>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 80037c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037d4:	2307      	movs	r3, #7
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	4619      	mov	r1, r3
 80037de:	4822      	ldr	r0, [pc, #136]	; (8003868 <HAL_UART_MspInit+0x100>)
 80037e0:	f003 fa78 	bl	8006cd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	2025      	movs	r0, #37	; 0x25
 80037ea:	f002 ff9b 	bl	8006724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037ee:	2025      	movs	r0, #37	; 0x25
 80037f0:	f002 ffb4 	bl	800675c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037f4:	e030      	b.n	8003858 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_UART_MspInit+0x104>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d12b      	bne.n	8003858 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_UART_MspInit+0xfc>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6313      	str	r3, [r2, #48]	; 0x30
 800382c:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_UART_MspInit+0xfc>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003838:	230c      	movs	r3, #12
 800383a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003844:	2303      	movs	r3, #3
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003848:	2307      	movs	r3, #7
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384c:	f107 031c 	add.w	r3, r7, #28
 8003850:	4619      	mov	r1, r3
 8003852:	4805      	ldr	r0, [pc, #20]	; (8003868 <HAL_UART_MspInit+0x100>)
 8003854:	f003 fa3e 	bl	8006cd4 <HAL_GPIO_Init>
}
 8003858:	bf00      	nop
 800385a:	3730      	adds	r7, #48	; 0x30
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40011000 	.word	0x40011000
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40004400 	.word	0x40004400

08003870 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_UART_MspDeInit+0x58>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d10e      	bne.n	80038a0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_UART_MspDeInit+0x5c>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	4a11      	ldr	r2, [pc, #68]	; (80038cc <HAL_UART_MspDeInit+0x5c>)
 8003888:	f023 0310 	bic.w	r3, r3, #16
 800388c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 800388e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003892:	480f      	ldr	r0, [pc, #60]	; (80038d0 <HAL_UART_MspDeInit+0x60>)
 8003894:	f003 fba2 	bl	8006fdc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003898:	2025      	movs	r0, #37	; 0x25
 800389a:	f002 ff6d 	bl	8006778 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800389e:	e00e      	b.n	80038be <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <HAL_UART_MspDeInit+0x64>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d109      	bne.n	80038be <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_UART_MspDeInit+0x5c>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_UART_MspDeInit+0x5c>)
 80038b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 80038b6:	210c      	movs	r1, #12
 80038b8:	4805      	ldr	r0, [pc, #20]	; (80038d0 <HAL_UART_MspDeInit+0x60>)
 80038ba:	f003 fb8f 	bl	8006fdc <HAL_GPIO_DeInit>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40004400 	.word	0x40004400

080038d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	; 0x38
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <HAL_InitTick+0xe4>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4a32      	ldr	r2, [pc, #200]	; (80039bc <HAL_InitTick+0xe4>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6413      	str	r3, [r2, #64]	; 0x40
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_InitTick+0xe4>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f004 fa16 	bl	8007d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800391e:	f004 f9e7 	bl	8007cf0 <HAL_RCC_GetPCLK1Freq>
 8003922:	6378      	str	r0, [r7, #52]	; 0x34
 8003924:	e004      	b.n	8003930 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003926:	f004 f9e3 	bl	8007cf0 <HAL_RCC_GetPCLK1Freq>
 800392a:	4603      	mov	r3, r0
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003932:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <HAL_InitTick+0xe8>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	0c9b      	lsrs	r3, r3, #18
 800393a:	3b01      	subs	r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800393e:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <HAL_InitTick+0xec>)
 8003940:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <HAL_InitTick+0xf0>)
 8003942:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_InitTick+0xec>)
 8003946:	f240 32e7 	movw	r2, #999	; 0x3e7
 800394a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_InitTick+0xec>)
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <HAL_InitTick+0xec>)
 8003954:	2200      	movs	r2, #0
 8003956:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_InitTick+0xec>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_InitTick+0xec>)
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003964:	4817      	ldr	r0, [pc, #92]	; (80039c4 <HAL_InitTick+0xec>)
 8003966:	f004 fa1d 	bl	8007da4 <HAL_TIM_Base_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003970:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11b      	bne.n	80039b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003978:	4812      	ldr	r0, [pc, #72]	; (80039c4 <HAL_InitTick+0xec>)
 800397a:	f004 fa6d 	bl	8007e58 <HAL_TIM_Base_Start_IT>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800398c:	201e      	movs	r0, #30
 800398e:	f002 fee5 	bl	800675c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d808      	bhi.n	80039aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003998:	2200      	movs	r2, #0
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	201e      	movs	r0, #30
 800399e:	f002 fec1 	bl	8006724 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_InitTick+0xf4>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e002      	b.n	80039b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80039b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3738      	adds	r7, #56	; 0x38
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	2000065c 	.word	0x2000065c
 80039c8:	40000800 	.word	0x40000800
 80039cc:	200000d4 	.word	0x200000d4

080039d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039d4:	e7fe      	b.n	80039d4 <NMI_Handler+0x4>

080039d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039da:	e7fe      	b.n	80039da <HardFault_Handler+0x4>

080039dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <MemManage_Handler+0x4>

080039e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039e6:	e7fe      	b.n	80039e6 <BusFault_Handler+0x4>

080039e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <UsageFault_Handler+0x4>

080039ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <ADC_IRQHandler+0x10>)
 8003a2e:	f002 fa33 	bl	8005e98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200004f0 	.word	0x200004f0

08003a3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM4_IRQHandler+0x10>)
 8003a42:	f004 fb6b 	bl	800811c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000065c 	.word	0x2000065c

08003a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <USART1_IRQHandler+0x10>)
 8003a56:	f005 fa59 	bl	8008f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200005d4 	.word	0x200005d4

08003a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <SystemInit+0x20>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <SystemInit+0x20>)
 8003a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e010      	b.n	8003ab8 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <modem_Timer+0x44>)
 8003a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <modem_Timer+0x2a>
			modem_info.timer[i]--;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <modem_Timer+0x44>)
 8003aa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	4907      	ldr	r1, [pc, #28]	; (8003acc <modem_Timer+0x44>)
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d9eb      	bls.n	8003a96 <modem_Timer+0xe>
		}
	}

	return;
 8003abe:	bf00      	nop
}
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	200006a4 	.word	0x200006a4

08003ad0 <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003ada:	480c      	ldr	r0, [pc, #48]	; (8003b0c <modem_InitTask+0x3c>)
 8003adc:	f003 fb7a 	bl	80071d4 <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <modem_InitTask+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <modem_InitTask+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 8003aee:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <modem_InitTask+0x40>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <modem_InitTask+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <modem_InitTask+0x40>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <modem_InitTask+0x40>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8003b08:	bf00      	nop
}
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	200006a4 	.word	0x200006a4

08003b14 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8003b1a:	4b81      	ldr	r3, [pc, #516]	; (8003d20 <modem_Task+0x20c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d110      	bne.n	8003b44 <modem_Task+0x30>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 8003b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b26:	487f      	ldr	r0, [pc, #508]	; (8003d24 <modem_Task+0x210>)
 8003b28:	f003 fb3c 	bl	80071a4 <HAL_GPIO_ReadPin>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	f040 80b0 	bne.w	8003c94 <modem_Task+0x180>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 8003b34:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <modem_Task+0x214>)
 8003b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b3a:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8003b3c:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <modem_Task+0x20c>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e0a7      	b.n	8003c94 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 8003b44:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <modem_Task+0x20c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d11e      	bne.n	8003b8a <modem_Task+0x76>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003b4c:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <modem_Task+0x214>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f040 809f 	bne.w	8003c94 <modem_Task+0x180>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 8003b56:	23c2      	movs	r3, #194	; 0xc2
 8003b58:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 8003b5a:	23ff      	movs	r3, #255	; 0xff
 8003b5c:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 8003b5e:	23ff      	movs	r3, #255	; 0xff
 8003b60:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 8003b62:	233d      	movs	r3, #61	; 0x3d
 8003b64:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 8003b66:	2306      	movs	r3, #6
 8003b68:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 8003b6a:	2344      	movs	r3, #68	; 0x44
 8003b6c:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 8003b6e:	1d39      	adds	r1, r7, #4
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
 8003b74:	2206      	movs	r2, #6
 8003b76:	486d      	ldr	r0, [pc, #436]	; (8003d2c <modem_Task+0x218>)
 8003b78:	f004 fff2 	bl	8008b60 <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <modem_Task+0x214>)
 8003b7e:	2264      	movs	r2, #100	; 0x64
 8003b80:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 8003b82:	4b67      	ldr	r3, [pc, #412]	; (8003d20 <modem_Task+0x20c>)
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e084      	b.n	8003c94 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 8003b8a:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <modem_Task+0x20c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d114      	bne.n	8003bbc <modem_Task+0xa8>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003b92:	4b65      	ldr	r3, [pc, #404]	; (8003d28 <modem_Task+0x214>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d17c      	bne.n	8003c94 <modem_Task+0x180>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8003b9a:	23c1      	movs	r3, #193	; 0xc1
 8003b9c:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 8003b9e:	23c1      	movs	r3, #193	; 0xc1
 8003ba0:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 8003ba2:	23c1      	movs	r3, #193	; 0xc1
 8003ba4:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8003ba6:	1d39      	adds	r1, r7, #4
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	2203      	movs	r2, #3
 8003bae:	485f      	ldr	r0, [pc, #380]	; (8003d2c <modem_Task+0x218>)
 8003bb0:	f004 ffd6 	bl	8008b60 <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8003bb4:	4b5a      	ldr	r3, [pc, #360]	; (8003d20 <modem_Task+0x20c>)
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e06b      	b.n	8003c94 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8003bbc:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <modem_Task+0x20c>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d115      	bne.n	8003bf0 <modem_Task+0xdc>
	{
		if( _modem_par_flag == 1 )
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <modem_Task+0x21c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d163      	bne.n	8003c94 <modem_Task+0x180>
		{
			_modem_par_flag = 0;
 8003bcc:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <modem_Task+0x21c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003bd8:	4852      	ldr	r0, [pc, #328]	; (8003d24 <modem_Task+0x210>)
 8003bda:	f003 fafb 	bl	80071d4 <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8003bde:	f001 ff47 	bl	8005a70 <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003be2:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <modem_Task+0x214>)
 8003be4:	2264      	movs	r2, #100	; 0x64
 8003be6:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <modem_Task+0x20c>)
 8003bea:	2204      	movs	r2, #4
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e051      	b.n	8003c94 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy  )
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <modem_Task+0x20c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d107      	bne.n	8003c08 <modem_Task+0xf4>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <modem_Task+0x214>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d149      	bne.n	8003c94 <modem_Task+0x180>
			_modem_cur_state = modem_ready;
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <modem_Task+0x20c>)
 8003c02:	2205      	movs	r2, #5
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e045      	b.n	8003c94 <modem_Task+0x180>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8003c08:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <modem_Task+0x20c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d141      	bne.n	8003c94 <modem_Task+0x180>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 8003c10:	4b45      	ldr	r3, [pc, #276]	; (8003d28 <modem_Task+0x214>)
 8003c12:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d024      	beq.n	8003c64 <modem_Task+0x150>
 8003c1a:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <modem_Task+0x214>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d120      	bne.n	8003c64 <modem_Task+0x150>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 8003c22:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <modem_Task+0x214>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8003c28:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <modem_Task+0x214>)
 8003c2a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003c2e:	2b14      	cmp	r3, #20
 8003c30:	d90a      	bls.n	8003c48 <modem_Task+0x134>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	2214      	movs	r2, #20
 8003c38:	493e      	ldr	r1, [pc, #248]	; (8003d34 <modem_Task+0x220>)
 8003c3a:	483c      	ldr	r0, [pc, #240]	; (8003d2c <modem_Task+0x218>)
 8003c3c:	f004 ff90 	bl	8008b60 <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 8003c40:	2014      	movs	r0, #20
 8003c42:	f000 f9db 	bl	8003ffc <modem_RemTxData>
 8003c46:	e00d      	b.n	8003c64 <modem_Task+0x150>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8003c48:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <modem_Task+0x214>)
 8003c4a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	4937      	ldr	r1, [pc, #220]	; (8003d34 <modem_Task+0x220>)
 8003c56:	4835      	ldr	r0, [pc, #212]	; (8003d2c <modem_Task+0x218>)
 8003c58:	f004 ff82 	bl	8008b60 <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <modem_Task+0x214>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <modem_Task+0x214>)
 8003c66:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d012      	beq.n	8003c94 <modem_Task+0x180>
		{
			_modem_led_start = 1;
 8003c6e:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <modem_Task+0x224>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <modem_Task+0x214>)
 8003c76:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003c7a:	b2d8      	uxtb	r0, r3
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <modem_Task+0x214>)
 8003c7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003c82:	3b01      	subs	r3, #1
 8003c84:	461a      	mov	r2, r3
 8003c86:	492d      	ldr	r1, [pc, #180]	; (8003d3c <modem_Task+0x228>)
 8003c88:	f001 ff08 	bl	8005a9c <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 8003c8c:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <modem_Task+0x214>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <modem_Task+0x22c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <modem_Task+0x19e>
	{
		if( _modem_led_start == 1 )
 8003c9c:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <modem_Task+0x224>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d138      	bne.n	8003d16 <modem_Task+0x202>
		{
			_modem_led_start = 0;
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <modem_Task+0x224>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <modem_Task+0x22c>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 8003cb0:	e031      	b.n	8003d16 <modem_Task+0x202>
	else if( _modem_led_state == 1 )
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <modem_Task+0x22c>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10c      	bne.n	8003cd4 <modem_Task+0x1c0>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cc0:	4820      	ldr	r0, [pc, #128]	; (8003d44 <modem_Task+0x230>)
 8003cc2:	f003 fa87 	bl	80071d4 <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <modem_Task+0x214>)
 8003cc8:	2214      	movs	r2, #20
 8003cca:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <modem_Task+0x22c>)
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
	return;
 8003cd2:	e020      	b.n	8003d16 <modem_Task+0x202>
	else if( _modem_led_state == 2 )
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <modem_Task+0x22c>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d110      	bne.n	8003cfe <modem_Task+0x1ea>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <modem_Task+0x214>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d118      	bne.n	8003d16 <modem_Task+0x202>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cea:	4816      	ldr	r0, [pc, #88]	; (8003d44 <modem_Task+0x230>)
 8003cec:	f003 fa72 	bl	80071d4 <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <modem_Task+0x214>)
 8003cf2:	2232      	movs	r2, #50	; 0x32
 8003cf4:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <modem_Task+0x22c>)
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	701a      	strb	r2, [r3, #0]
	return;
 8003cfc:	e00b      	b.n	8003d16 <modem_Task+0x202>
	else if( _modem_led_state == 3 )
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <modem_Task+0x22c>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d107      	bne.n	8003d16 <modem_Task+0x202>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <modem_Task+0x214>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <modem_Task+0x202>
			_modem_led_state = 0;
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <modem_Task+0x22c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
	return;
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
}
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2000084c 	.word	0x2000084c
 8003d24:	40020000 	.word	0x40020000
 8003d28:	200006a4 	.word	0x200006a4
 8003d2c:	200005d4 	.word	0x200005d4
 8003d30:	2000085b 	.word	0x2000085b
 8003d34:	200007bc 	.word	0x200007bc
 8003d38:	2000085c 	.word	0x2000085c
 8003d3c:	20000739 	.word	0x20000739
 8003d40:	2000085d 	.word	0x2000085d
 8003d44:	40020400 	.word	0x40020400

08003d48 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 8003d52:	4b5f      	ldr	r3, [pc, #380]	; (8003ed0 <modem_RcvData+0x188>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d01a      	beq.n	8003d90 <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 8003d5a:	4b5e      	ldr	r3, [pc, #376]	; (8003ed4 <modem_RcvData+0x18c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80b1 	bne.w	8003ec6 <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 8003d64:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <modem_RcvData+0x190>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	b2d1      	uxtb	r1, r2
 8003d6c:	4a5a      	ldr	r2, [pc, #360]	; (8003ed8 <modem_RcvData+0x190>)
 8003d6e:	7011      	strb	r1, [r2, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	4a5a      	ldr	r2, [pc, #360]	; (8003edc <modem_RcvData+0x194>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 8003d78:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <modem_RcvData+0x190>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	f040 80a2 	bne.w	8003ec6 <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 8003d82:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <modem_RcvData+0x190>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 8003d88:	4b52      	ldr	r3, [pc, #328]	; (8003ed4 <modem_RcvData+0x18c>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 8003d8e:	e09a      	b.n	8003ec6 <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <modem_RcvData+0x198>)
 8003d92:	8a1b      	ldrh	r3, [r3, #16]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9e:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <modem_RcvData+0x198>)
 8003da2:	4611      	mov	r1, r2
 8003da4:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003da6:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <modem_RcvData+0x198>)
 8003da8:	4413      	add	r3, r2
 8003daa:	79fa      	ldrb	r2, [r7, #7]
 8003dac:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 8003dae:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <modem_RcvData+0x198>)
 8003db0:	7b1b      	ldrb	r3, [r3, #12]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d12a      	bne.n	8003e0e <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <modem_RcvData+0x198>)
 8003dba:	8a1b      	ldrh	r3, [r3, #16]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b02      	subs	r3, #2
 8003dc0:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8003dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4846      	ldr	r0, [pc, #280]	; (8003ee4 <modem_RcvData+0x19c>)
 8003dcc:	f000 f8ce 	bl	8003f6c <modem_ringBufRead16b>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d173      	bne.n	8003ec6 <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 8003dde:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <modem_RcvData+0x198>)
 8003de0:	8a1b      	ldrh	r3, [r3, #16]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b02      	subs	r3, #2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <modem_RcvData+0x198>)
 8003df0:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <modem_RcvData+0x1a0>)
 8003df8:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b02      	subs	r3, #2
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <modem_RcvData+0x198>)
 8003e04:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 8003e06:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <modem_RcvData+0x198>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	731a      	strb	r2, [r3, #12]
	return;
 8003e0c:	e05b      	b.n	8003ec6 <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <modem_RcvData+0x198>)
 8003e10:	7b1b      	ldrb	r3, [r3, #12]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d156      	bne.n	8003ec6 <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <modem_RcvData+0x1a0>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <modem_RcvData+0x1a0>)
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <modem_RcvData+0x1a0>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d14c      	bne.n	8003ec6 <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003e2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <modem_RcvData+0x198>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 8003e32:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <modem_RcvData+0x198>)
 8003e34:	89db      	ldrh	r3, [r3, #14]
 8003e36:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <modem_RcvData+0x198>)
 8003e3a:	8a5b      	ldrh	r3, [r3, #18]
 8003e3c:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 8003e3e:	3303      	adds	r3, #3
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	237f      	movs	r3, #127	; 0x7f
 8003e44:	4827      	ldr	r0, [pc, #156]	; (8003ee4 <modem_RcvData+0x19c>)
 8003e46:	f7ff f849 	bl	8002edc <crc16_RingBuf>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <modem_RcvData+0x198>)
 8003e50:	8a1b      	ldrh	r3, [r3, #16]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8003e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4820      	ldr	r0, [pc, #128]	; (8003ee4 <modem_RcvData+0x19c>)
 8003e62:	f000 f883 	bl	8003f6c <modem_ringBufRead16b>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	89bb      	ldrh	r3, [r7, #12]
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d12a      	bne.n	8003ec6 <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <modem_RcvData+0x198>)
 8003e72:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d125      	bne.n	8003ec6 <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	81fb      	strh	r3, [r7, #14]
 8003e7e:	e014      	b.n	8003eaa <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <modem_RcvData+0x198>)
 8003e82:	89db      	ldrh	r3, [r3, #14]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1cda      	adds	r2, r3, #3
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 8003e90:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 8003e92:	4913      	ldr	r1, [pc, #76]	; (8003ee0 <modem_RcvData+0x198>)
 8003e94:	440a      	add	r2, r1
 8003e96:	7d12      	ldrb	r2, [r2, #20]
 8003e98:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <modem_RcvData+0x198>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8003ea4:	89fb      	ldrh	r3, [r7, #14]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	81fb      	strh	r3, [r7, #14]
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <modem_RcvData+0x198>)
 8003eac:	8a5b      	ldrh	r3, [r3, #18]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	89fa      	ldrh	r2, [r7, #14]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3e4      	bcc.n	8003e80 <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <modem_RcvData+0x198>)
 8003eb8:	8a5b      	ldrh	r3, [r3, #18]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <modem_RcvData+0x198>)
 8003ec0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
}
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000084c 	.word	0x2000084c
 8003ed4:	2000085b 	.word	0x2000085b
 8003ed8:	2000085a 	.word	0x2000085a
 8003edc:	20000850 	.word	0x20000850
 8003ee0:	200006a4 	.word	0x200006a4
 8003ee4:	200006b8 	.word	0x200006b8
 8003ee8:	2000085e 	.word	0x2000085e

08003eec <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 8003efa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003efe:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8003f00:	f107 0316 	add.w	r3, r7, #22
 8003f04:	2102      	movs	r1, #2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f850 	bl	8003fac <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3303      	adds	r3, #3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8003f16:	f107 0315 	add.w	r3, r7, #21
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f845 	bl	8003fac <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8003f26:	f107 0315 	add.w	r3, r7, #21
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f83d 	bl	8003fac <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f000 f839 	bl	8003fac <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <modem_TrmData+0x78>)
 8003f3c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	4808      	ldr	r0, [pc, #32]	; (8003f68 <modem_TrmData+0x7c>)
 8003f46:	f7fe ff9f 	bl	8002e88 <crc16_calc>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8003f4e:	f107 0316 	add.w	r3, r7, #22
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f829 	bl	8003fac <modem_AddTxData>

	return;
 8003f5a:	bf00      	nop
}
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200006a4 	.word	0x200006a4
 8003f68:	200007bc 	.word	0x200007bc

08003f6c <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	440b      	add	r3, r1
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8003f9c:	89fb      	ldrh	r3, [r7, #14]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <modem_AddTxData+0x4c>)
 8003fb8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003fbc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d814      	bhi.n	8003ff0 <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <modem_AddTxData+0x4c>)
 8003fc8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003fcc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003fd0:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <modem_AddTxData+0x4c>)
 8003fd2:	4413      	add	r3, r2
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f005 ff8d 	bl	8009ef8 <memcpy>
	modem_info.tx_buf_bytes += len;
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <modem_AddTxData+0x4c>)
 8003fe0:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <modem_AddTxData+0x4c>)
 8003fea:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 8003fee:	e000      	b.n	8003ff2 <modem_AddTxData+0x46>
		return;
 8003ff0:	bf00      	nop
}
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200006a4 	.word	0x200006a4

08003ffc <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0a2      	sub	sp, #136	; 0x88
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 8004004:	4b18      	ldr	r3, [pc, #96]	; (8004068 <modem_RemTxData+0x6c>)
 8004006:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d826      	bhi.n	800405e <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d023      	beq.n	800405e <modem_RemTxData+0x62>
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <modem_RemTxData+0x6c>)
 8004018:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01e      	beq.n	800405e <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <modem_RemTxData+0x6c>)
 8004022:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <modem_RemTxData+0x6c>)
 800402c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004036:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <modem_RemTxData+0x6c>)
 8004038:	1899      	adds	r1, r3, r2
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <modem_RemTxData+0x6c>)
 800403c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	4618      	mov	r0, r3
 8004046:	f005 ff57 	bl	8009ef8 <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <modem_RemTxData+0x6c>)
 800404c:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	4619      	mov	r1, r3
 8004056:	4805      	ldr	r0, [pc, #20]	; (800406c <modem_RemTxData+0x70>)
 8004058:	f005 ff4e 	bl	8009ef8 <memcpy>

	return;
 800405c:	e000      	b.n	8004060 <modem_RemTxData+0x64>
		return;
 800405e:	bf00      	nop
}
 8004060:	3788      	adds	r7, #136	; 0x88
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200006a4 	.word	0x200006a4
 800406c:	200007bc 	.word	0x200007bc

08004070 <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
 800407c:	e016      	b.n	80040ac <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <motor_Timer+0x50>)
 8004082:	3304      	adds	r3, #4
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <motor_Timer+0x36>
			motor_info.timer[i]--;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	490b      	ldr	r1, [pc, #44]	; (80040c0 <motor_Timer+0x50>)
 8004092:	1d13      	adds	r3, r2, #4
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	1e59      	subs	r1, r3, #1
 800409c:	4808      	ldr	r0, [pc, #32]	; (80040c0 <motor_Timer+0x50>)
 800409e:	1d13      	adds	r3, r2, #4
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	3301      	adds	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0e5      	beq.n	800407e <motor_Timer+0xe>
		}
	}

	return;
 80040b2:	bf00      	nop
}
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000860 	.word	0x20000860

080040c4 <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 80040ca:	4b22      	ldr	r3, [pc, #136]	; (8004154 <motor_InitTask+0x90>)
 80040cc:	4a22      	ldr	r2, [pc, #136]	; (8004158 <motor_InitTask+0x94>)
 80040ce:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 80040d0:	4b20      	ldr	r3, [pc, #128]	; (8004154 <motor_InitTask+0x90>)
 80040d2:	2208      	movs	r2, #8
 80040d4:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 80040d6:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <motor_InitTask+0x90>)
 80040d8:	2200      	movs	r2, #0
 80040da:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <motor_InitTask+0x90>)
 80040de:	f240 2217 	movw	r2, #535	; 0x217
 80040e2:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <motor_InitTask+0x90>)
 80040e6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80040ea:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 80040ec:	4b19      	ldr	r3, [pc, #100]	; (8004154 <motor_InitTask+0x90>)
 80040ee:	89db      	ldrh	r3, [r3, #14]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <motor_InitTask+0x90>)
 80040f4:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <motor_InitTask+0x90>)
 80040f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80040fc:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <motor_InitTask+0x90>)
 8004100:	2201      	movs	r2, #1
 8004102:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8004104:	2300      	movs	r3, #0
 8004106:	71fb      	strb	r3, [r7, #7]
 8004108:	e016      	b.n	8004138 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 800410a:	79fa      	ldrb	r2, [r7, #7]
 800410c:	4911      	ldr	r1, [pc, #68]	; (8004154 <motor_InitTask+0x90>)
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	79fa      	ldrb	r2, [r7, #7]
 800411c:	490d      	ldr	r1, [pc, #52]	; (8004154 <motor_InitTask+0x90>)
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3304      	adds	r3, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	f003 ff45 	bl	8007fbc <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	3301      	adds	r3, #1
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0e5      	beq.n	800410a <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <motor_InitTask+0x90>)
 8004140:	7b1b      	ldrb	r3, [r3, #12]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4619      	mov	r1, r3
 8004146:	2000      	movs	r0, #0
 8004148:	f000 f92e 	bl	80043a8 <motor_setTorque>

	return;
 800414c:	bf00      	nop
}
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000860 	.word	0x20000860
 8004158:	2000058c 	.word	0x2000058c

0800415c <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 8004160:	bf00      	nop
}
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	460a      	mov	r2, r1
 8004176:	71fb      	strb	r3, [r7, #7]
 8004178:	4613      	mov	r3, r2
 800417a:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8109 	bne.w	8004396 <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 8004184:	79fa      	ldrb	r2, [r7, #7]
 8004186:	4987      	ldr	r1, [pc, #540]	; (80043a4 <motor_setEnable+0x238>)
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	3308      	adds	r3, #8
 8004194:	79ba      	ldrb	r2, [r7, #6]
 8004196:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 8004198:	79fa      	ldrb	r2, [r7, #7]
 800419a:	4982      	ldr	r1, [pc, #520]	; (80043a4 <motor_setEnable+0x238>)
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3308      	adds	r3, #8
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d178      	bne.n	80042a2 <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80041b0:	79fa      	ldrb	r2, [r7, #7]
 80041b2:	497c      	ldr	r1, [pc, #496]	; (80043a4 <motor_setEnable+0x238>)
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3304      	adds	r3, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d115      	bne.n	80041f2 <motor_setEnable+0x86>
 80041c6:	79fa      	ldrb	r2, [r7, #7]
 80041c8:	4976      	ldr	r1, [pc, #472]	; (80043a4 <motor_setEnable+0x238>)
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	330a      	adds	r3, #10
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b298      	uxth	r0, r3
 80041da:	79fa      	ldrb	r2, [r7, #7]
 80041dc:	4971      	ldr	r1, [pc, #452]	; (80043a4 <motor_setEnable+0x238>)
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4602      	mov	r2, r0
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 80041f0:	e0d2      	b.n	8004398 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80041f2:	79fa      	ldrb	r2, [r7, #7]
 80041f4:	496b      	ldr	r1, [pc, #428]	; (80043a4 <motor_setEnable+0x238>)
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3304      	adds	r3, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d115      	bne.n	8004234 <motor_setEnable+0xc8>
 8004208:	79fa      	ldrb	r2, [r7, #7]
 800420a:	4966      	ldr	r1, [pc, #408]	; (80043a4 <motor_setEnable+0x238>)
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	330a      	adds	r3, #10
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b298      	uxth	r0, r3
 800421c:	79fa      	ldrb	r2, [r7, #7]
 800421e:	4961      	ldr	r1, [pc, #388]	; (80043a4 <motor_setEnable+0x238>)
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4603      	mov	r3, r0
 8004230:	6393      	str	r3, [r2, #56]	; 0x38
 8004232:	e0af      	b.n	8004394 <motor_setEnable+0x228>
 8004234:	79fa      	ldrb	r2, [r7, #7]
 8004236:	495b      	ldr	r1, [pc, #364]	; (80043a4 <motor_setEnable+0x238>)
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3304      	adds	r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b08      	cmp	r3, #8
 8004248:	d115      	bne.n	8004276 <motor_setEnable+0x10a>
 800424a:	79fa      	ldrb	r2, [r7, #7]
 800424c:	4955      	ldr	r1, [pc, #340]	; (80043a4 <motor_setEnable+0x238>)
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	330a      	adds	r3, #10
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b298      	uxth	r0, r3
 800425e:	79fa      	ldrb	r2, [r7, #7]
 8004260:	4950      	ldr	r1, [pc, #320]	; (80043a4 <motor_setEnable+0x238>)
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004274:	e08e      	b.n	8004394 <motor_setEnable+0x228>
 8004276:	79fa      	ldrb	r2, [r7, #7]
 8004278:	494a      	ldr	r1, [pc, #296]	; (80043a4 <motor_setEnable+0x238>)
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	330a      	adds	r3, #10
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b298      	uxth	r0, r3
 800428a:	79fa      	ldrb	r2, [r7, #7]
 800428c:	4945      	ldr	r1, [pc, #276]	; (80043a4 <motor_setEnable+0x238>)
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4603      	mov	r3, r0
 800429e:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80042a0:	e07a      	b.n	8004398 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80042a2:	79fa      	ldrb	r2, [r7, #7]
 80042a4:	493f      	ldr	r1, [pc, #252]	; (80043a4 <motor_setEnable+0x238>)
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	3304      	adds	r3, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d115      	bne.n	80042e4 <motor_setEnable+0x178>
 80042b8:	79fa      	ldrb	r2, [r7, #7]
 80042ba:	493a      	ldr	r1, [pc, #232]	; (80043a4 <motor_setEnable+0x238>)
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	330e      	adds	r3, #14
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b298      	uxth	r0, r3
 80042cc:	79fa      	ldrb	r2, [r7, #7]
 80042ce:	4935      	ldr	r1, [pc, #212]	; (80043a4 <motor_setEnable+0x238>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4602      	mov	r2, r0
 80042e0:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80042e2:	e059      	b.n	8004398 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80042e4:	79fa      	ldrb	r2, [r7, #7]
 80042e6:	492f      	ldr	r1, [pc, #188]	; (80043a4 <motor_setEnable+0x238>)
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3304      	adds	r3, #4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d115      	bne.n	8004326 <motor_setEnable+0x1ba>
 80042fa:	79fa      	ldrb	r2, [r7, #7]
 80042fc:	4929      	ldr	r1, [pc, #164]	; (80043a4 <motor_setEnable+0x238>)
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	330e      	adds	r3, #14
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b298      	uxth	r0, r3
 800430e:	79fa      	ldrb	r2, [r7, #7]
 8004310:	4924      	ldr	r1, [pc, #144]	; (80043a4 <motor_setEnable+0x238>)
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4603      	mov	r3, r0
 8004322:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8004324:	e038      	b.n	8004398 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004326:	79fa      	ldrb	r2, [r7, #7]
 8004328:	491e      	ldr	r1, [pc, #120]	; (80043a4 <motor_setEnable+0x238>)
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3304      	adds	r3, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d115      	bne.n	8004368 <motor_setEnable+0x1fc>
 800433c:	79fa      	ldrb	r2, [r7, #7]
 800433e:	4919      	ldr	r1, [pc, #100]	; (80043a4 <motor_setEnable+0x238>)
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	330e      	adds	r3, #14
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b298      	uxth	r0, r3
 8004350:	79fa      	ldrb	r2, [r7, #7]
 8004352:	4914      	ldr	r1, [pc, #80]	; (80043a4 <motor_setEnable+0x238>)
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4603      	mov	r3, r0
 8004364:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004366:	e017      	b.n	8004398 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004368:	79fa      	ldrb	r2, [r7, #7]
 800436a:	490e      	ldr	r1, [pc, #56]	; (80043a4 <motor_setEnable+0x238>)
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	330e      	adds	r3, #14
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b298      	uxth	r0, r3
 800437c:	79fa      	ldrb	r2, [r7, #7]
 800437e:	4909      	ldr	r1, [pc, #36]	; (80043a4 <motor_setEnable+0x238>)
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4603      	mov	r3, r0
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004392:	e001      	b.n	8004398 <motor_setEnable+0x22c>
 8004394:	e000      	b.n	8004398 <motor_setEnable+0x22c>
		return;
 8004396:	bf00      	nop
}
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000860 	.word	0x20000860

080043a8 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	4603      	mov	r3, r0
 80043b0:	460a      	mov	r2, r1
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 80d9 	bne.w	8004572 <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 80043c0:	79fa      	ldrb	r2, [r7, #7]
 80043c2:	496f      	ldr	r1, [pc, #444]	; (8004580 <motor_setTorque+0x1d8>)
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	330c      	adds	r3, #12
 80043d0:	79ba      	ldrb	r2, [r7, #6]
 80043d2:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 80043d4:	79bb      	ldrb	r3, [r7, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d114      	bne.n	8004404 <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 80043da:	79f9      	ldrb	r1, [r7, #7]
 80043dc:	79fa      	ldrb	r2, [r7, #7]
 80043de:	4868      	ldr	r0, [pc, #416]	; (8004580 <motor_setTorque+0x1d8>)
 80043e0:	460b      	mov	r3, r1
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4403      	add	r3, r0
 80043ea:	330e      	adds	r3, #14
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b298      	uxth	r0, r3
 80043f0:	4963      	ldr	r1, [pc, #396]	; (8004580 <motor_setTorque+0x1d8>)
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	330a      	adds	r3, #10
 80043fe:	4602      	mov	r2, r0
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e031      	b.n	8004468 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8004404:	79fa      	ldrb	r2, [r7, #7]
 8004406:	495e      	ldr	r1, [pc, #376]	; (8004580 <motor_setTorque+0x1d8>)
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	330c      	adds	r3, #12
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 800441a:	79fa      	ldrb	r2, [r7, #7]
 800441c:	4958      	ldr	r1, [pc, #352]	; (8004580 <motor_setTorque+0x1d8>)
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3310      	adds	r3, #16
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800442e:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 8004430:	79fa      	ldrb	r2, [r7, #7]
 8004432:	4953      	ldr	r1, [pc, #332]	; (8004580 <motor_setTorque+0x1d8>)
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	3312      	adds	r3, #18
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4623      	mov	r3, r4
 8004448:	2264      	movs	r2, #100	; 0x64
 800444a:	2101      	movs	r1, #1
 800444c:	f000 f89a 	bl	8004584 <motor_map>
 8004450:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 8004452:	79fa      	ldrb	r2, [r7, #7]
 8004454:	b298      	uxth	r0, r3
 8004456:	494a      	ldr	r1, [pc, #296]	; (8004580 <motor_setTorque+0x1d8>)
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	330a      	adds	r3, #10
 8004464:	4602      	mov	r2, r0
 8004466:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8004468:	79fa      	ldrb	r2, [r7, #7]
 800446a:	4945      	ldr	r1, [pc, #276]	; (8004580 <motor_setTorque+0x1d8>)
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3308      	adds	r3, #8
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d17a      	bne.n	8004576 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004480:	79fa      	ldrb	r2, [r7, #7]
 8004482:	493f      	ldr	r1, [pc, #252]	; (8004580 <motor_setTorque+0x1d8>)
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	3304      	adds	r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d115      	bne.n	80044c2 <motor_setTorque+0x11a>
 8004496:	79fa      	ldrb	r2, [r7, #7]
 8004498:	4939      	ldr	r1, [pc, #228]	; (8004580 <motor_setTorque+0x1d8>)
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	330a      	adds	r3, #10
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b298      	uxth	r0, r3
 80044aa:	79fa      	ldrb	r2, [r7, #7]
 80044ac:	4934      	ldr	r1, [pc, #208]	; (8004580 <motor_setTorque+0x1d8>)
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4602      	mov	r2, r0
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 80044c0:	e059      	b.n	8004576 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80044c2:	79fa      	ldrb	r2, [r7, #7]
 80044c4:	492e      	ldr	r1, [pc, #184]	; (8004580 <motor_setTorque+0x1d8>)
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d115      	bne.n	8004504 <motor_setTorque+0x15c>
 80044d8:	79fa      	ldrb	r2, [r7, #7]
 80044da:	4929      	ldr	r1, [pc, #164]	; (8004580 <motor_setTorque+0x1d8>)
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	330a      	adds	r3, #10
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b298      	uxth	r0, r3
 80044ec:	79fa      	ldrb	r2, [r7, #7]
 80044ee:	4924      	ldr	r1, [pc, #144]	; (8004580 <motor_setTorque+0x1d8>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4603      	mov	r3, r0
 8004500:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8004502:	e038      	b.n	8004576 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004504:	79fa      	ldrb	r2, [r7, #7]
 8004506:	491e      	ldr	r1, [pc, #120]	; (8004580 <motor_setTorque+0x1d8>)
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3304      	adds	r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d115      	bne.n	8004546 <motor_setTorque+0x19e>
 800451a:	79fa      	ldrb	r2, [r7, #7]
 800451c:	4918      	ldr	r1, [pc, #96]	; (8004580 <motor_setTorque+0x1d8>)
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	330a      	adds	r3, #10
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b298      	uxth	r0, r3
 800452e:	79fa      	ldrb	r2, [r7, #7]
 8004530:	4913      	ldr	r1, [pc, #76]	; (8004580 <motor_setTorque+0x1d8>)
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4603      	mov	r3, r0
 8004542:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8004544:	e017      	b.n	8004576 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004546:	79fa      	ldrb	r2, [r7, #7]
 8004548:	490d      	ldr	r1, [pc, #52]	; (8004580 <motor_setTorque+0x1d8>)
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	330a      	adds	r3, #10
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b298      	uxth	r0, r3
 800455a:	79fa      	ldrb	r2, [r7, #7]
 800455c:	4908      	ldr	r1, [pc, #32]	; (8004580 <motor_setTorque+0x1d8>)
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4603      	mov	r3, r0
 800456e:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004570:	e001      	b.n	8004576 <motor_setTorque+0x1ce>
		return;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <motor_setTorque+0x1d0>
	return;
 8004576:	bf00      	nop
}
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bd90      	pop	{r4, r7, pc}
 800457e:	bf00      	nop
 8004580:	20000860 	.word	0x20000860

08004584 <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	1a8a      	subs	r2, r1, r2
 800459e:	fb03 f202 	mul.w	r2, r3, r2
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1acb      	subs	r3, r1, r3
 80045a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4413      	add	r3, r2
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d821      	bhi.n	8004614 <cfg_NodeMotorVarProp+0x58>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <cfg_NodeMotorVarProp+0x1c>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045f1 	.word	0x080045f1
 80045dc:	080045f7 	.word	0x080045f7
 80045e0:	080045fd 	.word	0x080045fd
 80045e4:	08004603 	.word	0x08004603
 80045e8:	08004609 	.word	0x08004609
 80045ec:	0800460f 	.word	0x0800460f
	{
		case MOTOR_ENA:				str = "Enable"; break;
 80045f0:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <cfg_NodeMotorVarProp+0xf0>)
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e010      	b.n	8004618 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <cfg_NodeMotorVarProp+0xf4>)
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e00d      	b.n	8004618 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <cfg_NodeMotorVarProp+0xf8>)
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e00a      	b.n	8004618 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 8004602:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <cfg_NodeMotorVarProp+0xfc>)
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e007      	b.n	8004618 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <cfg_NodeMotorVarProp+0x100>)
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e004      	b.n	8004618 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <cfg_NodeMotorVarProp+0x104>)
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e001      	b.n	8004618 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 8004614:	2302      	movs	r3, #2
 8004616:	e043      	b.n	80046a0 <cfg_NodeMotorVarProp+0xe4>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00f      	beq.n	800463e <cfg_NodeMotorVarProp+0x82>
 800461e:	e007      	b.n	8004630 <cfg_NodeMotorVarProp+0x74>
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	1c53      	adds	r3, r2, #1
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1c59      	adds	r1, r3, #1
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f3      	bne.n	8004620 <cfg_NodeMotorVarProp+0x64>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02b      	beq.n	800469c <cfg_NodeMotorVarProp+0xe0>
 8004644:	89fb      	ldrh	r3, [r7, #14]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d826      	bhi.n	8004698 <cfg_NodeMotorVarProp+0xdc>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <cfg_NodeMotorVarProp+0x94>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004669 	.word	0x08004669
 8004654:	08004671 	.word	0x08004671
 8004658:	08004679 	.word	0x08004679
 800465c:	08004681 	.word	0x08004681
 8004660:	08004689 	.word	0x08004689
 8004664:	08004691 	.word	0x08004691
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2223      	movs	r2, #35	; 0x23
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	e016      	b.n	800469e <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	e012      	b.n	800469e <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2212      	movs	r2, #18
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e00e      	b.n	800469e <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2222      	movs	r2, #34	; 0x22
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e00a      	b.n	800469e <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2222      	movs	r2, #34	; 0x22
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e006      	b.n	800469e <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2222      	movs	r2, #34	; 0x22
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	e002      	b.n	800469e <cfg_NodeMotorVarProp+0xe2>
		default: return CFG_ERROR_VARID;
 8004698:	2302      	movs	r3, #2
 800469a:	e001      	b.n	80046a0 <cfg_NodeMotorVarProp+0xe4>
	}
	return CFG_ERROR_NONE;
 800469c:	bf00      	nop
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	0800a038 	.word	0x0800a038
 80046b0:	0800a040 	.word	0x0800a040
 80046b4:	0800a050 	.word	0x0800a050
 80046b8:	0800a05c 	.word	0x0800a05c
 80046bc:	0800a068 	.word	0x0800a068
 80046c0:	0800a070 	.word	0x0800a070

080046c4 <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d03e      	beq.n	8004754 <cfg_NodeMotorVarGet+0x90>
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d839      	bhi.n	8004750 <cfg_NodeMotorVarGet+0x8c>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <cfg_NodeMotorVarGet+0x20>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	0800470b 	.word	0x0800470b
 80046ec:	08004719 	.word	0x08004719
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004735 	.word	0x08004735
 80046f8:	08004743 	.word	0x08004743
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 80046fc:	4b19      	ldr	r3, [pc, #100]	; (8004764 <cfg_NodeMotorVarGet+0xa0>)
 80046fe:	7a1b      	ldrb	r3, [r3, #8]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e025      	b.n	8004756 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <cfg_NodeMotorVarGet+0xa0>)
 800470c:	7b1b      	ldrb	r3, [r3, #12]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e01e      	b.n	8004756 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 8004718:	4b12      	ldr	r3, [pc, #72]	; (8004764 <cfg_NodeMotorVarGet+0xa0>)
 800471a:	895b      	ldrh	r3, [r3, #10]
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e017      	b.n	8004756 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <cfg_NodeMotorVarGet+0xa0>)
 8004728:	89db      	ldrh	r3, [r3, #14]
 800472a:	b29b      	uxth	r3, r3
 800472c:	461a      	mov	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e010      	b.n	8004756 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <cfg_NodeMotorVarGet+0xa0>)
 8004736:	8a1b      	ldrh	r3, [r3, #16]
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e009      	b.n	8004756 <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <cfg_NodeMotorVarGet+0xa0>)
 8004744:	8a5b      	ldrh	r3, [r3, #18]
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e002      	b.n	8004756 <cfg_NodeMotorVarGet+0x92>
		default: return CFG_ERROR_VARID;
 8004750:	2302      	movs	r3, #2
 8004752:	e001      	b.n	8004758 <cfg_NodeMotorVarGet+0x94>
	}
	return CFG_ERROR_NONE;
 8004754:	bf00      	nop
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	20000860 	.word	0x20000860

08004768 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	6039      	str	r1, [r7, #0]
 8004772:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d036      	beq.n	80047e8 <cfg_NodeMotorVarSet+0x80>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d831      	bhi.n	80047e4 <cfg_NodeMotorVarSet+0x7c>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <cfg_NodeMotorVarSet+0x20>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047a1 	.word	0x080047a1
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047ed 	.word	0x080047ed
 8004794:	080047c1 	.word	0x080047c1
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047d9 	.word	0x080047d9
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	4619      	mov	r1, r3
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7ff fcdf 	bl	800416c <motor_setEnable>
 80047ae:	e01e      	b.n	80047ee <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff fdf5 	bl	80043a8 <motor_setTorque>
 80047be:	e016      	b.n	80047ee <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <cfg_NodeMotorVarSet+0x90>)
 80047c8:	81da      	strh	r2, [r3, #14]
 80047ca:	e010      	b.n	80047ee <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <cfg_NodeMotorVarSet+0x90>)
 80047d4:	821a      	strh	r2, [r3, #16]
 80047d6:	e00a      	b.n	80047ee <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <cfg_NodeMotorVarSet+0x90>)
 80047e0:	825a      	strh	r2, [r3, #18]
 80047e2:	e004      	b.n	80047ee <cfg_NodeMotorVarSet+0x86>
		default: return CFG_ERROR_VARID;
 80047e4:	2302      	movs	r3, #2
 80047e6:	e003      	b.n	80047f0 <cfg_NodeMotorVarSet+0x88>
	}
	return CFG_ERROR_NONE;
 80047e8:	bf00      	nop
 80047ea:	e000      	b.n	80047ee <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
 80047ec:	bf00      	nop
	return CFG_ERROR_NONE;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000860 	.word	0x20000860

080047fc <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e010      	b.n	800482c <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <rc_Timer+0x44>)
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <rc_Timer+0x2a>
			rc_info.timer[i]--;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	4a09      	ldr	r2, [pc, #36]	; (8004840 <rc_Timer+0x44>)
 800481a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800481e:	3a01      	subs	r2, #1
 8004820:	4907      	ldr	r1, [pc, #28]	; (8004840 <rc_Timer+0x44>)
 8004822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	3301      	adds	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d9eb      	bls.n	800480a <rc_Timer+0xe>
		}
	}

	return;
 8004832:	bf00      	nop
}
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000884 	.word	0x20000884

08004844 <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <rc_InitTask+0x4c>)
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <rc_InitTask+0x4c>)
 8004852:	2200      	movs	r2, #0
 8004854:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <rc_InitTask+0x4c>)
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <rc_InitTask+0x4c>)
 8004862:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004866:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <rc_InitTask+0x4c>)
 800486c:	2201      	movs	r2, #1
 800486e:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <rc_InitTask+0x4c>)
 8004874:	2200      	movs	r2, #0
 8004876:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <rc_InitTask+0x4c>)
 800487a:	2200      	movs	r2, #0
 800487c:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <rc_InitTask+0x4c>)
 8004880:	2200      	movs	r2, #0
 8004882:	721a      	strb	r2, [r3, #8]

	return;
 8004884:	bf00      	nop
}
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000884 	.word	0x20000884

08004894 <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 800489a:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <rc_Task+0x154>)
 800489c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d047      	beq.n	8004934 <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <rc_Task+0x154>)
 80048a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80048aa:	4a4f      	ldr	r2, [pc, #316]	; (80049e8 <rc_Task+0x154>)
 80048ac:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 80048ae:	4b4e      	ldr	r3, [pc, #312]	; (80049e8 <rc_Task+0x154>)
 80048b0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <rc_Task+0x2e>
			rc_info.connected = 1;
 80048ba:	4b4b      	ldr	r3, [pc, #300]	; (80049e8 <rc_Task+0x154>)
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 80048c2:	4b49      	ldr	r3, [pc, #292]	; (80049e8 <rc_Task+0x154>)
 80048c4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	b25a      	sxtb	r2, r3
 80048cc:	4b46      	ldr	r3, [pc, #280]	; (80049e8 <rc_Task+0x154>)
 80048ce:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 80048d2:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <rc_Task+0x154>)
 80048d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	b25a      	sxtb	r2, r3
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <rc_Task+0x154>)
 80048de:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <rc_Task+0x154>)
 80048e4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	b25a      	sxtb	r2, r3
 80048ec:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <rc_Task+0x154>)
 80048ee:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 80048f2:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <rc_Task+0x154>)
 80048f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	b25a      	sxtb	r2, r3
 80048fc:	4b3a      	ldr	r3, [pc, #232]	; (80049e8 <rc_Task+0x154>)
 80048fe:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <rc_Task+0x154>)
 8004904:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <rc_Task+0x154>)
 800490c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <rc_Task+0x154>)
 8004912:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004916:	b2da      	uxtb	r2, r3
 8004918:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <rc_Task+0x154>)
 800491a:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 800491e:	4b32      	ldr	r3, [pc, #200]	; (80049e8 <rc_Task+0x154>)
 8004920:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004924:	3301      	adds	r3, #1
 8004926:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <rc_Task+0x154>)
 8004928:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 800492c:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <rc_Task+0x154>)
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8004934:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <rc_Task+0x154>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <rc_Task+0xbc>
 800493c:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <rc_Task+0x154>)
 800493e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d103      	bne.n	8004950 <rc_Task+0xbc>
		rc_info.connected = 0;
 8004948:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <rc_Task+0x154>)
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <rc_Task+0x154>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d142      	bne.n	80049de <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <rc_Task+0x154>)
 800495a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d13c      	bne.n	80049de <rc_Task+0x14a>
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <rc_Task+0x154>)
 8004966:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d136      	bne.n	80049de <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <rc_Task+0x154>)
 8004972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004976:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 8004978:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 800497c:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f904 	bl	8004b90 <rc_AddTxData>
		tmp_u8 = 5;
 8004988:	2305      	movs	r3, #5
 800498a:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 800498c:	1dfb      	adds	r3, r7, #7
 800498e:	2101      	movs	r1, #1
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f8fd 	bl	8004b90 <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <rc_Task+0x158>)
 8004998:	7d5b      	ldrb	r3, [r3, #21]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	2101      	movs	r1, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f8f4 	bl	8004b90 <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <rc_Task+0x15c>)
 80049aa:	89db      	ldrh	r3, [r3, #14]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 80049b0:	1d3b      	adds	r3, r7, #4
 80049b2:	2102      	movs	r1, #2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f8eb 	bl	8004b90 <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <rc_Task+0x160>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	480d      	ldr	r0, [pc, #52]	; (80049f8 <rc_Task+0x164>)
 80049c4:	f7fe fa60 	bl	8002e88 <crc16_calc>
 80049c8:	4603      	mov	r3, r0
 80049ca:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f8dd 	bl	8004b90 <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 80049d6:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <rc_Task+0x160>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
	}

	return;
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
}
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000884 	.word	0x20000884
 80049ec:	20000120 	.word	0x20000120
 80049f0:	20000184 	.word	0x20000184
 80049f4:	20000a34 	.word	0x20000a34
 80049f8:	200009b4 	.word	0x200009b4

080049fc <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004a06:	4b4f      	ldr	r3, [pc, #316]	; (8004b44 <rc_RcvData+0x148>)
 8004a08:	899b      	ldrh	r3, [r3, #12]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a14:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <rc_RcvData+0x148>)
 8004a18:	4611      	mov	r1, r2
 8004a1a:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004a1c:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <rc_RcvData+0x148>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	79fa      	ldrb	r2, [r7, #7]
 8004a22:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8004a24:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <rc_RcvData+0x148>)
 8004a26:	7a1b      	ldrb	r3, [r3, #8]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d12a      	bne.n	8004a84 <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8004a2e:	4b45      	ldr	r3, [pc, #276]	; (8004b44 <rc_RcvData+0x148>)
 8004a30:	899b      	ldrh	r3, [r3, #12]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b02      	subs	r3, #2
 8004a36:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4841      	ldr	r0, [pc, #260]	; (8004b48 <rc_RcvData+0x14c>)
 8004a42:	f000 f885 	bl	8004b50 <rc_ringBufRead16b>
 8004a46:	4603      	mov	r3, r0
 8004a48:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d173      	bne.n	8004b3c <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <rc_RcvData+0x148>)
 8004a56:	899b      	ldrh	r3, [r3, #12]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b02      	subs	r3, #2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <rc_RcvData+0x148>)
 8004a66:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	4b37      	ldr	r3, [pc, #220]	; (8004b4c <rc_RcvData+0x150>)
 8004a6e:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b02      	subs	r3, #2
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	4b32      	ldr	r3, [pc, #200]	; (8004b44 <rc_RcvData+0x148>)
 8004a7a:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <rc_RcvData+0x148>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 8004a82:	e05b      	b.n	8004b3c <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 8004a84:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <rc_RcvData+0x148>)
 8004a86:	7a1b      	ldrb	r3, [r3, #8]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d156      	bne.n	8004b3c <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 8004a8e:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <rc_RcvData+0x150>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <rc_RcvData+0x150>)
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <rc_RcvData+0x150>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d14c      	bne.n	8004b3c <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004aa2:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <rc_RcvData+0x148>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004aa8:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <rc_RcvData+0x148>)
 8004aaa:	895b      	ldrh	r3, [r3, #10]
 8004aac:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 8004aae:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <rc_RcvData+0x148>)
 8004ab0:	89db      	ldrh	r3, [r3, #14]
 8004ab2:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004ab4:	3303      	adds	r3, #3
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	237f      	movs	r3, #127	; 0x7f
 8004aba:	4823      	ldr	r0, [pc, #140]	; (8004b48 <rc_RcvData+0x14c>)
 8004abc:	f7fe fa0e 	bl	8002edc <crc16_RingBuf>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <rc_RcvData+0x148>)
 8004ac6:	899b      	ldrh	r3, [r3, #12]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	481c      	ldr	r0, [pc, #112]	; (8004b48 <rc_RcvData+0x14c>)
 8004ad8:	f000 f83a 	bl	8004b50 <rc_ringBufRead16b>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	89bb      	ldrh	r3, [r7, #12]
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d12a      	bne.n	8004b3c <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <rc_RcvData+0x148>)
 8004ae8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d125      	bne.n	8004b3c <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004af0:	2300      	movs	r3, #0
 8004af2:	81fb      	strh	r3, [r7, #14]
 8004af4:	e014      	b.n	8004b20 <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <rc_RcvData+0x148>)
 8004af8:	895b      	ldrh	r3, [r3, #10]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	1cda      	adds	r2, r3, #3
 8004afe:	89fb      	ldrh	r3, [r7, #14]
 8004b00:	4413      	add	r3, r2
 8004b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8004b06:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004b08:	490e      	ldr	r1, [pc, #56]	; (8004b44 <rc_RcvData+0x148>)
 8004b0a:	440a      	add	r2, r1
 8004b0c:	7c12      	ldrb	r2, [r2, #16]
 8004b0e:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8004b10:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <rc_RcvData+0x148>)
 8004b12:	4413      	add	r3, r2
 8004b14:	460a      	mov	r2, r1
 8004b16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004b1a:	89fb      	ldrh	r3, [r7, #14]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	81fb      	strh	r3, [r7, #14]
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <rc_RcvData+0x148>)
 8004b22:	89db      	ldrh	r3, [r3, #14]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	89fa      	ldrh	r2, [r7, #14]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3e4      	bcc.n	8004af6 <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <rc_RcvData+0x148>)
 8004b2e:	89db      	ldrh	r3, [r3, #14]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <rc_RcvData+0x148>)
 8004b36:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
}
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000884 	.word	0x20000884
 8004b48:	20000894 	.word	0x20000894
 8004b4c:	20000a38 	.word	0x20000a38

08004b50 <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8004b6c:	89fb      	ldrh	r3, [r7, #14]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	440b      	add	r3, r1
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8004b80:	89fb      	ldrh	r3, [r7, #14]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <rc_AddTxData+0x40>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d80f      	bhi.n	8004bc8 <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <rc_AddTxData+0x40>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <rc_AddTxData+0x44>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f005 f99f 	bl	8009ef8 <memcpy>
	_rc_tx_buf_len += len;
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <rc_AddTxData+0x40>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <rc_AddTxData+0x40>)
 8004bc4:	6013      	str	r3, [r2, #0]

	return;
 8004bc6:	e000      	b.n	8004bca <rc_AddTxData+0x3a>
		return;
 8004bc8:	bf00      	nop
}
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000a34 	.word	0x20000a34
 8004bd4:	200009b4 	.word	0x200009b4

08004bd8 <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8004be6:	89fb      	ldrh	r3, [r7, #14]
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d835      	bhi.n	8004c58 <cfg_NodeRcVarProp+0x80>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <cfg_NodeRcVarProp+0x1c>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c1d 	.word	0x08004c1d
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c2f 	.word	0x08004c2f
 8004c04:	08004c35 	.word	0x08004c35
 8004c08:	08004c3b 	.word	0x08004c3b
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c53 	.word	0x08004c53
	{
		case RC_ENA:				str = "Enable"; break;
 8004c1c:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <cfg_NodeRcVarProp+0x148>)
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e01c      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8004c22:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <cfg_NodeRcVarProp+0x14c>)
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e019      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8004c28:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <cfg_NodeRcVarProp+0x150>)
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e016      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <cfg_NodeRcVarProp+0x154>)
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e013      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8004c34:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <cfg_NodeRcVarProp+0x158>)
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e010      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 8004c3a:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <cfg_NodeRcVarProp+0x15c>)
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e00d      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8004c40:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <cfg_NodeRcVarProp+0x160>)
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e00a      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 8004c46:	4b3d      	ldr	r3, [pc, #244]	; (8004d3c <cfg_NodeRcVarProp+0x164>)
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e007      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8004c4c:	4b3c      	ldr	r3, [pc, #240]	; (8004d40 <cfg_NodeRcVarProp+0x168>)
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e004      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8004c52:	4b3c      	ldr	r3, [pc, #240]	; (8004d44 <cfg_NodeRcVarProp+0x16c>)
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e001      	b.n	8004c5c <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e05b      	b.n	8004d14 <cfg_NodeRcVarProp+0x13c>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00f      	beq.n	8004c82 <cfg_NodeRcVarProp+0xaa>
 8004c62:	e007      	b.n	8004c74 <cfg_NodeRcVarProp+0x9c>
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	1c53      	adds	r3, r2, #1
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f3      	bne.n	8004c64 <cfg_NodeRcVarProp+0x8c>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d043      	beq.n	8004d10 <cfg_NodeRcVarProp+0x138>
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d83e      	bhi.n	8004d0c <cfg_NodeRcVarProp+0x134>
 8004c8e:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <cfg_NodeRcVarProp+0xbc>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004cbd 	.word	0x08004cbd
 8004c98:	08004cc5 	.word	0x08004cc5
 8004c9c:	08004ccd 	.word	0x08004ccd
 8004ca0:	08004cd5 	.word	0x08004cd5
 8004ca4:	08004cdd 	.word	0x08004cdd
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004cf5 	.word	0x08004cf5
 8004cb4:	08004cfd 	.word	0x08004cfd
 8004cb8:	08004d05 	.word	0x08004d05
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2223      	movs	r2, #35	; 0x23
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	e026      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2222      	movs	r2, #34	; 0x22
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	e022      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2223      	movs	r2, #35	; 0x23
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	e01e      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2212      	movs	r2, #18
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	e01a      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2211      	movs	r2, #17
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	e016      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2211      	movs	r2, #17
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	e012      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2211      	movs	r2, #17
 8004cf0:	801a      	strh	r2, [r3, #0]
 8004cf2:	e00e      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2211      	movs	r2, #17
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	e00a      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2213      	movs	r2, #19
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e006      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2213      	movs	r2, #19
 8004d08:	801a      	strh	r2, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <cfg_NodeRcVarProp+0x13a>
		default: return CFG_ERROR_VARID;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e001      	b.n	8004d14 <cfg_NodeRcVarProp+0x13c>
	}
	return CFG_ERROR_NONE;
 8004d10:	bf00      	nop
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	0800a078 	.word	0x0800a078
 8004d24:	0800a080 	.word	0x0800a080
 8004d28:	0800a098 	.word	0x0800a098
 8004d2c:	0800a0a8 	.word	0x0800a0a8
 8004d30:	0800a0b8 	.word	0x0800a0b8
 8004d34:	0800a0c4 	.word	0x0800a0c4
 8004d38:	0800a0d0 	.word	0x0800a0d0
 8004d3c:	0800a0e0 	.word	0x0800a0e0
 8004d40:	0800a0f0 	.word	0x0800a0f0
 8004d44:	0800a0fc 	.word	0x0800a0fc

08004d48 <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06a      	beq.n	8004e30 <cfg_NodeRcVarGet+0xe8>
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d865      	bhi.n	8004e2c <cfg_NodeRcVarGet+0xe4>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <cfg_NodeRcVarGet+0x20>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004db1 	.word	0x08004db1
 8004d74:	08004dc1 	.word	0x08004dc1
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004ddd 	.word	0x08004ddd
 8004d80:	08004ded 	.word	0x08004ded
 8004d84:	08004dfd 	.word	0x08004dfd
 8004d88:	08004e0d 	.word	0x08004e0d
 8004d8c:	08004e1d 	.word	0x08004e1d
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004d92:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e048      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 8004da0:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004da2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e040      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 8004db0:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004db2:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e038      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 8004dc0:	4b1f      	ldr	r3, [pc, #124]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004dc2:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e032      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004dce:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004dd2:	b25b      	sxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e02a      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004dde:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e022      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004dee:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e01a      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004dfe:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e012      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004e0e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e00a      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <cfg_NodeRcVarGet+0xf8>)
 8004e1e:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <cfg_NodeRcVarGet+0xea>
		default: return CFG_ERROR_VARID;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e001      	b.n	8004e34 <cfg_NodeRcVarGet+0xec>
	}
	return CFG_ERROR_NONE;
 8004e30:	bf00      	nop
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20000884 	.word	0x20000884

08004e44 <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d031      	beq.n	8004eba <cfg_NodeRcVarSet+0x76>
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b09      	cmp	r3, #9
 8004e5a:	d82c      	bhi.n	8004eb6 <cfg_NodeRcVarSet+0x72>
 8004e5c:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <cfg_NodeRcVarSet+0x20>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e9b 	.word	0x08004e9b
 8004e6c:	08004ea9 	.word	0x08004ea9
 8004e70:	08004ebf 	.word	0x08004ebf
 8004e74:	08004ebf 	.word	0x08004ebf
 8004e78:	08004ebf 	.word	0x08004ebf
 8004e7c:	08004ebf 	.word	0x08004ebf
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004ebf 	.word	0x08004ebf
 8004e88:	08004ebf 	.word	0x08004ebf
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <cfg_NodeRcVarSet+0x8c>)
 8004e94:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004e98:	e012      	b.n	8004ec0 <cfg_NodeRcVarSet+0x7c>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <cfg_NodeRcVarSet+0x8c>)
 8004ea2:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 8004ea6:	e00b      	b.n	8004ec0 <cfg_NodeRcVarSet+0x7c>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <cfg_NodeRcVarSet+0x8c>)
 8004eb0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004eb4:	e004      	b.n	8004ec0 <cfg_NodeRcVarSet+0x7c>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e003      	b.n	8004ec2 <cfg_NodeRcVarSet+0x7e>
	}
	return CFG_ERROR_NONE;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <cfg_NodeRcVarSet+0x7c>
		case RC_RX_PKT_CNT:			break;
 8004ebe:	bf00      	nop
	return CFG_ERROR_NONE;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000884 	.word	0x20000884

08004ed4 <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	e014      	b.n	8004f0c <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <servo_Timer+0x4c>)
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <servo_Timer+0x32>
			servo_info.timer[i]--;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	490b      	ldr	r1, [pc, #44]	; (8004f20 <servo_Timer+0x4c>)
 8004ef4:	f103 020c 	add.w	r2, r3, #12
 8004ef8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004efc:	3a01      	subs	r2, #1
 8004efe:	4908      	ldr	r1, [pc, #32]	; (8004f20 <servo_Timer+0x4c>)
 8004f00:	330c      	adds	r3, #12
 8004f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0e7      	beq.n	8004ee2 <servo_Timer+0xe>
		}
	}

	return;
 8004f12:	bf00      	nop
}
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000a3c 	.word	0x20000a3c

08004f24 <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <servo_InitTask+0xfc>)
 8004f2c:	4a3d      	ldr	r2, [pc, #244]	; (8005024 <servo_InitTask+0x100>)
 8004f2e:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 8004f30:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <servo_InitTask+0xfc>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 8004f36:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <servo_InitTask+0xfc>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 8004f3c:	4b38      	ldr	r3, [pc, #224]	; (8005020 <servo_InitTask+0xfc>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <servo_InitTask+0xfc>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 80;
 8004f48:	4b35      	ldr	r3, [pc, #212]	; (8005020 <servo_InitTask+0xfc>)
 8004f4a:	2250      	movs	r2, #80	; 0x50
 8004f4c:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 100;
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <servo_InitTask+0xfc>)
 8004f50:	2264      	movs	r2, #100	; 0x64
 8004f52:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 125;
 8004f54:	4b32      	ldr	r3, [pc, #200]	; (8005020 <servo_InitTask+0xfc>)
 8004f56:	227d      	movs	r2, #125	; 0x7d
 8004f58:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <servo_InitTask+0xfc>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 8004f60:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <servo_InitTask+0xfc>)
 8004f62:	4a30      	ldr	r2, [pc, #192]	; (8005024 <servo_InitTask+0x100>)
 8004f64:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 8004f66:	4b2e      	ldr	r3, [pc, #184]	; (8005020 <servo_InitTask+0xfc>)
 8004f68:	2204      	movs	r2, #4
 8004f6a:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 8004f6c:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <servo_InitTask+0xfc>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <servo_InitTask+0xfc>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 8004f78:	4b29      	ldr	r3, [pc, #164]	; (8005020 <servo_InitTask+0xfc>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 45;
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <servo_InitTask+0xfc>)
 8004f82:	222d      	movs	r2, #45	; 0x2d
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <servo_InitTask+0xfc>)
 8004f88:	225a      	movs	r2, #90	; 0x5a
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 125;
 8004f8c:	4b24      	ldr	r3, [pc, #144]	; (8005020 <servo_InitTask+0xfc>)
 8004f8e:	227d      	movs	r2, #125	; 0x7d
 8004f90:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <servo_InitTask+0xfc>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	71fb      	strb	r3, [r7, #7]
 8004f9e:	e02a      	b.n	8004ff6 <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 8004fa0:	79fa      	ldrb	r2, [r7, #7]
 8004fa2:	491f      	ldr	r1, [pc, #124]	; (8005020 <servo_InitTask+0xfc>)
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	4413      	add	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	440b      	add	r3, r1
 8004fae:	330a      	adds	r3, #10
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 8004fb4:	79fa      	ldrb	r2, [r7, #7]
 8004fb6:	491a      	ldr	r1, [pc, #104]	; (8005020 <servo_InitTask+0xfc>)
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 8004fc8:	79fa      	ldrb	r2, [r7, #7]
 8004fca:	4915      	ldr	r1, [pc, #84]	; (8005020 <servo_InitTask+0xfc>)
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	79fa      	ldrb	r2, [r7, #7]
 8004fda:	4911      	ldr	r1, [pc, #68]	; (8005020 <servo_InitTask+0xfc>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	f002 ffe6 	bl	8007fbc <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	71fb      	strb	r3, [r7, #7]
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d9d1      	bls.n	8004fa0 <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <servo_InitTask+0xfc>)
 8004ffe:	8a5b      	ldrh	r3, [r3, #18]
 8005000:	b29b      	uxth	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	2000      	movs	r0, #0
 8005006:	f000 f82b 	bl	8005060 <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <servo_InitTask+0xfc>)
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	2001      	movs	r0, #1
 8005014:	f000 f824 	bl	8005060 <servo_setAng>

	return;
 8005018:	bf00      	nop
}
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000a3c 	.word	0x20000a3c
 8005024:	2000058c 	.word	0x2000058c

08005028 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 800502c:	bf00      	nop
}
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	4603      	mov	r3, r0
 800503e:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	461a      	mov	r2, r3
 8005044:	0052      	lsls	r2, r2, #1
 8005046:	4413      	add	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	33f5      	adds	r3, #245	; 0xf5
 800504e:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 8005050:	89fb      	ldrh	r3, [r7, #14]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	460a      	mov	r2, r1
 800506a:	71fb      	strb	r3, [r7, #7]
 800506c:	4613      	mov	r3, r2
 800506e:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b01      	cmp	r3, #1
 8005074:	f200 809f 	bhi.w	80051b6 <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 8005078:	79fa      	ldrb	r2, [r7, #7]
 800507a:	4952      	ldr	r1, [pc, #328]	; (80051c4 <servo_setAng+0x164>)
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	330c      	adds	r3, #12
 8005088:	88ba      	ldrh	r2, [r7, #4]
 800508a:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 800508c:	79fc      	ldrb	r4, [r7, #7]
 800508e:	88bb      	ldrh	r3, [r7, #4]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff ffd0 	bl	8005036 <servo_angToPWM>
 8005096:	4603      	mov	r3, r0
 8005098:	4619      	mov	r1, r3
 800509a:	4a4a      	ldr	r2, [pc, #296]	; (80051c4 <servo_setAng+0x164>)
 800509c:	4623      	mov	r3, r4
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4423      	add	r3, r4
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	330a      	adds	r3, #10
 80050a8:	460a      	mov	r2, r1
 80050aa:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 80050ac:	79fa      	ldrb	r2, [r7, #7]
 80050ae:	4945      	ldr	r1, [pc, #276]	; (80051c4 <servo_setAng+0x164>)
 80050b0:	4613      	mov	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	4413      	add	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	440b      	add	r3, r1
 80050ba:	3308      	adds	r3, #8
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d17a      	bne.n	80051ba <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 80050c4:	79fa      	ldrb	r2, [r7, #7]
 80050c6:	493f      	ldr	r1, [pc, #252]	; (80051c4 <servo_setAng+0x164>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	3304      	adds	r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d115      	bne.n	8005106 <servo_setAng+0xa6>
 80050da:	79fa      	ldrb	r2, [r7, #7]
 80050dc:	4939      	ldr	r1, [pc, #228]	; (80051c4 <servo_setAng+0x164>)
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	440b      	add	r3, r1
 80050e8:	330a      	adds	r3, #10
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b298      	uxth	r0, r3
 80050ee:	79fa      	ldrb	r2, [r7, #7]
 80050f0:	4934      	ldr	r1, [pc, #208]	; (80051c4 <servo_setAng+0x164>)
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4602      	mov	r2, r0
 8005102:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8005104:	e059      	b.n	80051ba <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005106:	79fa      	ldrb	r2, [r7, #7]
 8005108:	492e      	ldr	r1, [pc, #184]	; (80051c4 <servo_setAng+0x164>)
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	3304      	adds	r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d115      	bne.n	8005148 <servo_setAng+0xe8>
 800511c:	79fa      	ldrb	r2, [r7, #7]
 800511e:	4929      	ldr	r1, [pc, #164]	; (80051c4 <servo_setAng+0x164>)
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	440b      	add	r3, r1
 800512a:	330a      	adds	r3, #10
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b298      	uxth	r0, r3
 8005130:	79fa      	ldrb	r2, [r7, #7]
 8005132:	4924      	ldr	r1, [pc, #144]	; (80051c4 <servo_setAng+0x164>)
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	440b      	add	r3, r1
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4603      	mov	r3, r0
 8005144:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005146:	e038      	b.n	80051ba <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005148:	79fa      	ldrb	r2, [r7, #7]
 800514a:	491e      	ldr	r1, [pc, #120]	; (80051c4 <servo_setAng+0x164>)
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	3304      	adds	r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b08      	cmp	r3, #8
 800515c:	d115      	bne.n	800518a <servo_setAng+0x12a>
 800515e:	79fa      	ldrb	r2, [r7, #7]
 8005160:	4918      	ldr	r1, [pc, #96]	; (80051c4 <servo_setAng+0x164>)
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	330a      	adds	r3, #10
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b298      	uxth	r0, r3
 8005172:	79fa      	ldrb	r2, [r7, #7]
 8005174:	4913      	ldr	r1, [pc, #76]	; (80051c4 <servo_setAng+0x164>)
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	440b      	add	r3, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005188:	e017      	b.n	80051ba <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800518a:	79fa      	ldrb	r2, [r7, #7]
 800518c:	490d      	ldr	r1, [pc, #52]	; (80051c4 <servo_setAng+0x164>)
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	330a      	adds	r3, #10
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b298      	uxth	r0, r3
 800519e:	79fa      	ldrb	r2, [r7, #7]
 80051a0:	4908      	ldr	r1, [pc, #32]	; (80051c4 <servo_setAng+0x164>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4603      	mov	r3, r0
 80051b2:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80051b4:	e001      	b.n	80051ba <servo_setAng+0x15a>
		return;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <servo_setAng+0x15c>
	return;
 80051ba:	bf00      	nop
}
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000a3c 	.word	0x20000a3c

080051c8 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	4603      	mov	r3, r0
 80051d0:	460a      	mov	r2, r1
 80051d2:	71fb      	strb	r3, [r7, #7]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d854      	bhi.n	8005288 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 80051de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	dc52      	bgt.n	800528c <servo_setPercnet+0xc4>
 80051e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051ea:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80051ee:	db4d      	blt.n	800528c <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 80051f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db1f      	blt.n	8005238 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 80051f8:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 80051fc:	79fa      	ldrb	r2, [r7, #7]
 80051fe:	4925      	ldr	r1, [pc, #148]	; (8005294 <servo_setPercnet+0xcc>)
 8005200:	4613      	mov	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	440b      	add	r3, r1
 800520a:	3312      	adds	r3, #18
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005210:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 8005212:	79fa      	ldrb	r2, [r7, #7]
 8005214:	491f      	ldr	r1, [pc, #124]	; (8005294 <servo_setPercnet+0xcc>)
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	3314      	adds	r3, #20
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4623      	mov	r3, r4
 800522a:	2264      	movs	r2, #100	; 0x64
 800522c:	2100      	movs	r1, #0
 800522e:	f000 f929 	bl	8005484 <servo_map>
 8005232:	4603      	mov	r3, r0
 8005234:	81fb      	strh	r3, [r7, #14]
 8005236:	e020      	b.n	800527a <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005238:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	4915      	ldr	r1, [pc, #84]	; (8005294 <servo_setPercnet+0xcc>)
 8005240:	4613      	mov	r3, r2
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	4413      	add	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	440b      	add	r3, r1
 800524a:	3312      	adds	r3, #18
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005250:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 8005252:	79fa      	ldrb	r2, [r7, #7]
 8005254:	490f      	ldr	r1, [pc, #60]	; (8005294 <servo_setPercnet+0xcc>)
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	3310      	adds	r3, #16
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	4623      	mov	r3, r4
 800526a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800526e:	f04f 31ff 	mov.w	r1, #4294967295
 8005272:	f000 f907 	bl	8005484 <servo_map>
 8005276:	4603      	mov	r3, r0
 8005278:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 800527a:	89fa      	ldrh	r2, [r7, #14]
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff feed 	bl	8005060 <servo_setAng>

	return;
 8005286:	e002      	b.n	800528e <servo_setPercnet+0xc6>
		return;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <servo_setPercnet+0xc6>
		return;
 800528c:	bf00      	nop
}
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	bd90      	pop	{r4, r7, pc}
 8005294:	20000a3c 	.word	0x20000a3c

08005298 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	460a      	mov	r2, r1
 80052a2:	71fb      	strb	r3, [r7, #7]
 80052a4:	4613      	mov	r3, r2
 80052a6:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	f200 80e1 	bhi.w	8005472 <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 80052b0:	79fa      	ldrb	r2, [r7, #7]
 80052b2:	4973      	ldr	r1, [pc, #460]	; (8005480 <servo_setEnable+0x1e8>)
 80052b4:	4613      	mov	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	440b      	add	r3, r1
 80052be:	3308      	adds	r3, #8
 80052c0:	79ba      	ldrb	r2, [r7, #6]
 80052c2:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	496e      	ldr	r1, [pc, #440]	; (8005480 <servo_setEnable+0x1e8>)
 80052c8:	4613      	mov	r3, r2
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	3308      	adds	r3, #8
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d178      	bne.n	80053ce <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 80052dc:	79fa      	ldrb	r2, [r7, #7]
 80052de:	4968      	ldr	r1, [pc, #416]	; (8005480 <servo_setEnable+0x1e8>)
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3304      	adds	r3, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d115      	bne.n	800531e <servo_setEnable+0x86>
 80052f2:	79fa      	ldrb	r2, [r7, #7]
 80052f4:	4962      	ldr	r1, [pc, #392]	; (8005480 <servo_setEnable+0x1e8>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	440b      	add	r3, r1
 8005300:	330a      	adds	r3, #10
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b298      	uxth	r0, r3
 8005306:	79fa      	ldrb	r2, [r7, #7]
 8005308:	495d      	ldr	r1, [pc, #372]	; (8005480 <servo_setEnable+0x1e8>)
 800530a:	4613      	mov	r3, r2
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	440b      	add	r3, r1
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4602      	mov	r2, r0
 800531a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 800531c:	e0aa      	b.n	8005474 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800531e:	79fa      	ldrb	r2, [r7, #7]
 8005320:	4957      	ldr	r1, [pc, #348]	; (8005480 <servo_setEnable+0x1e8>)
 8005322:	4613      	mov	r3, r2
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	3304      	adds	r3, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d115      	bne.n	8005360 <servo_setEnable+0xc8>
 8005334:	79fa      	ldrb	r2, [r7, #7]
 8005336:	4952      	ldr	r1, [pc, #328]	; (8005480 <servo_setEnable+0x1e8>)
 8005338:	4613      	mov	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	440b      	add	r3, r1
 8005342:	330a      	adds	r3, #10
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b298      	uxth	r0, r3
 8005348:	79fa      	ldrb	r2, [r7, #7]
 800534a:	494d      	ldr	r1, [pc, #308]	; (8005480 <servo_setEnable+0x1e8>)
 800534c:	4613      	mov	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	440b      	add	r3, r1
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4603      	mov	r3, r0
 800535c:	6393      	str	r3, [r2, #56]	; 0x38
 800535e:	e087      	b.n	8005470 <servo_setEnable+0x1d8>
 8005360:	79fa      	ldrb	r2, [r7, #7]
 8005362:	4947      	ldr	r1, [pc, #284]	; (8005480 <servo_setEnable+0x1e8>)
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	440b      	add	r3, r1
 800536e:	3304      	adds	r3, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b08      	cmp	r3, #8
 8005374:	d115      	bne.n	80053a2 <servo_setEnable+0x10a>
 8005376:	79fa      	ldrb	r2, [r7, #7]
 8005378:	4941      	ldr	r1, [pc, #260]	; (8005480 <servo_setEnable+0x1e8>)
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	330a      	adds	r3, #10
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b298      	uxth	r0, r3
 800538a:	79fa      	ldrb	r2, [r7, #7]
 800538c:	493c      	ldr	r1, [pc, #240]	; (8005480 <servo_setEnable+0x1e8>)
 800538e:	4613      	mov	r3, r2
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4413      	add	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	440b      	add	r3, r1
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4603      	mov	r3, r0
 800539e:	63d3      	str	r3, [r2, #60]	; 0x3c
 80053a0:	e066      	b.n	8005470 <servo_setEnable+0x1d8>
 80053a2:	79fa      	ldrb	r2, [r7, #7]
 80053a4:	4936      	ldr	r1, [pc, #216]	; (8005480 <servo_setEnable+0x1e8>)
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	440b      	add	r3, r1
 80053b0:	330a      	adds	r3, #10
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b298      	uxth	r0, r3
 80053b6:	79fa      	ldrb	r2, [r7, #7]
 80053b8:	4931      	ldr	r1, [pc, #196]	; (8005480 <servo_setEnable+0x1e8>)
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4603      	mov	r3, r0
 80053ca:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80053cc:	e052      	b.n	8005474 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 80053ce:	79fa      	ldrb	r2, [r7, #7]
 80053d0:	492b      	ldr	r1, [pc, #172]	; (8005480 <servo_setEnable+0x1e8>)
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	440b      	add	r3, r1
 80053dc:	3304      	adds	r3, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <servo_setEnable+0x164>
 80053e4:	79fa      	ldrb	r2, [r7, #7]
 80053e6:	4926      	ldr	r1, [pc, #152]	; (8005480 <servo_setEnable+0x1e8>)
 80053e8:	4613      	mov	r3, r2
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	4413      	add	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	440b      	add	r3, r1
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80053fa:	e03b      	b.n	8005474 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 80053fc:	79fa      	ldrb	r2, [r7, #7]
 80053fe:	4920      	ldr	r1, [pc, #128]	; (8005480 <servo_setEnable+0x1e8>)
 8005400:	4613      	mov	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	440b      	add	r3, r1
 800540a:	3304      	adds	r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d10b      	bne.n	800542a <servo_setEnable+0x192>
 8005412:	79fa      	ldrb	r2, [r7, #7]
 8005414:	491a      	ldr	r1, [pc, #104]	; (8005480 <servo_setEnable+0x1e8>)
 8005416:	4613      	mov	r3, r2
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	4413      	add	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	440b      	add	r3, r1
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005428:	e024      	b.n	8005474 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800542a:	79fa      	ldrb	r2, [r7, #7]
 800542c:	4914      	ldr	r1, [pc, #80]	; (8005480 <servo_setEnable+0x1e8>)
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	3304      	adds	r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d10b      	bne.n	8005458 <servo_setEnable+0x1c0>
 8005440:	79fa      	ldrb	r2, [r7, #7]
 8005442:	490f      	ldr	r1, [pc, #60]	; (8005480 <servo_setEnable+0x1e8>)
 8005444:	4613      	mov	r3, r2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4413      	add	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	440b      	add	r3, r1
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005456:	e00d      	b.n	8005474 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005458:	79fa      	ldrb	r2, [r7, #7]
 800545a:	4909      	ldr	r1, [pc, #36]	; (8005480 <servo_setEnable+0x1e8>)
 800545c:	4613      	mov	r3, r2
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4413      	add	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	440b      	add	r3, r1
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800546e:	e001      	b.n	8005474 <servo_setEnable+0x1dc>
 8005470:	e000      	b.n	8005474 <servo_setEnable+0x1dc>
		return;
 8005472:	bf00      	nop
}
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000a3c 	.word	0x20000a3c

08005484 <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	1a8a      	subs	r2, r1, r2
 800549e:	fb03 f202 	mul.w	r2, r3, r2
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	1acb      	subs	r3, r1, r3
 80054a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4413      	add	r3, r2
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80054ca:	89fb      	ldrh	r3, [r7, #14]
 80054cc:	2b0d      	cmp	r3, #13
 80054ce:	d849      	bhi.n	8005564 <cfg_NodeServoVarProp+0xa8>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <cfg_NodeServoVarProp+0x1c>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	08005511 	.word	0x08005511
 80054dc:	08005517 	.word	0x08005517
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005529 	.word	0x08005529
 80054ec:	0800552f 	.word	0x0800552f
 80054f0:	08005535 	.word	0x08005535
 80054f4:	0800553b 	.word	0x0800553b
 80054f8:	08005541 	.word	0x08005541
 80054fc:	08005547 	.word	0x08005547
 8005500:	0800554d 	.word	0x0800554d
 8005504:	08005553 	.word	0x08005553
 8005508:	08005559 	.word	0x08005559
 800550c:	0800555f 	.word	0x0800555f
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 8005510:	4b52      	ldr	r3, [pc, #328]	; (800565c <cfg_NodeServoVarProp+0x1a0>)
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e028      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 8005516:	4b52      	ldr	r3, [pc, #328]	; (8005660 <cfg_NodeServoVarProp+0x1a4>)
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e025      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 800551c:	4b51      	ldr	r3, [pc, #324]	; (8005664 <cfg_NodeServoVarProp+0x1a8>)
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e022      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 8005522:	4b51      	ldr	r3, [pc, #324]	; (8005668 <cfg_NodeServoVarProp+0x1ac>)
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e01f      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 8005528:	4b50      	ldr	r3, [pc, #320]	; (800566c <cfg_NodeServoVarProp+0x1b0>)
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e01c      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 800552e:	4b50      	ldr	r3, [pc, #320]	; (8005670 <cfg_NodeServoVarProp+0x1b4>)
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e019      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 8005534:	4b4f      	ldr	r3, [pc, #316]	; (8005674 <cfg_NodeServoVarProp+0x1b8>)
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e016      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 800553a:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <cfg_NodeServoVarProp+0x1bc>)
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e013      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 8005540:	4b4e      	ldr	r3, [pc, #312]	; (800567c <cfg_NodeServoVarProp+0x1c0>)
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e010      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 8005546:	4b4e      	ldr	r3, [pc, #312]	; (8005680 <cfg_NodeServoVarProp+0x1c4>)
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e00d      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 800554c:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <cfg_NodeServoVarProp+0x1c8>)
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e00a      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 8005552:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <cfg_NodeServoVarProp+0x1cc>)
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e007      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 8005558:	4b4c      	ldr	r3, [pc, #304]	; (800568c <cfg_NodeServoVarProp+0x1d0>)
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	e004      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 800555e:	4b4c      	ldr	r3, [pc, #304]	; (8005690 <cfg_NodeServoVarProp+0x1d4>)
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	e001      	b.n	8005568 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 8005564:	2302      	movs	r3, #2
 8005566:	e073      	b.n	8005650 <cfg_NodeServoVarProp+0x194>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00f      	beq.n	800558e <cfg_NodeServoVarProp+0xd2>
 800556e:	e007      	b.n	8005580 <cfg_NodeServoVarProp+0xc4>
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	1c53      	adds	r3, r2, #1
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	1c59      	adds	r1, r3, #1
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f3      	bne.n	8005570 <cfg_NodeServoVarProp+0xb4>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05b      	beq.n	800564c <cfg_NodeServoVarProp+0x190>
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	2b0d      	cmp	r3, #13
 8005598:	d856      	bhi.n	8005648 <cfg_NodeServoVarProp+0x18c>
 800559a:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <cfg_NodeServoVarProp+0xe4>)
 800559c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a0:	080055d9 	.word	0x080055d9
 80055a4:	080055e1 	.word	0x080055e1
 80055a8:	080055e9 	.word	0x080055e9
 80055ac:	080055f1 	.word	0x080055f1
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	08005601 	.word	0x08005601
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005611 	.word	0x08005611
 80055c0:	08005619 	.word	0x08005619
 80055c4:	08005621 	.word	0x08005621
 80055c8:	08005629 	.word	0x08005629
 80055cc:	08005631 	.word	0x08005631
 80055d0:	08005639 	.word	0x08005639
 80055d4:	08005641 	.word	0x08005641
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2223      	movs	r2, #35	; 0x23
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e036      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	e032      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2212      	movs	r2, #18
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	e02e      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	e02a      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2222      	movs	r2, #34	; 0x22
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e026      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2222      	movs	r2, #34	; 0x22
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e022      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2222      	movs	r2, #34	; 0x22
 800560c:	801a      	strh	r2, [r3, #0]
 800560e:	e01e      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2223      	movs	r2, #35	; 0x23
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	e01a      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e016      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2212      	movs	r2, #18
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	e012      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e00e      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2222      	movs	r2, #34	; 0x22
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e00a      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2222      	movs	r2, #34	; 0x22
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	e006      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2222      	movs	r2, #34	; 0x22
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e002      	b.n	800564e <cfg_NodeServoVarProp+0x192>
		default: return CFG_ERROR_VARID;
 8005648:	2302      	movs	r3, #2
 800564a:	e001      	b.n	8005650 <cfg_NodeServoVarProp+0x194>
	}
	return CFG_ERROR_NONE;
 800564c:	bf00      	nop
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	0800a10c 	.word	0x0800a10c
 8005660:	0800a118 	.word	0x0800a118
 8005664:	0800a12c 	.word	0x0800a12c
 8005668:	0800a140 	.word	0x0800a140
 800566c:	0800a154 	.word	0x0800a154
 8005670:	0800a164 	.word	0x0800a164
 8005674:	0800a178 	.word	0x0800a178
 8005678:	0800a188 	.word	0x0800a188
 800567c:	0800a198 	.word	0x0800a198
 8005680:	0800a1ac 	.word	0x0800a1ac
 8005684:	0800a1c0 	.word	0x0800a1c0
 8005688:	0800a1d4 	.word	0x0800a1d4
 800568c:	0800a1e4 	.word	0x0800a1e4
 8005690:	0800a1f8 	.word	0x0800a1f8

08005694 <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 808a 	beq.w	80057bc <cfg_NodeServoVarGet+0x128>
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	2b0d      	cmp	r3, #13
 80056ac:	f200 8084 	bhi.w	80057b8 <cfg_NodeServoVarGet+0x124>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <cfg_NodeServoVarGet+0x24>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056f1 	.word	0x080056f1
 80056bc:	080056ff 	.word	0x080056ff
 80056c0:	0800570d 	.word	0x0800570d
 80056c4:	0800571b 	.word	0x0800571b
 80056c8:	08005729 	.word	0x08005729
 80056cc:	08005737 	.word	0x08005737
 80056d0:	08005745 	.word	0x08005745
 80056d4:	08005753 	.word	0x08005753
 80056d8:	08005763 	.word	0x08005763
 80056dc:	08005771 	.word	0x08005771
 80056e0:	0800577f 	.word	0x0800577f
 80056e4:	0800578f 	.word	0x0800578f
 80056e8:	0800579d 	.word	0x0800579d
 80056ec:	080057ab 	.word	0x080057ab
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 80056f0:	4b36      	ldr	r3, [pc, #216]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 80056f2:	7a1b      	ldrb	r3, [r3, #8]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e05f      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005700:	899b      	ldrh	r3, [r3, #12]
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e058      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 800570c:	4b2f      	ldr	r3, [pc, #188]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 800570e:	895b      	ldrh	r3, [r3, #10]
 8005710:	b29b      	uxth	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e051      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 800571a:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 800571c:	7b9b      	ldrb	r3, [r3, #14]
 800571e:	b25b      	sxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e04a      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 8005728:	4b28      	ldr	r3, [pc, #160]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 800572a:	8a1b      	ldrh	r3, [r3, #16]
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e043      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 8005736:	4b25      	ldr	r3, [pc, #148]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005738:	8a5b      	ldrh	r3, [r3, #18]
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e03c      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 8005744:	4b21      	ldr	r3, [pc, #132]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005746:	8a9b      	ldrh	r3, [r3, #20]
 8005748:	b29b      	uxth	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e035      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e02d      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 8005762:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005764:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e026      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005772:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e01f      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 800577e:	4b13      	ldr	r3, [pc, #76]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005780:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005784:	b25b      	sxtb	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e017      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e010      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e009      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 80057aa:	4b08      	ldr	r3, [pc, #32]	; (80057cc <cfg_NodeServoVarGet+0x138>)
 80057ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e002      	b.n	80057be <cfg_NodeServoVarGet+0x12a>
		default: return CFG_ERROR_VARID;
 80057b8:	2302      	movs	r3, #2
 80057ba:	e001      	b.n	80057c0 <cfg_NodeServoVarGet+0x12c>
	}
	return CFG_ERROR_NONE;
 80057bc:	bf00      	nop
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000a3c 	.word	0x20000a3c

080057d0 <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	6039      	str	r1, [r7, #0]
 80057da:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d078      	beq.n	80058d4 <cfg_NodeServoVarSet+0x104>
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	2b0d      	cmp	r3, #13
 80057e6:	d873      	bhi.n	80058d0 <cfg_NodeServoVarSet+0x100>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <cfg_NodeServoVarSet+0x20>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005829 	.word	0x08005829
 80057f4:	08005839 	.word	0x08005839
 80057f8:	080058d9 	.word	0x080058d9
 80057fc:	08005849 	.word	0x08005849
 8005800:	08005859 	.word	0x08005859
 8005804:	08005865 	.word	0x08005865
 8005808:	08005871 	.word	0x08005871
 800580c:	0800587d 	.word	0x0800587d
 8005810:	0800588d 	.word	0x0800588d
 8005814:	080058d9 	.word	0x080058d9
 8005818:	0800589d 	.word	0x0800589d
 800581c:	080058ad 	.word	0x080058ad
 8005820:	080058b9 	.word	0x080058b9
 8005824:	080058c5 	.word	0x080058c5
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	4619      	mov	r1, r3
 8005830:	2000      	movs	r0, #0
 8005832:	f7ff fd31 	bl	8005298 <servo_setEnable>
 8005836:	e050      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	4619      	mov	r1, r3
 8005840:	2000      	movs	r0, #0
 8005842:	f7ff fc0d 	bl	8005060 <servo_setAng>
 8005846:	e048      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	b25b      	sxtb	r3, r3
 800584e:	4619      	mov	r1, r3
 8005850:	2000      	movs	r0, #0
 8005852:	f7ff fcb9 	bl	80051c8 <servo_setPercnet>
 8005856:	e040      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b29a      	uxth	r2, r3
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <cfg_NodeServoVarSet+0x114>)
 8005860:	821a      	strh	r2, [r3, #16]
 8005862:	e03a      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	b29a      	uxth	r2, r3
 800586a:	4b1e      	ldr	r3, [pc, #120]	; (80058e4 <cfg_NodeServoVarSet+0x114>)
 800586c:	825a      	strh	r2, [r3, #18]
 800586e:	e034      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	b29a      	uxth	r2, r3
 8005876:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <cfg_NodeServoVarSet+0x114>)
 8005878:	829a      	strh	r2, [r3, #20]
 800587a:	e02e      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	4619      	mov	r1, r3
 8005884:	2001      	movs	r0, #1
 8005886:	f7ff fd07 	bl	8005298 <servo_setEnable>
 800588a:	e026      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	2001      	movs	r0, #1
 8005896:	f7ff fbe3 	bl	8005060 <servo_setAng>
 800589a:	e01e      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	b25b      	sxtb	r3, r3
 80058a2:	4619      	mov	r1, r3
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7ff fc8f 	bl	80051c8 <servo_setPercnet>
 80058aa:	e016      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <cfg_NodeServoVarSet+0x114>)
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80058b6:	e010      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <cfg_NodeServoVarSet+0x114>)
 80058c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058c2:	e00a      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <cfg_NodeServoVarSet+0x114>)
 80058cc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80058ce:	e004      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		default: return CFG_ERROR_VARID;
 80058d0:	2302      	movs	r3, #2
 80058d2:	e003      	b.n	80058dc <cfg_NodeServoVarSet+0x10c>
	}
	return CFG_ERROR_NONE;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
 80058d8:	bf00      	nop
	return CFG_ERROR_NONE;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000a3c 	.word	0x20000a3c

080058e8 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 80058f0:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <system_Timer+0x7c>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4413      	add	r3, r2
 80058f8:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <system_Timer+0x7c>)
 80058fa:	6013      	str	r3, [r2, #0]
	//leds_Timer(res);
	cfg_Timer(res);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fc f871 	bl	80019e4 <cfg_Timer>
	modem_Timer(res);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fe f8c0 	bl	8003a88 <modem_Timer>
	servo_Timer(res);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff fae3 	bl	8004ed4 <servo_Timer>
	motor_Timer(res);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe fbae 	bl	8004070 <motor_Timer>
	rc_Timer(res);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fe ff71 	bl	80047fc <rc_Timer>
	battery_Timer(res);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fb fc60 	bl	80011e0 <battery_Timer>
	autopilot_Timer(res);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fb f919 	bl	8000b58 <autopilot_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
 800592a:	e013      	b.n	8005954 <system_Timer+0x6c>
	{
		if( system_info.timer[i] != 0 ){
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <system_Timer+0x80>)
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <system_Timer+0x66>
			system_info.timer[i]--;
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	490a      	ldr	r1, [pc, #40]	; (8005968 <system_Timer+0x80>)
 800593e:	0093      	lsls	r3, r2, #2
 8005940:	440b      	add	r3, r1
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	1e59      	subs	r1, r3, #1
 8005946:	4808      	ldr	r0, [pc, #32]	; (8005968 <system_Timer+0x80>)
 8005948:	0093      	lsls	r3, r2, #2
 800594a:	4403      	add	r3, r0
 800594c:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	3301      	adds	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d9e8      	bls.n	800592c <system_Timer+0x44>
		}
	}
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000a88 	.word	0x20000a88
 8005968:	20000a7c 	.word	0x20000a7c

0800596c <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <system_Init+0x40>)
 8005972:	2200      	movs	r2, #0
 8005974:	705a      	strb	r2, [r3, #1]
	//leds_InitTask();

	modem_InitTask();
 8005976:	f7fe f8ab 	bl	8003ad0 <modem_InitTask>
	servo_InitTask();
 800597a:	f7ff fad3 	bl	8004f24 <servo_InitTask>
	motor_InitTask();
 800597e:	f7fe fba1 	bl	80040c4 <motor_InitTask>
	rc_InitTask();
 8005982:	f7fe ff5f 	bl	8004844 <rc_InitTask>
	battery_InitTask(10000);
 8005986:	f242 7010 	movw	r0, #10000	; 0x2710
 800598a:	f7fb fc47 	bl	800121c <battery_InitTask>
	autopilot_InitTask();
 800598e:	f7fb f907 	bl	8000ba0 <autopilot_InitTask>
	cfg_InitTask();
 8005992:	f7fc f85d 	bl	8001a50 <cfg_InitTask>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 8005996:	2201      	movs	r2, #1
 8005998:	4905      	ldr	r1, [pc, #20]	; (80059b0 <system_Init+0x44>)
 800599a:	4806      	ldr	r0, [pc, #24]	; (80059b4 <system_Init+0x48>)
 800599c:	f003 f972 	bl	8008c84 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 80059a0:	4805      	ldr	r0, [pc, #20]	; (80059b8 <system_Init+0x4c>)
 80059a2:	f000 f9bb 	bl	8005d1c <HAL_ADC_Start_IT>
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000a7c 	.word	0x20000a7c
 80059b0:	20000a8c 	.word	0x20000a8c
 80059b4:	200005d4 	.word	0x200005d4
 80059b8:	200004f0 	.word	0x200004f0

080059bc <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
	//leds_Task();
	cfg_Task();
 80059c0:	f7fc f8a6 	bl	8001b10 <cfg_Task>
	modem_Task();
 80059c4:	f7fe f8a6 	bl	8003b14 <modem_Task>
	motor_Task();
 80059c8:	f7fe fbc8 	bl	800415c <motor_Task>
	servo_Task();
 80059cc:	f7ff fb2c 	bl	8005028 <servo_Task>
	rc_Task();
 80059d0:	f7fe ff60 	bl	8004894 <rc_Task>
	battery_Task();
 80059d4:	f7fb fc3e 	bl	8001254 <battery_Task>
	autopilot_Task();
 80059d8:	f7fb f934 	bl	8000c44 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 80059dc:	4b1f      	ldr	r3, [pc, #124]	; (8005a5c <system_Task+0xa0>)
 80059de:	789b      	ldrb	r3, [r3, #2]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d109      	bne.n	80059fa <system_Task+0x3e>
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <system_Task+0xa0>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d105      	bne.n	80059fa <system_Task+0x3e>
	{
		system_info.adc_cplt = 0;
 80059ee:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <system_Task+0xa0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 80059f4:	481a      	ldr	r0, [pc, #104]	; (8005a60 <system_Task+0xa4>)
 80059f6:	f000 f991 	bl	8005d1c <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <system_Task+0xa8>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d10f      	bne.n	8005a24 <system_Task+0x68>
	{
		_system_restart_uart = 0;
 8005a04:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <system_Task+0xa8>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 8005a0a:	f7fd fd5f 	bl	80034cc <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4915      	ldr	r1, [pc, #84]	; (8005a68 <system_Task+0xac>)
 8005a12:	4816      	ldr	r0, [pc, #88]	; (8005a6c <system_Task+0xb0>)
 8005a14:	f003 f936 	bl	8008c84 <HAL_UART_Receive_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <system_Task+0x68>
			_system_restart_uart = 1;
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <system_Task+0xa8>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//System reset
	if( system_info.reset_req == 1 )
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <system_Task+0xa0>)
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <system_Task+0x80>
	{
		system_info.reset_req = 2;
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <system_Task+0xa0>)
 8005a30:	2202      	movs	r2, #2
 8005a32:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 8005a34:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <system_Task+0xa0>)
 8005a36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a3a:	605a      	str	r2, [r3, #4]
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 8005a3c:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <system_Task+0xa0>)
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d108      	bne.n	8005a58 <system_Task+0x9c>
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <system_Task+0xa0>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <system_Task+0x9c>
	{
		system_info.reset_req = 0;
 8005a4e:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <system_Task+0xa0>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	705a      	strb	r2, [r3, #1]
		system_Reset();
 8005a54:	f004 fa74 	bl	8009f40 <__system_Reset_veneer>
	}
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000a7c 	.word	0x20000a7c
 8005a60:	200004f0 	.word	0x200004f0
 8005a64:	20000a8d 	.word	0x20000a8d
 8005a68:	20000a8c 	.word	0x20000a8c
 8005a6c:	200005d4 	.word	0x200005d4

08005a70 <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 8005a74:	4807      	ldr	r0, [pc, #28]	; (8005a94 <system_UARTmodemSet115200+0x24>)
 8005a76:	f003 f935 	bl	8008ce4 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 8005a7a:	4806      	ldr	r0, [pc, #24]	; (8005a94 <system_UARTmodemSet115200+0x24>)
 8005a7c:	f003 f841 	bl	8008b02 <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 8005a80:	f7fd fcee 	bl	8003460 <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 8005a84:	2201      	movs	r2, #1
 8005a86:	4904      	ldr	r1, [pc, #16]	; (8005a98 <system_UARTmodemSet115200+0x28>)
 8005a88:	4802      	ldr	r0, [pc, #8]	; (8005a94 <system_UARTmodemSet115200+0x24>)
 8005a8a:	f003 f8fb 	bl	8008c84 <HAL_UART_Receive_IT>
	return;
 8005a8e:	bf00      	nop
}
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	200005d4 	.word	0x200005d4
 8005a98:	20000a8c 	.word	0x20000a8c

08005a9c <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d112      	bne.n	8005ad6 <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e00a      	b.n	8005acc <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	4413      	add	r3, r2
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f7fc fc3d 	bl	8002340 <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3f0      	bcc.n	8005ab6 <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 8005ad4:	e014      	b.n	8005b00 <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d111      	bne.n	8005b00 <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	e009      	b.n	8005af6 <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe ff86 	bl	80049fc <rc_RcvData>
		for( i = 0; i < len; i++ ){
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3301      	adds	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3f1      	bcc.n	8005ae2 <system_ModemRxCallback+0x46>
	return;
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
}
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a14      	ldr	r2, [pc, #80]	; (8005b64 <system_ADC_ConvCpltCallback+0x5c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d120      	bne.n	8005b5a <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 8005b18:	4812      	ldr	r0, [pc, #72]	; (8005b64 <system_ADC_ConvCpltCallback+0x5c>)
 8005b1a:	f000 facd 	bl	80060b8 <HAL_ADC_GetValue>
 8005b1e:	ee07 0a90 	vmov	s15, r0
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005b68 <system_ADC_ConvCpltCallback+0x60>
 8005b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 8005b2e:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8005b32:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 8005b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3a:	ee17 3a90 	vmov	r3, s15
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <system_ADC_ConvCpltCallback+0x64>)
 8005b42:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <system_ADC_ConvCpltCallback+0x64>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <system_ADC_ConvCpltCallback+0x68>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 8005b50:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <system_ADC_ConvCpltCallback+0x68>)
 8005b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b56:	609a      	str	r2, [r3, #8]
	}

	return;
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
}
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200004f0 	.word	0x200004f0
 8005b68:	3f4e4ce5 	.word	0x3f4e4ce5
 8005b6c:	20000184 	.word	0x20000184
 8005b70:	20000a7c 	.word	0x20000a7c

08005b74 <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	; (8005bb0 <system_UART_RxCpltCallback+0x3c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d110      	bne.n	8005ba6 <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <system_UART_RxCpltCallback+0x40>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe f8dc 	bl	8003d48 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 8005b90:	2201      	movs	r2, #1
 8005b92:	4908      	ldr	r1, [pc, #32]	; (8005bb4 <system_UART_RxCpltCallback+0x40>)
 8005b94:	4806      	ldr	r0, [pc, #24]	; (8005bb0 <system_UART_RxCpltCallback+0x3c>)
 8005b96:	f003 f875 	bl	8008c84 <HAL_UART_Receive_IT>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <system_UART_RxCpltCallback+0x44>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200005d4 	.word	0x200005d4
 8005bb4:	20000a8c 	.word	0x20000a8c
 8005bb8:	20000a8d 	.word	0x20000a8d

08005bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005bc0:	480d      	ldr	r0, [pc, #52]	; (8005bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005bc2:	490e      	ldr	r1, [pc, #56]	; (8005bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005bc4:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005bc8:	e002      	b.n	8005bd0 <LoopCopyDataInit>

08005bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005bce:	3304      	adds	r3, #4

08005bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005bd4:	d3f9      	bcc.n	8005bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005bd6:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005bd8:	4c0b      	ldr	r4, [pc, #44]	; (8005c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005bdc:	e001      	b.n	8005be2 <LoopFillZerobss>

08005bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005be0:	3204      	adds	r2, #4

08005be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005be4:	d3fb      	bcc.n	8005bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005be6:	f7fd ff3d 	bl	8003a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bea:	f004 f961 	bl	8009eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bee:	f7fd f9d7 	bl	8002fa0 <main>
  bx  lr    
 8005bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005bfc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8005c00:	0800a830 	.word	0x0800a830
  ldr r2, =_sbss
 8005c04:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8005c08:	20000ab4 	.word	0x20000ab4

08005c0c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c0c:	e7fe      	b.n	8005c0c <DMA1_Stream0_IRQHandler>
	...

08005c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <HAL_Init+0x40>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <HAL_Init+0x40>)
 8005c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_Init+0x40>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <HAL_Init+0x40>)
 8005c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_Init+0x40>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a07      	ldr	r2, [pc, #28]	; (8005c50 <HAL_Init+0x40>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c38:	2003      	movs	r0, #3
 8005c3a:	f000 fd68 	bl	800670e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c3e:	200f      	movs	r0, #15
 8005c40:	f7fd fe4a 	bl	80038d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c44:	f7fd fc78 	bl	8003538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023c00 	.word	0x40023c00

08005c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <HAL_IncTick+0x20>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <HAL_IncTick+0x24>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4413      	add	r3, r2
 8005c64:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_IncTick+0x24>)
 8005c66:	6013      	str	r3, [r2, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	200000d8 	.word	0x200000d8
 8005c78:	20000a90 	.word	0x20000a90

08005c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <HAL_GetTick+0x14>)
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000a90 	.word	0x20000a90

08005c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e033      	b.n	8005d12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fd fc68 	bl	8003588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d118      	bne.n	8005d04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cda:	f023 0302 	bic.w	r3, r3, #2
 8005cde:	f043 0202 	orr.w	r2, r3, #2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb3a 	bl	8006360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
 8005d02:	e001      	b.n	8005d08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_ADC_Start_IT+0x1a>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e0a1      	b.n	8005e7a <HAL_ADC_Start_IT+0x15e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d018      	beq.n	8005d7e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0201 	orr.w	r2, r2, #1
 8005d5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d5c:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <HAL_ADC_Start_IT+0x16c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_ADC_Start_IT+0x170>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0c9a      	lsrs	r2, r3, #18
 8005d68:	4613      	mov	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	4413      	add	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d70:	e002      	b.n	8005d78 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f9      	bne.n	8005d72 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d169      	bne.n	8005e60 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dca:	d106      	bne.n	8005dda <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	f023 0206 	bic.w	r2, r3, #6
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	645a      	str	r2, [r3, #68]	; 0x44
 8005dd8:	e002      	b.n	8005de0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005de8:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_ADC_Start_IT+0x174>)
 8005dea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005df4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e04:	f043 0320 	orr.w	r3, r3, #32
 8005e08:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d129      	bne.n	8005e78 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	e020      	b.n	8005e78 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <HAL_ADC_Start_IT+0x178>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d11b      	bne.n	8005e78 <HAL_ADC_Start_IT+0x15c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d114      	bne.n	8005e78 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e5c:	609a      	str	r2, [r3, #8]
 8005e5e:	e00b      	b.n	8005e78 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	f043 0210 	orr.w	r2, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	f043 0201 	orr.w	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	200000d0 	.word	0x200000d0
 8005e8c:	431bde83 	.word	0x431bde83
 8005e90:	40012300 	.word	0x40012300
 8005e94:	40012000 	.word	0x40012000

08005e98 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d049      	beq.n	8005f62 <HAL_ADC_IRQHandler+0xca>
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d046      	beq.n	8005f62 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12b      	bne.n	8005f52 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d127      	bne.n	8005f52 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d006      	beq.n	8005f1e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d119      	bne.n	8005f52 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0220 	bic.w	r2, r2, #32
 8005f2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fd fac6 	bl	80034e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0212 	mvn.w	r2, #18
 8005f60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d057      	beq.n	8006028 <HAL_ADC_IRQHandler+0x190>
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d054      	beq.n	8006028 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d139      	bne.n	8006018 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d006      	beq.n	8005fc0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d12b      	bne.n	8006018 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d124      	bne.n	8006018 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11d      	bne.n	8006018 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d119      	bne.n	8006018 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f043 0201 	orr.w	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fa9d 	bl	8006558 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 020c 	mvn.w	r2, #12
 8006026:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d017      	beq.n	800606e <HAL_ADC_IRQHandler+0x1d6>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f837 	bl	80060d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0201 	mvn.w	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800607c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <HAL_ADC_IRQHandler+0x218>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d012      	beq.n	80060b0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	f043 0202 	orr.w	r2, r3, #2
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0220 	mvn.w	r2, #32
 800609e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f820 	bl	80060e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f06f 0220 	mvn.w	r2, #32
 80060ae:	601a      	str	r2, [r3, #0]
  }
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_ADC_ConfigChannel+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e113      	b.n	8006340 <HAL_ADC_ConfigChannel+0x244>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b09      	cmp	r3, #9
 8006126:	d925      	bls.n	8006174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68d9      	ldr	r1, [r3, #12]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	4613      	mov	r3, r2
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	4413      	add	r3, r2
 800613c:	3b1e      	subs	r3, #30
 800613e:	2207      	movs	r2, #7
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	43da      	mvns	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	400a      	ands	r2, r1
 800614c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68d9      	ldr	r1, [r3, #12]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	4618      	mov	r0, r3
 8006160:	4603      	mov	r3, r0
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4403      	add	r3, r0
 8006166:	3b1e      	subs	r3, #30
 8006168:	409a      	lsls	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	e022      	b.n	80061ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6919      	ldr	r1, [r3, #16]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	4613      	mov	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	4413      	add	r3, r2
 8006188:	2207      	movs	r2, #7
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	400a      	ands	r2, r1
 8006196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6919      	ldr	r1, [r3, #16]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	4618      	mov	r0, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4403      	add	r3, r0
 80061b0:	409a      	lsls	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d824      	bhi.n	800620c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	3b05      	subs	r3, #5
 80061d4:	221f      	movs	r2, #31
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43da      	mvns	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	400a      	ands	r2, r1
 80061e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4618      	mov	r0, r3
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	3b05      	subs	r3, #5
 80061fe:	fa00 f203 	lsl.w	r2, r0, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	635a      	str	r2, [r3, #52]	; 0x34
 800620a:	e04c      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d824      	bhi.n	800625e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	3b23      	subs	r3, #35	; 0x23
 8006226:	221f      	movs	r2, #31
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	43da      	mvns	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	400a      	ands	r2, r1
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	4618      	mov	r0, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	3b23      	subs	r3, #35	; 0x23
 8006250:	fa00 f203 	lsl.w	r2, r0, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	631a      	str	r2, [r3, #48]	; 0x30
 800625c:	e023      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	3b41      	subs	r3, #65	; 0x41
 8006270:	221f      	movs	r2, #31
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43da      	mvns	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	400a      	ands	r2, r1
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	4618      	mov	r0, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	3b41      	subs	r3, #65	; 0x41
 800629a:	fa00 f203 	lsl.w	r2, r0, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062a6:	4b29      	ldr	r3, [pc, #164]	; (800634c <HAL_ADC_ConfigChannel+0x250>)
 80062a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a28      	ldr	r2, [pc, #160]	; (8006350 <HAL_ADC_ConfigChannel+0x254>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10f      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x1d8>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b12      	cmp	r3, #18
 80062ba:	d10b      	bne.n	80062d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1d      	ldr	r2, [pc, #116]	; (8006350 <HAL_ADC_ConfigChannel+0x254>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d12b      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x23a>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <HAL_ADC_ConfigChannel+0x258>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <HAL_ADC_ConfigChannel+0x1f4>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b11      	cmp	r3, #17
 80062ee:	d122      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a11      	ldr	r2, [pc, #68]	; (8006354 <HAL_ADC_ConfigChannel+0x258>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d111      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <HAL_ADC_ConfigChannel+0x25c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a11      	ldr	r2, [pc, #68]	; (800635c <HAL_ADC_ConfigChannel+0x260>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	0c9a      	lsrs	r2, r3, #18
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006328:	e002      	b.n	8006330 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3b01      	subs	r3, #1
 800632e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1f9      	bne.n	800632a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40012300 	.word	0x40012300
 8006350:	40012000 	.word	0x40012000
 8006354:	10000012 	.word	0x10000012
 8006358:	200000d0 	.word	0x200000d0
 800635c:	431bde83 	.word	0x431bde83

08006360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006368:	4b79      	ldr	r3, [pc, #484]	; (8006550 <ADC_Init+0x1f0>)
 800636a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	431a      	orrs	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6859      	ldr	r1, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	021a      	lsls	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80063b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6859      	ldr	r1, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	4a58      	ldr	r2, [pc, #352]	; (8006554 <ADC_Init+0x1f4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d022      	beq.n	800643e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6899      	ldr	r1, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6899      	ldr	r1, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]
 800643c:	e00f      	b.n	800645e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800644c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800645c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0202 	bic.w	r2, r2, #2
 800646c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6899      	ldr	r1, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7e1b      	ldrb	r3, [r3, #24]
 8006478:	005a      	lsls	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01b      	beq.n	80064c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800649a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80064aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	3b01      	subs	r3, #1
 80064b8:	035a      	lsls	r2, r3, #13
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
 80064c2:	e007      	b.n	80064d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	051a      	lsls	r2, r3, #20
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6899      	ldr	r1, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006516:	025a      	lsls	r2, r3, #9
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6899      	ldr	r1, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	029a      	lsls	r2, r3, #10
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40012300 	.word	0x40012300
 8006554:	0f000001 	.word	0x0f000001

08006558 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800657c:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <__NVIC_SetPriorityGrouping+0x44>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006588:	4013      	ands	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800659e:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <__NVIC_SetPriorityGrouping+0x44>)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	60d3      	str	r3, [r2, #12]
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	e000ed00 	.word	0xe000ed00

080065b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065b8:	4b04      	ldr	r3, [pc, #16]	; (80065cc <__NVIC_GetPriorityGrouping+0x18>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	0a1b      	lsrs	r3, r3, #8
 80065be:	f003 0307 	and.w	r3, r3, #7
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	e000ed00 	.word	0xe000ed00

080065d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	db0b      	blt.n	80065fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	f003 021f 	and.w	r2, r3, #31
 80065e8:	4907      	ldr	r1, [pc, #28]	; (8006608 <__NVIC_EnableIRQ+0x38>)
 80065ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	2001      	movs	r0, #1
 80065f2:	fa00 f202 	lsl.w	r2, r0, r2
 80065f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	e000e100 	.word	0xe000e100

0800660c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661a:	2b00      	cmp	r3, #0
 800661c:	db12      	blt.n	8006644 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	f003 021f 	and.w	r2, r3, #31
 8006624:	490a      	ldr	r1, [pc, #40]	; (8006650 <__NVIC_DisableIRQ+0x44>)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2001      	movs	r0, #1
 800662e:	fa00 f202 	lsl.w	r2, r0, r2
 8006632:	3320      	adds	r3, #32
 8006634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006638:	f3bf 8f4f 	dsb	sy
}
 800663c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800663e:	f3bf 8f6f 	isb	sy
}
 8006642:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000e100 	.word	0xe000e100

08006654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	6039      	str	r1, [r7, #0]
 800665e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006664:	2b00      	cmp	r3, #0
 8006666:	db0a      	blt.n	800667e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	490c      	ldr	r1, [pc, #48]	; (80066a0 <__NVIC_SetPriority+0x4c>)
 800666e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006672:	0112      	lsls	r2, r2, #4
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	440b      	add	r3, r1
 8006678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800667c:	e00a      	b.n	8006694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	4908      	ldr	r1, [pc, #32]	; (80066a4 <__NVIC_SetPriority+0x50>)
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	3b04      	subs	r3, #4
 800668c:	0112      	lsls	r2, r2, #4
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	440b      	add	r3, r1
 8006692:	761a      	strb	r2, [r3, #24]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	e000e100 	.word	0xe000e100
 80066a4:	e000ed00 	.word	0xe000ed00

080066a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f1c3 0307 	rsb	r3, r3, #7
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	bf28      	it	cs
 80066c6:	2304      	movcs	r3, #4
 80066c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3304      	adds	r3, #4
 80066ce:	2b06      	cmp	r3, #6
 80066d0:	d902      	bls.n	80066d8 <NVIC_EncodePriority+0x30>
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3b03      	subs	r3, #3
 80066d6:	e000      	b.n	80066da <NVIC_EncodePriority+0x32>
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	fa02 f303 	lsl.w	r3, r2, r3
 80066e6:	43da      	mvns	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	401a      	ands	r2, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066f0:	f04f 31ff 	mov.w	r1, #4294967295
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	fa01 f303 	lsl.w	r3, r1, r3
 80066fa:	43d9      	mvns	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006700:	4313      	orrs	r3, r2
         );
}
 8006702:	4618      	mov	r0, r3
 8006704:	3724      	adds	r7, #36	; 0x24
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff ff28 	bl	800656c <__NVIC_SetPriorityGrouping>
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006736:	f7ff ff3d 	bl	80065b4 <__NVIC_GetPriorityGrouping>
 800673a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	6978      	ldr	r0, [r7, #20]
 8006742:	f7ff ffb1 	bl	80066a8 <NVIC_EncodePriority>
 8006746:	4602      	mov	r2, r0
 8006748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff ff80 	bl	8006654 <__NVIC_SetPriority>
}
 8006754:	bf00      	nop
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff ff30 	bl	80065d0 <__NVIC_EnableIRQ>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ff40 	bl	800660c <__NVIC_DisableIRQ>
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80067a2:	f7ff fa6b 	bl	8005c7c <HAL_GetTick>
 80067a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d008      	beq.n	80067c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2280      	movs	r2, #128	; 0x80
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e052      	b.n	800686c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0216 	bic.w	r2, r2, #22
 80067d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <HAL_DMA_Abort+0x62>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0208 	bic.w	r2, r2, #8
 8006804:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006816:	e013      	b.n	8006840 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006818:	f7ff fa30 	bl	8005c7c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b05      	cmp	r3, #5
 8006824:	d90c      	bls.n	8006840 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2203      	movs	r2, #3
 8006830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e015      	b.n	800686c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e4      	bne.n	8006818 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006852:	223f      	movs	r2, #63	; 0x3f
 8006854:	409a      	lsls	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d004      	beq.n	8006892 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e00c      	b.n	80068ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2205      	movs	r2, #5
 8006896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068ca:	4b23      	ldr	r3, [pc, #140]	; (8006958 <HAL_FLASH_Program+0xa0>)
 80068cc:	7e1b      	ldrb	r3, [r3, #24]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_FLASH_Program+0x1e>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e03b      	b.n	800694e <HAL_FLASH_Program+0x96>
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <HAL_FLASH_Program+0xa0>)
 80068d8:	2201      	movs	r2, #1
 80068da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068e0:	f000 f870 	bl	80069c4 <FLASH_WaitForLastOperation>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d12b      	bne.n	8006946 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80068f4:	783b      	ldrb	r3, [r7, #0]
 80068f6:	4619      	mov	r1, r3
 80068f8:	68b8      	ldr	r0, [r7, #8]
 80068fa:	f000 f91b 	bl	8006b34 <FLASH_Program_Byte>
 80068fe:	e016      	b.n	800692e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d105      	bne.n	8006912 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006906:	883b      	ldrh	r3, [r7, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f000 f8ee 	bl	8006aec <FLASH_Program_HalfWord>
 8006910:	e00d      	b.n	800692e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d105      	bne.n	8006924 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	68b8      	ldr	r0, [r7, #8]
 800691e:	f000 f8c3 	bl	8006aa8 <FLASH_Program_Word>
 8006922:	e004      	b.n	800692e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006928:	68b8      	ldr	r0, [r7, #8]
 800692a:	f000 f88b 	bl	8006a44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800692e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006932:	f000 f847 	bl	80069c4 <FLASH_WaitForLastOperation>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <HAL_FLASH_Program+0xa4>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	4a07      	ldr	r2, [pc, #28]	; (800695c <HAL_FLASH_Program+0xa4>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006946:	4b04      	ldr	r3, [pc, #16]	; (8006958 <HAL_FLASH_Program+0xa0>)
 8006948:	2200      	movs	r2, #0
 800694a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000a94 	.word	0x20000a94
 800695c:	40023c00 	.word	0x40023c00

08006960 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <HAL_FLASH_Unlock+0x38>)
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	da0b      	bge.n	800698a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <HAL_FLASH_Unlock+0x38>)
 8006974:	4a09      	ldr	r2, [pc, #36]	; (800699c <HAL_FLASH_Unlock+0x3c>)
 8006976:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <HAL_FLASH_Unlock+0x38>)
 800697a:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <HAL_FLASH_Unlock+0x40>)
 800697c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_FLASH_Unlock+0x38>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	da01      	bge.n	800698a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800698a:	79fb      	ldrb	r3, [r7, #7]
}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40023c00 	.word	0x40023c00
 800699c:	45670123 	.word	0x45670123
 80069a0:	cdef89ab 	.word	0xcdef89ab

080069a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <HAL_FLASH_Lock+0x1c>)
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <HAL_FLASH_Lock+0x1c>)
 80069ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40023c00 	.word	0x40023c00

080069c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80069d0:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <FLASH_WaitForLastOperation+0x78>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80069d6:	f7ff f951 	bl	8005c7c <HAL_GetTick>
 80069da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80069dc:	e010      	b.n	8006a00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d00c      	beq.n	8006a00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <FLASH_WaitForLastOperation+0x38>
 80069ec:	f7ff f946 	bl	8005c7c <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d201      	bcs.n	8006a00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e019      	b.n	8006a34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <FLASH_WaitForLastOperation+0x7c>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e8      	bne.n	80069de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <FLASH_WaitForLastOperation+0x7c>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <FLASH_WaitForLastOperation+0x7c>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <FLASH_WaitForLastOperation+0x7c>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006a2a:	f000 f8a5 	bl	8006b78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
  
}  
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000a94 	.word	0x20000a94
 8006a40:	40023c00 	.word	0x40023c00

08006a44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a50:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <FLASH_Program_DoubleWord+0x60>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <FLASH_Program_DoubleWord+0x60>)
 8006a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006a5c:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <FLASH_Program_DoubleWord+0x60>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <FLASH_Program_DoubleWord+0x60>)
 8006a62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006a68:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <FLASH_Program_DoubleWord+0x60>)
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <FLASH_Program_DoubleWord+0x60>)
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006a7a:	f3bf 8f6f 	isb	sy
}
 8006a7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	000a      	movs	r2, r1
 8006a8e:	2300      	movs	r3, #0
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	3104      	adds	r1, #4
 8006a94:	4613      	mov	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40023c00 	.word	0x40023c00

08006aa8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <FLASH_Program_Word+0x40>)
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <FLASH_Program_Word+0x40>)
 8006ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006abe:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <FLASH_Program_Word+0x40>)
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <FLASH_Program_Word+0x40>)
 8006ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ac8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006aca:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <FLASH_Program_Word+0x40>)
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	4a06      	ldr	r2, [pc, #24]	; (8006ae8 <FLASH_Program_Word+0x40>)
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	40023c00 	.word	0x40023c00

08006aec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006af8:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <FLASH_Program_HalfWord+0x44>)
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	4a0c      	ldr	r2, [pc, #48]	; (8006b30 <FLASH_Program_HalfWord+0x44>)
 8006afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006b04:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <FLASH_Program_HalfWord+0x44>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <FLASH_Program_HalfWord+0x44>)
 8006b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <FLASH_Program_HalfWord+0x44>)
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <FLASH_Program_HalfWord+0x44>)
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	887a      	ldrh	r2, [r7, #2]
 8006b20:	801a      	strh	r2, [r3, #0]
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40023c00 	.word	0x40023c00

08006b34 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <FLASH_Program_Byte+0x40>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	4a0b      	ldr	r2, [pc, #44]	; (8006b74 <FLASH_Program_Byte+0x40>)
 8006b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006b4c:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <FLASH_Program_Byte+0x40>)
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <FLASH_Program_Byte+0x40>)
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006b54:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <FLASH_Program_Byte+0x40>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	4a06      	ldr	r2, [pc, #24]	; (8006b74 <FLASH_Program_Byte+0x40>)
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	701a      	strb	r2, [r3, #0]
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40023c00 	.word	0x40023c00

08006b78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006b7c:	4b2f      	ldr	r3, [pc, #188]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006b88:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f043 0310 	orr.w	r3, r3, #16
 8006b90:	4a2b      	ldr	r2, [pc, #172]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006b92:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006b96:	2210      	movs	r2, #16
 8006b98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006b9a:	4b28      	ldr	r3, [pc, #160]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d008      	beq.n	8006bb8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006ba6:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f043 0308 	orr.w	r3, r3, #8
 8006bae:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006bb0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006bb2:	4b22      	ldr	r3, [pc, #136]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006bb8:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006bc4:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f043 0304 	orr.w	r3, r3, #4
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006bce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006bd2:	2240      	movs	r2, #64	; 0x40
 8006bd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006bd6:	4b19      	ldr	r3, [pc, #100]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006be2:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f043 0302 	orr.w	r3, r3, #2
 8006bea:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006bec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006bf0:	2280      	movs	r2, #128	; 0x80
 8006bf2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006bf4:	4b11      	ldr	r3, [pc, #68]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006c0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c12:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f043 0320 	orr.w	r3, r3, #32
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <FLASH_SetErrorCode+0xc8>)
 8006c2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <FLASH_SetErrorCode+0xc4>)
 8006c2e:	2202      	movs	r2, #2
 8006c30:	60da      	str	r2, [r3, #12]
  }
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	40023c00 	.word	0x40023c00
 8006c40:	20000a94 	.word	0x20000a94

08006c44 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d102      	bne.n	8006c60 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e010      	b.n	8006c82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d103      	bne.n	8006c6e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e009      	b.n	8006c82 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d103      	bne.n	8006c7c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e002      	b.n	8006c82 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006c7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	4a12      	ldr	r2, [pc, #72]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006c8e:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	490f      	ldr	r1, [pc, #60]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	4a0c      	ldr	r2, [pc, #48]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006ca0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ca4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	4a07      	ldr	r2, [pc, #28]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006cb2:	f043 0302 	orr.w	r3, r3, #2
 8006cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <FLASH_Erase_Sector+0x8c>)
 8006cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc2:	6113      	str	r3, [r2, #16]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40023c00 	.word	0x40023c00

08006cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	e159      	b.n	8006fa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4013      	ands	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	f040 8148 	bne.w	8006f9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d005      	beq.n	8006d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d130      	bne.n	8006d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	2203      	movs	r2, #3
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	43db      	mvns	r3, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 0201 	and.w	r2, r3, #1
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d017      	beq.n	8006dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	2203      	movs	r2, #3
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d123      	bne.n	8006e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	08da      	lsrs	r2, r3, #3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3208      	adds	r2, #8
 8006dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	220f      	movs	r2, #15
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	43db      	mvns	r3, r3
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	4013      	ands	r3, r2
 8006df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	08da      	lsrs	r2, r3, #3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3208      	adds	r2, #8
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	2203      	movs	r2, #3
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 0203 	and.w	r2, r3, #3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80a2 	beq.w	8006f9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	4b57      	ldr	r3, [pc, #348]	; (8006fbc <HAL_GPIO_Init+0x2e8>)
 8006e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e62:	4a56      	ldr	r2, [pc, #344]	; (8006fbc <HAL_GPIO_Init+0x2e8>)
 8006e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e68:	6453      	str	r3, [r2, #68]	; 0x44
 8006e6a:	4b54      	ldr	r3, [pc, #336]	; (8006fbc <HAL_GPIO_Init+0x2e8>)
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e76:	4a52      	ldr	r2, [pc, #328]	; (8006fc0 <HAL_GPIO_Init+0x2ec>)
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	089b      	lsrs	r3, r3, #2
 8006e7c:	3302      	adds	r3, #2
 8006e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	220f      	movs	r2, #15
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43db      	mvns	r3, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4013      	ands	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a49      	ldr	r2, [pc, #292]	; (8006fc4 <HAL_GPIO_Init+0x2f0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d019      	beq.n	8006ed6 <HAL_GPIO_Init+0x202>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a48      	ldr	r2, [pc, #288]	; (8006fc8 <HAL_GPIO_Init+0x2f4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_GPIO_Init+0x1fe>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a47      	ldr	r2, [pc, #284]	; (8006fcc <HAL_GPIO_Init+0x2f8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00d      	beq.n	8006ece <HAL_GPIO_Init+0x1fa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a46      	ldr	r2, [pc, #280]	; (8006fd0 <HAL_GPIO_Init+0x2fc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <HAL_GPIO_Init+0x1f6>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a45      	ldr	r2, [pc, #276]	; (8006fd4 <HAL_GPIO_Init+0x300>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d101      	bne.n	8006ec6 <HAL_GPIO_Init+0x1f2>
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	e008      	b.n	8006ed8 <HAL_GPIO_Init+0x204>
 8006ec6:	2307      	movs	r3, #7
 8006ec8:	e006      	b.n	8006ed8 <HAL_GPIO_Init+0x204>
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e004      	b.n	8006ed8 <HAL_GPIO_Init+0x204>
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e002      	b.n	8006ed8 <HAL_GPIO_Init+0x204>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <HAL_GPIO_Init+0x204>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	f002 0203 	and.w	r2, r2, #3
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	4093      	lsls	r3, r2
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ee8:	4935      	ldr	r1, [pc, #212]	; (8006fc0 <HAL_GPIO_Init+0x2ec>)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	089b      	lsrs	r3, r3, #2
 8006eee:	3302      	adds	r3, #2
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ef6:	4b38      	ldr	r3, [pc, #224]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	43db      	mvns	r3, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4013      	ands	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f1a:	4a2f      	ldr	r2, [pc, #188]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f20:	4b2d      	ldr	r3, [pc, #180]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f4a:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	43db      	mvns	r3, r3
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4013      	ands	r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f6e:	4a1a      	ldr	r2, [pc, #104]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f98:	4a0f      	ldr	r2, [pc, #60]	; (8006fd8 <HAL_GPIO_Init+0x304>)
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	f67f aea2 	bls.w	8006cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	3724      	adds	r7, #36	; 0x24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40020000 	.word	0x40020000
 8006fc8:	40020400 	.word	0x40020400
 8006fcc:	40020800 	.word	0x40020800
 8006fd0:	40020c00 	.word	0x40020c00
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40013c00 	.word	0x40013c00

08006fdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e0bb      	b.n	8007170 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4013      	ands	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	f040 80ab 	bne.w	800716a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007014:	4a5c      	ldr	r2, [pc, #368]	; (8007188 <HAL_GPIO_DeInit+0x1ac>)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	089b      	lsrs	r3, r3, #2
 800701a:	3302      	adds	r3, #2
 800701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007020:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	220f      	movs	r2, #15
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	4013      	ands	r3, r2
 8007034:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a54      	ldr	r2, [pc, #336]	; (800718c <HAL_GPIO_DeInit+0x1b0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d019      	beq.n	8007072 <HAL_GPIO_DeInit+0x96>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a53      	ldr	r2, [pc, #332]	; (8007190 <HAL_GPIO_DeInit+0x1b4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d013      	beq.n	800706e <HAL_GPIO_DeInit+0x92>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a52      	ldr	r2, [pc, #328]	; (8007194 <HAL_GPIO_DeInit+0x1b8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00d      	beq.n	800706a <HAL_GPIO_DeInit+0x8e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a51      	ldr	r2, [pc, #324]	; (8007198 <HAL_GPIO_DeInit+0x1bc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <HAL_GPIO_DeInit+0x8a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a50      	ldr	r2, [pc, #320]	; (800719c <HAL_GPIO_DeInit+0x1c0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <HAL_GPIO_DeInit+0x86>
 800705e:	2304      	movs	r3, #4
 8007060:	e008      	b.n	8007074 <HAL_GPIO_DeInit+0x98>
 8007062:	2307      	movs	r3, #7
 8007064:	e006      	b.n	8007074 <HAL_GPIO_DeInit+0x98>
 8007066:	2303      	movs	r3, #3
 8007068:	e004      	b.n	8007074 <HAL_GPIO_DeInit+0x98>
 800706a:	2302      	movs	r3, #2
 800706c:	e002      	b.n	8007074 <HAL_GPIO_DeInit+0x98>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <HAL_GPIO_DeInit+0x98>
 8007072:	2300      	movs	r3, #0
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	f002 0203 	and.w	r2, r2, #3
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	4093      	lsls	r3, r2
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	429a      	cmp	r2, r3
 8007082:	d132      	bne.n	80070ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007084:	4b46      	ldr	r3, [pc, #280]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	43db      	mvns	r3, r3
 800708c:	4944      	ldr	r1, [pc, #272]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 800708e:	4013      	ands	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007092:	4b43      	ldr	r3, [pc, #268]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	43db      	mvns	r3, r3
 800709a:	4941      	ldr	r1, [pc, #260]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 800709c:	4013      	ands	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80070a0:	4b3f      	ldr	r3, [pc, #252]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	493d      	ldr	r1, [pc, #244]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80070ae:	4b3c      	ldr	r3, [pc, #240]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	493a      	ldr	r1, [pc, #232]	; (80071a0 <HAL_GPIO_DeInit+0x1c4>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	220f      	movs	r2, #15
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80070cc:	4a2e      	ldr	r2, [pc, #184]	; (8007188 <HAL_GPIO_DeInit+0x1ac>)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	089b      	lsrs	r3, r3, #2
 80070d2:	3302      	adds	r3, #2
 80070d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	43da      	mvns	r2, r3
 80070dc:	482a      	ldr	r0, [pc, #168]	; (8007188 <HAL_GPIO_DeInit+0x1ac>)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	400a      	ands	r2, r1
 80070e4:	3302      	adds	r3, #2
 80070e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	2103      	movs	r1, #3
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	43db      	mvns	r3, r3
 80070fa:	401a      	ands	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	08da      	lsrs	r2, r3, #3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3208      	adds	r2, #8
 8007108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	220f      	movs	r2, #15
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	08d2      	lsrs	r2, r2, #3
 8007120:	4019      	ands	r1, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3208      	adds	r2, #8
 8007126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	2103      	movs	r1, #3
 8007134:	fa01 f303 	lsl.w	r3, r1, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	401a      	ands	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	2101      	movs	r1, #1
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	401a      	ands	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	2103      	movs	r1, #3
 800715e:	fa01 f303 	lsl.w	r3, r1, r3
 8007162:	43db      	mvns	r3, r3
 8007164:	401a      	ands	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	3301      	adds	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b0f      	cmp	r3, #15
 8007174:	f67f af40 	bls.w	8006ff8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40013800 	.word	0x40013800
 800718c:	40020000 	.word	0x40020000
 8007190:	40020400 	.word	0x40020400
 8007194:	40020800 	.word	0x40020800
 8007198:	40020c00 	.word	0x40020c00
 800719c:	40021000 	.word	0x40021000
 80071a0:	40013c00 	.word	0x40013c00

080071a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	887b      	ldrh	r3, [r7, #2]
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
 80071c0:	e001      	b.n	80071c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	807b      	strh	r3, [r7, #2]
 80071e0:	4613      	mov	r3, r2
 80071e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071e4:	787b      	ldrb	r3, [r7, #1]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071ea:	887a      	ldrh	r2, [r7, #2]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071f0:	e003      	b.n	80071fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071f2:	887b      	ldrh	r3, [r7, #2]
 80071f4:	041a      	lsls	r2, r3, #16
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	619a      	str	r2, [r3, #24]
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e12b      	b.n	8007472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fc f9f6 	bl	8003620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2224      	movs	r2, #36	; 0x24
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800725a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800726a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800726c:	f000 fd40 	bl	8007cf0 <HAL_RCC_GetPCLK1Freq>
 8007270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4a81      	ldr	r2, [pc, #516]	; (800747c <HAL_I2C_Init+0x274>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d807      	bhi.n	800728c <HAL_I2C_Init+0x84>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a80      	ldr	r2, [pc, #512]	; (8007480 <HAL_I2C_Init+0x278>)
 8007280:	4293      	cmp	r3, r2
 8007282:	bf94      	ite	ls
 8007284:	2301      	movls	r3, #1
 8007286:	2300      	movhi	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e006      	b.n	800729a <HAL_I2C_Init+0x92>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a7d      	ldr	r2, [pc, #500]	; (8007484 <HAL_I2C_Init+0x27c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	bf94      	ite	ls
 8007294:	2301      	movls	r3, #1
 8007296:	2300      	movhi	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e0e7      	b.n	8007472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4a78      	ldr	r2, [pc, #480]	; (8007488 <HAL_I2C_Init+0x280>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	0c9b      	lsrs	r3, r3, #18
 80072ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4a6a      	ldr	r2, [pc, #424]	; (800747c <HAL_I2C_Init+0x274>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d802      	bhi.n	80072dc <HAL_I2C_Init+0xd4>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	3301      	adds	r3, #1
 80072da:	e009      	b.n	80072f0 <HAL_I2C_Init+0xe8>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	4a69      	ldr	r2, [pc, #420]	; (800748c <HAL_I2C_Init+0x284>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	099b      	lsrs	r3, r3, #6
 80072ee:	3301      	adds	r3, #1
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	495c      	ldr	r1, [pc, #368]	; (800747c <HAL_I2C_Init+0x274>)
 800730c:	428b      	cmp	r3, r1
 800730e:	d819      	bhi.n	8007344 <HAL_I2C_Init+0x13c>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	1e59      	subs	r1, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	fbb1 f3f3 	udiv	r3, r1, r3
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007324:	400b      	ands	r3, r1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <HAL_I2C_Init+0x138>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	1e59      	subs	r1, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	fbb1 f3f3 	udiv	r3, r1, r3
 8007338:	3301      	adds	r3, #1
 800733a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800733e:	e051      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 8007340:	2304      	movs	r3, #4
 8007342:	e04f      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d111      	bne.n	8007370 <HAL_I2C_Init+0x168>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1e58      	subs	r0, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6859      	ldr	r1, [r3, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	440b      	add	r3, r1
 800735a:	fbb0 f3f3 	udiv	r3, r0, r3
 800735e:	3301      	adds	r3, #1
 8007360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	e012      	b.n	8007396 <HAL_I2C_Init+0x18e>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	1e58      	subs	r0, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6859      	ldr	r1, [r3, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	0099      	lsls	r1, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	fbb0 f3f3 	udiv	r3, r0, r3
 8007386:	3301      	adds	r3, #1
 8007388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf0c      	ite	eq
 8007390:	2301      	moveq	r3, #1
 8007392:	2300      	movne	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_I2C_Init+0x196>
 800739a:	2301      	movs	r3, #1
 800739c:	e022      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10e      	bne.n	80073c4 <HAL_I2C_Init+0x1bc>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1e58      	subs	r0, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6859      	ldr	r1, [r3, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	440b      	add	r3, r1
 80073b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80073b8:	3301      	adds	r3, #1
 80073ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c2:	e00f      	b.n	80073e4 <HAL_I2C_Init+0x1dc>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	1e58      	subs	r0, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6859      	ldr	r1, [r3, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	0099      	lsls	r1, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073da:	3301      	adds	r3, #1
 80073dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	6809      	ldr	r1, [r1, #0]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69da      	ldr	r2, [r3, #28]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6911      	ldr	r1, [r2, #16]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	68d2      	ldr	r2, [r2, #12]
 800741e:	4311      	orrs	r1, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	430b      	orrs	r3, r1
 8007426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	000186a0 	.word	0x000186a0
 8007480:	001e847f 	.word	0x001e847f
 8007484:	003d08ff 	.word	0x003d08ff
 8007488:	431bde83 	.word	0x431bde83
 800748c:	10624dd3 	.word	0x10624dd3

08007490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e267      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d075      	beq.n	800759a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074ae:	4b88      	ldr	r3, [pc, #544]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 030c 	and.w	r3, r3, #12
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d00c      	beq.n	80074d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ba:	4b85      	ldr	r3, [pc, #532]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d112      	bne.n	80074ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074c6:	4b82      	ldr	r3, [pc, #520]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074d2:	d10b      	bne.n	80074ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d4:	4b7e      	ldr	r3, [pc, #504]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d05b      	beq.n	8007598 <HAL_RCC_OscConfig+0x108>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d157      	bne.n	8007598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e242      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f4:	d106      	bne.n	8007504 <HAL_RCC_OscConfig+0x74>
 80074f6:	4b76      	ldr	r3, [pc, #472]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a75      	ldr	r2, [pc, #468]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80074fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e01d      	b.n	8007540 <HAL_RCC_OscConfig+0xb0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750c:	d10c      	bne.n	8007528 <HAL_RCC_OscConfig+0x98>
 800750e:	4b70      	ldr	r3, [pc, #448]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a6f      	ldr	r2, [pc, #444]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	4b6d      	ldr	r3, [pc, #436]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a6c      	ldr	r2, [pc, #432]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	e00b      	b.n	8007540 <HAL_RCC_OscConfig+0xb0>
 8007528:	4b69      	ldr	r3, [pc, #420]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a68      	ldr	r2, [pc, #416]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800752e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4b66      	ldr	r3, [pc, #408]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a65      	ldr	r2, [pc, #404]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800753a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800753e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d013      	beq.n	8007570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fe fb98 	bl	8005c7c <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fe fb94 	bl	8005c7c <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	; 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e207      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007562:	4b5b      	ldr	r3, [pc, #364]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0xc0>
 800756e:	e014      	b.n	800759a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007570:	f7fe fb84 	bl	8005c7c <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007578:	f7fe fb80 	bl	8005c7c <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b64      	cmp	r3, #100	; 0x64
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e1f3      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800758a:	4b51      	ldr	r3, [pc, #324]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0xe8>
 8007596:	e000      	b.n	800759a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d063      	beq.n	800766e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075a6:	4b4a      	ldr	r3, [pc, #296]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075b2:	4b47      	ldr	r3, [pc, #284]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d11c      	bne.n	80075f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075be:	4b44      	ldr	r3, [pc, #272]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d116      	bne.n	80075f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ca:	4b41      	ldr	r3, [pc, #260]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_RCC_OscConfig+0x152>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d001      	beq.n	80075e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e1c7      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e2:	4b3b      	ldr	r3, [pc, #236]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4937      	ldr	r1, [pc, #220]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075f6:	e03a      	b.n	800766e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d020      	beq.n	8007642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007600:	4b34      	ldr	r3, [pc, #208]	; (80076d4 <HAL_RCC_OscConfig+0x244>)
 8007602:	2201      	movs	r2, #1
 8007604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fe fb39 	bl	8005c7c <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800760e:	f7fe fb35 	bl	8005c7c <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e1a8      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007620:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762c:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4925      	ldr	r1, [pc, #148]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]
 8007640:	e015      	b.n	800766e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <HAL_RCC_OscConfig+0x244>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7fe fb18 	bl	8005c7c <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007650:	f7fe fb14 	bl	8005c7c <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e187      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007662:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0308 	and.w	r3, r3, #8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d036      	beq.n	80076e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d016      	beq.n	80076b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007682:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <HAL_RCC_OscConfig+0x248>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007688:	f7fe faf8 	bl	8005c7c <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007690:	f7fe faf4 	bl	8005c7c <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e167      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <HAL_RCC_OscConfig+0x240>)
 80076a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f0      	beq.n	8007690 <HAL_RCC_OscConfig+0x200>
 80076ae:	e01b      	b.n	80076e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b0:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <HAL_RCC_OscConfig+0x248>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b6:	f7fe fae1 	bl	8005c7c <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076bc:	e00e      	b.n	80076dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076be:	f7fe fadd 	bl	8005c7c <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d907      	bls.n	80076dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e150      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
 80076d0:	40023800 	.word	0x40023800
 80076d4:	42470000 	.word	0x42470000
 80076d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076dc:	4b88      	ldr	r3, [pc, #544]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80076de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1ea      	bne.n	80076be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8097 	beq.w	8007824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076f6:	2300      	movs	r3, #0
 80076f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076fa:	4b81      	ldr	r3, [pc, #516]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10f      	bne.n	8007726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	4b7d      	ldr	r3, [pc, #500]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	4a7c      	ldr	r2, [pc, #496]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6413      	str	r3, [r2, #64]	; 0x40
 8007716:	4b7a      	ldr	r3, [pc, #488]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007722:	2301      	movs	r3, #1
 8007724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007726:	4b77      	ldr	r3, [pc, #476]	; (8007904 <HAL_RCC_OscConfig+0x474>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d118      	bne.n	8007764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007732:	4b74      	ldr	r3, [pc, #464]	; (8007904 <HAL_RCC_OscConfig+0x474>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a73      	ldr	r2, [pc, #460]	; (8007904 <HAL_RCC_OscConfig+0x474>)
 8007738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800773e:	f7fe fa9d 	bl	8005c7c <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007746:	f7fe fa99 	bl	8005c7c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e10c      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007758:	4b6a      	ldr	r3, [pc, #424]	; (8007904 <HAL_RCC_OscConfig+0x474>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d106      	bne.n	800777a <HAL_RCC_OscConfig+0x2ea>
 800776c:	4b64      	ldr	r3, [pc, #400]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007770:	4a63      	ldr	r2, [pc, #396]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6713      	str	r3, [r2, #112]	; 0x70
 8007778:	e01c      	b.n	80077b4 <HAL_RCC_OscConfig+0x324>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b05      	cmp	r3, #5
 8007780:	d10c      	bne.n	800779c <HAL_RCC_OscConfig+0x30c>
 8007782:	4b5f      	ldr	r3, [pc, #380]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007786:	4a5e      	ldr	r2, [pc, #376]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007788:	f043 0304 	orr.w	r3, r3, #4
 800778c:	6713      	str	r3, [r2, #112]	; 0x70
 800778e:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	4a5b      	ldr	r2, [pc, #364]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
 800779a:	e00b      	b.n	80077b4 <HAL_RCC_OscConfig+0x324>
 800779c:	4b58      	ldr	r3, [pc, #352]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 800779e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a0:	4a57      	ldr	r2, [pc, #348]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	6713      	str	r3, [r2, #112]	; 0x70
 80077a8:	4b55      	ldr	r3, [pc, #340]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80077aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ac:	4a54      	ldr	r2, [pc, #336]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80077ae:	f023 0304 	bic.w	r3, r3, #4
 80077b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d015      	beq.n	80077e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077bc:	f7fe fa5e 	bl	8005c7c <HAL_GetTick>
 80077c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c2:	e00a      	b.n	80077da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c4:	f7fe fa5a 	bl	8005c7c <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e0cb      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077da:	4b49      	ldr	r3, [pc, #292]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0ee      	beq.n	80077c4 <HAL_RCC_OscConfig+0x334>
 80077e6:	e014      	b.n	8007812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077e8:	f7fe fa48 	bl	8005c7c <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077ee:	e00a      	b.n	8007806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f0:	f7fe fa44 	bl	8005c7c <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fe:	4293      	cmp	r3, r2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e0b5      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007806:	4b3e      	ldr	r3, [pc, #248]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1ee      	bne.n	80077f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d105      	bne.n	8007824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007818:	4b39      	ldr	r3, [pc, #228]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	4a38      	ldr	r2, [pc, #224]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 800781e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80a1 	beq.w	8007970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800782e:	4b34      	ldr	r3, [pc, #208]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f003 030c 	and.w	r3, r3, #12
 8007836:	2b08      	cmp	r3, #8
 8007838:	d05c      	beq.n	80078f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d141      	bne.n	80078c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007842:	4b31      	ldr	r3, [pc, #196]	; (8007908 <HAL_RCC_OscConfig+0x478>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007848:	f7fe fa18 	bl	8005c7c <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007850:	f7fe fa14 	bl	8005c7c <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e087      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007862:	4b27      	ldr	r3, [pc, #156]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	019b      	lsls	r3, r3, #6
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	3b01      	subs	r3, #1
 8007888:	041b      	lsls	r3, r3, #16
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	061b      	lsls	r3, r3, #24
 8007892:	491b      	ldr	r1, [pc, #108]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 8007894:	4313      	orrs	r3, r2
 8007896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007898:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <HAL_RCC_OscConfig+0x478>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800789e:	f7fe f9ed 	bl	8005c7c <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a4:	e008      	b.n	80078b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078a6:	f7fe f9e9 	bl	8005c7c <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e05c      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <HAL_RCC_OscConfig+0x416>
 80078c4:	e054      	b.n	8007970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c6:	4b10      	ldr	r3, [pc, #64]	; (8007908 <HAL_RCC_OscConfig+0x478>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078cc:	f7fe f9d6 	bl	8005c7c <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078d4:	f7fe f9d2 	bl	8005c7c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e045      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078e6:	4b06      	ldr	r3, [pc, #24]	; (8007900 <HAL_RCC_OscConfig+0x470>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <HAL_RCC_OscConfig+0x444>
 80078f2:	e03d      	b.n	8007970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d107      	bne.n	800790c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e038      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
 8007900:	40023800 	.word	0x40023800
 8007904:	40007000 	.word	0x40007000
 8007908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <HAL_RCC_OscConfig+0x4ec>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d028      	beq.n	800796c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007924:	429a      	cmp	r2, r3
 8007926:	d121      	bne.n	800796c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007932:	429a      	cmp	r2, r3
 8007934:	d11a      	bne.n	800796c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800793c:	4013      	ands	r3, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007944:	4293      	cmp	r3, r2
 8007946:	d111      	bne.n	800796c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	3b01      	subs	r3, #1
 8007956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007958:	429a      	cmp	r2, r3
 800795a:	d107      	bne.n	800796c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007968:	429a      	cmp	r2, r3
 800796a:	d001      	beq.n	8007970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40023800 	.word	0x40023800

08007980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0cc      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007994:	4b68      	ldr	r3, [pc, #416]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d90c      	bls.n	80079bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a2:	4b65      	ldr	r3, [pc, #404]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079aa:	4b63      	ldr	r3, [pc, #396]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d001      	beq.n	80079bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0b8      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d020      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079d4:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	4a58      	ldr	r2, [pc, #352]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079ec:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	4a52      	ldr	r2, [pc, #328]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079f8:	4b50      	ldr	r3, [pc, #320]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	494d      	ldr	r1, [pc, #308]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d044      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d107      	bne.n	8007a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1e:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d119      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e07f      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d003      	beq.n	8007a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3e:	4b3f      	ldr	r3, [pc, #252]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e06f      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a4e:	4b3b      	ldr	r3, [pc, #236]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e067      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a5e:	4b37      	ldr	r3, [pc, #220]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f023 0203 	bic.w	r2, r3, #3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4934      	ldr	r1, [pc, #208]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a70:	f7fe f904 	bl	8005c7c <HAL_GetTick>
 8007a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a76:	e00a      	b.n	8007a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a78:	f7fe f900 	bl	8005c7c <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e04f      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8e:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 020c 	and.w	r2, r3, #12
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d1eb      	bne.n	8007a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d20c      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aae:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e032      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad4:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4916      	ldr	r1, [pc, #88]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d009      	beq.n	8007b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007af2:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	490e      	ldr	r1, [pc, #56]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b06:	f000 f821 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	091b      	lsrs	r3, r3, #4
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	490a      	ldr	r1, [pc, #40]	; (8007b40 <HAL_RCC_ClockConfig+0x1c0>)
 8007b18:	5ccb      	ldrb	r3, [r1, r3]
 8007b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1e:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <HAL_RCC_ClockConfig+0x1c4>)
 8007b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b22:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <HAL_RCC_ClockConfig+0x1c8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fb fed6 	bl	80038d8 <HAL_InitTick>

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40023c00 	.word	0x40023c00
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	0800a808 	.word	0x0800a808
 8007b44:	200000d0 	.word	0x200000d0
 8007b48:	200000d4 	.word	0x200000d4

08007b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b50:	b090      	sub	sp, #64	; 0x40
 8007b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
 8007b58:	2300      	movs	r3, #0
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b64:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 030c 	and.w	r3, r3, #12
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d00d      	beq.n	8007b8c <HAL_RCC_GetSysClockFreq+0x40>
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	f200 80a1 	bhi.w	8007cb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_RCC_GetSysClockFreq+0x34>
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d003      	beq.n	8007b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b7e:	e09b      	b.n	8007cb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b80:	4b53      	ldr	r3, [pc, #332]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b84:	e09b      	b.n	8007cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b86:	4b53      	ldr	r3, [pc, #332]	; (8007cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b8a:	e098      	b.n	8007cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b8c:	4b4f      	ldr	r3, [pc, #316]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b96:	4b4d      	ldr	r3, [pc, #308]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d028      	beq.n	8007bf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ba2:	4b4a      	ldr	r3, [pc, #296]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	2200      	movs	r2, #0
 8007baa:	623b      	str	r3, [r7, #32]
 8007bac:	627a      	str	r2, [r7, #36]	; 0x24
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4b47      	ldr	r3, [pc, #284]	; (8007cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bb8:	fb03 f201 	mul.w	r2, r3, r1
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	fb00 f303 	mul.w	r3, r0, r3
 8007bc2:	4413      	add	r3, r2
 8007bc4:	4a43      	ldr	r2, [pc, #268]	; (8007cd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bc6:	fba0 1202 	umull	r1, r2, r0, r2
 8007bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bcc:	460a      	mov	r2, r1
 8007bce:	62ba      	str	r2, [r7, #40]	; 0x28
 8007bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd2:	4413      	add	r3, r2
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd8:	2200      	movs	r2, #0
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	61fa      	str	r2, [r7, #28]
 8007bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007be2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007be6:	f7f8 fe35 	bl	8000854 <__aeabi_uldivmod>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4613      	mov	r3, r2
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf2:	e053      	b.n	8007c9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bf4:	4b35      	ldr	r3, [pc, #212]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	099b      	lsrs	r3, r3, #6
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	617a      	str	r2, [r7, #20]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c06:	f04f 0b00 	mov.w	fp, #0
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	465b      	mov	r3, fp
 8007c0e:	f04f 0000 	mov.w	r0, #0
 8007c12:	f04f 0100 	mov.w	r1, #0
 8007c16:	0159      	lsls	r1, r3, #5
 8007c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c1c:	0150      	lsls	r0, r2, #5
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	ebb2 080a 	subs.w	r8, r2, sl
 8007c26:	eb63 090b 	sbc.w	r9, r3, fp
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c3e:	ebb2 0408 	subs.w	r4, r2, r8
 8007c42:	eb63 0509 	sbc.w	r5, r3, r9
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	f04f 0300 	mov.w	r3, #0
 8007c4e:	00eb      	lsls	r3, r5, #3
 8007c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c54:	00e2      	lsls	r2, r4, #3
 8007c56:	4614      	mov	r4, r2
 8007c58:	461d      	mov	r5, r3
 8007c5a:	eb14 030a 	adds.w	r3, r4, sl
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	eb45 030b 	adc.w	r3, r5, fp
 8007c64:	607b      	str	r3, [r7, #4]
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c72:	4629      	mov	r1, r5
 8007c74:	028b      	lsls	r3, r1, #10
 8007c76:	4621      	mov	r1, r4
 8007c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	028a      	lsls	r2, r1, #10
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	2200      	movs	r2, #0
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	60fa      	str	r2, [r7, #12]
 8007c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c90:	f7f8 fde0 	bl	8000854 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4613      	mov	r3, r2
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	0c1b      	lsrs	r3, r3, #16
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007cb6:	e002      	b.n	8007cbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3740      	adds	r7, #64	; 0x40
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	00f42400 	.word	0x00f42400
 8007cd4:	017d7840 	.word	0x017d7840

08007cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cdc:	4b03      	ldr	r3, [pc, #12]	; (8007cec <HAL_RCC_GetHCLKFreq+0x14>)
 8007cde:	681b      	ldr	r3, [r3, #0]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	200000d0 	.word	0x200000d0

08007cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cf4:	f7ff fff0 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	0a9b      	lsrs	r3, r3, #10
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	4903      	ldr	r1, [pc, #12]	; (8007d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d06:	5ccb      	ldrb	r3, [r1, r3]
 8007d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	40023800 	.word	0x40023800
 8007d14:	0800a818 	.word	0x0800a818

08007d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d1c:	f7ff ffdc 	bl	8007cd8 <HAL_RCC_GetHCLKFreq>
 8007d20:	4602      	mov	r2, r0
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	0b5b      	lsrs	r3, r3, #13
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	4903      	ldr	r1, [pc, #12]	; (8007d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d2e:	5ccb      	ldrb	r3, [r1, r3]
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	0800a818 	.word	0x0800a818

08007d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	220f      	movs	r2, #15
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d50:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <HAL_RCC_GetClockConfig+0x5c>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 0203 	and.w	r2, r3, #3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <HAL_RCC_GetClockConfig+0x5c>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <HAL_RCC_GetClockConfig+0x5c>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <HAL_RCC_GetClockConfig+0x5c>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	08db      	lsrs	r3, r3, #3
 8007d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <HAL_RCC_GetClockConfig+0x60>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0207 	and.w	r2, r3, #7
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	601a      	str	r2, [r3, #0]
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	40023c00 	.word	0x40023c00

08007da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e041      	b.n	8007e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f839 	bl	8007e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f000 fb8c 	bl	8008500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d001      	beq.n	8007e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e044      	b.n	8007efa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1e      	ldr	r2, [pc, #120]	; (8007f08 <HAL_TIM_Base_Start_IT+0xb0>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d018      	beq.n	8007ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9a:	d013      	beq.n	8007ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <HAL_TIM_Base_Start_IT+0xb4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <HAL_TIM_Base_Start_IT+0xb8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d009      	beq.n	8007ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a17      	ldr	r2, [pc, #92]	; (8007f14 <HAL_TIM_Base_Start_IT+0xbc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a16      	ldr	r2, [pc, #88]	; (8007f18 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d111      	bne.n	8007ee8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b06      	cmp	r3, #6
 8007ed4:	d010      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee6:	e007      	b.n	8007ef8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	40010000 	.word	0x40010000
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	40014000 	.word	0x40014000

08007f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e041      	b.n	8007fb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fb fbb4 	bl	80036b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f000 fad0 	bl	8008500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d109      	bne.n	8007fe0 <HAL_TIM_PWM_Start+0x24>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	bf14      	ite	ne
 8007fd8:	2301      	movne	r3, #1
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	e022      	b.n	8008026 <HAL_TIM_PWM_Start+0x6a>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d109      	bne.n	8007ffa <HAL_TIM_PWM_Start+0x3e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	bf14      	ite	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	2300      	moveq	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	e015      	b.n	8008026 <HAL_TIM_PWM_Start+0x6a>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d109      	bne.n	8008014 <HAL_TIM_PWM_Start+0x58>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	bf14      	ite	ne
 800800c:	2301      	movne	r3, #1
 800800e:	2300      	moveq	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e008      	b.n	8008026 <HAL_TIM_PWM_Start+0x6a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e068      	b.n	8008100 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <HAL_TIM_PWM_Start+0x82>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800803c:	e013      	b.n	8008066 <HAL_TIM_PWM_Start+0xaa>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b04      	cmp	r3, #4
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start+0x92>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800804c:	e00b      	b.n	8008066 <HAL_TIM_PWM_Start+0xaa>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b08      	cmp	r3, #8
 8008052:	d104      	bne.n	800805e <HAL_TIM_PWM_Start+0xa2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800805c:	e003      	b.n	8008066 <HAL_TIM_PWM_Start+0xaa>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2201      	movs	r2, #1
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fc52 	bl	8008918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a23      	ldr	r2, [pc, #140]	; (8008108 <HAL_TIM_PWM_Start+0x14c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d107      	bne.n	800808e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800808c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1d      	ldr	r2, [pc, #116]	; (8008108 <HAL_TIM_PWM_Start+0x14c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <HAL_TIM_PWM_Start+0x10e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a0:	d013      	beq.n	80080ca <HAL_TIM_PWM_Start+0x10e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a19      	ldr	r2, [pc, #100]	; (800810c <HAL_TIM_PWM_Start+0x150>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00e      	beq.n	80080ca <HAL_TIM_PWM_Start+0x10e>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a17      	ldr	r2, [pc, #92]	; (8008110 <HAL_TIM_PWM_Start+0x154>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d009      	beq.n	80080ca <HAL_TIM_PWM_Start+0x10e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a16      	ldr	r2, [pc, #88]	; (8008114 <HAL_TIM_PWM_Start+0x158>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d004      	beq.n	80080ca <HAL_TIM_PWM_Start+0x10e>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a14      	ldr	r2, [pc, #80]	; (8008118 <HAL_TIM_PWM_Start+0x15c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d111      	bne.n	80080ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b06      	cmp	r3, #6
 80080da:	d010      	beq.n	80080fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0201 	orr.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ec:	e007      	b.n	80080fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40010000 	.word	0x40010000
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800
 8008114:	40000c00 	.word	0x40000c00
 8008118:	40014000 	.word	0x40014000

0800811c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b02      	cmp	r3, #2
 8008130:	d122      	bne.n	8008178 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b02      	cmp	r3, #2
 800813e:	d11b      	bne.n	8008178 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0202 	mvn.w	r2, #2
 8008148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9b0 	bl	80084c4 <HAL_TIM_IC_CaptureCallback>
 8008164:	e005      	b.n	8008172 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9a2 	bl	80084b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9b3 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b04      	cmp	r3, #4
 8008184:	d122      	bne.n	80081cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b04      	cmp	r3, #4
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0204 	mvn.w	r2, #4
 800819c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f986 	bl	80084c4 <HAL_TIM_IC_CaptureCallback>
 80081b8:	e005      	b.n	80081c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f978 	bl	80084b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f989 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d122      	bne.n	8008220 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d11b      	bne.n	8008220 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0208 	mvn.w	r2, #8
 80081f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f95c 	bl	80084c4 <HAL_TIM_IC_CaptureCallback>
 800820c:	e005      	b.n	800821a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f94e 	bl	80084b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f95f 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b10      	cmp	r3, #16
 800822c:	d122      	bne.n	8008274 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b10      	cmp	r3, #16
 800823a:	d11b      	bne.n	8008274 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0210 	mvn.w	r2, #16
 8008244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2208      	movs	r2, #8
 800824a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f932 	bl	80084c4 <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f924 	bl	80084b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f935 	bl	80084d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10e      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b01      	cmp	r3, #1
 800828e:	d107      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0201 	mvn.w	r2, #1
 8008298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fb f92e 	bl	80034fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d10e      	bne.n	80082cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b8:	2b80      	cmp	r3, #128	; 0x80
 80082ba:	d107      	bne.n	80082cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fbc4 	bl	8008a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b40      	cmp	r3, #64	; 0x40
 80082d8:	d10e      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b40      	cmp	r3, #64	; 0x40
 80082e6:	d107      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f8fa 	bl	80084ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b20      	cmp	r3, #32
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b20      	cmp	r3, #32
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0220 	mvn.w	r2, #32
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb8e 	bl	8008a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008346:	2302      	movs	r3, #2
 8008348:	e0ae      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b0c      	cmp	r3, #12
 8008356:	f200 809f 	bhi.w	8008498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008395 	.word	0x08008395
 8008364:	08008499 	.word	0x08008499
 8008368:	08008499 	.word	0x08008499
 800836c:	08008499 	.word	0x08008499
 8008370:	080083d5 	.word	0x080083d5
 8008374:	08008499 	.word	0x08008499
 8008378:	08008499 	.word	0x08008499
 800837c:	08008499 	.word	0x08008499
 8008380:	08008417 	.word	0x08008417
 8008384:	08008499 	.word	0x08008499
 8008388:	08008499 	.word	0x08008499
 800838c:	08008499 	.word	0x08008499
 8008390:	08008457 	.word	0x08008457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 f930 	bl	8008600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0208 	orr.w	r2, r2, #8
 80083ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6999      	ldr	r1, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	619a      	str	r2, [r3, #24]
      break;
 80083d2:	e064      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f976 	bl	80086cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	619a      	str	r2, [r3, #24]
      break;
 8008414:	e043      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 f9c1 	bl	80087a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0208 	orr.w	r2, r2, #8
 8008430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0204 	bic.w	r2, r2, #4
 8008440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69d9      	ldr	r1, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	61da      	str	r2, [r3, #28]
      break;
 8008454:	e023      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fa0b 	bl	8008878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69d9      	ldr	r1, [r3, #28]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	021a      	lsls	r2, r3, #8
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	61da      	str	r2, [r3, #28]
      break;
 8008496:	e002      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
      break;
 800849c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a34      	ldr	r2, [pc, #208]	; (80085e4 <TIM_Base_SetConfig+0xe4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00f      	beq.n	8008538 <TIM_Base_SetConfig+0x38>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851e:	d00b      	beq.n	8008538 <TIM_Base_SetConfig+0x38>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a31      	ldr	r2, [pc, #196]	; (80085e8 <TIM_Base_SetConfig+0xe8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d007      	beq.n	8008538 <TIM_Base_SetConfig+0x38>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a30      	ldr	r2, [pc, #192]	; (80085ec <TIM_Base_SetConfig+0xec>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d003      	beq.n	8008538 <TIM_Base_SetConfig+0x38>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a2f      	ldr	r2, [pc, #188]	; (80085f0 <TIM_Base_SetConfig+0xf0>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d108      	bne.n	800854a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a25      	ldr	r2, [pc, #148]	; (80085e4 <TIM_Base_SetConfig+0xe4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01b      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008558:	d017      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a22      	ldr	r2, [pc, #136]	; (80085e8 <TIM_Base_SetConfig+0xe8>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d013      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a21      	ldr	r2, [pc, #132]	; (80085ec <TIM_Base_SetConfig+0xec>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d00f      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a20      	ldr	r2, [pc, #128]	; (80085f0 <TIM_Base_SetConfig+0xf0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00b      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <TIM_Base_SetConfig+0xf4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d007      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <TIM_Base_SetConfig+0xf8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d003      	beq.n	800858a <TIM_Base_SetConfig+0x8a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <TIM_Base_SetConfig+0xfc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d108      	bne.n	800859c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <TIM_Base_SetConfig+0xe4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d103      	bne.n	80085d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	615a      	str	r2, [r3, #20]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40010000 	.word	0x40010000
 80085e8:	40000400 	.word	0x40000400
 80085ec:	40000800 	.word	0x40000800
 80085f0:	40000c00 	.word	0x40000c00
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40014400 	.word	0x40014400
 80085fc:	40014800 	.word	0x40014800

08008600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	f023 0201 	bic.w	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 0302 	bic.w	r3, r3, #2
 8008648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1c      	ldr	r2, [pc, #112]	; (80086c8 <TIM_OC1_SetConfig+0xc8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d10c      	bne.n	8008676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f023 0308 	bic.w	r3, r3, #8
 8008662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f023 0304 	bic.w	r3, r3, #4
 8008674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <TIM_OC1_SetConfig+0xc8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d111      	bne.n	80086a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800868c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	621a      	str	r2, [r3, #32]
}
 80086bc:	bf00      	nop
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	40010000 	.word	0x40010000

080086cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f023 0210 	bic.w	r2, r3, #16
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0320 	bic.w	r3, r3, #32
 8008716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a1e      	ldr	r2, [pc, #120]	; (80087a0 <TIM_OC2_SetConfig+0xd4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d10d      	bne.n	8008748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4313      	orrs	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <TIM_OC2_SetConfig+0xd4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d113      	bne.n	8008778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800875e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	621a      	str	r2, [r3, #32]
}
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010000 	.word	0x40010000

080087a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0303 	bic.w	r3, r3, #3
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <TIM_OC3_SetConfig+0xd0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10d      	bne.n	800881e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800881c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a14      	ldr	r2, [pc, #80]	; (8008874 <TIM_OC3_SetConfig+0xd0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d113      	bne.n	800884e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800882c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4313      	orrs	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	621a      	str	r2, [r3, #32]
}
 8008868:	bf00      	nop
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	40010000 	.word	0x40010000

08008878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	031b      	lsls	r3, r3, #12
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a10      	ldr	r2, [pc, #64]	; (8008914 <TIM_OC4_SetConfig+0x9c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d109      	bne.n	80088ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	019b      	lsls	r3, r3, #6
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	621a      	str	r2, [r3, #32]
}
 8008906:	bf00      	nop
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	40010000 	.word	0x40010000

08008918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 031f 	and.w	r3, r3, #31
 800892a:	2201      	movs	r2, #1
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a1a      	ldr	r2, [r3, #32]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	43db      	mvns	r3, r3
 800893a:	401a      	ands	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1a      	ldr	r2, [r3, #32]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	fa01 f303 	lsl.w	r3, r1, r3
 8008950:	431a      	orrs	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	621a      	str	r2, [r3, #32]
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008978:	2302      	movs	r3, #2
 800897a:	e050      	b.n	8008a1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a1c      	ldr	r2, [pc, #112]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d018      	beq.n	80089f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c8:	d013      	beq.n	80089f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a18      	ldr	r2, [pc, #96]	; (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00e      	beq.n	80089f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a16      	ldr	r2, [pc, #88]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d009      	beq.n	80089f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d004      	beq.n	80089f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a13      	ldr	r2, [pc, #76]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d10c      	bne.n	8008a0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00
 8008a3c:	40014000 	.word	0x40014000

08008a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e03f      	b.n	8008afa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7fa fe6a 	bl	8003768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2224      	movs	r2, #36	; 0x24
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 ff8b 	bl	80099c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e021      	b.n	8008b58 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2224      	movs	r2, #36	; 0x24
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b2a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7fa fe9f 	bl	8003870 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	; 0x28
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d17c      	bne.n	8008c7a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_UART_Transmit+0x2c>
 8008b86:	88fb      	ldrh	r3, [r7, #6]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e075      	b.n	8008c7c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_UART_Transmit+0x3e>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e06e      	b.n	8008c7c <HAL_UART_Transmit+0x11c>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2221      	movs	r2, #33	; 0x21
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bb4:	f7fd f862 	bl	8005c7c <HAL_GetTick>
 8008bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	88fa      	ldrh	r2, [r7, #6]
 8008bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bce:	d108      	bne.n	8008be2 <HAL_UART_Transmit+0x82>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	61bb      	str	r3, [r7, #24]
 8008be0:	e003      	b.n	8008bea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008bf2:	e02a      	b.n	8008c4a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2180      	movs	r1, #128	; 0x80
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 fc3c 	bl	800947c <UART_WaitOnFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e036      	b.n	8008c7c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	3302      	adds	r3, #2
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e007      	b.n	8008c3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1cf      	bne.n	8008bf4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2140      	movs	r1, #64	; 0x40
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fc0c 	bl	800947c <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e006      	b.n	8008c7c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e000      	b.n	8008c7c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c7a:	2302      	movs	r3, #2
  }
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d11d      	bne.n	8008cda <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <HAL_UART_Receive_IT+0x26>
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e016      	b.n	8008cdc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_UART_Receive_IT+0x38>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e00f      	b.n	8008cdc <HAL_UART_Receive_IT+0x58>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008cca:	88fb      	ldrh	r3, [r7, #6]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fc41 	bl	8009558 <UART_Start_Receive_IT>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	e000      	b.n	8008cdc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008cda:	2302      	movs	r3, #2
  }
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b0a2      	sub	sp, #136	; 0x88
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d04:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8008d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	330c      	adds	r3, #12
 8008d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d18:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e3      	bne.n	8008cf2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008d4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e5      	bne.n	8008d2a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d119      	bne.n	8008d9a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	f023 0310 	bic.w	r3, r3, #16
 8008d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	330c      	adds	r3, #12
 8008d84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d86:	647a      	str	r2, [r7, #68]	; 0x44
 8008d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e5      	bne.n	8008d66 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00f      	beq.n	8008dc2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dac:	2b80      	cmp	r3, #128	; 0x80
 8008dae:	d104      	bne.n	8008dba <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db4:	4a53      	ldr	r2, [pc, #332]	; (8008f04 <HAL_UART_Abort_IT+0x220>)
 8008db6:	651a      	str	r2, [r3, #80]	; 0x50
 8008db8:	e003      	b.n	8008dc2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00f      	beq.n	8008dea <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b40      	cmp	r3, #64	; 0x40
 8008dd6:	d104      	bne.n	8008de2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	4a4a      	ldr	r2, [pc, #296]	; (8008f08 <HAL_UART_Abort_IT+0x224>)
 8008dde:	651a      	str	r2, [r3, #80]	; 0x50
 8008de0:	e003      	b.n	8008dea <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	2200      	movs	r2, #0
 8008de8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df4:	2b80      	cmp	r3, #128	; 0x80
 8008df6:	d12d      	bne.n	8008e54 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3314      	adds	r3, #20
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	e853 3f00 	ldrex	r3, [r3]
 8008e06:	623b      	str	r3, [r7, #32]
   return(result);
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e0e:	677b      	str	r3, [r7, #116]	; 0x74
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3314      	adds	r3, #20
 8008e16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e18:	633a      	str	r2, [r7, #48]	; 0x30
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e20:	e841 2300 	strex	r3, r2, [r1]
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e5      	bne.n	8008df8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00f      	beq.n	8008e54 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fd fd1b 	bl	8006874 <HAL_DMA_Abort_IT>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e48:	2200      	movs	r2, #0
 8008e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8008e4c:	e002      	b.n	8008e54 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	d130      	bne.n	8008ec4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3314      	adds	r3, #20
 8008e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e78:	673b      	str	r3, [r7, #112]	; 0x70
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e82:	61fa      	str	r2, [r7, #28]
 8008e84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	69b9      	ldr	r1, [r7, #24]
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e5      	bne.n	8008e62 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fd fce6 	bl	8006874 <HAL_DMA_Abort_IT>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ebc:	e002      	b.n	8008ec4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8008ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d116      	bne.n	8008efa <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 faab 	bl	8009450 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3788      	adds	r7, #136	; 0x88
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	080096c3 	.word	0x080096c3
 8008f08:	08009723 	.word	0x08009723

08008f0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b0ba      	sub	sp, #232	; 0xe8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10f      	bne.n	8008f72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <HAL_UART_IRQHandler+0x66>
 8008f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fc71 	bl	8009852 <UART_Receive_IT>
      return;
 8008f70:	e256      	b.n	8009420 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 80de 	beq.w	8009138 <HAL_UART_IRQHandler+0x22c>
 8008f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d106      	bne.n	8008f96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80d1 	beq.w	8009138 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <HAL_UART_IRQHandler+0xae>
 8008fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f043 0201 	orr.w	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xd2>
 8008fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f043 0202 	orr.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <HAL_UART_IRQHandler+0xf6>
 8008fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f043 0204 	orr.w	r2, r3, #4
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	f003 0308 	and.w	r3, r3, #8
 800900a:	2b00      	cmp	r3, #0
 800900c:	d011      	beq.n	8009032 <HAL_UART_IRQHandler+0x126>
 800900e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d105      	bne.n	8009026 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800901a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	f043 0208 	orr.w	r2, r3, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 81ed 	beq.w	8009416 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800903c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d008      	beq.n	800905a <HAL_UART_IRQHandler+0x14e>
 8009048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fbfc 	bl	8009852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	bf0c      	ite	eq
 8009068:	2301      	moveq	r3, #1
 800906a:	2300      	movne	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	f003 0308 	and.w	r3, r3, #8
 800907a:	2b00      	cmp	r3, #0
 800907c:	d103      	bne.n	8009086 <HAL_UART_IRQHandler+0x17a>
 800907e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04f      	beq.n	8009126 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 faa4 	bl	80095d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009096:	2b40      	cmp	r3, #64	; 0x40
 8009098:	d141      	bne.n	800911e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3314      	adds	r3, #20
 80090c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1d9      	bne.n	800909a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d013      	beq.n	8009116 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	4a7d      	ldr	r2, [pc, #500]	; (80092e8 <HAL_UART_IRQHandler+0x3dc>)
 80090f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fd fbba 	bl	8006874 <HAL_DMA_Abort_IT>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d016      	beq.n	8009134 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009114:	e00e      	b.n	8009134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f990 	bl	800943c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800911c:	e00a      	b.n	8009134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f98c 	bl	800943c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009124:	e006      	b.n	8009134 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f988 	bl	800943c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009132:	e170      	b.n	8009416 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	bf00      	nop
    return;
 8009136:	e16e      	b.n	8009416 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	2b01      	cmp	r3, #1
 800913e:	f040 814a 	bne.w	80093d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009146:	f003 0310 	and.w	r3, r3, #16
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8143 	beq.w	80093d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 813c 	beq.w	80093d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800915e:	2300      	movs	r3, #0
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	60bb      	str	r3, [r7, #8]
 8009172:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917e:	2b40      	cmp	r3, #64	; 0x40
 8009180:	f040 80b4 	bne.w	80092ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8140 	beq.w	800941a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800919e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a2:	429a      	cmp	r2, r3
 80091a4:	f080 8139 	bcs.w	800941a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ba:	f000 8088 	beq.w	80092ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	330c      	adds	r3, #12
 80091c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1d9      	bne.n	80091be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3314      	adds	r3, #20
 8009210:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800921a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3314      	adds	r3, #20
 800922a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800922e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009232:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009236:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e1      	bne.n	800920a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3314      	adds	r3, #20
 800924c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3314      	adds	r3, #20
 8009266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800926a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800926c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e3      	bne.n	8009246 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	330c      	adds	r3, #12
 8009292:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800929c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800929e:	f023 0310 	bic.w	r3, r3, #16
 80092a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	330c      	adds	r3, #12
 80092ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80092b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e3      	bne.n	800928c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fd fa63 	bl	8006794 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f8c0 	bl	8009464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092e4:	e099      	b.n	800941a <HAL_UART_IRQHandler+0x50e>
 80092e6:	bf00      	nop
 80092e8:	0800969b 	.word	0x0800969b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 808b 	beq.w	800941e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 8086 	beq.w	800941e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	330c      	adds	r3, #12
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	330c      	adds	r3, #12
 8009332:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009336:	647a      	str	r2, [r7, #68]	; 0x44
 8009338:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800933c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e3      	bne.n	8009312 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	623b      	str	r3, [r7, #32]
   return(result);
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800936e:	633a      	str	r2, [r7, #48]	; 0x30
 8009370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e3      	bne.n	800934a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0310 	bic.w	r3, r3, #16
 80093a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	330c      	adds	r3, #12
 80093b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093b4:	61fa      	str	r2, [r7, #28]
 80093b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	69b9      	ldr	r1, [r7, #24]
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	617b      	str	r3, [r7, #20]
   return(result);
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e3      	bne.n	8009390 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f848 	bl	8009464 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093d4:	e023      	b.n	800941e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <HAL_UART_IRQHandler+0x4ea>
 80093e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9c7 	bl	8009782 <UART_Transmit_IT>
    return;
 80093f4:	e014      	b.n	8009420 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00e      	beq.n	8009420 <HAL_UART_IRQHandler+0x514>
 8009402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	d008      	beq.n	8009420 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa07 	bl	8009822 <UART_EndTransmit_IT>
    return;
 8009414:	e004      	b.n	8009420 <HAL_UART_IRQHandler+0x514>
    return;
 8009416:	bf00      	nop
 8009418:	e002      	b.n	8009420 <HAL_UART_IRQHandler+0x514>
      return;
 800941a:	bf00      	nop
 800941c:	e000      	b.n	8009420 <HAL_UART_IRQHandler+0x514>
      return;
 800941e:	bf00      	nop
  }
}
 8009420:	37e8      	adds	r7, #232	; 0xe8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop

08009428 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b090      	sub	sp, #64	; 0x40
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	603b      	str	r3, [r7, #0]
 8009488:	4613      	mov	r3, r2
 800948a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948c:	e050      	b.n	8009530 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009494:	d04c      	beq.n	8009530 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009498:	2b00      	cmp	r3, #0
 800949a:	d007      	beq.n	80094ac <UART_WaitOnFlagUntilTimeout+0x30>
 800949c:	f7fc fbee 	bl	8005c7c <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d241      	bcs.n	8009530 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	330c      	adds	r3, #12
 80094ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094cc:	637a      	str	r2, [r7, #52]	; 0x34
 80094ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e5      	bne.n	80094ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	3314      	adds	r3, #20
 80094e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	e853 3f00 	ldrex	r3, [r3]
 80094ee:	613b      	str	r3, [r7, #16]
   return(result);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f023 0301 	bic.w	r3, r3, #1
 80094f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3314      	adds	r3, #20
 80094fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009500:	623a      	str	r2, [r7, #32]
 8009502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009504:	69f9      	ldr	r1, [r7, #28]
 8009506:	6a3a      	ldr	r2, [r7, #32]
 8009508:	e841 2300 	strex	r3, r2, [r1]
 800950c:	61bb      	str	r3, [r7, #24]
   return(result);
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e5      	bne.n	80094e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e00f      	b.n	8009550 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	4013      	ands	r3, r2
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	429a      	cmp	r2, r3
 800953e:	bf0c      	ite	eq
 8009540:	2301      	moveq	r3, #1
 8009542:	2300      	movne	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	461a      	mov	r2, r3
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	429a      	cmp	r2, r3
 800954c:	d09f      	beq.n	800948e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3740      	adds	r7, #64	; 0x40
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	88fa      	ldrh	r2, [r7, #6]
 8009576:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2222      	movs	r2, #34	; 0x22
 8009582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0201 	orr.w	r2, r2, #1
 80095b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0220 	orr.w	r2, r2, #32
 80095c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b095      	sub	sp, #84	; 0x54
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	330c      	adds	r3, #12
 80095fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095fc:	643a      	str	r2, [r7, #64]	; 0x40
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e5      	bne.n	80095dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3314      	adds	r3, #20
 8009616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	f023 0301 	bic.w	r3, r3, #1
 8009626:	64bb      	str	r3, [r7, #72]	; 0x48
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e5      	bne.n	8009610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	2b01      	cmp	r3, #1
 800964a:	d119      	bne.n	8009680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	330c      	adds	r3, #12
 8009652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	60bb      	str	r3, [r7, #8]
   return(result);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f023 0310 	bic.w	r3, r3, #16
 8009662:	647b      	str	r3, [r7, #68]	; 0x44
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	330c      	adds	r3, #12
 800966a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966c:	61ba      	str	r2, [r7, #24]
 800966e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6979      	ldr	r1, [r7, #20]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	613b      	str	r3, [r7, #16]
   return(result);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e5      	bne.n	800964c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800968e:	bf00      	nop
 8009690:	3754      	adds	r7, #84	; 0x54
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f7ff fec1 	bl	800943c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	2200      	movs	r2, #0
 80096d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d117      	bne.n	800971a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff fe9c 	bl	8009450 <HAL_UART_AbortCpltCallback>
 8009718:	e000      	b.n	800971c <UART_DMATxAbortCallback+0x5a>
      return;
 800971a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	2200      	movs	r2, #0
 8009736:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	2b00      	cmp	r3, #0
 800973e:	d004      	beq.n	800974a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009746:	2b00      	cmp	r3, #0
 8009748:	d117      	bne.n	800977a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7ff fe6c 	bl	8009450 <HAL_UART_AbortCpltCallback>
 8009778:	e000      	b.n	800977c <UART_DMARxAbortCallback+0x5a>
      return;
 800977a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b21      	cmp	r3, #33	; 0x21
 8009794:	d13e      	bne.n	8009814 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979e:	d114      	bne.n	80097ca <UART_Transmit_IT+0x48>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d110      	bne.n	80097ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	1c9a      	adds	r2, r3, #2
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	621a      	str	r2, [r3, #32]
 80097c8:	e008      	b.n	80097dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	1c59      	adds	r1, r3, #1
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6211      	str	r1, [r2, #32]
 80097d4:	781a      	ldrb	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4619      	mov	r1, r3
 80097ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10f      	bne.n	8009810 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800980e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	e000      	b.n	8009816 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009814:	2302      	movs	r3, #2
  }
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009838:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fdf0 	bl	8009428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b08c      	sub	sp, #48	; 0x30
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b22      	cmp	r3, #34	; 0x22
 8009864:	f040 80ab 	bne.w	80099be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009870:	d117      	bne.n	80098a2 <UART_Receive_IT+0x50>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d113      	bne.n	80098a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009882:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	b29b      	uxth	r3, r3
 800988c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009890:	b29a      	uxth	r2, r3
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	1c9a      	adds	r2, r3, #2
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	629a      	str	r2, [r3, #40]	; 0x28
 80098a0:	e026      	b.n	80098f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b4:	d007      	beq.n	80098c6 <UART_Receive_IT+0x74>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <UART_Receive_IT+0x82>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e008      	b.n	80098e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	4619      	mov	r1, r3
 80098fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009900:	2b00      	cmp	r3, #0
 8009902:	d15a      	bne.n	80099ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0220 	bic.w	r2, r2, #32
 8009912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	695a      	ldr	r2, [r3, #20]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0201 	bic.w	r2, r2, #1
 8009932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	2b01      	cmp	r3, #1
 8009942:	d135      	bne.n	80099b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	330c      	adds	r3, #12
 8009950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	613b      	str	r3, [r7, #16]
   return(result);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f023 0310 	bic.w	r3, r3, #16
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	330c      	adds	r3, #12
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	623a      	str	r2, [r7, #32]
 800996c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	69f9      	ldr	r1, [r7, #28]
 8009970:	6a3a      	ldr	r2, [r7, #32]
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	61bb      	str	r3, [r7, #24]
   return(result);
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e5      	bne.n	800994a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b10      	cmp	r3, #16
 800998a:	d10a      	bne.n	80099a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800998c:	2300      	movs	r3, #0
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff fd5b 	bl	8009464 <HAL_UARTEx_RxEventCallback>
 80099ae:	e002      	b.n	80099b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7f9 fd7f 	bl	80034b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e002      	b.n	80099c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	e000      	b.n	80099c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80099be:	2302      	movs	r3, #2
  }
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3730      	adds	r7, #48	; 0x30
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099cc:	b0c0      	sub	sp, #256	; 0x100
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80099e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e4:	68d9      	ldr	r1, [r3, #12]
 80099e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	ea40 0301 	orr.w	r3, r0, r1
 80099f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a20:	f021 010c 	bic.w	r1, r1, #12
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a42:	6999      	ldr	r1, [r3, #24]
 8009a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	ea40 0301 	orr.w	r3, r0, r1
 8009a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4b8f      	ldr	r3, [pc, #572]	; (8009c94 <UART_SetConfig+0x2cc>)
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d005      	beq.n	8009a68 <UART_SetConfig+0xa0>
 8009a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b8d      	ldr	r3, [pc, #564]	; (8009c98 <UART_SetConfig+0x2d0>)
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d104      	bne.n	8009a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a68:	f7fe f956 	bl	8007d18 <HAL_RCC_GetPCLK2Freq>
 8009a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a70:	e003      	b.n	8009a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a72:	f7fe f93d 	bl	8007cf0 <HAL_RCC_GetPCLK1Freq>
 8009a76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a84:	f040 810c 	bne.w	8009ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	1891      	adds	r1, r2, r2
 8009aa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8009aa2:	415b      	adcs	r3, r3
 8009aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009aaa:	4621      	mov	r1, r4
 8009aac:	eb12 0801 	adds.w	r8, r2, r1
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	eb43 0901 	adc.w	r9, r3, r1
 8009ab6:	f04f 0200 	mov.w	r2, #0
 8009aba:	f04f 0300 	mov.w	r3, #0
 8009abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aca:	4690      	mov	r8, r2
 8009acc:	4699      	mov	r9, r3
 8009ace:	4623      	mov	r3, r4
 8009ad0:	eb18 0303 	adds.w	r3, r8, r3
 8009ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ad8:	462b      	mov	r3, r5
 8009ada:	eb49 0303 	adc.w	r3, r9, r3
 8009ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009aee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009af6:	460b      	mov	r3, r1
 8009af8:	18db      	adds	r3, r3, r3
 8009afa:	653b      	str	r3, [r7, #80]	; 0x50
 8009afc:	4613      	mov	r3, r2
 8009afe:	eb42 0303 	adc.w	r3, r2, r3
 8009b02:	657b      	str	r3, [r7, #84]	; 0x54
 8009b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b0c:	f7f6 fea2 	bl	8000854 <__aeabi_uldivmod>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4b61      	ldr	r3, [pc, #388]	; (8009c9c <UART_SetConfig+0x2d4>)
 8009b16:	fba3 2302 	umull	r2, r3, r3, r2
 8009b1a:	095b      	lsrs	r3, r3, #5
 8009b1c:	011c      	lsls	r4, r3, #4
 8009b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	1891      	adds	r1, r2, r2
 8009b36:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b38:	415b      	adcs	r3, r3
 8009b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b40:	4641      	mov	r1, r8
 8009b42:	eb12 0a01 	adds.w	sl, r2, r1
 8009b46:	4649      	mov	r1, r9
 8009b48:	eb43 0b01 	adc.w	fp, r3, r1
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b60:	4692      	mov	sl, r2
 8009b62:	469b      	mov	fp, r3
 8009b64:	4643      	mov	r3, r8
 8009b66:	eb1a 0303 	adds.w	r3, sl, r3
 8009b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b6e:	464b      	mov	r3, r9
 8009b70:	eb4b 0303 	adc.w	r3, fp, r3
 8009b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	18db      	adds	r3, r3, r3
 8009b90:	643b      	str	r3, [r7, #64]	; 0x40
 8009b92:	4613      	mov	r3, r2
 8009b94:	eb42 0303 	adc.w	r3, r2, r3
 8009b98:	647b      	str	r3, [r7, #68]	; 0x44
 8009b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009ba2:	f7f6 fe57 	bl	8000854 <__aeabi_uldivmod>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4611      	mov	r1, r2
 8009bac:	4b3b      	ldr	r3, [pc, #236]	; (8009c9c <UART_SetConfig+0x2d4>)
 8009bae:	fba3 2301 	umull	r2, r3, r3, r1
 8009bb2:	095b      	lsrs	r3, r3, #5
 8009bb4:	2264      	movs	r2, #100	; 0x64
 8009bb6:	fb02 f303 	mul.w	r3, r2, r3
 8009bba:	1acb      	subs	r3, r1, r3
 8009bbc:	00db      	lsls	r3, r3, #3
 8009bbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009bc2:	4b36      	ldr	r3, [pc, #216]	; (8009c9c <UART_SetConfig+0x2d4>)
 8009bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8009bc8:	095b      	lsrs	r3, r3, #5
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009bd0:	441c      	add	r4, r3
 8009bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	1891      	adds	r1, r2, r2
 8009bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8009bec:	415b      	adcs	r3, r3
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bf4:	4641      	mov	r1, r8
 8009bf6:	1851      	adds	r1, r2, r1
 8009bf8:	6339      	str	r1, [r7, #48]	; 0x30
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	414b      	adcs	r3, r1
 8009bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009c00:	f04f 0200 	mov.w	r2, #0
 8009c04:	f04f 0300 	mov.w	r3, #0
 8009c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	00cb      	lsls	r3, r1, #3
 8009c10:	4651      	mov	r1, sl
 8009c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c16:	4651      	mov	r1, sl
 8009c18:	00ca      	lsls	r2, r1, #3
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4603      	mov	r3, r0
 8009c20:	4642      	mov	r2, r8
 8009c22:	189b      	adds	r3, r3, r2
 8009c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c28:	464b      	mov	r3, r9
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	eb42 0303 	adc.w	r3, r2, r3
 8009c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c48:	460b      	mov	r3, r1
 8009c4a:	18db      	adds	r3, r3, r3
 8009c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c4e:	4613      	mov	r3, r2
 8009c50:	eb42 0303 	adc.w	r3, r2, r3
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c5e:	f7f6 fdf9 	bl	8000854 <__aeabi_uldivmod>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <UART_SetConfig+0x2d4>)
 8009c68:	fba3 1302 	umull	r1, r3, r3, r2
 8009c6c:	095b      	lsrs	r3, r3, #5
 8009c6e:	2164      	movs	r1, #100	; 0x64
 8009c70:	fb01 f303 	mul.w	r3, r1, r3
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	3332      	adds	r3, #50	; 0x32
 8009c7a:	4a08      	ldr	r2, [pc, #32]	; (8009c9c <UART_SetConfig+0x2d4>)
 8009c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c80:	095b      	lsrs	r3, r3, #5
 8009c82:	f003 0207 	and.w	r2, r3, #7
 8009c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4422      	add	r2, r4
 8009c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c90:	e105      	b.n	8009e9e <UART_SetConfig+0x4d6>
 8009c92:	bf00      	nop
 8009c94:	40011000 	.word	0x40011000
 8009c98:	40011400 	.word	0x40011400
 8009c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009caa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	464b      	mov	r3, r9
 8009cb6:	1891      	adds	r1, r2, r2
 8009cb8:	6239      	str	r1, [r7, #32]
 8009cba:	415b      	adcs	r3, r3
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	1854      	adds	r4, r2, r1
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	eb43 0501 	adc.w	r5, r3, r1
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	00eb      	lsls	r3, r5, #3
 8009cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cda:	00e2      	lsls	r2, r4, #3
 8009cdc:	4614      	mov	r4, r2
 8009cde:	461d      	mov	r5, r3
 8009ce0:	4643      	mov	r3, r8
 8009ce2:	18e3      	adds	r3, r4, r3
 8009ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ce8:	464b      	mov	r3, r9
 8009cea:	eb45 0303 	adc.w	r3, r5, r3
 8009cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d02:	f04f 0200 	mov.w	r2, #0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d0e:	4629      	mov	r1, r5
 8009d10:	008b      	lsls	r3, r1, #2
 8009d12:	4621      	mov	r1, r4
 8009d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d18:	4621      	mov	r1, r4
 8009d1a:	008a      	lsls	r2, r1, #2
 8009d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d20:	f7f6 fd98 	bl	8000854 <__aeabi_uldivmod>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4b60      	ldr	r3, [pc, #384]	; (8009eac <UART_SetConfig+0x4e4>)
 8009d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	011c      	lsls	r4, r3, #4
 8009d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d44:	4642      	mov	r2, r8
 8009d46:	464b      	mov	r3, r9
 8009d48:	1891      	adds	r1, r2, r2
 8009d4a:	61b9      	str	r1, [r7, #24]
 8009d4c:	415b      	adcs	r3, r3
 8009d4e:	61fb      	str	r3, [r7, #28]
 8009d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d54:	4641      	mov	r1, r8
 8009d56:	1851      	adds	r1, r2, r1
 8009d58:	6139      	str	r1, [r7, #16]
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	414b      	adcs	r3, r1
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	f04f 0200 	mov.w	r2, #0
 8009d64:	f04f 0300 	mov.w	r3, #0
 8009d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	00cb      	lsls	r3, r1, #3
 8009d70:	4651      	mov	r1, sl
 8009d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d76:	4651      	mov	r1, sl
 8009d78:	00ca      	lsls	r2, r1, #3
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4642      	mov	r2, r8
 8009d82:	189b      	adds	r3, r3, r2
 8009d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d88:	464b      	mov	r3, r9
 8009d8a:	460a      	mov	r2, r1
 8009d8c:	eb42 0303 	adc.w	r3, r2, r3
 8009d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009dac:	4649      	mov	r1, r9
 8009dae:	008b      	lsls	r3, r1, #2
 8009db0:	4641      	mov	r1, r8
 8009db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009db6:	4641      	mov	r1, r8
 8009db8:	008a      	lsls	r2, r1, #2
 8009dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009dbe:	f7f6 fd49 	bl	8000854 <__aeabi_uldivmod>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4b39      	ldr	r3, [pc, #228]	; (8009eac <UART_SetConfig+0x4e4>)
 8009dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009dcc:	095b      	lsrs	r3, r3, #5
 8009dce:	2164      	movs	r1, #100	; 0x64
 8009dd0:	fb01 f303 	mul.w	r3, r1, r3
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	011b      	lsls	r3, r3, #4
 8009dd8:	3332      	adds	r3, #50	; 0x32
 8009dda:	4a34      	ldr	r2, [pc, #208]	; (8009eac <UART_SetConfig+0x4e4>)
 8009ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8009de0:	095b      	lsrs	r3, r3, #5
 8009de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009de6:	441c      	add	r4, r3
 8009de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dec:	2200      	movs	r2, #0
 8009dee:	673b      	str	r3, [r7, #112]	; 0x70
 8009df0:	677a      	str	r2, [r7, #116]	; 0x74
 8009df2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009df6:	4642      	mov	r2, r8
 8009df8:	464b      	mov	r3, r9
 8009dfa:	1891      	adds	r1, r2, r2
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	415b      	adcs	r3, r3
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e06:	4641      	mov	r1, r8
 8009e08:	1851      	adds	r1, r2, r1
 8009e0a:	6039      	str	r1, [r7, #0]
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	414b      	adcs	r3, r1
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e1e:	4659      	mov	r1, fp
 8009e20:	00cb      	lsls	r3, r1, #3
 8009e22:	4651      	mov	r1, sl
 8009e24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e28:	4651      	mov	r1, sl
 8009e2a:	00ca      	lsls	r2, r1, #3
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4603      	mov	r3, r0
 8009e32:	4642      	mov	r2, r8
 8009e34:	189b      	adds	r3, r3, r2
 8009e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e38:	464b      	mov	r3, r9
 8009e3a:	460a      	mov	r2, r1
 8009e3c:	eb42 0303 	adc.w	r3, r2, r3
 8009e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e4c:	667a      	str	r2, [r7, #100]	; 0x64
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	008b      	lsls	r3, r1, #2
 8009e5e:	4641      	mov	r1, r8
 8009e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e64:	4641      	mov	r1, r8
 8009e66:	008a      	lsls	r2, r1, #2
 8009e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e6c:	f7f6 fcf2 	bl	8000854 <__aeabi_uldivmod>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <UART_SetConfig+0x4e4>)
 8009e76:	fba3 1302 	umull	r1, r3, r3, r2
 8009e7a:	095b      	lsrs	r3, r3, #5
 8009e7c:	2164      	movs	r1, #100	; 0x64
 8009e7e:	fb01 f303 	mul.w	r3, r1, r3
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	011b      	lsls	r3, r3, #4
 8009e86:	3332      	adds	r3, #50	; 0x32
 8009e88:	4a08      	ldr	r2, [pc, #32]	; (8009eac <UART_SetConfig+0x4e4>)
 8009e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8e:	095b      	lsrs	r3, r3, #5
 8009e90:	f003 020f 	and.w	r2, r3, #15
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4422      	add	r2, r4
 8009e9c:	609a      	str	r2, [r3, #8]
}
 8009e9e:	bf00      	nop
 8009ea0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eaa:	bf00      	nop
 8009eac:	51eb851f 	.word	0x51eb851f

08009eb0 <__libc_init_array>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	4d0d      	ldr	r5, [pc, #52]	; (8009ee8 <__libc_init_array+0x38>)
 8009eb4:	4c0d      	ldr	r4, [pc, #52]	; (8009eec <__libc_init_array+0x3c>)
 8009eb6:	1b64      	subs	r4, r4, r5
 8009eb8:	10a4      	asrs	r4, r4, #2
 8009eba:	2600      	movs	r6, #0
 8009ebc:	42a6      	cmp	r6, r4
 8009ebe:	d109      	bne.n	8009ed4 <__libc_init_array+0x24>
 8009ec0:	4d0b      	ldr	r5, [pc, #44]	; (8009ef0 <__libc_init_array+0x40>)
 8009ec2:	4c0c      	ldr	r4, [pc, #48]	; (8009ef4 <__libc_init_array+0x44>)
 8009ec4:	f000 f82e 	bl	8009f24 <_init>
 8009ec8:	1b64      	subs	r4, r4, r5
 8009eca:	10a4      	asrs	r4, r4, #2
 8009ecc:	2600      	movs	r6, #0
 8009ece:	42a6      	cmp	r6, r4
 8009ed0:	d105      	bne.n	8009ede <__libc_init_array+0x2e>
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed8:	4798      	blx	r3
 8009eda:	3601      	adds	r6, #1
 8009edc:	e7ee      	b.n	8009ebc <__libc_init_array+0xc>
 8009ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee2:	4798      	blx	r3
 8009ee4:	3601      	adds	r6, #1
 8009ee6:	e7f2      	b.n	8009ece <__libc_init_array+0x1e>
 8009ee8:	0800a828 	.word	0x0800a828
 8009eec:	0800a828 	.word	0x0800a828
 8009ef0:	0800a828 	.word	0x0800a828
 8009ef4:	0800a82c 	.word	0x0800a82c

08009ef8 <memcpy>:
 8009ef8:	440a      	add	r2, r1
 8009efa:	4291      	cmp	r1, r2
 8009efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f00:	d100      	bne.n	8009f04 <memcpy+0xc>
 8009f02:	4770      	bx	lr
 8009f04:	b510      	push	{r4, lr}
 8009f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f0e:	4291      	cmp	r1, r2
 8009f10:	d1f9      	bne.n	8009f06 <memcpy+0xe>
 8009f12:	bd10      	pop	{r4, pc}

08009f14 <memset>:
 8009f14:	4402      	add	r2, r0
 8009f16:	4603      	mov	r3, r0
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d100      	bne.n	8009f1e <memset+0xa>
 8009f1c:	4770      	bx	lr
 8009f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f22:	e7f9      	b.n	8009f18 <memset+0x4>

08009f24 <_init>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr

08009f30 <_fini>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr
 8009f3c:	0000      	movs	r0, r0
	...

08009f40 <__system_Reset_veneer>:
 8009f40:	f85f f000 	ldr.w	pc, [pc]	; 8009f44 <__system_Reset_veneer+0x4>
 8009f44:	200000dd 	.word	0x200000dd

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 080018f5 08001965     ............e...
20000040:	08001821 00010065 00000030 0800178d     !...e...0.......
20000050:	080017d1 08001711 00010066 00000000     ........f.......
	...
2000006c:	006627d9 0000000e 08005695 080057d1     .'f......V...W..
2000007c:	080054bd 006627da 00000006 080046c5     .T...'f......F..
2000008c:	08004769 080045bd 006627db 0000000a     iG...E...'f.....
2000009c:	08004d49 08004e45 08004bd9 006627dc     IM..EN...K...'f.
200000ac:	00000003 08001525 0800158d 08001475     ....%.......u...
200000bc:	00010067 00000002 0800113d 08001191     g.......=.......
200000cc:	080010ad                                ....

200000d0 <SystemCoreClock>:
200000d0:	00f42400                                .$..

200000d4 <uwTickPrio>:
200000d4:	00000010                                ....

200000d8 <uwTickFreq>:
200000d8:	00000001                                ....

200000dc <system_Reset>:

__ramfunc void system_Reset()
{
200000dc:	b480      	push	{r7}
200000de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
200000e0:	b672      	cpsid	i
}
200000e2:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200000e4:	4b05      	ldr	r3, [pc, #20]	; (200000fc <system_Reset+0x20>)
200000e6:	68db      	ldr	r3, [r3, #12]
200000e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200000ec:	4903      	ldr	r1, [pc, #12]	; (200000fc <system_Reset+0x20>)
200000ee:	4b04      	ldr	r3, [pc, #16]	; (20000100 <system_Reset+0x24>)
200000f0:	4313      	orrs	r3, r2
200000f2:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
200000f4:	f3bf 8f4f 	dsb	sy
}
200000f8:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
200000fa:	e7fe      	b.n	200000fa <system_Reset+0x1e>
200000fc:	e000ed00 	.word	0xe000ed00
20000100:	05fa0004 	.word	0x05fa0004
