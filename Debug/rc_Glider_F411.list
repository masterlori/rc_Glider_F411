
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cf8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08010e90  08010e90  00020e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011840  08011840  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011840  08011840  00021840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011848  08011848  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011848  08011848  00021848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801184c  0801184c  0002184c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011850  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002610  20000208  08011a58  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002818  08011a58  00032818  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00040000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024c9e  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005b48  00000000  00000000  00054ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001da8  00000000  00000000  0005aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001b78  00000000  00000000  0005c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ea5b  00000000  00000000  0005e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028cde  00000000  00000000  0007cd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a4931  00000000  00000000  000a5a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0014a3aa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007d00  00000000  00000000  0014a3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000208 	.word	0x20000208
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08010e70 	.word	0x08010e70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000020c 	.word	0x2000020c
 80001d4:	08010e70 	.word	0x08010e70

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b974 	b.w	8000d24 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	468e      	mov	lr, r1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14d      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a62:	428a      	cmp	r2, r1
 8000a64:	4694      	mov	ip, r2
 8000a66:	d969      	bls.n	8000b3c <__udivmoddi4+0xe8>
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	b152      	cbz	r2, 8000a84 <__udivmoddi4+0x30>
 8000a6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a72:	f1c2 0120 	rsb	r1, r2, #32
 8000a76:	fa20 f101 	lsr.w	r1, r0, r1
 8000a7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a82:	4094      	lsls	r4, r2
 8000a84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a88:	0c21      	lsrs	r1, r4, #16
 8000a8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a8e:	fa1f f78c 	uxth.w	r7, ip
 8000a92:	fb08 e316 	mls	r3, r8, r6, lr
 8000a96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a9a:	fb06 f107 	mul.w	r1, r6, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aaa:	f080 811f 	bcs.w	8000cec <__udivmoddi4+0x298>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 811c 	bls.w	8000cec <__udivmoddi4+0x298>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b2a4      	uxth	r4, r4
 8000abc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ac4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac8:	fb00 f707 	mul.w	r7, r0, r7
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x92>
 8000ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad8:	f080 810a 	bcs.w	8000cf0 <__udivmoddi4+0x29c>
 8000adc:	42a7      	cmp	r7, r4
 8000ade:	f240 8107 	bls.w	8000cf0 <__udivmoddi4+0x29c>
 8000ae2:	4464      	add	r4, ip
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aea:	1be4      	subs	r4, r4, r7
 8000aec:	2600      	movs	r6, #0
 8000aee:	b11d      	cbz	r5, 8000af8 <__udivmoddi4+0xa4>
 8000af0:	40d4      	lsrs	r4, r2
 8000af2:	2300      	movs	r3, #0
 8000af4:	e9c5 4300 	strd	r4, r3, [r5]
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d909      	bls.n	8000b16 <__udivmoddi4+0xc2>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	f000 80ef 	beq.w	8000ce6 <__udivmoddi4+0x292>
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0e:	4630      	mov	r0, r6
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	fab3 f683 	clz	r6, r3
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d14a      	bne.n	8000bb4 <__udivmoddi4+0x160>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d302      	bcc.n	8000b28 <__udivmoddi4+0xd4>
 8000b22:	4282      	cmp	r2, r0
 8000b24:	f200 80f9 	bhi.w	8000d1a <__udivmoddi4+0x2c6>
 8000b28:	1a84      	subs	r4, r0, r2
 8000b2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b2e:	2001      	movs	r0, #1
 8000b30:	469e      	mov	lr, r3
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d0e0      	beq.n	8000af8 <__udivmoddi4+0xa4>
 8000b36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b3a:	e7dd      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000b3c:	b902      	cbnz	r2, 8000b40 <__udivmoddi4+0xec>
 8000b3e:	deff      	udf	#255	; 0xff
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	f040 8092 	bne.w	8000c6e <__udivmoddi4+0x21a>
 8000b4a:	eba1 010c 	sub.w	r1, r1, ip
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2601      	movs	r6, #1
 8000b58:	0c20      	lsrs	r0, r4, #16
 8000b5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b66:	fb0e f003 	mul.w	r0, lr, r3
 8000b6a:	4288      	cmp	r0, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x12c>
 8000b6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x12a>
 8000b78:	4288      	cmp	r0, r1
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2c0>
 8000b7e:	4643      	mov	r3, r8
 8000b80:	1a09      	subs	r1, r1, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b88:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x156>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x154>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2ca>
 8000ba8:	4608      	mov	r0, r1
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x9a>
 8000bb4:	f1c6 0720 	rsb	r7, r6, #32
 8000bb8:	40b3      	lsls	r3, r6
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	40f9      	lsrs	r1, r7
 8000bce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bda:	0c20      	lsrs	r0, r4, #16
 8000bdc:	fa1f fe8c 	uxth.w	lr, ip
 8000be0:	fb09 1118 	mls	r1, r9, r8, r1
 8000be4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bec:	4288      	cmp	r0, r1
 8000bee:	fa02 f206 	lsl.w	r2, r2, r6
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b8>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2bc>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2bc>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c14:	fb09 1110 	mls	r1, r9, r0, r1
 8000c18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	458e      	cmp	lr, r1
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1e2>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2b4>
 8000c2e:	458e      	cmp	lr, r1
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2b4>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4461      	add	r1, ip
 8000c36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c3e:	eba1 010e 	sub.w	r1, r1, lr
 8000c42:	42a1      	cmp	r1, r4
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46a6      	mov	lr, r4
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x2a4>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x2a0>
 8000c4c:	b15d      	cbz	r5, 8000c66 <__udivmoddi4+0x212>
 8000c4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c52:	eb61 010e 	sbc.w	r1, r1, lr
 8000c56:	fa01 f707 	lsl.w	r7, r1, r7
 8000c5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c5e:	40f1      	lsrs	r1, r6
 8000c60:	431f      	orrs	r7, r3
 8000c62:	e9c5 7100 	strd	r7, r1, [r5]
 8000c66:	2600      	movs	r6, #0
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	40d8      	lsrs	r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4301      	orrs	r1, r0
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c90:	0c0b      	lsrs	r3, r1, #16
 8000c92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c96:	fb00 f60e 	mul.w	r6, r0, lr
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x260>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b8>
 8000cac:	429e      	cmp	r6, r3
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b8>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	b289      	uxth	r1, r1
 8000cb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x28a>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2b0>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2b0>
 8000cda:	3e02      	subs	r6, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	1ac9      	subs	r1, r1, r3
 8000ce0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0x104>
 8000ce6:	462e      	mov	r6, r5
 8000ce8:	4628      	mov	r0, r5
 8000cea:	e705      	b.n	8000af8 <__udivmoddi4+0xa4>
 8000cec:	4606      	mov	r6, r0
 8000cee:	e6e3      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	e6f8      	b.n	8000ae6 <__udivmoddi4+0x92>
 8000cf4:	454b      	cmp	r3, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f8>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d00:	3801      	subs	r0, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f8>
 8000d04:	4646      	mov	r6, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x28a>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1e2>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x260>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b8>
 8000d14:	3b02      	subs	r3, #2
 8000d16:	4461      	add	r1, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x12c>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e709      	b.n	8000b32 <__udivmoddi4+0xde>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x156>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e010      	b.n	8000d58 <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <autopilot_Timer+0x44>)
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <autopilot_Timer+0x44>)
 8000d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d4a:	3a01      	subs	r2, #1
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <autopilot_Timer+0x44>)
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	3301      	adds	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d9eb      	bls.n	8000d36 <autopilot_Timer+0xe>
		}
	}

	return;
 8000d5e:	bf00      	nop
}
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000224 	.word	0x20000224

08000d70 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <autopilot_InitTask+0x84>)
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d80:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	755a      	strb	r2, [r3, #21]
	autopilot_info.astart_elevator_en = 0;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	761a      	strb	r2, [r3, #24]
	autopilot_info.astart_motor_en = 0;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_val = -80;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d96:	22b0      	movs	r2, #176	; 0xb0
 8000d98:	769a      	strb	r2, [r3, #26]
	autopilot_info.astart_motor_val = 90;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <autopilot_InitTask+0x88>)
 8000d9c:	225a      	movs	r2, #90	; 0x5a
 8000d9e:	76da      	strb	r2, [r3, #27]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <autopilot_InitTask+0x90>)
 8000daa:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <autopilot_InitTask+0x94>)
 8000dbc:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <autopilot_InitTask+0x98>)
 8000dc2:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dcc:	220a      	movs	r2, #10
 8000dce:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <autopilot_InitTask+0x9c>)
 8000dd4:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <autopilot_InitTask+0xa0>)
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <autopilot_InitTask+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c

	return;
 8000de8:	bf00      	nop
}
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000280 	.word	0x20000280
 8000df8:	20000224 	.word	0x20000224
 8000dfc:	20000250 	.word	0x20000250
 8000e00:	08000f01 	.word	0x08000f01
 8000e04:	08000f11 	.word	0x08000f11
 8000e08:	08000f3d 	.word	0x08000f3d
 8000e0c:	080011cd 	.word	0x080011cd
 8000e10:	080011ed 	.word	0x080011ed

08000e14 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <autopilot_Task+0x54>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d107      	bne.n	8000e32 <autopilot_Task+0x1e>
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <autopilot_Task+0x58>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f822 	bl	8000e74 <autopilot_gotoState>
 8000e30:	e017      	b.n	8000e62 <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <autopilot_Task+0x54>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d813      	bhi.n	8000e64 <autopilot_Task+0x50>
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <autopilot_Task+0x54>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <autopilot_Task+0x5c>)
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4413      	add	r3, r2
 8000e48:	3304      	adds	r3, #4
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d009      	beq.n	8000e64 <autopilot_Task+0x50>
			autopilot_states[_cur_ap_state].main_func();
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <autopilot_Task+0x54>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <autopilot_Task+0x5c>)
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4798      	blx	r3
		}
	}


	return;
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000280 	.word	0x20000280
 8000e6c:	20000224 	.word	0x20000224
 8000e70:	20000250 	.word	0x20000250

08000e74 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d833      	bhi.n	8000eec <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d812      	bhi.n	8000eb4 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d008      	beq.n	8000eb4 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	3308      	adds	r3, #8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4413      	add	r3, r2
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <autopilot_gotoState+0x84>)
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	330c      	adds	r3, #12
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <autopilot_gotoState+0x88>)
 8000edc:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <autopilot_gotoState+0x80>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <autopilot_gotoState+0x88>)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	7513      	strb	r3, [r2, #20]

	return;
 8000eea:	e000      	b.n	8000eee <autopilot_gotoState+0x7a>
		return;
 8000eec:	bf00      	nop
}
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000280 	.word	0x20000280
 8000ef8:	20000250 	.word	0x20000250
 8000efc:	20000224 	.word	0x20000224

08000f00 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	autopilot_gotoState(AP_STATE_FULLMANUAL);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff ffb5 	bl	8000e74 <autopilot_gotoState>

	return;
 8000f0a:	bf00      	nop
}
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from STM32!\r\n";
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <autopilot_stateFullManStart+0x28>)
 8000f18:	1d3c      	adds	r4, r7, #4
 8000f1a:	461d      	mov	r5, r3
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	6023      	str	r3, [r4, #0]
	CDC_Transmit_FS(data, sizeof(data));
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2114      	movs	r1, #20
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00f fb15 	bl	8010558 <CDC_Transmit_FS>

	return;
 8000f2e:	bf00      	nop
}
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bdb0      	pop	{r4, r5, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	08010e90 	.word	0x08010e90

08000f3c <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 8000f42:	4b9a      	ldr	r3, [pc, #616]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 8091 	bne.w	800106e <autopilot_stateFullManMain+0x132>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 8000f4c:	4b98      	ldr	r3, [pc, #608]	; (80011b0 <autopilot_stateFullManMain+0x274>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4a98      	ldr	r2, [pc, #608]	; (80011b4 <autopilot_stateFullManMain+0x278>)
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	330c      	adds	r3, #12
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a93      	ldr	r2, [pc, #588]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000f5e:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 8000f60:	4b95      	ldr	r3, [pc, #596]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8000f62:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d17d      	bne.n	8001068 <autopilot_stateFullManMain+0x12c>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 8000f6c:	4b92      	ldr	r3, [pc, #584]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8000f6e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	2000      	movs	r0, #0
 8000f78:	f004 fe82 	bl	8005c80 <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 8000f7c:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000f7e:	7e1b      	ldrb	r3, [r3, #24]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d108      	bne.n	8000f98 <autopilot_stateFullManMain+0x5c>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 8000f86:	4b8c      	ldr	r3, [pc, #560]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8000f88:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2001      	movs	r0, #1
 8000f92:	f004 fe75 	bl	8005c80 <servo_setPercnet>
 8000f96:	e013      	b.n	8000fc0 <autopilot_stateFullManMain+0x84>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 8000f98:	4b84      	ldr	r3, [pc, #528]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000f9a:	7e9b      	ldrb	r3, [r3, #26]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f004 fe6d 	bl	8005c80 <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 8000fa6:	4b84      	ldr	r3, [pc, #528]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8000fa8:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bfb8      	it	lt
 8000fb2:	425b      	neglt	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b32      	cmp	r3, #50	; 0x32
 8000fb8:	d902      	bls.n	8000fc0 <autopilot_stateFullManMain+0x84>
					autopilot_info.astart_elevator_en = 0;
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	761a      	strb	r2, [r3, #24]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8000fc0:	4b7d      	ldr	r3, [pc, #500]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8000fc2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dc04      	bgt.n	8000fd6 <autopilot_stateFullManMain+0x9a>
 8000fcc:	4b77      	ldr	r3, [pc, #476]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000fce:	7e5b      	ldrb	r3, [r3, #25]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d133      	bne.n	800103e <autopilot_stateFullManMain+0x102>
 8000fd6:	4b75      	ldr	r3, [pc, #468]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000fd8:	7d5b      	ldrb	r3, [r3, #21]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d12e      	bne.n	800103e <autopilot_stateFullManMain+0x102>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 8000fe0:	4b72      	ldr	r3, [pc, #456]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8000fe2:	7e5b      	ldrb	r3, [r3, #25]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10e      	bne.n	8001008 <autopilot_stateFullManMain+0xcc>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 8000fea:	4b73      	ldr	r3, [pc, #460]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8000fec:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f000 f907 	bl	8001210 <autopilot_expRunningAverage>
 8001002:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 8001006:	e021      	b.n	800104c <autopilot_stateFullManMain+0x110>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <autopilot_stateFullManMain+0x270>)
 800100a:	7edb      	ldrb	r3, [r3, #27]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	f000 f8f9 	bl	8001210 <autopilot_expRunningAverage>
 800101e:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 8001022:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8001024:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001028:	b25b      	sxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	bfb8      	it	lt
 800102e:	425b      	neglt	r3, r3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b32      	cmp	r3, #50	; 0x32
 8001034:	d90a      	bls.n	800104c <autopilot_stateFullManMain+0x110>
						autopilot_info.astart_motor_en = 0;
 8001036:	4b5d      	ldr	r3, [pc, #372]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001038:	2200      	movs	r2, #0
 800103a:	765a      	strb	r2, [r3, #25]
				if( autopilot_info.astart_motor_en == 0 ){
 800103c:	e006      	b.n	800104c <autopilot_stateFullManMain+0x110>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 800103e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80011bc <autopilot_stateFullManMain+0x280>
 8001042:	f000 f8e5 	bl	8001210 <autopilot_expRunningAverage>
 8001046:	ed87 0a03 	vstr	s0, [r7, #12]
 800104a:	e000      	b.n	800104e <autopilot_stateFullManMain+0x112>
				if( autopilot_info.astart_motor_en == 0 ){
 800104c:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 800104e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001056:	edc7 7a01 	vstr	s15, [r7, #4]
 800105a:	793b      	ldrb	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f003 faad 	bl	80045c0 <motor_setTorque>
 8001066:	e002      	b.n	800106e <autopilot_stateFullManMain+0x132>

		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ff03 	bl	8000e74 <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 800106e:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001070:	7d5b      	ldrb	r3, [r3, #21]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d131      	bne.n	80010dc <autopilot_stateFullManMain+0x1a0>
	{
		if(rc_info.connected == 1)
 8001078:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 800107a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d12b      	bne.n	80010dc <autopilot_stateFullManMain+0x1a0>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8001084:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <autopilot_stateFullManMain+0x284>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10e      	bne.n	80010aa <autopilot_stateFullManMain+0x16e>
			{
				if( rc_info.axis_l_x < -70 )
 800108c:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 800108e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001098:	da20      	bge.n	80010dc <autopilot_stateFullManMain+0x1a0>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 800109a:	4b44      	ldr	r3, [pc, #272]	; (80011ac <autopilot_stateFullManMain+0x270>)
 800109c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010a0:	609a      	str	r2, [r3, #8]
					_ap_arm_st = 1;
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <autopilot_stateFullManMain+0x284>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e018      	b.n	80010dc <autopilot_stateFullManMain+0x1a0>
				}
			}
			else if( _ap_arm_st == 1 )
 80010aa:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <autopilot_stateFullManMain+0x284>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d114      	bne.n	80010dc <autopilot_stateFullManMain+0x1a0>
			{
				if( rc_info.axis_l_x >= -70 ){
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 80010b4:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80010be:	db03      	blt.n	80010c8 <autopilot_stateFullManMain+0x18c>
					_ap_arm_st = 0;
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <autopilot_stateFullManMain+0x284>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e009      	b.n	80010dc <autopilot_stateFullManMain+0x1a0>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 80010c8:	4b38      	ldr	r3, [pc, #224]	; (80011ac <autopilot_stateFullManMain+0x270>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <autopilot_stateFullManMain+0x1a0>
					{
						autopilot_info.armed_flag = 1;
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <autopilot_stateFullManMain+0x270>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	755a      	strb	r2, [r3, #21]
						_ap_arm_st = 0;
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <autopilot_stateFullManMain+0x284>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 80010dc:	4b33      	ldr	r3, [pc, #204]	; (80011ac <autopilot_stateFullManMain+0x270>)
 80010de:	7e1b      	ldrb	r3, [r3, #24]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d129      	bne.n	800113a <autopilot_stateFullManMain+0x1fe>
	{
		if( astart_elev_state == 0 )
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <autopilot_stateFullManMain+0x288>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <autopilot_stateFullManMain+0x1ce>
		{
			if( rc_info.button_r == 1 )
 80010ee:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 80010f0:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11f      	bne.n	800113a <autopilot_stateFullManMain+0x1fe>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <autopilot_stateFullManMain+0x270>)
 80010fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001100:	611a      	str	r2, [r3, #16]
				astart_elev_state = 1;
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <autopilot_stateFullManMain+0x288>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e017      	b.n	800113a <autopilot_stateFullManMain+0x1fe>
			}
		}
		else if( astart_elev_state == 1 )
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <autopilot_stateFullManMain+0x288>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d113      	bne.n	800113a <autopilot_stateFullManMain+0x1fe>
		{
			if( rc_info.button_r != 1 ){
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8001114:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d003      	beq.n	8001126 <autopilot_stateFullManMain+0x1ea>
				astart_elev_state = 0;
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <autopilot_stateFullManMain+0x288>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e009      	b.n	800113a <autopilot_stateFullManMain+0x1fe>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d105      	bne.n	800113a <autopilot_stateFullManMain+0x1fe>
				{
					autopilot_info.astart_elevator_en = 1;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001130:	2201      	movs	r2, #1
 8001132:	761a      	strb	r2, [r3, #24]
					astart_elev_state = 0;
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <autopilot_stateFullManMain+0x288>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <autopilot_stateFullManMain+0x270>)
 800113c:	7e5b      	ldrb	r3, [r3, #25]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d12f      	bne.n	80011a4 <autopilot_stateFullManMain+0x268>
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001146:	7d5b      	ldrb	r3, [r3, #21]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d12a      	bne.n	80011a4 <autopilot_stateFullManMain+0x268>
	{
		if( astart_mot_state == 0 )
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <autopilot_stateFullManMain+0x28c>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <autopilot_stateFullManMain+0x236>
		{
			if( rc_info.button_l == 1 )
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 8001158:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d120      	bne.n	80011a4 <autopilot_stateFullManMain+0x268>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001164:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001168:	60da      	str	r2, [r3, #12]
				astart_mot_state = 1;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <autopilot_stateFullManMain+0x28c>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8001170:	e018      	b.n	80011a4 <autopilot_stateFullManMain+0x268>
		else if( astart_mot_state == 1 )
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <autopilot_stateFullManMain+0x28c>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d114      	bne.n	80011a4 <autopilot_stateFullManMain+0x268>
			if( rc_info.button_l != 1 ){
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <autopilot_stateFullManMain+0x27c>)
 800117c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d003      	beq.n	800118e <autopilot_stateFullManMain+0x252>
				astart_mot_state = 0;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <autopilot_stateFullManMain+0x28c>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	return;
 800118c:	e00a      	b.n	80011a4 <autopilot_stateFullManMain+0x268>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <autopilot_stateFullManMain+0x268>
					autopilot_info.astart_motor_en = 1;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <autopilot_stateFullManMain+0x270>)
 8001198:	2201      	movs	r2, #1
 800119a:	765a      	strb	r2, [r3, #25]
					astart_mot_state = 0;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <autopilot_stateFullManMain+0x28c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
	return;
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
}
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000224 	.word	0x20000224
 80011b0:	20000280 	.word	0x20000280
 80011b4:	20000250 	.word	0x20000250
 80011b8:	20000988 	.word	0x20000988
 80011bc:	00000000 	.word	0x00000000
 80011c0:	2000024c 	.word	0x2000024c
 80011c4:	20000281 	.word	0x20000281
 80011c8:	20000282 	.word	0x20000282

080011cc <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2000      	movs	r0, #0
 80011d4:	f004 fd54 	bl	8005c80 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 80011d8:	2100      	movs	r1, #0
 80011da:	2001      	movs	r0, #1
 80011dc:	f004 fd50 	bl	8005c80 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f003 f9ec 	bl	80045c0 <motor_setTorque>

	return;
 80011e8:	bf00      	nop
}
 80011ea:	bd80      	pop	{r7, pc}

080011ec <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <autopilot_stateFailsafeMain+0x1c>)
 80011f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d103      	bne.n	8001204 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fe39 	bl	8000e74 <autopilot_gotoState>
	}
	return;
 8001202:	bf00      	nop
 8001204:	bf00      	nop
}
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000988 	.word	0x20000988
 800120c:	00000000 	.word	0x00000000

08001210 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	d104      	bne.n	8001232 <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <autopilot_expRunningAverage+0x88>)
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e025      	b.n	800127e <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <autopilot_expRunningAverage+0x88>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f93a 	bl	80004b0 <__aeabi_f2d>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <autopilot_expRunningAverage+0x88>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ed97 7a01 	vldr	s14, [r7, #4]
 800124a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124e:	ee17 0a90 	vmov	r0, s15
 8001252:	f7ff f92d 	bl	80004b0 <__aeabi_f2d>
 8001256:	a30e      	add	r3, pc, #56	; (adr r3, 8001290 <autopilot_expRunningAverage+0x80>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f980 	bl	8000560 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7fe ffc4 	bl	80001f4 <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fb86 	bl	8000984 <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <autopilot_expRunningAverage+0x88>)
 800127c:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <autopilot_expRunningAverage+0x88>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	ee07 3a90 	vmov	s15, r3
}
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bdb0      	pop	{r4, r5, r7, pc}
 8001290:	9999999a 	.word	0x9999999a
 8001294:	3fb99999 	.word	0x3fb99999
 8001298:	20000284 	.word	0x20000284

0800129c <cfg_NodeApVarProp>:

*/
/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <cfg_NodeApVarProp+0x1a>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d003      	beq.n	80012bc <cfg_NodeApVarProp+0x20>
 80012b4:	e005      	b.n	80012c2 <cfg_NodeApVarProp+0x26>
	{
		case AUTOPILOT_STATE:	str = "State"; break;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <cfg_NodeApVarProp+0x88>)
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	e004      	b.n	80012c6 <cfg_NodeApVarProp+0x2a>
		case AUTOPILOT_ARMED:	str = "Armed"; break;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <cfg_NodeApVarProp+0x8c>)
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e001      	b.n	80012c6 <cfg_NodeApVarProp+0x2a>
		default: return CFG_ERROR_VARID;
 80012c2:	2302      	movs	r3, #2
 80012c4:	e027      	b.n	8001316 <cfg_NodeApVarProp+0x7a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00f      	beq.n	80012ec <cfg_NodeApVarProp+0x50>
 80012cc:	e007      	b.n	80012de <cfg_NodeApVarProp+0x42>
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	1c53      	adds	r3, r2, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c59      	adds	r1, r3, #1
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f3      	bne.n	80012ce <cfg_NodeApVarProp+0x32>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00f      	beq.n	8001312 <cfg_NodeApVarProp+0x76>
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <cfg_NodeApVarProp+0x62>
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d004      	beq.n	8001306 <cfg_NodeApVarProp+0x6a>
 80012fc:	e007      	b.n	800130e <cfg_NodeApVarProp+0x72>
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2202      	movs	r2, #2
 8001302:	801a      	strh	r2, [r3, #0]
 8001304:	e006      	b.n	8001314 <cfg_NodeApVarProp+0x78>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	e002      	b.n	8001314 <cfg_NodeApVarProp+0x78>
		default: return CFG_ERROR_VARID;
 800130e:	2302      	movs	r3, #2
 8001310:	e001      	b.n	8001316 <cfg_NodeApVarProp+0x7a>
	}
	return CFG_ERROR_NONE;
 8001312:	bf00      	nop
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	08010ea4 	.word	0x08010ea4
 8001328:	08010eac 	.word	0x08010eac

0800132c <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <cfg_NodeApVarGet+0x3e>
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <cfg_NodeApVarGet+0x1e>
 8001344:	2b01      	cmp	r3, #1
 8001346:	d007      	beq.n	8001358 <cfg_NodeApVarGet+0x2c>
 8001348:	e00d      	b.n	8001366 <cfg_NodeApVarGet+0x3a>
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <cfg_NodeApVarGet+0x50>)
 800134c:	7d1b      	ldrb	r3, [r3, #20]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e009      	b.n	800136c <cfg_NodeApVarGet+0x40>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <cfg_NodeApVarGet+0x50>)
 800135a:	7d5b      	ldrb	r3, [r3, #21]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e002      	b.n	800136c <cfg_NodeApVarGet+0x40>
		default: return CFG_ERROR_VARID;
 8001366:	2302      	movs	r3, #2
 8001368:	e001      	b.n	800136e <cfg_NodeApVarGet+0x42>
	}
	return CFG_ERROR_NONE;
 800136a:	bf00      	nop
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000224 	.word	0x20000224

08001380 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d013      	beq.n	80013ba <cfg_NodeApVarSet+0x3a>
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <cfg_NodeApVarSet+0x1e>
 8001398:	2b01      	cmp	r3, #1
 800139a:	d006      	beq.n	80013aa <cfg_NodeApVarSet+0x2a>
 800139c:	e00b      	b.n	80013b6 <cfg_NodeApVarSet+0x36>
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <cfg_NodeApVarSet+0x4c>)
 80013a6:	751a      	strb	r2, [r3, #20]
 80013a8:	e008      	b.n	80013bc <cfg_NodeApVarSet+0x3c>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <cfg_NodeApVarSet+0x4c>)
 80013b2:	755a      	strb	r2, [r3, #21]
 80013b4:	e002      	b.n	80013bc <cfg_NodeApVarSet+0x3c>
		default: return CFG_ERROR_VARID;
 80013b6:	2302      	movs	r3, #2
 80013b8:	e001      	b.n	80013be <cfg_NodeApVarSet+0x3e>
	}
	return CFG_ERROR_NONE;
 80013ba:	bf00      	nop
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000224 	.word	0x20000224

080013d0 <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <battery_Timer+0x34>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	4a08      	ldr	r2, [pc, #32]	; (8001404 <battery_Timer+0x34>)
 80013e2:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <battery_Timer+0x38>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <battery_Timer+0x28>
		battery_info.timer--;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <battery_Timer+0x38>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <battery_Timer+0x38>)
 80013f4:	6013      	str	r3, [r2, #0]
	}

	return;
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
}
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200002b4 	.word	0x200002b4
 8001408:	20000288 	.word	0x20000288

0800140c <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b63      	cmp	r3, #99	; 0x63
 8001418:	d801      	bhi.n	800141e <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <battery_InitTask+0x34>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <battery_InitTask+0x34>)
 8001426:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800142a:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <battery_InitTask+0x34>)
 800142e:	2201      	movs	r2, #1
 8001430:	711a      	strb	r2, [r3, #4]

	return;
 8001432:	bf00      	nop
}
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000288 	.word	0x20000288

08001444 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <battery_Task+0xd8>)
 800144c:	7b5b      	ldrb	r3, [r3, #13]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d15e      	bne.n	8001512 <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <battery_Task+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <battery_Task+0xd8>)
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d109      	bne.n	8001478 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <battery_Task+0xd8>)
 8001466:	89db      	ldrh	r3, [r3, #14]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f858 	bl	8001520 <battery_filterInit>
			battery_info.init_flag = 0;
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <battery_Task+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 8001476:	e04c      	b.n	8001512 <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <battery_Task+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d148      	bne.n	8001512 <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <battery_Task+0xd8>)
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	4a25      	ldr	r2, [pc, #148]	; (800151c <battery_Task+0xd8>)
 8001486:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <battery_Task+0xd8>)
 800148a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	425a      	negs	r2, r3
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	f002 0207 	and.w	r2, r2, #7
 800149c:	bf58      	it	pl
 800149e:	4253      	negpl	r3, r2
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <battery_Task+0xd8>)
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <battery_Task+0xd8>)
 80014aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <battery_Task+0xd8>)
 80014b4:	89db      	ldrh	r3, [r3, #14]
 80014b6:	b299      	uxth	r1, r3
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <battery_Task+0xd8>)
 80014ba:	f100 0308 	add.w	r3, r0, #8
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	460a      	mov	r2, r1
 80014c4:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80014ca:	2300      	movs	r3, #0
 80014cc:	70fb      	strb	r3, [r7, #3]
 80014ce:	e00d      	b.n	80014ec <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <battery_Task+0xd8>)
 80014d4:	3308      	adds	r3, #8
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	889b      	ldrh	r3, [r3, #4]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	3301      	adds	r3, #1
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d9ee      	bls.n	80014d0 <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <battery_Task+0xd8>)
 80014fa:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <battery_Task+0xd8>)
 80014fe:	8a1b      	ldrh	r3, [r3, #16]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f838 	bl	8001578 <battery_calcPerc>
 8001508:	4603      	mov	r3, r0
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <battery_Task+0xd8>)
 800150e:	749a      	strb	r2, [r3, #18]
	return;
 8001510:	bf00      	nop
 8001512:	bf00      	nop
}
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000288 	.word	0x20000288

08001520 <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e009      	b.n	8001544 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <battery_filterInit+0x54>)
 8001534:	3308      	adds	r3, #8
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	88fa      	ldrh	r2, [r7, #6]
 800153c:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	3301      	adds	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b07      	cmp	r3, #7
 8001548:	d9f2      	bls.n	8001530 <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <battery_filterInit+0x54>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <battery_filterInit+0x54>)
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <battery_filterInit+0x54>)
 800155a:	8a1b      	ldrh	r3, [r3, #16]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f80a 	bl	8001578 <battery_calcPerc>
 8001564:	4603      	mov	r3, r0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <battery_filterInit+0x54>)
 800156a:	749a      	strb	r2, [r3, #18]

	return;
 800156c:	bf00      	nop
}
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000288 	.word	0x20000288

08001578 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <battery_calcPerc+0xb0>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	429a      	cmp	r2, r3
 8001592:	d802      	bhi.n	800159a <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <battery_calcPerc+0xb0>)
 8001596:	885b      	ldrh	r3, [r3, #2]
 8001598:	e041      	b.n	800161e <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <battery_calcPerc+0xb0>)
 800159c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800159e:	88fa      	ldrh	r2, [r7, #6]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d302      	bcc.n	80015aa <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <battery_calcPerc+0xb0>)
 80015a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80015a8:	e039      	b.n	800161e <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e011      	b.n	80015d4 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <battery_calcPerc+0xb0>)
 80015b4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d307      	bcc.n	80015ce <battery_calcPerc+0x56>
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <battery_calcPerc+0xb0>)
 80015c4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d906      	bls.n	80015dc <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	3301      	adds	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d9ea      	bls.n	80015b0 <battery_calcPerc+0x38>
 80015da:	e000      	b.n	80015de <battery_calcPerc+0x66>
		{
			break;
 80015dc:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015de:	88f8      	ldrh	r0, [r7, #6]
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <battery_calcPerc+0xb0>)
 80015e4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015e8:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <battery_calcPerc+0xb0>)
 80015f0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80015f4:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <battery_calcPerc+0xb0>)
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8001600:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	3301      	adds	r3, #1
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <battery_calcPerc+0xb0>)
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	462b      	mov	r3, r5
 8001612:	4622      	mov	r2, r4
 8001614:	f000 f80a 	bl	800162c <analog_map>
 8001618:	4603      	mov	r3, r0
 800161a:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 800161c:	89bb      	ldrh	r3, [r7, #12]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000

0800162c <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	1a8a      	subs	r2, r1, r2
 8001646:	fb03 f202 	mul.w	r2, r3, r2
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	fb92 f2f3 	sdiv	r2, r2, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4413      	add	r3, r2
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d00c      	beq.n	8001692 <cfg_NodeBatVarProp+0x2e>
 8001678:	2b02      	cmp	r3, #2
 800167a:	dc0d      	bgt.n	8001698 <cfg_NodeBatVarProp+0x34>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <cfg_NodeBatVarProp+0x22>
 8001680:	2b01      	cmp	r3, #1
 8001682:	d003      	beq.n	800168c <cfg_NodeBatVarProp+0x28>
 8001684:	e008      	b.n	8001698 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <cfg_NodeBatVarProp+0xa4>)
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e007      	b.n	800169c <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <cfg_NodeBatVarProp+0xa8>)
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e004      	b.n	800169c <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <cfg_NodeBatVarProp+0xac>)
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e001      	b.n	800169c <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 8001698:	2302      	movs	r3, #2
 800169a:	e02f      	b.n	80016fc <cfg_NodeBatVarProp+0x98>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00f      	beq.n	80016c2 <cfg_NodeBatVarProp+0x5e>
 80016a2:	e007      	b.n	80016b4 <cfg_NodeBatVarProp+0x50>
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	1c53      	adds	r3, r2, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f3      	bne.n	80016a4 <cfg_NodeBatVarProp+0x40>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <cfg_NodeBatVarProp+0x94>
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d00e      	beq.n	80016ec <cfg_NodeBatVarProp+0x88>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	dc10      	bgt.n	80016f4 <cfg_NodeBatVarProp+0x90>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <cfg_NodeBatVarProp+0x78>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d004      	beq.n	80016e4 <cfg_NodeBatVarProp+0x80>
 80016da:	e00b      	b.n	80016f4 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2212      	movs	r2, #18
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	e00a      	b.n	80016fa <cfg_NodeBatVarProp+0x96>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2212      	movs	r2, #18
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	e006      	b.n	80016fa <cfg_NodeBatVarProp+0x96>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2212      	movs	r2, #18
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e002      	b.n	80016fa <cfg_NodeBatVarProp+0x96>
		default: return CFG_ERROR_VARID;
 80016f4:	2302      	movs	r3, #2
 80016f6:	e001      	b.n	80016fc <cfg_NodeBatVarProp+0x98>
	}
	return CFG_ERROR_NONE;
 80016f8:	bf00      	nop
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	08010eb4 	.word	0x08010eb4
 800170c:	08010ebc 	.word	0x08010ebc
 8001710:	08010ed0 	.word	0x08010ed0

08001714 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d020      	beq.n	8001768 <cfg_NodeBatVarGet+0x54>
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d014      	beq.n	8001756 <cfg_NodeBatVarGet+0x42>
 800172c:	2b02      	cmp	r3, #2
 800172e:	dc19      	bgt.n	8001764 <cfg_NodeBatVarGet+0x50>
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <cfg_NodeBatVarGet+0x26>
 8001734:	2b01      	cmp	r3, #1
 8001736:	d007      	beq.n	8001748 <cfg_NodeBatVarGet+0x34>
 8001738:	e014      	b.n	8001764 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <cfg_NodeBatVarGet+0x64>)
 800173c:	89db      	ldrh	r3, [r3, #14]
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e010      	b.n	800176a <cfg_NodeBatVarGet+0x56>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <cfg_NodeBatVarGet+0x64>)
 800174a:	8a1b      	ldrh	r3, [r3, #16]
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e009      	b.n	800176a <cfg_NodeBatVarGet+0x56>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <cfg_NodeBatVarGet+0x64>)
 8001758:	7c9b      	ldrb	r3, [r3, #18]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e002      	b.n	800176a <cfg_NodeBatVarGet+0x56>
		default: return CFG_ERROR_VARID;
 8001764:	2302      	movs	r3, #2
 8001766:	e001      	b.n	800176c <cfg_NodeBatVarGet+0x58>
	}
	return CFG_ERROR_NONE;
 8001768:	bf00      	nop
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	20000288 	.word	0x20000288

0800177c <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <cfg_NodeBatVarSet+0x28>
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d009      	beq.n	80017a8 <cfg_NodeBatVarSet+0x2c>
 8001794:	2b02      	cmp	r3, #2
 8001796:	dc03      	bgt.n	80017a0 <cfg_NodeBatVarSet+0x24>
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <cfg_NodeBatVarSet+0x30>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d007      	beq.n	80017b0 <cfg_NodeBatVarSet+0x34>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 80017a0:	2302      	movs	r3, #2
 80017a2:	e007      	b.n	80017b4 <cfg_NodeBatVarSet+0x38>
	}
	return CFG_ERROR_NONE;
 80017a4:	bf00      	nop
 80017a6:	e004      	b.n	80017b2 <cfg_NodeBatVarSet+0x36>
		case BAT_CHG_PERC:			break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <cfg_NodeBatVarSet+0x36>
		case BAT_VOLTAGE:			break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <cfg_NodeBatVarSet+0x36>
		case BAT_FILTERED_VOLTAGE:	break;
 80017b0:	bf00      	nop
	return CFG_ERROR_NONE;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <cfg_GetNodeName>:
	{ NODE_AUTOPILOT, NODE_MAIN, AUTOPILOT_VAR_NUM, cfg_NodeApVarGet, cfg_NodeApVarSet, cfg_NodeApVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	f242 72dd 	movw	r2, #10205	; 0x27dd
 80017d2:	4293      	cmp	r3, r2
 80017d4:	dc3d      	bgt.n	8001852 <cfg_GetNodeName+0x92>
 80017d6:	f242 72d9 	movw	r2, #10201	; 0x27d9
 80017da:	4293      	cmp	r3, r2
 80017dc:	da0c      	bge.n	80017f8 <cfg_GetNodeName+0x38>
 80017de:	2b67      	cmp	r3, #103	; 0x67
 80017e0:	d034      	beq.n	800184c <cfg_GetNodeName+0x8c>
 80017e2:	2b67      	cmp	r3, #103	; 0x67
 80017e4:	dc35      	bgt.n	8001852 <cfg_GetNodeName+0x92>
 80017e6:	2b66      	cmp	r3, #102	; 0x66
 80017e8:	d01e      	beq.n	8001828 <cfg_GetNodeName+0x68>
 80017ea:	2b66      	cmp	r3, #102	; 0x66
 80017ec:	dc31      	bgt.n	8001852 <cfg_GetNodeName+0x92>
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d014      	beq.n	800181c <cfg_GetNodeName+0x5c>
 80017f2:	2b65      	cmp	r3, #101	; 0x65
 80017f4:	d015      	beq.n	8001822 <cfg_GetNodeName+0x62>
		case NODE_MOTOR    	: str = "Motor"; break;
		case NODE_RC    	: str = "RC"; break;
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_SENS    	: str = "Sensors"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		default:break;
 80017f6:	e02c      	b.n	8001852 <cfg_GetNodeName+0x92>
	switch( nodeid )
 80017f8:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 80017fc:	3b19      	subs	r3, #25
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d827      	bhi.n	8001852 <cfg_GetNodeName+0x92>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <cfg_GetNodeName+0x48>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	0800182f 	.word	0x0800182f
 800180c:	08001835 	.word	0x08001835
 8001810:	0800183b 	.word	0x0800183b
 8001814:	08001841 	.word	0x08001841
 8001818:	08001847 	.word	0x08001847
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <cfg_GetNodeName+0xc8>)
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e018      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_FW		: str = "Firmware"; break;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <cfg_GetNodeName+0xcc>)
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e015      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <cfg_GetNodeName+0xd0>)
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e012      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_SERVO    	: str = "Servo"; break;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <cfg_GetNodeName+0xd4>)
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e00f      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_MOTOR    	: str = "Motor"; break;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <cfg_GetNodeName+0xd8>)
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e00c      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_RC    	: str = "RC"; break;
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <cfg_GetNodeName+0xdc>)
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e009      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_BAT    	: str = "Battery"; break;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <cfg_GetNodeName+0xe0>)
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e006      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_SENS    	: str = "Sensors"; break;
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <cfg_GetNodeName+0xe4>)
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e003      	b.n	8001854 <cfg_GetNodeName+0x94>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <cfg_GetNodeName+0xe8>)
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e000      	b.n	8001854 <cfg_GetNodeName+0x94>
		default:break;
 8001852:	bf00      	nop
	}
	if( name )
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00f      	beq.n	800187a <cfg_GetNodeName+0xba>
	{
		while( *str ){
 800185a:	e007      	b.n	800186c <cfg_GetNodeName+0xac>
			*name++ = *str++;
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	1c53      	adds	r3, r2, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	1c59      	adds	r1, r3, #1
 8001866:	6039      	str	r1, [r7, #0]
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	701a      	strb	r2, [r3, #0]
		while( *str ){
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f3      	bne.n	800185c <cfg_GetNodeName+0x9c>
		}
		*name = 0;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	08010edc 	.word	0x08010edc
 800188c:	08010ee8 	.word	0x08010ee8
 8001890:	08010ef4 	.word	0x08010ef4
 8001894:	08010f08 	.word	0x08010f08
 8001898:	08010f10 	.word	0x08010f10
 800189c:	08010f18 	.word	0x08010f18
 80018a0:	08010f1c 	.word	0x08010f1c
 80018a4:	08010f24 	.word	0x08010f24
 80018a8:	08010f2c 	.word	0x08010f2c

080018ac <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <cfg_GetNode+0x58>)
 80018b8:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 80018ba:	2300      	movs	r3, #0
 80018bc:	817b      	strh	r3, [r7, #10]
 80018be:	e005      	b.n	80018cc <cfg_GetNode+0x20>
 80018c0:	897b      	ldrh	r3, [r7, #10]
 80018c2:	3301      	adds	r3, #1
 80018c4:	817b      	strh	r3, [r7, #10]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3314      	adds	r3, #20
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <cfg_GetNode+0x5c>)
 80018ce:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	897a      	ldrh	r2, [r7, #10]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d204      	bcs.n	80018e4 <cfg_GetNode+0x38>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	88fa      	ldrh	r2, [r7, #6]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1ed      	bne.n	80018c0 <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <cfg_GetNode+0x5c>)
 80018e6:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	897a      	ldrh	r2, [r7, #10]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <cfg_GetNode+0x4a>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	e000      	b.n	80018f8 <cfg_GetNode+0x4c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	20000030 	.word	0x20000030
 8001908:	200002b8 	.word	0x200002b8

0800190c <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d105      	bne.n	800192c <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <cfg_NodeFwVarProp+0x70>)
 8001922:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2214      	movs	r2, #20
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e00d      	b.n	8001948 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <cfg_NodeFwVarProp+0x74>)
 8001934:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	e004      	b.n	8001948 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <cfg_NodeFwVarProp+0x78>)
 8001940:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2215      	movs	r2, #21
 8001946:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00f      	beq.n	800196e <cfg_NodeFwVarProp+0x62>
 800194e:	e007      	b.n	8001960 <cfg_NodeFwVarProp+0x54>
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	1c53      	adds	r3, r2, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c59      	adds	r1, r3, #1
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f3      	bne.n	8001950 <cfg_NodeFwVarProp+0x44>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	08010f38 	.word	0x08010f38
 8001980:	08010f40 	.word	0x08010f40
 8001984:	08010f58 	.word	0x08010f58

08001988 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <cfg_NodeFwVarGet+0x40>)
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e00a      	b.n	80019b8 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d103      	bne.n	80019b0 <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e003      	b.n	80019b8 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f04f 32ff 	mov.w	r2, #4294967295
 80019b6:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	3f666666 	.word	0x3f666666

080019cc <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 80019e6:	f001 f919 	bl	8002c1c <cfg_ClearFwBuf>
 80019ea:	e00f      	b.n	8001a0c <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2b2f      	cmp	r3, #47	; 0x2f
 80019f0:	d805      	bhi.n	80019fe <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f928 	bl	8002c4c <cfg_WriteFwData>
 80019fc:	e006      	b.n	8001a0c <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	2b31      	cmp	r3, #49	; 0x31
 8001a02:	d103      	bne.n	8001a0c <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <cfg_NodeFwVarSet+0x4c>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
	}
	return CFG_ERROR_NONE;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002b8 	.word	0x200002b8

08001a1c <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d817      	bhi.n	8001a60 <cfg_NodeMainVarProp+0x44>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <cfg_NodeMainVarProp+0x1c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a4f 	.word	0x08001a4f
 8001a40:	08001a55 	.word	0x08001a55
 8001a44:	08001a5b 	.word	0x08001a5b
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <cfg_NodeMainVarProp+0xc4>)
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e00a      	b.n	8001a64 <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <cfg_NodeMainVarProp+0xc8>)
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e007      	b.n	8001a64 <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <cfg_NodeMainVarProp+0xcc>)
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e004      	b.n	8001a64 <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <cfg_NodeMainVarProp+0xd0>)
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e001      	b.n	8001a64 <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 8001a60:	2302      	movs	r3, #2
 8001a62:	e037      	b.n	8001ad4 <cfg_NodeMainVarProp+0xb8>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00f      	beq.n	8001a8a <cfg_NodeMainVarProp+0x6e>
 8001a6a:	e007      	b.n	8001a7c <cfg_NodeMainVarProp+0x60>
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	1c53      	adds	r3, r2, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c59      	adds	r1, r3, #1
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f3      	bne.n	8001a6c <cfg_NodeMainVarProp+0x50>
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01f      	beq.n	8001ad0 <cfg_NodeMainVarProp+0xb4>
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d81a      	bhi.n	8001acc <cfg_NodeMainVarProp+0xb0>
 8001a96:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <cfg_NodeMainVarProp+0x80>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001ab5 	.word	0x08001ab5
 8001aa4:	08001abd 	.word	0x08001abd
 8001aa8:	08001ac5 	.word	0x08001ac5
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2222      	movs	r2, #34	; 0x22
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	e00e      	b.n	8001ad2 <cfg_NodeMainVarProp+0xb6>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2217      	movs	r2, #23
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	e00a      	b.n	8001ad2 <cfg_NodeMainVarProp+0xb6>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	801a      	strh	r2, [r3, #0]
 8001ac2:	e006      	b.n	8001ad2 <cfg_NodeMainVarProp+0xb6>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	e002      	b.n	8001ad2 <cfg_NodeMainVarProp+0xb6>
		default: return CFG_ERROR_VARID;
 8001acc:	2302      	movs	r3, #2
 8001ace:	e001      	b.n	8001ad4 <cfg_NodeMainVarProp+0xb8>
	}
	return CFG_ERROR_NONE;
 8001ad0:	bf00      	nop
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	08010f60 	.word	0x08010f60
 8001ae4:	08010f6c 	.word	0x08010f6c
 8001ae8:	08010f7c 	.word	0x08010f7c
 8001aec:	08010f8c 	.word	0x08010f8c

08001af0 <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d026      	beq.n	8001b50 <cfg_NodeMainVarGet+0x60>
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d821      	bhi.n	8001b4c <cfg_NodeMainVarGet+0x5c>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <cfg_NodeMainVarGet+0x20>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b31 	.word	0x08001b31
 8001b18:	08001b3d 	.word	0x08001b3d
 8001b1c:	08001b45 	.word	0x08001b45
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <cfg_NodeMainVarGet+0x6c>)
 8001b22:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e010      	b.n	8001b52 <cfg_NodeMainVarGet+0x62>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 8001b30:	f004 fe08 	bl	8006744 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00a      	b.n	8001b52 <cfg_NodeMainVarGet+0x62>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e006      	b.n	8001b52 <cfg_NodeMainVarGet+0x62>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e002      	b.n	8001b52 <cfg_NodeMainVarGet+0x62>
		default: return CFG_ERROR_VARID;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e001      	b.n	8001b54 <cfg_NodeMainVarGet+0x64>
	}
	return CFG_ERROR_NONE;
 8001b50:	bf00      	nop
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200002b8 	.word	0x200002b8

08001b60 <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d025      	beq.n	8001bbe <cfg_NodeMainVarSet+0x5e>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d820      	bhi.n	8001bba <cfg_NodeMainVarSet+0x5a>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <cfg_NodeMainVarSet+0x20>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001b91 	.word	0x08001b91
 8001b84:	08001bc3 	.word	0x08001bc3
 8001b88:	08001b9d 	.word	0x08001b9d
 8001b8c:	08001bab 	.word	0x08001bab
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <cfg_NodeMainVarSet+0x78>)
 8001b96:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
 8001b9a:	e017      	b.n	8001bcc <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <cfg_NodeMainVarSet+0x66>
 8001ba4:	f000 fe64 	bl	8002870 <cfg_SaveSettings>
 8001ba8:	e00d      	b.n	8001bc6 <cfg_NodeMainVarSet+0x66>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <cfg_NodeMainVarSet+0x6a>
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <cfg_NodeMainVarSet+0x7c>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e007      	b.n	8001bca <cfg_NodeMainVarSet+0x6a>
		default: return CFG_ERROR_VARID;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e007      	b.n	8001bce <cfg_NodeMainVarSet+0x6e>
	}
	return CFG_ERROR_NONE;
 8001bbe:	bf00      	nop
 8001bc0:	e004      	b.n	8001bcc <cfg_NodeMainVarSet+0x6c>
		case MAIN_WORKING_TIME:				break;
 8001bc2:	bf00      	nop
 8001bc4:	e002      	b.n	8001bcc <cfg_NodeMainVarSet+0x6c>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 8001bc6:	bf00      	nop
 8001bc8:	e000      	b.n	8001bcc <cfg_NodeMainVarSet+0x6c>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8001bca:	bf00      	nop
	return CFG_ERROR_NONE;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200002b8 	.word	0x200002b8
 8001bdc:	20000bd4 	.word	0x20000bd4

08001be0 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e023      	b.n	8001c36 <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 8001bee:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <cfg_Timer+0x68>)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d014      	beq.n	8001c30 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <cfg_Timer+0x68>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	490a      	ldr	r1, [pc, #40]	; (8001c48 <cfg_Timer+0x68>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001c24:	fb00 f303 	mul.w	r3, r0, r3
 8001c28:	440b      	add	r3, r1
 8001c2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c2e:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0d8      	beq.n	8001bee <cfg_Timer+0xe>
		}
	}

	return;
 8001c3c:	bf00      	nop
}
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	200002b8 	.word	0x200002b8

08001c4c <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <cfg_InitTask+0xb8>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <cfg_InitTask+0xb8>)
 8001c5c:	2209      	movs	r2, #9
 8001c5e:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	e040      	b.n	8001cea <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <cfg_InitTask+0xb8>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <cfg_InitTask+0xb8>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <cfg_InitTask+0xb8>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <cfg_InitTask+0xb8>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <cfg_InitTask+0xb8>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <cfg_InitTask+0xb8>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0bb      	beq.n	8001c68 <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <cfg_InitTask+0xb8>)
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <cfg_InitTask+0xbc>)
 8001cf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	cfg_LoadSettings();
 8001cf8:	f000 fee2 	bl	8002ac0 <cfg_LoadSettings>

	return;
 8001cfc:	bf00      	nop
}
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200002b8 	.word	0x200002b8
 8001d08:	08003069 	.word	0x08003069

08001d0c <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b099      	sub	sp, #100	; 0x64
 8001d10:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d3e:	e3f3      	b.n	8002528 <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 8001d40:	4ab8      	ldr	r2, [pc, #736]	; (8002024 <cfg_Task+0x318>)
 8001d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d44:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d069      	beq.n	8001e2c <cfg_Task+0x120>
 8001d58:	4ab2      	ldr	r2, [pc, #712]	; (8002024 <cfg_Task+0x318>)
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d15d      	bne.n	8001e2c <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8001d70:	4aac      	ldr	r2, [pc, #688]	; (8002024 <cfg_Task+0x318>)
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d82:	220a      	movs	r2, #10
 8001d84:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8001d86:	4aa7      	ldr	r2, [pc, #668]	; (8002024 <cfg_Task+0x318>)
 8001d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b0a      	cmp	r3, #10
 8001d9c:	d91c      	bls.n	8001dd8 <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 8001d9e:	4aa1      	ldr	r2, [pc, #644]	; (8002024 <cfg_Task+0x318>)
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001db4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001db8:	fb01 f202 	mul.w	r2, r1, r2
 8001dbc:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001dc0:	4998      	ldr	r1, [pc, #608]	; (8002024 <cfg_Task+0x318>)
 8001dc2:	440a      	add	r2, r1
 8001dc4:	210a      	movs	r1, #10
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 8001dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	210a      	movs	r1, #10
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f89f 	bl	8002f14 <cfg_RemTxData>
 8001dd6:	e029      	b.n	8001e2c <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8001dd8:	4a92      	ldr	r2, [pc, #584]	; (8002024 <cfg_Task+0x318>)
 8001dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ddc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dee:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001df2:	fb01 f202 	mul.w	r2, r1, r2
 8001df6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001dfa:	498a      	ldr	r1, [pc, #552]	; (8002024 <cfg_Task+0x318>)
 8001dfc:	1850      	adds	r0, r2, r1
 8001dfe:	4989      	ldr	r1, [pc, #548]	; (8002024 <cfg_Task+0x318>)
 8001e00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e02:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8001e06:	fb04 f202 	mul.w	r2, r4, r2
 8001e0a:	440a      	add	r2, r1
 8001e0c:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8001e16:	4a83      	ldr	r2, [pc, #524]	; (8002024 <cfg_Task+0x318>)
 8001e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e1a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 8001e2c:	4a7d      	ldr	r2, [pc, #500]	; (8002024 <cfg_Task+0x318>)
 8001e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e30:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 836e 	beq.w	8002522 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 8001e46:	4a77      	ldr	r2, [pc, #476]	; (8002024 <cfg_Task+0x318>)
 8001e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	4971      	ldr	r1, [pc, #452]	; (8002024 <cfg_Task+0x318>)
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8001e64:	fb00 f303 	mul.w	r3, r0, r3
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001e6e:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8001e70:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8001e74:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8001e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001e80:	2202      	movs	r2, #2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 ff08 	bl	8002c98 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8001e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4966      	ldr	r1, [pc, #408]	; (8002028 <cfg_Task+0x31c>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 ff01 	bl	8002c98 <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8001e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e98:	b298      	uxth	r0, r3
 8001e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	f203 2315 	addw	r3, r3, #533	; 0x215
 8001ea8:	4a5e      	ldr	r2, [pc, #376]	; (8002024 <cfg_Task+0x318>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f000 fef1 	bl	8002c98 <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8001eb6:	4a5b      	ldr	r2, [pc, #364]	; (8002024 <cfg_Task+0x318>)
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4955      	ldr	r1, [pc, #340]	; (800202c <cfg_Task+0x320>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fedd 	bl	8002c98 <cfg_AddTxData>
 8001ede:	e2db      	b.n	8002498 <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <cfg_Task+0x318>)
 8001ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	f203 2319 	addw	r3, r3, #537	; 0x219
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	f040 809c 	bne.w	8002034 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 8001efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efe:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	f203 2316 	addw	r3, r3, #534	; 0x216
 8001f0a:	4a46      	ldr	r2, [pc, #280]	; (8002024 <cfg_Task+0x318>)
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <cfg_Task+0x318>)
 8001f1a:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d957      	bls.n	8001fd8 <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8001f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001f30:	2202      	movs	r2, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 feb0 	bl	8002c98 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 8001f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3a:	b298      	uxth	r0, r3
 8001f3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f40:	461a      	mov	r2, r3
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4a39      	ldr	r2, [pc, #228]	; (8002030 <cfg_Task+0x324>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f000 fea1 	bl	8002c98 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8001f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4a31      	ldr	r2, [pc, #196]	; (8002030 <cfg_Task+0x324>)
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f000 fe91 	bl	8002c98 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8001f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f78:	b298      	uxth	r0, r3
 8001f7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <cfg_Task+0x324>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f000 fe81 	bl	8002c98 <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8001f96:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4a24      	ldr	r2, [pc, #144]	; (8002030 <cfg_Task+0x324>)
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	1d3a      	adds	r2, r7, #4
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fc06 	bl	80017c0 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe f90e 	bl	80001d8 <strlen>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8001fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001fce:	1d39      	adds	r1, r7, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fe61 	bl	8002c98 <cfg_AddTxData>
 8001fd6:	e25f      	b.n	8002498 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <cfg_Task+0x318>)
 8001fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fdc:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ff2:	b2d8      	uxtb	r0, r3
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <cfg_Task+0x318>)
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002006:	4602      	mov	r2, r0
 8002008:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 800200a:	2302      	movs	r3, #2
 800200c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002012:	b29b      	uxth	r3, r3
 8002014:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002018:	2201      	movs	r2, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fe3c 	bl	8002c98 <cfg_AddTxData>
 8002020:	e23a      	b.n	8002498 <cfg_Task+0x78c>
 8002022:	bf00      	nop
 8002024:	200002b8 	.word	0x200002b8
 8002028:	200005d4 	.word	0x200005d4
 800202c:	200005dc 	.word	0x200005dc
 8002030:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 8002034:	4ab0      	ldr	r2, [pc, #704]	; (80022f8 <cfg_Task+0x5ec>)
 8002036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002038:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b03      	cmp	r3, #3
 800204c:	f040 80a8 	bne.w	80021a0 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002052:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	f203 2316 	addw	r3, r3, #534	; 0x216
 800205e:	4aa6      	ldr	r2, [pc, #664]	; (80022f8 <cfg_Task+0x5ec>)
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 800206c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800207a:	4a9f      	ldr	r2, [pc, #636]	; (80022f8 <cfg_Task+0x5ec>)
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8002088:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fc0d 	bl	80018ac <cfg_GetNode>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d05e      	beq.n	8002156 <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8002098:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc05 	bl	80018ac <cfg_GetNode>
 80020a2:	4603      	mov	r3, r0
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 80020aa:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 80020ae:	1d39      	adds	r1, r7, #4
 80020b0:	4798      	blx	r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d129      	bne.n	800210c <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 80020b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f107 0152 	add.w	r1, r7, #82	; 0x52
 80020c0:	2202      	movs	r2, #2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fde8 	bl	8002c98 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80020c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020d0:	2202      	movs	r2, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fde0 	bl	8002c98 <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 80020d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 80020e0:	2202      	movs	r2, #2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fdd8 	bl	8002c98 <cfg_AddTxData>
						name_len = strlen(name) + 1;
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f874 	bl	80001d8 <strlen>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 80020fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002102:	1d39      	adds	r1, r7, #4
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fdc7 	bl	8002c98 <cfg_AddTxData>
 800210a:	e1c5      	b.n	8002498 <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 800210c:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <cfg_Task+0x5ec>)
 800210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002110:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002126:	b2d8      	uxtb	r0, r3
 8002128:	4a73      	ldr	r2, [pc, #460]	; (80022f8 <cfg_Task+0x5ec>)
 800212a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800213a:	4602      	mov	r2, r0
 800213c:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 800213e:	2304      	movs	r3, #4
 8002140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002146:	b29b      	uxth	r3, r3
 8002148:	f107 0157 	add.w	r1, r7, #87	; 0x57
 800214c:	2201      	movs	r2, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fda2 	bl	8002c98 <cfg_AddTxData>
 8002154:	e1a0      	b.n	8002498 <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002156:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <cfg_Task+0x5ec>)
 8002158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002170:	b2d8      	uxtb	r0, r3
 8002172:	4a61      	ldr	r2, [pc, #388]	; (80022f8 <cfg_Task+0x5ec>)
 8002174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002176:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002184:	4602      	mov	r2, r0
 8002186:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002188:	2303      	movs	r3, #3
 800218a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 800218e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002190:	b29b      	uxth	r3, r3
 8002192:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002196:	2201      	movs	r2, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fd7d 	bl	8002c98 <cfg_AddTxData>
 800219e:	e17b      	b.n	8002498 <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <cfg_Task+0x5ec>)
 80021a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	f203 2319 	addw	r3, r3, #537	; 0x219
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	f040 80a0 	bne.w	80022fc <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 80021bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021be:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	f203 2316 	addw	r3, r3, #534	; 0x216
 80021ca:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <cfg_Task+0x5ec>)
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 80021d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021da:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80021e6:	4a44      	ldr	r2, [pc, #272]	; (80022f8 <cfg_Task+0x5ec>)
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 80021f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8002202:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <cfg_Task+0x5ec>)
 8002204:	4413      	add	r3, r2
 8002206:	3304      	adds	r3, #4
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8002210:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fb49 	bl	80018ac <cfg_GetNode>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d046      	beq.n	80022ae <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002222:	b29b      	uxth	r3, r3
 8002224:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002228:	2202      	movs	r2, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd34 	bl	8002c98 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002232:	b29b      	uxth	r3, r3
 8002234:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002238:	2202      	movs	r2, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fd2c 	bl	8002c98 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002240:	2300      	movs	r3, #0
 8002242:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002246:	e021      	b.n	800228c <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 8002248:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fb2d 	bl	80018ac <cfg_GetNode>
 8002252:	4603      	mov	r3, r0
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800225a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800225e:	440a      	add	r2, r1
 8002260:	b292      	uxth	r2, r2
 8002262:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002266:	4610      	mov	r0, r2
 8002268:	4798      	blx	r3
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002272:	b29b      	uxth	r3, r3
 8002274:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002278:	2204      	movs	r2, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fd0c 	bl	8002c98 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002280:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002284:	3301      	adds	r3, #1
 8002286:	b29b      	uxth	r3, r3
 8002288:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800228c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002290:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002294:	429a      	cmp	r2, r3
 8002296:	d3d7      	bcc.n	8002248 <cfg_Task+0x53c>
 8002298:	e000      	b.n	800229c <cfg_Task+0x590>
						}
						else{
							break;
 800229a:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800229c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800229e:	b298      	uxth	r0, r3
 80022a0:	f107 0246 	add.w	r2, r7, #70	; 0x46
 80022a4:	2302      	movs	r3, #2
 80022a6:	2109      	movs	r1, #9
 80022a8:	f000 fd48 	bl	8002d3c <cfg_IntertTxData>
 80022ac:	e0f4      	b.n	8002498 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <cfg_Task+0x5ec>)
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022c8:	b2d8      	uxtb	r0, r3
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <cfg_Task+0x5ec>)
 80022cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80022dc:	4602      	mov	r2, r0
 80022de:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80022e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80022ee:	2201      	movs	r2, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fcd1 	bl	8002c98 <cfg_AddTxData>
 80022f6:	e0cf      	b.n	8002498 <cfg_Task+0x78c>
 80022f8:	200002b8 	.word	0x200002b8
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 80022fc:	4a8e      	ldr	r2, [pc, #568]	; (8002538 <cfg_Task+0x82c>)
 80022fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002300:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	f203 2319 	addw	r3, r3, #537	; 0x219
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b11      	cmp	r3, #17
 8002314:	f040 80c0 	bne.w	8002498 <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002326:	4a84      	ldr	r2, [pc, #528]	; (8002538 <cfg_Task+0x82c>)
 8002328:	4413      	add	r3, r2
 800232a:	3304      	adds	r3, #4
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002336:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002342:	4a7d      	ldr	r2, [pc, #500]	; (8002538 <cfg_Task+0x82c>)
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002352:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	f203 231a 	addw	r3, r3, #538	; 0x21a
 800235e:	4a76      	ldr	r2, [pc, #472]	; (8002538 <cfg_Task+0x82c>)
 8002360:	4413      	add	r3, r2
 8002362:	3304      	adds	r3, #4
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 800236c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fa9b 	bl	80018ac <cfg_GetNode>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d069      	beq.n	8002450 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 800237c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237e:	b29b      	uxth	r3, r3
 8002380:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002384:	2202      	movs	r2, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fc86 	bl	8002c98 <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 800238c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238e:	b29b      	uxth	r3, r3
 8002390:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002394:	2202      	movs	r2, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fc7e 	bl	8002c98 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800239c:	2300      	movs	r3, #0
 800239e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80023a2:	e046      	b.n	8002432 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 80023a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80023a8:	3303      	adds	r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023ae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80023b2:	fb01 f202 	mul.w	r2, r1, r2
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023bc:	4a5e      	ldr	r2, [pc, #376]	; (8002538 <cfg_Task+0x82c>)
 80023be:	4413      	add	r3, r2
 80023c0:	3304      	adds	r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 80023c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa6e 	bl	80018ac <cfg_GetNode>
 80023d0:	4603      	mov	r3, r0
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80023d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80023dc:	440a      	add	r2, r1
 80023de:	b292      	uxth	r2, r2
 80023e0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80023e4:	4610      	mov	r0, r2
 80023e6:	4798      	blx	r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d127      	bne.n	800243e <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 80023ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fa5a 	bl	80018ac <cfg_GetNode>
 80023f8:	4603      	mov	r3, r0
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8002400:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002404:	440a      	add	r2, r1
 8002406:	b292      	uxth	r2, r2
 8002408:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800240c:	4610      	mov	r0, r2
 800240e:	4798      	blx	r3
 8002410:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	d113      	bne.n	800243e <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002418:	b29b      	uxth	r3, r3
 800241a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800241e:	2204      	movs	r2, #4
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fc39 	bl	8002c98 <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002426:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800242a:	3301      	adds	r3, #1
 800242c:	b29b      	uxth	r3, r3
 800242e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002432:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002436:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800243a:	429a      	cmp	r2, r3
 800243c:	d3b2      	bcc.n	80023a4 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 800243e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002440:	b298      	uxth	r0, r3
 8002442:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002446:	2302      	movs	r3, #2
 8002448:	2109      	movs	r1, #9
 800244a:	f000 fc77 	bl	8002d3c <cfg_IntertTxData>
 800244e:	e023      	b.n	8002498 <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002450:	4a39      	ldr	r2, [pc, #228]	; (8002538 <cfg_Task+0x82c>)
 8002452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002454:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800246a:	b2d8      	uxtb	r0, r3
 800246c:	4a32      	ldr	r2, [pc, #200]	; (8002538 <cfg_Task+0x82c>)
 800246e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002470:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800247e:	4602      	mov	r2, r0
 8002480:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002482:	2303      	movs	r3, #3
 8002484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248a:	b29b      	uxth	r3, r3
 800248c:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002490:	2201      	movs	r2, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fc00 	bl	8002c98 <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <cfg_Task+0x82c>)
 800249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b04      	subs	r3, #4
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 80024b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b8:	b298      	uxth	r0, r3
 80024ba:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80024be:	2301      	movs	r3, #1
 80024c0:	2104      	movs	r1, #4
 80024c2:	f000 fc3b 	bl	8002d3c <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 80024c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <cfg_Task+0x82c>)
 80024d6:	441a      	add	r2, r3
 80024d8:	4917      	ldr	r1, [pc, #92]	; (8002538 <cfg_Task+0x82c>)
 80024da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024dc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80024e0:	fb00 f303 	mul.w	r3, r0, r3
 80024e4:	440b      	add	r3, r1
 80024e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f000 fdc7 	bl	8003084 <crc16_calc>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 80024fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002504:	2202      	movs	r2, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fbc6 	bl	8002c98 <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <cfg_Task+0x82c>)
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002524:	3301      	adds	r3, #1
 8002526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252a:	2b00      	cmp	r3, #0
 800252c:	f43f ac08 	beq.w	8001d40 <cfg_Task+0x34>
		}
	}

	return;
 8002530:	bf00      	nop
}
 8002532:	3764      	adds	r7, #100	; 0x64
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	200002b8 	.word	0x200002b8

0800253c <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	460a      	mov	r2, r1
 8002546:	80fb      	strh	r3, [r7, #6]
 8002548:	4613      	mov	r3, r2
 800254a:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8164 	bne.w	800281c <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002554:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	49b4      	ldr	r1, [pc, #720]	; (800282c <cfg_RcvData+0x2f0>)
 800255a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800255e:	fb00 f202 	mul.w	r2, r0, r2
 8002562:	440a      	add	r2, r1
 8002564:	3204      	adds	r2, #4
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	b292      	uxth	r2, r2
 800256a:	3201      	adds	r2, #1
 800256c:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 800256e:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002570:	b2c9      	uxtb	r1, r1
 8002572:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8002574:	49ad      	ldr	r1, [pc, #692]	; (800282c <cfg_RcvData+0x2f0>)
 8002576:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800257a:	fb00 f202 	mul.w	r2, r0, r2
 800257e:	440a      	add	r2, r1
 8002580:	3204      	adds	r2, #4
 8002582:	4621      	mov	r1, r4
 8002584:	8011      	strh	r1, [r2, #0]
 8002586:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 8002588:	4aa8      	ldr	r2, [pc, #672]	; (800282c <cfg_RcvData+0x2f0>)
 800258a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	4403      	add	r3, r0
 8002596:	3308      	adds	r3, #8
 8002598:	797a      	ldrb	r2, [r7, #5]
 800259a:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4aa3      	ldr	r2, [pc, #652]	; (800282c <cfg_RcvData+0x2f0>)
 80025a0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d17b      	bne.n	80026aa <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
 80025bc:	3308      	adds	r3, #8
 80025be:	4a9b      	ldr	r2, [pc, #620]	; (800282c <cfg_RcvData+0x2f0>)
 80025c0:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	4999      	ldr	r1, [pc, #612]	; (800282c <cfg_RcvData+0x2f0>)
 80025c6:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	440b      	add	r3, r1
 80025d0:	3304      	adds	r3, #4
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b04      	subs	r3, #4
 80025d8:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	b29b      	uxth	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f000 f927 	bl	8002834 <cfg_ringBufRead16b>
 80025e6:	4603      	mov	r3, r0
 80025e8:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	3308      	adds	r3, #8
 80025f6:	4a8d      	ldr	r2, [pc, #564]	; (800282c <cfg_RcvData+0x2f0>)
 80025f8:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	498b      	ldr	r1, [pc, #556]	; (800282c <cfg_RcvData+0x2f0>)
 80025fe:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002602:	fb00 f303 	mul.w	r3, r0, r3
 8002606:	440b      	add	r3, r1
 8002608:	3304      	adds	r3, #4
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b02      	subs	r3, #2
 8002610:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f000 f90b 	bl	8002834 <cfg_ringBufRead16b>
 800261e:	4603      	mov	r3, r0
 8002620:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 8002628:	4293      	cmp	r3, r2
 800262a:	f040 80f9 	bne.w	8002820 <cfg_RcvData+0x2e4>
 800262e:	4b7f      	ldr	r3, [pc, #508]	; (800282c <cfg_RcvData+0x2f0>)
 8002630:	f8b3 331c 	ldrh.w	r3, [r3, #796]	; 0x31c
 8002634:	b29b      	uxth	r3, r3
 8002636:	893a      	ldrh	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 80f1 	bne.w	8002820 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4a7a      	ldr	r2, [pc, #488]	; (800282c <cfg_RcvData+0x2f0>)
 8002642:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b04      	subs	r3, #4
 8002654:	b29a      	uxth	r2, r3
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	b290      	uxth	r0, r2
 800265c:	4a73      	ldr	r2, [pc, #460]	; (800282c <cfg_RcvData+0x2f0>)
 800265e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3302      	adds	r3, #2
 800266a:	4602      	mov	r2, r0
 800266c:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 800266e:	797b      	ldrb	r3, [r7, #5]
 8002670:	b29b      	uxth	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b6e      	ldr	r3, [pc, #440]	; (8002830 <cfg_RcvData+0x2f4>)
 8002678:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 800267a:	797b      	ldrb	r3, [r7, #5]
 800267c:	b29a      	uxth	r2, r3
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	3205      	adds	r2, #5
 8002682:	b290      	uxth	r0, r2
 8002684:	4a69      	ldr	r2, [pc, #420]	; (800282c <cfg_RcvData+0x2f0>)
 8002686:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3306      	adds	r3, #6
 8002692:	4602      	mov	r2, r0
 8002694:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4a64      	ldr	r2, [pc, #400]	; (800282c <cfg_RcvData+0x2f0>)
 800269a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 80026a8:	e0ba      	b.n	8002820 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	4a5f      	ldr	r2, [pc, #380]	; (800282c <cfg_RcvData+0x2f0>)
 80026ae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 80af 	bne.w	8002820 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <cfg_RcvData+0x2f4>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	b291      	uxth	r1, r2
 80026ca:	4a59      	ldr	r2, [pc, #356]	; (8002830 <cfg_RcvData+0x2f4>)
 80026cc:	8011      	strh	r1, [r2, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80a8 	bne.w	8002824 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	4a55      	ldr	r2, [pc, #340]	; (800282c <cfg_RcvData+0x2f0>)
 80026d8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	3308      	adds	r3, #8
 80026f2:	4a4e      	ldr	r2, [pc, #312]	; (800282c <cfg_RcvData+0x2f0>)
 80026f4:	1898      	adds	r0, r3, r2
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <cfg_RcvData+0x2f0>)
 80026fa:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3302      	adds	r3, #2
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b299      	uxth	r1, r3
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4a47      	ldr	r2, [pc, #284]	; (800282c <cfg_RcvData+0x2f0>)
 800270e:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8002712:	fb04 f303 	mul.w	r3, r4, r3
 8002716:	4413      	add	r3, r2
 8002718:	3306      	adds	r3, #6
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	b29a      	uxth	r2, r3
 800271e:	23ff      	movs	r3, #255	; 0xff
 8002720:	f000 fcda 	bl	80030d8 <crc16_RingBuf>
 8002724:	4603      	mov	r3, r0
 8002726:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	3308      	adds	r3, #8
 8002734:	4a3d      	ldr	r2, [pc, #244]	; (800282c <cfg_RcvData+0x2f0>)
 8002736:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	493c      	ldr	r1, [pc, #240]	; (800282c <cfg_RcvData+0x2f0>)
 800273c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002740:	fb00 f303 	mul.w	r3, r0, r3
 8002744:	440b      	add	r3, r1
 8002746:	3304      	adds	r3, #4
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8002750:	b2db      	uxtb	r3, r3
 8002752:	b29b      	uxth	r3, r3
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f000 f86c 	bl	8002834 <cfg_ringBufRead16b>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	89bb      	ldrh	r3, [r7, #12]
 8002762:	4293      	cmp	r3, r2
 8002764:	d15c      	bne.n	8002820 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	4a30      	ldr	r2, [pc, #192]	; (800282c <cfg_RcvData+0x2f0>)
 800276a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d150      	bne.n	8002820 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 800277e:	2300      	movs	r3, #0
 8002780:	81fb      	strh	r3, [r7, #14]
 8002782:	e028      	b.n	80027d6 <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 8002784:	88f8      	ldrh	r0, [r7, #6]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4a28      	ldr	r2, [pc, #160]	; (800282c <cfg_RcvData+0x2f0>)
 800278a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3302      	adds	r3, #2
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29a      	uxth	r2, r3
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	4413      	add	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 80027a6:	4c21      	ldr	r4, [pc, #132]	; (800282c <cfg_RcvData+0x2f0>)
 80027a8:	f44f 7547 	mov.w	r5, #796	; 0x31c
 80027ac:	fb05 f000 	mul.w	r0, r5, r0
 80027b0:	4420      	add	r0, r4
 80027b2:	4401      	add	r1, r0
 80027b4:	3108      	adds	r1, #8
 80027b6:	7809      	ldrb	r1, [r1, #0]
 80027b8:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 80027ba:	491c      	ldr	r1, [pc, #112]	; (800282c <cfg_RcvData+0x2f0>)
 80027bc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80027c0:	fb00 f202 	mul.w	r2, r0, r2
 80027c4:	440a      	add	r2, r1
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027cc:	4622      	mov	r2, r4
 80027ce:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 80027d0:	89fb      	ldrh	r3, [r7, #14]
 80027d2:	3301      	adds	r3, #1
 80027d4:	81fb      	strh	r3, [r7, #14]
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <cfg_RcvData+0x2f0>)
 80027da:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3306      	adds	r3, #6
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	89fa      	ldrh	r2, [r7, #14]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d3c9      	bcc.n	8002784 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <cfg_RcvData+0x2f0>)
 80027f4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3306      	adds	r3, #6
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29a      	uxth	r2, r3
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4610      	mov	r0, r2
 8002808:	4a08      	ldr	r2, [pc, #32]	; (800282c <cfg_RcvData+0x2f0>)
 800280a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002818:	6018      	str	r0, [r3, #0]
	return;
 800281a:	e001      	b.n	8002820 <cfg_RcvData+0x2e4>
		return;
 800281c:	bf00      	nop
 800281e:	e002      	b.n	8002826 <cfg_RcvData+0x2ea>
	return;
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <cfg_RcvData+0x2ea>
			return;
 8002824:	bf00      	nop
}
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bdb0      	pop	{r4, r5, r7, pc}
 800282c:	200002b8 	.word	0x200002b8
 8002830:	200005f0 	.word	0x200005f0

08002834 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	3301      	adds	r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b29a      	uxth	r2, r3
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	440b      	add	r3, r1
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	4413      	add	r3, r2
 8002860:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002862:	89fb      	ldrh	r3, [r7, #14]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002882:	f102 020a 	add.w	r2, r2, #10
 8002886:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 8002888:	2300      	movs	r3, #0
 800288a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800288e:	f102 020e 	add.w	r2, r2, #14
 8002892:	8013      	strh	r3, [r2, #0]
 8002894:	e079      	b.n	800298a <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002896:	2300      	movs	r3, #0
 8002898:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800289c:	f102 020c 	add.w	r2, r2, #12
 80028a0:	8013      	strh	r3, [r2, #0]
 80028a2:	e053      	b.n	800294c <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80028a4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028a8:	f103 030e 	add.w	r3, r3, #14
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	4981      	ldr	r1, [pc, #516]	; (8002ab4 <cfg_SaveSettings+0x244>)
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3310      	adds	r3, #16
 80028bc:	681e      	ldr	r6, [r3, #0]
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	3b0e      	subs	r3, #14
 80028c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80028c8:	f102 020c 	add.w	r2, r2, #12
 80028cc:	8810      	ldrh	r0, [r2, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	2100      	movs	r1, #0
 80028d2:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d028      	beq.n	8002936 <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 80028e4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80028e8:	f103 030e 	add.w	r3, r3, #14
 80028ec:	881a      	ldrh	r2, [r3, #0]
 80028ee:	4971      	ldr	r1, [pc, #452]	; (8002ab4 <cfg_SaveSettings+0x244>)
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	3308      	adds	r3, #8
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002902:	f103 030a 	add.w	r3, r3, #10
 8002906:	8819      	ldrh	r1, [r3, #0]
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	3b0c      	subs	r3, #12
 800290e:	0089      	lsls	r1, r1, #2
 8002910:	4419      	add	r1, r3
 8002912:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002916:	f103 030c 	add.w	r3, r3, #12
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	4790      	blx	r2
				var_cnt += 1;
 8002920:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002924:	f103 030a 	add.w	r3, r3, #10
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002930:	f102 020a 	add.w	r2, r2, #10
 8002934:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002936:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800293a:	f103 030c 	add.w	r3, r3, #12
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002946:	f102 020c 	add.w	r2, r2, #12
 800294a:	8013      	strh	r3, [r2, #0]
 800294c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002950:	f103 030e 	add.w	r3, r3, #14
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	4957      	ldr	r1, [pc, #348]	; (8002ab4 <cfg_SaveSettings+0x244>)
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3304      	adds	r3, #4
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800296a:	f102 020c 	add.w	r2, r2, #12
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d397      	bcc.n	80028a4 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 8002974:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002978:	f103 030e 	add.w	r3, r3, #14
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002984:	f102 020e 	add.w	r2, r2, #14
 8002988:	8013      	strh	r3, [r2, #0]
 800298a:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <cfg_SaveSettings+0x248>)
 800298c:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002990:	b29b      	uxth	r3, r3
 8002992:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002996:	f102 020e 	add.w	r2, r2, #14
 800299a:	8812      	ldrh	r2, [r2, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	f4ff af7a 	bcc.w	8002896 <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 80029a2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029a6:	f103 030a 	add.w	r3, r3, #10
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d07a      	beq.n	8002aa6 <cfg_SaveSettings+0x236>
 80029b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029b4:	f103 030a 	add.w	r3, r3, #10
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	f240 32fd 	movw	r2, #1021	; 0x3fd
 80029be:	4293      	cmp	r3, r2
 80029c0:	d871      	bhi.n	8002aa6 <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 80029c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029c6:	f103 030a 	add.w	r3, r3, #10
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	3b0c      	subs	r3, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	2000      	movs	r0, #0
 80029d6:	f000 fbb7 	bl	8003148 <crc32_calc>
 80029da:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029de:	f103 0304 	add.w	r3, r3, #4
 80029e2:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 80029e4:	f004 fd44 	bl	8007470 <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 80029e8:	2102      	movs	r1, #2
 80029ea:	2007      	movs	r0, #7
 80029ec:	f004 feb2 	bl	8007754 <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 80029f0:	4932      	ldr	r1, [pc, #200]	; (8002abc <cfg_SaveSettings+0x24c>)
 80029f2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80029f6:	f103 030a 	add.w	r3, r3, #10
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	2200      	movs	r2, #0
 80029fe:	469a      	mov	sl, r3
 8002a00:	4693      	mov	fp, r2
 8002a02:	4652      	mov	r2, sl
 8002a04:	465b      	mov	r3, fp
 8002a06:	2002      	movs	r0, #2
 8002a08:	f004 fcde 	bl	80073c8 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <cfg_SaveSettings+0x24c>)
 8002a0e:	1d19      	adds	r1, r3, #4
 8002a10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a14:	f103 0304 	add.w	r3, r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4698      	mov	r8, r3
 8002a1e:	4691      	mov	r9, r2
 8002a20:	4642      	mov	r2, r8
 8002a22:	464b      	mov	r3, r9
 8002a24:	2002      	movs	r0, #2
 8002a26:	f004 fccf 	bl	80073c8 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002a30:	f102 020e 	add.w	r2, r2, #14
 8002a34:	8013      	strh	r3, [r2, #0]
 8002a36:	e027      	b.n	8002a88 <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 8002a38:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a3c:	f103 030e 	add.w	r3, r3, #14
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <cfg_SaveSettings+0x24c>)
 8002a48:	3308      	adds	r3, #8
 8002a4a:	18d1      	adds	r1, r2, r3
 8002a4c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a50:	f103 030e 	add.w	r3, r3, #14
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	f107 0210 	add.w	r2, r7, #16
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	461c      	mov	r4, r3
 8002a66:	4615      	mov	r5, r2
 8002a68:	4622      	mov	r2, r4
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f004 fcab 	bl	80073c8 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 8002a72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a76:	f103 030e 	add.w	r3, r3, #14
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002a82:	f102 020e 	add.w	r2, r2, #14
 8002a86:	8013      	strh	r3, [r2, #0]
 8002a88:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a8c:	f103 030e 	add.w	r3, r3, #14
 8002a90:	881a      	ldrh	r2, [r3, #0]
 8002a92:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a96:	f103 030a 	add.w	r3, r3, #10
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d3cb      	bcc.n	8002a38 <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 8002aa0:	f004 fd08 	bl	80074b4 <HAL_FLASH_Lock>

	}

	return;
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
}
 8002aa8:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab4:	20000030 	.word	0x20000030
 8002ab8:	200002b8 	.word	0x200002b8
 8002abc:	08060000 	.word	0x08060000

08002ac0 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <cfg_LoadSettings+0x14c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 8002ad8:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <cfg_LoadSettings+0x14c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808e 	beq.w	8002c02 <cfg_LoadSettings+0x142>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f200 8088 	bhi.w	8002c02 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 8002af2:	2300      	movs	r3, #0
 8002af4:	82fb      	strh	r3, [r7, #22]
 8002af6:	e029      	b.n	8002b4c <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002af8:	2300      	movs	r3, #0
 8002afa:	82bb      	strh	r3, [r7, #20]
 8002afc:	e017      	b.n	8002b2e <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002afe:	8afa      	ldrh	r2, [r7, #22]
 8002b00:	4943      	ldr	r1, [pc, #268]	; (8002c10 <cfg_LoadSettings+0x150>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3310      	adds	r3, #16
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1dba      	adds	r2, r7, #6
 8002b12:	8ab8      	ldrh	r0, [r7, #20]
 8002b14:	2100      	movs	r1, #0
 8002b16:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <cfg_LoadSettings+0x68>
					var_cnt += 1;
 8002b22:	8a7b      	ldrh	r3, [r7, #18]
 8002b24:	3301      	adds	r3, #1
 8002b26:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002b28:	8abb      	ldrh	r3, [r7, #20]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	82bb      	strh	r3, [r7, #20]
 8002b2e:	8afa      	ldrh	r2, [r7, #22]
 8002b30:	4937      	ldr	r1, [pc, #220]	; (8002c10 <cfg_LoadSettings+0x150>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	8aba      	ldrh	r2, [r7, #20]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d3db      	bcc.n	8002afe <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 8002b46:	8afb      	ldrh	r3, [r7, #22]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	82fb      	strh	r3, [r7, #22]
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <cfg_LoadSettings+0x154>)
 8002b4e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	8afa      	ldrh	r2, [r7, #22]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3ce      	bcc.n	8002af8 <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 8002b5a:	8a7b      	ldrh	r3, [r7, #18]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d14f      	bne.n	8002c02 <cfg_LoadSettings+0x142>
 8002b62:	8a7b      	ldrh	r3, [r7, #18]
 8002b64:	461a      	mov	r2, r3
 8002b66:	492c      	ldr	r1, [pc, #176]	; (8002c18 <cfg_LoadSettings+0x158>)
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f000 faed 	bl	8003148 <crc32_calc>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d145      	bne.n	8002c02 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 8002b76:	2300      	movs	r3, #0
 8002b78:	82fb      	strh	r3, [r7, #22]
 8002b7a:	e03a      	b.n	8002bf2 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	82bb      	strh	r3, [r7, #20]
 8002b80:	e028      	b.n	8002bd4 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8002b82:	8afa      	ldrh	r2, [r7, #22]
 8002b84:	4922      	ldr	r1, [pc, #136]	; (8002c10 <cfg_LoadSettings+0x150>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3310      	adds	r3, #16
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1dba      	adds	r2, r7, #6
 8002b96:	8ab8      	ldrh	r0, [r7, #20]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d013      	beq.n	8002bce <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 8002ba6:	8afa      	ldrh	r2, [r7, #22]
 8002ba8:	4919      	ldr	r1, [pc, #100]	; (8002c10 <cfg_LoadSettings+0x150>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	8a3a      	ldrh	r2, [r7, #16]
 8002bba:	3202      	adds	r2, #2
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	4913      	ldr	r1, [pc, #76]	; (8002c0c <cfg_LoadSettings+0x14c>)
 8002bc0:	4411      	add	r1, r2
 8002bc2:	8aba      	ldrh	r2, [r7, #20]
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4798      	blx	r3
						load_var_cnt += 1;
 8002bc8:	8a3b      	ldrh	r3, [r7, #16]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8002bce:	8abb      	ldrh	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	82bb      	strh	r3, [r7, #20]
 8002bd4:	8afa      	ldrh	r2, [r7, #22]
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <cfg_LoadSettings+0x150>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3304      	adds	r3, #4
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	8aba      	ldrh	r2, [r7, #20]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3ca      	bcc.n	8002b82 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 8002bec:	8afb      	ldrh	r3, [r7, #22]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	82fb      	strh	r3, [r7, #22]
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <cfg_LoadSettings+0x154>)
 8002bf4:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	8afa      	ldrh	r2, [r7, #22]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3bd      	bcc.n	8002b7c <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
}
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08060000 	.word	0x08060000
 8002c10:	20000030 	.word	0x20000030
 8002c14:	200002b8 	.word	0x200002b8
 8002c18:	08060008 	.word	0x08060008

08002c1c <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002c20:	f004 fc26 	bl	8007470 <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8002c24:	2102      	movs	r1, #2
 8002c26:	2006      	movs	r0, #6
 8002c28:	f004 fd94 	bl	8007754 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 8002c2c:	f004 fc42 	bl	80074b4 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 8002c30:	4a03      	ldr	r2, [pc, #12]	; (8002c40 <cfg_ClearFwBuf+0x24>)
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <cfg_ClearFwBuf+0x28>)
 8002c34:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <cfg_ClearFwBuf+0x2c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

	return;
 8002c3c:	bf00      	nop
}
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08040000 	.word	0x08040000
 8002c44:	200005e8 	.word	0x200005e8
 8002c48:	200005ec 	.word	0x200005ec

08002c4c <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8002c54:	f004 fc0c 	bl	8007470 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <cfg_WriteFwData+0x44>)
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	461c      	mov	r4, r3
 8002c62:	4615      	mov	r5, r2
 8002c64:	4622      	mov	r2, r4
 8002c66:	462b      	mov	r3, r5
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f004 fbad 	bl	80073c8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8002c6e:	f004 fc21 	bl	80074b4 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <cfg_WriteFwData+0x44>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3304      	adds	r3, #4
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <cfg_WriteFwData+0x44>)
 8002c7a:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <cfg_WriteFwData+0x48>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <cfg_WriteFwData+0x48>)
 8002c84:	6013      	str	r3, [r2, #0]

	return;
 8002c86:	bf00      	nop
}
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200005e8 	.word	0x200005e8
 8002c94:	200005ec 	.word	0x200005ec

08002c98 <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 8002ca6:	89fb      	ldrh	r3, [r7, #14]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d13e      	bne.n	8002d2a <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <cfg_AddTxData+0xa0>)
 8002cb0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d831      	bhi.n	8002d2e <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 8002cca:	89fa      	ldrh	r2, [r7, #14]
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	491a      	ldr	r1, [pc, #104]	; (8002d38 <cfg_AddTxData+0xa0>)
 8002cd0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002cd4:	fb00 f303 	mul.w	r3, r0, r3
 8002cd8:	440b      	add	r3, r1
 8002cda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ce4:	fb01 f202 	mul.w	r2, r1, r2
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <cfg_AddTxData+0xa0>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00e f8a4 	bl	8010e44 <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002cfc:	89fb      	ldrh	r3, [r7, #14]
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <cfg_AddTxData+0xa0>)
 8002d00:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	89fb      	ldrh	r3, [r7, #14]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	440a      	add	r2, r1
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <cfg_AddTxData+0xa0>)
 8002d18:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002d1c:	fb00 f303 	mul.w	r3, r0, r3
 8002d20:	440b      	add	r3, r1
 8002d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d26:	601a      	str	r2, [r3, #0]

	return;
 8002d28:	e002      	b.n	8002d30 <cfg_AddTxData+0x98>
		return;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <cfg_AddTxData+0x98>
		return;
 8002d2e:	bf00      	nop
}
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200002b8 	.word	0x200002b8

08002d3c <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b0c5      	sub	sp, #276	; 0x114
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4604      	mov	r4, r0
 8002d44:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002d48:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8002d4c:	6001      	str	r1, [r0, #0]
 8002d4e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d52:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002d56:	600a      	str	r2, [r1, #0]
 8002d58:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d5c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d66:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 8002d6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d72:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 80c0 	bne.w	8002efe <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8002d7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d82:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	4a61      	ldr	r2, [pc, #388]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002d8a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002d9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002da2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f200 80aa 	bhi.w	8002f02 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 8002dae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2bff      	cmp	r3, #255	; 0xff
 8002dba:	f200 80a4 	bhi.w	8002f06 <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 8002dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dc2:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002dcc:	fb03 f202 	mul.w	r2, r3, r2
 8002dd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002de0:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002de2:	1899      	adds	r1, r3, r2
 8002de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002de8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002df0:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002df4:	fb00 f303 	mul.w	r3, r0, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00e f817 	bl	8010e44 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8002e16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e1a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002e24:	fb03 f202 	mul.w	r2, r3, r2
 8002e28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e38:	4a35      	ldr	r2, [pc, #212]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002e3a:	1898      	adds	r0, r3, r2
 8002e3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e40:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002e44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	f00d fff8 	bl	8010e44 <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8002e54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e58:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e62:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8002e66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e6e:	6809      	ldr	r1, [r1, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	440b      	add	r3, r1
 8002e74:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e78:	fb01 f202 	mul.w	r2, r1, r2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002e82:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002e84:	1898      	adds	r0, r3, r2
 8002e86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e8a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002e92:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1ad2      	subs	r2, r2, r3
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f00d ffc6 	bl	8010e44 <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8002eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ebc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002ec4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ed8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ee2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	440a      	add	r2, r1
 8002eea:	4909      	ldr	r1, [pc, #36]	; (8002f10 <cfg_IntertTxData+0x1d4>)
 8002eec:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002ef0:	fb00 f303 	mul.w	r3, r0, r3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002efa:	601a      	str	r2, [r3, #0]

	return;
 8002efc:	e004      	b.n	8002f08 <cfg_IntertTxData+0x1cc>
		return;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <cfg_IntertTxData+0x1cc>
		return;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <cfg_IntertTxData+0x1cc>
		return;
 8002f06:	bf00      	nop
}
 8002f08:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd90      	pop	{r4, r7, pc}
 8002f10:	200002b8 	.word	0x200002b8

08002f14 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b0c2      	sub	sp, #264	; 0x108
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f24:	6019      	str	r1, [r3, #0]
 8002f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f2a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f2e:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 8002f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f34:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <cfg_RemTxData+0x150>)
 8002f3c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002f50:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d87f      	bhi.n	800305a <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 8002f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d078      	beq.n	800305a <cfg_RemTxData+0x146>
 8002f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f6c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <cfg_RemTxData+0x150>)
 8002f74:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d068      	beq.n	800305a <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8002f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f8c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	4a34      	ldr	r2, [pc, #208]	; (8003064 <cfg_RemTxData+0x150>)
 8002f94:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fa8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002fb2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	1a8a      	subs	r2, r1, r2
 8002fba:	492a      	ldr	r1, [pc, #168]	; (8003064 <cfg_RemTxData+0x150>)
 8002fbc:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002fc0:	fb00 f303 	mul.w	r3, r0, r3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fca:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 8002fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fd0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <cfg_RemTxData+0x150>)
 8002ff0:	1899      	adds	r1, r3, r2
 8002ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ff6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <cfg_RemTxData+0x150>)
 8002ffe:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	4413      	add	r3, r2
 8003008:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	4618      	mov	r0, r3
 8003014:	f00d ff16 	bl	8010e44 <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8003018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800301c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800302e:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <cfg_RemTxData+0x150>)
 8003030:	1898      	adds	r0, r3, r2
 8003032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003036:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <cfg_RemTxData+0x150>)
 800303e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	4619      	mov	r1, r3
 8003054:	f00d fef6 	bl	8010e44 <memcpy>
	//free(tmp_buf);

	return;
 8003058:	e000      	b.n	800305c <cfg_RemTxData+0x148>
		return;
 800305a:	bf00      	nop
}
 800305c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	200002b8 	.word	0x200002b8

08003068 <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	2001      	movs	r0, #1
 8003078:	f001 f844 	bl	8004104 <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 800307c:	bf00      	nop
}
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8003094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003098:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800309a:	e00e      	b.n	80030ba <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 800309c:	897b      	ldrh	r3, [r7, #10]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1c58      	adds	r0, r3, #1
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	404b      	eors	r3, r1
 80030b0:	4908      	ldr	r1, [pc, #32]	; (80030d4 <crc16_calc+0x50>)
 80030b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030b6:	4053      	eors	r3, r2
 80030b8:	817b      	strh	r3, [r7, #10]
	while( len-- )
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	807a      	strh	r2, [r7, #2]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1eb      	bne.n	800309c <crc16_calc+0x18>
	return crc;
 80030c4:	897b      	ldrh	r3, [r7, #10]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	08011228 	.word	0x08011228

080030d8 <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	817b      	strh	r3, [r7, #10]
 80030ea:	460b      	mov	r3, r1
 80030ec:	813b      	strh	r3, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 80030f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f6:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 80030f8:	e017      	b.n	800312a <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 80030fa:	8afb      	ldrh	r3, [r7, #22]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	b29a      	uxth	r2, r3
 8003100:	8afb      	ldrh	r3, [r7, #22]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	8979      	ldrh	r1, [r7, #10]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	4401      	add	r1, r0
 800310a:	7809      	ldrb	r1, [r1, #0]
 800310c:	404b      	eors	r3, r1
 800310e:	490d      	ldr	r1, [pc, #52]	; (8003144 <crc16_RingBuf+0x6c>)
 8003110:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003114:	4053      	eors	r3, r2
 8003116:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	3301      	adds	r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	b21a      	sxth	r2, r3
 8003120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003124:	4013      	ands	r3, r2
 8003126:	b21b      	sxth	r3, r3
 8003128:	817b      	strh	r3, [r7, #10]
	while( len-- )
 800312a:	893b      	ldrh	r3, [r7, #8]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	813a      	strh	r2, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e2      	bne.n	80030fa <crc16_RingBuf+0x22>
	}
	return crc;
 8003134:	8afb      	ldrh	r3, [r7, #22]
}
 8003136:	4618      	mov	r0, r3
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	08011228 	.word	0x08011228

08003148 <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	80fb      	strh	r3, [r7, #6]
 8003154:	4613      	mov	r3, r2
 8003156:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	60fb      	str	r3, [r7, #12]
  while (len--)
 800315c:	e00f      	b.n	800317e <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	021a      	lsls	r2, r3, #8
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	0e19      	lsrs	r1, r3, #24
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	404b      	eors	r3, r1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	490a      	ldr	r1, [pc, #40]	; (8003198 <crc32_calc+0x50>)
 8003170:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003174:	4053      	eors	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
      buf++;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	3304      	adds	r3, #4
 800317c:	603b      	str	r3, [r7, #0]
  while (len--)
 800317e:	88bb      	ldrh	r3, [r7, #4]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	80ba      	strh	r2, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ea      	bne.n	800315e <crc32_calc+0x16>
    }
  return crc;
 8003188:	68fb      	ldr	r3, [r7, #12]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	08011428 	.word	0x08011428

0800319c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031a0:	f003 fa9a 	bl	80066d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031a4:	f000 f814 	bl	80031d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031a8:	f000 f9be 	bl	8003528 <MX_GPIO_Init>
  MX_I2C1_Init();
 80031ac:	f000 f8ca 	bl	8003344 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80031b0:	f000 f966 	bl	8003480 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031b4:	f000 f98e 	bl	80034d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80031b8:	f000 f8f2 	bl	80033a0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80031bc:	f000 f870 	bl	80032a0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80031c0:	f00d f90c 	bl	80103dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 80031c4:	f003 f932 	bl	800642c <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 80031c8:	f003 f95a 	bl	8006480 <system_Task>
 80031cc:	e7fc      	b.n	80031c8 <main+0x2c>
	...

080031d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b094      	sub	sp, #80	; 0x50
 80031d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d6:	f107 0320 	add.w	r3, r7, #32
 80031da:	2230      	movs	r2, #48	; 0x30
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f00d fe3e 	bl	8010e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	4b27      	ldr	r3, [pc, #156]	; (8003298 <SystemClock_Config+0xc8>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4a26      	ldr	r2, [pc, #152]	; (8003298 <SystemClock_Config+0xc8>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6413      	str	r3, [r2, #64]	; 0x40
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <SystemClock_Config+0xc8>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <SystemClock_Config+0xcc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <SystemClock_Config+0xcc>)
 800321a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b1e      	ldr	r3, [pc, #120]	; (800329c <SystemClock_Config+0xcc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800322c:	2301      	movs	r3, #1
 800322e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003236:	2302      	movs	r3, #2
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800323a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003240:	230f      	movs	r3, #15
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003244:	2390      	movs	r3, #144	; 0x90
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003248:	2304      	movs	r3, #4
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800324c:	2305      	movs	r3, #5
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003250:	f107 0320 	add.w	r3, r7, #32
 8003254:	4618      	mov	r0, r3
 8003256:	f006 ff9b 	bl	800a190 <HAL_RCC_OscConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003260:	f000 fa68 	bl	8003734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003264:	230f      	movs	r3, #15
 8003266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003268:	2302      	movs	r3, #2
 800326a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f007 f9fd 	bl	800a680 <HAL_RCC_ClockConfig>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800328c:	f000 fa52 	bl	8003734 <Error_Handler>
  }
}
 8003290:	bf00      	nop
 8003292:	3750      	adds	r7, #80	; 0x50
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40007000 	.word	0x40007000

080032a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032a6:	463b      	mov	r3, r7
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <MX_ADC1_Init+0x98>)
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <MX_ADC1_Init+0x9c>)
 80032b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <MX_ADC1_Init+0x98>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <MX_ADC1_Init+0x98>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <MX_ADC1_Init+0x98>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <MX_ADC1_Init+0x98>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <MX_ADC1_Init+0x98>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <MX_ADC1_Init+0x98>)
 80032da:	2200      	movs	r2, #0
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <MX_ADC1_Init+0x98>)
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <MX_ADC1_Init+0xa0>)
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <MX_ADC1_Init+0x98>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <MX_ADC1_Init+0x98>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <MX_ADC1_Init+0x98>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <MX_ADC1_Init+0x98>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032fe:	480e      	ldr	r0, [pc, #56]	; (8003338 <MX_ADC1_Init+0x98>)
 8003300:	f003 fa50 	bl	80067a4 <HAL_ADC_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800330a:	f000 fa13 	bl	8003734 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800330e:	2300      	movs	r3, #0
 8003310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003312:	2301      	movs	r3, #1
 8003314:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800331a:	463b      	mov	r3, r7
 800331c:	4619      	mov	r1, r3
 800331e:	4806      	ldr	r0, [pc, #24]	; (8003338 <MX_ADC1_Init+0x98>)
 8003320:	f003 fc74 	bl	8006c0c <HAL_ADC_ConfigChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800332a:	f000 fa03 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200005f4 	.word	0x200005f4
 800333c:	40012000 	.word	0x40012000
 8003340:	0f000001 	.word	0x0f000001

08003344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <MX_I2C1_Init+0x50>)
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <MX_I2C1_Init+0x54>)
 800334c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_I2C1_Init+0x50>)
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <MX_I2C1_Init+0x58>)
 8003352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <MX_I2C1_Init+0x50>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <MX_I2C1_Init+0x50>)
 800335c:	2200      	movs	r2, #0
 800335e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <MX_I2C1_Init+0x50>)
 8003362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <MX_I2C1_Init+0x50>)
 800336a:	2200      	movs	r2, #0
 800336c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <MX_I2C1_Init+0x50>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <MX_I2C1_Init+0x50>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <MX_I2C1_Init+0x50>)
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <MX_I2C1_Init+0x50>)
 8003382:	f004 fcc9 	bl	8007d18 <HAL_I2C_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800338c:	f000 f9d2 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	2000063c 	.word	0x2000063c
 8003398:	40005400 	.word	0x40005400
 800339c:	000186a0 	.word	0x000186a0

080033a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a6:	f107 0320 	add.w	r3, r7, #32
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	615a      	str	r2, [r3, #20]
 80033c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033c2:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033c4:	4a2d      	ldr	r2, [pc, #180]	; (800347c <MX_TIM3_Init+0xdc>)
 80033c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033ca:	22c7      	movs	r2, #199	; 0xc7
 80033cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80033d4:	4b28      	ldr	r3, [pc, #160]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80033da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e2:	4b25      	ldr	r3, [pc, #148]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033e8:	4823      	ldr	r0, [pc, #140]	; (8003478 <MX_TIM3_Init+0xd8>)
 80033ea:	f007 fc17 	bl	800ac1c <HAL_TIM_PWM_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80033f4:	f000 f99e 	bl	8003734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f8:	2300      	movs	r3, #0
 80033fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003400:	f107 0320 	add.w	r3, r7, #32
 8003404:	4619      	mov	r1, r3
 8003406:	481c      	ldr	r0, [pc, #112]	; (8003478 <MX_TIM3_Init+0xd8>)
 8003408:	f008 f92c 	bl	800b664 <HAL_TIMEx_MasterConfigSynchronization>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003412:	f000 f98f 	bl	8003734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003416:	2360      	movs	r3, #96	; 0x60
 8003418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	2200      	movs	r2, #0
 800342a:	4619      	mov	r1, r3
 800342c:	4812      	ldr	r0, [pc, #72]	; (8003478 <MX_TIM3_Init+0xd8>)
 800342e:	f007 fdfd 	bl	800b02c <HAL_TIM_PWM_ConfigChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003438:	f000 f97c 	bl	8003734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2204      	movs	r2, #4
 8003440:	4619      	mov	r1, r3
 8003442:	480d      	ldr	r0, [pc, #52]	; (8003478 <MX_TIM3_Init+0xd8>)
 8003444:	f007 fdf2 	bl	800b02c <HAL_TIM_PWM_ConfigChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800344e:	f000 f971 	bl	8003734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2208      	movs	r2, #8
 8003456:	4619      	mov	r1, r3
 8003458:	4807      	ldr	r0, [pc, #28]	; (8003478 <MX_TIM3_Init+0xd8>)
 800345a:	f007 fde7 	bl	800b02c <HAL_TIM_PWM_ConfigChannel>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003464:	f000 f966 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003468:	4803      	ldr	r0, [pc, #12]	; (8003478 <MX_TIM3_Init+0xd8>)
 800346a:	f000 fa47 	bl	80038fc <HAL_TIM_MspPostInit>

}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000690 	.word	0x20000690
 800347c:	40000400 	.word	0x40000400

08003480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <MX_USART1_UART_Init+0x50>)
 8003488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 800348c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034a6:	220c      	movs	r2, #12
 80034a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034b8:	f008 f956 	bl	800b768 <HAL_UART_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034c2:	f000 f937 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200006d8 	.word	0x200006d8
 80034d0:	40011000 	.word	0x40011000

080034d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <MX_USART2_UART_Init+0x50>)
 80034dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 80034e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 80034fa:	220c      	movs	r2, #12
 80034fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 8003506:	2200      	movs	r2, #0
 8003508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800350a:	4805      	ldr	r0, [pc, #20]	; (8003520 <MX_USART2_UART_Init+0x4c>)
 800350c:	f008 f92c 	bl	800b768 <HAL_UART_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003516:	f000 f90d 	bl	8003734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000071c 	.word	0x2000071c
 8003524:	40004400 	.word	0x40004400

08003528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352e:	f107 0314 	add.w	r3, r7, #20
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <MX_GPIO_Init+0x130>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a44      	ldr	r2, [pc, #272]	; (8003658 <MX_GPIO_Init+0x130>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <MX_GPIO_Init+0x130>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <MX_GPIO_Init+0x130>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a3d      	ldr	r2, [pc, #244]	; (8003658 <MX_GPIO_Init+0x130>)
 8003564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <MX_GPIO_Init+0x130>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <MX_GPIO_Init+0x130>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a36      	ldr	r2, [pc, #216]	; (8003658 <MX_GPIO_Init+0x130>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b34      	ldr	r3, [pc, #208]	; (8003658 <MX_GPIO_Init+0x130>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <MX_GPIO_Init+0x130>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <MX_GPIO_Init+0x130>)
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <MX_GPIO_Init+0x130>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035b4:	4829      	ldr	r0, [pc, #164]	; (800365c <MX_GPIO_Init+0x134>)
 80035b6:	f004 fb95 	bl	8007ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M0_GPIO_Port, MODEM_M0_Pin, GPIO_PIN_RESET);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2120      	movs	r1, #32
 80035be:	4828      	ldr	r0, [pc, #160]	; (8003660 <MX_GPIO_Init+0x138>)
 80035c0:	f004 fb90 	bl	8007ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 80035c4:	2200      	movs	r2, #0
 80035c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ca:	4826      	ldr	r0, [pc, #152]	; (8003664 <MX_GPIO_Init+0x13c>)
 80035cc:	f004 fb8a 	bl	8007ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M1_GPIO_Port, MODEM_M1_Pin, GPIO_PIN_SET);
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035d6:	4822      	ldr	r0, [pc, #136]	; (8003660 <MX_GPIO_Init+0x138>)
 80035d8:	f004 fb84 	bl	8007ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80035dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e2:	2301      	movs	r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4819      	ldr	r0, [pc, #100]	; (800365c <MX_GPIO_Init+0x134>)
 80035f6:	f004 f8f5 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 80035fa:	f248 0320 	movw	r3, #32800	; 0x8020
 80035fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003600:	2301      	movs	r3, #1
 8003602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003604:	2301      	movs	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003608:	2300      	movs	r3, #0
 800360a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	4813      	ldr	r0, [pc, #76]	; (8003660 <MX_GPIO_Init+0x138>)
 8003614:	f004 f8e6 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 8003618:	2340      	movs	r3, #64	; 0x40
 800361a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4619      	mov	r1, r3
 800362a:	480d      	ldr	r0, [pc, #52]	; (8003660 <MX_GPIO_Init+0x138>)
 800362c:	f004 f8da 	bl	80077e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 8003630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4806      	ldr	r0, [pc, #24]	; (8003664 <MX_GPIO_Init+0x13c>)
 800364a:	f004 f8cb 	bl	80077e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40020800 	.word	0x40020800
 8003660:	40020000 	.word	0x40020000
 8003664:	40020400 	.word	0x40020400

08003668 <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <MX_USART1_UART_Init115200+0x50>)
 8003670:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 8003674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003678:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 800368e:	220c      	movs	r2, #12
 8003690:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 800369a:	2200      	movs	r2, #0
 800369c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800369e:	4805      	ldr	r0, [pc, #20]	; (80036b4 <MX_USART1_UART_Init115200+0x4c>)
 80036a0:	f008 f862 	bl	800b768 <HAL_UART_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 80036aa:	f000 f843 	bl	8003734 <Error_Handler>
	}
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200006d8 	.word	0x200006d8
 80036b8:	40011000 	.word	0x40011000

080036bc <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f002 ffb9 	bl	800663c <system_UART_RxCpltCallback>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <MX_UARTReInit>:

void MX_UARTReInit()
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80036d8:	4803      	ldr	r0, [pc, #12]	; (80036e8 <MX_UARTReInit+0x14>)
 80036da:	f008 f892 	bl	800b802 <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 80036de:	f7ff fecf 	bl	8003480 <MX_USART1_UART_Init>
	return;
 80036e2:	bf00      	nop
}
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200006d8 	.word	0x200006d8

080036ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f002 ff6b 	bl	80065d0 <system_ADC_ConvCpltCallback>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003716:	f003 f801 	bl	800671c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 800371a:	f003 f813 	bl	8006744 <HAL_GetTick>
 800371e:	4603      	mov	r3, r0
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fe3d 	bl	80063a0 <system_Timer>
  /* USER CODE END Callback 1 */
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40000800 	.word	0x40000800

08003734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003738:	b672      	cpsid	i
}
 800373a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800373c:	e7fe      	b.n	800373c <Error_Handler+0x8>
	...

08003740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_MspInit+0x4c>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_MspInit+0x4c>)
 8003750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_MspInit+0x4c>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_MspInit+0x4c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <HAL_MspInit+0x4c>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_MspInit+0x4c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_ADC_MspInit+0x8c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d12f      	bne.n	8003812 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_ADC_MspInit+0x90>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_ADC_MspInit+0x90>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_ADC_MspInit+0x90>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_ADC_MspInit+0x90>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <HAL_ADC_MspInit+0x90>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_ADC_MspInit+0x90>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 80037ea:	2301      	movs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ee:	2303      	movs	r3, #3
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	4619      	mov	r1, r3
 80037fc:	4809      	ldr	r0, [pc, #36]	; (8003824 <HAL_ADC_MspInit+0x94>)
 80037fe:	f003 fff1 	bl	80077e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	2012      	movs	r0, #18
 8003808:	f003 fd14 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800380c:	2012      	movs	r0, #18
 800380e:	f003 fd2d 	bl	800726c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40012000 	.word	0x40012000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000

08003828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_I2C_MspInit+0x84>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d12b      	bne.n	80038a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_I2C_MspInit+0x88>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <HAL_I2C_MspInit+0x88>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <HAL_I2C_MspInit+0x88>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 8003866:	23c0      	movs	r3, #192	; 0xc0
 8003868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800386a:	2312      	movs	r3, #18
 800386c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800386e:	2301      	movs	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003876:	2304      	movs	r3, #4
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	4619      	mov	r1, r3
 8003880:	480c      	ldr	r0, [pc, #48]	; (80038b4 <HAL_I2C_MspInit+0x8c>)
 8003882:	f003 ffaf 	bl	80077e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_I2C_MspInit+0x88>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <HAL_I2C_MspInit+0x88>)
 8003890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_I2C_MspInit+0x88>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40005400 	.word	0x40005400
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40020400 	.word	0x40020400

080038b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_TIM_PWM_MspInit+0x40>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_TIM_PWM_MspInit+0x40>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_TIM_PWM_MspInit+0x40>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_TIM_MspPostInit+0x68>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d11d      	bne.n	800395a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <HAL_TIM_MspPostInit+0x6c>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <HAL_TIM_MspPostInit+0x6c>)
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_TIM_MspPostInit+0x6c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 800393a:	2331      	movs	r3, #49	; 0x31
 800393c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800394a:	2302      	movs	r3, #2
 800394c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	4619      	mov	r1, r3
 8003954:	4805      	ldr	r0, [pc, #20]	; (800396c <HAL_TIM_MspPostInit+0x70>)
 8003956:	f003 ff45 	bl	80077e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800395a:	bf00      	nop
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40000400 	.word	0x40000400
 8003968:	40023800 	.word	0x40023800
 800396c:	40020400 	.word	0x40020400

08003970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	; 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <HAL_UART_MspInit+0xf8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d135      	bne.n	80039fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4a34      	ldr	r2, [pc, #208]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 800399c:	f043 0310 	orr.w	r3, r3, #16
 80039a0:	6453      	str	r3, [r2, #68]	; 0x44
 80039a2:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 80039ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039dc:	2307      	movs	r3, #7
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	4619      	mov	r1, r3
 80039e6:	4822      	ldr	r0, [pc, #136]	; (8003a70 <HAL_UART_MspInit+0x100>)
 80039e8:	f003 fefc 	bl	80077e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	2025      	movs	r0, #37	; 0x25
 80039f2:	f003 fc1f 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039f6:	2025      	movs	r0, #37	; 0x25
 80039f8:	f003 fc38 	bl	800726c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039fc:	e030      	b.n	8003a60 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_UART_MspInit+0x104>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d12b      	bne.n	8003a60 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a16:	6413      	str	r3, [r2, #64]	; 0x40
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6313      	str	r3, [r2, #48]	; 0x30
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_UART_MspInit+0xfc>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003a40:	230c      	movs	r3, #12
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a50:	2307      	movs	r3, #7
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4805      	ldr	r0, [pc, #20]	; (8003a70 <HAL_UART_MspInit+0x100>)
 8003a5c:	f003 fec2 	bl	80077e4 <HAL_GPIO_Init>
}
 8003a60:	bf00      	nop
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40011000 	.word	0x40011000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40004400 	.word	0x40004400

08003a78 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <HAL_UART_MspDeInit+0x58>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10e      	bne.n	8003aa8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_UART_MspDeInit+0x5c>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a11      	ldr	r2, [pc, #68]	; (8003ad4 <HAL_UART_MspDeInit+0x5c>)
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 8003a96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a9a:	480f      	ldr	r0, [pc, #60]	; (8003ad8 <HAL_UART_MspDeInit+0x60>)
 8003a9c:	f004 f826 	bl	8007aec <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003aa0:	2025      	movs	r0, #37	; 0x25
 8003aa2:	f003 fbf1 	bl	8007288 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003aa6:	e00e      	b.n	8003ac6 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <HAL_UART_MspDeInit+0x64>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d109      	bne.n	8003ac6 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <HAL_UART_MspDeInit+0x5c>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_UART_MspDeInit+0x5c>)
 8003ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 8003abe:	210c      	movs	r1, #12
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <HAL_UART_MspDeInit+0x60>)
 8003ac2:	f004 f813 	bl	8007aec <HAL_GPIO_DeInit>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40011000 	.word	0x40011000
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40004400 	.word	0x40004400

08003ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <HAL_InitTick+0xe4>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <HAL_InitTick+0xe4>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6413      	str	r3, [r2, #64]	; 0x40
 8003b00:	4b30      	ldr	r3, [pc, #192]	; (8003bc4 <HAL_InitTick+0xe4>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b0c:	f107 0210 	add.w	r2, r7, #16
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f006 ff92 	bl	800aa40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b26:	f006 ff63 	bl	800a9f0 <HAL_RCC_GetPCLK1Freq>
 8003b2a:	6378      	str	r0, [r7, #52]	; 0x34
 8003b2c:	e004      	b.n	8003b38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b2e:	f006 ff5f 	bl	800a9f0 <HAL_RCC_GetPCLK1Freq>
 8003b32:	4603      	mov	r3, r0
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3a:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_InitTick+0xe8>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	0c9b      	lsrs	r3, r3, #18
 8003b42:	3b01      	subs	r3, #1
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_InitTick+0xec>)
 8003b48:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <HAL_InitTick+0xf0>)
 8003b4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_InitTick+0xec>)
 8003b4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b52:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_InitTick+0xec>)
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <HAL_InitTick+0xec>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_InitTick+0xec>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_InitTick+0xec>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003b6c:	4817      	ldr	r0, [pc, #92]	; (8003bcc <HAL_InitTick+0xec>)
 8003b6e:	f006 ff99 	bl	800aaa4 <HAL_TIM_Base_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003b80:	4812      	ldr	r0, [pc, #72]	; (8003bcc <HAL_InitTick+0xec>)
 8003b82:	f006 ffe9 	bl	800ab58 <HAL_TIM_Base_Start_IT>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b94:	201e      	movs	r0, #30
 8003b96:	f003 fb69 	bl	800726c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d808      	bhi.n	8003bb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	201e      	movs	r0, #30
 8003ba6:	f003 fb45 	bl	8007234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <HAL_InitTick+0xf4>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e002      	b.n	8003bb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3738      	adds	r7, #56	; 0x38
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	431bde83 	.word	0x431bde83
 8003bcc:	20000760 	.word	0x20000760
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	200000e8 	.word	0x200000e8

08003bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <NMI_Handler+0x4>

08003bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be2:	e7fe      	b.n	8003be2 <HardFault_Handler+0x4>

08003be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <MemManage_Handler+0x4>

08003bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bee:	e7fe      	b.n	8003bee <BusFault_Handler+0x4>

08003bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf4:	e7fe      	b.n	8003bf4 <UsageFault_Handler+0x4>

08003bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <ADC_IRQHandler+0x10>)
 8003c36:	f002 feb7 	bl	80069a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200005f4 	.word	0x200005f4

08003c44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <TIM4_IRQHandler+0x10>)
 8003c4a:	f007 f8e7 	bl	800ae1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000760 	.word	0x20000760

08003c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <USART1_IRQHandler+0x10>)
 8003c5e:	f007 ffd5 	bl	800bc0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200006d8 	.word	0x200006d8

08003c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <OTG_FS_IRQHandler+0x10>)
 8003c72:	f005 f960 	bl	8008f36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200020ec 	.word	0x200020ec

08003c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <SystemInit+0x20>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <SystemInit+0x20>)
 8003c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e010      	b.n	8003cd4 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ce8 <modem_Timer+0x44>)
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <modem_Timer+0x2a>
			modem_info.timer[i]--;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <modem_Timer+0x44>)
 8003cc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cc6:	3a01      	subs	r2, #1
 8003cc8:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <modem_Timer+0x44>)
 8003cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d9eb      	bls.n	8003cb2 <modem_Timer+0xe>
		}
	}

	return;
 8003cda:	bf00      	nop
}
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	200007a8 	.word	0x200007a8

08003cec <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f248 0120 	movw	r1, #32800	; 0x8020
 8003cf6:	480c      	ldr	r0, [pc, #48]	; (8003d28 <modem_InitTask+0x3c>)
 8003cf8:	f003 fff4 	bl	8007ce4 <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <modem_InitTask+0x40>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <modem_InitTask+0x40>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <modem_InitTask+0x40>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <modem_InitTask+0x40>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <modem_InitTask+0x40>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <modem_InitTask+0x40>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8003d24:	bf00      	nop
}
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40020000 	.word	0x40020000
 8003d2c:	200007a8 	.word	0x200007a8

08003d30 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8003d36:	4b80      	ldr	r3, [pc, #512]	; (8003f38 <modem_Task+0x208>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <modem_Task+0x2e>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	487e      	ldr	r0, [pc, #504]	; (8003f3c <modem_Task+0x20c>)
 8003d42:	f003 ffb7 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f040 80b0 	bne.w	8003eae <modem_Task+0x17e>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	; (8003f40 <modem_Task+0x210>)
 8003d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d54:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8003d56:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <modem_Task+0x208>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e0a7      	b.n	8003eae <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <modem_Task+0x208>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d11e      	bne.n	8003da4 <modem_Task+0x74>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <modem_Task+0x210>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 809f 	bne.w	8003eae <modem_Task+0x17e>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 8003d70:	23c2      	movs	r3, #194	; 0xc2
 8003d72:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 8003d74:	23ff      	movs	r3, #255	; 0xff
 8003d76:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 8003d78:	23ff      	movs	r3, #255	; 0xff
 8003d7a:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 8003d7c:	233d      	movs	r3, #61	; 0x3d
 8003d7e:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 8003d80:	2306      	movs	r3, #6
 8003d82:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 8003d84:	2344      	movs	r3, #68	; 0x44
 8003d86:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 8003d88:	1d39      	adds	r1, r7, #4
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	2206      	movs	r2, #6
 8003d90:	486c      	ldr	r0, [pc, #432]	; (8003f44 <modem_Task+0x214>)
 8003d92:	f007 fd65 	bl	800b860 <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <modem_Task+0x210>)
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <modem_Task+0x208>)
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e084      	b.n	8003eae <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <modem_Task+0x208>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d114      	bne.n	8003dd6 <modem_Task+0xa6>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8003dac:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <modem_Task+0x210>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d17c      	bne.n	8003eae <modem_Task+0x17e>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8003db4:	23c1      	movs	r3, #193	; 0xc1
 8003db6:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 8003db8:	23c1      	movs	r3, #193	; 0xc1
 8003dba:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 8003dbc:	23c1      	movs	r3, #193	; 0xc1
 8003dbe:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8003dc0:	1d39      	adds	r1, r7, #4
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	485e      	ldr	r0, [pc, #376]	; (8003f44 <modem_Task+0x214>)
 8003dca:	f007 fd49 	bl	800b860 <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8003dce:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <modem_Task+0x208>)
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e06b      	b.n	8003eae <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8003dd6:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <modem_Task+0x208>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d115      	bne.n	8003e0a <modem_Task+0xda>
	{
		if( _modem_par_flag == 1 )
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <modem_Task+0x218>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d163      	bne.n	8003eae <modem_Task+0x17e>
		{
			_modem_par_flag = 0;
 8003de6:	4b58      	ldr	r3, [pc, #352]	; (8003f48 <modem_Task+0x218>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 8003dec:	2200      	movs	r2, #0
 8003dee:	f248 0120 	movw	r1, #32800	; 0x8020
 8003df2:	4852      	ldr	r0, [pc, #328]	; (8003f3c <modem_Task+0x20c>)
 8003df4:	f003 ff76 	bl	8007ce4 <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8003df8:	f002 fb9e 	bl	8006538 <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8003dfc:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <modem_Task+0x210>)
 8003dfe:	2264      	movs	r2, #100	; 0x64
 8003e00:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8003e02:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <modem_Task+0x208>)
 8003e04:	2204      	movs	r2, #4
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e051      	b.n	8003eae <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy  )
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <modem_Task+0x208>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d107      	bne.n	8003e22 <modem_Task+0xf2>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <modem_Task+0x210>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d149      	bne.n	8003eae <modem_Task+0x17e>
			_modem_cur_state = modem_ready;
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <modem_Task+0x208>)
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e045      	b.n	8003eae <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8003e22:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <modem_Task+0x208>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d141      	bne.n	8003eae <modem_Task+0x17e>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 8003e2a:	4b45      	ldr	r3, [pc, #276]	; (8003f40 <modem_Task+0x210>)
 8003e2c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d024      	beq.n	8003e7e <modem_Task+0x14e>
 8003e34:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <modem_Task+0x210>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d120      	bne.n	8003e7e <modem_Task+0x14e>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 8003e3c:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <modem_Task+0x210>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <modem_Task+0x210>)
 8003e44:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e48:	2b14      	cmp	r3, #20
 8003e4a:	d90a      	bls.n	8003e62 <modem_Task+0x132>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	2214      	movs	r2, #20
 8003e52:	493e      	ldr	r1, [pc, #248]	; (8003f4c <modem_Task+0x21c>)
 8003e54:	483b      	ldr	r0, [pc, #236]	; (8003f44 <modem_Task+0x214>)
 8003e56:	f007 fd03 	bl	800b860 <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 8003e5a:	2014      	movs	r0, #20
 8003e5c:	f000 f9da 	bl	8004214 <modem_RemTxData>
 8003e60:	e00d      	b.n	8003e7e <modem_Task+0x14e>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <modem_Task+0x210>)
 8003e64:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	4937      	ldr	r1, [pc, #220]	; (8003f4c <modem_Task+0x21c>)
 8003e70:	4834      	ldr	r0, [pc, #208]	; (8003f44 <modem_Task+0x214>)
 8003e72:	f007 fcf5 	bl	800b860 <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 8003e76:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <modem_Task+0x210>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <modem_Task+0x210>)
 8003e80:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <modem_Task+0x17e>
		{
			_modem_led_start = 1;
 8003e88:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <modem_Task+0x220>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <modem_Task+0x210>)
 8003e90:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e94:	b2d8      	uxtb	r0, r3
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <modem_Task+0x210>)
 8003e98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	492c      	ldr	r1, [pc, #176]	; (8003f54 <modem_Task+0x224>)
 8003ea2:	f002 fb5f 	bl	8006564 <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 8003ea6:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <modem_Task+0x210>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8003eae:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <modem_Task+0x228>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <modem_Task+0x19c>
	{
		if( _modem_led_start == 1 )
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <modem_Task+0x220>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d138      	bne.n	8003f30 <modem_Task+0x200>
		{
			_modem_led_start = 0;
 8003ebe:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <modem_Task+0x220>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8003ec4:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <modem_Task+0x228>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 8003eca:	e031      	b.n	8003f30 <modem_Task+0x200>
	else if( _modem_led_state == 1 )
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <modem_Task+0x228>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10c      	bne.n	8003eee <modem_Task+0x1be>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003eda:	4820      	ldr	r0, [pc, #128]	; (8003f5c <modem_Task+0x22c>)
 8003edc:	f003 ff02 	bl	8007ce4 <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <modem_Task+0x210>)
 8003ee2:	2214      	movs	r2, #20
 8003ee4:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <modem_Task+0x228>)
 8003ee8:	2202      	movs	r2, #2
 8003eea:	701a      	strb	r2, [r3, #0]
	return;
 8003eec:	e020      	b.n	8003f30 <modem_Task+0x200>
	else if( _modem_led_state == 2 )
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <modem_Task+0x228>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d110      	bne.n	8003f18 <modem_Task+0x1e8>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <modem_Task+0x210>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d118      	bne.n	8003f30 <modem_Task+0x200>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8003efe:	2200      	movs	r2, #0
 8003f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f04:	4815      	ldr	r0, [pc, #84]	; (8003f5c <modem_Task+0x22c>)
 8003f06:	f003 feed 	bl	8007ce4 <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <modem_Task+0x210>)
 8003f0c:	2232      	movs	r2, #50	; 0x32
 8003f0e:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <modem_Task+0x228>)
 8003f12:	2203      	movs	r2, #3
 8003f14:	701a      	strb	r2, [r3, #0]
	return;
 8003f16:	e00b      	b.n	8003f30 <modem_Task+0x200>
	else if( _modem_led_state == 3 )
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <modem_Task+0x228>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d107      	bne.n	8003f30 <modem_Task+0x200>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <modem_Task+0x210>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d103      	bne.n	8003f30 <modem_Task+0x200>
			_modem_led_state = 0;
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <modem_Task+0x228>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
	return;
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
}
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000950 	.word	0x20000950
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	200007a8 	.word	0x200007a8
 8003f44:	200006d8 	.word	0x200006d8
 8003f48:	2000095f 	.word	0x2000095f
 8003f4c:	200008c0 	.word	0x200008c0
 8003f50:	20000960 	.word	0x20000960
 8003f54:	2000083d 	.word	0x2000083d
 8003f58:	20000961 	.word	0x20000961
 8003f5c:	40020400 	.word	0x40020400

08003f60 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 8003f6a:	4b5f      	ldr	r3, [pc, #380]	; (80040e8 <modem_RcvData+0x188>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d01a      	beq.n	8003fa8 <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 8003f72:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <modem_RcvData+0x18c>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 80b1 	bne.w	80040de <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 8003f7c:	4b5c      	ldr	r3, [pc, #368]	; (80040f0 <modem_RcvData+0x190>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	b2d1      	uxtb	r1, r2
 8003f84:	4a5a      	ldr	r2, [pc, #360]	; (80040f0 <modem_RcvData+0x190>)
 8003f86:	7011      	strb	r1, [r2, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	; (80040f4 <modem_RcvData+0x194>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 8003f90:	4b57      	ldr	r3, [pc, #348]	; (80040f0 <modem_RcvData+0x190>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	f040 80a2 	bne.w	80040de <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <modem_RcvData+0x190>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 8003fa0:	4b52      	ldr	r3, [pc, #328]	; (80040ec <modem_RcvData+0x18c>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 8003fa6:	e09a      	b.n	80040de <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <modem_RcvData+0x198>)
 8003faa:	8a1b      	ldrh	r3, [r3, #16]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb6:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <modem_RcvData+0x198>)
 8003fba:	4611      	mov	r1, r2
 8003fbc:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8003fbe:	4b4e      	ldr	r3, [pc, #312]	; (80040f8 <modem_RcvData+0x198>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	79fa      	ldrb	r2, [r7, #7]
 8003fc4:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 8003fc6:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <modem_RcvData+0x198>)
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d12a      	bne.n	8004026 <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8003fd0:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <modem_RcvData+0x198>)
 8003fd2:	8a1b      	ldrh	r3, [r3, #16]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b02      	subs	r3, #2
 8003fd8:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8003fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4846      	ldr	r0, [pc, #280]	; (80040fc <modem_RcvData+0x19c>)
 8003fe4:	f000 f8ce 	bl	8004184 <modem_ringBufRead16b>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 8003fec:	897b      	ldrh	r3, [r7, #10]
 8003fee:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d173      	bne.n	80040de <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 8003ff6:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <modem_RcvData+0x198>)
 8003ff8:	8a1b      	ldrh	r3, [r3, #16]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b02      	subs	r3, #2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004004:	b29a      	uxth	r2, r3
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <modem_RcvData+0x198>)
 8004008:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	b29a      	uxth	r2, r3
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <modem_RcvData+0x1a0>)
 8004010:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b02      	subs	r3, #2
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <modem_RcvData+0x198>)
 800401c:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <modem_RcvData+0x198>)
 8004020:	2201      	movs	r2, #1
 8004022:	731a      	strb	r2, [r3, #12]
	return;
 8004024:	e05b      	b.n	80040de <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 8004026:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <modem_RcvData+0x198>)
 8004028:	7b1b      	ldrb	r3, [r3, #12]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d156      	bne.n	80040de <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 8004030:	4b33      	ldr	r3, [pc, #204]	; (8004100 <modem_RcvData+0x1a0>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	4b31      	ldr	r3, [pc, #196]	; (8004100 <modem_RcvData+0x1a0>)
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	4b30      	ldr	r3, [pc, #192]	; (8004100 <modem_RcvData+0x1a0>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d14c      	bne.n	80040de <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8004044:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <modem_RcvData+0x198>)
 8004046:	2200      	movs	r2, #0
 8004048:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <modem_RcvData+0x198>)
 800404c:	89db      	ldrh	r3, [r3, #14]
 800404e:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <modem_RcvData+0x198>)
 8004052:	8a5b      	ldrh	r3, [r3, #18]
 8004054:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 8004056:	3303      	adds	r3, #3
 8004058:	b29a      	uxth	r2, r3
 800405a:	237f      	movs	r3, #127	; 0x7f
 800405c:	4827      	ldr	r0, [pc, #156]	; (80040fc <modem_RcvData+0x19c>)
 800405e:	f7ff f83b 	bl	80030d8 <crc16_RingBuf>
 8004062:	4603      	mov	r3, r0
 8004064:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <modem_RcvData+0x198>)
 8004068:	8a1b      	ldrh	r3, [r3, #16]
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8004070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004074:	b29b      	uxth	r3, r3
 8004076:	4619      	mov	r1, r3
 8004078:	4820      	ldr	r0, [pc, #128]	; (80040fc <modem_RcvData+0x19c>)
 800407a:	f000 f883 	bl	8004184 <modem_ringBufRead16b>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	89bb      	ldrh	r3, [r7, #12]
 8004084:	4293      	cmp	r3, r2
 8004086:	d12a      	bne.n	80040de <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <modem_RcvData+0x198>)
 800408a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800408e:	2b00      	cmp	r3, #0
 8004090:	d125      	bne.n	80040de <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8004092:	2300      	movs	r3, #0
 8004094:	81fb      	strh	r3, [r7, #14]
 8004096:	e014      	b.n	80040c2 <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 8004098:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <modem_RcvData+0x198>)
 800409a:	89db      	ldrh	r3, [r3, #14]
 800409c:	b29b      	uxth	r3, r3
 800409e:	1cda      	adds	r2, r3, #3
 80040a0:	89fb      	ldrh	r3, [r7, #14]
 80040a2:	4413      	add	r3, r2
 80040a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 80040a8:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 80040aa:	4913      	ldr	r1, [pc, #76]	; (80040f8 <modem_RcvData+0x198>)
 80040ac:	440a      	add	r2, r1
 80040ae:	7d12      	ldrb	r2, [r2, #20]
 80040b0:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <modem_RcvData+0x198>)
 80040b4:	4413      	add	r3, r2
 80040b6:	460a      	mov	r2, r1
 80040b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 80040bc:	89fb      	ldrh	r3, [r7, #14]
 80040be:	3301      	adds	r3, #1
 80040c0:	81fb      	strh	r3, [r7, #14]
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <modem_RcvData+0x198>)
 80040c4:	8a5b      	ldrh	r3, [r3, #18]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	89fa      	ldrh	r2, [r7, #14]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3e4      	bcc.n	8004098 <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <modem_RcvData+0x198>)
 80040d0:	8a5b      	ldrh	r3, [r3, #18]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <modem_RcvData+0x198>)
 80040d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
}
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000950 	.word	0x20000950
 80040ec:	2000095f 	.word	0x2000095f
 80040f0:	2000095e 	.word	0x2000095e
 80040f4:	20000954 	.word	0x20000954
 80040f8:	200007a8 	.word	0x200007a8
 80040fc:	200007bc 	.word	0x200007bc
 8004100:	20000962 	.word	0x20000962

08004104 <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 8004112:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004116:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8004118:	f107 0316 	add.w	r3, r7, #22
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f850 	bl	80041c4 <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3303      	adds	r3, #3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 800412e:	f107 0315 	add.w	r3, r7, #21
 8004132:	2101      	movs	r1, #1
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f845 	bl	80041c4 <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 800413e:	f107 0315 	add.w	r3, r7, #21
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f83d 	bl	80041c4 <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	68b8      	ldr	r0, [r7, #8]
 800414e:	f000 f839 	bl	80041c4 <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <modem_TrmData+0x78>)
 8004154:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004158:	b29b      	uxth	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	4808      	ldr	r0, [pc, #32]	; (8004180 <modem_TrmData+0x7c>)
 800415e:	f7fe ff91 	bl	8003084 <crc16_calc>
 8004162:	4603      	mov	r3, r0
 8004164:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 8004166:	f107 0316 	add.w	r3, r7, #22
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f829 	bl	80041c4 <modem_AddTxData>

	return;
 8004172:	bf00      	nop
}
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200007a8 	.word	0x200007a8
 8004180:	200008c0 	.word	0x200008c0

08004184 <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 8004190:	887b      	ldrh	r3, [r7, #2]
 8004192:	3301      	adds	r3, #1
 8004194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	440b      	add	r3, r1
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	81fb      	strh	r3, [r7, #14]
	return tmp;
 80041b4:	89fb      	ldrh	r3, [r7, #14]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <modem_AddTxData+0x4c>)
 80041d0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041d4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d814      	bhi.n	8004208 <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <modem_AddTxData+0x4c>)
 80041e0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80041e4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80041e8:	4a09      	ldr	r2, [pc, #36]	; (8004210 <modem_AddTxData+0x4c>)
 80041ea:	4413      	add	r3, r2
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f00c fe27 	bl	8010e44 <memcpy>
	modem_info.tx_buf_bytes += len;
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <modem_AddTxData+0x4c>)
 80041f8:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <modem_AddTxData+0x4c>)
 8004202:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 8004206:	e000      	b.n	800420a <modem_AddTxData+0x46>
		return;
 8004208:	bf00      	nop
}
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200007a8 	.word	0x200007a8

08004214 <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b0a2      	sub	sp, #136	; 0x88
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <modem_RemTxData+0x6c>)
 800421e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	d826      	bhi.n	8004276 <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <modem_RemTxData+0x62>
 800422e:	4b14      	ldr	r3, [pc, #80]	; (8004280 <modem_RemTxData+0x6c>)
 8004230:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <modem_RemTxData+0x6c>)
 800423a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <modem_RemTxData+0x6c>)
 8004244:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800424e:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <modem_RemTxData+0x6c>)
 8004250:	1899      	adds	r1, r3, r2
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <modem_RemTxData+0x6c>)
 8004254:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	4618      	mov	r0, r3
 800425e:	f00c fdf1 	bl	8010e44 <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <modem_RemTxData+0x6c>)
 8004264:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8004268:	f107 0308 	add.w	r3, r7, #8
 800426c:	4619      	mov	r1, r3
 800426e:	4805      	ldr	r0, [pc, #20]	; (8004284 <modem_RemTxData+0x70>)
 8004270:	f00c fde8 	bl	8010e44 <memcpy>

	return;
 8004274:	e000      	b.n	8004278 <modem_RemTxData+0x64>
		return;
 8004276:	bf00      	nop
}
 8004278:	3788      	adds	r7, #136	; 0x88
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200007a8 	.word	0x200007a8
 8004284:	200008c0 	.word	0x200008c0

08004288 <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e016      	b.n	80042c4 <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	4a0f      	ldr	r2, [pc, #60]	; (80042d8 <motor_Timer+0x50>)
 800429a:	3304      	adds	r3, #4
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <motor_Timer+0x36>
			motor_info.timer[i]--;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	490b      	ldr	r1, [pc, #44]	; (80042d8 <motor_Timer+0x50>)
 80042aa:	1d13      	adds	r3, r2, #4
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	1e59      	subs	r1, r3, #1
 80042b4:	4808      	ldr	r0, [pc, #32]	; (80042d8 <motor_Timer+0x50>)
 80042b6:	1d13      	adds	r3, r2, #4
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4403      	add	r3, r0
 80042bc:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	3301      	adds	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0e5      	beq.n	8004296 <motor_Timer+0xe>
		}
	}

	return;
 80042ca:	bf00      	nop
}
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000964 	.word	0x20000964

080042dc <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <motor_InitTask+0x90>)
 80042e4:	4a22      	ldr	r2, [pc, #136]	; (8004370 <motor_InitTask+0x94>)
 80042e6:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 80042e8:	4b20      	ldr	r3, [pc, #128]	; (800436c <motor_InitTask+0x90>)
 80042ea:	2208      	movs	r2, #8
 80042ec:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 80042ee:	4b1f      	ldr	r3, [pc, #124]	; (800436c <motor_InitTask+0x90>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <motor_InitTask+0x90>)
 80042f6:	f240 2217 	movw	r2, #535	; 0x217
 80042fa:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <motor_InitTask+0x90>)
 80042fe:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004302:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <motor_InitTask+0x90>)
 8004306:	89db      	ldrh	r3, [r3, #14]
 8004308:	b29a      	uxth	r2, r3
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <motor_InitTask+0x90>)
 800430c:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <motor_InitTask+0x90>)
 8004310:	f240 32b6 	movw	r2, #950	; 0x3b6
 8004314:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <motor_InitTask+0x90>)
 8004318:	2201      	movs	r2, #1
 800431a:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800431c:	2300      	movs	r3, #0
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	e016      	b.n	8004350 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 8004322:	79fa      	ldrb	r2, [r7, #7]
 8004324:	4911      	ldr	r1, [pc, #68]	; (800436c <motor_InitTask+0x90>)
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	79fa      	ldrb	r2, [r7, #7]
 8004334:	490d      	ldr	r1, [pc, #52]	; (800436c <motor_InitTask+0x90>)
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3304      	adds	r3, #4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4619      	mov	r1, r3
 8004346:	f006 fcb9 	bl	800acbc <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	3301      	adds	r3, #1
 800434e:	71fb      	strb	r3, [r7, #7]
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0e5      	beq.n	8004322 <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <motor_InitTask+0x90>)
 8004358:	7b1b      	ldrb	r3, [r3, #12]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	2000      	movs	r0, #0
 8004360:	f000 f92e 	bl	80045c0 <motor_setTorque>

	return;
 8004364:	bf00      	nop
}
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000964 	.word	0x20000964
 8004370:	20000690 	.word	0x20000690

08004374 <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 8004378:	bf00      	nop
}
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	460a      	mov	r2, r1
 800438e:	71fb      	strb	r3, [r7, #7]
 8004390:	4613      	mov	r3, r2
 8004392:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 8109 	bne.w	80045ae <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 800439c:	79fa      	ldrb	r2, [r7, #7]
 800439e:	4987      	ldr	r1, [pc, #540]	; (80045bc <motor_setEnable+0x238>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3308      	adds	r3, #8
 80043ac:	79ba      	ldrb	r2, [r7, #6]
 80043ae:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 80043b0:	79fa      	ldrb	r2, [r7, #7]
 80043b2:	4982      	ldr	r1, [pc, #520]	; (80045bc <motor_setEnable+0x238>)
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	3308      	adds	r3, #8
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d178      	bne.n	80044ba <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80043c8:	79fa      	ldrb	r2, [r7, #7]
 80043ca:	497c      	ldr	r1, [pc, #496]	; (80045bc <motor_setEnable+0x238>)
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3304      	adds	r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d115      	bne.n	800440a <motor_setEnable+0x86>
 80043de:	79fa      	ldrb	r2, [r7, #7]
 80043e0:	4976      	ldr	r1, [pc, #472]	; (80045bc <motor_setEnable+0x238>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	330a      	adds	r3, #10
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	b298      	uxth	r0, r3
 80043f2:	79fa      	ldrb	r2, [r7, #7]
 80043f4:	4971      	ldr	r1, [pc, #452]	; (80045bc <motor_setEnable+0x238>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4602      	mov	r2, r0
 8004406:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 8004408:	e0d2      	b.n	80045b0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800440a:	79fa      	ldrb	r2, [r7, #7]
 800440c:	496b      	ldr	r1, [pc, #428]	; (80045bc <motor_setEnable+0x238>)
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3304      	adds	r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d115      	bne.n	800444c <motor_setEnable+0xc8>
 8004420:	79fa      	ldrb	r2, [r7, #7]
 8004422:	4966      	ldr	r1, [pc, #408]	; (80045bc <motor_setEnable+0x238>)
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	330a      	adds	r3, #10
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b298      	uxth	r0, r3
 8004434:	79fa      	ldrb	r2, [r7, #7]
 8004436:	4961      	ldr	r1, [pc, #388]	; (80045bc <motor_setEnable+0x238>)
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4603      	mov	r3, r0
 8004448:	6393      	str	r3, [r2, #56]	; 0x38
 800444a:	e0af      	b.n	80045ac <motor_setEnable+0x228>
 800444c:	79fa      	ldrb	r2, [r7, #7]
 800444e:	495b      	ldr	r1, [pc, #364]	; (80045bc <motor_setEnable+0x238>)
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	3304      	adds	r3, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d115      	bne.n	800448e <motor_setEnable+0x10a>
 8004462:	79fa      	ldrb	r2, [r7, #7]
 8004464:	4955      	ldr	r1, [pc, #340]	; (80045bc <motor_setEnable+0x238>)
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	330a      	adds	r3, #10
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b298      	uxth	r0, r3
 8004476:	79fa      	ldrb	r2, [r7, #7]
 8004478:	4950      	ldr	r1, [pc, #320]	; (80045bc <motor_setEnable+0x238>)
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4603      	mov	r3, r0
 800448a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800448c:	e08e      	b.n	80045ac <motor_setEnable+0x228>
 800448e:	79fa      	ldrb	r2, [r7, #7]
 8004490:	494a      	ldr	r1, [pc, #296]	; (80045bc <motor_setEnable+0x238>)
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	330a      	adds	r3, #10
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b298      	uxth	r0, r3
 80044a2:	79fa      	ldrb	r2, [r7, #7]
 80044a4:	4945      	ldr	r1, [pc, #276]	; (80045bc <motor_setEnable+0x238>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4603      	mov	r3, r0
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80044b8:	e07a      	b.n	80045b0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80044ba:	79fa      	ldrb	r2, [r7, #7]
 80044bc:	493f      	ldr	r1, [pc, #252]	; (80045bc <motor_setEnable+0x238>)
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3304      	adds	r3, #4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d115      	bne.n	80044fc <motor_setEnable+0x178>
 80044d0:	79fa      	ldrb	r2, [r7, #7]
 80044d2:	493a      	ldr	r1, [pc, #232]	; (80045bc <motor_setEnable+0x238>)
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	330e      	adds	r3, #14
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	b298      	uxth	r0, r3
 80044e4:	79fa      	ldrb	r2, [r7, #7]
 80044e6:	4935      	ldr	r1, [pc, #212]	; (80045bc <motor_setEnable+0x238>)
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4602      	mov	r2, r0
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80044fa:	e059      	b.n	80045b0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80044fc:	79fa      	ldrb	r2, [r7, #7]
 80044fe:	492f      	ldr	r1, [pc, #188]	; (80045bc <motor_setEnable+0x238>)
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3304      	adds	r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d115      	bne.n	800453e <motor_setEnable+0x1ba>
 8004512:	79fa      	ldrb	r2, [r7, #7]
 8004514:	4929      	ldr	r1, [pc, #164]	; (80045bc <motor_setEnable+0x238>)
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	330e      	adds	r3, #14
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b298      	uxth	r0, r3
 8004526:	79fa      	ldrb	r2, [r7, #7]
 8004528:	4924      	ldr	r1, [pc, #144]	; (80045bc <motor_setEnable+0x238>)
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4603      	mov	r3, r0
 800453a:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800453c:	e038      	b.n	80045b0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 800453e:	79fa      	ldrb	r2, [r7, #7]
 8004540:	491e      	ldr	r1, [pc, #120]	; (80045bc <motor_setEnable+0x238>)
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3304      	adds	r3, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d115      	bne.n	8004580 <motor_setEnable+0x1fc>
 8004554:	79fa      	ldrb	r2, [r7, #7]
 8004556:	4919      	ldr	r1, [pc, #100]	; (80045bc <motor_setEnable+0x238>)
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	330e      	adds	r3, #14
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b298      	uxth	r0, r3
 8004568:	79fa      	ldrb	r2, [r7, #7]
 800456a:	4914      	ldr	r1, [pc, #80]	; (80045bc <motor_setEnable+0x238>)
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4603      	mov	r3, r0
 800457c:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800457e:	e017      	b.n	80045b0 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8004580:	79fa      	ldrb	r2, [r7, #7]
 8004582:	490e      	ldr	r1, [pc, #56]	; (80045bc <motor_setEnable+0x238>)
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	330e      	adds	r3, #14
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b298      	uxth	r0, r3
 8004594:	79fa      	ldrb	r2, [r7, #7]
 8004596:	4909      	ldr	r1, [pc, #36]	; (80045bc <motor_setEnable+0x238>)
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4603      	mov	r3, r0
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 80045aa:	e001      	b.n	80045b0 <motor_setEnable+0x22c>
 80045ac:	e000      	b.n	80045b0 <motor_setEnable+0x22c>
		return;
 80045ae:	bf00      	nop
}
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000964 	.word	0x20000964

080045c0 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	4603      	mov	r3, r0
 80045c8:	460a      	mov	r2, r1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 80d9 	bne.w	800478a <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 80045d8:	79fa      	ldrb	r2, [r7, #7]
 80045da:	496f      	ldr	r1, [pc, #444]	; (8004798 <motor_setTorque+0x1d8>)
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	330c      	adds	r3, #12
 80045e8:	79ba      	ldrb	r2, [r7, #6]
 80045ea:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 80045ec:	79bb      	ldrb	r3, [r7, #6]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d114      	bne.n	800461c <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 80045f2:	79f9      	ldrb	r1, [r7, #7]
 80045f4:	79fa      	ldrb	r2, [r7, #7]
 80045f6:	4868      	ldr	r0, [pc, #416]	; (8004798 <motor_setTorque+0x1d8>)
 80045f8:	460b      	mov	r3, r1
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	330e      	adds	r3, #14
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b298      	uxth	r0, r3
 8004608:	4963      	ldr	r1, [pc, #396]	; (8004798 <motor_setTorque+0x1d8>)
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	330a      	adds	r3, #10
 8004616:	4602      	mov	r2, r0
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	e031      	b.n	8004680 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	495e      	ldr	r1, [pc, #376]	; (8004798 <motor_setTorque+0x1d8>)
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	330c      	adds	r3, #12
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 8004632:	79fa      	ldrb	r2, [r7, #7]
 8004634:	4958      	ldr	r1, [pc, #352]	; (8004798 <motor_setTorque+0x1d8>)
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	3310      	adds	r3, #16
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8004646:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 8004648:	79fa      	ldrb	r2, [r7, #7]
 800464a:	4953      	ldr	r1, [pc, #332]	; (8004798 <motor_setTorque+0x1d8>)
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3312      	adds	r3, #18
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4623      	mov	r3, r4
 8004660:	2264      	movs	r2, #100	; 0x64
 8004662:	2101      	movs	r1, #1
 8004664:	f000 f89a 	bl	800479c <motor_map>
 8004668:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 800466a:	79fa      	ldrb	r2, [r7, #7]
 800466c:	b298      	uxth	r0, r3
 800466e:	494a      	ldr	r1, [pc, #296]	; (8004798 <motor_setTorque+0x1d8>)
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	330a      	adds	r3, #10
 800467c:	4602      	mov	r2, r0
 800467e:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8004680:	79fa      	ldrb	r2, [r7, #7]
 8004682:	4945      	ldr	r1, [pc, #276]	; (8004798 <motor_setTorque+0x1d8>)
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3308      	adds	r3, #8
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d17a      	bne.n	800478e <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8004698:	79fa      	ldrb	r2, [r7, #7]
 800469a:	493f      	ldr	r1, [pc, #252]	; (8004798 <motor_setTorque+0x1d8>)
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3304      	adds	r3, #4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d115      	bne.n	80046da <motor_setTorque+0x11a>
 80046ae:	79fa      	ldrb	r2, [r7, #7]
 80046b0:	4939      	ldr	r1, [pc, #228]	; (8004798 <motor_setTorque+0x1d8>)
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	330a      	adds	r3, #10
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b298      	uxth	r0, r3
 80046c2:	79fa      	ldrb	r2, [r7, #7]
 80046c4:	4934      	ldr	r1, [pc, #208]	; (8004798 <motor_setTorque+0x1d8>)
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4602      	mov	r2, r0
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 80046d8:	e059      	b.n	800478e <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80046da:	79fa      	ldrb	r2, [r7, #7]
 80046dc:	492e      	ldr	r1, [pc, #184]	; (8004798 <motor_setTorque+0x1d8>)
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3304      	adds	r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d115      	bne.n	800471c <motor_setTorque+0x15c>
 80046f0:	79fa      	ldrb	r2, [r7, #7]
 80046f2:	4929      	ldr	r1, [pc, #164]	; (8004798 <motor_setTorque+0x1d8>)
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	330a      	adds	r3, #10
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b298      	uxth	r0, r3
 8004704:	79fa      	ldrb	r2, [r7, #7]
 8004706:	4924      	ldr	r1, [pc, #144]	; (8004798 <motor_setTorque+0x1d8>)
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4603      	mov	r3, r0
 8004718:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800471a:	e038      	b.n	800478e <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800471c:	79fa      	ldrb	r2, [r7, #7]
 800471e:	491e      	ldr	r1, [pc, #120]	; (8004798 <motor_setTorque+0x1d8>)
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	3304      	adds	r3, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d115      	bne.n	800475e <motor_setTorque+0x19e>
 8004732:	79fa      	ldrb	r2, [r7, #7]
 8004734:	4918      	ldr	r1, [pc, #96]	; (8004798 <motor_setTorque+0x1d8>)
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	330a      	adds	r3, #10
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b298      	uxth	r0, r3
 8004746:	79fa      	ldrb	r2, [r7, #7]
 8004748:	4913      	ldr	r1, [pc, #76]	; (8004798 <motor_setTorque+0x1d8>)
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4603      	mov	r3, r0
 800475a:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800475c:	e017      	b.n	800478e <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800475e:	79fa      	ldrb	r2, [r7, #7]
 8004760:	490d      	ldr	r1, [pc, #52]	; (8004798 <motor_setTorque+0x1d8>)
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	330a      	adds	r3, #10
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b298      	uxth	r0, r3
 8004772:	79fa      	ldrb	r2, [r7, #7]
 8004774:	4908      	ldr	r1, [pc, #32]	; (8004798 <motor_setTorque+0x1d8>)
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4603      	mov	r3, r0
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8004788:	e001      	b.n	800478e <motor_setTorque+0x1ce>
		return;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <motor_setTorque+0x1d0>
	return;
 800478e:	bf00      	nop
}
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bd90      	pop	{r4, r7, pc}
 8004796:	bf00      	nop
 8004798:	20000964 	.word	0x20000964

0800479c <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	1a8a      	subs	r2, r1, r2
 80047b6:	fb03 f202 	mul.w	r2, r3, r2
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1acb      	subs	r3, r1, r3
 80047c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4413      	add	r3, r2
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d821      	bhi.n	800482c <cfg_NodeMotorVarProp+0x58>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <cfg_NodeMotorVarProp+0x1c>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004809 	.word	0x08004809
 80047f4:	0800480f 	.word	0x0800480f
 80047f8:	08004815 	.word	0x08004815
 80047fc:	0800481b 	.word	0x0800481b
 8004800:	08004821 	.word	0x08004821
 8004804:	08004827 	.word	0x08004827
	{
		case MOTOR_ENA:				str = "Enable"; break;
 8004808:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <cfg_NodeMotorVarProp+0xf0>)
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e010      	b.n	8004830 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <cfg_NodeMotorVarProp+0xf4>)
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e00d      	b.n	8004830 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <cfg_NodeMotorVarProp+0xf8>)
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e00a      	b.n	8004830 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 800481a:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <cfg_NodeMotorVarProp+0xfc>)
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e007      	b.n	8004830 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 8004820:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <cfg_NodeMotorVarProp+0x100>)
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e004      	b.n	8004830 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 8004826:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <cfg_NodeMotorVarProp+0x104>)
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e001      	b.n	8004830 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 800482c:	2302      	movs	r3, #2
 800482e:	e043      	b.n	80048b8 <cfg_NodeMotorVarProp+0xe4>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00f      	beq.n	8004856 <cfg_NodeMotorVarProp+0x82>
 8004836:	e007      	b.n	8004848 <cfg_NodeMotorVarProp+0x74>
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	1c53      	adds	r3, r2, #1
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f3      	bne.n	8004838 <cfg_NodeMotorVarProp+0x64>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d02b      	beq.n	80048b4 <cfg_NodeMotorVarProp+0xe0>
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d826      	bhi.n	80048b0 <cfg_NodeMotorVarProp+0xdc>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <cfg_NodeMotorVarProp+0x94>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
 8004870:	08004891 	.word	0x08004891
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2223      	movs	r2, #35	; 0x23
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	e016      	b.n	80048b6 <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	e012      	b.n	80048b6 <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2212      	movs	r2, #18
 8004894:	801a      	strh	r2, [r3, #0]
 8004896:	e00e      	b.n	80048b6 <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2222      	movs	r2, #34	; 0x22
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e00a      	b.n	80048b6 <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2222      	movs	r2, #34	; 0x22
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e006      	b.n	80048b6 <cfg_NodeMotorVarProp+0xe2>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2222      	movs	r2, #34	; 0x22
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e002      	b.n	80048b6 <cfg_NodeMotorVarProp+0xe2>
		default: return CFG_ERROR_VARID;
 80048b0:	2302      	movs	r3, #2
 80048b2:	e001      	b.n	80048b8 <cfg_NodeMotorVarProp+0xe4>
	}
	return CFG_ERROR_NONE;
 80048b4:	bf00      	nop
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	08010f9c 	.word	0x08010f9c
 80048c8:	08010fa4 	.word	0x08010fa4
 80048cc:	08010fb4 	.word	0x08010fb4
 80048d0:	08010fc0 	.word	0x08010fc0
 80048d4:	08010fcc 	.word	0x08010fcc
 80048d8:	08010fd4 	.word	0x08010fd4

080048dc <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03e      	beq.n	800496c <cfg_NodeMotorVarGet+0x90>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d839      	bhi.n	8004968 <cfg_NodeMotorVarGet+0x8c>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <cfg_NodeMotorVarGet+0x20>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004915 	.word	0x08004915
 8004900:	08004923 	.word	0x08004923
 8004904:	08004931 	.word	0x08004931
 8004908:	0800493f 	.word	0x0800493f
 800490c:	0800494d 	.word	0x0800494d
 8004910:	0800495b 	.word	0x0800495b
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <cfg_NodeMotorVarGet+0xa0>)
 8004916:	7a1b      	ldrb	r3, [r3, #8]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e025      	b.n	800496e <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 8004922:	4b16      	ldr	r3, [pc, #88]	; (800497c <cfg_NodeMotorVarGet+0xa0>)
 8004924:	7b1b      	ldrb	r3, [r3, #12]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e01e      	b.n	800496e <cfg_NodeMotorVarGet+0x92>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <cfg_NodeMotorVarGet+0xa0>)
 8004932:	895b      	ldrh	r3, [r3, #10]
 8004934:	b29b      	uxth	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e017      	b.n	800496e <cfg_NodeMotorVarGet+0x92>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <cfg_NodeMotorVarGet+0xa0>)
 8004940:	89db      	ldrh	r3, [r3, #14]
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e010      	b.n	800496e <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <cfg_NodeMotorVarGet+0xa0>)
 800494e:	8a1b      	ldrh	r3, [r3, #16]
 8004950:	b29b      	uxth	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e009      	b.n	800496e <cfg_NodeMotorVarGet+0x92>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <cfg_NodeMotorVarGet+0xa0>)
 800495c:	8a5b      	ldrh	r3, [r3, #18]
 800495e:	b29b      	uxth	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e002      	b.n	800496e <cfg_NodeMotorVarGet+0x92>
		default: return CFG_ERROR_VARID;
 8004968:	2302      	movs	r3, #2
 800496a:	e001      	b.n	8004970 <cfg_NodeMotorVarGet+0x94>
	}
	return CFG_ERROR_NONE;
 800496c:	bf00      	nop
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000964 	.word	0x20000964

08004980 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d036      	beq.n	8004a00 <cfg_NodeMotorVarSet+0x80>
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	2b05      	cmp	r3, #5
 8004996:	d831      	bhi.n	80049fc <cfg_NodeMotorVarSet+0x7c>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <cfg_NodeMotorVarSet+0x20>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049b9 	.word	0x080049b9
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	08004a05 	.word	0x08004a05
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	080049f1 	.word	0x080049f1
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	4619      	mov	r1, r3
 80049c0:	2000      	movs	r0, #0
 80049c2:	f7ff fcdf 	bl	8004384 <motor_setEnable>
 80049c6:	e01e      	b.n	8004a06 <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	4619      	mov	r1, r3
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7ff fdf5 	bl	80045c0 <motor_setTorque>
 80049d6:	e016      	b.n	8004a06 <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <cfg_NodeMotorVarSet+0x90>)
 80049e0:	81da      	strh	r2, [r3, #14]
 80049e2:	e010      	b.n	8004a06 <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <cfg_NodeMotorVarSet+0x90>)
 80049ec:	821a      	strh	r2, [r3, #16]
 80049ee:	e00a      	b.n	8004a06 <cfg_NodeMotorVarSet+0x86>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <cfg_NodeMotorVarSet+0x90>)
 80049f8:	825a      	strh	r2, [r3, #18]
 80049fa:	e004      	b.n	8004a06 <cfg_NodeMotorVarSet+0x86>
		default: return CFG_ERROR_VARID;
 80049fc:	2302      	movs	r3, #2
 80049fe:	e003      	b.n	8004a08 <cfg_NodeMotorVarSet+0x88>
	}
	return CFG_ERROR_NONE;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <cfg_NodeMotorVarSet+0x86>
		case MOTOR_CUR_PWM:			break;
 8004a04:	bf00      	nop
	return CFG_ERROR_NONE;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000964 	.word	0x20000964

08004a14 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
 8004a20:	e010      	b.n	8004a44 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <rc_Timer+0x44>)
 8004a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <rc_Timer+0x2a>
			rc_info.timer[i]--;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <rc_Timer+0x44>)
 8004a32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a36:	3a01      	subs	r2, #1
 8004a38:	4907      	ldr	r1, [pc, #28]	; (8004a58 <rc_Timer+0x44>)
 8004a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	3301      	adds	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d9eb      	bls.n	8004a22 <rc_Timer+0xe>
		}
	}

	return;
 8004a4a:	bf00      	nop
}
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000988 	.word	0x20000988

08004a5c <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8004a60:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a7a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a7e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004a96:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <rc_InitTask+0x4c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	721a      	strb	r2, [r3, #8]

	return;
 8004a9c:	bf00      	nop
}
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000988 	.word	0x20000988

08004aac <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 8004ab2:	4b53      	ldr	r3, [pc, #332]	; (8004c00 <rc_Task+0x154>)
 8004ab4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d047      	beq.n	8004b4c <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 8004abc:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <rc_Task+0x154>)
 8004abe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ac2:	4a4f      	ldr	r2, [pc, #316]	; (8004c00 <rc_Task+0x154>)
 8004ac4:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 8004ac6:	4b4e      	ldr	r3, [pc, #312]	; (8004c00 <rc_Task+0x154>)
 8004ac8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <rc_Task+0x2e>
			rc_info.connected = 1;
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <rc_Task+0x154>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 8004ada:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <rc_Task+0x154>)
 8004adc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	b25a      	sxtb	r2, r3
 8004ae4:	4b46      	ldr	r3, [pc, #280]	; (8004c00 <rc_Task+0x154>)
 8004ae6:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 8004aea:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <rc_Task+0x154>)
 8004aec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	b25a      	sxtb	r2, r3
 8004af4:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <rc_Task+0x154>)
 8004af6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 8004afa:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <rc_Task+0x154>)
 8004afc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	b25a      	sxtb	r2, r3
 8004b04:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <rc_Task+0x154>)
 8004b06:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 8004b0a:	4b3d      	ldr	r3, [pc, #244]	; (8004c00 <rc_Task+0x154>)
 8004b0c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	b25a      	sxtb	r2, r3
 8004b14:	4b3a      	ldr	r3, [pc, #232]	; (8004c00 <rc_Task+0x154>)
 8004b16:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8004b1a:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <rc_Task+0x154>)
 8004b1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <rc_Task+0x154>)
 8004b24:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8004b28:	4b35      	ldr	r3, [pc, #212]	; (8004c00 <rc_Task+0x154>)
 8004b2a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <rc_Task+0x154>)
 8004b32:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 8004b36:	4b32      	ldr	r3, [pc, #200]	; (8004c00 <rc_Task+0x154>)
 8004b38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <rc_Task+0x154>)
 8004b40:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <rc_Task+0x154>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <rc_Task+0x154>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <rc_Task+0xbc>
 8004b54:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <rc_Task+0x154>)
 8004b56:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d103      	bne.n	8004b68 <rc_Task+0xbc>
		rc_info.connected = 0;
 8004b60:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <rc_Task+0x154>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <rc_Task+0x154>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d142      	bne.n	8004bf6 <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 8004b70:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <rc_Task+0x154>)
 8004b72:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d13c      	bne.n	8004bf6 <rc_Task+0x14a>
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <rc_Task+0x154>)
 8004b7e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d136      	bne.n	8004bf6 <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 8004b88:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <rc_Task+0x154>)
 8004b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b8e:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 8004b90:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8004b94:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f904 	bl	8004da8 <rc_AddTxData>
		tmp_u8 = 5;
 8004ba0:	2305      	movs	r3, #5
 8004ba2:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8004ba4:	1dfb      	adds	r3, r7, #7
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f8fd 	bl	8004da8 <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <rc_Task+0x158>)
 8004bb0:	7d5b      	ldrb	r3, [r3, #21]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8004bb6:	1dfb      	adds	r3, r7, #7
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f8f4 	bl	8004da8 <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <rc_Task+0x15c>)
 8004bc2:	89db      	ldrh	r3, [r3, #14]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	2102      	movs	r1, #2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f8eb 	bl	8004da8 <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <rc_Task+0x160>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	4619      	mov	r1, r3
 8004bda:	480d      	ldr	r0, [pc, #52]	; (8004c10 <rc_Task+0x164>)
 8004bdc:	f7fe fa52 	bl	8003084 <crc16_calc>
 8004be0:	4603      	mov	r3, r0
 8004be2:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	2102      	movs	r1, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 f8dd 	bl	8004da8 <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <rc_Task+0x160>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
	}

	return;
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
}
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000988 	.word	0x20000988
 8004c04:	20000224 	.word	0x20000224
 8004c08:	20000288 	.word	0x20000288
 8004c0c:	20000b38 	.word	0x20000b38
 8004c10:	20000ab8 	.word	0x20000ab8

08004c14 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <rc_RcvData+0x148>)
 8004c20:	899b      	ldrh	r3, [r3, #12]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3301      	adds	r3, #1
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2c:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8004c2e:	4b4b      	ldr	r3, [pc, #300]	; (8004d5c <rc_RcvData+0x148>)
 8004c30:	4611      	mov	r1, r2
 8004c32:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8004c34:	4b49      	ldr	r3, [pc, #292]	; (8004d5c <rc_RcvData+0x148>)
 8004c36:	4413      	add	r3, r2
 8004c38:	79fa      	ldrb	r2, [r7, #7]
 8004c3a:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8004c3c:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <rc_RcvData+0x148>)
 8004c3e:	7a1b      	ldrb	r3, [r3, #8]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d12a      	bne.n	8004c9c <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8004c46:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <rc_RcvData+0x148>)
 8004c48:	899b      	ldrh	r3, [r3, #12]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4619      	mov	r1, r3
 8004c58:	4841      	ldr	r0, [pc, #260]	; (8004d60 <rc_RcvData+0x14c>)
 8004c5a:	f000 f885 	bl	8004d68 <rc_ringBufRead16b>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d173      	bne.n	8004d54 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <rc_RcvData+0x148>)
 8004c6e:	899b      	ldrh	r3, [r3, #12]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b02      	subs	r3, #2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <rc_RcvData+0x148>)
 8004c7e:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <rc_RcvData+0x150>)
 8004c86:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b02      	subs	r3, #2
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <rc_RcvData+0x148>)
 8004c92:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 8004c94:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <rc_RcvData+0x148>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 8004c9a:	e05b      	b.n	8004d54 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 8004c9c:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <rc_RcvData+0x148>)
 8004c9e:	7a1b      	ldrb	r3, [r3, #8]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d156      	bne.n	8004d54 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <rc_RcvData+0x150>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <rc_RcvData+0x150>)
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <rc_RcvData+0x150>)
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14c      	bne.n	8004d54 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8004cba:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <rc_RcvData+0x148>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004cc0:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <rc_RcvData+0x148>)
 8004cc2:	895b      	ldrh	r3, [r3, #10]
 8004cc4:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 8004cc6:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <rc_RcvData+0x148>)
 8004cc8:	89db      	ldrh	r3, [r3, #14]
 8004cca:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8004ccc:	3303      	adds	r3, #3
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	237f      	movs	r3, #127	; 0x7f
 8004cd2:	4823      	ldr	r0, [pc, #140]	; (8004d60 <rc_RcvData+0x14c>)
 8004cd4:	f7fe fa00 	bl	80030d8 <crc16_RingBuf>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8004cdc:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <rc_RcvData+0x148>)
 8004cde:	899b      	ldrh	r3, [r3, #12]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8004ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	481c      	ldr	r0, [pc, #112]	; (8004d60 <rc_RcvData+0x14c>)
 8004cf0:	f000 f83a 	bl	8004d68 <rc_ringBufRead16b>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	89bb      	ldrh	r3, [r7, #12]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d12a      	bne.n	8004d54 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8004cfe:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <rc_RcvData+0x148>)
 8004d00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d125      	bne.n	8004d54 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004d08:	2300      	movs	r3, #0
 8004d0a:	81fb      	strh	r3, [r7, #14]
 8004d0c:	e014      	b.n	8004d38 <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <rc_RcvData+0x148>)
 8004d10:	895b      	ldrh	r3, [r3, #10]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	1cda      	adds	r2, r3, #3
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8004d20:	490e      	ldr	r1, [pc, #56]	; (8004d5c <rc_RcvData+0x148>)
 8004d22:	440a      	add	r2, r1
 8004d24:	7c12      	ldrb	r2, [r2, #16]
 8004d26:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8004d28:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <rc_RcvData+0x148>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8004d32:	89fb      	ldrh	r3, [r7, #14]
 8004d34:	3301      	adds	r3, #1
 8004d36:	81fb      	strh	r3, [r7, #14]
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <rc_RcvData+0x148>)
 8004d3a:	89db      	ldrh	r3, [r3, #14]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	89fa      	ldrh	r2, [r7, #14]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d3e4      	bcc.n	8004d0e <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <rc_RcvData+0x148>)
 8004d46:	89db      	ldrh	r3, [r3, #14]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <rc_RcvData+0x148>)
 8004d4e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
}
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000988 	.word	0x20000988
 8004d60:	20000998 	.word	0x20000998
 8004d64:	20000b3c 	.word	0x20000b3c

08004d68 <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	3301      	adds	r3, #1
 8004d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8004d84:	89fb      	ldrh	r3, [r7, #14]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	440b      	add	r3, r1
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8004d98:	89fb      	ldrh	r3, [r7, #14]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <rc_AddTxData+0x40>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d80f      	bhi.n	8004de0 <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <rc_AddTxData+0x40>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <rc_AddTxData+0x44>)
 8004dc6:	4413      	add	r3, r2
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f00c f839 	bl	8010e44 <memcpy>
	_rc_tx_buf_len += len;
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <rc_AddTxData+0x40>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <rc_AddTxData+0x40>)
 8004ddc:	6013      	str	r3, [r2, #0]

	return;
 8004dde:	e000      	b.n	8004de2 <rc_AddTxData+0x3a>
		return;
 8004de0:	bf00      	nop
}
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000b38 	.word	0x20000b38
 8004dec:	20000ab8 	.word	0x20000ab8

08004df0 <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8004dfe:	89fb      	ldrh	r3, [r7, #14]
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	d835      	bhi.n	8004e70 <cfg_NodeRcVarProp+0x80>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <cfg_NodeRcVarProp+0x1c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	08004e47 	.word	0x08004e47
 8004e1c:	08004e4d 	.word	0x08004e4d
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e5f 	.word	0x08004e5f
 8004e2c:	08004e65 	.word	0x08004e65
 8004e30:	08004e6b 	.word	0x08004e6b
	{
		case RC_ENA:				str = "Enable"; break;
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <cfg_NodeRcVarProp+0x148>)
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e01c      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8004e3a:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <cfg_NodeRcVarProp+0x14c>)
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e019      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <cfg_NodeRcVarProp+0x150>)
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e016      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8004e46:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <cfg_NodeRcVarProp+0x154>)
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e013      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <cfg_NodeRcVarProp+0x158>)
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e010      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 8004e52:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <cfg_NodeRcVarProp+0x15c>)
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e00d      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8004e58:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <cfg_NodeRcVarProp+0x160>)
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e00a      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <cfg_NodeRcVarProp+0x164>)
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e007      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8004e64:	4b3c      	ldr	r3, [pc, #240]	; (8004f58 <cfg_NodeRcVarProp+0x168>)
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e004      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	; (8004f5c <cfg_NodeRcVarProp+0x16c>)
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e001      	b.n	8004e74 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 8004e70:	2302      	movs	r3, #2
 8004e72:	e05b      	b.n	8004f2c <cfg_NodeRcVarProp+0x13c>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <cfg_NodeRcVarProp+0xaa>
 8004e7a:	e007      	b.n	8004e8c <cfg_NodeRcVarProp+0x9c>
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	1c53      	adds	r3, r2, #1
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f3      	bne.n	8004e7c <cfg_NodeRcVarProp+0x8c>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d043      	beq.n	8004f28 <cfg_NodeRcVarProp+0x138>
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	2b09      	cmp	r3, #9
 8004ea4:	d83e      	bhi.n	8004f24 <cfg_NodeRcVarProp+0x134>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <cfg_NodeRcVarProp+0xbc>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	08004ef5 	.word	0x08004ef5
 8004ec0:	08004efd 	.word	0x08004efd
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f15 	.word	0x08004f15
 8004ed0:	08004f1d 	.word	0x08004f1d
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2223      	movs	r2, #35	; 0x23
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	e026      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2222      	movs	r2, #34	; 0x22
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	e022      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2223      	movs	r2, #35	; 0x23
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	e01e      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2212      	movs	r2, #18
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	e01a      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2211      	movs	r2, #17
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e016      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2211      	movs	r2, #17
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e012      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2211      	movs	r2, #17
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	e00e      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2211      	movs	r2, #17
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e00a      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2213      	movs	r2, #19
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	e006      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2213      	movs	r2, #19
 8004f20:	801a      	strh	r2, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <cfg_NodeRcVarProp+0x13a>
		default: return CFG_ERROR_VARID;
 8004f24:	2302      	movs	r3, #2
 8004f26:	e001      	b.n	8004f2c <cfg_NodeRcVarProp+0x13c>
	}
	return CFG_ERROR_NONE;
 8004f28:	bf00      	nop
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	08010fdc 	.word	0x08010fdc
 8004f3c:	08010fe4 	.word	0x08010fe4
 8004f40:	08010ffc 	.word	0x08010ffc
 8004f44:	0801100c 	.word	0x0801100c
 8004f48:	0801101c 	.word	0x0801101c
 8004f4c:	08011028 	.word	0x08011028
 8004f50:	08011034 	.word	0x08011034
 8004f54:	08011044 	.word	0x08011044
 8004f58:	08011054 	.word	0x08011054
 8004f5c:	08011060 	.word	0x08011060

08004f60 <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d06a      	beq.n	8005048 <cfg_NodeRcVarGet+0xe8>
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b09      	cmp	r3, #9
 8004f76:	d865      	bhi.n	8005044 <cfg_NodeRcVarGet+0xe4>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <cfg_NodeRcVarGet+0x20>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004fc9 	.word	0x08004fc9
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004ff5 	.word	0x08004ff5
 8004f98:	08005005 	.word	0x08005005
 8004f9c:	08005015 	.word	0x08005015
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	08005035 	.word	0x08005035
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8004faa:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e048      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 8004fb8:	4b27      	ldr	r3, [pc, #156]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8004fba:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e040      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 8004fc8:	4b23      	ldr	r3, [pc, #140]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8004fca:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e038      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8004fda:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e032      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8004fe6:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e02a      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 8004ff4:	4b18      	ldr	r3, [pc, #96]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8004ff6:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8004ffa:	b25b      	sxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e022      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 8005004:	4b14      	ldr	r3, [pc, #80]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8005006:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800500a:	b25b      	sxtb	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e01a      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 8005014:	4b10      	ldr	r3, [pc, #64]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8005016:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800501a:	b25b      	sxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e012      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8005026:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e00a      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <cfg_NodeRcVarGet+0xf8>)
 8005036:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800503a:	b2db      	uxtb	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e002      	b.n	800504a <cfg_NodeRcVarGet+0xea>
		default: return CFG_ERROR_VARID;
 8005044:	2302      	movs	r3, #2
 8005046:	e001      	b.n	800504c <cfg_NodeRcVarGet+0xec>
	}
	return CFG_ERROR_NONE;
 8005048:	bf00      	nop
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	20000988 	.word	0x20000988

0800505c <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d031      	beq.n	80050d2 <cfg_NodeRcVarSet+0x76>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b09      	cmp	r3, #9
 8005072:	d82c      	bhi.n	80050ce <cfg_NodeRcVarSet+0x72>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <cfg_NodeRcVarSet+0x20>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050c1 	.word	0x080050c1
 8005088:	080050d7 	.word	0x080050d7
 800508c:	080050d7 	.word	0x080050d7
 8005090:	080050d7 	.word	0x080050d7
 8005094:	080050d7 	.word	0x080050d7
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050d7 	.word	0x080050d7
 80050a0:	080050d7 	.word	0x080050d7
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <cfg_NodeRcVarSet+0x8c>)
 80050ac:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 80050b0:	e012      	b.n	80050d8 <cfg_NodeRcVarSet+0x7c>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <cfg_NodeRcVarSet+0x8c>)
 80050ba:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80050be:	e00b      	b.n	80050d8 <cfg_NodeRcVarSet+0x7c>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <cfg_NodeRcVarSet+0x8c>)
 80050c8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80050cc:	e004      	b.n	80050d8 <cfg_NodeRcVarSet+0x7c>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 80050ce:	2302      	movs	r3, #2
 80050d0:	e003      	b.n	80050da <cfg_NodeRcVarSet+0x7e>
	}
	return CFG_ERROR_NONE;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <cfg_NodeRcVarSet+0x7c>
		case RC_RX_PKT_CNT:			break;
 80050d6:	bf00      	nop
	return CFG_ERROR_NONE;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000988 	.word	0x20000988

080050ec <sens_Timer>:
void sens_SetAccelRange(uint8_t range);

volatile sens_infoTypeDef sens_info;

void sens_Timer(uint32_t res)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
#ifdef NO_SENS
	return;
#endif //NO_SENS

	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e010      	b.n	800511c <sens_Timer+0x30>
	{
		if( sens_info.timer[i] > 0 ){
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <sens_Timer+0x44>)
 80050fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <sens_Timer+0x2a>
			sens_info.timer[i]--;
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <sens_Timer+0x44>)
 800510a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800510e:	3a01      	subs	r2, #1
 8005110:	4907      	ldr	r1, [pc, #28]	; (8005130 <sens_Timer+0x44>)
 8005112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3301      	adds	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0eb      	beq.n	80050fa <sens_Timer+0xe>
		}
	}

	return;
 8005122:	bf00      	nop
}
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000b40 	.word	0x20000b40

08005134 <sens_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_InitTask()
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	//Init state
	sens_info.state = 0;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <sens_InitTask+0x14>)
 800513a:	2200      	movs	r2, #0
 800513c:	711a      	strb	r2, [r3, #4]

	return;
 800513e:	bf00      	nop
}
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	20000b40 	.word	0x20000b40

0800514c <sens_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_Task(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	uint16_t t_cal_step = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	80fb      	strh	r3, [r7, #6]

	//Reset
	if( sens_info.state == 0 )
 8005156:	4b43      	ldr	r3, [pc, #268]	; (8005264 <sens_Task+0x118>)
 8005158:	791b      	ldrb	r3, [r3, #4]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <sens_Task+0x2a>
	{
		sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 8005160:	2180      	movs	r1, #128	; 0x80
 8005162:	206b      	movs	r0, #107	; 0x6b
 8005164:	f000 fa58 	bl	8005618 <sens_WriteByte>
		sens_info.timer[SENS_TMR_PROC] = 100;
 8005168:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <sens_Task+0x118>)
 800516a:	2264      	movs	r2, #100	; 0x64
 800516c:	601a      	str	r2, [r3, #0]
		sens_info.state = 1;
 800516e:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <sens_Task+0x118>)
 8005170:	2201      	movs	r2, #1
 8005172:	711a      	strb	r2, [r3, #4]
			sens_info.timer[SENS_TMR_PROC] = 1;
			sens_UpdData();
		}
	}

	return;
 8005174:	e072      	b.n	800525c <sens_Task+0x110>
	else if( sens_info.state == 1 )
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <sens_Task+0x118>)
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d124      	bne.n	80051ca <sens_Task+0x7e>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <sens_Task+0x118>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d169      	bne.n	800525c <sens_Task+0x110>
			sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x00);
 8005188:	2100      	movs	r1, #0
 800518a:	206b      	movs	r0, #107	; 0x6b
 800518c:	f000 fa44 	bl	8005618 <sens_WriteByte>
			sens_SetGyroRange(GYRO_RANGE_250DPS);
 8005190:	2000      	movs	r0, #0
 8005192:	f000 f8c3 	bl	800531c <sens_SetGyroRange>
			sens_SetAccelRange(ACCEL_RANGE_2G);
 8005196:	2000      	movs	r0, #0
 8005198:	f000 f8d4 	bl	8005344 <sens_SetAccelRange>
			sens_WriteByte(SENS_REG_CONFIG, 0x00);
 800519c:	2100      	movs	r1, #0
 800519e:	201a      	movs	r0, #26
 80051a0:	f000 fa3a 	bl	8005618 <sens_WriteByte>
			t_cal_step = SENS_CAL_STEP_NUM;
 80051a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051a8:	80fb      	strh	r3, [r7, #6]
			sens_info.gyro_x_bias = 0.0;
 80051aa:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <sens_Task+0x118>)
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	615a      	str	r2, [r3, #20]
			sens_info.gyro_y_bias = 0.0;
 80051b2:	4b2c      	ldr	r3, [pc, #176]	; (8005264 <sens_Task+0x118>)
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	619a      	str	r2, [r3, #24]
			sens_info.gyro_z_bias = 0.0;
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <sens_Task+0x118>)
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
			sens_info.state = 2;
 80051c2:	4b28      	ldr	r3, [pc, #160]	; (8005264 <sens_Task+0x118>)
 80051c4:	2202      	movs	r2, #2
 80051c6:	711a      	strb	r2, [r3, #4]
	return;
 80051c8:	e048      	b.n	800525c <sens_Task+0x110>
	else if( sens_info.state == 2 )
 80051ca:	4b26      	ldr	r3, [pc, #152]	; (8005264 <sens_Task+0x118>)
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d134      	bne.n	800523e <sens_Task+0xf2>
		if( t_cal_step > 0 )
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <sens_Task+0xa8>
			if( sens_info.timer[SENS_TMR_PROC] == 0 )
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <sens_Task+0x118>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d13c      	bne.n	800525c <sens_Task+0x110>
				sens_CalibrateStep();
 80051e2:	f000 f843 	bl	800526c <sens_CalibrateStep>
				t_cal_step -= 1;
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	80fb      	strh	r3, [r7, #6]
				sens_info.timer[SENS_TMR_PROC] = 1;
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <sens_Task+0x118>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
	return;
 80051f2:	e033      	b.n	800525c <sens_Task+0x110>
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <sens_Task+0x118>)
 80051f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80051fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8005268 <sens_Task+0x11c>
 80051fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <sens_Task+0x118>)
 8005204:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <sens_Task+0x118>)
 800520a:	ed93 7a05 	vldr	s14, [r3, #20]
 800520e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005268 <sens_Task+0x11c>
 8005212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <sens_Task+0x118>)
 8005218:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.gyro_x_bias /= (float)SENS_CAL_STEP_NUM;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <sens_Task+0x118>)
 800521e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005222:	eddf 6a11 	vldr	s13, [pc, #68]	; 8005268 <sens_Task+0x11c>
 8005226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800522a:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <sens_Task+0x118>)
 800522c:	edc3 7a05 	vstr	s15, [r3, #20]
			sens_info.timer[SENS_TMR_PROC] = 1;
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <sens_Task+0x118>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
			sens_info.state = 3;
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <sens_Task+0x118>)
 8005238:	2203      	movs	r2, #3
 800523a:	711a      	strb	r2, [r3, #4]
	return;
 800523c:	e00e      	b.n	800525c <sens_Task+0x110>
	else if( sens_info.state == 3 )
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <sens_Task+0x118>)
 8005240:	791b      	ldrb	r3, [r3, #4]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b03      	cmp	r3, #3
 8005246:	d109      	bne.n	800525c <sens_Task+0x110>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <sens_Task+0x118>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <sens_Task+0x110>
			sens_info.timer[SENS_TMR_PROC] = 1;
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <sens_Task+0x118>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
			sens_UpdData();
 8005256:	f000 f88b 	bl	8005370 <sens_UpdData>
	return;
 800525a:	bf00      	nop
 800525c:	bf00      	nop
}
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000b40 	.word	0x20000b40
 8005268:	447a0000 	.word	0x447a0000

0800526c <sens_CalibrateStep>:

//
void sens_CalibrateStep()
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af04      	add	r7, sp, #16
    uint8_t buffer[6];
    int16_t gyroX, gyroY, gyroZ;

	HAL_I2C_Mem_Read(&hi2c1, SENS_I2C_ADDR, SENS_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
 8005272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	2306      	movs	r3, #6
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2301      	movs	r3, #1
 8005282:	2243      	movs	r2, #67	; 0x43
 8005284:	21d0      	movs	r1, #208	; 0xd0
 8005286:	4823      	ldr	r0, [pc, #140]	; (8005314 <sens_CalibrateStep+0xa8>)
 8005288:	f002 ff84 	bl	8008194 <HAL_I2C_Mem_Read>
	gyroX = (int16_t)(buffer[0] << 8 | buffer[1]);
 800528c:	793b      	ldrb	r3, [r7, #4]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	b21a      	sxth	r2, r3
 8005292:	797b      	ldrb	r3, [r7, #5]
 8005294:	b21b      	sxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	81fb      	strh	r3, [r7, #14]
	gyroY = (int16_t)(buffer[2] << 8 | buffer[3]);
 800529a:	79bb      	ldrb	r3, [r7, #6]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	b21a      	sxth	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	b21b      	sxth	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	81bb      	strh	r3, [r7, #12]
	gyroZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 80052a8:	7a3b      	ldrb	r3, [r7, #8]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	b21a      	sxth	r2, r3
 80052ae:	7a7b      	ldrb	r3, [r7, #9]
 80052b0:	b21b      	sxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	817b      	strh	r3, [r7, #10]

	sens_info.gyro_x_bias += gyroX;
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <sens_CalibrateStep+0xac>)
 80052b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80052bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <sens_CalibrateStep+0xac>)
 80052ce:	edc3 7a05 	vstr	s15, [r3, #20]
	sens_info.gyro_y_bias += gyroY;
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <sens_CalibrateStep+0xac>)
 80052d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80052d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <sens_CalibrateStep+0xac>)
 80052ea:	edc3 7a06 	vstr	s15, [r3, #24]
	sens_info.gyro_z_bias += gyroZ;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <sens_CalibrateStep+0xac>)
 80052f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80052f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <sens_CalibrateStep+0xac>)
 8005306:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	2000063c 	.word	0x2000063c
 8005318:	20000b40 	.word	0x20000b40

0800531c <sens_SetGyroRange>:

//
void sens_SetGyroRange(uint8_t range)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
	sens_info.gyro_range = range;
 8005326:	4a06      	ldr	r2, [pc, #24]	; (8005340 <sens_SetGyroRange+0x24>)
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	7153      	strb	r3, [r2, #5]
	sens_WriteByte(SENS_REG_GYRO_CONFIG, range);
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	4619      	mov	r1, r3
 8005330:	201b      	movs	r0, #27
 8005332:	f000 f971 	bl	8005618 <sens_WriteByte>

    return;
 8005336:	bf00      	nop
}
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000b40 	.word	0x20000b40

08005344 <sens_SetAccelRange>:

//
void sens_SetAccelRange(uint8_t range)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
	sens_info.accel_range = range;
 800534e:	4a06      	ldr	r2, [pc, #24]	; (8005368 <sens_SetAccelRange+0x24>)
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	f882 3020 	strb.w	r3, [r2, #32]
	sens_WriteByte(SENS_REG_ACCEL_CONFIG, range);
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	4619      	mov	r1, r3
 800535a:	201c      	movs	r0, #28
 800535c:	f000 f95c 	bl	8005618 <sens_WriteByte>

    return;
 8005360:	bf00      	nop
}
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000b40 	.word	0x20000b40
 800536c:	00000000 	.word	0x00000000

08005370 <sens_UpdData>:

//
HAL_StatusTypeDef sens_UpdData()
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
    uint8_t buf[14];
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_ACCEL_XOUT_H, buf, 14);
 8005376:	463b      	mov	r3, r7
 8005378:	220e      	movs	r2, #14
 800537a:	4619      	mov	r1, r3
 800537c:	203b      	movs	r0, #59	; 0x3b
 800537e:	f000 f967 	bl	8005650 <sens_Read>
 8005382:	4603      	mov	r3, r0
 8005384:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <sens_UpdData+0x20>
        return status;
 800538c:	7ffb      	ldrb	r3, [r7, #31]
 800538e:	e12e      	b.n	80055ee <sens_UpdData+0x27e>
    }

    int16_t raw_accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 8005390:	783b      	ldrb	r3, [r7, #0]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	b21a      	sxth	r2, r3
 8005396:	787b      	ldrb	r3, [r7, #1]
 8005398:	b21b      	sxth	r3, r3
 800539a:	4313      	orrs	r3, r2
 800539c:	83bb      	strh	r3, [r7, #28]
    int16_t raw_accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 800539e:	78bb      	ldrb	r3, [r7, #2]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	b21b      	sxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	837b      	strh	r3, [r7, #26]
    int16_t raw_accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 80053ac:	793b      	ldrb	r3, [r7, #4]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	b21a      	sxth	r2, r3
 80053b2:	797b      	ldrb	r3, [r7, #5]
 80053b4:	b21b      	sxth	r3, r3
 80053b6:	4313      	orrs	r3, r2
 80053b8:	833b      	strh	r3, [r7, #24]
    int16_t raw_temp = (int16_t)(buf[6] << 8 | buf[7]);
 80053ba:	79bb      	ldrb	r3, [r7, #6]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b21a      	sxth	r2, r3
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_x = (int16_t)(buf[8] << 8 | buf[9]);
 80053c8:	7a3b      	ldrb	r3, [r7, #8]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	b21a      	sxth	r2, r3
 80053ce:	7a7b      	ldrb	r3, [r7, #9]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	82bb      	strh	r3, [r7, #20]
    int16_t raw_gyro_y = (int16_t)(buf[10] << 8 | buf[11]);
 80053d6:	7abb      	ldrb	r3, [r7, #10]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	b21a      	sxth	r2, r3
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	b21b      	sxth	r3, r3
 80053e0:	4313      	orrs	r3, r2
 80053e2:	827b      	strh	r3, [r7, #18]
    int16_t raw_gyro_z = (int16_t)(buf[12] << 8 | buf[13]);
 80053e4:	7b3b      	ldrb	r3, [r7, #12]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	7b7b      	ldrb	r3, [r7, #13]
 80053ec:	b21b      	sxth	r3, r3
 80053ee:	4313      	orrs	r3, r2
 80053f0:	823b      	strh	r3, [r7, #16]

    float gyro_sens;
    float accel_sens;

    switch (sens_info.gyro_range) {
 80053f2:	4b83      	ldr	r3, [pc, #524]	; (8005600 <sens_UpdData+0x290>)
 80053f4:	795b      	ldrb	r3, [r3, #5]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b18      	cmp	r3, #24
 80053fa:	d841      	bhi.n	8005480 <sens_UpdData+0x110>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <sens_UpdData+0x94>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005469 	.word	0x08005469
 8005408:	08005481 	.word	0x08005481
 800540c:	08005481 	.word	0x08005481
 8005410:	08005481 	.word	0x08005481
 8005414:	08005481 	.word	0x08005481
 8005418:	08005481 	.word	0x08005481
 800541c:	08005481 	.word	0x08005481
 8005420:	08005481 	.word	0x08005481
 8005424:	0800546f 	.word	0x0800546f
 8005428:	08005481 	.word	0x08005481
 800542c:	08005481 	.word	0x08005481
 8005430:	08005481 	.word	0x08005481
 8005434:	08005481 	.word	0x08005481
 8005438:	08005481 	.word	0x08005481
 800543c:	08005481 	.word	0x08005481
 8005440:	08005481 	.word	0x08005481
 8005444:	08005475 	.word	0x08005475
 8005448:	08005481 	.word	0x08005481
 800544c:	08005481 	.word	0x08005481
 8005450:	08005481 	.word	0x08005481
 8005454:	08005481 	.word	0x08005481
 8005458:	08005481 	.word	0x08005481
 800545c:	08005481 	.word	0x08005481
 8005460:	08005481 	.word	0x08005481
 8005464:	0800547b 	.word	0x0800547b
        case GYRO_RANGE_250DPS:
            gyro_sens = GYRO_SENS_250DPS;
 8005468:	4b66      	ldr	r3, [pc, #408]	; (8005604 <sens_UpdData+0x294>)
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800546c:	e008      	b.n	8005480 <sens_UpdData+0x110>
        case GYRO_RANGE_500DPS:
            gyro_sens = GYRO_SENS_500DPS;
 800546e:	4b66      	ldr	r3, [pc, #408]	; (8005608 <sens_UpdData+0x298>)
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005472:	e005      	b.n	8005480 <sens_UpdData+0x110>
        case GYRO_RANGE_1000DPS:
            gyro_sens = GYRO_SENS_1000DPS;
 8005474:	4b65      	ldr	r3, [pc, #404]	; (800560c <sens_UpdData+0x29c>)
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005478:	e002      	b.n	8005480 <sens_UpdData+0x110>
        case GYRO_RANGE_2000DPS:
            gyro_sens = GYRO_SENS_2000DPS;
 800547a:	4b65      	ldr	r3, [pc, #404]	; (8005610 <sens_UpdData+0x2a0>)
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800547e:	bf00      	nop
    }
    switch (sens_info.accel_range) {
 8005480:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <sens_UpdData+0x290>)
 8005482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b18      	cmp	r3, #24
 800548a:	d845      	bhi.n	8005518 <sens_UpdData+0x1a8>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <sens_UpdData+0x124>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054f9 	.word	0x080054f9
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005519 	.word	0x08005519
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005501 	.word	0x08005501
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005519 	.word	0x08005519
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005519 	.word	0x08005519
 80054ec:	08005519 	.word	0x08005519
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005511 	.word	0x08005511
        case ACCEL_RANGE_2G:
            accel_sens = ACCEL_SENS_2G;
 80054f8:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80054fc:	623b      	str	r3, [r7, #32]
            break;
 80054fe:	e00b      	b.n	8005518 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_4G:
            accel_sens = ACCEL_SENS_4G;
 8005500:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8005504:	623b      	str	r3, [r7, #32]
            break;
 8005506:	e007      	b.n	8005518 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_8G:
            accel_sens = ACCEL_SENS_8G;
 8005508:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800550c:	623b      	str	r3, [r7, #32]
            break;
 800550e:	e003      	b.n	8005518 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_16G:
            accel_sens = ACCEL_SENS_16G;
 8005510:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005514:	623b      	str	r3, [r7, #32]
            break;
 8005516:	bf00      	nop
    }

    sens_info.accel_x = raw_accel_x / accel_sens; // g
 8005518:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005524:	ed97 7a08 	vldr	s14, [r7, #32]
 8005528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <sens_UpdData+0x290>)
 800552e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    sens_info.accel_y = raw_accel_y / accel_sens; // g
 8005532:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800553e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <sens_UpdData+0x290>)
 8005548:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    sens_info.accel_z = raw_accel_z / accel_sens; // g
 800554c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005558:	ed97 7a08 	vldr	s14, [r7, #32]
 800555c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005560:	4b27      	ldr	r3, [pc, #156]	; (8005600 <sens_UpdData+0x290>)
 8005562:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    sens_info.gyro_x = raw_gyro_x / gyro_sens; // °/s
 8005566:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005572:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557a:	4b21      	ldr	r3, [pc, #132]	; (8005600 <sens_UpdData+0x290>)
 800557c:	edc3 7a02 	vstr	s15, [r3, #8]
    sens_info.gyro_y = raw_gyro_y / gyro_sens; // °/s
 8005580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800558c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <sens_UpdData+0x290>)
 8005596:	edc3 7a03 	vstr	s15, [r3, #12]
    sens_info.gyro_z = raw_gyro_z / gyro_sens; // °/s
 800559a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80055aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <sens_UpdData+0x290>)
 80055b0:	edc3 7a04 	vstr	s15, [r3, #16]
    sens_info.temperature = (raw_temp / 340.0) + 36.53; // °C
 80055b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fa ff67 	bl	800048c <__aeabi_i2d>
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <sens_UpdData+0x2a4>)
 80055c4:	f7fb f8f6 	bl	80007b4 <__aeabi_ddiv>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	a309      	add	r3, pc, #36	; (adr r3, 80055f8 <sens_UpdData+0x288>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fa fe0d 	bl	80001f4 <__adddf3>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4610      	mov	r0, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7fb f9cf 	bl	8000984 <__aeabi_d2f>
 80055e6:	4603      	mov	r3, r0
 80055e8:	4a05      	ldr	r2, [pc, #20]	; (8005600 <sens_UpdData+0x290>)
 80055ea:	6313      	str	r3, [r2, #48]	; 0x30

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3728      	adds	r7, #40	; 0x28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	0a3d70a4 	.word	0x0a3d70a4
 80055fc:	404243d7 	.word	0x404243d7
 8005600:	20000b40 	.word	0x20000b40
 8005604:	43030000 	.word	0x43030000
 8005608:	42830000 	.word	0x42830000
 800560c:	42033333 	.word	0x42033333
 8005610:	41833333 	.word	0x41833333
 8005614:	40754000 	.word	0x40754000

08005618 <sens_WriteByte>:

void sens_WriteByte(uint8_t reg, uint8_t data)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af04      	add	r7, sp, #16
 800561e:	4603      	mov	r3, r0
 8005620:	460a      	mov	r2, r1
 8005622:	71fb      	strb	r3, [r7, #7]
 8005624:	4613      	mov	r3, r2
 8005626:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	b29a      	uxth	r2, r3
 800562c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005630:	9302      	str	r3, [sp, #8]
 8005632:	2301      	movs	r3, #1
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	1dbb      	adds	r3, r7, #6
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	2301      	movs	r3, #1
 800563c:	21d0      	movs	r1, #208	; 0xd0
 800563e:	4803      	ldr	r0, [pc, #12]	; (800564c <sens_WriteByte+0x34>)
 8005640:	f002 fcae 	bl	8007fa0 <HAL_I2C_Mem_Write>

    return;
 8005644:	bf00      	nop
}
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	2000063c 	.word	0x2000063c

08005650 <sens_Read>:

HAL_StatusTypeDef sens_Read(uint8_t reg, uint8_t* data, uint16_t size)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af04      	add	r7, sp, #16
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	71fb      	strb	r3, [r7, #7]
 800565c:	4613      	mov	r3, r2
 800565e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	b29a      	uxth	r2, r3
 8005664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	88bb      	ldrh	r3, [r7, #4]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2301      	movs	r3, #1
 8005674:	21d0      	movs	r1, #208	; 0xd0
 8005676:	4807      	ldr	r0, [pc, #28]	; (8005694 <sens_Read+0x44>)
 8005678:	f002 fd8c 	bl	8008194 <HAL_I2C_Mem_Read>
 800567c:	4603      	mov	r3, r0
 800567e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <sens_Read+0x3a>
		return status;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	e000      	b.n	800568c <sens_Read+0x3c>
	}

    return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	2000063c 	.word	0x2000063c

08005698 <cfg_NodeSensVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeSensVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	d844      	bhi.n	8005736 <cfg_NodeSensVarProp+0x9e>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <cfg_NodeSensVarProp+0x1c>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	080056ef 	.word	0x080056ef
 80056bc:	080056f5 	.word	0x080056f5
 80056c0:	080056fb 	.word	0x080056fb
 80056c4:	08005701 	.word	0x08005701
 80056c8:	08005707 	.word	0x08005707
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	08005713 	.word	0x08005713
 80056d4:	08005719 	.word	0x08005719
 80056d8:	0800571f 	.word	0x0800571f
 80056dc:	08005725 	.word	0x08005725
 80056e0:	0800572b 	.word	0x0800572b
 80056e4:	08005731 	.word	0x08005731
	{
		case SENS_STATE:		str = "State"; break;
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <cfg_NodeSensVarProp+0x18c>)
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e025      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_X:		str = "Gyro X"; break;
 80056ee:	4b4e      	ldr	r3, [pc, #312]	; (8005828 <cfg_NodeSensVarProp+0x190>)
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e022      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Y:		str = "Gyro Y"; break;
 80056f4:	4b4d      	ldr	r3, [pc, #308]	; (800582c <cfg_NodeSensVarProp+0x194>)
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e01f      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Z:		str = "Gyro Z"; break;
 80056fa:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <cfg_NodeSensVarProp+0x198>)
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e01c      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_X:		str = "Accel X"; break;
 8005700:	4b4c      	ldr	r3, [pc, #304]	; (8005834 <cfg_NodeSensVarProp+0x19c>)
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e019      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Y:		str = "Accel Y"; break;
 8005706:	4b4c      	ldr	r3, [pc, #304]	; (8005838 <cfg_NodeSensVarProp+0x1a0>)
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e016      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Z:		str = "Accel Z"; break;
 800570c:	4b4b      	ldr	r3, [pc, #300]	; (800583c <cfg_NodeSensVarProp+0x1a4>)
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e013      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_TEMPERATURE:	str = "Temperature"; break;
 8005712:	4b4b      	ldr	r3, [pc, #300]	; (8005840 <cfg_NodeSensVarProp+0x1a8>)
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e010      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_SAT_NUM:		str = "GNSS sat number"; break;
 8005718:	4b4a      	ldr	r3, [pc, #296]	; (8005844 <cfg_NodeSensVarProp+0x1ac>)
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e00d      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_LATITUDE:		str = "GNSS latitude"; break;
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <cfg_NodeSensVarProp+0x1b0>)
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e00a      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_LONGITUDE:	str = "GNSS longitude"; break;
 8005724:	4b49      	ldr	r3, [pc, #292]	; (800584c <cfg_NodeSensVarProp+0x1b4>)
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e007      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_ALTTITUDE:	str = "GNSS altitude"; break;
 800572a:	4b49      	ldr	r3, [pc, #292]	; (8005850 <cfg_NodeSensVarProp+0x1b8>)
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e004      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		case SENS_SPEED:		str = "GNSS speed"; break;
 8005730:	4b48      	ldr	r3, [pc, #288]	; (8005854 <cfg_NodeSensVarProp+0x1bc>)
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e001      	b.n	800573a <cfg_NodeSensVarProp+0xa2>
		default: return CFG_ERROR_VARID;
 8005736:	2302      	movs	r3, #2
 8005738:	e06e      	b.n	8005818 <cfg_NodeSensVarProp+0x180>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <cfg_NodeSensVarProp+0xc8>
 8005740:	e007      	b.n	8005752 <cfg_NodeSensVarProp+0xba>
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	1c53      	adds	r3, r2, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f3      	bne.n	8005742 <cfg_NodeSensVarProp+0xaa>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d056      	beq.n	8005814 <cfg_NodeSensVarProp+0x17c>
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	d851      	bhi.n	8005810 <cfg_NodeSensVarProp+0x178>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <cfg_NodeSensVarProp+0xdc>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080057b1 	.word	0x080057b1
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057c1 	.word	0x080057c1
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057d9 	.word	0x080057d9
 8005790:	080057e1 	.word	0x080057e1
 8005794:	080057e9 	.word	0x080057e9
 8005798:	080057f1 	.word	0x080057f1
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	08005801 	.word	0x08005801
 80057a4:	08005809 	.word	0x08005809
	{
		case SENS_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e032      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_GYRO_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2214      	movs	r2, #20
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e02e      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_GYRO_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2214      	movs	r2, #20
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e02a      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_GYRO_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2214      	movs	r2, #20
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e026      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_ACCEL_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2214      	movs	r2, #20
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e022      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_ACCEL_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2214      	movs	r2, #20
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	e01e      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_ACCEL_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2214      	movs	r2, #20
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e01a      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_TEMPERATURE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2214      	movs	r2, #20
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e016      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_SAT_NUM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2212      	movs	r2, #18
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e012      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_LATITUDE:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2211      	movs	r2, #17
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	e00e      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_LONGITUDE:	*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2211      	movs	r2, #17
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	e00a      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_ALTTITUDE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2214      	movs	r2, #20
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e006      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		case SENS_SPEED:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2211      	movs	r2, #17
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e002      	b.n	8005816 <cfg_NodeSensVarProp+0x17e>
		default: return CFG_ERROR_VARID;
 8005810:	2302      	movs	r3, #2
 8005812:	e001      	b.n	8005818 <cfg_NodeSensVarProp+0x180>
	}
	return CFG_ERROR_NONE;
 8005814:	bf00      	nop
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	08011070 	.word	0x08011070
 8005828:	08011078 	.word	0x08011078
 800582c:	08011080 	.word	0x08011080
 8005830:	08011088 	.word	0x08011088
 8005834:	08011090 	.word	0x08011090
 8005838:	08011098 	.word	0x08011098
 800583c:	080110a0 	.word	0x080110a0
 8005840:	080110a8 	.word	0x080110a8
 8005844:	080110b4 	.word	0x080110b4
 8005848:	080110c4 	.word	0x080110c4
 800584c:	080110d4 	.word	0x080110d4
 8005850:	080110e4 	.word	0x080110e4
 8005854:	080110f4 	.word	0x080110f4

08005858 <cfg_NodeSensVarGet>:

uint16_t cfg_NodeSensVarGet(uint16_t varid, void *value)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	6039      	str	r1, [r7, #0]
 8005862:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d068      	beq.n	800593c <cfg_NodeSensVarGet+0xe4>
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d863      	bhi.n	8005938 <cfg_NodeSensVarGet+0xe0>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <cfg_NodeSensVarGet+0x20>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058bb 	.word	0x080058bb
 8005880:	080058c5 	.word	0x080058c5
 8005884:	080058cf 	.word	0x080058cf
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058e3 	.word	0x080058e3
 8005890:	080058ed 	.word	0x080058ed
 8005894:	080058f7 	.word	0x080058f7
 8005898:	08005901 	.word	0x08005901
 800589c:	08005911 	.word	0x08005911
 80058a0:	0800591b 	.word	0x0800591b
 80058a4:	08005925 	.word	0x08005925
 80058a8:	0800592f 	.word	0x0800592f
	{
		case SENS_STATE:		*(uint32_t*)value = sens_info.state; break;
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058ae:	791b      	ldrb	r3, [r3, #4]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e041      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_GYRO_X:		*(float*)value = sens_info.gyro_x; break;
 80058ba:	4b24      	ldr	r3, [pc, #144]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e03c      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_GYRO_Y:		*(float*)value = sens_info.gyro_y; break;
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e037      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_GYRO_Z:		*(float*)value = sens_info.gyro_z; break;
 80058ce:	4b1f      	ldr	r3, [pc, #124]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e032      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_ACCEL_X:		*(float*)value = sens_info.accel_x; break;
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e02d      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_ACCEL_Y:		*(float*)value = sens_info.accel_y; break;
 80058e2:	4b1a      	ldr	r3, [pc, #104]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e028      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_ACCEL_Z:		*(float*)value = sens_info.accel_z; break;
 80058ec:	4b17      	ldr	r3, [pc, #92]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e023      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_TEMPERATURE:	*(float*)value = sens_info.temperature; break;
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 80058f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e01e      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_SAT_NUM:		*(int32_t*)value = sens_info.sat_num; break;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005906:	b2db      	uxtb	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e016      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_LATITUDE:		*(int32_t*)value = sens_info.latitude; break;
 8005910:	4b0e      	ldr	r3, [pc, #56]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e011      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_LONGITUDE:	*(int32_t*)value = sens_info.longitude; break;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 800591c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e00c      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_ALTTITUDE:	*(float*)value = sens_info.altitude; break;
 8005924:	4b09      	ldr	r3, [pc, #36]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e007      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		case SENS_SPEED:		*(int32_t*)value = sens_info.speed; break;
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <cfg_NodeSensVarGet+0xf4>)
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e002      	b.n	800593e <cfg_NodeSensVarGet+0xe6>
		default: return CFG_ERROR_VARID;
 8005938:	2302      	movs	r3, #2
 800593a:	e001      	b.n	8005940 <cfg_NodeSensVarGet+0xe8>
	}
	return CFG_ERROR_NONE;
 800593c:	bf00      	nop
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000b40 	.word	0x20000b40

08005950 <cfg_NodeSensVarSet>:

uint16_t cfg_NodeSensVarSet(uint16_t varid, void *value)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <cfg_NodeSensVarSet+0x28>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <cfg_NodeSensVarSet+0x24>
	{
		case SENS_STATE:		sens_info.state = (uint8_t)*(uint32_t*)value; break;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <cfg_NodeSensVarSet+0x38>)
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	e002      	b.n	800597a <cfg_NodeSensVarSet+0x2a>
		default: return CFG_ERROR_VARID;
 8005974:	2302      	movs	r3, #2
 8005976:	e001      	b.n	800597c <cfg_NodeSensVarSet+0x2c>
	}
	return CFG_ERROR_NONE;
 8005978:	bf00      	nop
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000b40 	.word	0x20000b40

0800598c <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e014      	b.n	80059c4 <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <servo_Timer+0x4c>)
 800599e:	330c      	adds	r3, #12
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <servo_Timer+0x32>
			servo_info.timer[i]--;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	490b      	ldr	r1, [pc, #44]	; (80059d8 <servo_Timer+0x4c>)
 80059ac:	f103 020c 	add.w	r2, r3, #12
 80059b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059b4:	3a01      	subs	r2, #1
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <servo_Timer+0x4c>)
 80059b8:	330c      	adds	r3, #12
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3301      	adds	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0e7      	beq.n	800599a <servo_Timer+0xe>
		}
	}

	return;
 80059ca:	bf00      	nop
}
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000b94 	.word	0x20000b94

080059dc <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 80059e2:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <servo_InitTask+0xfc>)
 80059e4:	4a3d      	ldr	r2, [pc, #244]	; (8005adc <servo_InitTask+0x100>)
 80059e6:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 80059e8:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <servo_InitTask+0xfc>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 80059ee:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <servo_InitTask+0xfc>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 80059f4:	4b38      	ldr	r3, [pc, #224]	; (8005ad8 <servo_InitTask+0xfc>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 80059fa:	4b37      	ldr	r3, [pc, #220]	; (8005ad8 <servo_InitTask+0xfc>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 80;
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a02:	2250      	movs	r2, #80	; 0x50
 8005a04:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 100;
 8005a06:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a08:	2264      	movs	r2, #100	; 0x64
 8005a0a:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 125;
 8005a0c:	4b32      	ldr	r3, [pc, #200]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a0e:	227d      	movs	r2, #125	; 0x7d
 8005a10:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 8005a12:	4b31      	ldr	r3, [pc, #196]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 8005a18:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a1a:	4a30      	ldr	r2, [pc, #192]	; (8005adc <servo_InitTask+0x100>)
 8005a1c:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a20:	2204      	movs	r2, #4
 8005a22:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 8005a24:	4b2c      	ldr	r3, [pc, #176]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 8005a2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 8005a30:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 45;
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a3a:	222d      	movs	r2, #45	; 0x2d
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 8005a3e:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a40:	225a      	movs	r2, #90	; 0x5a
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 125;
 8005a44:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a46:	227d      	movs	r2, #125	; 0x7d
 8005a48:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 8005a4a:	4b23      	ldr	r3, [pc, #140]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8005a52:	2300      	movs	r3, #0
 8005a54:	71fb      	strb	r3, [r7, #7]
 8005a56:	e02a      	b.n	8005aae <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 8005a58:	79fa      	ldrb	r2, [r7, #7]
 8005a5a:	491f      	ldr	r1, [pc, #124]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	330a      	adds	r3, #10
 8005a68:	2200      	movs	r2, #0
 8005a6a:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 8005a6c:	79fa      	ldrb	r2, [r7, #7]
 8005a6e:	491a      	ldr	r1, [pc, #104]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	4915      	ldr	r1, [pc, #84]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	440b      	add	r3, r1
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	4911      	ldr	r1, [pc, #68]	; (8005ad8 <servo_InitTask+0xfc>)
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f005 f90a 	bl	800acbc <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	71fb      	strb	r3, [r7, #7]
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d9d1      	bls.n	8005a58 <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <servo_InitTask+0xfc>)
 8005ab6:	8a5b      	ldrh	r3, [r3, #18]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4619      	mov	r1, r3
 8005abc:	2000      	movs	r0, #0
 8005abe:	f000 f82b 	bl	8005b18 <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <servo_InitTask+0xfc>)
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2001      	movs	r0, #1
 8005acc:	f000 f824 	bl	8005b18 <servo_setAng>

	return;
 8005ad0:	bf00      	nop
}
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20000b94 	.word	0x20000b94
 8005adc:	20000690 	.word	0x20000690

08005ae0 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 8005ae4:	bf00      	nop
}
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	461a      	mov	r2, r3
 8005afc:	0052      	lsls	r2, r2, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	33f5      	adds	r3, #245	; 0xf5
 8005b06:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 8005b08:	89fb      	ldrh	r3, [r7, #14]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460a      	mov	r2, r1
 8005b22:	71fb      	strb	r3, [r7, #7]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	f200 809f 	bhi.w	8005c6e <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 8005b30:	79fa      	ldrb	r2, [r7, #7]
 8005b32:	4952      	ldr	r1, [pc, #328]	; (8005c7c <servo_setAng+0x164>)
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	330c      	adds	r3, #12
 8005b40:	88ba      	ldrh	r2, [r7, #4]
 8005b42:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 8005b44:	79fc      	ldrb	r4, [r7, #7]
 8005b46:	88bb      	ldrh	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff ffd0 	bl	8005aee <servo_angToPWM>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4619      	mov	r1, r3
 8005b52:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <servo_setAng+0x164>)
 8005b54:	4623      	mov	r3, r4
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4423      	add	r3, r4
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	330a      	adds	r3, #10
 8005b60:	460a      	mov	r2, r1
 8005b62:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 8005b64:	79fa      	ldrb	r2, [r7, #7]
 8005b66:	4945      	ldr	r1, [pc, #276]	; (8005c7c <servo_setAng+0x164>)
 8005b68:	4613      	mov	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	440b      	add	r3, r1
 8005b72:	3308      	adds	r3, #8
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d17a      	bne.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005b7c:	79fa      	ldrb	r2, [r7, #7]
 8005b7e:	493f      	ldr	r1, [pc, #252]	; (8005c7c <servo_setAng+0x164>)
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d115      	bne.n	8005bbe <servo_setAng+0xa6>
 8005b92:	79fa      	ldrb	r2, [r7, #7]
 8005b94:	4939      	ldr	r1, [pc, #228]	; (8005c7c <servo_setAng+0x164>)
 8005b96:	4613      	mov	r3, r2
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	330a      	adds	r3, #10
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b298      	uxth	r0, r3
 8005ba6:	79fa      	ldrb	r2, [r7, #7]
 8005ba8:	4934      	ldr	r1, [pc, #208]	; (8005c7c <servo_setAng+0x164>)
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	440b      	add	r3, r1
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4602      	mov	r2, r0
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8005bbc:	e059      	b.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	492e      	ldr	r1, [pc, #184]	; (8005c7c <servo_setAng+0x164>)
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	440b      	add	r3, r1
 8005bcc:	3304      	adds	r3, #4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d115      	bne.n	8005c00 <servo_setAng+0xe8>
 8005bd4:	79fa      	ldrb	r2, [r7, #7]
 8005bd6:	4929      	ldr	r1, [pc, #164]	; (8005c7c <servo_setAng+0x164>)
 8005bd8:	4613      	mov	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	440b      	add	r3, r1
 8005be2:	330a      	adds	r3, #10
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b298      	uxth	r0, r3
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	4924      	ldr	r1, [pc, #144]	; (8005c7c <servo_setAng+0x164>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	440b      	add	r3, r1
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005bfe:	e038      	b.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005c00:	79fa      	ldrb	r2, [r7, #7]
 8005c02:	491e      	ldr	r1, [pc, #120]	; (8005c7c <servo_setAng+0x164>)
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	440b      	add	r3, r1
 8005c0e:	3304      	adds	r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d115      	bne.n	8005c42 <servo_setAng+0x12a>
 8005c16:	79fa      	ldrb	r2, [r7, #7]
 8005c18:	4918      	ldr	r1, [pc, #96]	; (8005c7c <servo_setAng+0x164>)
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	330a      	adds	r3, #10
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b298      	uxth	r0, r3
 8005c2a:	79fa      	ldrb	r2, [r7, #7]
 8005c2c:	4913      	ldr	r1, [pc, #76]	; (8005c7c <servo_setAng+0x164>)
 8005c2e:	4613      	mov	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005c40:	e017      	b.n	8005c72 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005c42:	79fa      	ldrb	r2, [r7, #7]
 8005c44:	490d      	ldr	r1, [pc, #52]	; (8005c7c <servo_setAng+0x164>)
 8005c46:	4613      	mov	r3, r2
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	4413      	add	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	440b      	add	r3, r1
 8005c50:	330a      	adds	r3, #10
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b298      	uxth	r0, r3
 8005c56:	79fa      	ldrb	r2, [r7, #7]
 8005c58:	4908      	ldr	r1, [pc, #32]	; (8005c7c <servo_setAng+0x164>)
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	4413      	add	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	440b      	add	r3, r1
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005c6c:	e001      	b.n	8005c72 <servo_setAng+0x15a>
		return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <servo_setAng+0x15c>
	return;
 8005c72:	bf00      	nop
}
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd90      	pop	{r4, r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000b94 	.word	0x20000b94

08005c80 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	4603      	mov	r3, r0
 8005c88:	460a      	mov	r2, r1
 8005c8a:	71fb      	strb	r3, [r7, #7]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d854      	bhi.n	8005d40 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 8005c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c9a:	2b64      	cmp	r3, #100	; 0x64
 8005c9c:	dc52      	bgt.n	8005d44 <servo_setPercnet+0xc4>
 8005c9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ca2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8005ca6:	db4d      	blt.n	8005d44 <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 8005ca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	db1f      	blt.n	8005cf0 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005cb0:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8005cb4:	79fa      	ldrb	r2, [r7, #7]
 8005cb6:	4925      	ldr	r1, [pc, #148]	; (8005d4c <servo_setPercnet+0xcc>)
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3312      	adds	r3, #18
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005cc8:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 8005cca:	79fa      	ldrb	r2, [r7, #7]
 8005ccc:	491f      	ldr	r1, [pc, #124]	; (8005d4c <servo_setPercnet+0xcc>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3314      	adds	r3, #20
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	2264      	movs	r2, #100	; 0x64
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f000 f929 	bl	8005f3c <servo_map>
 8005cea:	4603      	mov	r3, r0
 8005cec:	81fb      	strh	r3, [r7, #14]
 8005cee:	e020      	b.n	8005d32 <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005cf0:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 8005cf4:	79fa      	ldrb	r2, [r7, #7]
 8005cf6:	4915      	ldr	r1, [pc, #84]	; (8005d4c <servo_setPercnet+0xcc>)
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	440b      	add	r3, r1
 8005d02:	3312      	adds	r3, #18
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005d08:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 8005d0a:	79fa      	ldrb	r2, [r7, #7]
 8005d0c:	490f      	ldr	r1, [pc, #60]	; (8005d4c <servo_setPercnet+0xcc>)
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	440b      	add	r3, r1
 8005d18:	3310      	adds	r3, #16
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4623      	mov	r3, r4
 8005d22:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005d26:	f04f 31ff 	mov.w	r1, #4294967295
 8005d2a:	f000 f907 	bl	8005f3c <servo_map>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 8005d32:	89fa      	ldrh	r2, [r7, #14]
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff feed 	bl	8005b18 <servo_setAng>

	return;
 8005d3e:	e002      	b.n	8005d46 <servo_setPercnet+0xc6>
		return;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <servo_setPercnet+0xc6>
		return;
 8005d44:	bf00      	nop
}
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd90      	pop	{r4, r7, pc}
 8005d4c:	20000b94 	.word	0x20000b94

08005d50 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	460a      	mov	r2, r1
 8005d5a:	71fb      	strb	r3, [r7, #7]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	f200 80e1 	bhi.w	8005f2a <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 8005d68:	79fa      	ldrb	r2, [r7, #7]
 8005d6a:	4973      	ldr	r1, [pc, #460]	; (8005f38 <servo_setEnable+0x1e8>)
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	440b      	add	r3, r1
 8005d76:	3308      	adds	r3, #8
 8005d78:	79ba      	ldrb	r2, [r7, #6]
 8005d7a:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 8005d7c:	79fa      	ldrb	r2, [r7, #7]
 8005d7e:	496e      	ldr	r1, [pc, #440]	; (8005f38 <servo_setEnable+0x1e8>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	440b      	add	r3, r1
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d178      	bne.n	8005e86 <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005d94:	79fa      	ldrb	r2, [r7, #7]
 8005d96:	4968      	ldr	r1, [pc, #416]	; (8005f38 <servo_setEnable+0x1e8>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	440b      	add	r3, r1
 8005da2:	3304      	adds	r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d115      	bne.n	8005dd6 <servo_setEnable+0x86>
 8005daa:	79fa      	ldrb	r2, [r7, #7]
 8005dac:	4962      	ldr	r1, [pc, #392]	; (8005f38 <servo_setEnable+0x1e8>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4413      	add	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	440b      	add	r3, r1
 8005db8:	330a      	adds	r3, #10
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b298      	uxth	r0, r3
 8005dbe:	79fa      	ldrb	r2, [r7, #7]
 8005dc0:	495d      	ldr	r1, [pc, #372]	; (8005f38 <servo_setEnable+0x1e8>)
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 8005dd4:	e0aa      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 8005dd6:	79fa      	ldrb	r2, [r7, #7]
 8005dd8:	4957      	ldr	r1, [pc, #348]	; (8005f38 <servo_setEnable+0x1e8>)
 8005dda:	4613      	mov	r3, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	4413      	add	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	440b      	add	r3, r1
 8005de4:	3304      	adds	r3, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d115      	bne.n	8005e18 <servo_setEnable+0xc8>
 8005dec:	79fa      	ldrb	r2, [r7, #7]
 8005dee:	4952      	ldr	r1, [pc, #328]	; (8005f38 <servo_setEnable+0x1e8>)
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	440b      	add	r3, r1
 8005dfa:	330a      	adds	r3, #10
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b298      	uxth	r0, r3
 8005e00:	79fa      	ldrb	r2, [r7, #7]
 8005e02:	494d      	ldr	r1, [pc, #308]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4603      	mov	r3, r0
 8005e14:	6393      	str	r3, [r2, #56]	; 0x38
 8005e16:	e087      	b.n	8005f28 <servo_setEnable+0x1d8>
 8005e18:	79fa      	ldrb	r2, [r7, #7]
 8005e1a:	4947      	ldr	r1, [pc, #284]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	440b      	add	r3, r1
 8005e26:	3304      	adds	r3, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d115      	bne.n	8005e5a <servo_setEnable+0x10a>
 8005e2e:	79fa      	ldrb	r2, [r7, #7]
 8005e30:	4941      	ldr	r1, [pc, #260]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	330a      	adds	r3, #10
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b298      	uxth	r0, r3
 8005e42:	79fa      	ldrb	r2, [r7, #7]
 8005e44:	493c      	ldr	r1, [pc, #240]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	440b      	add	r3, r1
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4603      	mov	r3, r0
 8005e56:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005e58:	e066      	b.n	8005f28 <servo_setEnable+0x1d8>
 8005e5a:	79fa      	ldrb	r2, [r7, #7]
 8005e5c:	4936      	ldr	r1, [pc, #216]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	330a      	adds	r3, #10
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b298      	uxth	r0, r3
 8005e6e:	79fa      	ldrb	r2, [r7, #7]
 8005e70:	4931      	ldr	r1, [pc, #196]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	440b      	add	r3, r1
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4603      	mov	r3, r0
 8005e82:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005e84:	e052      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005e86:	79fa      	ldrb	r2, [r7, #7]
 8005e88:	492b      	ldr	r1, [pc, #172]	; (8005f38 <servo_setEnable+0x1e8>)
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	4413      	add	r3, r2
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	440b      	add	r3, r1
 8005e94:	3304      	adds	r3, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <servo_setEnable+0x164>
 8005e9c:	79fa      	ldrb	r2, [r7, #7]
 8005e9e:	4926      	ldr	r1, [pc, #152]	; (8005f38 <servo_setEnable+0x1e8>)
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	440b      	add	r3, r1
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 8005eb2:	e03b      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005eb4:	79fa      	ldrb	r2, [r7, #7]
 8005eb6:	4920      	ldr	r1, [pc, #128]	; (8005f38 <servo_setEnable+0x1e8>)
 8005eb8:	4613      	mov	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	4413      	add	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d10b      	bne.n	8005ee2 <servo_setEnable+0x192>
 8005eca:	79fa      	ldrb	r2, [r7, #7]
 8005ecc:	491a      	ldr	r1, [pc, #104]	; (8005f38 <servo_setEnable+0x1e8>)
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	440b      	add	r3, r1
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	2300      	movs	r3, #0
 8005ede:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8005ee0:	e024      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005ee2:	79fa      	ldrb	r2, [r7, #7]
 8005ee4:	4914      	ldr	r1, [pc, #80]	; (8005f38 <servo_setEnable+0x1e8>)
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	440b      	add	r3, r1
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d10b      	bne.n	8005f10 <servo_setEnable+0x1c0>
 8005ef8:	79fa      	ldrb	r2, [r7, #7]
 8005efa:	490f      	ldr	r1, [pc, #60]	; (8005f38 <servo_setEnable+0x1e8>)
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	440b      	add	r3, r1
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8005f0e:	e00d      	b.n	8005f2c <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 8005f10:	79fa      	ldrb	r2, [r7, #7]
 8005f12:	4909      	ldr	r1, [pc, #36]	; (8005f38 <servo_setEnable+0x1e8>)
 8005f14:	4613      	mov	r3, r2
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4413      	add	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	440b      	add	r3, r1
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 8005f26:	e001      	b.n	8005f2c <servo_setEnable+0x1dc>
 8005f28:	e000      	b.n	8005f2c <servo_setEnable+0x1dc>
		return;
 8005f2a:	bf00      	nop
}
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000b94 	.word	0x20000b94

08005f3c <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	1a8a      	subs	r2, r1, r2
 8005f56:	fb03 f202 	mul.w	r2, r3, r2
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	1acb      	subs	r3, r1, r3
 8005f60:	fb92 f2f3 	sdiv	r2, r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4413      	add	r3, r2
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8005f82:	89fb      	ldrh	r3, [r7, #14]
 8005f84:	2b0d      	cmp	r3, #13
 8005f86:	d849      	bhi.n	800601c <cfg_NodeServoVarProp+0xa8>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <cfg_NodeServoVarProp+0x1c>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fc9 	.word	0x08005fc9
 8005f94:	08005fcf 	.word	0x08005fcf
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe7 	.word	0x08005fe7
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005ff3 	.word	0x08005ff3
 8005fb0:	08005ff9 	.word	0x08005ff9
 8005fb4:	08005fff 	.word	0x08005fff
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	0800600b 	.word	0x0800600b
 8005fc0:	08006011 	.word	0x08006011
 8005fc4:	08006017 	.word	0x08006017
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 8005fc8:	4b52      	ldr	r3, [pc, #328]	; (8006114 <cfg_NodeServoVarProp+0x1a0>)
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e028      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 8005fce:	4b52      	ldr	r3, [pc, #328]	; (8006118 <cfg_NodeServoVarProp+0x1a4>)
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	e025      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 8005fd4:	4b51      	ldr	r3, [pc, #324]	; (800611c <cfg_NodeServoVarProp+0x1a8>)
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e022      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 8005fda:	4b51      	ldr	r3, [pc, #324]	; (8006120 <cfg_NodeServoVarProp+0x1ac>)
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e01f      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 8005fe0:	4b50      	ldr	r3, [pc, #320]	; (8006124 <cfg_NodeServoVarProp+0x1b0>)
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e01c      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 8005fe6:	4b50      	ldr	r3, [pc, #320]	; (8006128 <cfg_NodeServoVarProp+0x1b4>)
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e019      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 8005fec:	4b4f      	ldr	r3, [pc, #316]	; (800612c <cfg_NodeServoVarProp+0x1b8>)
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e016      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 8005ff2:	4b4f      	ldr	r3, [pc, #316]	; (8006130 <cfg_NodeServoVarProp+0x1bc>)
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e013      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <cfg_NodeServoVarProp+0x1c0>)
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e010      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 8005ffe:	4b4e      	ldr	r3, [pc, #312]	; (8006138 <cfg_NodeServoVarProp+0x1c4>)
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e00d      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 8006004:	4b4d      	ldr	r3, [pc, #308]	; (800613c <cfg_NodeServoVarProp+0x1c8>)
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e00a      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 800600a:	4b4d      	ldr	r3, [pc, #308]	; (8006140 <cfg_NodeServoVarProp+0x1cc>)
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e007      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <cfg_NodeServoVarProp+0x1d0>)
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e004      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 8006016:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <cfg_NodeServoVarProp+0x1d4>)
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e001      	b.n	8006020 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 800601c:	2302      	movs	r3, #2
 800601e:	e073      	b.n	8006108 <cfg_NodeServoVarProp+0x194>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00f      	beq.n	8006046 <cfg_NodeServoVarProp+0xd2>
 8006026:	e007      	b.n	8006038 <cfg_NodeServoVarProp+0xc4>
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	1c53      	adds	r3, r2, #1
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f3      	bne.n	8006028 <cfg_NodeServoVarProp+0xb4>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05b      	beq.n	8006104 <cfg_NodeServoVarProp+0x190>
 800604c:	89fb      	ldrh	r3, [r7, #14]
 800604e:	2b0d      	cmp	r3, #13
 8006050:	d856      	bhi.n	8006100 <cfg_NodeServoVarProp+0x18c>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <cfg_NodeServoVarProp+0xe4>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006091 	.word	0x08006091
 800605c:	08006099 	.word	0x08006099
 8006060:	080060a1 	.word	0x080060a1
 8006064:	080060a9 	.word	0x080060a9
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c9 	.word	0x080060c9
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060d9 	.word	0x080060d9
 8006080:	080060e1 	.word	0x080060e1
 8006084:	080060e9 	.word	0x080060e9
 8006088:	080060f1 	.word	0x080060f1
 800608c:	080060f9 	.word	0x080060f9
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2223      	movs	r2, #35	; 0x23
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e036      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	e032      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2212      	movs	r2, #18
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e02e      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e02a      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2222      	movs	r2, #34	; 0x22
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e026      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2222      	movs	r2, #34	; 0x22
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	e022      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2222      	movs	r2, #34	; 0x22
 80060c4:	801a      	strh	r2, [r3, #0]
 80060c6:	e01e      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2223      	movs	r2, #35	; 0x23
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e01a      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	e016      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2212      	movs	r2, #18
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	e012      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e00e      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2222      	movs	r2, #34	; 0x22
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e00a      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2222      	movs	r2, #34	; 0x22
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e006      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2222      	movs	r2, #34	; 0x22
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e002      	b.n	8006106 <cfg_NodeServoVarProp+0x192>
		default: return CFG_ERROR_VARID;
 8006100:	2302      	movs	r3, #2
 8006102:	e001      	b.n	8006108 <cfg_NodeServoVarProp+0x194>
	}
	return CFG_ERROR_NONE;
 8006104:	bf00      	nop
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	08011100 	.word	0x08011100
 8006118:	0801110c 	.word	0x0801110c
 800611c:	08011120 	.word	0x08011120
 8006120:	08011134 	.word	0x08011134
 8006124:	08011148 	.word	0x08011148
 8006128:	08011158 	.word	0x08011158
 800612c:	0801116c 	.word	0x0801116c
 8006130:	0801117c 	.word	0x0801117c
 8006134:	0801118c 	.word	0x0801118c
 8006138:	080111a0 	.word	0x080111a0
 800613c:	080111b4 	.word	0x080111b4
 8006140:	080111c8 	.word	0x080111c8
 8006144:	080111d8 	.word	0x080111d8
 8006148:	080111ec 	.word	0x080111ec

0800614c <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 808a 	beq.w	8006274 <cfg_NodeServoVarGet+0x128>
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	2b0d      	cmp	r3, #13
 8006164:	f200 8084 	bhi.w	8006270 <cfg_NodeServoVarGet+0x124>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <cfg_NodeServoVarGet+0x24>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	080061a9 	.word	0x080061a9
 8006174:	080061b7 	.word	0x080061b7
 8006178:	080061c5 	.word	0x080061c5
 800617c:	080061d3 	.word	0x080061d3
 8006180:	080061e1 	.word	0x080061e1
 8006184:	080061ef 	.word	0x080061ef
 8006188:	080061fd 	.word	0x080061fd
 800618c:	0800620b 	.word	0x0800620b
 8006190:	0800621b 	.word	0x0800621b
 8006194:	08006229 	.word	0x08006229
 8006198:	08006237 	.word	0x08006237
 800619c:	08006247 	.word	0x08006247
 80061a0:	08006255 	.word	0x08006255
 80061a4:	08006263 	.word	0x08006263
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 80061a8:	4b36      	ldr	r3, [pc, #216]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061aa:	7a1b      	ldrb	r3, [r3, #8]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e05f      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 80061b6:	4b33      	ldr	r3, [pc, #204]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061b8:	899b      	ldrh	r3, [r3, #12]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	e058      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 80061c4:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061c6:	895b      	ldrh	r3, [r3, #10]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e051      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061d4:	7b9b      	ldrb	r3, [r3, #14]
 80061d6:	b25b      	sxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e04a      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061e2:	8a1b      	ldrh	r3, [r3, #16]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e043      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 80061ee:	4b25      	ldr	r3, [pc, #148]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061f0:	8a5b      	ldrh	r3, [r3, #18]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e03c      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 80061fc:	4b21      	ldr	r3, [pc, #132]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 80061fe:	8a9b      	ldrh	r3, [r3, #20]
 8006200:	b29b      	uxth	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e035      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 800620a:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 800620c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e02d      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 800621c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e026      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 800622a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e01f      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006238:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800623c:	b25b      	sxtb	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e017      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e010      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e009      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <cfg_NodeServoVarGet+0x138>)
 8006264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e002      	b.n	8006276 <cfg_NodeServoVarGet+0x12a>
		default: return CFG_ERROR_VARID;
 8006270:	2302      	movs	r3, #2
 8006272:	e001      	b.n	8006278 <cfg_NodeServoVarGet+0x12c>
	}
	return CFG_ERROR_NONE;
 8006274:	bf00      	nop
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20000b94 	.word	0x20000b94

08006288 <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	6039      	str	r1, [r7, #0]
 8006292:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d078      	beq.n	800638c <cfg_NodeServoVarSet+0x104>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b0d      	cmp	r3, #13
 800629e:	d873      	bhi.n	8006388 <cfg_NodeServoVarSet+0x100>
 80062a0:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <cfg_NodeServoVarSet+0x20>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062e1 	.word	0x080062e1
 80062ac:	080062f1 	.word	0x080062f1
 80062b0:	08006391 	.word	0x08006391
 80062b4:	08006301 	.word	0x08006301
 80062b8:	08006311 	.word	0x08006311
 80062bc:	0800631d 	.word	0x0800631d
 80062c0:	08006329 	.word	0x08006329
 80062c4:	08006335 	.word	0x08006335
 80062c8:	08006345 	.word	0x08006345
 80062cc:	08006391 	.word	0x08006391
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006365 	.word	0x08006365
 80062d8:	08006371 	.word	0x08006371
 80062dc:	0800637d 	.word	0x0800637d
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	4619      	mov	r1, r3
 80062e8:	2000      	movs	r0, #0
 80062ea:	f7ff fd31 	bl	8005d50 <servo_setEnable>
 80062ee:	e050      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4619      	mov	r1, r3
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7ff fc0d 	bl	8005b18 <servo_setAng>
 80062fe:	e048      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b25b      	sxtb	r3, r3
 8006306:	4619      	mov	r1, r3
 8006308:	2000      	movs	r0, #0
 800630a:	f7ff fcb9 	bl	8005c80 <servo_setPercnet>
 800630e:	e040      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	b29a      	uxth	r2, r3
 8006316:	4b21      	ldr	r3, [pc, #132]	; (800639c <cfg_NodeServoVarSet+0x114>)
 8006318:	821a      	strh	r2, [r3, #16]
 800631a:	e03a      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	b29a      	uxth	r2, r3
 8006322:	4b1e      	ldr	r3, [pc, #120]	; (800639c <cfg_NodeServoVarSet+0x114>)
 8006324:	825a      	strh	r2, [r3, #18]
 8006326:	e034      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	4b1b      	ldr	r3, [pc, #108]	; (800639c <cfg_NodeServoVarSet+0x114>)
 8006330:	829a      	strh	r2, [r3, #20]
 8006332:	e02e      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	2001      	movs	r0, #1
 800633e:	f7ff fd07 	bl	8005d50 <servo_setEnable>
 8006342:	e026      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	4619      	mov	r1, r3
 800634c:	2001      	movs	r0, #1
 800634e:	f7ff fbe3 	bl	8005b18 <servo_setAng>
 8006352:	e01e      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	4619      	mov	r1, r3
 800635c:	2001      	movs	r0, #1
 800635e:	f7ff fc8f 	bl	8005c80 <servo_setPercnet>
 8006362:	e016      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b29a      	uxth	r2, r3
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <cfg_NodeServoVarSet+0x114>)
 800636c:	851a      	strh	r2, [r3, #40]	; 0x28
 800636e:	e010      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	b29a      	uxth	r2, r3
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <cfg_NodeServoVarSet+0x114>)
 8006378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800637a:	e00a      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	b29a      	uxth	r2, r3
 8006382:	4b06      	ldr	r3, [pc, #24]	; (800639c <cfg_NodeServoVarSet+0x114>)
 8006384:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006386:	e004      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		default: return CFG_ERROR_VARID;
 8006388:	2302      	movs	r3, #2
 800638a:	e003      	b.n	8006394 <cfg_NodeServoVarSet+0x10c>
	}
	return CFG_ERROR_NONE;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <cfg_NodeServoVarSet+0x10a>
		case SERVO_ROLL_CUR_PWM:			break;
 8006390:	bf00      	nop
	return CFG_ERROR_NONE;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000b94 	.word	0x20000b94

080063a0 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 80063a8:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <system_Timer+0x84>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <system_Timer+0x84>)
 80063b2:	6013      	str	r3, [r2, #0]
	//leds_Timer(res);
	cfg_Timer(res);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fb fc13 	bl	8001be0 <cfg_Timer>
	modem_Timer(res);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fd fc72 	bl	8003ca4 <modem_Timer>
	servo_Timer(res);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fae3 	bl	800598c <servo_Timer>
	motor_Timer(res);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fd ff5e 	bl	8004288 <motor_Timer>
	rc_Timer(res);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fe fb21 	bl	8004a14 <rc_Timer>
	battery_Timer(res);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fa fffc 	bl	80013d0 <battery_Timer>
	autopilot_Timer(res);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fa fca5 	bl	8000d28 <autopilot_Timer>
	sens_Timer(res);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fe fe84 	bl	80050ec <sens_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
 80063e8:	e013      	b.n	8006412 <system_Timer+0x72>
	{
		if( system_info.timer[i] != 0 ){
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	4a0e      	ldr	r2, [pc, #56]	; (8006428 <system_Timer+0x88>)
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <system_Timer+0x6c>
			system_info.timer[i]--;
 80063f8:	7bfa      	ldrb	r2, [r7, #15]
 80063fa:	490b      	ldr	r1, [pc, #44]	; (8006428 <system_Timer+0x88>)
 80063fc:	0093      	lsls	r3, r2, #2
 80063fe:	440b      	add	r3, r1
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	1e59      	subs	r1, r3, #1
 8006404:	4808      	ldr	r0, [pc, #32]	; (8006428 <system_Timer+0x88>)
 8006406:	0093      	lsls	r3, r2, #2
 8006408:	4403      	add	r3, r0
 800640a:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	3301      	adds	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d9e8      	bls.n	80063ea <system_Timer+0x4a>
		}
	}
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000be0 	.word	0x20000be0
 8006428:	20000bd4 	.word	0x20000bd4

0800642c <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <system_Init+0x44>)
 8006432:	2200      	movs	r2, #0
 8006434:	705a      	strb	r2, [r3, #1]
	//leds_InitTask();

	modem_InitTask();
 8006436:	f7fd fc59 	bl	8003cec <modem_InitTask>
	servo_InitTask();
 800643a:	f7ff facf 	bl	80059dc <servo_InitTask>
	motor_InitTask();
 800643e:	f7fd ff4d 	bl	80042dc <motor_InitTask>
	rc_InitTask();
 8006442:	f7fe fb0b 	bl	8004a5c <rc_InitTask>
	sens_InitTask();
 8006446:	f7fe fe75 	bl	8005134 <sens_InitTask>
	battery_InitTask(10000);
 800644a:	f242 7010 	movw	r0, #10000	; 0x2710
 800644e:	f7fa ffdd 	bl	800140c <battery_InitTask>
	autopilot_InitTask();
 8006452:	f7fa fc8d 	bl	8000d70 <autopilot_InitTask>
	cfg_InitTask();
 8006456:	f7fb fbf9 	bl	8001c4c <cfg_InitTask>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800645a:	2201      	movs	r2, #1
 800645c:	4905      	ldr	r1, [pc, #20]	; (8006474 <system_Init+0x48>)
 800645e:	4806      	ldr	r0, [pc, #24]	; (8006478 <system_Init+0x4c>)
 8006460:	f005 fa90 	bl	800b984 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 8006464:	4805      	ldr	r0, [pc, #20]	; (800647c <system_Init+0x50>)
 8006466:	f000 f9e1 	bl	800682c <HAL_ADC_Start_IT>
}
 800646a:	bf00      	nop
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000bd4 	.word	0x20000bd4
 8006474:	20000be4 	.word	0x20000be4
 8006478:	200006d8 	.word	0x200006d8
 800647c:	200005f4 	.word	0x200005f4

08006480 <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
	//leds_Task();
	cfg_Task();
 8006484:	f7fb fc42 	bl	8001d0c <cfg_Task>
	modem_Task();
 8006488:	f7fd fc52 	bl	8003d30 <modem_Task>
	motor_Task();
 800648c:	f7fd ff72 	bl	8004374 <motor_Task>
	servo_Task();
 8006490:	f7ff fb26 	bl	8005ae0 <servo_Task>
	rc_Task();
 8006494:	f7fe fb0a 	bl	8004aac <rc_Task>
	sens_Task();
 8006498:	f7fe fe58 	bl	800514c <sens_Task>
	battery_Task();
 800649c:	f7fa ffd2 	bl	8001444 <battery_Task>
	autopilot_Task();
 80064a0:	f7fa fcb8 	bl	8000e14 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 80064a4:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <system_Task+0xa4>)
 80064a6:	789b      	ldrb	r3, [r3, #2]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d109      	bne.n	80064c2 <system_Task+0x42>
 80064ae:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <system_Task+0xa4>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <system_Task+0x42>
	{
		system_info.adc_cplt = 0;
 80064b6:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <system_Task+0xa4>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 80064bc:	481a      	ldr	r0, [pc, #104]	; (8006528 <system_Task+0xa8>)
 80064be:	f000 f9b5 	bl	800682c <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 80064c2:	4b1a      	ldr	r3, [pc, #104]	; (800652c <system_Task+0xac>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d10f      	bne.n	80064ec <system_Task+0x6c>
	{
		_system_restart_uart = 0;
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <system_Task+0xac>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 80064d2:	f7fd f8ff 	bl	80036d4 <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 80064d6:	2201      	movs	r2, #1
 80064d8:	4915      	ldr	r1, [pc, #84]	; (8006530 <system_Task+0xb0>)
 80064da:	4816      	ldr	r0, [pc, #88]	; (8006534 <system_Task+0xb4>)
 80064dc:	f005 fa52 	bl	800b984 <HAL_UART_Receive_IT>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <system_Task+0x6c>
			_system_restart_uart = 1;
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <system_Task+0xac>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//System reset
	if( system_info.reset_req == 1 )
 80064ec:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <system_Task+0xa4>)
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d106      	bne.n	8006504 <system_Task+0x84>
	{
		system_info.reset_req = 2;
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <system_Task+0xa4>)
 80064f8:	2202      	movs	r2, #2
 80064fa:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <system_Task+0xa4>)
 80064fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006502:	605a      	str	r2, [r3, #4]
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 8006504:	4b07      	ldr	r3, [pc, #28]	; (8006524 <system_Task+0xa4>)
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d108      	bne.n	8006520 <system_Task+0xa0>
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <system_Task+0xa4>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <system_Task+0xa0>
	{
		system_info.reset_req = 0;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <system_Task+0xa4>)
 8006518:	2200      	movs	r2, #0
 800651a:	705a      	strb	r2, [r3, #1]
		system_Reset();
 800651c:	f00a fcb4 	bl	8010e88 <__system_Reset_veneer>
	}
}
 8006520:	bf00      	nop
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000bd4 	.word	0x20000bd4
 8006528:	200005f4 	.word	0x200005f4
 800652c:	20000be5 	.word	0x20000be5
 8006530:	20000be4 	.word	0x20000be4
 8006534:	200006d8 	.word	0x200006d8

08006538 <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 800653c:	4807      	ldr	r0, [pc, #28]	; (800655c <system_UARTmodemSet115200+0x24>)
 800653e:	f005 fa51 	bl	800b9e4 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 8006542:	4806      	ldr	r0, [pc, #24]	; (800655c <system_UARTmodemSet115200+0x24>)
 8006544:	f005 f95d 	bl	800b802 <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 8006548:	f7fd f88e 	bl	8003668 <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800654c:	2201      	movs	r2, #1
 800654e:	4904      	ldr	r1, [pc, #16]	; (8006560 <system_UARTmodemSet115200+0x28>)
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <system_UARTmodemSet115200+0x24>)
 8006552:	f005 fa17 	bl	800b984 <HAL_UART_Receive_IT>
	return;
 8006556:	bf00      	nop
}
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200006d8 	.word	0x200006d8
 8006560:	20000be4 	.word	0x20000be4

08006564 <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d112      	bne.n	800659e <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e00a      	b.n	8006594 <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	4413      	add	r3, r2
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	2000      	movs	r0, #0
 800658a:	f7fb ffd7 	bl	800253c <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	3301      	adds	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d3f0      	bcc.n	800657e <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 800659c:	e014      	b.n	80065c8 <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d111      	bne.n	80065c8 <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e009      	b.n	80065be <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	4413      	add	r3, r2
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fb2e 	bl	8004c14 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	3301      	adds	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d3f1      	bcc.n	80065aa <system_ModemRxCallback+0x46>
	return;
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
}
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a14      	ldr	r2, [pc, #80]	; (800662c <system_ADC_ConvCpltCallback+0x5c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d120      	bne.n	8006622 <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 80065e0:	4812      	ldr	r0, [pc, #72]	; (800662c <system_ADC_ConvCpltCallback+0x5c>)
 80065e2:	f000 faf1 	bl	8006bc8 <HAL_ADC_GetValue>
 80065e6:	ee07 0a90 	vmov	s15, r0
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006630 <system_ADC_ConvCpltCallback+0x60>
 80065f2:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 80065f6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80065fa:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 80065fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006602:	ee17 3a90 	vmov	r3, s15
 8006606:	b29a      	uxth	r2, r3
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <system_ADC_ConvCpltCallback+0x64>)
 800660a:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <system_ADC_ConvCpltCallback+0x64>)
 800660e:	2201      	movs	r2, #1
 8006610:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <system_ADC_ConvCpltCallback+0x68>)
 8006614:	2201      	movs	r2, #1
 8006616:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <system_ADC_ConvCpltCallback+0x68>)
 800661a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800661e:	609a      	str	r2, [r3, #8]
	}

	return;
 8006620:	bf00      	nop
 8006622:	bf00      	nop
}
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200005f4 	.word	0x200005f4
 8006630:	3f4e4ce5 	.word	0x3f4e4ce5
 8006634:	20000288 	.word	0x20000288
 8006638:	20000bd4 	.word	0x20000bd4

0800663c <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a0c      	ldr	r2, [pc, #48]	; (8006678 <system_UART_RxCpltCallback+0x3c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d110      	bne.n	800666e <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <system_UART_RxCpltCallback+0x40>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	4618      	mov	r0, r3
 8006654:	f7fd fc84 	bl	8003f60 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 8006658:	2201      	movs	r2, #1
 800665a:	4908      	ldr	r1, [pc, #32]	; (800667c <system_UART_RxCpltCallback+0x40>)
 800665c:	4806      	ldr	r0, [pc, #24]	; (8006678 <system_UART_RxCpltCallback+0x3c>)
 800665e:	f005 f991 	bl	800b984 <HAL_UART_Receive_IT>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <system_UART_RxCpltCallback+0x44>)
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	200006d8 	.word	0x200006d8
 800667c:	20000be4 	.word	0x20000be4
 8006680:	20000be5 	.word	0x20000be5

08006684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006688:	480d      	ldr	r0, [pc, #52]	; (80066c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800668a:	490e      	ldr	r1, [pc, #56]	; (80066c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800668c:	4a0e      	ldr	r2, [pc, #56]	; (80066c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800668e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006690:	e002      	b.n	8006698 <LoopCopyDataInit>

08006692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006696:	3304      	adds	r3, #4

08006698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800669a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800669c:	d3f9      	bcc.n	8006692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800669e:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066a0:	4c0b      	ldr	r4, [pc, #44]	; (80066d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066a4:	e001      	b.n	80066aa <LoopFillZerobss>

080066a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066a8:	3204      	adds	r2, #4

080066aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066ac:	d3fb      	bcc.n	80066a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80066ae:	f7fd fae7 	bl	8003c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066b2:	f00a fba3 	bl	8010dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066b6:	f7fc fd71 	bl	800319c <main>
  bx  lr    
 80066ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80066bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80066c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066c4:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80066c8:	08011850 	.word	0x08011850
  ldr r2, =_sbss
 80066cc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80066d0:	20002818 	.word	0x20002818

080066d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066d4:	e7fe      	b.n	80066d4 <DMA1_Stream0_IRQHandler>
	...

080066d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <HAL_Init+0x40>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <HAL_Init+0x40>)
 80066e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_Init+0x40>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <HAL_Init+0x40>)
 80066ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_Init+0x40>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a07      	ldr	r2, [pc, #28]	; (8006718 <HAL_Init+0x40>)
 80066fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006700:	2003      	movs	r0, #3
 8006702:	f000 fd8c 	bl	800721e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006706:	200f      	movs	r0, #15
 8006708:	f7fd f9ea 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800670c:	f7fd f818 	bl	8003740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40023c00 	.word	0x40023c00

0800671c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_IncTick+0x20>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_IncTick+0x24>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4413      	add	r3, r2
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <HAL_IncTick+0x24>)
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	200000ec 	.word	0x200000ec
 8006740:	20000be8 	.word	0x20000be8

08006744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return uwTick;
 8006748:	4b03      	ldr	r3, [pc, #12]	; (8006758 <HAL_GetTick+0x14>)
 800674a:	681b      	ldr	r3, [r3, #0]
}
 800674c:	4618      	mov	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000be8 	.word	0x20000be8

0800675c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006764:	f7ff ffee 	bl	8006744 <HAL_GetTick>
 8006768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d005      	beq.n	8006782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <HAL_Delay+0x44>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006782:	bf00      	nop
 8006784:	f7ff ffde 	bl	8006744 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	429a      	cmp	r2, r3
 8006792:	d8f7      	bhi.n	8006784 <HAL_Delay+0x28>
  {
  }
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	200000ec 	.word	0x200000ec

080067a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e033      	b.n	8006822 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc ffe4 	bl	8003790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d118      	bne.n	8006814 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067ea:	f023 0302 	bic.w	r3, r3, #2
 80067ee:	f043 0202 	orr.w	r2, r3, #2
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fb3a 	bl	8006e70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
 8006812:	e001      	b.n	8006818 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_ADC_Start_IT+0x1a>
 8006842:	2302      	movs	r3, #2
 8006844:	e0a1      	b.n	800698a <HAL_ADC_Start_IT+0x15e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d018      	beq.n	800688e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800686c:	4b4a      	ldr	r3, [pc, #296]	; (8006998 <HAL_ADC_Start_IT+0x16c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a4a      	ldr	r2, [pc, #296]	; (800699c <HAL_ADC_Start_IT+0x170>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	0c9a      	lsrs	r2, r3, #18
 8006878:	4613      	mov	r3, r2
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	4413      	add	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006880:	e002      	b.n	8006888 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	3b01      	subs	r3, #1
 8006886:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f9      	bne.n	8006882 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d169      	bne.n	8006970 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	d106      	bne.n	80068ea <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e0:	f023 0206 	bic.w	r2, r3, #6
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	645a      	str	r2, [r3, #68]	; 0x44
 80068e8:	e002      	b.n	80068f0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068f8:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <HAL_ADC_Start_IT+0x174>)
 80068fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006904:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006914:	f043 0320 	orr.w	r3, r3, #32
 8006918:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d129      	bne.n	8006988 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e020      	b.n	8006988 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <HAL_ADC_Start_IT+0x178>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d11b      	bne.n	8006988 <HAL_ADC_Start_IT+0x15c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d114      	bne.n	8006988 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800696c:	609a      	str	r2, [r3, #8]
 800696e:	e00b      	b.n	8006988 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	f043 0210 	orr.w	r2, r3, #16
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006980:	f043 0201 	orr.w	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	200000e4 	.word	0x200000e4
 800699c:	431bde83 	.word	0x431bde83
 80069a0:	40012300 	.word	0x40012300
 80069a4:	40012000 	.word	0x40012000

080069a8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	2300      	movs	r3, #0
 80069b6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d049      	beq.n	8006a72 <HAL_ADC_IRQHandler+0xca>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d046      	beq.n	8006a72 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d12b      	bne.n	8006a62 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d127      	bne.n	8006a62 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d006      	beq.n	8006a2e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d119      	bne.n	8006a62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0220 	bic.w	r2, r2, #32
 8006a3c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f043 0201 	orr.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fc fe42 	bl	80036ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0212 	mvn.w	r2, #18
 8006a70:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d057      	beq.n	8006b38 <HAL_ADC_IRQHandler+0x190>
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d054      	beq.n	8006b38 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d139      	bne.n	8006b28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d006      	beq.n	8006ad0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d12b      	bne.n	8006b28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d124      	bne.n	8006b28 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11d      	bne.n	8006b28 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d119      	bne.n	8006b28 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	f043 0201 	orr.w	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa9d 	bl	8007068 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 020c 	mvn.w	r2, #12
 8006b36:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d017      	beq.n	8006b7e <HAL_ADC_IRQHandler+0x1d6>
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d014      	beq.n	8006b7e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d10d      	bne.n	8006b7e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f837 	bl	8006be2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0201 	mvn.w	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b8c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_ADC_IRQHandler+0x218>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d012      	beq.n	8006bc0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	f043 0202 	orr.w	r2, r3, #2
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0220 	mvn.w	r2, #32
 8006bae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f820 	bl	8006bf6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0220 	mvn.w	r2, #32
 8006bbe:	601a      	str	r2, [r3, #0]
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x1c>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e113      	b.n	8006e50 <HAL_ADC_ConfigChannel+0x244>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d925      	bls.n	8006c84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	4613      	mov	r3, r2
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3b1e      	subs	r3, #30
 8006c4e:	2207      	movs	r2, #7
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43da      	mvns	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	400a      	ands	r2, r1
 8006c5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68d9      	ldr	r1, [r3, #12]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4618      	mov	r0, r3
 8006c70:	4603      	mov	r3, r0
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	4403      	add	r3, r0
 8006c76:	3b1e      	subs	r3, #30
 8006c78:	409a      	lsls	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	e022      	b.n	8006cca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6919      	ldr	r1, [r3, #16]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	2207      	movs	r2, #7
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	400a      	ands	r2, r1
 8006ca6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4618      	mov	r0, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4403      	add	r3, r0
 8006cc0:	409a      	lsls	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b06      	cmp	r3, #6
 8006cd0:	d824      	bhi.n	8006d1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3b05      	subs	r3, #5
 8006ce4:	221f      	movs	r2, #31
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	43da      	mvns	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3b05      	subs	r3, #5
 8006d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34
 8006d1a:	e04c      	b.n	8006db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b0c      	cmp	r3, #12
 8006d22:	d824      	bhi.n	8006d6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	3b23      	subs	r3, #35	; 0x23
 8006d36:	221f      	movs	r2, #31
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43da      	mvns	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	400a      	ands	r2, r1
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	4618      	mov	r0, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3b23      	subs	r3, #35	; 0x23
 8006d60:	fa00 f203 	lsl.w	r2, r0, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d6c:	e023      	b.n	8006db6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3b41      	subs	r3, #65	; 0x41
 8006d80:	221f      	movs	r2, #31
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43da      	mvns	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	3b41      	subs	r3, #65	; 0x41
 8006daa:	fa00 f203 	lsl.w	r2, r0, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <HAL_ADC_ConfigChannel+0x250>)
 8006db8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <HAL_ADC_ConfigChannel+0x254>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d10f      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x1d8>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b12      	cmp	r3, #18
 8006dca:	d10b      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_ADC_ConfigChannel+0x254>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d12b      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x23a>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <HAL_ADC_ConfigChannel+0x258>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <HAL_ADC_ConfigChannel+0x1f4>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b11      	cmp	r3, #17
 8006dfe:	d122      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a11      	ldr	r2, [pc, #68]	; (8006e64 <HAL_ADC_ConfigChannel+0x258>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d111      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <HAL_ADC_ConfigChannel+0x25c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <HAL_ADC_ConfigChannel+0x260>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	0c9a      	lsrs	r2, r3, #18
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e38:	e002      	b.n	8006e40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f9      	bne.n	8006e3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	40012300 	.word	0x40012300
 8006e60:	40012000 	.word	0x40012000
 8006e64:	10000012 	.word	0x10000012
 8006e68:	200000e4 	.word	0x200000e4
 8006e6c:	431bde83 	.word	0x431bde83

08006e70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e78:	4b79      	ldr	r3, [pc, #484]	; (8007060 <ADC_Init+0x1f0>)
 8006e7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6859      	ldr	r1, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	021a      	lsls	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6859      	ldr	r1, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6899      	ldr	r1, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	4a58      	ldr	r2, [pc, #352]	; (8007064 <ADC_Init+0x1f4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d022      	beq.n	8006f4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6899      	ldr	r1, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6899      	ldr	r1, [r3, #8]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	e00f      	b.n	8006f6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0202 	bic.w	r2, r2, #2
 8006f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6899      	ldr	r1, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7e1b      	ldrb	r3, [r3, #24]
 8006f88:	005a      	lsls	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d01b      	beq.n	8006fd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006faa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006fba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	035a      	lsls	r2, r3, #13
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	e007      	b.n	8006fe4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	051a      	lsls	r2, r3, #20
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6899      	ldr	r1, [r3, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007026:	025a      	lsls	r2, r3, #9
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800703e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6899      	ldr	r1, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	029a      	lsls	r2, r3, #10
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	609a      	str	r2, [r3, #8]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	40012300 	.word	0x40012300
 8007064:	0f000001 	.word	0x0f000001

08007068 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800708c:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <__NVIC_SetPriorityGrouping+0x44>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007098:	4013      	ands	r3, r2
 800709a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ae:	4a04      	ldr	r2, [pc, #16]	; (80070c0 <__NVIC_SetPriorityGrouping+0x44>)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	60d3      	str	r3, [r2, #12]
}
 80070b4:	bf00      	nop
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070c8:	4b04      	ldr	r3, [pc, #16]	; (80070dc <__NVIC_GetPriorityGrouping+0x18>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	f003 0307 	and.w	r3, r3, #7
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	e000ed00 	.word	0xe000ed00

080070e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	db0b      	blt.n	800710a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	f003 021f 	and.w	r2, r3, #31
 80070f8:	4907      	ldr	r1, [pc, #28]	; (8007118 <__NVIC_EnableIRQ+0x38>)
 80070fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	2001      	movs	r0, #1
 8007102:	fa00 f202 	lsl.w	r2, r0, r2
 8007106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	e000e100 	.word	0xe000e100

0800711c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712a:	2b00      	cmp	r3, #0
 800712c:	db12      	blt.n	8007154 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	f003 021f 	and.w	r2, r3, #31
 8007134:	490a      	ldr	r1, [pc, #40]	; (8007160 <__NVIC_DisableIRQ+0x44>)
 8007136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713a:	095b      	lsrs	r3, r3, #5
 800713c:	2001      	movs	r0, #1
 800713e:	fa00 f202 	lsl.w	r2, r0, r2
 8007142:	3320      	adds	r3, #32
 8007144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007148:	f3bf 8f4f 	dsb	sy
}
 800714c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800714e:	f3bf 8f6f 	isb	sy
}
 8007152:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	e000e100 	.word	0xe000e100

08007164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007174:	2b00      	cmp	r3, #0
 8007176:	db0a      	blt.n	800718e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	490c      	ldr	r1, [pc, #48]	; (80071b0 <__NVIC_SetPriority+0x4c>)
 800717e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007182:	0112      	lsls	r2, r2, #4
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	440b      	add	r3, r1
 8007188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800718c:	e00a      	b.n	80071a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	4908      	ldr	r1, [pc, #32]	; (80071b4 <__NVIC_SetPriority+0x50>)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	3b04      	subs	r3, #4
 800719c:	0112      	lsls	r2, r2, #4
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	440b      	add	r3, r1
 80071a2:	761a      	strb	r2, [r3, #24]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	e000e100 	.word	0xe000e100
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f1c3 0307 	rsb	r3, r3, #7
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	bf28      	it	cs
 80071d6:	2304      	movcs	r3, #4
 80071d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	3304      	adds	r3, #4
 80071de:	2b06      	cmp	r3, #6
 80071e0:	d902      	bls.n	80071e8 <NVIC_EncodePriority+0x30>
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3b03      	subs	r3, #3
 80071e6:	e000      	b.n	80071ea <NVIC_EncodePriority+0x32>
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071ec:	f04f 32ff 	mov.w	r2, #4294967295
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43da      	mvns	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	401a      	ands	r2, r3
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007200:	f04f 31ff 	mov.w	r1, #4294967295
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	fa01 f303 	lsl.w	r3, r1, r3
 800720a:	43d9      	mvns	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007210:	4313      	orrs	r3, r2
         );
}
 8007212:	4618      	mov	r0, r3
 8007214:	3724      	adds	r7, #36	; 0x24
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff ff28 	bl	800707c <__NVIC_SetPriorityGrouping>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007246:	f7ff ff3d 	bl	80070c4 <__NVIC_GetPriorityGrouping>
 800724a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	6978      	ldr	r0, [r7, #20]
 8007252:	f7ff ffb1 	bl	80071b8 <NVIC_EncodePriority>
 8007256:	4602      	mov	r2, r0
 8007258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800725c:	4611      	mov	r1, r2
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff ff80 	bl	8007164 <__NVIC_SetPriority>
}
 8007264:	bf00      	nop
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ff30 	bl	80070e0 <__NVIC_EnableIRQ>
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff ff40 	bl	800711c <__NVIC_DisableIRQ>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072b2:	f7ff fa47 	bl	8006744 <HAL_GetTick>
 80072b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d008      	beq.n	80072d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e052      	b.n	800737c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0216 	bic.w	r2, r2, #22
 80072e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d103      	bne.n	8007306 <HAL_DMA_Abort+0x62>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0208 	bic.w	r2, r2, #8
 8007314:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007326:	e013      	b.n	8007350 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007328:	f7ff fa0c 	bl	8006744 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b05      	cmp	r3, #5
 8007334:	d90c      	bls.n	8007350 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2203      	movs	r2, #3
 8007340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e015      	b.n	800737c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e4      	bne.n	8007328 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	223f      	movs	r2, #63	; 0x3f
 8007364:	409a      	lsls	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d004      	beq.n	80073a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2280      	movs	r2, #128	; 0x80
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e00c      	b.n	80073bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2205      	movs	r2, #5
 80073a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80073da:	4b23      	ldr	r3, [pc, #140]	; (8007468 <HAL_FLASH_Program+0xa0>)
 80073dc:	7e1b      	ldrb	r3, [r3, #24]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_FLASH_Program+0x1e>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e03b      	b.n	800745e <HAL_FLASH_Program+0x96>
 80073e6:	4b20      	ldr	r3, [pc, #128]	; (8007468 <HAL_FLASH_Program+0xa0>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073f0:	f000 f870 	bl	80074d4 <FLASH_WaitForLastOperation>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d12b      	bne.n	8007456 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007404:	783b      	ldrb	r3, [r7, #0]
 8007406:	4619      	mov	r1, r3
 8007408:	68b8      	ldr	r0, [r7, #8]
 800740a:	f000 f91b 	bl	8007644 <FLASH_Program_Byte>
 800740e:	e016      	b.n	800743e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d105      	bne.n	8007422 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007416:	883b      	ldrh	r3, [r7, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	68b8      	ldr	r0, [r7, #8]
 800741c:	f000 f8ee 	bl	80075fc <FLASH_Program_HalfWord>
 8007420:	e00d      	b.n	800743e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d105      	bne.n	8007434 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	4619      	mov	r1, r3
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f000 f8c3 	bl	80075b8 <FLASH_Program_Word>
 8007432:	e004      	b.n	800743e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	68b8      	ldr	r0, [r7, #8]
 800743a:	f000 f88b 	bl	8007554 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800743e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007442:	f000 f847 	bl	80074d4 <FLASH_WaitForLastOperation>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800744a:	4b08      	ldr	r3, [pc, #32]	; (800746c <HAL_FLASH_Program+0xa4>)
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	4a07      	ldr	r2, [pc, #28]	; (800746c <HAL_FLASH_Program+0xa4>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007456:	4b04      	ldr	r3, [pc, #16]	; (8007468 <HAL_FLASH_Program+0xa0>)
 8007458:	2200      	movs	r2, #0
 800745a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000bec 	.word	0x20000bec
 800746c:	40023c00 	.word	0x40023c00

08007470 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <HAL_FLASH_Unlock+0x38>)
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	da0b      	bge.n	800749a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007482:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <HAL_FLASH_Unlock+0x38>)
 8007484:	4a09      	ldr	r2, [pc, #36]	; (80074ac <HAL_FLASH_Unlock+0x3c>)
 8007486:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007488:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <HAL_FLASH_Unlock+0x38>)
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <HAL_FLASH_Unlock+0x40>)
 800748c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <HAL_FLASH_Unlock+0x38>)
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da01      	bge.n	800749a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800749a:	79fb      	ldrb	r3, [r7, #7]
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40023c00 	.word	0x40023c00
 80074ac:	45670123 	.word	0x45670123
 80074b0:	cdef89ab 	.word	0xcdef89ab

080074b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <HAL_FLASH_Lock+0x1c>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <HAL_FLASH_Lock+0x1c>)
 80074be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40023c00 	.word	0x40023c00

080074d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80074e0:	4b1a      	ldr	r3, [pc, #104]	; (800754c <FLASH_WaitForLastOperation+0x78>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80074e6:	f7ff f92d 	bl	8006744 <HAL_GetTick>
 80074ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80074ec:	e010      	b.n	8007510 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d00c      	beq.n	8007510 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <FLASH_WaitForLastOperation+0x38>
 80074fc:	f7ff f922 	bl	8006744 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d201      	bcs.n	8007510 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e019      	b.n	8007544 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007510:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <FLASH_WaitForLastOperation+0x7c>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e8      	bne.n	80074ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <FLASH_WaitForLastOperation+0x7c>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <FLASH_WaitForLastOperation+0x7c>)
 800752a:	2201      	movs	r2, #1
 800752c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800752e:	4b08      	ldr	r3, [pc, #32]	; (8007550 <FLASH_WaitForLastOperation+0x7c>)
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800753a:	f000 f8a5 	bl	8007688 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
  
}  
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000bec 	.word	0x20000bec
 8007550:	40023c00 	.word	0x40023c00

08007554 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007560:	4b14      	ldr	r3, [pc, #80]	; (80075b4 <FLASH_Program_DoubleWord+0x60>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <FLASH_Program_DoubleWord+0x60>)
 8007566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800756c:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <FLASH_Program_DoubleWord+0x60>)
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	4a10      	ldr	r2, [pc, #64]	; (80075b4 <FLASH_Program_DoubleWord+0x60>)
 8007572:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007578:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <FLASH_Program_DoubleWord+0x60>)
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <FLASH_Program_DoubleWord+0x60>)
 800757e:	f043 0301 	orr.w	r3, r3, #1
 8007582:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800758a:	f3bf 8f6f 	isb	sy
}
 800758e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	000a      	movs	r2, r1
 800759e:	2300      	movs	r3, #0
 80075a0:	68f9      	ldr	r1, [r7, #12]
 80075a2:	3104      	adds	r1, #4
 80075a4:	4613      	mov	r3, r2
 80075a6:	600b      	str	r3, [r1, #0]
}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40023c00 	.word	0x40023c00

080075b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80075c2:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <FLASH_Program_Word+0x40>)
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <FLASH_Program_Word+0x40>)
 80075c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80075ce:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <FLASH_Program_Word+0x40>)
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <FLASH_Program_Word+0x40>)
 80075d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <FLASH_Program_Word+0x40>)
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	4a06      	ldr	r2, [pc, #24]	; (80075f8 <FLASH_Program_Word+0x40>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	601a      	str	r2, [r3, #0]
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	40023c00 	.word	0x40023c00

080075fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007608:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <FLASH_Program_HalfWord+0x44>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	4a0c      	ldr	r2, [pc, #48]	; (8007640 <FLASH_Program_HalfWord+0x44>)
 800760e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <FLASH_Program_HalfWord+0x44>)
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	4a09      	ldr	r2, [pc, #36]	; (8007640 <FLASH_Program_HalfWord+0x44>)
 800761a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800761e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <FLASH_Program_HalfWord+0x44>)
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	4a06      	ldr	r2, [pc, #24]	; (8007640 <FLASH_Program_HalfWord+0x44>)
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	887a      	ldrh	r2, [r7, #2]
 8007630:	801a      	strh	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40023c00 	.word	0x40023c00

08007644 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007650:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <FLASH_Program_Byte+0x40>)
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <FLASH_Program_Byte+0x40>)
 8007656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800765c:	4b09      	ldr	r3, [pc, #36]	; (8007684 <FLASH_Program_Byte+0x40>)
 800765e:	4a09      	ldr	r2, [pc, #36]	; (8007684 <FLASH_Program_Byte+0x40>)
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <FLASH_Program_Byte+0x40>)
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	4a06      	ldr	r2, [pc, #24]	; (8007684 <FLASH_Program_Byte+0x40>)
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	701a      	strb	r2, [r3, #0]
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40023c00 	.word	0x40023c00

08007688 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800768c:	4b2f      	ldr	r3, [pc, #188]	; (800774c <FLASH_SetErrorCode+0xc4>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b00      	cmp	r3, #0
 8007696:	d008      	beq.n	80076aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007698:	4b2d      	ldr	r3, [pc, #180]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f043 0310 	orr.w	r3, r3, #16
 80076a0:	4a2b      	ldr	r2, [pc, #172]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80076a4:	4b29      	ldr	r3, [pc, #164]	; (800774c <FLASH_SetErrorCode+0xc4>)
 80076a6:	2210      	movs	r2, #16
 80076a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80076aa:	4b28      	ldr	r3, [pc, #160]	; (800774c <FLASH_SetErrorCode+0xc4>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80076b6:	4b26      	ldr	r3, [pc, #152]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f043 0308 	orr.w	r3, r3, #8
 80076be:	4a24      	ldr	r2, [pc, #144]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80076c2:	4b22      	ldr	r3, [pc, #136]	; (800774c <FLASH_SetErrorCode+0xc4>)
 80076c4:	2220      	movs	r2, #32
 80076c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80076c8:	4b20      	ldr	r3, [pc, #128]	; (800774c <FLASH_SetErrorCode+0xc4>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d008      	beq.n	80076e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80076d4:	4b1e      	ldr	r3, [pc, #120]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f043 0304 	orr.w	r3, r3, #4
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80076e0:	4b1a      	ldr	r3, [pc, #104]	; (800774c <FLASH_SetErrorCode+0xc4>)
 80076e2:	2240      	movs	r2, #64	; 0x40
 80076e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80076e6:	4b19      	ldr	r3, [pc, #100]	; (800774c <FLASH_SetErrorCode+0xc4>)
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f043 0302 	orr.w	r3, r3, #2
 80076fa:	4a15      	ldr	r2, [pc, #84]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 80076fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <FLASH_SetErrorCode+0xc4>)
 8007700:	2280      	movs	r2, #128	; 0x80
 8007702:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007704:	4b11      	ldr	r3, [pc, #68]	; (800774c <FLASH_SetErrorCode+0xc4>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	4a0d      	ldr	r2, [pc, #52]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 800771a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <FLASH_SetErrorCode+0xc4>)
 800771e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007722:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <FLASH_SetErrorCode+0xc4>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	f043 0320 	orr.w	r3, r3, #32
 8007738:	4a05      	ldr	r2, [pc, #20]	; (8007750 <FLASH_SetErrorCode+0xc8>)
 800773a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <FLASH_SetErrorCode+0xc4>)
 800773e:	2202      	movs	r2, #2
 8007740:	60da      	str	r2, [r3, #12]
  }
}
 8007742:	bf00      	nop
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	40023c00 	.word	0x40023c00
 8007750:	20000bec 	.word	0x20000bec

08007754 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e010      	b.n	8007792 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d103      	bne.n	800777e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	e009      	b.n	8007792 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d103      	bne.n	800778c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e002      	b.n	8007792 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800778c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007790:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	4a12      	ldr	r2, [pc, #72]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 8007798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	490f      	ldr	r1, [pc, #60]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80077aa:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80077b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4313      	orrs	r3, r2
 80077c0:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	4a04      	ldr	r2, [pc, #16]	; (80077e0 <FLASH_Erase_Sector+0x8c>)
 80077ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d2:	6113      	str	r3, [r2, #16]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	40023c00 	.word	0x40023c00

080077e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b089      	sub	sp, #36	; 0x24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077fa:	2300      	movs	r3, #0
 80077fc:	61fb      	str	r3, [r7, #28]
 80077fe:	e159      	b.n	8007ab4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007800:	2201      	movs	r2, #1
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	fa02 f303 	lsl.w	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4013      	ands	r3, r2
 8007812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	429a      	cmp	r2, r3
 800781a:	f040 8148 	bne.w	8007aae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d005      	beq.n	8007836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007832:	2b02      	cmp	r3, #2
 8007834:	d130      	bne.n	8007898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	2203      	movs	r2, #3
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43db      	mvns	r3, r3
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	4013      	ands	r3, r2
 800784c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800786c:	2201      	movs	r2, #1
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	43db      	mvns	r3, r3
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4013      	ands	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	091b      	lsrs	r3, r3, #4
 8007882:	f003 0201 	and.w	r2, r3, #1
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4313      	orrs	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d017      	beq.n	80078d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	2203      	movs	r2, #3
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	43db      	mvns	r3, r3
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	4013      	ands	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d123      	bne.n	8007928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	08da      	lsrs	r2, r3, #3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3208      	adds	r2, #8
 80078e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	220f      	movs	r2, #15
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	43db      	mvns	r3, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4013      	ands	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4313      	orrs	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	08da      	lsrs	r2, r3, #3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3208      	adds	r2, #8
 8007922:	69b9      	ldr	r1, [r7, #24]
 8007924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	2203      	movs	r2, #3
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	43db      	mvns	r3, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4013      	ands	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0203 	and.w	r2, r3, #3
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80a2 	beq.w	8007aae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	4b57      	ldr	r3, [pc, #348]	; (8007acc <HAL_GPIO_Init+0x2e8>)
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	4a56      	ldr	r2, [pc, #344]	; (8007acc <HAL_GPIO_Init+0x2e8>)
 8007974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007978:	6453      	str	r3, [r2, #68]	; 0x44
 800797a:	4b54      	ldr	r3, [pc, #336]	; (8007acc <HAL_GPIO_Init+0x2e8>)
 800797c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007986:	4a52      	ldr	r2, [pc, #328]	; (8007ad0 <HAL_GPIO_Init+0x2ec>)
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	089b      	lsrs	r3, r3, #2
 800798c:	3302      	adds	r3, #2
 800798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	220f      	movs	r2, #15
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	43db      	mvns	r3, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4013      	ands	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a49      	ldr	r2, [pc, #292]	; (8007ad4 <HAL_GPIO_Init+0x2f0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d019      	beq.n	80079e6 <HAL_GPIO_Init+0x202>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a48      	ldr	r2, [pc, #288]	; (8007ad8 <HAL_GPIO_Init+0x2f4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <HAL_GPIO_Init+0x1fe>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a47      	ldr	r2, [pc, #284]	; (8007adc <HAL_GPIO_Init+0x2f8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00d      	beq.n	80079de <HAL_GPIO_Init+0x1fa>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a46      	ldr	r2, [pc, #280]	; (8007ae0 <HAL_GPIO_Init+0x2fc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <HAL_GPIO_Init+0x1f6>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a45      	ldr	r2, [pc, #276]	; (8007ae4 <HAL_GPIO_Init+0x300>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d101      	bne.n	80079d6 <HAL_GPIO_Init+0x1f2>
 80079d2:	2304      	movs	r3, #4
 80079d4:	e008      	b.n	80079e8 <HAL_GPIO_Init+0x204>
 80079d6:	2307      	movs	r3, #7
 80079d8:	e006      	b.n	80079e8 <HAL_GPIO_Init+0x204>
 80079da:	2303      	movs	r3, #3
 80079dc:	e004      	b.n	80079e8 <HAL_GPIO_Init+0x204>
 80079de:	2302      	movs	r3, #2
 80079e0:	e002      	b.n	80079e8 <HAL_GPIO_Init+0x204>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <HAL_GPIO_Init+0x204>
 80079e6:	2300      	movs	r3, #0
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	f002 0203 	and.w	r2, r2, #3
 80079ee:	0092      	lsls	r2, r2, #2
 80079f0:	4093      	lsls	r3, r2
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079f8:	4935      	ldr	r1, [pc, #212]	; (8007ad0 <HAL_GPIO_Init+0x2ec>)
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	089b      	lsrs	r3, r3, #2
 80079fe:	3302      	adds	r3, #2
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a06:	4b38      	ldr	r3, [pc, #224]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a2a:	4a2f      	ldr	r2, [pc, #188]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a30:	4b2d      	ldr	r3, [pc, #180]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a54:	4a24      	ldr	r2, [pc, #144]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a5a:	4b23      	ldr	r3, [pc, #140]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	43db      	mvns	r3, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4013      	ands	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a84:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4013      	ands	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007aa8:	4a0f      	ldr	r2, [pc, #60]	; (8007ae8 <HAL_GPIO_Init+0x304>)
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	f67f aea2 	bls.w	8007800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	3724      	adds	r7, #36	; 0x24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	40013800 	.word	0x40013800
 8007ad4:	40020000 	.word	0x40020000
 8007ad8:	40020400 	.word	0x40020400
 8007adc:	40020800 	.word	0x40020800
 8007ae0:	40020c00 	.word	0x40020c00
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	40013c00 	.word	0x40013c00

08007aec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	e0bb      	b.n	8007c80 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b08:	2201      	movs	r2, #1
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4013      	ands	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	f040 80ab 	bne.w	8007c7a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007b24:	4a5c      	ldr	r2, [pc, #368]	; (8007c98 <HAL_GPIO_DeInit+0x1ac>)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	089b      	lsrs	r3, r3, #2
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b30:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	220f      	movs	r2, #15
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a54      	ldr	r2, [pc, #336]	; (8007c9c <HAL_GPIO_DeInit+0x1b0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d019      	beq.n	8007b82 <HAL_GPIO_DeInit+0x96>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a53      	ldr	r2, [pc, #332]	; (8007ca0 <HAL_GPIO_DeInit+0x1b4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <HAL_GPIO_DeInit+0x92>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a52      	ldr	r2, [pc, #328]	; (8007ca4 <HAL_GPIO_DeInit+0x1b8>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00d      	beq.n	8007b7a <HAL_GPIO_DeInit+0x8e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a51      	ldr	r2, [pc, #324]	; (8007ca8 <HAL_GPIO_DeInit+0x1bc>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d007      	beq.n	8007b76 <HAL_GPIO_DeInit+0x8a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a50      	ldr	r2, [pc, #320]	; (8007cac <HAL_GPIO_DeInit+0x1c0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d101      	bne.n	8007b72 <HAL_GPIO_DeInit+0x86>
 8007b6e:	2304      	movs	r3, #4
 8007b70:	e008      	b.n	8007b84 <HAL_GPIO_DeInit+0x98>
 8007b72:	2307      	movs	r3, #7
 8007b74:	e006      	b.n	8007b84 <HAL_GPIO_DeInit+0x98>
 8007b76:	2303      	movs	r3, #3
 8007b78:	e004      	b.n	8007b84 <HAL_GPIO_DeInit+0x98>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e002      	b.n	8007b84 <HAL_GPIO_DeInit+0x98>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <HAL_GPIO_DeInit+0x98>
 8007b82:	2300      	movs	r3, #0
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	f002 0203 	and.w	r2, r2, #3
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	4093      	lsls	r3, r2
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d132      	bne.n	8007bfa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b94:	4b46      	ldr	r3, [pc, #280]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	4944      	ldr	r1, [pc, #272]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007ba2:	4b43      	ldr	r3, [pc, #268]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	4941      	ldr	r1, [pc, #260]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007bb0:	4b3f      	ldr	r3, [pc, #252]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	493d      	ldr	r1, [pc, #244]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007bbe:	4b3c      	ldr	r3, [pc, #240]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	493a      	ldr	r1, [pc, #232]	; (8007cb0 <HAL_GPIO_DeInit+0x1c4>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	220f      	movs	r2, #15
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007bdc:	4a2e      	ldr	r2, [pc, #184]	; (8007c98 <HAL_GPIO_DeInit+0x1ac>)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	089b      	lsrs	r3, r3, #2
 8007be2:	3302      	adds	r3, #2
 8007be4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	43da      	mvns	r2, r3
 8007bec:	482a      	ldr	r0, [pc, #168]	; (8007c98 <HAL_GPIO_DeInit+0x1ac>)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	089b      	lsrs	r3, r3, #2
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	2103      	movs	r1, #3
 8007c04:	fa01 f303 	lsl.w	r3, r1, r3
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	401a      	ands	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	08da      	lsrs	r2, r3, #3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3208      	adds	r2, #8
 8007c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	220f      	movs	r2, #15
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	08d2      	lsrs	r2, r2, #3
 8007c30:	4019      	ands	r1, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3208      	adds	r2, #8
 8007c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	2103      	movs	r1, #3
 8007c44:	fa01 f303 	lsl.w	r3, r1, r3
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	401a      	ands	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	2101      	movs	r1, #1
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	401a      	ands	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	2103      	movs	r1, #3
 8007c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c72:	43db      	mvns	r3, r3
 8007c74:	401a      	ands	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	f67f af40 	bls.w	8007b08 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40013800 	.word	0x40013800
 8007c9c:	40020000 	.word	0x40020000
 8007ca0:	40020400 	.word	0x40020400
 8007ca4:	40020800 	.word	0x40020800
 8007ca8:	40020c00 	.word	0x40020c00
 8007cac:	40021000 	.word	0x40021000
 8007cb0:	40013c00 	.word	0x40013c00

08007cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
 8007cd0:	e001      	b.n	8007cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cf4:	787b      	ldrb	r3, [r7, #1]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cfa:	887a      	ldrh	r2, [r7, #2]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d00:	e003      	b.n	8007d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	041a      	lsls	r2, r3, #16
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	619a      	str	r2, [r3, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e12b      	b.n	8007f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fb fd72 	bl	8003828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	; 0x24
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d7c:	f002 fe38 	bl	800a9f0 <HAL_RCC_GetPCLK1Freq>
 8007d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4a81      	ldr	r2, [pc, #516]	; (8007f8c <HAL_I2C_Init+0x274>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d807      	bhi.n	8007d9c <HAL_I2C_Init+0x84>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a80      	ldr	r2, [pc, #512]	; (8007f90 <HAL_I2C_Init+0x278>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf94      	ite	ls
 8007d94:	2301      	movls	r3, #1
 8007d96:	2300      	movhi	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	e006      	b.n	8007daa <HAL_I2C_Init+0x92>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a7d      	ldr	r2, [pc, #500]	; (8007f94 <HAL_I2C_Init+0x27c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bf94      	ite	ls
 8007da4:	2301      	movls	r3, #1
 8007da6:	2300      	movhi	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e0e7      	b.n	8007f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a78      	ldr	r2, [pc, #480]	; (8007f98 <HAL_I2C_Init+0x280>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	0c9b      	lsrs	r3, r3, #18
 8007dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	4a6a      	ldr	r2, [pc, #424]	; (8007f8c <HAL_I2C_Init+0x274>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d802      	bhi.n	8007dec <HAL_I2C_Init+0xd4>
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	3301      	adds	r3, #1
 8007dea:	e009      	b.n	8007e00 <HAL_I2C_Init+0xe8>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	4a69      	ldr	r2, [pc, #420]	; (8007f9c <HAL_I2C_Init+0x284>)
 8007df8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfc:	099b      	lsrs	r3, r3, #6
 8007dfe:	3301      	adds	r3, #1
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	430b      	orrs	r3, r1
 8007e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	495c      	ldr	r1, [pc, #368]	; (8007f8c <HAL_I2C_Init+0x274>)
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	d819      	bhi.n	8007e54 <HAL_I2C_Init+0x13c>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	1e59      	subs	r1, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e2e:	1c59      	adds	r1, r3, #1
 8007e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e34:	400b      	ands	r3, r1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_I2C_Init+0x138>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	1e59      	subs	r1, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e4e:	e051      	b.n	8007ef4 <HAL_I2C_Init+0x1dc>
 8007e50:	2304      	movs	r3, #4
 8007e52:	e04f      	b.n	8007ef4 <HAL_I2C_Init+0x1dc>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d111      	bne.n	8007e80 <HAL_I2C_Init+0x168>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	1e58      	subs	r0, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	440b      	add	r3, r1
 8007e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	e012      	b.n	8007ea6 <HAL_I2C_Init+0x18e>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	1e58      	subs	r0, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6859      	ldr	r1, [r3, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	440b      	add	r3, r1
 8007e8e:	0099      	lsls	r1, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e96:	3301      	adds	r3, #1
 8007e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <HAL_I2C_Init+0x196>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e022      	b.n	8007ef4 <HAL_I2C_Init+0x1dc>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_I2C_Init+0x1bc>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	1e58      	subs	r0, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6859      	ldr	r1, [r3, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	440b      	add	r3, r1
 8007ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed2:	e00f      	b.n	8007ef4 <HAL_I2C_Init+0x1dc>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	1e58      	subs	r0, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6859      	ldr	r1, [r3, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	0099      	lsls	r1, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007eea:	3301      	adds	r3, #1
 8007eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	6809      	ldr	r1, [r1, #0]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69da      	ldr	r2, [r3, #28]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6911      	ldr	r1, [r2, #16]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	68d2      	ldr	r2, [r2, #12]
 8007f2e:	4311      	orrs	r1, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	695a      	ldr	r2, [r3, #20]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	000186a0 	.word	0x000186a0
 8007f90:	001e847f 	.word	0x001e847f
 8007f94:	003d08ff 	.word	0x003d08ff
 8007f98:	431bde83 	.word	0x431bde83
 8007f9c:	10624dd3 	.word	0x10624dd3

08007fa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	817b      	strh	r3, [r7, #10]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	813b      	strh	r3, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fba:	f7fe fbc3 	bl	8006744 <HAL_GetTick>
 8007fbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	f040 80d9 	bne.w	8008180 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	2319      	movs	r3, #25
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	496d      	ldr	r1, [pc, #436]	; (800818c <HAL_I2C_Mem_Write+0x1ec>)
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fc7f 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e0cc      	b.n	8008182 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_I2C_Mem_Write+0x56>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e0c5      	b.n	8008182 <HAL_I2C_Mem_Write+0x1e2>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b01      	cmp	r3, #1
 800800a:	d007      	beq.n	800801c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0201 	orr.w	r2, r2, #1
 800801a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800802a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2221      	movs	r2, #33	; 0x21
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a3a      	ldr	r2, [r7, #32]
 8008046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800804c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a4d      	ldr	r2, [pc, #308]	; (8008190 <HAL_I2C_Mem_Write+0x1f0>)
 800805c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800805e:	88f8      	ldrh	r0, [r7, #6]
 8008060:	893a      	ldrh	r2, [r7, #8]
 8008062:	8979      	ldrh	r1, [r7, #10]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	4603      	mov	r3, r0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fab6 	bl	80085e0 <I2C_RequestMemoryWrite>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d052      	beq.n	8008120 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e081      	b.n	8008182 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fd00 	bl	8008a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00d      	beq.n	80080aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b04      	cmp	r3, #4
 8008094:	d107      	bne.n	80080a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e06b      	b.n	8008182 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d11b      	bne.n	8008120 <HAL_I2C_Mem_Write+0x180>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d017      	beq.n	8008120 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	781a      	ldrb	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1aa      	bne.n	800807e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fcec 	bl	8008b0a <I2C_WaitOnBTFFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00d      	beq.n	8008154 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	2b04      	cmp	r3, #4
 800813e:	d107      	bne.n	8008150 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800814e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e016      	b.n	8008182 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	e000      	b.n	8008182 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008180:	2302      	movs	r3, #2
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	00100002 	.word	0x00100002
 8008190:	ffff0000 	.word	0xffff0000

08008194 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	; 0x30
 8008198:	af02      	add	r7, sp, #8
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	817b      	strh	r3, [r7, #10]
 80081a6:	460b      	mov	r3, r1
 80081a8:	813b      	strh	r3, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081ae:	f7fe fac9 	bl	8006744 <HAL_GetTick>
 80081b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b20      	cmp	r3, #32
 80081be:	f040 8208 	bne.w	80085d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	2319      	movs	r3, #25
 80081c8:	2201      	movs	r2, #1
 80081ca:	497b      	ldr	r1, [pc, #492]	; (80083b8 <HAL_I2C_Mem_Read+0x224>)
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fb85 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80081d8:	2302      	movs	r3, #2
 80081da:	e1fb      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_I2C_Mem_Read+0x56>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e1f4      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d007      	beq.n	8008210 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800821e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2222      	movs	r2, #34	; 0x22
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2240      	movs	r2, #64	; 0x40
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008246:	b29a      	uxth	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4a5b      	ldr	r2, [pc, #364]	; (80083bc <HAL_I2C_Mem_Read+0x228>)
 8008250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008252:	88f8      	ldrh	r0, [r7, #6]
 8008254:	893a      	ldrh	r2, [r7, #8]
 8008256:	8979      	ldrh	r1, [r7, #10]
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	4603      	mov	r3, r0
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 fa52 	bl	800870c <I2C_RequestMemoryRead>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e1b0      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d113      	bne.n	80082a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800827a:	2300      	movs	r3, #0
 800827c:	623b      	str	r3, [r7, #32]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	623b      	str	r3, [r7, #32]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e184      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d11b      	bne.n	80082e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e164      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d11b      	bne.n	8008322 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800830a:	2300      	movs	r3, #0
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	e144      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008338:	e138      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800833e:	2b03      	cmp	r3, #3
 8008340:	f200 80f1 	bhi.w	8008526 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	2b01      	cmp	r3, #1
 800834a:	d123      	bne.n	8008394 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fc1b 	bl	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e139      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837c:	3b01      	subs	r3, #1
 800837e:	b29a      	uxth	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008392:	e10b      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008398:	2b02      	cmp	r3, #2
 800839a:	d14e      	bne.n	800843a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	2200      	movs	r2, #0
 80083a4:	4906      	ldr	r1, [pc, #24]	; (80083c0 <HAL_I2C_Mem_Read+0x22c>)
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fa98 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e10e      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
 80083b6:	bf00      	nop
 80083b8:	00100002 	.word	0x00100002
 80083bc:	ffff0000 	.word	0xffff0000
 80083c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691a      	ldr	r2, [r3, #16]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842e:	b29b      	uxth	r3, r3
 8008430:	3b01      	subs	r3, #1
 8008432:	b29a      	uxth	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008438:	e0b8      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	2200      	movs	r2, #0
 8008442:	4966      	ldr	r1, [pc, #408]	; (80085dc <HAL_I2C_Mem_Read+0x448>)
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fa49 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e0bf      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	2200      	movs	r2, #0
 800849e:	494f      	ldr	r1, [pc, #316]	; (80085dc <HAL_I2C_Mem_Read+0x448>)
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fa1b 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e091      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851a:	b29b      	uxth	r3, r3
 800851c:	3b01      	subs	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008524:	e042      	b.n	80085ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 fb2e 	bl	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e04c      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b04      	cmp	r3, #4
 8008578:	d118      	bne.n	80085ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	b2d2      	uxtb	r2, r2
 8008586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f47f aec2 	bne.w	800833a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e000      	b.n	80085d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80085d2:	2302      	movs	r3, #2
  }
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3728      	adds	r7, #40	; 0x28
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	00010004 	.word	0x00010004

080085e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	817b      	strh	r3, [r7, #10]
 80085f2:	460b      	mov	r3, r1
 80085f4:	813b      	strh	r3, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	2200      	movs	r2, #0
 8008612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 f960 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00d      	beq.n	800863e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008630:	d103      	bne.n	800863a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e05f      	b.n	80086fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800864c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	6a3a      	ldr	r2, [r7, #32]
 8008652:	492d      	ldr	r1, [pc, #180]	; (8008708 <I2C_RequestMemoryWrite+0x128>)
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 f998 	bl	800898a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e04c      	b.n	80086fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	6a39      	ldr	r1, [r7, #32]
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 fa02 	bl	8008a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	2b04      	cmp	r3, #4
 8008690:	d107      	bne.n	80086a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e02b      	b.n	80086fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d105      	bne.n	80086b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086ac:	893b      	ldrh	r3, [r7, #8]
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	611a      	str	r2, [r3, #16]
 80086b6:	e021      	b.n	80086fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086b8:	893b      	ldrh	r3, [r7, #8]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	b29b      	uxth	r3, r3
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c8:	6a39      	ldr	r1, [r7, #32]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f9dc 	bl	8008a88 <I2C_WaitOnTXEFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00d      	beq.n	80086f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d107      	bne.n	80086ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e005      	b.n	80086fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086f2:	893b      	ldrh	r3, [r7, #8]
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	00010002 	.word	0x00010002

0800870c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	461a      	mov	r2, r3
 800871a:	4603      	mov	r3, r0
 800871c:	817b      	strh	r3, [r7, #10]
 800871e:	460b      	mov	r3, r1
 8008720:	813b      	strh	r3, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008734:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	2200      	movs	r2, #0
 800874e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f8c2 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876c:	d103      	bne.n	8008776 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008774:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e0aa      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800877a:	897b      	ldrh	r3, [r7, #10]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008788:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	6a3a      	ldr	r2, [r7, #32]
 800878e:	4952      	ldr	r1, [pc, #328]	; (80088d8 <I2C_RequestMemoryRead+0x1cc>)
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f8fa 	bl	800898a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e097      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	617b      	str	r3, [r7, #20]
 80087b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b8:	6a39      	ldr	r1, [r7, #32]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f964 	bl	8008a88 <I2C_WaitOnTXEFlagUntilTimeout>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00d      	beq.n	80087e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	2b04      	cmp	r3, #4
 80087cc:	d107      	bne.n	80087de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e076      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d105      	bne.n	80087f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087e8:	893b      	ldrh	r3, [r7, #8]
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	611a      	str	r2, [r3, #16]
 80087f2:	e021      	b.n	8008838 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087f4:	893b      	ldrh	r3, [r7, #8]
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	6a39      	ldr	r1, [r7, #32]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f93e 	bl	8008a88 <I2C_WaitOnTXEFlagUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00d      	beq.n	800882e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b04      	cmp	r3, #4
 8008818:	d107      	bne.n	800882a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008828:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e050      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800882e:	893b      	ldrh	r3, [r7, #8]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883a:	6a39      	ldr	r1, [r7, #32]
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f923 	bl	8008a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00d      	beq.n	8008864 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	2b04      	cmp	r3, #4
 800884e:	d107      	bne.n	8008860 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800885e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e035      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008872:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	2200      	movs	r2, #0
 800887c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f82b 	bl	80088dc <I2C_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00d      	beq.n	80088a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800889a:	d103      	bne.n	80088a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e013      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088a8:	897b      	ldrh	r3, [r7, #10]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	6a3a      	ldr	r2, [r7, #32]
 80088bc:	4906      	ldr	r1, [pc, #24]	; (80088d8 <I2C_RequestMemoryRead+0x1cc>)
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 f863 	bl	800898a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	00010002 	.word	0x00010002

080088dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088ec:	e025      	b.n	800893a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f4:	d021      	beq.n	800893a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f6:	f7fd ff25 	bl	8006744 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d302      	bcc.n	800890c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d116      	bne.n	800893a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	f043 0220 	orr.w	r2, r3, #32
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e023      	b.n	8008982 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	0c1b      	lsrs	r3, r3, #16
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d10d      	bne.n	8008960 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	43da      	mvns	r2, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4013      	ands	r3, r2
 8008950:	b29b      	uxth	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	bf0c      	ite	eq
 8008956:	2301      	moveq	r3, #1
 8008958:	2300      	movne	r3, #0
 800895a:	b2db      	uxtb	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	e00c      	b.n	800897a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	43da      	mvns	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4013      	ands	r3, r2
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	bf0c      	ite	eq
 8008972:	2301      	moveq	r3, #1
 8008974:	2300      	movne	r3, #0
 8008976:	b2db      	uxtb	r3, r3
 8008978:	461a      	mov	r2, r3
 800897a:	79fb      	ldrb	r3, [r7, #7]
 800897c:	429a      	cmp	r2, r3
 800897e:	d0b6      	beq.n	80088ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008998:	e051      	b.n	8008a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a8:	d123      	bne.n	80089f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	f043 0204 	orr.w	r2, r3, #4
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e046      	b.n	8008a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d021      	beq.n	8008a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fa:	f7fd fea3 	bl	8006744 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d302      	bcc.n	8008a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d116      	bne.n	8008a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e020      	b.n	8008a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d10c      	bne.n	8008a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	43da      	mvns	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	e00b      	b.n	8008a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	43da      	mvns	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d18d      	bne.n	800899a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a94:	e02d      	b.n	8008af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f8ce 	bl	8008c38 <I2C_IsAcknowledgeFailed>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e02d      	b.n	8008b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aac:	d021      	beq.n	8008af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aae:	f7fd fe49 	bl	8006744 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d302      	bcc.n	8008ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d116      	bne.n	8008af2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2220      	movs	r2, #32
 8008ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	f043 0220 	orr.w	r2, r3, #32
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e007      	b.n	8008b02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afc:	2b80      	cmp	r3, #128	; 0x80
 8008afe:	d1ca      	bne.n	8008a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b16:	e02d      	b.n	8008b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f88d 	bl	8008c38 <I2C_IsAcknowledgeFailed>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e02d      	b.n	8008b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2e:	d021      	beq.n	8008b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b30:	f7fd fe08 	bl	8006744 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d302      	bcc.n	8008b46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d116      	bne.n	8008b74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b60:	f043 0220 	orr.w	r2, r3, #32
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e007      	b.n	8008b84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d1ca      	bne.n	8008b18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b98:	e042      	b.n	8008c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d119      	bne.n	8008bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0210 	mvn.w	r2, #16
 8008bb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e029      	b.n	8008c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bdc:	f7fd fdb2 	bl	8006744 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d302      	bcc.n	8008bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d116      	bne.n	8008c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	f043 0220 	orr.w	r2, r3, #32
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e007      	b.n	8008c30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2a:	2b40      	cmp	r3, #64	; 0x40
 8008c2c:	d1b5      	bne.n	8008b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4e:	d11b      	bne.n	8008c88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c74:	f043 0204 	orr.w	r2, r3, #4
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e000      	b.n	8008c8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c98:	b08f      	sub	sp, #60	; 0x3c
 8008c9a:	af0a      	add	r7, sp, #40	; 0x28
 8008c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e10f      	b.n	8008ec8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d106      	bne.n	8008cc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f007 fd90 	bl	80107e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2203      	movs	r2, #3
 8008ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f004 f877 	bl	800cdda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	687e      	ldr	r6, [r7, #4]
 8008cf4:	466d      	mov	r5, sp
 8008cf6:	f106 0410 	add.w	r4, r6, #16
 8008cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d0a:	1d33      	adds	r3, r6, #4
 8008d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d0e:	6838      	ldr	r0, [r7, #0]
 8008d10:	f003 ff4e 	bl	800cbb0 <USB_CoreInit>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e0d0      	b.n	8008ec8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f004 f865 	bl	800cdfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]
 8008d36:	e04a      	b.n	8008dce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d38:	7bfa      	ldrb	r2, [r7, #15]
 8008d3a:	6879      	ldr	r1, [r7, #4]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	333d      	adds	r3, #61	; 0x3d
 8008d48:	2201      	movs	r2, #1
 8008d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d4c:	7bfa      	ldrb	r2, [r7, #15]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	333c      	adds	r3, #60	; 0x3c
 8008d5c:	7bfa      	ldrb	r2, [r7, #15]
 8008d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d60:	7bfa      	ldrb	r2, [r7, #15]
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	b298      	uxth	r0, r3
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	3344      	adds	r3, #68	; 0x44
 8008d74:	4602      	mov	r2, r0
 8008d76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d78:	7bfa      	ldrb	r2, [r7, #15]
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	3340      	adds	r3, #64	; 0x40
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d8c:	7bfa      	ldrb	r2, [r7, #15]
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	3348      	adds	r3, #72	; 0x48
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008da0:	7bfa      	ldrb	r2, [r7, #15]
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4613      	mov	r3, r2
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	440b      	add	r3, r1
 8008dae:	334c      	adds	r3, #76	; 0x4c
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	3354      	adds	r3, #84	; 0x54
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	7bfa      	ldrb	r2, [r7, #15]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d3af      	bcc.n	8008d38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e044      	b.n	8008e68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008dde:	7bfa      	ldrb	r2, [r7, #15]
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4613      	mov	r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008df0:	2200      	movs	r2, #0
 8008df2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008df4:	7bfa      	ldrb	r2, [r7, #15]
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008e06:	7bfa      	ldrb	r2, [r7, #15]
 8008e08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e20:	7bfa      	ldrb	r2, [r7, #15]
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e36:	7bfa      	ldrb	r2, [r7, #15]
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e4c:	7bfa      	ldrb	r2, [r7, #15]
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4613      	mov	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	3301      	adds	r3, #1
 8008e66:	73fb      	strb	r3, [r7, #15]
 8008e68:	7bfa      	ldrb	r2, [r7, #15]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d3b5      	bcc.n	8008dde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	687e      	ldr	r6, [r7, #4]
 8008e7a:	466d      	mov	r5, sp
 8008e7c:	f106 0410 	add.w	r4, r6, #16
 8008e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e90:	1d33      	adds	r3, r6, #4
 8008e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e94:	6838      	ldr	r0, [r7, #0]
 8008e96:	f003 fffd 	bl	800ce94 <USB_DevInit>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e00d      	b.n	8008ec8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f005 f94c 	bl	800e15e <USB_DevDisconnect>

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d101      	bne.n	8008eec <HAL_PCD_Start+0x1c>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	e020      	b.n	8008f2e <HAL_PCD_Start+0x5e>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d109      	bne.n	8008f10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d005      	beq.n	8008f10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f003 ff4f 	bl	800cdb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f005 f8fc 	bl	800e11c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f36:	b590      	push	{r4, r7, lr}
 8008f38:	b08d      	sub	sp, #52	; 0x34
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f005 f9ba 	bl	800e2c6 <USB_GetMode>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 848a 	bne.w	800986e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f005 f91e 	bl	800e1a0 <USB_ReadInterrupts>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8480 	beq.w	800986c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f005 f90b 	bl	800e1a0 <USB_ReadInterrupts>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d107      	bne.n	8008fa4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695a      	ldr	r2, [r3, #20]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f002 0202 	and.w	r2, r2, #2
 8008fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f005 f8f9 	bl	800e1a0 <USB_ReadInterrupts>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d161      	bne.n	800907c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699a      	ldr	r2, [r3, #24]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0210 	bic.w	r2, r2, #16
 8008fc6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	f003 020f 	and.w	r2, r3, #15
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	0c5b      	lsrs	r3, r3, #17
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d124      	bne.n	800903e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d035      	beq.n	800906c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	091b      	lsrs	r3, r3, #4
 8009008:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800900a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800900e:	b29b      	uxth	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6a38      	ldr	r0, [r7, #32]
 8009014:	f004 ff30 	bl	800de78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	691a      	ldr	r2, [r3, #16]
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	091b      	lsrs	r3, r3, #4
 8009020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009024:	441a      	add	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	6a1a      	ldr	r2, [r3, #32]
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	091b      	lsrs	r3, r3, #4
 8009032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009036:	441a      	add	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	621a      	str	r2, [r3, #32]
 800903c:	e016      	b.n	800906c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	0c5b      	lsrs	r3, r3, #17
 8009042:	f003 030f 	and.w	r3, r3, #15
 8009046:	2b06      	cmp	r3, #6
 8009048:	d110      	bne.n	800906c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009050:	2208      	movs	r2, #8
 8009052:	4619      	mov	r1, r3
 8009054:	6a38      	ldr	r0, [r7, #32]
 8009056:	f004 ff0f 	bl	800de78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	091b      	lsrs	r3, r3, #4
 8009062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009066:	441a      	add	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0210 	orr.w	r2, r2, #16
 800907a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4618      	mov	r0, r3
 8009082:	f005 f88d 	bl	800e1a0 <USB_ReadInterrupts>
 8009086:	4603      	mov	r3, r0
 8009088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800908c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009090:	f040 80a7 	bne.w	80091e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f005 f892 	bl	800e1c6 <USB_ReadDevAllOutEpInterrupt>
 80090a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80090a4:	e099      	b.n	80091da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 808e 	beq.w	80091ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f005 f8b6 	bl	800e22e <USB_ReadDevOutEPInterrupt>
 80090c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	461a      	mov	r2, r3
 80090dc:	2301      	movs	r3, #1
 80090de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80090e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fec2 	bl	8009e6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00c      	beq.n	800910c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	461a      	mov	r2, r3
 8009100:	2308      	movs	r3, #8
 8009102:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 ff98 	bl	800a03c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b00      	cmp	r3, #0
 8009114:	d008      	beq.n	8009128 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009122:	461a      	mov	r2, r3
 8009124:	2310      	movs	r3, #16
 8009126:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d030      	beq.n	8009194 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	2b80      	cmp	r3, #128	; 0x80
 800913c:	d109      	bne.n	8009152 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800914c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009150:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009154:	4613      	mov	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	3304      	adds	r3, #4
 8009166:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	78db      	ldrb	r3, [r3, #3]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d108      	bne.n	8009182 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2200      	movs	r2, #0
 8009174:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	b2db      	uxtb	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f007 fc2f 	bl	80109e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	461a      	mov	r2, r3
 8009190:	2302      	movs	r3, #2
 8009192:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d008      	beq.n	80091b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	2320      	movs	r3, #32
 80091ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	461a      	mov	r2, r3
 80091c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	3301      	adds	r3, #1
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	085b      	lsrs	r3, r3, #1
 80091d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f47f af62 	bne.w	80090a6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f004 ffda 	bl	800e1a0 <USB_ReadInterrupts>
 80091ec:	4603      	mov	r3, r0
 80091ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091f6:	f040 80db 	bne.w	80093b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f004 fffb 	bl	800e1fa <USB_ReadDevAllInEpInterrupt>
 8009204:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800920a:	e0cd      	b.n	80093a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80c2 	beq.w	800939c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f005 f821 	bl	800e26a <USB_ReadDevInEPInterrupt>
 8009228:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d057      	beq.n	80092e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	2201      	movs	r2, #1
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	43db      	mvns	r3, r3
 800924e:	69f9      	ldr	r1, [r7, #28]
 8009250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009254:	4013      	ands	r3, r2
 8009256:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	461a      	mov	r2, r3
 8009266:	2301      	movs	r3, #1
 8009268:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d132      	bne.n	80092d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009276:	4613      	mov	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	440b      	add	r3, r1
 8009280:	334c      	adds	r3, #76	; 0x4c
 8009282:	6819      	ldr	r1, [r3, #0]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009288:	4613      	mov	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4403      	add	r3, r0
 8009292:	3348      	adds	r3, #72	; 0x48
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4419      	add	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929c:	4613      	mov	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4403      	add	r3, r0
 80092a6:	334c      	adds	r3, #76	; 0x4c
 80092a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d113      	bne.n	80092d8 <HAL_PCD_IRQHandler+0x3a2>
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	3354      	adds	r3, #84	; 0x54
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d108      	bne.n	80092d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092d0:	461a      	mov	r2, r3
 80092d2:	2101      	movs	r1, #1
 80092d4:	f005 f828 	bl	800e328 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f007 fb03 	bl	80108ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f003 0308 	and.w	r3, r3, #8
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d008      	beq.n	8009300 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fa:	461a      	mov	r2, r3
 80092fc:	2308      	movs	r3, #8
 80092fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f003 0310 	and.w	r3, r3, #16
 8009306:	2b00      	cmp	r3, #0
 8009308:	d008      	beq.n	800931c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009316:	461a      	mov	r2, r3
 8009318:	2310      	movs	r3, #16
 800931a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d008      	beq.n	8009338 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	461a      	mov	r2, r3
 8009334:	2340      	movs	r3, #64	; 0x40
 8009336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d023      	beq.n	800938a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009344:	6a38      	ldr	r0, [r7, #32]
 8009346:	f003 ff09 	bl	800d15c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800934a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934c:	4613      	mov	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	3338      	adds	r3, #56	; 0x38
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	4413      	add	r3, r2
 800935a:	3304      	adds	r3, #4
 800935c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	78db      	ldrb	r3, [r3, #3]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d108      	bne.n	8009378 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	b2db      	uxtb	r3, r3
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f007 fb46 	bl	8010a04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009384:	461a      	mov	r2, r3
 8009386:	2302      	movs	r3, #2
 8009388:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fcdb 	bl	8009d52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	3301      	adds	r3, #1
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f47f af2e 	bne.w	800920c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f004 fef3 	bl	800e1a0 <USB_ReadInterrupts>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093c4:	d122      	bne.n	800940c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093d4:	f023 0301 	bic.w	r3, r3, #1
 80093d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d108      	bne.n	80093f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80093ec:	2100      	movs	r1, #0
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fec2 	bl	800a178 <HAL_PCDEx_LPM_Callback>
 80093f4:	e002      	b.n	80093fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f007 fae4 	bl	80109c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695a      	ldr	r2, [r3, #20]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800940a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4618      	mov	r0, r3
 8009412:	f004 fec5 	bl	800e1a0 <USB_ReadInterrupts>
 8009416:	4603      	mov	r3, r0
 8009418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800941c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009420:	d112      	bne.n	8009448 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b01      	cmp	r3, #1
 8009430:	d102      	bne.n	8009438 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f007 faa0 	bl	8010978 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695a      	ldr	r2, [r3, #20]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009446:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4618      	mov	r0, r3
 800944e:	f004 fea7 	bl	800e1a0 <USB_ReadInterrupts>
 8009452:	4603      	mov	r3, r0
 8009454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945c:	f040 80b7 	bne.w	80095ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2110      	movs	r1, #16
 800947a:	4618      	mov	r0, r3
 800947c:	f003 fe6e 	bl	800d15c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009480:	2300      	movs	r3, #0
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009484:	e046      	b.n	8009514 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009492:	461a      	mov	r2, r3
 8009494:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009498:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c6:	461a      	mov	r2, r3
 80094c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094de:	0151      	lsls	r1, r2, #5
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	440a      	add	r2, r1
 80094e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094fe:	0151      	lsls	r1, r2, #5
 8009500:	69fa      	ldr	r2, [r7, #28]
 8009502:	440a      	add	r2, r1
 8009504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009508:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800950c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	3301      	adds	r3, #1
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800951a:	429a      	cmp	r2, r3
 800951c:	d3b3      	bcc.n	8009486 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800952c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009530:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	d016      	beq.n	8009568 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800954a:	f043 030b 	orr.w	r3, r3, #11
 800954e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009560:	f043 030b 	orr.w	r3, r3, #11
 8009564:	6453      	str	r3, [r2, #68]	; 0x44
 8009566:	e015      	b.n	8009594 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009576:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800957a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800957e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	69fa      	ldr	r2, [r7, #28]
 800958a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800958e:	f043 030b 	orr.w	r3, r3, #11
 8009592:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80095b8:	461a      	mov	r2, r3
 80095ba:	f004 feb5 	bl	800e328 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	695a      	ldr	r2, [r3, #20]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80095cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f004 fde4 	bl	800e1a0 <USB_ReadInterrupts>
 80095d8:	4603      	mov	r3, r0
 80095da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e2:	d124      	bne.n	800962e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f004 fe7a 	bl	800e2e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f003 fe2f 	bl	800d256 <USB_GetDevSpeed>
 80095f8:	4603      	mov	r3, r0
 80095fa:	461a      	mov	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681c      	ldr	r4, [r3, #0]
 8009604:	f001 f9e8 	bl	800a9d8 <HAL_RCC_GetHCLKFreq>
 8009608:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800960e:	b2db      	uxtb	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	4620      	mov	r0, r4
 8009614:	f003 fb2e 	bl	800cc74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f007 f98e 	bl	801093a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	695a      	ldr	r2, [r3, #20]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800962c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f004 fdb4 	bl	800e1a0 <USB_ReadInterrupts>
 8009638:	4603      	mov	r3, r0
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b08      	cmp	r3, #8
 8009640:	d10a      	bne.n	8009658 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f007 f96b 	bl	801091e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695a      	ldr	r2, [r3, #20]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f002 0208 	and.w	r2, r2, #8
 8009656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f004 fd9f 	bl	800e1a0 <USB_ReadInterrupts>
 8009662:	4603      	mov	r3, r0
 8009664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	d122      	bne.n	80096b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009678:	2301      	movs	r3, #1
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
 800967c:	e014      	b.n	80096a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	4613      	mov	r3, r2
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d105      	bne.n	80096a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	b2db      	uxtb	r3, r3
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fb27 	bl	8009cf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	3301      	adds	r3, #1
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d3e5      	bcc.n	800967e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f004 fd72 	bl	800e1a0 <USB_ReadInterrupts>
 80096bc:	4603      	mov	r3, r0
 80096be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c6:	d13b      	bne.n	8009740 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096c8:	2301      	movs	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
 80096cc:	e02b      	b.n	8009726 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	4613      	mov	r3, r2
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	3340      	adds	r3, #64	; 0x40
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d115      	bne.n	8009720 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80096f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da12      	bge.n	8009720 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fe:	4613      	mov	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	333f      	adds	r3, #63	; 0x3f
 800970a:	2201      	movs	r2, #1
 800970c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009716:	b2db      	uxtb	r3, r3
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fae8 	bl	8009cf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	3301      	adds	r3, #1
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972c:	429a      	cmp	r2, r3
 800972e:	d3ce      	bcc.n	80096ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	695a      	ldr	r2, [r3, #20]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800973e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4618      	mov	r0, r3
 8009746:	f004 fd2b 	bl	800e1a0 <USB_ReadInterrupts>
 800974a:	4603      	mov	r3, r0
 800974c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009754:	d155      	bne.n	8009802 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009756:	2301      	movs	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
 800975a:	e045      	b.n	80097e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009770:	4613      	mov	r3, r2
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d12e      	bne.n	80097e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009784:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009786:	2b00      	cmp	r3, #0
 8009788:	da2b      	bge.n	80097e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009796:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800979a:	429a      	cmp	r2, r3
 800979c:	d121      	bne.n	80097e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a2:	4613      	mov	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80097b0:	2201      	movs	r2, #1
 80097b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097de:	6053      	str	r3, [r2, #4]
            break;
 80097e0:	e007      	b.n	80097f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	3301      	adds	r3, #1
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d3b4      	bcc.n	800975c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f004 fcca 	bl	800e1a0 <USB_ReadInterrupts>
 800980c:	4603      	mov	r3, r0
 800980e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009816:	d10a      	bne.n	800982e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f007 f905 	bl	8010a28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800982c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f004 fcb4 	bl	800e1a0 <USB_ReadInterrupts>
 8009838:	4603      	mov	r3, r0
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b04      	cmp	r3, #4
 8009840:	d115      	bne.n	800986e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f007 f8f5 	bl	8010a44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6859      	ldr	r1, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	e000      	b.n	800986e <HAL_PCD_IRQHandler+0x938>
      return;
 800986c:	bf00      	nop
    }
  }
}
 800986e:	3734      	adds	r7, #52	; 0x34
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}

08009874 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_PCD_SetAddress+0x1a>
 800988a:	2302      	movs	r3, #2
 800988c:	e013      	b.n	80098b6 <HAL_PCD_SetAddress+0x42>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	78fa      	ldrb	r2, [r7, #3]
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f004 fc12 	bl	800e0d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	461a      	mov	r2, r3
 80098cc:	4603      	mov	r3, r0
 80098ce:	70fb      	strb	r3, [r7, #3]
 80098d0:	460b      	mov	r3, r1
 80098d2:	803b      	strh	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80098dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	da0f      	bge.n	8009904 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	f003 020f 	and.w	r2, r3, #15
 80098ea:	4613      	mov	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	3338      	adds	r3, #56	; 0x38
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	3304      	adds	r3, #4
 80098fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2201      	movs	r2, #1
 8009900:	705a      	strb	r2, [r3, #1]
 8009902:	e00f      	b.n	8009924 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	f003 020f 	and.w	r2, r3, #15
 800990a:	4613      	mov	r3, r2
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	4413      	add	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	4413      	add	r3, r2
 800991a:	3304      	adds	r3, #4
 800991c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009930:	883a      	ldrh	r2, [r7, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	78ba      	ldrb	r2, [r7, #2]
 800993a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	b29a      	uxth	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800994e:	78bb      	ldrb	r3, [r7, #2]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d102      	bne.n	800995a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_PCD_EP_Open+0xaa>
 8009964:	2302      	movs	r3, #2
 8009966:	e00e      	b.n	8009986 <HAL_PCD_EP_Open+0xc8>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68f9      	ldr	r1, [r7, #12]
 8009976:	4618      	mov	r0, r3
 8009978:	f003 fc92 	bl	800d2a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009984:	7afb      	ldrb	r3, [r7, #11]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800999a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da0f      	bge.n	80099c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	4613      	mov	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	4413      	add	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	3338      	adds	r3, #56	; 0x38
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	4413      	add	r3, r2
 80099b6:	3304      	adds	r3, #4
 80099b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2201      	movs	r2, #1
 80099be:	705a      	strb	r2, [r3, #1]
 80099c0:	e00f      	b.n	80099e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	f003 020f 	and.w	r2, r3, #15
 80099c8:	4613      	mov	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	4413      	add	r3, r2
 80099d8:	3304      	adds	r3, #4
 80099da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	f003 030f 	and.w	r3, r3, #15
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d101      	bne.n	80099fc <HAL_PCD_EP_Close+0x6e>
 80099f8:	2302      	movs	r3, #2
 80099fa:	e00e      	b.n	8009a1a <HAL_PCD_EP_Close+0x8c>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68f9      	ldr	r1, [r7, #12]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f003 fcd0 	bl	800d3b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b086      	sub	sp, #24
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	603b      	str	r3, [r7, #0]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	f003 020f 	and.w	r2, r3, #15
 8009a38:	4613      	mov	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	3304      	adds	r3, #4
 8009a4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d102      	bne.n	8009a7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	461a      	mov	r2, r3
 8009a94:	6979      	ldr	r1, [r7, #20]
 8009a96:	f003 ffaf 	bl	800d9f8 <USB_EP0StartXfer>
 8009a9a:	e008      	b.n	8009aae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6979      	ldr	r1, [r7, #20]
 8009aaa:	f003 fd5d 	bl	800d568 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	f003 020f 	and.w	r2, r3, #15
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	4613      	mov	r3, r2
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	440b      	add	r3, r1
 8009ad6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009ada:	681b      	ldr	r3, [r3, #0]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	607a      	str	r2, [r7, #4]
 8009af2:	603b      	str	r3, [r7, #0]
 8009af4:	460b      	mov	r3, r1
 8009af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	f003 020f 	and.w	r2, r3, #15
 8009afe:	4613      	mov	r3, r2
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	3338      	adds	r3, #56	; 0x38
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2201      	movs	r2, #1
 8009b26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	f003 030f 	and.w	r3, r3, #15
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d102      	bne.n	8009b42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	f003 030f 	and.w	r3, r3, #15
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6818      	ldr	r0, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	6979      	ldr	r1, [r7, #20]
 8009b5a:	f003 ff4d 	bl	800d9f8 <USB_EP0StartXfer>
 8009b5e:	e008      	b.n	8009b72 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6818      	ldr	r0, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6979      	ldr	r1, [r7, #20]
 8009b6e:	f003 fcfb 	bl	800d568 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	f003 020f 	and.w	r2, r3, #15
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d901      	bls.n	8009b9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e050      	b.n	8009c3c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	da0f      	bge.n	8009bc2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ba2:	78fb      	ldrb	r3, [r7, #3]
 8009ba4:	f003 020f 	and.w	r2, r3, #15
 8009ba8:	4613      	mov	r3, r2
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	4413      	add	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	3338      	adds	r3, #56	; 0x38
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	705a      	strb	r2, [r3, #1]
 8009bc0:	e00d      	b.n	8009bde <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d101      	bne.n	8009bfe <HAL_PCD_EP_SetStall+0x82>
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e01e      	b.n	8009c3c <HAL_PCD_EP_SetStall+0xc0>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f004 f98b 	bl	800df28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	b2d9      	uxtb	r1, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f004 fb7b 	bl	800e328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	f003 020f 	and.w	r2, r3, #15
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d901      	bls.n	8009c62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e042      	b.n	8009ce8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da0f      	bge.n	8009c8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	4613      	mov	r3, r2
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	3338      	adds	r3, #56	; 0x38
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	3304      	adds	r3, #4
 8009c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2201      	movs	r2, #1
 8009c86:	705a      	strb	r2, [r3, #1]
 8009c88:	e00f      	b.n	8009caa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	f003 020f 	and.w	r2, r3, #15
 8009c90:	4613      	mov	r3, r2
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d101      	bne.n	8009cca <HAL_PCD_EP_ClrStall+0x86>
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	e00e      	b.n	8009ce8 <HAL_PCD_EP_ClrStall+0xa4>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f004 f993 	bl	800e004 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	da0c      	bge.n	8009d1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	f003 020f 	and.w	r2, r3, #15
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	3338      	adds	r3, #56	; 0x38
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	3304      	adds	r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e00c      	b.n	8009d38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	4613      	mov	r3, r2
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	4413      	add	r3, r2
 8009d34:	3304      	adds	r3, #4
 8009d36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f003 ffb2 	bl	800dca8 <USB_EPStopXfer>
 8009d44:	4603      	mov	r3, r0
 8009d46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009d48:	7afb      	ldrb	r3, [r7, #11]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b08a      	sub	sp, #40	; 0x28
 8009d56:	af02      	add	r7, sp, #8
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	3338      	adds	r3, #56	; 0x38
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	4413      	add	r3, r2
 8009d76:	3304      	adds	r3, #4
 8009d78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6a1a      	ldr	r2, [r3, #32]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d901      	bls.n	8009d8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e06c      	b.n	8009e64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d902      	bls.n	8009da6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	3303      	adds	r3, #3
 8009daa:	089b      	lsrs	r3, r3, #2
 8009dac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009dae:	e02b      	b.n	8009e08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	699a      	ldr	r2, [r3, #24]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	69fa      	ldr	r2, [r7, #28]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d902      	bls.n	8009dcc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	3303      	adds	r3, #3
 8009dd0:	089b      	lsrs	r3, r3, #2
 8009dd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6919      	ldr	r1, [r3, #16]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4603      	mov	r3, r0
 8009dea:	6978      	ldr	r0, [r7, #20]
 8009dec:	f004 f806 	bl	800ddfc <USB_WritePacket>

    ep->xfer_buff  += len;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691a      	ldr	r2, [r3, #16]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	441a      	add	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a1a      	ldr	r2, [r3, #32]
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	441a      	add	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d809      	bhi.n	8009e32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6a1a      	ldr	r2, [r3, #32]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d203      	bcs.n	8009e32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1be      	bne.n	8009db0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	699a      	ldr	r2, [r3, #24]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d811      	bhi.n	8009e62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	f003 030f 	and.w	r3, r3, #15
 8009e44:	2201      	movs	r2, #1
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	43db      	mvns	r3, r3
 8009e58:	6939      	ldr	r1, [r7, #16]
 8009e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e5e:	4013      	ands	r3, r2
 8009e60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3720      	adds	r7, #32
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	333c      	adds	r3, #60	; 0x3c
 8009e84:	3304      	adds	r3, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d17b      	bne.n	8009f9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d015      	beq.n	8009ed8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	4a61      	ldr	r2, [pc, #388]	; (800a034 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	f240 80b9 	bls.w	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80b3 	beq.w	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ed4:	6093      	str	r3, [r2, #8]
 8009ed6:	e0a7      	b.n	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2320      	movs	r3, #32
 8009ef2:	6093      	str	r3, [r2, #8]
 8009ef4:	e098      	b.n	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8093 	bne.w	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	4a4b      	ldr	r2, [pc, #300]	; (800a034 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d90f      	bls.n	8009f2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f20:	461a      	mov	r2, r3
 8009f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f26:	6093      	str	r3, [r2, #8]
 8009f28:	e07e      	b.n	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	69da      	ldr	r2, [r3, #28]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	0159      	lsls	r1, r3, #5
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	440b      	add	r3, r1
 8009f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f56:	1ad2      	subs	r2, r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d114      	bne.n	8009f8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6818      	ldr	r0, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f74:	461a      	mov	r2, r3
 8009f76:	2101      	movs	r1, #1
 8009f78:	f004 f9d6 	bl	800e328 <USB_EP0_OutStart>
 8009f7c:	e006      	b.n	8009f8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	691a      	ldr	r2, [r3, #16]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	441a      	add	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f006 fc8e 	bl	80108b4 <HAL_PCD_DataOutStageCallback>
 8009f98:	e046      	b.n	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	4a26      	ldr	r2, [pc, #152]	; (800a038 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d124      	bne.n	8009fec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fbe:	6093      	str	r3, [r2, #8]
 8009fc0:	e032      	b.n	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f003 0320 	and.w	r3, r3, #32
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d008      	beq.n	8009fde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2320      	movs	r3, #32
 8009fdc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f006 fc65 	bl	80108b4 <HAL_PCD_DataOutStageCallback>
 8009fea:	e01d      	b.n	800a028 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d114      	bne.n	800a01c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d108      	bne.n	800a01c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a014:	461a      	mov	r2, r3
 800a016:	2100      	movs	r1, #0
 800a018:	f004 f986 	bl	800e328 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f006 fc46 	bl	80108b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3720      	adds	r7, #32
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	4f54300a 	.word	0x4f54300a
 800a038:	4f54310a 	.word	0x4f54310a

0800a03c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	333c      	adds	r3, #60	; 0x3c
 800a054:	3304      	adds	r3, #4
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d90e      	bls.n	800a090 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d009      	beq.n	800a090 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a088:	461a      	mov	r2, r3
 800a08a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a08e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f006 fbfd 	bl	8010890 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4a0a      	ldr	r2, [pc, #40]	; (800a0c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d90c      	bls.n	800a0b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d108      	bne.n	800a0b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	f004 f938 	bl	800e328 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	4f54300a 	.word	0x4f54300a

0800a0c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d107      	bne.n	800a0f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a0e6:	883b      	ldrh	r3, [r7, #0]
 800a0e8:	0419      	lsls	r1, r3, #16
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a0f4:	e028      	b.n	800a148 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	0c1b      	lsrs	r3, r3, #16
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	4413      	add	r3, r2
 800a102:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]
 800a108:	e00d      	b.n	800a126 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	3340      	adds	r3, #64	; 0x40
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	0c1b      	lsrs	r3, r3, #16
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	4413      	add	r3, r2
 800a11e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	3301      	adds	r3, #1
 800a124:	73fb      	strb	r3, [r7, #15]
 800a126:	7bfa      	ldrb	r2, [r7, #15]
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d3ec      	bcc.n	800a10a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a130:	883b      	ldrh	r3, [r7, #0]
 800a132:	0418      	lsls	r0, r3, #16
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6819      	ldr	r1, [r3, #0]
 800a138:	78fb      	ldrb	r3, [r7, #3]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	4302      	orrs	r2, r0
 800a140:	3340      	adds	r3, #64	; 0x40
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	887a      	ldrh	r2, [r7, #2]
 800a168:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e267      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d075      	beq.n	800a29a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1ae:	4b88      	ldr	r3, [pc, #544]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 030c 	and.w	r3, r3, #12
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d00c      	beq.n	800a1d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1ba:	4b85      	ldr	r3, [pc, #532]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1c2:	2b08      	cmp	r3, #8
 800a1c4:	d112      	bne.n	800a1ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1c6:	4b82      	ldr	r3, [pc, #520]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1d2:	d10b      	bne.n	800a1ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1d4:	4b7e      	ldr	r3, [pc, #504]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d05b      	beq.n	800a298 <HAL_RCC_OscConfig+0x108>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d157      	bne.n	800a298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e242      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f4:	d106      	bne.n	800a204 <HAL_RCC_OscConfig+0x74>
 800a1f6:	4b76      	ldr	r3, [pc, #472]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a75      	ldr	r2, [pc, #468]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a1fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	e01d      	b.n	800a240 <HAL_RCC_OscConfig+0xb0>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a20c:	d10c      	bne.n	800a228 <HAL_RCC_OscConfig+0x98>
 800a20e:	4b70      	ldr	r3, [pc, #448]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a6f      	ldr	r2, [pc, #444]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	4b6d      	ldr	r3, [pc, #436]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a6c      	ldr	r2, [pc, #432]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e00b      	b.n	800a240 <HAL_RCC_OscConfig+0xb0>
 800a228:	4b69      	ldr	r3, [pc, #420]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a68      	ldr	r2, [pc, #416]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	4b66      	ldr	r3, [pc, #408]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a65      	ldr	r2, [pc, #404]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a23a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a23e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d013      	beq.n	800a270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a248:	f7fc fa7c 	bl	8006744 <HAL_GetTick>
 800a24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a24e:	e008      	b.n	800a262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a250:	f7fc fa78 	bl	8006744 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b64      	cmp	r3, #100	; 0x64
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e207      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a262:	4b5b      	ldr	r3, [pc, #364]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f0      	beq.n	800a250 <HAL_RCC_OscConfig+0xc0>
 800a26e:	e014      	b.n	800a29a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a270:	f7fc fa68 	bl	8006744 <HAL_GetTick>
 800a274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a276:	e008      	b.n	800a28a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a278:	f7fc fa64 	bl	8006744 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b64      	cmp	r3, #100	; 0x64
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e1f3      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a28a:	4b51      	ldr	r3, [pc, #324]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f0      	bne.n	800a278 <HAL_RCC_OscConfig+0xe8>
 800a296:	e000      	b.n	800a29a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d063      	beq.n	800a36e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2a6:	4b4a      	ldr	r3, [pc, #296]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f003 030c 	and.w	r3, r3, #12
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2b2:	4b47      	ldr	r3, [pc, #284]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2ba:	2b08      	cmp	r3, #8
 800a2bc:	d11c      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2be:	4b44      	ldr	r3, [pc, #272]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d116      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ca:	4b41      	ldr	r3, [pc, #260]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d005      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x152>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d001      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e1c7      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2e2:	4b3b      	ldr	r3, [pc, #236]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	4937      	ldr	r1, [pc, #220]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2f6:	e03a      	b.n	800a36e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d020      	beq.n	800a342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a300:	4b34      	ldr	r3, [pc, #208]	; (800a3d4 <HAL_RCC_OscConfig+0x244>)
 800a302:	2201      	movs	r2, #1
 800a304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a306:	f7fc fa1d 	bl	8006744 <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a30c:	e008      	b.n	800a320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a30e:	f7fc fa19 	bl	8006744 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d901      	bls.n	800a320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e1a8      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a320:	4b2b      	ldr	r3, [pc, #172]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0f0      	beq.n	800a30e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32c:	4b28      	ldr	r3, [pc, #160]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	00db      	lsls	r3, r3, #3
 800a33a:	4925      	ldr	r1, [pc, #148]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	600b      	str	r3, [r1, #0]
 800a340:	e015      	b.n	800a36e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a342:	4b24      	ldr	r3, [pc, #144]	; (800a3d4 <HAL_RCC_OscConfig+0x244>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a348:	f7fc f9fc 	bl	8006744 <HAL_GetTick>
 800a34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a34e:	e008      	b.n	800a362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a350:	f7fc f9f8 	bl	8006744 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e187      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a362:	4b1b      	ldr	r3, [pc, #108]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f0      	bne.n	800a350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0308 	and.w	r3, r3, #8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d036      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d016      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <HAL_RCC_OscConfig+0x248>)
 800a384:	2201      	movs	r2, #1
 800a386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a388:	f7fc f9dc 	bl	8006744 <HAL_GetTick>
 800a38c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a38e:	e008      	b.n	800a3a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a390:	f7fc f9d8 	bl	8006744 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e167      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <HAL_RCC_OscConfig+0x240>)
 800a3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0f0      	beq.n	800a390 <HAL_RCC_OscConfig+0x200>
 800a3ae:	e01b      	b.n	800a3e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3b0:	4b09      	ldr	r3, [pc, #36]	; (800a3d8 <HAL_RCC_OscConfig+0x248>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3b6:	f7fc f9c5 	bl	8006744 <HAL_GetTick>
 800a3ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3bc:	e00e      	b.n	800a3dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3be:	f7fc f9c1 	bl	8006744 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d907      	bls.n	800a3dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e150      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
 800a3d0:	40023800 	.word	0x40023800
 800a3d4:	42470000 	.word	0x42470000
 800a3d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3dc:	4b88      	ldr	r3, [pc, #544]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1ea      	bne.n	800a3be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 8097 	beq.w	800a524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3fa:	4b81      	ldr	r3, [pc, #516]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10f      	bne.n	800a426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a406:	2300      	movs	r3, #0
 800a408:	60bb      	str	r3, [r7, #8]
 800a40a:	4b7d      	ldr	r3, [pc, #500]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	4a7c      	ldr	r2, [pc, #496]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a414:	6413      	str	r3, [r2, #64]	; 0x40
 800a416:	4b7a      	ldr	r3, [pc, #488]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a41e:	60bb      	str	r3, [r7, #8]
 800a420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a422:	2301      	movs	r3, #1
 800a424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a426:	4b77      	ldr	r3, [pc, #476]	; (800a604 <HAL_RCC_OscConfig+0x474>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d118      	bne.n	800a464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a432:	4b74      	ldr	r3, [pc, #464]	; (800a604 <HAL_RCC_OscConfig+0x474>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a73      	ldr	r2, [pc, #460]	; (800a604 <HAL_RCC_OscConfig+0x474>)
 800a438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a43c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a43e:	f7fc f981 	bl	8006744 <HAL_GetTick>
 800a442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a444:	e008      	b.n	800a458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a446:	f7fc f97d 	bl	8006744 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	2b02      	cmp	r3, #2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e10c      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a458:	4b6a      	ldr	r3, [pc, #424]	; (800a604 <HAL_RCC_OscConfig+0x474>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0f0      	beq.n	800a446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d106      	bne.n	800a47a <HAL_RCC_OscConfig+0x2ea>
 800a46c:	4b64      	ldr	r3, [pc, #400]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a470:	4a63      	ldr	r2, [pc, #396]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	6713      	str	r3, [r2, #112]	; 0x70
 800a478:	e01c      	b.n	800a4b4 <HAL_RCC_OscConfig+0x324>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d10c      	bne.n	800a49c <HAL_RCC_OscConfig+0x30c>
 800a482:	4b5f      	ldr	r3, [pc, #380]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a5e      	ldr	r2, [pc, #376]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a488:	f043 0304 	orr.w	r3, r3, #4
 800a48c:	6713      	str	r3, [r2, #112]	; 0x70
 800a48e:	4b5c      	ldr	r3, [pc, #368]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a492:	4a5b      	ldr	r2, [pc, #364]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	6713      	str	r3, [r2, #112]	; 0x70
 800a49a:	e00b      	b.n	800a4b4 <HAL_RCC_OscConfig+0x324>
 800a49c:	4b58      	ldr	r3, [pc, #352]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a0:	4a57      	ldr	r2, [pc, #348]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a4a2:	f023 0301 	bic.w	r3, r3, #1
 800a4a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a8:	4b55      	ldr	r3, [pc, #340]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ac:	4a54      	ldr	r2, [pc, #336]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a4ae:	f023 0304 	bic.w	r3, r3, #4
 800a4b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d015      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4bc:	f7fc f942 	bl	8006744 <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4c2:	e00a      	b.n	800a4da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4c4:	f7fc f93e 	bl	8006744 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e0cb      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4da:	4b49      	ldr	r3, [pc, #292]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0ee      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x334>
 800a4e6:	e014      	b.n	800a512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4e8:	f7fc f92c 	bl	8006744 <HAL_GetTick>
 800a4ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4ee:	e00a      	b.n	800a506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4f0:	f7fc f928 	bl	8006744 <HAL_GetTick>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e0b5      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a506:	4b3e      	ldr	r3, [pc, #248]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1ee      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d105      	bne.n	800a524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a518:	4b39      	ldr	r3, [pc, #228]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51c:	4a38      	ldr	r2, [pc, #224]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a51e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 80a1 	beq.w	800a670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a52e:	4b34      	ldr	r3, [pc, #208]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 030c 	and.w	r3, r3, #12
 800a536:	2b08      	cmp	r3, #8
 800a538:	d05c      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d141      	bne.n	800a5c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a542:	4b31      	ldr	r3, [pc, #196]	; (800a608 <HAL_RCC_OscConfig+0x478>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a548:	f7fc f8fc 	bl	8006744 <HAL_GetTick>
 800a54c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a54e:	e008      	b.n	800a562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a550:	f7fc f8f8 	bl	8006744 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d901      	bls.n	800a562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e087      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a562:	4b27      	ldr	r3, [pc, #156]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1f0      	bne.n	800a550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69da      	ldr	r2, [r3, #28]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	019b      	lsls	r3, r3, #6
 800a57e:	431a      	orrs	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a584:	085b      	lsrs	r3, r3, #1
 800a586:	3b01      	subs	r3, #1
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	431a      	orrs	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a590:	061b      	lsls	r3, r3, #24
 800a592:	491b      	ldr	r1, [pc, #108]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a594:	4313      	orrs	r3, r2
 800a596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a598:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <HAL_RCC_OscConfig+0x478>)
 800a59a:	2201      	movs	r2, #1
 800a59c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a59e:	f7fc f8d1 	bl	8006744 <HAL_GetTick>
 800a5a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5a4:	e008      	b.n	800a5b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5a6:	f7fc f8cd 	bl	8006744 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d901      	bls.n	800a5b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e05c      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5b8:	4b11      	ldr	r3, [pc, #68]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d0f0      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x416>
 800a5c4:	e054      	b.n	800a670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5c6:	4b10      	ldr	r3, [pc, #64]	; (800a608 <HAL_RCC_OscConfig+0x478>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5cc:	f7fc f8ba 	bl	8006744 <HAL_GetTick>
 800a5d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5d4:	f7fc f8b6 	bl	8006744 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e045      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5e6:	4b06      	ldr	r3, [pc, #24]	; (800a600 <HAL_RCC_OscConfig+0x470>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1f0      	bne.n	800a5d4 <HAL_RCC_OscConfig+0x444>
 800a5f2:	e03d      	b.n	800a670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d107      	bne.n	800a60c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e038      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
 800a600:	40023800 	.word	0x40023800
 800a604:	40007000 	.word	0x40007000
 800a608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a60c:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <HAL_RCC_OscConfig+0x4ec>)
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d028      	beq.n	800a66c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a624:	429a      	cmp	r2, r3
 800a626:	d121      	bne.n	800a66c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a632:	429a      	cmp	r2, r3
 800a634:	d11a      	bne.n	800a66c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a63c:	4013      	ands	r3, r2
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a644:	4293      	cmp	r3, r2
 800a646:	d111      	bne.n	800a66c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a652:	085b      	lsrs	r3, r3, #1
 800a654:	3b01      	subs	r3, #1
 800a656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a658:	429a      	cmp	r2, r3
 800a65a:	d107      	bne.n	800a66c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a668:	429a      	cmp	r2, r3
 800a66a:	d001      	beq.n	800a670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	40023800 	.word	0x40023800

0800a680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e0cc      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a694:	4b68      	ldr	r3, [pc, #416]	; (800a838 <HAL_RCC_ClockConfig+0x1b8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d90c      	bls.n	800a6bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6a2:	4b65      	ldr	r3, [pc, #404]	; (800a838 <HAL_RCC_ClockConfig+0x1b8>)
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6aa:	4b63      	ldr	r3, [pc, #396]	; (800a838 <HAL_RCC_ClockConfig+0x1b8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d001      	beq.n	800a6bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e0b8      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0302 	and.w	r3, r3, #2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d020      	beq.n	800a70a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6d4:	4b59      	ldr	r3, [pc, #356]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	4a58      	ldr	r2, [pc, #352]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a6da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a6de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6ec:	4b53      	ldr	r3, [pc, #332]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	4a52      	ldr	r2, [pc, #328]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a6f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a6f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6f8:	4b50      	ldr	r3, [pc, #320]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	494d      	ldr	r1, [pc, #308]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a706:	4313      	orrs	r3, r2
 800a708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d044      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d107      	bne.n	800a72e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a71e:	4b47      	ldr	r3, [pc, #284]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d119      	bne.n	800a75e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e07f      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d003      	beq.n	800a73e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d107      	bne.n	800a74e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a73e:	4b3f      	ldr	r3, [pc, #252]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d109      	bne.n	800a75e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e06f      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a74e:	4b3b      	ldr	r3, [pc, #236]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0302 	and.w	r3, r3, #2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e067      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a75e:	4b37      	ldr	r3, [pc, #220]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f023 0203 	bic.w	r2, r3, #3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	4934      	ldr	r1, [pc, #208]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a770:	f7fb ffe8 	bl	8006744 <HAL_GetTick>
 800a774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a776:	e00a      	b.n	800a78e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a778:	f7fb ffe4 	bl	8006744 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	f241 3288 	movw	r2, #5000	; 0x1388
 800a786:	4293      	cmp	r3, r2
 800a788:	d901      	bls.n	800a78e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e04f      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a78e:	4b2b      	ldr	r3, [pc, #172]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f003 020c 	and.w	r2, r3, #12
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d1eb      	bne.n	800a778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7a0:	4b25      	ldr	r3, [pc, #148]	; (800a838 <HAL_RCC_ClockConfig+0x1b8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0307 	and.w	r3, r3, #7
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d20c      	bcs.n	800a7c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7ae:	4b22      	ldr	r3, [pc, #136]	; (800a838 <HAL_RCC_ClockConfig+0x1b8>)
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	b2d2      	uxtb	r2, r2
 800a7b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7b6:	4b20      	ldr	r3, [pc, #128]	; (800a838 <HAL_RCC_ClockConfig+0x1b8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d001      	beq.n	800a7c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e032      	b.n	800a82e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d008      	beq.n	800a7e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7d4:	4b19      	ldr	r3, [pc, #100]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	4916      	ldr	r1, [pc, #88]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7f2:	4b12      	ldr	r3, [pc, #72]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	490e      	ldr	r1, [pc, #56]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a802:	4313      	orrs	r3, r2
 800a804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a806:	f000 f821 	bl	800a84c <HAL_RCC_GetSysClockFreq>
 800a80a:	4602      	mov	r2, r0
 800a80c:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <HAL_RCC_ClockConfig+0x1bc>)
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	091b      	lsrs	r3, r3, #4
 800a812:	f003 030f 	and.w	r3, r3, #15
 800a816:	490a      	ldr	r1, [pc, #40]	; (800a840 <HAL_RCC_ClockConfig+0x1c0>)
 800a818:	5ccb      	ldrb	r3, [r1, r3]
 800a81a:	fa22 f303 	lsr.w	r3, r2, r3
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <HAL_RCC_ClockConfig+0x1c4>)
 800a820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <HAL_RCC_ClockConfig+0x1c8>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4618      	mov	r0, r3
 800a828:	f7f9 f95a 	bl	8003ae0 <HAL_InitTick>

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	40023c00 	.word	0x40023c00
 800a83c:	40023800 	.word	0x40023800
 800a840:	08011828 	.word	0x08011828
 800a844:	200000e4 	.word	0x200000e4
 800a848:	200000e8 	.word	0x200000e8

0800a84c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a84c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a850:	b090      	sub	sp, #64	; 0x40
 800a852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	637b      	str	r3, [r7, #52]	; 0x34
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a85c:	2300      	movs	r3, #0
 800a85e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a864:	4b59      	ldr	r3, [pc, #356]	; (800a9cc <HAL_RCC_GetSysClockFreq+0x180>)
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f003 030c 	and.w	r3, r3, #12
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d00d      	beq.n	800a88c <HAL_RCC_GetSysClockFreq+0x40>
 800a870:	2b08      	cmp	r3, #8
 800a872:	f200 80a1 	bhi.w	800a9b8 <HAL_RCC_GetSysClockFreq+0x16c>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <HAL_RCC_GetSysClockFreq+0x34>
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d003      	beq.n	800a886 <HAL_RCC_GetSysClockFreq+0x3a>
 800a87e:	e09b      	b.n	800a9b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a880:	4b53      	ldr	r3, [pc, #332]	; (800a9d0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a882:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a884:	e09b      	b.n	800a9be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a886:	4b53      	ldr	r3, [pc, #332]	; (800a9d4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a888:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a88a:	e098      	b.n	800a9be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a88c:	4b4f      	ldr	r3, [pc, #316]	; (800a9cc <HAL_RCC_GetSysClockFreq+0x180>)
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a896:	4b4d      	ldr	r3, [pc, #308]	; (800a9cc <HAL_RCC_GetSysClockFreq+0x180>)
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d028      	beq.n	800a8f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8a2:	4b4a      	ldr	r3, [pc, #296]	; (800a9cc <HAL_RCC_GetSysClockFreq+0x180>)
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	099b      	lsrs	r3, r3, #6
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	623b      	str	r3, [r7, #32]
 800a8ac:	627a      	str	r2, [r7, #36]	; 0x24
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4b47      	ldr	r3, [pc, #284]	; (800a9d4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8b8:	fb03 f201 	mul.w	r2, r3, r1
 800a8bc:	2300      	movs	r3, #0
 800a8be:	fb00 f303 	mul.w	r3, r0, r3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	4a43      	ldr	r2, [pc, #268]	; (800a9d4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8c6:	fba0 1202 	umull	r1, r2, r0, r2
 800a8ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8cc:	460a      	mov	r2, r1
 800a8ce:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8d2:	4413      	add	r3, r2
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d8:	2200      	movs	r2, #0
 800a8da:	61bb      	str	r3, [r7, #24]
 800a8dc:	61fa      	str	r2, [r7, #28]
 800a8de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a8e6:	f7f6 f89d 	bl	8000a24 <__aeabi_uldivmod>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8f2:	e053      	b.n	800a99c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8f4:	4b35      	ldr	r3, [pc, #212]	; (800a9cc <HAL_RCC_GetSysClockFreq+0x180>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	099b      	lsrs	r3, r3, #6
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	613b      	str	r3, [r7, #16]
 800a8fe:	617a      	str	r2, [r7, #20]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a906:	f04f 0b00 	mov.w	fp, #0
 800a90a:	4652      	mov	r2, sl
 800a90c:	465b      	mov	r3, fp
 800a90e:	f04f 0000 	mov.w	r0, #0
 800a912:	f04f 0100 	mov.w	r1, #0
 800a916:	0159      	lsls	r1, r3, #5
 800a918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a91c:	0150      	lsls	r0, r2, #5
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	ebb2 080a 	subs.w	r8, r2, sl
 800a926:	eb63 090b 	sbc.w	r9, r3, fp
 800a92a:	f04f 0200 	mov.w	r2, #0
 800a92e:	f04f 0300 	mov.w	r3, #0
 800a932:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a936:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a93a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a93e:	ebb2 0408 	subs.w	r4, r2, r8
 800a942:	eb63 0509 	sbc.w	r5, r3, r9
 800a946:	f04f 0200 	mov.w	r2, #0
 800a94a:	f04f 0300 	mov.w	r3, #0
 800a94e:	00eb      	lsls	r3, r5, #3
 800a950:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a954:	00e2      	lsls	r2, r4, #3
 800a956:	4614      	mov	r4, r2
 800a958:	461d      	mov	r5, r3
 800a95a:	eb14 030a 	adds.w	r3, r4, sl
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	eb45 030b 	adc.w	r3, r5, fp
 800a964:	607b      	str	r3, [r7, #4]
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a972:	4629      	mov	r1, r5
 800a974:	028b      	lsls	r3, r1, #10
 800a976:	4621      	mov	r1, r4
 800a978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a97c:	4621      	mov	r1, r4
 800a97e:	028a      	lsls	r2, r1, #10
 800a980:	4610      	mov	r0, r2
 800a982:	4619      	mov	r1, r3
 800a984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a986:	2200      	movs	r2, #0
 800a988:	60bb      	str	r3, [r7, #8]
 800a98a:	60fa      	str	r2, [r7, #12]
 800a98c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a990:	f7f6 f848 	bl	8000a24 <__aeabi_uldivmod>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4613      	mov	r3, r2
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <HAL_RCC_GetSysClockFreq+0x180>)
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	0c1b      	lsrs	r3, r3, #16
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a9ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9b6:	e002      	b.n	800a9be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a9ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3740      	adds	r7, #64	; 0x40
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9ca:	bf00      	nop
 800a9cc:	40023800 	.word	0x40023800
 800a9d0:	00f42400 	.word	0x00f42400
 800a9d4:	017d7840 	.word	0x017d7840

0800a9d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9dc:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <HAL_RCC_GetHCLKFreq+0x14>)
 800a9de:	681b      	ldr	r3, [r3, #0]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	200000e4 	.word	0x200000e4

0800a9f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a9f4:	f7ff fff0 	bl	800a9d8 <HAL_RCC_GetHCLKFreq>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	0a9b      	lsrs	r3, r3, #10
 800aa00:	f003 0307 	and.w	r3, r3, #7
 800aa04:	4903      	ldr	r1, [pc, #12]	; (800aa14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa06:	5ccb      	ldrb	r3, [r1, r3]
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	40023800 	.word	0x40023800
 800aa14:	08011838 	.word	0x08011838

0800aa18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa1c:	f7ff ffdc 	bl	800a9d8 <HAL_RCC_GetHCLKFreq>
 800aa20:	4602      	mov	r2, r0
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	0b5b      	lsrs	r3, r3, #13
 800aa28:	f003 0307 	and.w	r3, r3, #7
 800aa2c:	4903      	ldr	r1, [pc, #12]	; (800aa3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa2e:	5ccb      	ldrb	r3, [r1, r3]
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	40023800 	.word	0x40023800
 800aa3c:	08011838 	.word	0x08011838

0800aa40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	220f      	movs	r2, #15
 800aa4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aa50:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <HAL_RCC_GetClockConfig+0x5c>)
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 0203 	and.w	r2, r3, #3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800aa5c:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <HAL_RCC_GetClockConfig+0x5c>)
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800aa68:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <HAL_RCC_GetClockConfig+0x5c>)
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800aa74:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <HAL_RCC_GetClockConfig+0x5c>)
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	08db      	lsrs	r3, r3, #3
 800aa7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <HAL_RCC_GetClockConfig+0x60>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0207 	and.w	r2, r3, #7
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	601a      	str	r2, [r3, #0]
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	40023c00 	.word	0x40023c00

0800aaa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e041      	b.n	800ab3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f839 	bl	800ab42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2202      	movs	r2, #2
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	4619      	mov	r1, r3
 800aae2:	4610      	mov	r0, r2
 800aae4:	f000 fb8c 	bl	800b200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d001      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e044      	b.n	800abfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68da      	ldr	r2, [r3, #12]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f042 0201 	orr.w	r2, r2, #1
 800ab86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <HAL_TIM_Base_Start_IT+0xb0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d018      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x6c>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9a:	d013      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x6c>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a1a      	ldr	r2, [pc, #104]	; (800ac0c <HAL_TIM_Base_Start_IT+0xb4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d00e      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x6c>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a19      	ldr	r2, [pc, #100]	; (800ac10 <HAL_TIM_Base_Start_IT+0xb8>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d009      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x6c>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a17      	ldr	r2, [pc, #92]	; (800ac14 <HAL_TIM_Base_Start_IT+0xbc>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d004      	beq.n	800abc4 <HAL_TIM_Base_Start_IT+0x6c>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a16      	ldr	r2, [pc, #88]	; (800ac18 <HAL_TIM_Base_Start_IT+0xc0>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d111      	bne.n	800abe8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	f003 0307 	and.w	r3, r3, #7
 800abce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b06      	cmp	r3, #6
 800abd4:	d010      	beq.n	800abf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f042 0201 	orr.w	r2, r2, #1
 800abe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe6:	e007      	b.n	800abf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f042 0201 	orr.w	r2, r2, #1
 800abf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40010000 	.word	0x40010000
 800ac0c:	40000400 	.word	0x40000400
 800ac10:	40000800 	.word	0x40000800
 800ac14:	40000c00 	.word	0x40000c00
 800ac18:	40014000 	.word	0x40014000

0800ac1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e041      	b.n	800acb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7f8 fe38 	bl	80038b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	f000 fad0 	bl	800b200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
	...

0800acbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d109      	bne.n	800ace0 <HAL_TIM_PWM_Start+0x24>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	bf14      	ite	ne
 800acd8:	2301      	movne	r3, #1
 800acda:	2300      	moveq	r3, #0
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	e022      	b.n	800ad26 <HAL_TIM_PWM_Start+0x6a>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	d109      	bne.n	800acfa <HAL_TIM_PWM_Start+0x3e>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b01      	cmp	r3, #1
 800acf0:	bf14      	ite	ne
 800acf2:	2301      	movne	r3, #1
 800acf4:	2300      	moveq	r3, #0
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	e015      	b.n	800ad26 <HAL_TIM_PWM_Start+0x6a>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b08      	cmp	r3, #8
 800acfe:	d109      	bne.n	800ad14 <HAL_TIM_PWM_Start+0x58>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	bf14      	ite	ne
 800ad0c:	2301      	movne	r3, #1
 800ad0e:	2300      	moveq	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	e008      	b.n	800ad26 <HAL_TIM_PWM_Start+0x6a>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	bf14      	ite	ne
 800ad20:	2301      	movne	r3, #1
 800ad22:	2300      	moveq	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e068      	b.n	800ae00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d104      	bne.n	800ad3e <HAL_TIM_PWM_Start+0x82>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad3c:	e013      	b.n	800ad66 <HAL_TIM_PWM_Start+0xaa>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d104      	bne.n	800ad4e <HAL_TIM_PWM_Start+0x92>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad4c:	e00b      	b.n	800ad66 <HAL_TIM_PWM_Start+0xaa>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b08      	cmp	r3, #8
 800ad52:	d104      	bne.n	800ad5e <HAL_TIM_PWM_Start+0xa2>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad5c:	e003      	b.n	800ad66 <HAL_TIM_PWM_Start+0xaa>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2202      	movs	r2, #2
 800ad62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fc52 	bl	800b618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a23      	ldr	r2, [pc, #140]	; (800ae08 <HAL_TIM_PWM_Start+0x14c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d107      	bne.n	800ad8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a1d      	ldr	r2, [pc, #116]	; (800ae08 <HAL_TIM_PWM_Start+0x14c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d018      	beq.n	800adca <HAL_TIM_PWM_Start+0x10e>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada0:	d013      	beq.n	800adca <HAL_TIM_PWM_Start+0x10e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <HAL_TIM_PWM_Start+0x150>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00e      	beq.n	800adca <HAL_TIM_PWM_Start+0x10e>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a17      	ldr	r2, [pc, #92]	; (800ae10 <HAL_TIM_PWM_Start+0x154>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d009      	beq.n	800adca <HAL_TIM_PWM_Start+0x10e>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a16      	ldr	r2, [pc, #88]	; (800ae14 <HAL_TIM_PWM_Start+0x158>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d004      	beq.n	800adca <HAL_TIM_PWM_Start+0x10e>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <HAL_TIM_PWM_Start+0x15c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d111      	bne.n	800adee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f003 0307 	and.w	r3, r3, #7
 800add4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b06      	cmp	r3, #6
 800adda:	d010      	beq.n	800adfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f042 0201 	orr.w	r2, r2, #1
 800adea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adec:	e007      	b.n	800adfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f042 0201 	orr.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40000400 	.word	0x40000400
 800ae10:	40000800 	.word	0x40000800
 800ae14:	40000c00 	.word	0x40000c00
 800ae18:	40014000 	.word	0x40014000

0800ae1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	f003 0302 	and.w	r3, r3, #2
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d122      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	f003 0302 	and.w	r3, r3, #2
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d11b      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f06f 0202 	mvn.w	r2, #2
 800ae48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	f003 0303 	and.w	r3, r3, #3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f9b0 	bl	800b1c4 <HAL_TIM_IC_CaptureCallback>
 800ae64:	e005      	b.n	800ae72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f9a2 	bl	800b1b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f9b3 	bl	800b1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	f003 0304 	and.w	r3, r3, #4
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d122      	bne.n	800aecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d11b      	bne.n	800aecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0204 	mvn.w	r2, #4
 800ae9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2202      	movs	r2, #2
 800aea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f986 	bl	800b1c4 <HAL_TIM_IC_CaptureCallback>
 800aeb8:	e005      	b.n	800aec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f978 	bl	800b1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f989 	bl	800b1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	d122      	bne.n	800af20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	f003 0308 	and.w	r3, r3, #8
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d11b      	bne.n	800af20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f06f 0208 	mvn.w	r2, #8
 800aef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2204      	movs	r2, #4
 800aef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	f003 0303 	and.w	r3, r3, #3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f95c 	bl	800b1c4 <HAL_TIM_IC_CaptureCallback>
 800af0c:	e005      	b.n	800af1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f94e 	bl	800b1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f95f 	bl	800b1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	f003 0310 	and.w	r3, r3, #16
 800af2a:	2b10      	cmp	r3, #16
 800af2c:	d122      	bne.n	800af74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	f003 0310 	and.w	r3, r3, #16
 800af38:	2b10      	cmp	r3, #16
 800af3a:	d11b      	bne.n	800af74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f06f 0210 	mvn.w	r2, #16
 800af44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2208      	movs	r2, #8
 800af4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f932 	bl	800b1c4 <HAL_TIM_IC_CaptureCallback>
 800af60:	e005      	b.n	800af6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f924 	bl	800b1b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f935 	bl	800b1d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d10e      	bne.n	800afa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d107      	bne.n	800afa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f06f 0201 	mvn.w	r2, #1
 800af98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7f8 fbb2 	bl	8003704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afaa:	2b80      	cmp	r3, #128	; 0x80
 800afac:	d10e      	bne.n	800afcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afb8:	2b80      	cmp	r3, #128	; 0x80
 800afba:	d107      	bne.n	800afcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800afc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fbc4 	bl	800b754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd6:	2b40      	cmp	r3, #64	; 0x40
 800afd8:	d10e      	bne.n	800aff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe4:	2b40      	cmp	r3, #64	; 0x40
 800afe6:	d107      	bne.n	800aff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f8fa 	bl	800b1ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b20      	cmp	r3, #32
 800b004:	d10e      	bne.n	800b024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b20      	cmp	r3, #32
 800b012:	d107      	bne.n	800b024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f06f 0220 	mvn.w	r2, #32
 800b01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb8e 	bl	800b740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d101      	bne.n	800b04a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b046:	2302      	movs	r3, #2
 800b048:	e0ae      	b.n	800b1a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b0c      	cmp	r3, #12
 800b056:	f200 809f 	bhi.w	800b198 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b05a:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b095 	.word	0x0800b095
 800b064:	0800b199 	.word	0x0800b199
 800b068:	0800b199 	.word	0x0800b199
 800b06c:	0800b199 	.word	0x0800b199
 800b070:	0800b0d5 	.word	0x0800b0d5
 800b074:	0800b199 	.word	0x0800b199
 800b078:	0800b199 	.word	0x0800b199
 800b07c:	0800b199 	.word	0x0800b199
 800b080:	0800b117 	.word	0x0800b117
 800b084:	0800b199 	.word	0x0800b199
 800b088:	0800b199 	.word	0x0800b199
 800b08c:	0800b199 	.word	0x0800b199
 800b090:	0800b157 	.word	0x0800b157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68b9      	ldr	r1, [r7, #8]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 f930 	bl	800b300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699a      	ldr	r2, [r3, #24]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f042 0208 	orr.w	r2, r2, #8
 800b0ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699a      	ldr	r2, [r3, #24]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 0204 	bic.w	r2, r2, #4
 800b0be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6999      	ldr	r1, [r3, #24]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	691a      	ldr	r2, [r3, #16]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	619a      	str	r2, [r3, #24]
      break;
 800b0d2:	e064      	b.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f976 	bl	800b3cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699a      	ldr	r2, [r3, #24]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	699a      	ldr	r2, [r3, #24]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6999      	ldr	r1, [r3, #24]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	021a      	lsls	r2, r3, #8
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	619a      	str	r2, [r3, #24]
      break;
 800b114:	e043      	b.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68b9      	ldr	r1, [r7, #8]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f9c1 	bl	800b4a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69da      	ldr	r2, [r3, #28]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f042 0208 	orr.w	r2, r2, #8
 800b130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	69da      	ldr	r2, [r3, #28]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 0204 	bic.w	r2, r2, #4
 800b140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	69d9      	ldr	r1, [r3, #28]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	691a      	ldr	r2, [r3, #16]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	61da      	str	r2, [r3, #28]
      break;
 800b154:	e023      	b.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fa0b 	bl	800b578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69da      	ldr	r2, [r3, #28]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	69da      	ldr	r2, [r3, #28]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	69d9      	ldr	r1, [r3, #28]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	021a      	lsls	r2, r3, #8
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	430a      	orrs	r2, r1
 800b194:	61da      	str	r2, [r3, #28]
      break;
 800b196:	e002      	b.n	800b19e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	75fb      	strb	r3, [r7, #23]
      break;
 800b19c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a34      	ldr	r2, [pc, #208]	; (800b2e4 <TIM_Base_SetConfig+0xe4>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d00f      	beq.n	800b238 <TIM_Base_SetConfig+0x38>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b21e:	d00b      	beq.n	800b238 <TIM_Base_SetConfig+0x38>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a31      	ldr	r2, [pc, #196]	; (800b2e8 <TIM_Base_SetConfig+0xe8>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d007      	beq.n	800b238 <TIM_Base_SetConfig+0x38>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a30      	ldr	r2, [pc, #192]	; (800b2ec <TIM_Base_SetConfig+0xec>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d003      	beq.n	800b238 <TIM_Base_SetConfig+0x38>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a2f      	ldr	r2, [pc, #188]	; (800b2f0 <TIM_Base_SetConfig+0xf0>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d108      	bne.n	800b24a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a25      	ldr	r2, [pc, #148]	; (800b2e4 <TIM_Base_SetConfig+0xe4>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d01b      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b258:	d017      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a22      	ldr	r2, [pc, #136]	; (800b2e8 <TIM_Base_SetConfig+0xe8>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d013      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a21      	ldr	r2, [pc, #132]	; (800b2ec <TIM_Base_SetConfig+0xec>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d00f      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a20      	ldr	r2, [pc, #128]	; (800b2f0 <TIM_Base_SetConfig+0xf0>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d00b      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a1f      	ldr	r2, [pc, #124]	; (800b2f4 <TIM_Base_SetConfig+0xf4>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d007      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a1e      	ldr	r2, [pc, #120]	; (800b2f8 <TIM_Base_SetConfig+0xf8>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d003      	beq.n	800b28a <TIM_Base_SetConfig+0x8a>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a1d      	ldr	r2, [pc, #116]	; (800b2fc <TIM_Base_SetConfig+0xfc>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d108      	bne.n	800b29c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <TIM_Base_SetConfig+0xe4>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d103      	bne.n	800b2d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	691a      	ldr	r2, [r3, #16]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	615a      	str	r2, [r3, #20]
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	40010000 	.word	0x40010000
 800b2e8:	40000400 	.word	0x40000400
 800b2ec:	40000800 	.word	0x40000800
 800b2f0:	40000c00 	.word	0x40000c00
 800b2f4:	40014000 	.word	0x40014000
 800b2f8:	40014400 	.word	0x40014400
 800b2fc:	40014800 	.word	0x40014800

0800b300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f023 0201 	bic.w	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f023 0302 	bic.w	r3, r3, #2
 800b348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4313      	orrs	r3, r2
 800b352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a1c      	ldr	r2, [pc, #112]	; (800b3c8 <TIM_OC1_SetConfig+0xc8>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d10c      	bne.n	800b376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f023 0308 	bic.w	r3, r3, #8
 800b362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f023 0304 	bic.w	r3, r3, #4
 800b374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a13      	ldr	r2, [pc, #76]	; (800b3c8 <TIM_OC1_SetConfig+0xc8>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d111      	bne.n	800b3a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	4313      	orrs	r3, r2
 800b396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	621a      	str	r2, [r3, #32]
}
 800b3bc:	bf00      	nop
 800b3be:	371c      	adds	r7, #28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	40010000 	.word	0x40010000

0800b3cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f023 0210 	bic.w	r2, r3, #16
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	021b      	lsls	r3, r3, #8
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f023 0320 	bic.w	r3, r3, #32
 800b416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	011b      	lsls	r3, r3, #4
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	4313      	orrs	r3, r2
 800b422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a1e      	ldr	r2, [pc, #120]	; (800b4a0 <TIM_OC2_SetConfig+0xd4>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d10d      	bne.n	800b448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	011b      	lsls	r3, r3, #4
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a15      	ldr	r2, [pc, #84]	; (800b4a0 <TIM_OC2_SetConfig+0xd4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d113      	bne.n	800b478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b45e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	4313      	orrs	r3, r2
 800b46a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	621a      	str	r2, [r3, #32]
}
 800b492:	bf00      	nop
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	40010000 	.word	0x40010000

0800b4a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	69db      	ldr	r3, [r3, #28]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a1d      	ldr	r2, [pc, #116]	; (800b574 <TIM_OC3_SetConfig+0xd0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10d      	bne.n	800b51e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	021b      	lsls	r3, r3, #8
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b51c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a14      	ldr	r2, [pc, #80]	; (800b574 <TIM_OC3_SetConfig+0xd0>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d113      	bne.n	800b54e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b52c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4313      	orrs	r3, r2
 800b540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	621a      	str	r2, [r3, #32]
}
 800b568:	bf00      	nop
 800b56a:	371c      	adds	r7, #28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	40010000 	.word	0x40010000

0800b578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	031b      	lsls	r3, r3, #12
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a10      	ldr	r2, [pc, #64]	; (800b614 <TIM_OC4_SetConfig+0x9c>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d109      	bne.n	800b5ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	019b      	lsls	r3, r3, #6
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	621a      	str	r2, [r3, #32]
}
 800b606:	bf00      	nop
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40010000 	.word	0x40010000

0800b618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	f003 031f 	and.w	r3, r3, #31
 800b62a:	2201      	movs	r2, #1
 800b62c:	fa02 f303 	lsl.w	r3, r2, r3
 800b630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a1a      	ldr	r2, [r3, #32]
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	43db      	mvns	r3, r3
 800b63a:	401a      	ands	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6a1a      	ldr	r2, [r3, #32]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f003 031f 	and.w	r3, r3, #31
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	fa01 f303 	lsl.w	r3, r1, r3
 800b650:	431a      	orrs	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	621a      	str	r2, [r3, #32]
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
	...

0800b664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b674:	2b01      	cmp	r3, #1
 800b676:	d101      	bne.n	800b67c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b678:	2302      	movs	r3, #2
 800b67a:	e050      	b.n	800b71e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a1c      	ldr	r2, [pc, #112]	; (800b72c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d018      	beq.n	800b6f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c8:	d013      	beq.n	800b6f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a18      	ldr	r2, [pc, #96]	; (800b730 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00e      	beq.n	800b6f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a16      	ldr	r2, [pc, #88]	; (800b734 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d009      	beq.n	800b6f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a15      	ldr	r2, [pc, #84]	; (800b738 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d004      	beq.n	800b6f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a13      	ldr	r2, [pc, #76]	; (800b73c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d10c      	bne.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	4313      	orrs	r3, r2
 800b702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	40010000 	.word	0x40010000
 800b730:	40000400 	.word	0x40000400
 800b734:	40000800 	.word	0x40000800
 800b738:	40000c00 	.word	0x40000c00
 800b73c:	40014000 	.word	0x40014000

0800b740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	e03f      	b.n	800b7fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7f8 f8ee 	bl	8003970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2224      	movs	r2, #36	; 0x24
 800b798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 ff8b 	bl	800c6c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	691a      	ldr	r2, [r3, #16]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	695a      	ldr	r2, [r3, #20]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e021      	b.n	800b858 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2224      	movs	r2, #36	; 0x24
 800b818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b82a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7f8 f923 	bl	8003a78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08a      	sub	sp, #40	; 0x28
 800b864:	af02      	add	r7, sp, #8
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	4613      	mov	r3, r2
 800b86e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b20      	cmp	r3, #32
 800b87e:	d17c      	bne.n	800b97a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <HAL_UART_Transmit+0x2c>
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e075      	b.n	800b97c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b896:	2b01      	cmp	r3, #1
 800b898:	d101      	bne.n	800b89e <HAL_UART_Transmit+0x3e>
 800b89a:	2302      	movs	r3, #2
 800b89c:	e06e      	b.n	800b97c <HAL_UART_Transmit+0x11c>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2221      	movs	r2, #33	; 0x21
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8b4:	f7fa ff46 	bl	8006744 <HAL_GetTick>
 800b8b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	88fa      	ldrh	r2, [r7, #6]
 800b8be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	88fa      	ldrh	r2, [r7, #6]
 800b8c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ce:	d108      	bne.n	800b8e2 <HAL_UART_Transmit+0x82>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	61bb      	str	r3, [r7, #24]
 800b8e0:	e003      	b.n	800b8ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b8f2:	e02a      	b.n	800b94a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2180      	movs	r1, #128	; 0x80
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 fc3c 	bl	800c17c <UART_WaitOnFlagUntilTimeout>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e036      	b.n	800b97c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10b      	bne.n	800b92c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b922:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	3302      	adds	r3, #2
 800b928:	61bb      	str	r3, [r7, #24]
 800b92a:	e007      	b.n	800b93c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	781a      	ldrb	r2, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	3301      	adds	r3, #1
 800b93a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b940:	b29b      	uxth	r3, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	b29a      	uxth	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b94e:	b29b      	uxth	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1cf      	bne.n	800b8f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	2200      	movs	r2, #0
 800b95c:	2140      	movs	r1, #64	; 0x40
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 fc0c 	bl	800c17c <UART_WaitOnFlagUntilTimeout>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e006      	b.n	800b97c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2220      	movs	r2, #32
 800b972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	e000      	b.n	800b97c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b97a:	2302      	movs	r3, #2
  }
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3720      	adds	r7, #32
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b20      	cmp	r3, #32
 800b99c:	d11d      	bne.n	800b9da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <HAL_UART_Receive_IT+0x26>
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e016      	b.n	800b9dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_UART_Receive_IT+0x38>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e00f      	b.n	800b9dc <HAL_UART_Receive_IT+0x58>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b9ca:	88fb      	ldrh	r3, [r7, #6]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 fc41 	bl	800c258 <UART_Start_Receive_IT>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	e000      	b.n	800b9dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b9da:	2302      	movs	r3, #2
  }
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b0a2      	sub	sp, #136	; 0x88
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	330c      	adds	r3, #12
 800b9f8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba04:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800ba08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	330c      	adds	r3, #12
 800ba12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba18:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e3      	bne.n	800b9f2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3314      	adds	r3, #20
 800ba30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba3c:	f023 0301 	bic.w	r3, r3, #1
 800ba40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3314      	adds	r3, #20
 800ba48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ba4a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e5      	bne.n	800ba2a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d119      	bne.n	800ba9a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	330c      	adds	r3, #12
 800ba6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba78:	f023 0310 	bic.w	r3, r3, #16
 800ba7c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	330c      	adds	r3, #12
 800ba84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba86:	647a      	str	r2, [r7, #68]	; 0x44
 800ba88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba8e:	e841 2300 	strex	r3, r2, [r1]
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e5      	bne.n	800ba66 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00f      	beq.n	800bac2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baac:	2b80      	cmp	r3, #128	; 0x80
 800baae:	d104      	bne.n	800baba <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab4:	4a53      	ldr	r2, [pc, #332]	; (800bc04 <HAL_UART_Abort_IT+0x220>)
 800bab6:	651a      	str	r2, [r3, #80]	; 0x50
 800bab8:	e003      	b.n	800bac2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babe:	2200      	movs	r2, #0
 800bac0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00f      	beq.n	800baea <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad4:	2b40      	cmp	r3, #64	; 0x40
 800bad6:	d104      	bne.n	800bae2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800badc:	4a4a      	ldr	r2, [pc, #296]	; (800bc08 <HAL_UART_Abort_IT+0x224>)
 800bade:	651a      	str	r2, [r3, #80]	; 0x50
 800bae0:	e003      	b.n	800baea <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	2200      	movs	r2, #0
 800bae8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf4:	2b80      	cmp	r3, #128	; 0x80
 800baf6:	d12d      	bne.n	800bb54 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3314      	adds	r3, #20
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	e853 3f00 	ldrex	r3, [r3]
 800bb06:	623b      	str	r3, [r7, #32]
   return(result);
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb0e:	677b      	str	r3, [r7, #116]	; 0x74
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3314      	adds	r3, #20
 800bb16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bb18:	633a      	str	r2, [r7, #48]	; 0x30
 800bb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb20:	e841 2300 	strex	r3, r2, [r1]
 800bb24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1e5      	bne.n	800baf8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00f      	beq.n	800bb54 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fb fc23 	bl	8007384 <HAL_DMA_Abort_IT>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d004      	beq.n	800bb4e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb48:	2200      	movs	r2, #0
 800bb4a:	651a      	str	r2, [r3, #80]	; 0x50
 800bb4c:	e002      	b.n	800bb54 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5e:	2b40      	cmp	r3, #64	; 0x40
 800bb60:	d130      	bne.n	800bbc4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3314      	adds	r3, #20
 800bb68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	e853 3f00 	ldrex	r3, [r3]
 800bb70:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb78:	673b      	str	r3, [r7, #112]	; 0x70
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	3314      	adds	r3, #20
 800bb80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bb82:	61fa      	str	r2, [r7, #28]
 800bb84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	69b9      	ldr	r1, [r7, #24]
 800bb88:	69fa      	ldr	r2, [r7, #28]
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	617b      	str	r3, [r7, #20]
   return(result);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e5      	bne.n	800bb62 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d012      	beq.n	800bbc4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fb fbee 	bl	8007384 <HAL_DMA_Abort_IT>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbbc:	e002      	b.n	800bbc4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800bbc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d116      	bne.n	800bbfa <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 faab 	bl	800c150 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3788      	adds	r7, #136	; 0x88
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	0800c3c3 	.word	0x0800c3c3
 800bc08:	0800c423 	.word	0x0800c423

0800bc0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b0ba      	sub	sp, #232	; 0xe8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc42:	f003 030f 	and.w	r3, r3, #15
 800bc46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10f      	bne.n	800bc72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d009      	beq.n	800bc72 <HAL_UART_IRQHandler+0x66>
 800bc5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc62:	f003 0320 	and.w	r3, r3, #32
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fc71 	bl	800c552 <UART_Receive_IT>
      return;
 800bc70:	e256      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 80de 	beq.w	800be38 <HAL_UART_IRQHandler+0x22c>
 800bc7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d106      	bne.n	800bc96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80d1 	beq.w	800be38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <HAL_UART_IRQHandler+0xae>
 800bca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	f043 0201 	orr.w	r2, r3, #1
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00b      	beq.n	800bcde <HAL_UART_IRQHandler+0xd2>
 800bcc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d005      	beq.n	800bcde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd6:	f043 0202 	orr.w	r2, r3, #2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <HAL_UART_IRQHandler+0xf6>
 800bcea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f043 0204 	orr.w	r2, r3, #4
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	f003 0308 	and.w	r3, r3, #8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d011      	beq.n	800bd32 <HAL_UART_IRQHandler+0x126>
 800bd0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d105      	bne.n	800bd26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d005      	beq.n	800bd32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	f043 0208 	orr.w	r2, r3, #8
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 81ed 	beq.w	800c116 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd40:	f003 0320 	and.w	r3, r3, #32
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d008      	beq.n	800bd5a <HAL_UART_IRQHandler+0x14e>
 800bd48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd4c:	f003 0320 	and.w	r3, r3, #32
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fbfc 	bl	800c552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	695b      	ldr	r3, [r3, #20]
 800bd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd64:	2b40      	cmp	r3, #64	; 0x40
 800bd66:	bf0c      	ite	eq
 800bd68:	2301      	moveq	r3, #1
 800bd6a:	2300      	movne	r3, #0
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d103      	bne.n	800bd86 <HAL_UART_IRQHandler+0x17a>
 800bd7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d04f      	beq.n	800be26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 faa4 	bl	800c2d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b40      	cmp	r3, #64	; 0x40
 800bd98:	d141      	bne.n	800be1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bda8:	e853 3f00 	ldrex	r3, [r3]
 800bdac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3314      	adds	r3, #20
 800bdc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1d9      	bne.n	800bd9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d013      	beq.n	800be16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf2:	4a7d      	ldr	r2, [pc, #500]	; (800bfe8 <HAL_UART_IRQHandler+0x3dc>)
 800bdf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fb fac2 	bl	8007384 <HAL_DMA_Abort_IT>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d016      	beq.n	800be34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be14:	e00e      	b.n	800be34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f990 	bl	800c13c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be1c:	e00a      	b.n	800be34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f98c 	bl	800c13c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be24:	e006      	b.n	800be34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f988 	bl	800c13c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be32:	e170      	b.n	800c116 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be34:	bf00      	nop
    return;
 800be36:	e16e      	b.n	800c116 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	f040 814a 	bne.w	800c0d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be46:	f003 0310 	and.w	r3, r3, #16
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 8143 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be54:	f003 0310 	and.w	r3, r3, #16
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 813c 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be5e:	2300      	movs	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60bb      	str	r3, [r7, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	60bb      	str	r3, [r7, #8]
 800be72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be7e:	2b40      	cmp	r3, #64	; 0x40
 800be80:	f040 80b4 	bne.w	800bfec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 8140 	beq.w	800c11a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bea2:	429a      	cmp	r2, r3
 800bea4:	f080 8139 	bcs.w	800c11a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800beae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beba:	f000 8088 	beq.w	800bfce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	330c      	adds	r3, #12
 800bec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800becc:	e853 3f00 	ldrex	r3, [r3]
 800bed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bedc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	330c      	adds	r3, #12
 800bee6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800beea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800beee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bef6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1d9      	bne.n	800bebe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3314      	adds	r3, #20
 800bf10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf1c:	f023 0301 	bic.w	r3, r3, #1
 800bf20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3314      	adds	r3, #20
 800bf2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e1      	bne.n	800bf0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3314      	adds	r3, #20
 800bf4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3314      	adds	r3, #20
 800bf66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf72:	e841 2300 	strex	r3, r2, [r1]
 800bf76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1e3      	bne.n	800bf46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2220      	movs	r2, #32
 800bf82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf9e:	f023 0310 	bic.w	r3, r3, #16
 800bfa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	330c      	adds	r3, #12
 800bfac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bfb0:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfb8:	e841 2300 	strex	r3, r2, [r1]
 800bfbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1e3      	bne.n	800bf8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fb f96b 	bl	80072a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f8c0 	bl	800c164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfe4:	e099      	b.n	800c11a <HAL_UART_IRQHandler+0x50e>
 800bfe6:	bf00      	nop
 800bfe8:	0800c39b 	.word	0x0800c39b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c000:	b29b      	uxth	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 808b 	beq.w	800c11e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8086 	beq.w	800c11e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	330c      	adds	r3, #12
 800c018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	330c      	adds	r3, #12
 800c032:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c036:	647a      	str	r2, [r7, #68]	; 0x44
 800c038:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c03c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e3      	bne.n	800c012 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3314      	adds	r3, #20
 800c050:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	623b      	str	r3, [r7, #32]
   return(result);
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	f023 0301 	bic.w	r3, r3, #1
 800c060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3314      	adds	r3, #20
 800c06a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c06e:	633a      	str	r2, [r7, #48]	; 0x30
 800c070:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c076:	e841 2300 	strex	r3, r2, [r1]
 800c07a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e3      	bne.n	800c04a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2220      	movs	r2, #32
 800c086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	330c      	adds	r3, #12
 800c096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	e853 3f00 	ldrex	r3, [r3]
 800c09e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 0310 	bic.w	r3, r3, #16
 800c0a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	330c      	adds	r3, #12
 800c0b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c0b4:	61fa      	str	r2, [r7, #28]
 800c0b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	69b9      	ldr	r1, [r7, #24]
 800c0ba:	69fa      	ldr	r2, [r7, #28]
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e3      	bne.n	800c090 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f848 	bl	800c164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0d4:	e023      	b.n	800c11e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d009      	beq.n	800c0f6 <HAL_UART_IRQHandler+0x4ea>
 800c0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f9c7 	bl	800c482 <UART_Transmit_IT>
    return;
 800c0f4:	e014      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00e      	beq.n	800c120 <HAL_UART_IRQHandler+0x514>
 800c102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d008      	beq.n	800c120 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fa07 	bl	800c522 <UART_EndTransmit_IT>
    return;
 800c114:	e004      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
    return;
 800c116:	bf00      	nop
 800c118:	e002      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
      return;
 800c11a:	bf00      	nop
 800c11c:	e000      	b.n	800c120 <HAL_UART_IRQHandler+0x514>
      return;
 800c11e:	bf00      	nop
  }
}
 800c120:	37e8      	adds	r7, #232	; 0xe8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop

0800c128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b090      	sub	sp, #64	; 0x40
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	4613      	mov	r3, r2
 800c18a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c18c:	e050      	b.n	800c230 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d04c      	beq.n	800c230 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c19c:	f7fa fad2 	bl	8006744 <HAL_GetTick>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d241      	bcs.n	800c230 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	330c      	adds	r3, #12
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1cc:	637a      	str	r2, [r7, #52]	; 0x34
 800c1ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e5      	bne.n	800c1ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	f023 0301 	bic.w	r3, r3, #1
 800c1f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3314      	adds	r3, #20
 800c1fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c200:	623a      	str	r2, [r7, #32]
 800c202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c204:	69f9      	ldr	r1, [r7, #28]
 800c206:	6a3a      	ldr	r2, [r7, #32]
 800c208:	e841 2300 	strex	r3, r2, [r1]
 800c20c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e5      	bne.n	800c1e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2220      	movs	r2, #32
 800c218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c22c:	2303      	movs	r3, #3
 800c22e:	e00f      	b.n	800c250 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	4013      	ands	r3, r2
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	bf0c      	ite	eq
 800c240:	2301      	moveq	r3, #1
 800c242:	2300      	movne	r3, #0
 800c244:	b2db      	uxtb	r3, r3
 800c246:	461a      	mov	r2, r3
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d09f      	beq.n	800c18e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3740      	adds	r7, #64	; 0x40
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	88fa      	ldrh	r2, [r7, #6]
 800c270:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	88fa      	ldrh	r2, [r7, #6]
 800c276:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2222      	movs	r2, #34	; 0x22
 800c282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d007      	beq.n	800c2a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	695a      	ldr	r2, [r3, #20]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f042 0201 	orr.w	r2, r2, #1
 800c2b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f042 0220 	orr.w	r2, r2, #32
 800c2c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b095      	sub	sp, #84	; 0x54
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	330c      	adds	r3, #12
 800c2e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	e853 3f00 	ldrex	r3, [r3]
 800c2ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	330c      	adds	r3, #12
 800c2fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2fc:	643a      	str	r2, [r7, #64]	; 0x40
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c304:	e841 2300 	strex	r3, r2, [r1]
 800c308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e5      	bne.n	800c2dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3314      	adds	r3, #20
 800c316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	6a3b      	ldr	r3, [r7, #32]
 800c31a:	e853 3f00 	ldrex	r3, [r3]
 800c31e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	f023 0301 	bic.w	r3, r3, #1
 800c326:	64bb      	str	r3, [r7, #72]	; 0x48
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3314      	adds	r3, #20
 800c32e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c330:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c338:	e841 2300 	strex	r3, r2, [r1]
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e5      	bne.n	800c310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d119      	bne.n	800c380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	330c      	adds	r3, #12
 800c352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	e853 3f00 	ldrex	r3, [r3]
 800c35a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f023 0310 	bic.w	r3, r3, #16
 800c362:	647b      	str	r3, [r7, #68]	; 0x44
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	330c      	adds	r3, #12
 800c36a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c36c:	61ba      	str	r2, [r7, #24]
 800c36e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6979      	ldr	r1, [r7, #20]
 800c372:	69ba      	ldr	r2, [r7, #24]
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	613b      	str	r3, [r7, #16]
   return(result);
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e5      	bne.n	800c34c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c38e:	bf00      	nop
 800c390:	3754      	adds	r7, #84	; 0x54
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7ff fec1 	bl	800c13c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d004      	beq.n	800c3ea <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d117      	bne.n	800c41a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2220      	movs	r2, #32
 800c400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2220      	movs	r2, #32
 800c408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7ff fe9c 	bl	800c150 <HAL_UART_AbortCpltCallback>
 800c418:	e000      	b.n	800c41c <UART_DMATxAbortCallback+0x5a>
      return;
 800c41a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c434:	2200      	movs	r2, #0
 800c436:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d004      	beq.n	800c44a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c446:	2b00      	cmp	r3, #0
 800c448:	d117      	bne.n	800c47a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2220      	movs	r2, #32
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2220      	movs	r2, #32
 800c468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f7ff fe6c 	bl	800c150 <HAL_UART_AbortCpltCallback>
 800c478:	e000      	b.n	800c47c <UART_DMARxAbortCallback+0x5a>
      return;
 800c47a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c482:	b480      	push	{r7}
 800c484:	b085      	sub	sp, #20
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b21      	cmp	r3, #33	; 0x21
 800c494:	d13e      	bne.n	800c514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c49e:	d114      	bne.n	800c4ca <UART_Transmit_IT+0x48>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d110      	bne.n	800c4ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	881b      	ldrh	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	1c9a      	adds	r2, r3, #2
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	621a      	str	r2, [r3, #32]
 800c4c8:	e008      	b.n	800c4dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	1c59      	adds	r1, r3, #1
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	6211      	str	r1, [r2, #32]
 800c4d4:	781a      	ldrb	r2, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10f      	bne.n	800c510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68da      	ldr	r2, [r3, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c50e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	e000      	b.n	800c516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c514:	2302      	movs	r3, #2
  }
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68da      	ldr	r2, [r3, #12]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2220      	movs	r2, #32
 800c53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fdf0 	bl	800c128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b08c      	sub	sp, #48	; 0x30
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b22      	cmp	r3, #34	; 0x22
 800c564:	f040 80ab 	bne.w	800c6be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c570:	d117      	bne.n	800c5a2 <UART_Receive_IT+0x50>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d113      	bne.n	800c5a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c590:	b29a      	uxth	r2, r3
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59a:	1c9a      	adds	r2, r3, #2
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	629a      	str	r2, [r3, #40]	; 0x28
 800c5a0:	e026      	b.n	800c5f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b4:	d007      	beq.n	800c5c6 <UART_Receive_IT+0x74>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <UART_Receive_IT+0x82>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d106      	bne.n	800c5d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	e008      	b.n	800c5e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c600:	2b00      	cmp	r3, #0
 800c602:	d15a      	bne.n	800c6ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68da      	ldr	r2, [r3, #12]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f022 0220 	bic.w	r2, r2, #32
 800c612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68da      	ldr	r2, [r3, #12]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	695a      	ldr	r2, [r3, #20]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f022 0201 	bic.w	r2, r2, #1
 800c632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	2b01      	cmp	r3, #1
 800c642:	d135      	bne.n	800c6b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	330c      	adds	r3, #12
 800c650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	e853 3f00 	ldrex	r3, [r3]
 800c658:	613b      	str	r3, [r7, #16]
   return(result);
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f023 0310 	bic.w	r3, r3, #16
 800c660:	627b      	str	r3, [r7, #36]	; 0x24
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	330c      	adds	r3, #12
 800c668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c66a:	623a      	str	r2, [r7, #32]
 800c66c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66e:	69f9      	ldr	r1, [r7, #28]
 800c670:	6a3a      	ldr	r2, [r7, #32]
 800c672:	e841 2300 	strex	r3, r2, [r1]
 800c676:	61bb      	str	r3, [r7, #24]
   return(result);
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1e5      	bne.n	800c64a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 0310 	and.w	r3, r3, #16
 800c688:	2b10      	cmp	r3, #16
 800c68a:	d10a      	bne.n	800c6a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff fd5b 	bl	800c164 <HAL_UARTEx_RxEventCallback>
 800c6ae:	e002      	b.n	800c6b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7f7 f803 	bl	80036bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e002      	b.n	800c6c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e000      	b.n	800c6c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c6be:	2302      	movs	r3, #2
  }
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3730      	adds	r7, #48	; 0x30
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6cc:	b0c0      	sub	sp, #256	; 0x100
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6e4:	68d9      	ldr	r1, [r3, #12]
 800c6e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	ea40 0301 	orr.w	r3, r0, r1
 800c6f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c6f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6f6:	689a      	ldr	r2, [r3, #8]
 800c6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	431a      	orrs	r2, r3
 800c700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	431a      	orrs	r2, r3
 800c708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	4313      	orrs	r3, r2
 800c710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c720:	f021 010c 	bic.w	r1, r1, #12
 800c724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c72e:	430b      	orrs	r3, r1
 800c730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c742:	6999      	ldr	r1, [r3, #24]
 800c744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	ea40 0301 	orr.w	r3, r0, r1
 800c74e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	4b8f      	ldr	r3, [pc, #572]	; (800c994 <UART_SetConfig+0x2cc>)
 800c758:	429a      	cmp	r2, r3
 800c75a:	d005      	beq.n	800c768 <UART_SetConfig+0xa0>
 800c75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	4b8d      	ldr	r3, [pc, #564]	; (800c998 <UART_SetConfig+0x2d0>)
 800c764:	429a      	cmp	r2, r3
 800c766:	d104      	bne.n	800c772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c768:	f7fe f956 	bl	800aa18 <HAL_RCC_GetPCLK2Freq>
 800c76c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c770:	e003      	b.n	800c77a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c772:	f7fe f93d 	bl	800a9f0 <HAL_RCC_GetPCLK1Freq>
 800c776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c77e:	69db      	ldr	r3, [r3, #28]
 800c780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c784:	f040 810c 	bne.w	800c9a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c78c:	2200      	movs	r2, #0
 800c78e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c79a:	4622      	mov	r2, r4
 800c79c:	462b      	mov	r3, r5
 800c79e:	1891      	adds	r1, r2, r2
 800c7a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7a2:	415b      	adcs	r3, r3
 800c7a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	eb12 0801 	adds.w	r8, r2, r1
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	eb43 0901 	adc.w	r9, r3, r1
 800c7b6:	f04f 0200 	mov.w	r2, #0
 800c7ba:	f04f 0300 	mov.w	r3, #0
 800c7be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7ca:	4690      	mov	r8, r2
 800c7cc:	4699      	mov	r9, r3
 800c7ce:	4623      	mov	r3, r4
 800c7d0:	eb18 0303 	adds.w	r3, r8, r3
 800c7d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7d8:	462b      	mov	r3, r5
 800c7da:	eb49 0303 	adc.w	r3, r9, r3
 800c7de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c7ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c7f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	18db      	adds	r3, r3, r3
 800c7fa:	653b      	str	r3, [r7, #80]	; 0x50
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	eb42 0303 	adc.w	r3, r2, r3
 800c802:	657b      	str	r3, [r7, #84]	; 0x54
 800c804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c80c:	f7f4 f90a 	bl	8000a24 <__aeabi_uldivmod>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4b61      	ldr	r3, [pc, #388]	; (800c99c <UART_SetConfig+0x2d4>)
 800c816:	fba3 2302 	umull	r2, r3, r3, r2
 800c81a:	095b      	lsrs	r3, r3, #5
 800c81c:	011c      	lsls	r4, r3, #4
 800c81e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c822:	2200      	movs	r2, #0
 800c824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c82c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c830:	4642      	mov	r2, r8
 800c832:	464b      	mov	r3, r9
 800c834:	1891      	adds	r1, r2, r2
 800c836:	64b9      	str	r1, [r7, #72]	; 0x48
 800c838:	415b      	adcs	r3, r3
 800c83a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c83c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c840:	4641      	mov	r1, r8
 800c842:	eb12 0a01 	adds.w	sl, r2, r1
 800c846:	4649      	mov	r1, r9
 800c848:	eb43 0b01 	adc.w	fp, r3, r1
 800c84c:	f04f 0200 	mov.w	r2, #0
 800c850:	f04f 0300 	mov.w	r3, #0
 800c854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c85c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c860:	4692      	mov	sl, r2
 800c862:	469b      	mov	fp, r3
 800c864:	4643      	mov	r3, r8
 800c866:	eb1a 0303 	adds.w	r3, sl, r3
 800c86a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c86e:	464b      	mov	r3, r9
 800c870:	eb4b 0303 	adc.w	r3, fp, r3
 800c874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c88c:	460b      	mov	r3, r1
 800c88e:	18db      	adds	r3, r3, r3
 800c890:	643b      	str	r3, [r7, #64]	; 0x40
 800c892:	4613      	mov	r3, r2
 800c894:	eb42 0303 	adc.w	r3, r2, r3
 800c898:	647b      	str	r3, [r7, #68]	; 0x44
 800c89a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c89e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c8a2:	f7f4 f8bf 	bl	8000a24 <__aeabi_uldivmod>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	4b3b      	ldr	r3, [pc, #236]	; (800c99c <UART_SetConfig+0x2d4>)
 800c8ae:	fba3 2301 	umull	r2, r3, r3, r1
 800c8b2:	095b      	lsrs	r3, r3, #5
 800c8b4:	2264      	movs	r2, #100	; 0x64
 800c8b6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ba:	1acb      	subs	r3, r1, r3
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c8c2:	4b36      	ldr	r3, [pc, #216]	; (800c99c <UART_SetConfig+0x2d4>)
 800c8c4:	fba3 2302 	umull	r2, r3, r3, r2
 800c8c8:	095b      	lsrs	r3, r3, #5
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8d0:	441c      	add	r4, r3
 800c8d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c8e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c8e4:	4642      	mov	r2, r8
 800c8e6:	464b      	mov	r3, r9
 800c8e8:	1891      	adds	r1, r2, r2
 800c8ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800c8ec:	415b      	adcs	r3, r3
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c8f4:	4641      	mov	r1, r8
 800c8f6:	1851      	adds	r1, r2, r1
 800c8f8:	6339      	str	r1, [r7, #48]	; 0x30
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	414b      	adcs	r3, r1
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c900:	f04f 0200 	mov.w	r2, #0
 800c904:	f04f 0300 	mov.w	r3, #0
 800c908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c90c:	4659      	mov	r1, fp
 800c90e:	00cb      	lsls	r3, r1, #3
 800c910:	4651      	mov	r1, sl
 800c912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c916:	4651      	mov	r1, sl
 800c918:	00ca      	lsls	r2, r1, #3
 800c91a:	4610      	mov	r0, r2
 800c91c:	4619      	mov	r1, r3
 800c91e:	4603      	mov	r3, r0
 800c920:	4642      	mov	r2, r8
 800c922:	189b      	adds	r3, r3, r2
 800c924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c928:	464b      	mov	r3, r9
 800c92a:	460a      	mov	r2, r1
 800c92c:	eb42 0303 	adc.w	r3, r2, r3
 800c930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c948:	460b      	mov	r3, r1
 800c94a:	18db      	adds	r3, r3, r3
 800c94c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c94e:	4613      	mov	r3, r2
 800c950:	eb42 0303 	adc.w	r3, r2, r3
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c95a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c95e:	f7f4 f861 	bl	8000a24 <__aeabi_uldivmod>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4b0d      	ldr	r3, [pc, #52]	; (800c99c <UART_SetConfig+0x2d4>)
 800c968:	fba3 1302 	umull	r1, r3, r3, r2
 800c96c:	095b      	lsrs	r3, r3, #5
 800c96e:	2164      	movs	r1, #100	; 0x64
 800c970:	fb01 f303 	mul.w	r3, r1, r3
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	3332      	adds	r3, #50	; 0x32
 800c97a:	4a08      	ldr	r2, [pc, #32]	; (800c99c <UART_SetConfig+0x2d4>)
 800c97c:	fba2 2303 	umull	r2, r3, r2, r3
 800c980:	095b      	lsrs	r3, r3, #5
 800c982:	f003 0207 	and.w	r2, r3, #7
 800c986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4422      	add	r2, r4
 800c98e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c990:	e105      	b.n	800cb9e <UART_SetConfig+0x4d6>
 800c992:	bf00      	nop
 800c994:	40011000 	.word	0x40011000
 800c998:	40011400 	.word	0x40011400
 800c99c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c9ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c9b2:	4642      	mov	r2, r8
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	1891      	adds	r1, r2, r2
 800c9b8:	6239      	str	r1, [r7, #32]
 800c9ba:	415b      	adcs	r3, r3
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9c2:	4641      	mov	r1, r8
 800c9c4:	1854      	adds	r4, r2, r1
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	eb43 0501 	adc.w	r5, r3, r1
 800c9cc:	f04f 0200 	mov.w	r2, #0
 800c9d0:	f04f 0300 	mov.w	r3, #0
 800c9d4:	00eb      	lsls	r3, r5, #3
 800c9d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9da:	00e2      	lsls	r2, r4, #3
 800c9dc:	4614      	mov	r4, r2
 800c9de:	461d      	mov	r5, r3
 800c9e0:	4643      	mov	r3, r8
 800c9e2:	18e3      	adds	r3, r4, r3
 800c9e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c9e8:	464b      	mov	r3, r9
 800c9ea:	eb45 0303 	adc.w	r3, r5, r3
 800c9ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c9fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca02:	f04f 0200 	mov.w	r2, #0
 800ca06:	f04f 0300 	mov.w	r3, #0
 800ca0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca0e:	4629      	mov	r1, r5
 800ca10:	008b      	lsls	r3, r1, #2
 800ca12:	4621      	mov	r1, r4
 800ca14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca18:	4621      	mov	r1, r4
 800ca1a:	008a      	lsls	r2, r1, #2
 800ca1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca20:	f7f4 f800 	bl	8000a24 <__aeabi_uldivmod>
 800ca24:	4602      	mov	r2, r0
 800ca26:	460b      	mov	r3, r1
 800ca28:	4b60      	ldr	r3, [pc, #384]	; (800cbac <UART_SetConfig+0x4e4>)
 800ca2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca2e:	095b      	lsrs	r3, r3, #5
 800ca30:	011c      	lsls	r4, r3, #4
 800ca32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ca40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ca44:	4642      	mov	r2, r8
 800ca46:	464b      	mov	r3, r9
 800ca48:	1891      	adds	r1, r2, r2
 800ca4a:	61b9      	str	r1, [r7, #24]
 800ca4c:	415b      	adcs	r3, r3
 800ca4e:	61fb      	str	r3, [r7, #28]
 800ca50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca54:	4641      	mov	r1, r8
 800ca56:	1851      	adds	r1, r2, r1
 800ca58:	6139      	str	r1, [r7, #16]
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	414b      	adcs	r3, r1
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	f04f 0200 	mov.w	r2, #0
 800ca64:	f04f 0300 	mov.w	r3, #0
 800ca68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ca6c:	4659      	mov	r1, fp
 800ca6e:	00cb      	lsls	r3, r1, #3
 800ca70:	4651      	mov	r1, sl
 800ca72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca76:	4651      	mov	r1, sl
 800ca78:	00ca      	lsls	r2, r1, #3
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4603      	mov	r3, r0
 800ca80:	4642      	mov	r2, r8
 800ca82:	189b      	adds	r3, r3, r2
 800ca84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca88:	464b      	mov	r3, r9
 800ca8a:	460a      	mov	r2, r1
 800ca8c:	eb42 0303 	adc.w	r3, r2, r3
 800ca90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800caac:	4649      	mov	r1, r9
 800caae:	008b      	lsls	r3, r1, #2
 800cab0:	4641      	mov	r1, r8
 800cab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cab6:	4641      	mov	r1, r8
 800cab8:	008a      	lsls	r2, r1, #2
 800caba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cabe:	f7f3 ffb1 	bl	8000a24 <__aeabi_uldivmod>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	4b39      	ldr	r3, [pc, #228]	; (800cbac <UART_SetConfig+0x4e4>)
 800cac8:	fba3 1302 	umull	r1, r3, r3, r2
 800cacc:	095b      	lsrs	r3, r3, #5
 800cace:	2164      	movs	r1, #100	; 0x64
 800cad0:	fb01 f303 	mul.w	r3, r1, r3
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	011b      	lsls	r3, r3, #4
 800cad8:	3332      	adds	r3, #50	; 0x32
 800cada:	4a34      	ldr	r2, [pc, #208]	; (800cbac <UART_SetConfig+0x4e4>)
 800cadc:	fba2 2303 	umull	r2, r3, r2, r3
 800cae0:	095b      	lsrs	r3, r3, #5
 800cae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cae6:	441c      	add	r4, r3
 800cae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caec:	2200      	movs	r2, #0
 800caee:	673b      	str	r3, [r7, #112]	; 0x70
 800caf0:	677a      	str	r2, [r7, #116]	; 0x74
 800caf2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800caf6:	4642      	mov	r2, r8
 800caf8:	464b      	mov	r3, r9
 800cafa:	1891      	adds	r1, r2, r2
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	415b      	adcs	r3, r3
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb06:	4641      	mov	r1, r8
 800cb08:	1851      	adds	r1, r2, r1
 800cb0a:	6039      	str	r1, [r7, #0]
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	414b      	adcs	r3, r1
 800cb10:	607b      	str	r3, [r7, #4]
 800cb12:	f04f 0200 	mov.w	r2, #0
 800cb16:	f04f 0300 	mov.w	r3, #0
 800cb1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb1e:	4659      	mov	r1, fp
 800cb20:	00cb      	lsls	r3, r1, #3
 800cb22:	4651      	mov	r1, sl
 800cb24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb28:	4651      	mov	r1, sl
 800cb2a:	00ca      	lsls	r2, r1, #3
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4603      	mov	r3, r0
 800cb32:	4642      	mov	r2, r8
 800cb34:	189b      	adds	r3, r3, r2
 800cb36:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb38:	464b      	mov	r3, r9
 800cb3a:	460a      	mov	r2, r1
 800cb3c:	eb42 0303 	adc.w	r3, r2, r3
 800cb40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	663b      	str	r3, [r7, #96]	; 0x60
 800cb4c:	667a      	str	r2, [r7, #100]	; 0x64
 800cb4e:	f04f 0200 	mov.w	r2, #0
 800cb52:	f04f 0300 	mov.w	r3, #0
 800cb56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	008b      	lsls	r3, r1, #2
 800cb5e:	4641      	mov	r1, r8
 800cb60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb64:	4641      	mov	r1, r8
 800cb66:	008a      	lsls	r2, r1, #2
 800cb68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cb6c:	f7f3 ff5a 	bl	8000a24 <__aeabi_uldivmod>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4b0d      	ldr	r3, [pc, #52]	; (800cbac <UART_SetConfig+0x4e4>)
 800cb76:	fba3 1302 	umull	r1, r3, r3, r2
 800cb7a:	095b      	lsrs	r3, r3, #5
 800cb7c:	2164      	movs	r1, #100	; 0x64
 800cb7e:	fb01 f303 	mul.w	r3, r1, r3
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	011b      	lsls	r3, r3, #4
 800cb86:	3332      	adds	r3, #50	; 0x32
 800cb88:	4a08      	ldr	r2, [pc, #32]	; (800cbac <UART_SetConfig+0x4e4>)
 800cb8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	f003 020f 	and.w	r2, r3, #15
 800cb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4422      	add	r2, r4
 800cb9c:	609a      	str	r2, [r3, #8]
}
 800cb9e:	bf00      	nop
 800cba0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cba4:	46bd      	mov	sp, r7
 800cba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbaa:	bf00      	nop
 800cbac:	51eb851f 	.word	0x51eb851f

0800cbb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	f107 001c 	add.w	r0, r7, #28
 800cbbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d122      	bne.n	800cc0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cbdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cbf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d105      	bne.n	800cc02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f001 fbee 	bl	800e3e4 <USB_CoreReset>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]
 800cc0c:	e01a      	b.n	800cc44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 fbe2 	bl	800e3e4 <USB_CoreReset>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	639a      	str	r2, [r3, #56]	; 0x38
 800cc36:	e005      	b.n	800cc44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d10b      	bne.n	800cc62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	f043 0206 	orr.w	r2, r3, #6
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	f043 0220 	orr.w	r2, r3, #32
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc6e:	b004      	add	sp, #16
 800cc70:	4770      	bx	lr
	...

0800cc74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d165      	bne.n	800cd54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	4a41      	ldr	r2, [pc, #260]	; (800cd90 <USB_SetTurnaroundTime+0x11c>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d906      	bls.n	800cc9e <USB_SetTurnaroundTime+0x2a>
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	4a40      	ldr	r2, [pc, #256]	; (800cd94 <USB_SetTurnaroundTime+0x120>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d202      	bcs.n	800cc9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cc98:	230f      	movs	r3, #15
 800cc9a:	617b      	str	r3, [r7, #20]
 800cc9c:	e062      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	4a3c      	ldr	r2, [pc, #240]	; (800cd94 <USB_SetTurnaroundTime+0x120>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d306      	bcc.n	800ccb4 <USB_SetTurnaroundTime+0x40>
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	4a3b      	ldr	r2, [pc, #236]	; (800cd98 <USB_SetTurnaroundTime+0x124>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d202      	bcs.n	800ccb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ccae:	230e      	movs	r3, #14
 800ccb0:	617b      	str	r3, [r7, #20]
 800ccb2:	e057      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	4a38      	ldr	r2, [pc, #224]	; (800cd98 <USB_SetTurnaroundTime+0x124>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d306      	bcc.n	800ccca <USB_SetTurnaroundTime+0x56>
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	4a37      	ldr	r2, [pc, #220]	; (800cd9c <USB_SetTurnaroundTime+0x128>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d202      	bcs.n	800ccca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ccc4:	230d      	movs	r3, #13
 800ccc6:	617b      	str	r3, [r7, #20]
 800ccc8:	e04c      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	4a33      	ldr	r2, [pc, #204]	; (800cd9c <USB_SetTurnaroundTime+0x128>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d306      	bcc.n	800cce0 <USB_SetTurnaroundTime+0x6c>
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	4a32      	ldr	r2, [pc, #200]	; (800cda0 <USB_SetTurnaroundTime+0x12c>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d802      	bhi.n	800cce0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ccda:	230c      	movs	r3, #12
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e041      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	4a2f      	ldr	r2, [pc, #188]	; (800cda0 <USB_SetTurnaroundTime+0x12c>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d906      	bls.n	800ccf6 <USB_SetTurnaroundTime+0x82>
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	4a2e      	ldr	r2, [pc, #184]	; (800cda4 <USB_SetTurnaroundTime+0x130>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d802      	bhi.n	800ccf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ccf0:	230b      	movs	r3, #11
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	e036      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	4a2a      	ldr	r2, [pc, #168]	; (800cda4 <USB_SetTurnaroundTime+0x130>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d906      	bls.n	800cd0c <USB_SetTurnaroundTime+0x98>
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	4a29      	ldr	r2, [pc, #164]	; (800cda8 <USB_SetTurnaroundTime+0x134>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d802      	bhi.n	800cd0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cd06:	230a      	movs	r3, #10
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	e02b      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	4a26      	ldr	r2, [pc, #152]	; (800cda8 <USB_SetTurnaroundTime+0x134>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d906      	bls.n	800cd22 <USB_SetTurnaroundTime+0xae>
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	4a25      	ldr	r2, [pc, #148]	; (800cdac <USB_SetTurnaroundTime+0x138>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d202      	bcs.n	800cd22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cd1c:	2309      	movs	r3, #9
 800cd1e:	617b      	str	r3, [r7, #20]
 800cd20:	e020      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	4a21      	ldr	r2, [pc, #132]	; (800cdac <USB_SetTurnaroundTime+0x138>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d306      	bcc.n	800cd38 <USB_SetTurnaroundTime+0xc4>
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	4a20      	ldr	r2, [pc, #128]	; (800cdb0 <USB_SetTurnaroundTime+0x13c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d802      	bhi.n	800cd38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cd32:	2308      	movs	r3, #8
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	e015      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	4a1d      	ldr	r2, [pc, #116]	; (800cdb0 <USB_SetTurnaroundTime+0x13c>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d906      	bls.n	800cd4e <USB_SetTurnaroundTime+0xda>
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	4a1c      	ldr	r2, [pc, #112]	; (800cdb4 <USB_SetTurnaroundTime+0x140>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d202      	bcs.n	800cd4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cd48:	2307      	movs	r3, #7
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	e00a      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cd4e:	2306      	movs	r3, #6
 800cd50:	617b      	str	r3, [r7, #20]
 800cd52:	e007      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cd54:	79fb      	ldrb	r3, [r7, #7]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cd5a:	2309      	movs	r3, #9
 800cd5c:	617b      	str	r3, [r7, #20]
 800cd5e:	e001      	b.n	800cd64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cd60:	2309      	movs	r3, #9
 800cd62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	68da      	ldr	r2, [r3, #12]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	029b      	lsls	r3, r3, #10
 800cd78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cd7c:	431a      	orrs	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	371c      	adds	r7, #28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	00d8acbf 	.word	0x00d8acbf
 800cd94:	00e4e1c0 	.word	0x00e4e1c0
 800cd98:	00f42400 	.word	0x00f42400
 800cd9c:	01067380 	.word	0x01067380
 800cda0:	011a499f 	.word	0x011a499f
 800cda4:	01312cff 	.word	0x01312cff
 800cda8:	014ca43f 	.word	0x014ca43f
 800cdac:	016e3600 	.word	0x016e3600
 800cdb0:	01a6ab1f 	.word	0x01a6ab1f
 800cdb4:	01e84800 	.word	0x01e84800

0800cdb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f043 0201 	orr.w	r2, r3, #1
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cdda:	b480      	push	{r7}
 800cddc:	b083      	sub	sp, #12
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f023 0201 	bic.w	r2, r3, #1
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cdee:	2300      	movs	r3, #0
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d115      	bne.n	800ce4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce2a:	2001      	movs	r0, #1
 800ce2c:	f7f9 fc96 	bl	800675c <HAL_Delay>
      ms++;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f001 fa45 	bl	800e2c6 <USB_GetMode>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d01e      	beq.n	800ce80 <USB_SetCurrentMode+0x84>
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b31      	cmp	r3, #49	; 0x31
 800ce46:	d9f0      	bls.n	800ce2a <USB_SetCurrentMode+0x2e>
 800ce48:	e01a      	b.n	800ce80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ce4a:	78fb      	ldrb	r3, [r7, #3]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d115      	bne.n	800ce7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	f7f9 fc7d 	bl	800675c <HAL_Delay>
      ms++;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f001 fa2c 	bl	800e2c6 <USB_GetMode>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d005      	beq.n	800ce80 <USB_SetCurrentMode+0x84>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2b31      	cmp	r3, #49	; 0x31
 800ce78:	d9f0      	bls.n	800ce5c <USB_SetCurrentMode+0x60>
 800ce7a:	e001      	b.n	800ce80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e005      	b.n	800ce8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b32      	cmp	r3, #50	; 0x32
 800ce84:	d101      	bne.n	800ce8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e000      	b.n	800ce8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce94:	b084      	sub	sp, #16
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b086      	sub	sp, #24
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ceae:	2300      	movs	r3, #0
 800ceb0:	613b      	str	r3, [r7, #16]
 800ceb2:	e009      	b.n	800cec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	3340      	adds	r3, #64	; 0x40
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	3301      	adds	r3, #1
 800cec6:	613b      	str	r3, [r7, #16]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	2b0e      	cmp	r3, #14
 800cecc:	d9f2      	bls.n	800ceb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d11c      	bne.n	800cf0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cee2:	f043 0302 	orr.w	r3, r3, #2
 800cee6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	639a      	str	r2, [r3, #56]	; 0x38
 800cf0c:	e00b      	b.n	800cf26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf38:	4619      	mov	r1, r3
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf40:	461a      	mov	r2, r3
 800cf42:	680b      	ldr	r3, [r1, #0]
 800cf44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d10c      	bne.n	800cf66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d104      	bne.n	800cf5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cf52:	2100      	movs	r1, #0
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f965 	bl	800d224 <USB_SetDevSpeed>
 800cf5a:	e008      	b.n	800cf6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f960 	bl	800d224 <USB_SetDevSpeed>
 800cf64:	e003      	b.n	800cf6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cf66:	2103      	movs	r1, #3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 f95b 	bl	800d224 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cf6e:	2110      	movs	r1, #16
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f8f3 	bl	800d15c <USB_FlushTxFifo>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f91f 	bl	800d1c4 <USB_FlushRxFifo>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf96:	461a      	mov	r2, r3
 800cf98:	2300      	movs	r3, #0
 800cf9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfae:	461a      	mov	r2, r3
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	613b      	str	r3, [r7, #16]
 800cfb8:	e043      	b.n	800d042 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfd0:	d118      	bne.n	800d004 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10a      	bne.n	800cfee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	e013      	b.n	800d016 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	015a      	lsls	r2, r3, #5
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	4413      	add	r3, r2
 800cff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cffa:	461a      	mov	r2, r3
 800cffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d000:	6013      	str	r3, [r2, #0]
 800d002:	e008      	b.n	800d016 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	015a      	lsls	r2, r3, #5
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	4413      	add	r3, r2
 800d00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d010:	461a      	mov	r2, r3
 800d012:	2300      	movs	r3, #0
 800d014:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d022:	461a      	mov	r2, r3
 800d024:	2300      	movs	r3, #0
 800d026:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	015a      	lsls	r2, r3, #5
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4413      	add	r3, r2
 800d030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d034:	461a      	mov	r2, r3
 800d036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d03a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	3301      	adds	r3, #1
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	693a      	ldr	r2, [r7, #16]
 800d046:	429a      	cmp	r2, r3
 800d048:	d3b7      	bcc.n	800cfba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]
 800d04e:	e043      	b.n	800d0d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	015a      	lsls	r2, r3, #5
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	4413      	add	r3, r2
 800d058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d066:	d118      	bne.n	800d09a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10a      	bne.n	800d084 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	015a      	lsls	r2, r3, #5
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4413      	add	r3, r2
 800d076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d07a:	461a      	mov	r2, r3
 800d07c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d080:	6013      	str	r3, [r2, #0]
 800d082:	e013      	b.n	800d0ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d090:	461a      	mov	r2, r3
 800d092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	e008      	b.n	800d0ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	015a      	lsls	r2, r3, #5
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d0d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	613b      	str	r3, [r7, #16]
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	693a      	ldr	r2, [r7, #16]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d3b7      	bcc.n	800d050 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d100:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	2b00      	cmp	r3, #0
 800d106:	d105      	bne.n	800d114 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	f043 0210 	orr.w	r2, r3, #16
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	4b0f      	ldr	r3, [pc, #60]	; (800d158 <USB_DevInit+0x2c4>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d122:	2b00      	cmp	r3, #0
 800d124:	d005      	beq.n	800d132 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	f043 0208 	orr.w	r2, r3, #8
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d134:	2b01      	cmp	r3, #1
 800d136:	d107      	bne.n	800d148 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d140:	f043 0304 	orr.w	r3, r3, #4
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d148:	7dfb      	ldrb	r3, [r7, #23]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3718      	adds	r7, #24
 800d14e:	46bd      	mov	sp, r7
 800d150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d154:	b004      	add	sp, #16
 800d156:	4770      	bx	lr
 800d158:	803c3800 	.word	0x803c3800

0800d15c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d166:	2300      	movs	r3, #0
 800d168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	3301      	adds	r3, #1
 800d16e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	4a13      	ldr	r2, [pc, #76]	; (800d1c0 <USB_FlushTxFifo+0x64>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d901      	bls.n	800d17c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d178:	2303      	movs	r3, #3
 800d17a:	e01b      	b.n	800d1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	691b      	ldr	r3, [r3, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	daf2      	bge.n	800d16a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	019b      	lsls	r3, r3, #6
 800d18c:	f043 0220 	orr.w	r2, r3, #32
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3301      	adds	r3, #1
 800d198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4a08      	ldr	r2, [pc, #32]	; (800d1c0 <USB_FlushTxFifo+0x64>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d901      	bls.n	800d1a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e006      	b.n	800d1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	f003 0320 	and.w	r3, r3, #32
 800d1ae:	2b20      	cmp	r3, #32
 800d1b0:	d0f0      	beq.n	800d194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3714      	adds	r7, #20
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	00030d40 	.word	0x00030d40

0800d1c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	4a11      	ldr	r2, [pc, #68]	; (800d220 <USB_FlushRxFifo+0x5c>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d901      	bls.n	800d1e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e018      	b.n	800d214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	daf2      	bge.n	800d1d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2210      	movs	r2, #16
 800d1f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	4a08      	ldr	r2, [pc, #32]	; (800d220 <USB_FlushRxFifo+0x5c>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d901      	bls.n	800d206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d202:	2303      	movs	r3, #3
 800d204:	e006      	b.n	800d214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	f003 0310 	and.w	r3, r3, #16
 800d20e:	2b10      	cmp	r3, #16
 800d210:	d0f0      	beq.n	800d1f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	00030d40 	.word	0x00030d40

0800d224 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	68f9      	ldr	r1, [r7, #12]
 800d240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d244:	4313      	orrs	r3, r2
 800d246:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d256:	b480      	push	{r7}
 800d258:	b087      	sub	sp, #28
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	f003 0306 	and.w	r3, r3, #6
 800d26e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d276:	2300      	movs	r3, #0
 800d278:	75fb      	strb	r3, [r7, #23]
 800d27a:	e00a      	b.n	800d292 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2b02      	cmp	r3, #2
 800d280:	d002      	beq.n	800d288 <USB_GetDevSpeed+0x32>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b06      	cmp	r3, #6
 800d286:	d102      	bne.n	800d28e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d288:	2302      	movs	r3, #2
 800d28a:	75fb      	strb	r3, [r7, #23]
 800d28c:	e001      	b.n	800d292 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d28e:	230f      	movs	r3, #15
 800d290:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d292:	7dfb      	ldrb	r3, [r7, #23]
}
 800d294:	4618      	mov	r0, r3
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d13a      	bne.n	800d332 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c2:	69da      	ldr	r2, [r3, #28]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	68f9      	ldr	r1, [r7, #12]
 800d2d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	015a      	lsls	r2, r3, #5
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d155      	bne.n	800d3a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	015a      	lsls	r2, r3, #5
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d310:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	059b      	lsls	r3, r3, #22
 800d316:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d318:	4313      	orrs	r3, r2
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	0151      	lsls	r1, r2, #5
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	440a      	add	r2, r1
 800d322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d32a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	e036      	b.n	800d3a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d338:	69da      	ldr	r2, [r3, #28]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	f003 030f 	and.w	r3, r3, #15
 800d342:	2101      	movs	r1, #1
 800d344:	fa01 f303 	lsl.w	r3, r1, r3
 800d348:	041b      	lsls	r3, r3, #16
 800d34a:	68f9      	ldr	r1, [r7, #12]
 800d34c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d350:	4313      	orrs	r3, r2
 800d352:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	015a      	lsls	r2, r3, #5
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	4413      	add	r3, r2
 800d35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d11a      	bne.n	800d3a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	015a      	lsls	r2, r3, #5
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	4413      	add	r3, r2
 800d372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	791b      	ldrb	r3, [r3, #4]
 800d384:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d386:	430b      	orrs	r3, r1
 800d388:	4313      	orrs	r3, r2
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	0151      	lsls	r1, r2, #5
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	440a      	add	r2, r1
 800d392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d39a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d39e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	785b      	ldrb	r3, [r3, #1]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d161      	bne.n	800d490 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3e2:	d11f      	bne.n	800d424 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	015a      	lsls	r2, r3, #5
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	0151      	lsls	r1, r2, #5
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	440a      	add	r2, r1
 800d3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d402:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	015a      	lsls	r2, r3, #5
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	0151      	lsls	r1, r2, #5
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	440a      	add	r2, r1
 800d41a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d41e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d422:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d42a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	f003 030f 	and.w	r3, r3, #15
 800d434:	2101      	movs	r1, #1
 800d436:	fa01 f303 	lsl.w	r3, r1, r3
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	43db      	mvns	r3, r3
 800d43e:	68f9      	ldr	r1, [r7, #12]
 800d440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d444:	4013      	ands	r3, r2
 800d446:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d44e:	69da      	ldr	r2, [r3, #28]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	f003 030f 	and.w	r3, r3, #15
 800d458:	2101      	movs	r1, #1
 800d45a:	fa01 f303 	lsl.w	r3, r1, r3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	43db      	mvns	r3, r3
 800d462:	68f9      	ldr	r1, [r7, #12]
 800d464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d468:	4013      	ands	r3, r2
 800d46a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4413      	add	r3, r2
 800d474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	0159      	lsls	r1, r3, #5
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	440b      	add	r3, r1
 800d482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d486:	4619      	mov	r1, r3
 800d488:	4b35      	ldr	r3, [pc, #212]	; (800d560 <USB_DeactivateEndpoint+0x1b0>)
 800d48a:	4013      	ands	r3, r2
 800d48c:	600b      	str	r3, [r1, #0]
 800d48e:	e060      	b.n	800d552 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a6:	d11f      	bne.n	800d4e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	015a      	lsls	r2, r3, #5
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	0151      	lsls	r1, r2, #5
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	440a      	add	r2, r1
 800d4be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	015a      	lsls	r2, r3, #5
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	0151      	lsls	r1, r2, #5
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	440a      	add	r2, r1
 800d4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	f003 030f 	and.w	r3, r3, #15
 800d4f8:	2101      	movs	r1, #1
 800d4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d4fe:	041b      	lsls	r3, r3, #16
 800d500:	43db      	mvns	r3, r3
 800d502:	68f9      	ldr	r1, [r7, #12]
 800d504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d508:	4013      	ands	r3, r2
 800d50a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d512:	69da      	ldr	r2, [r3, #28]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	f003 030f 	and.w	r3, r3, #15
 800d51c:	2101      	movs	r1, #1
 800d51e:	fa01 f303 	lsl.w	r3, r1, r3
 800d522:	041b      	lsls	r3, r3, #16
 800d524:	43db      	mvns	r3, r3
 800d526:	68f9      	ldr	r1, [r7, #12]
 800d528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d52c:	4013      	ands	r3, r2
 800d52e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	015a      	lsls	r2, r3, #5
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	4413      	add	r3, r2
 800d538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	0159      	lsls	r1, r3, #5
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	440b      	add	r3, r1
 800d546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d54a:	4619      	mov	r1, r3
 800d54c:	4b05      	ldr	r3, [pc, #20]	; (800d564 <USB_DeactivateEndpoint+0x1b4>)
 800d54e:	4013      	ands	r3, r2
 800d550:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	ec337800 	.word	0xec337800
 800d564:	eff37800 	.word	0xeff37800

0800d568 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	4613      	mov	r3, r2
 800d574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	785b      	ldrb	r3, [r3, #1]
 800d584:	2b01      	cmp	r3, #1
 800d586:	f040 815c 	bne.w	800d842 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d132      	bne.n	800d5f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	015a      	lsls	r2, r3, #5
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	4413      	add	r3, r2
 800d59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	69ba      	ldr	r2, [r7, #24]
 800d5a2:	0151      	lsls	r1, r2, #5
 800d5a4:	69fa      	ldr	r2, [r7, #28]
 800d5a6:	440a      	add	r2, r1
 800d5a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	0151      	lsls	r1, r2, #5
 800d5c8:	69fa      	ldr	r2, [r7, #28]
 800d5ca:	440a      	add	r2, r1
 800d5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	69ba      	ldr	r2, [r7, #24]
 800d5e6:	0151      	lsls	r1, r2, #5
 800d5e8:	69fa      	ldr	r2, [r7, #28]
 800d5ea:	440a      	add	r2, r1
 800d5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5f0:	0cdb      	lsrs	r3, r3, #19
 800d5f2:	04db      	lsls	r3, r3, #19
 800d5f4:	6113      	str	r3, [r2, #16]
 800d5f6:	e074      	b.n	800d6e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	69ba      	ldr	r2, [r7, #24]
 800d608:	0151      	lsls	r1, r2, #5
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	440a      	add	r2, r1
 800d60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d612:	0cdb      	lsrs	r3, r3, #19
 800d614:	04db      	lsls	r3, r3, #19
 800d616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	69ba      	ldr	r2, [r7, #24]
 800d628:	0151      	lsls	r1, r2, #5
 800d62a:	69fa      	ldr	r2, [r7, #28]
 800d62c:	440a      	add	r2, r1
 800d62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d632:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d636:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d63a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d648:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	6999      	ldr	r1, [r3, #24]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	440b      	add	r3, r1
 800d654:	1e59      	subs	r1, r3, #1
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d65e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d660:	4b9d      	ldr	r3, [pc, #628]	; (800d8d8 <USB_EPStartXfer+0x370>)
 800d662:	400b      	ands	r3, r1
 800d664:	69b9      	ldr	r1, [r7, #24]
 800d666:	0148      	lsls	r0, r1, #5
 800d668:	69f9      	ldr	r1, [r7, #28]
 800d66a:	4401      	add	r1, r0
 800d66c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d670:	4313      	orrs	r3, r2
 800d672:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	015a      	lsls	r2, r3, #5
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d680:	691a      	ldr	r2, [r3, #16]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d68a:	69b9      	ldr	r1, [r7, #24]
 800d68c:	0148      	lsls	r0, r1, #5
 800d68e:	69f9      	ldr	r1, [r7, #28]
 800d690:	4401      	add	r1, r0
 800d692:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d696:	4313      	orrs	r3, r2
 800d698:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	791b      	ldrb	r3, [r3, #4]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d11f      	bne.n	800d6e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	015a      	lsls	r2, r3, #5
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	69ba      	ldr	r2, [r7, #24]
 800d6b2:	0151      	lsls	r1, r2, #5
 800d6b4:	69fa      	ldr	r2, [r7, #28]
 800d6b6:	440a      	add	r2, r1
 800d6b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d6c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	69ba      	ldr	r2, [r7, #24]
 800d6d2:	0151      	lsls	r1, r2, #5
 800d6d4:	69fa      	ldr	r2, [r7, #28]
 800d6d6:	440a      	add	r2, r1
 800d6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d6e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d14b      	bne.n	800d780 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	695b      	ldr	r3, [r3, #20]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d009      	beq.n	800d704 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	015a      	lsls	r2, r3, #5
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	695b      	ldr	r3, [r3, #20]
 800d702:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	791b      	ldrb	r3, [r3, #4]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d128      	bne.n	800d75e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d110      	bne.n	800d73e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	015a      	lsls	r2, r3, #5
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	4413      	add	r3, r2
 800d724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	69ba      	ldr	r2, [r7, #24]
 800d72c:	0151      	lsls	r1, r2, #5
 800d72e:	69fa      	ldr	r2, [r7, #28]
 800d730:	440a      	add	r2, r1
 800d732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d73a:	6013      	str	r3, [r2, #0]
 800d73c:	e00f      	b.n	800d75e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69ba      	ldr	r2, [r7, #24]
 800d74e:	0151      	lsls	r1, r2, #5
 800d750:	69fa      	ldr	r2, [r7, #28]
 800d752:	440a      	add	r2, r1
 800d754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d75c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	015a      	lsls	r2, r3, #5
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	4413      	add	r3, r2
 800d766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	0151      	lsls	r1, r2, #5
 800d770:	69fa      	ldr	r2, [r7, #28]
 800d772:	440a      	add	r2, r1
 800d774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d778:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	e133      	b.n	800d9e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	015a      	lsls	r2, r3, #5
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	4413      	add	r3, r2
 800d788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	69ba      	ldr	r2, [r7, #24]
 800d790:	0151      	lsls	r1, r2, #5
 800d792:	69fa      	ldr	r2, [r7, #28]
 800d794:	440a      	add	r2, r1
 800d796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d79e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	791b      	ldrb	r3, [r3, #4]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d015      	beq.n	800d7d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f000 811b 	beq.w	800d9e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	f003 030f 	and.w	r3, r3, #15
 800d7c2:	2101      	movs	r1, #1
 800d7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c8:	69f9      	ldr	r1, [r7, #28]
 800d7ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	634b      	str	r3, [r1, #52]	; 0x34
 800d7d2:	e109      	b.n	800d9e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d110      	bne.n	800d806 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	015a      	lsls	r2, r3, #5
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	69ba      	ldr	r2, [r7, #24]
 800d7f4:	0151      	lsls	r1, r2, #5
 800d7f6:	69fa      	ldr	r2, [r7, #28]
 800d7f8:	440a      	add	r2, r1
 800d7fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	e00f      	b.n	800d826 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	015a      	lsls	r2, r3, #5
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	4413      	add	r3, r2
 800d80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	69ba      	ldr	r2, [r7, #24]
 800d816:	0151      	lsls	r1, r2, #5
 800d818:	69fa      	ldr	r2, [r7, #28]
 800d81a:	440a      	add	r2, r1
 800d81c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d824:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	6919      	ldr	r1, [r3, #16]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	781a      	ldrb	r2, [r3, #0]
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	b298      	uxth	r0, r3
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	4603      	mov	r3, r0
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f000 fade 	bl	800ddfc <USB_WritePacket>
 800d840:	e0d2      	b.n	800d9e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	015a      	lsls	r2, r3, #5
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	4413      	add	r3, r2
 800d84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	69ba      	ldr	r2, [r7, #24]
 800d852:	0151      	lsls	r1, r2, #5
 800d854:	69fa      	ldr	r2, [r7, #28]
 800d856:	440a      	add	r2, r1
 800d858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d85c:	0cdb      	lsrs	r3, r3, #19
 800d85e:	04db      	lsls	r3, r3, #19
 800d860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	015a      	lsls	r2, r3, #5
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	4413      	add	r3, r2
 800d86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	0151      	lsls	r1, r2, #5
 800d874:	69fa      	ldr	r2, [r7, #28]
 800d876:	440a      	add	r2, r1
 800d878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d87c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d880:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d884:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d126      	bne.n	800d8dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	015a      	lsls	r2, r3, #5
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	4413      	add	r3, r2
 800d896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89a:	691a      	ldr	r2, [r3, #16]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8a4:	69b9      	ldr	r1, [r7, #24]
 800d8a6:	0148      	lsls	r0, r1, #5
 800d8a8:	69f9      	ldr	r1, [r7, #28]
 800d8aa:	4401      	add	r1, r0
 800d8ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	0151      	lsls	r1, r2, #5
 800d8c6:	69fa      	ldr	r2, [r7, #28]
 800d8c8:	440a      	add	r2, r1
 800d8ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8d2:	6113      	str	r3, [r2, #16]
 800d8d4:	e03a      	b.n	800d94c <USB_EPStartXfer+0x3e4>
 800d8d6:	bf00      	nop
 800d8d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	699a      	ldr	r2, [r3, #24]
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	1e5a      	subs	r2, r3, #1
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	8afa      	ldrh	r2, [r7, #22]
 800d8f8:	fb03 f202 	mul.w	r2, r3, r2
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	015a      	lsls	r2, r3, #5
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	4413      	add	r3, r2
 800d908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d90c:	691a      	ldr	r2, [r3, #16]
 800d90e:	8afb      	ldrh	r3, [r7, #22]
 800d910:	04d9      	lsls	r1, r3, #19
 800d912:	4b38      	ldr	r3, [pc, #224]	; (800d9f4 <USB_EPStartXfer+0x48c>)
 800d914:	400b      	ands	r3, r1
 800d916:	69b9      	ldr	r1, [r7, #24]
 800d918:	0148      	lsls	r0, r1, #5
 800d91a:	69f9      	ldr	r1, [r7, #28]
 800d91c:	4401      	add	r1, r0
 800d91e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d922:	4313      	orrs	r3, r2
 800d924:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	015a      	lsls	r2, r3, #5
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	4413      	add	r3, r2
 800d92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d932:	691a      	ldr	r2, [r3, #16]
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	69db      	ldr	r3, [r3, #28]
 800d938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d93c:	69b9      	ldr	r1, [r7, #24]
 800d93e:	0148      	lsls	r0, r1, #5
 800d940:	69f9      	ldr	r1, [r7, #28]
 800d942:	4401      	add	r1, r0
 800d944:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d948:	4313      	orrs	r3, r2
 800d94a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d10d      	bne.n	800d96e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	691b      	ldr	r3, [r3, #16]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d009      	beq.n	800d96e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	6919      	ldr	r1, [r3, #16]
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	015a      	lsls	r2, r3, #5
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	4413      	add	r3, r2
 800d966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96a:	460a      	mov	r2, r1
 800d96c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	791b      	ldrb	r3, [r3, #4]
 800d972:	2b01      	cmp	r3, #1
 800d974:	d128      	bne.n	800d9c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d982:	2b00      	cmp	r3, #0
 800d984:	d110      	bne.n	800d9a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	015a      	lsls	r2, r3, #5
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	4413      	add	r3, r2
 800d98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	0151      	lsls	r1, r2, #5
 800d998:	69fa      	ldr	r2, [r7, #28]
 800d99a:	440a      	add	r2, r1
 800d99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	e00f      	b.n	800d9c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	015a      	lsls	r2, r3, #5
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	69ba      	ldr	r2, [r7, #24]
 800d9b8:	0151      	lsls	r1, r2, #5
 800d9ba:	69fa      	ldr	r2, [r7, #28]
 800d9bc:	440a      	add	r2, r1
 800d9be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	015a      	lsls	r2, r3, #5
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	0151      	lsls	r1, r2, #5
 800d9da:	69fa      	ldr	r2, [r7, #28]
 800d9dc:	440a      	add	r2, r1
 800d9de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3720      	adds	r7, #32
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	1ff80000 	.word	0x1ff80000

0800d9f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	4613      	mov	r3, r2
 800da04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	785b      	ldrb	r3, [r3, #1]
 800da14:	2b01      	cmp	r3, #1
 800da16:	f040 80ce 	bne.w	800dbb6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d132      	bne.n	800da88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	015a      	lsls	r2, r3, #5
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	0151      	lsls	r1, r2, #5
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	440a      	add	r2, r1
 800da38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	015a      	lsls	r2, r3, #5
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	0151      	lsls	r1, r2, #5
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	440a      	add	r2, r1
 800da5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	0151      	lsls	r1, r2, #5
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	440a      	add	r2, r1
 800da7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da80:	0cdb      	lsrs	r3, r3, #19
 800da82:	04db      	lsls	r3, r3, #19
 800da84:	6113      	str	r3, [r2, #16]
 800da86:	e04e      	b.n	800db26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	0151      	lsls	r1, r2, #5
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	440a      	add	r2, r1
 800da9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daa2:	0cdb      	lsrs	r3, r3, #19
 800daa4:	04db      	lsls	r3, r3, #19
 800daa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800daca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	699a      	ldr	r2, [r3, #24]
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d903      	bls.n	800dae0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	68da      	ldr	r2, [r3, #12]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	015a      	lsls	r2, r3, #5
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	4413      	add	r3, r2
 800dae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	0151      	lsls	r1, r2, #5
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	440a      	add	r2, r1
 800daf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dafa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dafe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	015a      	lsls	r2, r3, #5
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	4413      	add	r3, r2
 800db08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db0c:	691a      	ldr	r2, [r3, #16]
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db16:	6939      	ldr	r1, [r7, #16]
 800db18:	0148      	lsls	r0, r1, #5
 800db1a:	6979      	ldr	r1, [r7, #20]
 800db1c:	4401      	add	r1, r0
 800db1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800db22:	4313      	orrs	r3, r2
 800db24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d11e      	bne.n	800db6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	695b      	ldr	r3, [r3, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d009      	beq.n	800db48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db40:	461a      	mov	r2, r3
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	015a      	lsls	r2, r3, #5
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	4413      	add	r3, r2
 800db50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	693a      	ldr	r2, [r7, #16]
 800db58:	0151      	lsls	r1, r2, #5
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	440a      	add	r2, r1
 800db5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	e097      	b.n	800dc9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	015a      	lsls	r2, r3, #5
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	4413      	add	r3, r2
 800db72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	0151      	lsls	r1, r2, #5
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	440a      	add	r2, r1
 800db80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 8083 	beq.w	800dc9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	f003 030f 	and.w	r3, r3, #15
 800dba4:	2101      	movs	r1, #1
 800dba6:	fa01 f303 	lsl.w	r3, r1, r3
 800dbaa:	6979      	ldr	r1, [r7, #20]
 800dbac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	634b      	str	r3, [r1, #52]	; 0x34
 800dbb4:	e071      	b.n	800dc9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	693a      	ldr	r2, [r7, #16]
 800dbc6:	0151      	lsls	r1, r2, #5
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	440a      	add	r2, r1
 800dbcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbd0:	0cdb      	lsrs	r3, r3, #19
 800dbd2:	04db      	lsls	r3, r3, #19
 800dbd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	0151      	lsls	r1, r2, #5
 800dbe8:	697a      	ldr	r2, [r7, #20]
 800dbea:	440a      	add	r2, r1
 800dbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dbf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dbf8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	68da      	ldr	r2, [r3, #12]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	68da      	ldr	r2, [r3, #12]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	015a      	lsls	r2, r3, #5
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	4413      	add	r3, r2
 800dc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc1e:	691b      	ldr	r3, [r3, #16]
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	0151      	lsls	r1, r2, #5
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	440a      	add	r2, r1
 800dc28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	015a      	lsls	r2, r3, #5
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	4413      	add	r3, r2
 800dc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc3e:	691a      	ldr	r2, [r3, #16]
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc48:	6939      	ldr	r1, [r7, #16]
 800dc4a:	0148      	lsls	r0, r1, #5
 800dc4c:	6979      	ldr	r1, [r7, #20]
 800dc4e:	4401      	add	r1, r0
 800dc50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc54:	4313      	orrs	r3, r2
 800dc56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d10d      	bne.n	800dc7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d009      	beq.n	800dc7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	6919      	ldr	r1, [r3, #16]
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc76:	460a      	mov	r2, r1
 800dc78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	015a      	lsls	r2, r3, #5
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	4413      	add	r3, r2
 800dc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	693a      	ldr	r2, [r7, #16]
 800dc8a:	0151      	lsls	r1, r2, #5
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	440a      	add	r2, r1
 800dc90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	371c      	adds	r7, #28
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b087      	sub	sp, #28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	785b      	ldrb	r3, [r3, #1]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d14a      	bne.n	800dd5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	015a      	lsls	r2, r3, #5
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcde:	f040 8086 	bne.w	800ddee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	7812      	ldrb	r2, [r2, #0]
 800dcf6:	0151      	lsls	r1, r2, #5
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	440a      	add	r2, r1
 800dcfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	015a      	lsls	r2, r3, #5
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	4413      	add	r3, r2
 800dd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	7812      	ldrb	r2, [r2, #0]
 800dd1a:	0151      	lsls	r1, r2, #5
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	440a      	add	r2, r1
 800dd20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f242 7210 	movw	r2, #10000	; 0x2710
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d902      	bls.n	800dd40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	75fb      	strb	r3, [r7, #23]
          break;
 800dd3e:	e056      	b.n	800ddee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd58:	d0e7      	beq.n	800dd2a <USB_EPStopXfer+0x82>
 800dd5a:	e048      	b.n	800ddee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	015a      	lsls	r2, r3, #5
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	4413      	add	r3, r2
 800dd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd74:	d13b      	bne.n	800ddee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	015a      	lsls	r2, r3, #5
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	4413      	add	r3, r2
 800dd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	7812      	ldrb	r2, [r2, #0]
 800dd8a:	0151      	lsls	r1, r2, #5
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	440a      	add	r2, r1
 800dd90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	683a      	ldr	r2, [r7, #0]
 800ddac:	7812      	ldrb	r2, [r2, #0]
 800ddae:	0151      	lsls	r1, r2, #5
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	440a      	add	r2, r1
 800ddb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f242 7210 	movw	r2, #10000	; 0x2710
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d902      	bls.n	800ddd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	75fb      	strb	r3, [r7, #23]
          break;
 800ddd2:	e00c      	b.n	800ddee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	015a      	lsls	r2, r3, #5
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	4413      	add	r3, r2
 800ddde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dde8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddec:	d0e7      	beq.n	800ddbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	371c      	adds	r7, #28
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr

0800ddfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b089      	sub	sp, #36	; 0x24
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	4611      	mov	r1, r2
 800de08:	461a      	mov	r2, r3
 800de0a:	460b      	mov	r3, r1
 800de0c:	71fb      	strb	r3, [r7, #7]
 800de0e:	4613      	mov	r3, r2
 800de10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800de1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d123      	bne.n	800de6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800de22:	88bb      	ldrh	r3, [r7, #4]
 800de24:	3303      	adds	r3, #3
 800de26:	089b      	lsrs	r3, r3, #2
 800de28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800de2a:	2300      	movs	r3, #0
 800de2c:	61bb      	str	r3, [r7, #24]
 800de2e:	e018      	b.n	800de62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800de30:	79fb      	ldrb	r3, [r7, #7]
 800de32:	031a      	lsls	r2, r3, #12
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	4413      	add	r3, r2
 800de38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de3c:	461a      	mov	r2, r3
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	6013      	str	r3, [r2, #0]
      pSrc++;
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	3301      	adds	r3, #1
 800de48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	3301      	adds	r3, #1
 800de4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	3301      	adds	r3, #1
 800de54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	3301      	adds	r3, #1
 800de5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	3301      	adds	r3, #1
 800de60:	61bb      	str	r3, [r7, #24]
 800de62:	69ba      	ldr	r2, [r7, #24]
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	429a      	cmp	r2, r3
 800de68:	d3e2      	bcc.n	800de30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3724      	adds	r7, #36	; 0x24
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800de78:	b480      	push	{r7}
 800de7a:	b08b      	sub	sp, #44	; 0x2c
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	4613      	mov	r3, r2
 800de84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	089b      	lsrs	r3, r3, #2
 800de92:	b29b      	uxth	r3, r3
 800de94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800de96:	88fb      	ldrh	r3, [r7, #6]
 800de98:	f003 0303 	and.w	r3, r3, #3
 800de9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800de9e:	2300      	movs	r3, #0
 800dea0:	623b      	str	r3, [r7, #32]
 800dea2:	e014      	b.n	800dece <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	601a      	str	r2, [r3, #0]
    pDest++;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	3301      	adds	r3, #1
 800deb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800deb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb8:	3301      	adds	r3, #1
 800deba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	3301      	adds	r3, #1
 800dec0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	3301      	adds	r3, #1
 800dec6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dec8:	6a3b      	ldr	r3, [r7, #32]
 800deca:	3301      	adds	r3, #1
 800decc:	623b      	str	r3, [r7, #32]
 800dece:	6a3a      	ldr	r2, [r7, #32]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d3e6      	bcc.n	800dea4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ded6:	8bfb      	ldrh	r3, [r7, #30]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01e      	beq.n	800df1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dedc:	2300      	movs	r3, #0
 800dede:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dee6:	461a      	mov	r2, r3
 800dee8:	f107 0310 	add.w	r3, r7, #16
 800deec:	6812      	ldr	r2, [r2, #0]
 800deee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	b2db      	uxtb	r3, r3
 800def6:	00db      	lsls	r3, r3, #3
 800def8:	fa22 f303 	lsr.w	r3, r2, r3
 800defc:	b2da      	uxtb	r2, r3
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	701a      	strb	r2, [r3, #0]
      i++;
 800df02:	6a3b      	ldr	r3, [r7, #32]
 800df04:	3301      	adds	r3, #1
 800df06:	623b      	str	r3, [r7, #32]
      pDest++;
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	3301      	adds	r3, #1
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800df0e:	8bfb      	ldrh	r3, [r7, #30]
 800df10:	3b01      	subs	r3, #1
 800df12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800df14:	8bfb      	ldrh	r3, [r7, #30]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d1ea      	bne.n	800def0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	372c      	adds	r7, #44	; 0x2c
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d12c      	bne.n	800df9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	015a      	lsls	r2, r3, #5
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	4413      	add	r3, r2
 800df4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	db12      	blt.n	800df7c <USB_EPSetStall+0x54>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00f      	beq.n	800df7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	015a      	lsls	r2, r3, #5
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	4413      	add	r3, r2
 800df64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	0151      	lsls	r1, r2, #5
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	440a      	add	r2, r1
 800df72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800df7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	015a      	lsls	r2, r3, #5
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4413      	add	r3, r2
 800df84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	0151      	lsls	r1, r2, #5
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	440a      	add	r2, r1
 800df92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df9a:	6013      	str	r3, [r2, #0]
 800df9c:	e02b      	b.n	800dff6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	015a      	lsls	r2, r3, #5
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	db12      	blt.n	800dfd6 <USB_EPSetStall+0xae>
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00f      	beq.n	800dfd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	015a      	lsls	r2, r3, #5
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	0151      	lsls	r1, r2, #5
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	440a      	add	r2, r1
 800dfcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dfd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	015a      	lsls	r2, r3, #5
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	4413      	add	r3, r2
 800dfde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	0151      	lsls	r1, r2, #5
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	440a      	add	r2, r1
 800dfec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dff4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	785b      	ldrb	r3, [r3, #1]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d128      	bne.n	800e072 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	015a      	lsls	r2, r3, #5
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	4413      	add	r3, r2
 800e028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	0151      	lsls	r1, r2, #5
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	440a      	add	r2, r1
 800e036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e03a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e03e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	791b      	ldrb	r3, [r3, #4]
 800e044:	2b03      	cmp	r3, #3
 800e046:	d003      	beq.n	800e050 <USB_EPClearStall+0x4c>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	791b      	ldrb	r3, [r3, #4]
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d138      	bne.n	800e0c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	015a      	lsls	r2, r3, #5
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	4413      	add	r3, r2
 800e058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	0151      	lsls	r1, r2, #5
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	440a      	add	r2, r1
 800e066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e06a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	e027      	b.n	800e0c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	0151      	lsls	r1, r2, #5
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	440a      	add	r2, r1
 800e088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e08c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e090:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	791b      	ldrb	r3, [r3, #4]
 800e096:	2b03      	cmp	r3, #3
 800e098:	d003      	beq.n	800e0a2 <USB_EPClearStall+0x9e>
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	791b      	ldrb	r3, [r3, #4]
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	d10f      	bne.n	800e0c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	015a      	lsls	r2, r3, #5
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	68ba      	ldr	r2, [r7, #8]
 800e0b2:	0151      	lsls	r1, r2, #5
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	440a      	add	r2, r1
 800e0b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3714      	adds	r7, #20
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e0f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	78fb      	ldrb	r3, [r7, #3]
 800e0fe:	011b      	lsls	r3, r3, #4
 800e100:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e104:	68f9      	ldr	r1, [r7, #12]
 800e106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e10a:	4313      	orrs	r3, r2
 800e10c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e136:	f023 0303 	bic.w	r3, r3, #3
 800e13a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e14a:	f023 0302 	bic.w	r3, r3, #2
 800e14e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3714      	adds	r7, #20
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e15e:	b480      	push	{r7}
 800e160:	b085      	sub	sp, #20
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e178:	f023 0303 	bic.w	r3, r3, #3
 800e17c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e18c:	f043 0302 	orr.w	r3, r3, #2
 800e190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3714      	adds	r7, #20
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	695b      	ldr	r3, [r3, #20]
 800e1ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	699b      	ldr	r3, [r3, #24]
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	b085      	sub	sp, #20
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1e2:	69db      	ldr	r3, [r3, #28]
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	0c1b      	lsrs	r3, r3, #16
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b085      	sub	sp, #20
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20c:	699b      	ldr	r3, [r3, #24]
 800e20e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e216:	69db      	ldr	r3, [r3, #28]
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	4013      	ands	r3, r2
 800e21c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	b29b      	uxth	r3, r3
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e22e:	b480      	push	{r7}
 800e230:	b085      	sub	sp, #20
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	460b      	mov	r3, r1
 800e238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e23e:	78fb      	ldrb	r3, [r7, #3]
 800e240:	015a      	lsls	r2, r3, #5
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4413      	add	r3, r2
 800e246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	4013      	ands	r3, r2
 800e25a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e25c:	68bb      	ldr	r3, [r7, #8]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3714      	adds	r7, #20
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b087      	sub	sp, #28
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	460b      	mov	r3, r1
 800e274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e28c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e28e:	78fb      	ldrb	r3, [r7, #3]
 800e290:	f003 030f 	and.w	r3, r3, #15
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	fa22 f303 	lsr.w	r3, r2, r3
 800e29a:	01db      	lsls	r3, r3, #7
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	693a      	ldr	r2, [r7, #16]
 800e2a0:	4313      	orrs	r3, r2
 800e2a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e2a4:	78fb      	ldrb	r3, [r7, #3]
 800e2a6:	015a      	lsls	r2, r3, #5
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e300:	f023 0307 	bic.w	r3, r3, #7
 800e304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e328:	b480      	push	{r7}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	460b      	mov	r3, r1
 800e332:	607a      	str	r2, [r7, #4]
 800e334:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	333c      	adds	r3, #60	; 0x3c
 800e33e:	3304      	adds	r3, #4
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	4a26      	ldr	r2, [pc, #152]	; (800e3e0 <USB_EP0_OutStart+0xb8>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d90a      	bls.n	800e362 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e35c:	d101      	bne.n	800e362 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	e037      	b.n	800e3d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e368:	461a      	mov	r2, r3
 800e36a:	2300      	movs	r3, #0
 800e36c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e374:	691b      	ldr	r3, [r3, #16]
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e37c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e390:	f043 0318 	orr.w	r3, r3, #24
 800e394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e3a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e3aa:	7afb      	ldrb	r3, [r7, #11]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d10f      	bne.n	800e3d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e3ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	371c      	adds	r7, #28
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	4f54300a 	.word	0x4f54300a

0800e3e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	4a13      	ldr	r2, [pc, #76]	; (800e448 <USB_CoreReset+0x64>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d901      	bls.n	800e402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e3fe:	2303      	movs	r3, #3
 800e400:	e01b      	b.n	800e43a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	2b00      	cmp	r3, #0
 800e408:	daf2      	bge.n	800e3f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e40a:	2300      	movs	r3, #0
 800e40c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	f043 0201 	orr.w	r2, r3, #1
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3301      	adds	r3, #1
 800e41e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4a09      	ldr	r2, [pc, #36]	; (800e448 <USB_CoreReset+0x64>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d901      	bls.n	800e42c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e428:	2303      	movs	r3, #3
 800e42a:	e006      	b.n	800e43a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	2b01      	cmp	r3, #1
 800e436:	d0f0      	beq.n	800e41a <USB_CoreReset+0x36>

  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	00030d40 	.word	0x00030d40

0800e44c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	460b      	mov	r3, r1
 800e456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e458:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e45c:	f002 fc8a 	bl	8010d74 <USBD_static_malloc>
 800e460:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d109      	bne.n	800e47c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	32b0      	adds	r2, #176	; 0xb0
 800e472:	2100      	movs	r1, #0
 800e474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e478:	2302      	movs	r3, #2
 800e47a:	e0d4      	b.n	800e626 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e47c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e480:	2100      	movs	r1, #0
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f002 fcec 	bl	8010e60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	32b0      	adds	r2, #176	; 0xb0
 800e492:	68f9      	ldr	r1, [r7, #12]
 800e494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	32b0      	adds	r2, #176	; 0xb0
 800e4a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	7c1b      	ldrb	r3, [r3, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d138      	bne.n	800e526 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e4b4:	4b5e      	ldr	r3, [pc, #376]	; (800e630 <USBD_CDC_Init+0x1e4>)
 800e4b6:	7819      	ldrb	r1, [r3, #0]
 800e4b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4bc:	2202      	movs	r2, #2
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f002 fb35 	bl	8010b2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e4c4:	4b5a      	ldr	r3, [pc, #360]	; (800e630 <USBD_CDC_Init+0x1e4>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	f003 020f 	and.w	r2, r3, #15
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	3324      	adds	r3, #36	; 0x24
 800e4da:	2201      	movs	r2, #1
 800e4dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e4de:	4b55      	ldr	r3, [pc, #340]	; (800e634 <USBD_CDC_Init+0x1e8>)
 800e4e0:	7819      	ldrb	r1, [r3, #0]
 800e4e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f002 fb20 	bl	8010b2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e4ee:	4b51      	ldr	r3, [pc, #324]	; (800e634 <USBD_CDC_Init+0x1e8>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	f003 020f 	and.w	r2, r3, #15
 800e4f6:	6879      	ldr	r1, [r7, #4]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	440b      	add	r3, r1
 800e502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e506:	2201      	movs	r2, #1
 800e508:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e50a:	4b4b      	ldr	r3, [pc, #300]	; (800e638 <USBD_CDC_Init+0x1ec>)
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	f003 020f 	and.w	r2, r3, #15
 800e512:	6879      	ldr	r1, [r7, #4]
 800e514:	4613      	mov	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	440b      	add	r3, r1
 800e51e:	3326      	adds	r3, #38	; 0x26
 800e520:	2210      	movs	r2, #16
 800e522:	801a      	strh	r2, [r3, #0]
 800e524:	e035      	b.n	800e592 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e526:	4b42      	ldr	r3, [pc, #264]	; (800e630 <USBD_CDC_Init+0x1e4>)
 800e528:	7819      	ldrb	r1, [r3, #0]
 800e52a:	2340      	movs	r3, #64	; 0x40
 800e52c:	2202      	movs	r2, #2
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f002 fafd 	bl	8010b2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e534:	4b3e      	ldr	r3, [pc, #248]	; (800e630 <USBD_CDC_Init+0x1e4>)
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	f003 020f 	and.w	r2, r3, #15
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	4613      	mov	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	440b      	add	r3, r1
 800e548:	3324      	adds	r3, #36	; 0x24
 800e54a:	2201      	movs	r2, #1
 800e54c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e54e:	4b39      	ldr	r3, [pc, #228]	; (800e634 <USBD_CDC_Init+0x1e8>)
 800e550:	7819      	ldrb	r1, [r3, #0]
 800e552:	2340      	movs	r3, #64	; 0x40
 800e554:	2202      	movs	r2, #2
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f002 fae9 	bl	8010b2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e55c:	4b35      	ldr	r3, [pc, #212]	; (800e634 <USBD_CDC_Init+0x1e8>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 020f 	and.w	r2, r3, #15
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	4613      	mov	r3, r2
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	4413      	add	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	440b      	add	r3, r1
 800e570:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e574:	2201      	movs	r2, #1
 800e576:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e578:	4b2f      	ldr	r3, [pc, #188]	; (800e638 <USBD_CDC_Init+0x1ec>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	f003 020f 	and.w	r2, r3, #15
 800e580:	6879      	ldr	r1, [r7, #4]
 800e582:	4613      	mov	r3, r2
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4413      	add	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	440b      	add	r3, r1
 800e58c:	3326      	adds	r3, #38	; 0x26
 800e58e:	2210      	movs	r2, #16
 800e590:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e592:	4b29      	ldr	r3, [pc, #164]	; (800e638 <USBD_CDC_Init+0x1ec>)
 800e594:	7819      	ldrb	r1, [r3, #0]
 800e596:	2308      	movs	r3, #8
 800e598:	2203      	movs	r2, #3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f002 fac7 	bl	8010b2e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e5a0:	4b25      	ldr	r3, [pc, #148]	; (800e638 <USBD_CDC_Init+0x1ec>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 020f 	and.w	r2, r3, #15
 800e5a8:	6879      	ldr	r1, [r7, #4]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	440b      	add	r3, r1
 800e5b4:	3324      	adds	r3, #36	; 0x24
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	33b0      	adds	r3, #176	; 0xb0
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	e018      	b.n	800e626 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	7c1b      	ldrb	r3, [r3, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10a      	bne.n	800e612 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5fc:	4b0d      	ldr	r3, [pc, #52]	; (800e634 <USBD_CDC_Init+0x1e8>)
 800e5fe:	7819      	ldrb	r1, [r3, #0]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f002 fb7e 	bl	8010d0c <USBD_LL_PrepareReceive>
 800e610:	e008      	b.n	800e624 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e612:	4b08      	ldr	r3, [pc, #32]	; (800e634 <USBD_CDC_Init+0x1e8>)
 800e614:	7819      	ldrb	r1, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f002 fb74 	bl	8010d0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20000177 	.word	0x20000177
 800e634:	20000178 	.word	0x20000178
 800e638:	20000179 	.word	0x20000179

0800e63c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	460b      	mov	r3, r1
 800e646:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e648:	4b3a      	ldr	r3, [pc, #232]	; (800e734 <USBD_CDC_DeInit+0xf8>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f002 fa93 	bl	8010b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e654:	4b37      	ldr	r3, [pc, #220]	; (800e734 <USBD_CDC_DeInit+0xf8>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	f003 020f 	and.w	r2, r3, #15
 800e65c:	6879      	ldr	r1, [r7, #4]
 800e65e:	4613      	mov	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	440b      	add	r3, r1
 800e668:	3324      	adds	r3, #36	; 0x24
 800e66a:	2200      	movs	r2, #0
 800e66c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e66e:	4b32      	ldr	r3, [pc, #200]	; (800e738 <USBD_CDC_DeInit+0xfc>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f002 fa80 	bl	8010b7a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e67a:	4b2f      	ldr	r3, [pc, #188]	; (800e738 <USBD_CDC_DeInit+0xfc>)
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	f003 020f 	and.w	r2, r3, #15
 800e682:	6879      	ldr	r1, [r7, #4]
 800e684:	4613      	mov	r3, r2
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	4413      	add	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	440b      	add	r3, r1
 800e68e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e692:	2200      	movs	r2, #0
 800e694:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e696:	4b29      	ldr	r3, [pc, #164]	; (800e73c <USBD_CDC_DeInit+0x100>)
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	4619      	mov	r1, r3
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f002 fa6c 	bl	8010b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e6a2:	4b26      	ldr	r3, [pc, #152]	; (800e73c <USBD_CDC_DeInit+0x100>)
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	f003 020f 	and.w	r2, r3, #15
 800e6aa:	6879      	ldr	r1, [r7, #4]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	440b      	add	r3, r1
 800e6b6:	3324      	adds	r3, #36	; 0x24
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e6bc:	4b1f      	ldr	r3, [pc, #124]	; (800e73c <USBD_CDC_DeInit+0x100>)
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	f003 020f 	and.w	r2, r3, #15
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	440b      	add	r3, r1
 800e6d0:	3326      	adds	r3, #38	; 0x26
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	32b0      	adds	r2, #176	; 0xb0
 800e6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d01f      	beq.n	800e728 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	33b0      	adds	r3, #176	; 0xb0
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	4413      	add	r3, r2
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	32b0      	adds	r2, #176	; 0xb0
 800e706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f002 fb40 	bl	8010d90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	32b0      	adds	r2, #176	; 0xb0
 800e71a:	2100      	movs	r1, #0
 800e71c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20000177 	.word	0x20000177
 800e738:	20000178 	.word	0x20000178
 800e73c:	20000179 	.word	0x20000179

0800e740 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	32b0      	adds	r2, #176	; 0xb0
 800e754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e758:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e75a:	2300      	movs	r3, #0
 800e75c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d101      	bne.n	800e770 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e0bf      	b.n	800e8f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d050      	beq.n	800e81e <USBD_CDC_Setup+0xde>
 800e77c:	2b20      	cmp	r3, #32
 800e77e:	f040 80af 	bne.w	800e8e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d03a      	beq.n	800e800 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	b25b      	sxtb	r3, r3
 800e790:	2b00      	cmp	r3, #0
 800e792:	da1b      	bge.n	800e7cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	33b0      	adds	r3, #176	; 0xb0
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e7aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	88d2      	ldrh	r2, [r2, #6]
 800e7b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	88db      	ldrh	r3, [r3, #6]
 800e7b6:	2b07      	cmp	r3, #7
 800e7b8:	bf28      	it	cs
 800e7ba:	2307      	movcs	r3, #7
 800e7bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	89fa      	ldrh	r2, [r7, #14]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f001 fd89 	bl	80102dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e7ca:	e090      	b.n	800e8ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	785a      	ldrb	r2, [r3, #1]
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	88db      	ldrh	r3, [r3, #6]
 800e7da:	2b3f      	cmp	r3, #63	; 0x3f
 800e7dc:	d803      	bhi.n	800e7e6 <USBD_CDC_Setup+0xa6>
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	88db      	ldrh	r3, [r3, #6]
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	e000      	b.n	800e7e8 <USBD_CDC_Setup+0xa8>
 800e7e6:	2240      	movs	r2, #64	; 0x40
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e7ee:	6939      	ldr	r1, [r7, #16]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f001 fd9b 	bl	8010334 <USBD_CtlPrepareRx>
      break;
 800e7fe:	e076      	b.n	800e8ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	33b0      	adds	r3, #176	; 0xb0
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4413      	add	r3, r2
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	7850      	ldrb	r0, [r2, #1]
 800e816:	2200      	movs	r2, #0
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	4798      	blx	r3
      break;
 800e81c:	e067      	b.n	800e8ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	785b      	ldrb	r3, [r3, #1]
 800e822:	2b0b      	cmp	r3, #11
 800e824:	d851      	bhi.n	800e8ca <USBD_CDC_Setup+0x18a>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <USBD_CDC_Setup+0xec>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e85d 	.word	0x0800e85d
 800e830:	0800e8d9 	.word	0x0800e8d9
 800e834:	0800e8cb 	.word	0x0800e8cb
 800e838:	0800e8cb 	.word	0x0800e8cb
 800e83c:	0800e8cb 	.word	0x0800e8cb
 800e840:	0800e8cb 	.word	0x0800e8cb
 800e844:	0800e8cb 	.word	0x0800e8cb
 800e848:	0800e8cb 	.word	0x0800e8cb
 800e84c:	0800e8cb 	.word	0x0800e8cb
 800e850:	0800e8cb 	.word	0x0800e8cb
 800e854:	0800e887 	.word	0x0800e887
 800e858:	0800e8b1 	.word	0x0800e8b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b03      	cmp	r3, #3
 800e866:	d107      	bne.n	800e878 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e868:	f107 030a 	add.w	r3, r7, #10
 800e86c:	2202      	movs	r2, #2
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f001 fd33 	bl	80102dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e876:	e032      	b.n	800e8de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e878:	6839      	ldr	r1, [r7, #0]
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f001 fcbd 	bl	80101fa <USBD_CtlError>
            ret = USBD_FAIL;
 800e880:	2303      	movs	r3, #3
 800e882:	75fb      	strb	r3, [r7, #23]
          break;
 800e884:	e02b      	b.n	800e8de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b03      	cmp	r3, #3
 800e890:	d107      	bne.n	800e8a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e892:	f107 030d 	add.w	r3, r7, #13
 800e896:	2201      	movs	r2, #1
 800e898:	4619      	mov	r1, r3
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f001 fd1e 	bl	80102dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8a0:	e01d      	b.n	800e8de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f001 fca8 	bl	80101fa <USBD_CtlError>
            ret = USBD_FAIL;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e8ae:	e016      	b.n	800e8de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d00f      	beq.n	800e8dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f001 fc9b 	bl	80101fa <USBD_CtlError>
            ret = USBD_FAIL;
 800e8c4:	2303      	movs	r3, #3
 800e8c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e8c8:	e008      	b.n	800e8dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e8ca:	6839      	ldr	r1, [r7, #0]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f001 fc94 	bl	80101fa <USBD_CtlError>
          ret = USBD_FAIL;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e8d6:	e002      	b.n	800e8de <USBD_CDC_Setup+0x19e>
          break;
 800e8d8:	bf00      	nop
 800e8da:	e008      	b.n	800e8ee <USBD_CDC_Setup+0x1ae>
          break;
 800e8dc:	bf00      	nop
      }
      break;
 800e8de:	e006      	b.n	800e8ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f001 fc89 	bl	80101fa <USBD_CtlError>
      ret = USBD_FAIL;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e8ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3718      	adds	r7, #24
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e90a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	32b0      	adds	r2, #176	; 0xb0
 800e916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d101      	bne.n	800e922 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e91e:	2303      	movs	r3, #3
 800e920:	e065      	b.n	800e9ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	32b0      	adds	r2, #176	; 0xb0
 800e92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e930:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e932:	78fb      	ldrb	r3, [r7, #3]
 800e934:	f003 020f 	and.w	r2, r3, #15
 800e938:	6879      	ldr	r1, [r7, #4]
 800e93a:	4613      	mov	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4413      	add	r3, r2
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	440b      	add	r3, r1
 800e944:	3318      	adds	r3, #24
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d02f      	beq.n	800e9ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e94c:	78fb      	ldrb	r3, [r7, #3]
 800e94e:	f003 020f 	and.w	r2, r3, #15
 800e952:	6879      	ldr	r1, [r7, #4]
 800e954:	4613      	mov	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	440b      	add	r3, r1
 800e95e:	3318      	adds	r3, #24
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	78fb      	ldrb	r3, [r7, #3]
 800e964:	f003 010f 	and.w	r1, r3, #15
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	460b      	mov	r3, r1
 800e96c:	00db      	lsls	r3, r3, #3
 800e96e:	440b      	add	r3, r1
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4403      	add	r3, r0
 800e974:	3348      	adds	r3, #72	; 0x48
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	fbb2 f1f3 	udiv	r1, r2, r3
 800e97c:	fb01 f303 	mul.w	r3, r1, r3
 800e980:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e982:	2b00      	cmp	r3, #0
 800e984:	d112      	bne.n	800e9ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e986:	78fb      	ldrb	r3, [r7, #3]
 800e988:	f003 020f 	and.w	r2, r3, #15
 800e98c:	6879      	ldr	r1, [r7, #4]
 800e98e:	4613      	mov	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4413      	add	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	440b      	add	r3, r1
 800e998:	3318      	adds	r3, #24
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e99e:	78f9      	ldrb	r1, [r7, #3]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f002 f990 	bl	8010cca <USBD_LL_Transmit>
 800e9aa:	e01f      	b.n	800e9ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	33b0      	adds	r3, #176	; 0xb0
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d010      	beq.n	800e9ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	33b0      	adds	r3, #176	; 0xb0
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	691b      	ldr	r3, [r3, #16]
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e9e8:	78fa      	ldrb	r2, [r7, #3]
 800e9ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b084      	sub	sp, #16
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
 800e9fe:	460b      	mov	r3, r1
 800ea00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	32b0      	adds	r2, #176	; 0xb0
 800ea0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	32b0      	adds	r2, #176	; 0xb0
 800ea1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d101      	bne.n	800ea28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ea24:	2303      	movs	r3, #3
 800ea26:	e01a      	b.n	800ea5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ea28:	78fb      	ldrb	r3, [r7, #3]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f002 f98e 	bl	8010d4e <USBD_LL_GetRxDataSize>
 800ea32:	4602      	mov	r2, r0
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	33b0      	adds	r3, #176	; 0xb0
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	4413      	add	r3, r2
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ea58:	4611      	mov	r1, r2
 800ea5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	32b0      	adds	r2, #176	; 0xb0
 800ea78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d101      	bne.n	800ea88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea84:	2303      	movs	r3, #3
 800ea86:	e025      	b.n	800ead4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	33b0      	adds	r3, #176	; 0xb0
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d01a      	beq.n	800ead2 <USBD_CDC_EP0_RxReady+0x6c>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eaa2:	2bff      	cmp	r3, #255	; 0xff
 800eaa4:	d015      	beq.n	800ead2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	33b0      	adds	r3, #176	; 0xb0
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800eabe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eac6:	b292      	uxth	r2, r2
 800eac8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	22ff      	movs	r2, #255	; 0xff
 800eace:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eae4:	2182      	movs	r1, #130	; 0x82
 800eae6:	4818      	ldr	r0, [pc, #96]	; (800eb48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eae8:	f000 fd4f 	bl	800f58a <USBD_GetEpDesc>
 800eaec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eaee:	2101      	movs	r1, #1
 800eaf0:	4815      	ldr	r0, [pc, #84]	; (800eb48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eaf2:	f000 fd4a 	bl	800f58a <USBD_GetEpDesc>
 800eaf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eaf8:	2181      	movs	r1, #129	; 0x81
 800eafa:	4813      	ldr	r0, [pc, #76]	; (800eb48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eafc:	f000 fd45 	bl	800f58a <USBD_GetEpDesc>
 800eb00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d002      	beq.n	800eb0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	2210      	movs	r2, #16
 800eb0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d006      	beq.n	800eb22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb1c:	711a      	strb	r2, [r3, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d006      	beq.n	800eb36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb30:	711a      	strb	r2, [r3, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2243      	movs	r2, #67	; 0x43
 800eb3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb3c:	4b02      	ldr	r3, [pc, #8]	; (800eb48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20000134 	.word	0x20000134

0800eb4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eb54:	2182      	movs	r1, #130	; 0x82
 800eb56:	4818      	ldr	r0, [pc, #96]	; (800ebb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb58:	f000 fd17 	bl	800f58a <USBD_GetEpDesc>
 800eb5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eb5e:	2101      	movs	r1, #1
 800eb60:	4815      	ldr	r0, [pc, #84]	; (800ebb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb62:	f000 fd12 	bl	800f58a <USBD_GetEpDesc>
 800eb66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eb68:	2181      	movs	r1, #129	; 0x81
 800eb6a:	4813      	ldr	r0, [pc, #76]	; (800ebb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb6c:	f000 fd0d 	bl	800f58a <USBD_GetEpDesc>
 800eb70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d002      	beq.n	800eb7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	2210      	movs	r2, #16
 800eb7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d006      	beq.n	800eb92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	2200      	movs	r2, #0
 800eb88:	711a      	strb	r2, [r3, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f042 0202 	orr.w	r2, r2, #2
 800eb90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d006      	beq.n	800eba6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	711a      	strb	r2, [r3, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f042 0202 	orr.w	r2, r2, #2
 800eba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2243      	movs	r2, #67	; 0x43
 800ebaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ebac:	4b02      	ldr	r3, [pc, #8]	; (800ebb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3718      	adds	r7, #24
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000134 	.word	0x20000134

0800ebbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ebc4:	2182      	movs	r1, #130	; 0x82
 800ebc6:	4818      	ldr	r0, [pc, #96]	; (800ec28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebc8:	f000 fcdf 	bl	800f58a <USBD_GetEpDesc>
 800ebcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ebce:	2101      	movs	r1, #1
 800ebd0:	4815      	ldr	r0, [pc, #84]	; (800ec28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebd2:	f000 fcda 	bl	800f58a <USBD_GetEpDesc>
 800ebd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ebd8:	2181      	movs	r1, #129	; 0x81
 800ebda:	4813      	ldr	r0, [pc, #76]	; (800ec28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebdc:	f000 fcd5 	bl	800f58a <USBD_GetEpDesc>
 800ebe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d002      	beq.n	800ebee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	2210      	movs	r2, #16
 800ebec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d006      	beq.n	800ec02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebfc:	711a      	strb	r2, [r3, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d006      	beq.n	800ec16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec10:	711a      	strb	r2, [r3, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2243      	movs	r2, #67	; 0x43
 800ec1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ec1c:	4b02      	ldr	r3, [pc, #8]	; (800ec28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	20000134 	.word	0x20000134

0800ec2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	220a      	movs	r2, #10
 800ec38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ec3a:	4b03      	ldr	r3, [pc, #12]	; (800ec48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	200000f0 	.word	0x200000f0

0800ec4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	e009      	b.n	800ec74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	33b0      	adds	r3, #176	; 0xb0
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	4413      	add	r3, r2
 800ec6e:	683a      	ldr	r2, [r7, #0]
 800ec70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ec72:	2300      	movs	r3, #0
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b087      	sub	sp, #28
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	32b0      	adds	r2, #176	; 0xb0
 800ec96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eca2:	2303      	movs	r3, #3
 800eca4:	e008      	b.n	800ecb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ecb6:	2300      	movs	r3, #0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	371c      	adds	r7, #28
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	32b0      	adds	r2, #176	; 0xb0
 800ecd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ece4:	2303      	movs	r3, #3
 800ece6:	e004      	b.n	800ecf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
	...

0800ed00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	32b0      	adds	r2, #176	; 0xb0
 800ed12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	32b0      	adds	r2, #176	; 0xb0
 800ed26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e025      	b.n	800ed7e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d11f      	bne.n	800ed7c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ed44:	4b10      	ldr	r3, [pc, #64]	; (800ed88 <USBD_CDC_TransmitPacket+0x88>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	f003 020f 	and.w	r2, r3, #15
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	4613      	mov	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	4413      	add	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4403      	add	r3, r0
 800ed5e:	3318      	adds	r3, #24
 800ed60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ed62:	4b09      	ldr	r3, [pc, #36]	; (800ed88 <USBD_CDC_TransmitPacket+0x88>)
 800ed64:	7819      	ldrb	r1, [r3, #0]
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 ffa9 	bl	8010cca <USBD_LL_Transmit>

    ret = USBD_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	20000177 	.word	0x20000177

0800ed8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	32b0      	adds	r2, #176	; 0xb0
 800ed9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	32b0      	adds	r2, #176	; 0xb0
 800edae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e018      	b.n	800edec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	7c1b      	ldrb	r3, [r3, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d10a      	bne.n	800edd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800edc2:	4b0c      	ldr	r3, [pc, #48]	; (800edf4 <USBD_CDC_ReceivePacket+0x68>)
 800edc4:	7819      	ldrb	r1, [r3, #0]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800edcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f001 ff9b 	bl	8010d0c <USBD_LL_PrepareReceive>
 800edd6:	e008      	b.n	800edea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800edd8:	4b06      	ldr	r3, [pc, #24]	; (800edf4 <USBD_CDC_ReceivePacket+0x68>)
 800edda:	7819      	ldrb	r1, [r3, #0]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ede2:	2340      	movs	r3, #64	; 0x40
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f001 ff91 	bl	8010d0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	20000178 	.word	0x20000178

0800edf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e01f      	b.n	800ee50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d003      	beq.n	800ee36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	79fa      	ldrb	r2, [r7, #7]
 800ee42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f001 fe0b 	bl	8010a60 <USBD_LL_Init>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee62:	2300      	movs	r3, #0
 800ee64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	e025      	b.n	800eebc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	32ae      	adds	r2, #174	; 0xae
 800ee82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00f      	beq.n	800eeac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	32ae      	adds	r2, #174	; 0xae
 800ee96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9c:	f107 020e 	add.w	r2, r7, #14
 800eea0:	4610      	mov	r0, r2
 800eea2:	4798      	blx	r3
 800eea4:	4602      	mov	r2, r0
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800eeb2:	1c5a      	adds	r2, r3, #1
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800eeba:	2300      	movs	r3, #0
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3710      	adds	r7, #16
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f001 fe13 	bl	8010af8 <USBD_LL_Start>
 800eed2:	4603      	mov	r3, r0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eee4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b084      	sub	sp, #16
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	460b      	mov	r3, r1
 800eefc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eefe:	2300      	movs	r3, #0
 800ef00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d009      	beq.n	800ef20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	78fa      	ldrb	r2, [r7, #3]
 800ef16:	4611      	mov	r1, r2
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	4798      	blx	r3
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b084      	sub	sp, #16
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	460b      	mov	r3, r1
 800ef34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	78fa      	ldrb	r2, [r7, #3]
 800ef44:	4611      	mov	r1, r2
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	4798      	blx	r3
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef50:	2303      	movs	r3, #3
 800ef52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b084      	sub	sp, #16
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
 800ef66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f001 f908 	bl	8010186 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ef84:	461a      	mov	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef92:	f003 031f 	and.w	r3, r3, #31
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d01a      	beq.n	800efd0 <USBD_LL_SetupStage+0x72>
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d822      	bhi.n	800efe4 <USBD_LL_SetupStage+0x86>
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <USBD_LL_SetupStage+0x4a>
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d00a      	beq.n	800efbc <USBD_LL_SetupStage+0x5e>
 800efa6:	e01d      	b.n	800efe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fb5f 	bl	800f674 <USBD_StdDevReq>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73fb      	strb	r3, [r7, #15]
      break;
 800efba:	e020      	b.n	800effe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efc2:	4619      	mov	r1, r3
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fbc7 	bl	800f758 <USBD_StdItfReq>
 800efca:	4603      	mov	r3, r0
 800efcc:	73fb      	strb	r3, [r7, #15]
      break;
 800efce:	e016      	b.n	800effe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800efd6:	4619      	mov	r1, r3
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fc29 	bl	800f830 <USBD_StdEPReq>
 800efde:	4603      	mov	r3, r0
 800efe0:	73fb      	strb	r3, [r7, #15]
      break;
 800efe2:	e00c      	b.n	800effe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800efea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	4619      	mov	r1, r3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f001 fde0 	bl	8010bb8 <USBD_LL_StallEP>
 800eff8:	4603      	mov	r3, r0
 800effa:	73fb      	strb	r3, [r7, #15]
      break;
 800effc:	bf00      	nop
  }

  return ret;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	460b      	mov	r3, r1
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f01a:	7afb      	ldrb	r3, [r7, #11]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d16e      	bne.n	800f0fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f026:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f02e:	2b03      	cmp	r3, #3
 800f030:	f040 8098 	bne.w	800f164 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d913      	bls.n	800f068 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	689a      	ldr	r2, [r3, #8]
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	1ad2      	subs	r2, r2, r3
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	68da      	ldr	r2, [r3, #12]
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	4293      	cmp	r3, r2
 800f058:	bf28      	it	cs
 800f05a:	4613      	movcs	r3, r2
 800f05c:	461a      	mov	r2, r3
 800f05e:	6879      	ldr	r1, [r7, #4]
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f001 f984 	bl	801036e <USBD_CtlContinueRx>
 800f066:	e07d      	b.n	800f164 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f06e:	f003 031f 	and.w	r3, r3, #31
 800f072:	2b02      	cmp	r3, #2
 800f074:	d014      	beq.n	800f0a0 <USBD_LL_DataOutStage+0x98>
 800f076:	2b02      	cmp	r3, #2
 800f078:	d81d      	bhi.n	800f0b6 <USBD_LL_DataOutStage+0xae>
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <USBD_LL_DataOutStage+0x7c>
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d003      	beq.n	800f08a <USBD_LL_DataOutStage+0x82>
 800f082:	e018      	b.n	800f0b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f084:	2300      	movs	r3, #0
 800f086:	75bb      	strb	r3, [r7, #22]
            break;
 800f088:	e018      	b.n	800f0bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f090:	b2db      	uxtb	r3, r3
 800f092:	4619      	mov	r1, r3
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f000 fa5e 	bl	800f556 <USBD_CoreFindIF>
 800f09a:	4603      	mov	r3, r0
 800f09c:	75bb      	strb	r3, [r7, #22]
            break;
 800f09e:	e00d      	b.n	800f0bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f000 fa60 	bl	800f570 <USBD_CoreFindEP>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	75bb      	strb	r3, [r7, #22]
            break;
 800f0b4:	e002      	b.n	800f0bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	75bb      	strb	r3, [r7, #22]
            break;
 800f0ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f0bc:	7dbb      	ldrb	r3, [r7, #22]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d119      	bne.n	800f0f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d113      	bne.n	800f0f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f0ce:	7dba      	ldrb	r2, [r7, #22]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	32ae      	adds	r2, #174	; 0xae
 800f0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00b      	beq.n	800f0f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f0de:	7dba      	ldrb	r2, [r7, #22]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f0e6:	7dba      	ldrb	r2, [r7, #22]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	32ae      	adds	r2, #174	; 0xae
 800f0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f0f6:	68f8      	ldr	r0, [r7, #12]
 800f0f8:	f001 f94a 	bl	8010390 <USBD_CtlSendStatus>
 800f0fc:	e032      	b.n	800f164 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f0fe:	7afb      	ldrb	r3, [r7, #11]
 800f100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f104:	b2db      	uxtb	r3, r3
 800f106:	4619      	mov	r1, r3
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f000 fa31 	bl	800f570 <USBD_CoreFindEP>
 800f10e:	4603      	mov	r3, r0
 800f110:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f112:	7dbb      	ldrb	r3, [r7, #22]
 800f114:	2bff      	cmp	r3, #255	; 0xff
 800f116:	d025      	beq.n	800f164 <USBD_LL_DataOutStage+0x15c>
 800f118:	7dbb      	ldrb	r3, [r7, #22]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d122      	bne.n	800f164 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b03      	cmp	r3, #3
 800f128:	d117      	bne.n	800f15a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f12a:	7dba      	ldrb	r2, [r7, #22]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	32ae      	adds	r2, #174	; 0xae
 800f130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f134:	699b      	ldr	r3, [r3, #24]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d00f      	beq.n	800f15a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f13a:	7dba      	ldrb	r2, [r7, #22]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f142:	7dba      	ldrb	r2, [r7, #22]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	32ae      	adds	r2, #174	; 0xae
 800f148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f14c:	699b      	ldr	r3, [r3, #24]
 800f14e:	7afa      	ldrb	r2, [r7, #11]
 800f150:	4611      	mov	r1, r2
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	4798      	blx	r3
 800f156:	4603      	mov	r3, r0
 800f158:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f15a:	7dfb      	ldrb	r3, [r7, #23]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f160:	7dfb      	ldrb	r3, [r7, #23]
 800f162:	e000      	b.n	800f166 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b086      	sub	sp, #24
 800f172:	af00      	add	r7, sp, #0
 800f174:	60f8      	str	r0, [r7, #12]
 800f176:	460b      	mov	r3, r1
 800f178:	607a      	str	r2, [r7, #4]
 800f17a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f17c:	7afb      	ldrb	r3, [r7, #11]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d16f      	bne.n	800f262 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	3314      	adds	r3, #20
 800f186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d15a      	bne.n	800f248 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	689a      	ldr	r2, [r3, #8]
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d914      	bls.n	800f1c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	689a      	ldr	r2, [r3, #8]
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	1ad2      	subs	r2, r2, r3
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	6879      	ldr	r1, [r7, #4]
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f001 f8ac 	bl	8010312 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	2200      	movs	r2, #0
 800f1be:	2100      	movs	r1, #0
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f001 fda3 	bl	8010d0c <USBD_LL_PrepareReceive>
 800f1c6:	e03f      	b.n	800f248 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	68da      	ldr	r2, [r3, #12]
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d11c      	bne.n	800f20e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	685a      	ldr	r2, [r3, #4]
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d316      	bcc.n	800f20e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	685a      	ldr	r2, [r3, #4]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d20f      	bcs.n	800f20e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f001 f88d 	bl	8010312 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f200:	2300      	movs	r3, #0
 800f202:	2200      	movs	r2, #0
 800f204:	2100      	movs	r1, #0
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f001 fd80 	bl	8010d0c <USBD_LL_PrepareReceive>
 800f20c:	e01c      	b.n	800f248 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f214:	b2db      	uxtb	r3, r3
 800f216:	2b03      	cmp	r3, #3
 800f218:	d10f      	bne.n	800f23a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d009      	beq.n	800f23a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2200      	movs	r2, #0
 800f22a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f23a:	2180      	movs	r1, #128	; 0x80
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f001 fcbb 	bl	8010bb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f001 f8b7 	bl	80103b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d03a      	beq.n	800f2c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f7ff fe42 	bl	800eedc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f260:	e032      	b.n	800f2c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f262:	7afb      	ldrb	r3, [r7, #11]
 800f264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	4619      	mov	r1, r3
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f000 f97f 	bl	800f570 <USBD_CoreFindEP>
 800f272:	4603      	mov	r3, r0
 800f274:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f276:	7dfb      	ldrb	r3, [r7, #23]
 800f278:	2bff      	cmp	r3, #255	; 0xff
 800f27a:	d025      	beq.n	800f2c8 <USBD_LL_DataInStage+0x15a>
 800f27c:	7dfb      	ldrb	r3, [r7, #23]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d122      	bne.n	800f2c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	2b03      	cmp	r3, #3
 800f28c:	d11c      	bne.n	800f2c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f28e:	7dfa      	ldrb	r2, [r7, #23]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	32ae      	adds	r2, #174	; 0xae
 800f294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d014      	beq.n	800f2c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f29e:	7dfa      	ldrb	r2, [r7, #23]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f2a6:	7dfa      	ldrb	r2, [r7, #23]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	32ae      	adds	r2, #174	; 0xae
 800f2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	7afa      	ldrb	r2, [r7, #11]
 800f2b4:	4611      	mov	r1, r2
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	4798      	blx	r3
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f2be:	7dbb      	ldrb	r3, [r7, #22]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f2c4:	7dbb      	ldrb	r3, [r7, #22]
 800f2c6:	e000      	b.n	800f2ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3718      	adds	r7, #24
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b084      	sub	sp, #16
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d014      	beq.n	800f338 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00e      	beq.n	800f338 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	6852      	ldr	r2, [r2, #4]
 800f326:	b2d2      	uxtb	r2, r2
 800f328:	4611      	mov	r1, r2
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	4798      	blx	r3
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f334:	2303      	movs	r3, #3
 800f336:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f338:	2340      	movs	r3, #64	; 0x40
 800f33a:	2200      	movs	r2, #0
 800f33c:	2100      	movs	r1, #0
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f001 fbf5 	bl	8010b2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2240      	movs	r2, #64	; 0x40
 800f350:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f354:	2340      	movs	r3, #64	; 0x40
 800f356:	2200      	movs	r2, #0
 800f358:	2180      	movs	r1, #128	; 0x80
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f001 fbe7 	bl	8010b2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2240      	movs	r2, #64	; 0x40
 800f36a:	621a      	str	r2, [r3, #32]

  return ret;
 800f36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	460b      	mov	r3, r1
 800f380:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	78fa      	ldrb	r2, [r7, #3]
 800f386:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f388:	2300      	movs	r3, #0
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	370c      	adds	r7, #12
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3a4:	b2da      	uxtb	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2204      	movs	r2, #4
 800f3b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	370c      	adds	r7, #12
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f3c2:	b480      	push	{r7}
 800f3c4:	b083      	sub	sp, #12
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d106      	bne.n	800f3e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b082      	sub	sp, #8
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b03      	cmp	r3, #3
 800f404:	d110      	bne.n	800f428 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00b      	beq.n	800f428 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f416:	69db      	ldr	r3, [r3, #28]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d005      	beq.n	800f428 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f422:	69db      	ldr	r3, [r3, #28]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	460b      	mov	r3, r1
 800f43c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	32ae      	adds	r2, #174	; 0xae
 800f448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f450:	2303      	movs	r3, #3
 800f452:	e01c      	b.n	800f48e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	d115      	bne.n	800f48c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	32ae      	adds	r2, #174	; 0xae
 800f46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f46e:	6a1b      	ldr	r3, [r3, #32]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d00b      	beq.n	800f48c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	32ae      	adds	r2, #174	; 0xae
 800f47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f482:	6a1b      	ldr	r3, [r3, #32]
 800f484:	78fa      	ldrb	r2, [r7, #3]
 800f486:	4611      	mov	r1, r2
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b082      	sub	sp, #8
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	32ae      	adds	r2, #174	; 0xae
 800f4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	e01c      	b.n	800f4f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	d115      	bne.n	800f4f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	32ae      	adds	r2, #174	; 0xae
 800f4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00b      	beq.n	800f4f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	32ae      	adds	r2, #174	; 0xae
 800f4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	78fa      	ldrb	r2, [r7, #3]
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f4fa:	b480      	push	{r7}
 800f4fc:	b083      	sub	sp, #12
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f502:	2300      	movs	r3, #0
}
 800f504:	4618      	mov	r0, r3
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00e      	beq.n	800f54c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	6852      	ldr	r2, [r2, #4]
 800f53a:	b2d2      	uxtb	r2, r2
 800f53c:	4611      	mov	r1, r2
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	4798      	blx	r3
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d001      	beq.n	800f54c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f548:	2303      	movs	r3, #3
 800f54a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f556:	b480      	push	{r7}
 800f558:	b083      	sub	sp, #12
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	460b      	mov	r3, r1
 800f560:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f562:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f564:	4618      	mov	r0, r3
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	460b      	mov	r3, r1
 800f57a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f57c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f57e:	4618      	mov	r0, r3
 800f580:	370c      	adds	r7, #12
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b086      	sub	sp, #24
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	460b      	mov	r3, r1
 800f594:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	885b      	ldrh	r3, [r3, #2]
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d920      	bls.n	800f5f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f5ba:	e013      	b.n	800f5e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f5bc:	f107 030a 	add.w	r3, r7, #10
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6978      	ldr	r0, [r7, #20]
 800f5c4:	f000 f81b 	bl	800f5fe <USBD_GetNextDesc>
 800f5c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	785b      	ldrb	r3, [r3, #1]
 800f5ce:	2b05      	cmp	r3, #5
 800f5d0:	d108      	bne.n	800f5e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	789b      	ldrb	r3, [r3, #2]
 800f5da:	78fa      	ldrb	r2, [r7, #3]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d008      	beq.n	800f5f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	885b      	ldrh	r3, [r3, #2]
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	897b      	ldrh	r3, [r7, #10]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d8e5      	bhi.n	800f5bc <USBD_GetEpDesc+0x32>
 800f5f0:	e000      	b.n	800f5f4 <USBD_GetEpDesc+0x6a>
          break;
 800f5f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f5f4:	693b      	ldr	r3, [r7, #16]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b085      	sub	sp, #20
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	881a      	ldrh	r2, [r3, #0]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	b29b      	uxth	r3, r3
 800f616:	4413      	add	r3, r2
 800f618:	b29a      	uxth	r2, r3
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4413      	add	r3, r2
 800f628:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f62a:	68fb      	ldr	r3, [r7, #12]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f638:	b480      	push	{r7}
 800f63a:	b087      	sub	sp, #28
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	3301      	adds	r3, #1
 800f64e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f656:	8a3b      	ldrh	r3, [r7, #16]
 800f658:	021b      	lsls	r3, r3, #8
 800f65a:	b21a      	sxth	r2, r3
 800f65c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f660:	4313      	orrs	r3, r2
 800f662:	b21b      	sxth	r3, r3
 800f664:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f666:	89fb      	ldrh	r3, [r7, #14]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	371c      	adds	r7, #28
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f68a:	2b40      	cmp	r3, #64	; 0x40
 800f68c:	d005      	beq.n	800f69a <USBD_StdDevReq+0x26>
 800f68e:	2b40      	cmp	r3, #64	; 0x40
 800f690:	d857      	bhi.n	800f742 <USBD_StdDevReq+0xce>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00f      	beq.n	800f6b6 <USBD_StdDevReq+0x42>
 800f696:	2b20      	cmp	r3, #32
 800f698:	d153      	bne.n	800f742 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	32ae      	adds	r2, #174	; 0xae
 800f6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	4798      	blx	r3
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800f6b4:	e04a      	b.n	800f74c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	785b      	ldrb	r3, [r3, #1]
 800f6ba:	2b09      	cmp	r3, #9
 800f6bc:	d83b      	bhi.n	800f736 <USBD_StdDevReq+0xc2>
 800f6be:	a201      	add	r2, pc, #4	; (adr r2, 800f6c4 <USBD_StdDevReq+0x50>)
 800f6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c4:	0800f719 	.word	0x0800f719
 800f6c8:	0800f72d 	.word	0x0800f72d
 800f6cc:	0800f737 	.word	0x0800f737
 800f6d0:	0800f723 	.word	0x0800f723
 800f6d4:	0800f737 	.word	0x0800f737
 800f6d8:	0800f6f7 	.word	0x0800f6f7
 800f6dc:	0800f6ed 	.word	0x0800f6ed
 800f6e0:	0800f737 	.word	0x0800f737
 800f6e4:	0800f70f 	.word	0x0800f70f
 800f6e8:	0800f701 	.word	0x0800f701
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fa3c 	bl	800fb6c <USBD_GetDescriptor>
          break;
 800f6f4:	e024      	b.n	800f740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fba1 	bl	800fe40 <USBD_SetAddress>
          break;
 800f6fe:	e01f      	b.n	800f740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fbe0 	bl	800fec8 <USBD_SetConfig>
 800f708:	4603      	mov	r3, r0
 800f70a:	73fb      	strb	r3, [r7, #15]
          break;
 800f70c:	e018      	b.n	800f740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fc83 	bl	801001c <USBD_GetConfig>
          break;
 800f716:	e013      	b.n	800f740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 fcb4 	bl	8010088 <USBD_GetStatus>
          break;
 800f720:	e00e      	b.n	800f740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f722:	6839      	ldr	r1, [r7, #0]
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fce3 	bl	80100f0 <USBD_SetFeature>
          break;
 800f72a:	e009      	b.n	800f740 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 fd07 	bl	8010142 <USBD_ClrFeature>
          break;
 800f734:	e004      	b.n	800f740 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f736:	6839      	ldr	r1, [r7, #0]
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 fd5e 	bl	80101fa <USBD_CtlError>
          break;
 800f73e:	bf00      	nop
      }
      break;
 800f740:	e004      	b.n	800f74c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 fd58 	bl	80101fa <USBD_CtlError>
      break;
 800f74a:	bf00      	nop
  }

  return ret;
 800f74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop

0800f758 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f762:	2300      	movs	r3, #0
 800f764:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f76e:	2b40      	cmp	r3, #64	; 0x40
 800f770:	d005      	beq.n	800f77e <USBD_StdItfReq+0x26>
 800f772:	2b40      	cmp	r3, #64	; 0x40
 800f774:	d852      	bhi.n	800f81c <USBD_StdItfReq+0xc4>
 800f776:	2b00      	cmp	r3, #0
 800f778:	d001      	beq.n	800f77e <USBD_StdItfReq+0x26>
 800f77a:	2b20      	cmp	r3, #32
 800f77c:	d14e      	bne.n	800f81c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f784:	b2db      	uxtb	r3, r3
 800f786:	3b01      	subs	r3, #1
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d840      	bhi.n	800f80e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	889b      	ldrh	r3, [r3, #4]
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b01      	cmp	r3, #1
 800f794:	d836      	bhi.n	800f804 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	889b      	ldrh	r3, [r3, #4]
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff fed9 	bl	800f556 <USBD_CoreFindIF>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7a8:	7bbb      	ldrb	r3, [r7, #14]
 800f7aa:	2bff      	cmp	r3, #255	; 0xff
 800f7ac:	d01d      	beq.n	800f7ea <USBD_StdItfReq+0x92>
 800f7ae:	7bbb      	ldrb	r3, [r7, #14]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d11a      	bne.n	800f7ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f7b4:	7bba      	ldrb	r2, [r7, #14]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	32ae      	adds	r2, #174	; 0xae
 800f7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00f      	beq.n	800f7e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f7c4:	7bba      	ldrb	r2, [r7, #14]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f7cc:	7bba      	ldrb	r2, [r7, #14]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	32ae      	adds	r2, #174	; 0xae
 800f7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	6839      	ldr	r1, [r7, #0]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	4798      	blx	r3
 800f7de:	4603      	mov	r3, r0
 800f7e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f7e2:	e004      	b.n	800f7ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f7e8:	e001      	b.n	800f7ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f7ea:	2303      	movs	r3, #3
 800f7ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	88db      	ldrh	r3, [r3, #6]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d110      	bne.n	800f818 <USBD_StdItfReq+0xc0>
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d10d      	bne.n	800f818 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fdc7 	bl	8010390 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f802:	e009      	b.n	800f818 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fcf7 	bl	80101fa <USBD_CtlError>
          break;
 800f80c:	e004      	b.n	800f818 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fcf2 	bl	80101fa <USBD_CtlError>
          break;
 800f816:	e000      	b.n	800f81a <USBD_StdItfReq+0xc2>
          break;
 800f818:	bf00      	nop
      }
      break;
 800f81a:	e004      	b.n	800f826 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fceb 	bl	80101fa <USBD_CtlError>
      break;
 800f824:	bf00      	nop
  }

  return ret;
 800f826:	7bfb      	ldrb	r3, [r7, #15]
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f83a:	2300      	movs	r3, #0
 800f83c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	889b      	ldrh	r3, [r3, #4]
 800f842:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f84c:	2b40      	cmp	r3, #64	; 0x40
 800f84e:	d007      	beq.n	800f860 <USBD_StdEPReq+0x30>
 800f850:	2b40      	cmp	r3, #64	; 0x40
 800f852:	f200 817f 	bhi.w	800fb54 <USBD_StdEPReq+0x324>
 800f856:	2b00      	cmp	r3, #0
 800f858:	d02a      	beq.n	800f8b0 <USBD_StdEPReq+0x80>
 800f85a:	2b20      	cmp	r3, #32
 800f85c:	f040 817a 	bne.w	800fb54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f860:	7bbb      	ldrb	r3, [r7, #14]
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff fe83 	bl	800f570 <USBD_CoreFindEP>
 800f86a:	4603      	mov	r3, r0
 800f86c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f86e:	7b7b      	ldrb	r3, [r7, #13]
 800f870:	2bff      	cmp	r3, #255	; 0xff
 800f872:	f000 8174 	beq.w	800fb5e <USBD_StdEPReq+0x32e>
 800f876:	7b7b      	ldrb	r3, [r7, #13]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f040 8170 	bne.w	800fb5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f87e:	7b7a      	ldrb	r2, [r7, #13]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f886:	7b7a      	ldrb	r2, [r7, #13]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	32ae      	adds	r2, #174	; 0xae
 800f88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	2b00      	cmp	r3, #0
 800f894:	f000 8163 	beq.w	800fb5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f898:	7b7a      	ldrb	r2, [r7, #13]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	32ae      	adds	r2, #174	; 0xae
 800f89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	6839      	ldr	r1, [r7, #0]
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	4798      	blx	r3
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f8ae:	e156      	b.n	800fb5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	785b      	ldrb	r3, [r3, #1]
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d008      	beq.n	800f8ca <USBD_StdEPReq+0x9a>
 800f8b8:	2b03      	cmp	r3, #3
 800f8ba:	f300 8145 	bgt.w	800fb48 <USBD_StdEPReq+0x318>
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f000 809b 	beq.w	800f9fa <USBD_StdEPReq+0x1ca>
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d03c      	beq.n	800f942 <USBD_StdEPReq+0x112>
 800f8c8:	e13e      	b.n	800fb48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	d002      	beq.n	800f8dc <USBD_StdEPReq+0xac>
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d016      	beq.n	800f908 <USBD_StdEPReq+0xd8>
 800f8da:	e02c      	b.n	800f936 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00d      	beq.n	800f8fe <USBD_StdEPReq+0xce>
 800f8e2:	7bbb      	ldrb	r3, [r7, #14]
 800f8e4:	2b80      	cmp	r3, #128	; 0x80
 800f8e6:	d00a      	beq.n	800f8fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f001 f963 	bl	8010bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8f2:	2180      	movs	r1, #128	; 0x80
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f001 f95f 	bl	8010bb8 <USBD_LL_StallEP>
 800f8fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8fc:	e020      	b.n	800f940 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 fc7a 	bl	80101fa <USBD_CtlError>
              break;
 800f906:	e01b      	b.n	800f940 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	885b      	ldrh	r3, [r3, #2]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10e      	bne.n	800f92e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f910:	7bbb      	ldrb	r3, [r7, #14]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00b      	beq.n	800f92e <USBD_StdEPReq+0xfe>
 800f916:	7bbb      	ldrb	r3, [r7, #14]
 800f918:	2b80      	cmp	r3, #128	; 0x80
 800f91a:	d008      	beq.n	800f92e <USBD_StdEPReq+0xfe>
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	88db      	ldrh	r3, [r3, #6]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d104      	bne.n	800f92e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f924:	7bbb      	ldrb	r3, [r7, #14]
 800f926:	4619      	mov	r1, r3
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f001 f945 	bl	8010bb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 fd2e 	bl	8010390 <USBD_CtlSendStatus>

              break;
 800f934:	e004      	b.n	800f940 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fc5e 	bl	80101fa <USBD_CtlError>
              break;
 800f93e:	bf00      	nop
          }
          break;
 800f940:	e107      	b.n	800fb52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d002      	beq.n	800f954 <USBD_StdEPReq+0x124>
 800f94e:	2b03      	cmp	r3, #3
 800f950:	d016      	beq.n	800f980 <USBD_StdEPReq+0x150>
 800f952:	e04b      	b.n	800f9ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f954:	7bbb      	ldrb	r3, [r7, #14]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00d      	beq.n	800f976 <USBD_StdEPReq+0x146>
 800f95a:	7bbb      	ldrb	r3, [r7, #14]
 800f95c:	2b80      	cmp	r3, #128	; 0x80
 800f95e:	d00a      	beq.n	800f976 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f960:	7bbb      	ldrb	r3, [r7, #14]
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f001 f927 	bl	8010bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f96a:	2180      	movs	r1, #128	; 0x80
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f001 f923 	bl	8010bb8 <USBD_LL_StallEP>
 800f972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f974:	e040      	b.n	800f9f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fc3e 	bl	80101fa <USBD_CtlError>
              break;
 800f97e:	e03b      	b.n	800f9f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	885b      	ldrh	r3, [r3, #2]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d136      	bne.n	800f9f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f988:	7bbb      	ldrb	r3, [r7, #14]
 800f98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f992:	7bbb      	ldrb	r3, [r7, #14]
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f001 f92d 	bl	8010bf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 fcf7 	bl	8010390 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f9a2:	7bbb      	ldrb	r3, [r7, #14]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff fde2 	bl	800f570 <USBD_CoreFindEP>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f9b0:	7b7b      	ldrb	r3, [r7, #13]
 800f9b2:	2bff      	cmp	r3, #255	; 0xff
 800f9b4:	d01f      	beq.n	800f9f6 <USBD_StdEPReq+0x1c6>
 800f9b6:	7b7b      	ldrb	r3, [r7, #13]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d11c      	bne.n	800f9f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f9bc:	7b7a      	ldrb	r2, [r7, #13]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f9c4:	7b7a      	ldrb	r2, [r7, #13]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	32ae      	adds	r2, #174	; 0xae
 800f9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d010      	beq.n	800f9f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f9d4:	7b7a      	ldrb	r2, [r7, #13]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	32ae      	adds	r2, #174	; 0xae
 800f9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	4798      	blx	r3
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f9ea:	e004      	b.n	800f9f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 fc03 	bl	80101fa <USBD_CtlError>
              break;
 800f9f4:	e000      	b.n	800f9f8 <USBD_StdEPReq+0x1c8>
              break;
 800f9f6:	bf00      	nop
          }
          break;
 800f9f8:	e0ab      	b.n	800fb52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	2b02      	cmp	r3, #2
 800fa04:	d002      	beq.n	800fa0c <USBD_StdEPReq+0x1dc>
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d032      	beq.n	800fa70 <USBD_StdEPReq+0x240>
 800fa0a:	e097      	b.n	800fb3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa0c:	7bbb      	ldrb	r3, [r7, #14]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d007      	beq.n	800fa22 <USBD_StdEPReq+0x1f2>
 800fa12:	7bbb      	ldrb	r3, [r7, #14]
 800fa14:	2b80      	cmp	r3, #128	; 0x80
 800fa16:	d004      	beq.n	800fa22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fa18:	6839      	ldr	r1, [r7, #0]
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 fbed 	bl	80101fa <USBD_CtlError>
                break;
 800fa20:	e091      	b.n	800fb46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	da0b      	bge.n	800fa42 <USBD_StdEPReq+0x212>
 800fa2a:	7bbb      	ldrb	r3, [r7, #14]
 800fa2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa30:	4613      	mov	r3, r2
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4413      	add	r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	3310      	adds	r3, #16
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	3304      	adds	r3, #4
 800fa40:	e00b      	b.n	800fa5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
 800fa44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa48:	4613      	mov	r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4413      	add	r3, r2
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	4413      	add	r3, r2
 800fa58:	3304      	adds	r3, #4
 800fa5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2202      	movs	r2, #2
 800fa66:	4619      	mov	r1, r3
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 fc37 	bl	80102dc <USBD_CtlSendData>
              break;
 800fa6e:	e06a      	b.n	800fb46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fa70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	da11      	bge.n	800fa9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fa78:	7bbb      	ldrb	r3, [r7, #14]
 800fa7a:	f003 020f 	and.w	r2, r3, #15
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	4613      	mov	r3, r2
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	440b      	add	r3, r1
 800fa8a:	3324      	adds	r3, #36	; 0x24
 800fa8c:	881b      	ldrh	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d117      	bne.n	800fac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fa92:	6839      	ldr	r1, [r7, #0]
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fbb0 	bl	80101fa <USBD_CtlError>
                  break;
 800fa9a:	e054      	b.n	800fb46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa9c:	7bbb      	ldrb	r3, [r7, #14]
 800fa9e:	f003 020f 	and.w	r2, r3, #15
 800faa2:	6879      	ldr	r1, [r7, #4]
 800faa4:	4613      	mov	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4413      	add	r3, r2
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	440b      	add	r3, r1
 800faae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d104      	bne.n	800fac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fab8:	6839      	ldr	r1, [r7, #0]
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fb9d 	bl	80101fa <USBD_CtlError>
                  break;
 800fac0:	e041      	b.n	800fb46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	da0b      	bge.n	800fae2 <USBD_StdEPReq+0x2b2>
 800faca:	7bbb      	ldrb	r3, [r7, #14]
 800facc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fad0:	4613      	mov	r3, r2
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	4413      	add	r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	3310      	adds	r3, #16
 800fada:	687a      	ldr	r2, [r7, #4]
 800fadc:	4413      	add	r3, r2
 800fade:	3304      	adds	r3, #4
 800fae0:	e00b      	b.n	800fafa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fae2:	7bbb      	ldrb	r3, [r7, #14]
 800fae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fae8:	4613      	mov	r3, r2
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	4413      	add	r3, r2
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	4413      	add	r3, r2
 800faf8:	3304      	adds	r3, #4
 800fafa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fafc:	7bbb      	ldrb	r3, [r7, #14]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d002      	beq.n	800fb08 <USBD_StdEPReq+0x2d8>
 800fb02:	7bbb      	ldrb	r3, [r7, #14]
 800fb04:	2b80      	cmp	r3, #128	; 0x80
 800fb06:	d103      	bne.n	800fb10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	601a      	str	r2, [r3, #0]
 800fb0e:	e00e      	b.n	800fb2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fb10:	7bbb      	ldrb	r3, [r7, #14]
 800fb12:	4619      	mov	r1, r3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f001 f88d 	bl	8010c34 <USBD_LL_IsStallEP>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2201      	movs	r2, #1
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	e002      	b.n	800fb2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	2202      	movs	r2, #2
 800fb32:	4619      	mov	r1, r3
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fbd1 	bl	80102dc <USBD_CtlSendData>
              break;
 800fb3a:	e004      	b.n	800fb46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 fb5b 	bl	80101fa <USBD_CtlError>
              break;
 800fb44:	bf00      	nop
          }
          break;
 800fb46:	e004      	b.n	800fb52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fb55 	bl	80101fa <USBD_CtlError>
          break;
 800fb50:	bf00      	nop
      }
      break;
 800fb52:	e005      	b.n	800fb60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fb54:	6839      	ldr	r1, [r7, #0]
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fb4f 	bl	80101fa <USBD_CtlError>
      break;
 800fb5c:	e000      	b.n	800fb60 <USBD_StdEPReq+0x330>
      break;
 800fb5e:	bf00      	nop
  }

  return ret;
 800fb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3710      	adds	r7, #16
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
	...

0800fb6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fb76:	2300      	movs	r3, #0
 800fb78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	885b      	ldrh	r3, [r3, #2]
 800fb86:	0a1b      	lsrs	r3, r3, #8
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	2b06      	cmp	r3, #6
 800fb8e:	f200 8128 	bhi.w	800fde2 <USBD_GetDescriptor+0x276>
 800fb92:	a201      	add	r2, pc, #4	; (adr r2, 800fb98 <USBD_GetDescriptor+0x2c>)
 800fb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb98:	0800fbb5 	.word	0x0800fbb5
 800fb9c:	0800fbcd 	.word	0x0800fbcd
 800fba0:	0800fc0d 	.word	0x0800fc0d
 800fba4:	0800fde3 	.word	0x0800fde3
 800fba8:	0800fde3 	.word	0x0800fde3
 800fbac:	0800fd83 	.word	0x0800fd83
 800fbb0:	0800fdaf 	.word	0x0800fdaf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	7c12      	ldrb	r2, [r2, #16]
 800fbc0:	f107 0108 	add.w	r1, r7, #8
 800fbc4:	4610      	mov	r0, r2
 800fbc6:	4798      	blx	r3
 800fbc8:	60f8      	str	r0, [r7, #12]
      break;
 800fbca:	e112      	b.n	800fdf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7c1b      	ldrb	r3, [r3, #16]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d10d      	bne.n	800fbf0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbdc:	f107 0208 	add.w	r2, r7, #8
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	4798      	blx	r3
 800fbe4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	2202      	movs	r2, #2
 800fbec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fbee:	e100      	b.n	800fdf2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf8:	f107 0208 	add.w	r2, r7, #8
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4798      	blx	r3
 800fc00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	2202      	movs	r2, #2
 800fc08:	701a      	strb	r2, [r3, #0]
      break;
 800fc0a:	e0f2      	b.n	800fdf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	885b      	ldrh	r3, [r3, #2]
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	2b05      	cmp	r3, #5
 800fc14:	f200 80ac 	bhi.w	800fd70 <USBD_GetDescriptor+0x204>
 800fc18:	a201      	add	r2, pc, #4	; (adr r2, 800fc20 <USBD_GetDescriptor+0xb4>)
 800fc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc1e:	bf00      	nop
 800fc20:	0800fc39 	.word	0x0800fc39
 800fc24:	0800fc6d 	.word	0x0800fc6d
 800fc28:	0800fca1 	.word	0x0800fca1
 800fc2c:	0800fcd5 	.word	0x0800fcd5
 800fc30:	0800fd09 	.word	0x0800fd09
 800fc34:	0800fd3d 	.word	0x0800fd3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00b      	beq.n	800fc5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	7c12      	ldrb	r2, [r2, #16]
 800fc50:	f107 0108 	add.w	r1, r7, #8
 800fc54:	4610      	mov	r0, r2
 800fc56:	4798      	blx	r3
 800fc58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc5a:	e091      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 facb 	bl	80101fa <USBD_CtlError>
            err++;
 800fc64:	7afb      	ldrb	r3, [r7, #11]
 800fc66:	3301      	adds	r3, #1
 800fc68:	72fb      	strb	r3, [r7, #11]
          break;
 800fc6a:	e089      	b.n	800fd80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d00b      	beq.n	800fc90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc7e:	689b      	ldr	r3, [r3, #8]
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	7c12      	ldrb	r2, [r2, #16]
 800fc84:	f107 0108 	add.w	r1, r7, #8
 800fc88:	4610      	mov	r0, r2
 800fc8a:	4798      	blx	r3
 800fc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc8e:	e077      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc90:	6839      	ldr	r1, [r7, #0]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 fab1 	bl	80101fa <USBD_CtlError>
            err++;
 800fc98:	7afb      	ldrb	r3, [r7, #11]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc9e:	e06f      	b.n	800fd80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00b      	beq.n	800fcc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	7c12      	ldrb	r2, [r2, #16]
 800fcb8:	f107 0108 	add.w	r1, r7, #8
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	4798      	blx	r3
 800fcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcc2:	e05d      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcc4:	6839      	ldr	r1, [r7, #0]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 fa97 	bl	80101fa <USBD_CtlError>
            err++;
 800fccc:	7afb      	ldrb	r3, [r7, #11]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	72fb      	strb	r3, [r7, #11]
          break;
 800fcd2:	e055      	b.n	800fd80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00b      	beq.n	800fcf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	7c12      	ldrb	r2, [r2, #16]
 800fcec:	f107 0108 	add.w	r1, r7, #8
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	4798      	blx	r3
 800fcf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcf6:	e043      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fa7d 	bl	80101fa <USBD_CtlError>
            err++;
 800fd00:	7afb      	ldrb	r3, [r7, #11]
 800fd02:	3301      	adds	r3, #1
 800fd04:	72fb      	strb	r3, [r7, #11]
          break;
 800fd06:	e03b      	b.n	800fd80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd0e:	695b      	ldr	r3, [r3, #20]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00b      	beq.n	800fd2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd1a:	695b      	ldr	r3, [r3, #20]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	7c12      	ldrb	r2, [r2, #16]
 800fd20:	f107 0108 	add.w	r1, r7, #8
 800fd24:	4610      	mov	r0, r2
 800fd26:	4798      	blx	r3
 800fd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd2a:	e029      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fa63 	bl	80101fa <USBD_CtlError>
            err++;
 800fd34:	7afb      	ldrb	r3, [r7, #11]
 800fd36:	3301      	adds	r3, #1
 800fd38:	72fb      	strb	r3, [r7, #11]
          break;
 800fd3a:	e021      	b.n	800fd80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd42:	699b      	ldr	r3, [r3, #24]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00b      	beq.n	800fd60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd4e:	699b      	ldr	r3, [r3, #24]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	7c12      	ldrb	r2, [r2, #16]
 800fd54:	f107 0108 	add.w	r1, r7, #8
 800fd58:	4610      	mov	r0, r2
 800fd5a:	4798      	blx	r3
 800fd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd5e:	e00f      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd60:	6839      	ldr	r1, [r7, #0]
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f000 fa49 	bl	80101fa <USBD_CtlError>
            err++;
 800fd68:	7afb      	ldrb	r3, [r7, #11]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd6e:	e007      	b.n	800fd80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fd70:	6839      	ldr	r1, [r7, #0]
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 fa41 	bl	80101fa <USBD_CtlError>
          err++;
 800fd78:	7afb      	ldrb	r3, [r7, #11]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fd7e:	bf00      	nop
      }
      break;
 800fd80:	e037      	b.n	800fdf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	7c1b      	ldrb	r3, [r3, #16]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d109      	bne.n	800fd9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd92:	f107 0208 	add.w	r2, r7, #8
 800fd96:	4610      	mov	r0, r2
 800fd98:	4798      	blx	r3
 800fd9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd9c:	e029      	b.n	800fdf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fd9e:	6839      	ldr	r1, [r7, #0]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fa2a 	bl	80101fa <USBD_CtlError>
        err++;
 800fda6:	7afb      	ldrb	r3, [r7, #11]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	72fb      	strb	r3, [r7, #11]
      break;
 800fdac:	e021      	b.n	800fdf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	7c1b      	ldrb	r3, [r3, #16]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d10d      	bne.n	800fdd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	f107 0208 	add.w	r2, r7, #8
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	4798      	blx	r3
 800fdc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	2207      	movs	r2, #7
 800fdce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fdd0:	e00f      	b.n	800fdf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fdd2:	6839      	ldr	r1, [r7, #0]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 fa10 	bl	80101fa <USBD_CtlError>
        err++;
 800fdda:	7afb      	ldrb	r3, [r7, #11]
 800fddc:	3301      	adds	r3, #1
 800fdde:	72fb      	strb	r3, [r7, #11]
      break;
 800fde0:	e007      	b.n	800fdf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fde2:	6839      	ldr	r1, [r7, #0]
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fa08 	bl	80101fa <USBD_CtlError>
      err++;
 800fdea:	7afb      	ldrb	r3, [r7, #11]
 800fdec:	3301      	adds	r3, #1
 800fdee:	72fb      	strb	r3, [r7, #11]
      break;
 800fdf0:	bf00      	nop
  }

  if (err != 0U)
 800fdf2:	7afb      	ldrb	r3, [r7, #11]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d11e      	bne.n	800fe36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	88db      	ldrh	r3, [r3, #6]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d016      	beq.n	800fe2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fe00:	893b      	ldrh	r3, [r7, #8]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00e      	beq.n	800fe24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	88da      	ldrh	r2, [r3, #6]
 800fe0a:	893b      	ldrh	r3, [r7, #8]
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	bf28      	it	cs
 800fe10:	4613      	movcs	r3, r2
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe16:	893b      	ldrh	r3, [r7, #8]
 800fe18:	461a      	mov	r2, r3
 800fe1a:	68f9      	ldr	r1, [r7, #12]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fa5d 	bl	80102dc <USBD_CtlSendData>
 800fe22:	e009      	b.n	800fe38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f9e7 	bl	80101fa <USBD_CtlError>
 800fe2c:	e004      	b.n	800fe38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 faae 	bl	8010390 <USBD_CtlSendStatus>
 800fe34:	e000      	b.n	800fe38 <USBD_GetDescriptor+0x2cc>
    return;
 800fe36:	bf00      	nop
  }
}
 800fe38:	3710      	adds	r7, #16
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop

0800fe40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	889b      	ldrh	r3, [r3, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d131      	bne.n	800feb6 <USBD_SetAddress+0x76>
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	88db      	ldrh	r3, [r3, #6]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d12d      	bne.n	800feb6 <USBD_SetAddress+0x76>
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	885b      	ldrh	r3, [r3, #2]
 800fe5e:	2b7f      	cmp	r3, #127	; 0x7f
 800fe60:	d829      	bhi.n	800feb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	885b      	ldrh	r3, [r3, #2]
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	2b03      	cmp	r3, #3
 800fe78:	d104      	bne.n	800fe84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fe7a:	6839      	ldr	r1, [r7, #0]
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f9bc 	bl	80101fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe82:	e01d      	b.n	800fec0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	7bfa      	ldrb	r2, [r7, #15]
 800fe88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	4619      	mov	r1, r3
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f000 fefb 	bl	8010c8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 fa7a 	bl	8010390 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d004      	beq.n	800feac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2202      	movs	r2, #2
 800fea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feaa:	e009      	b.n	800fec0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb4:	e004      	b.n	800fec0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800feb6:	6839      	ldr	r1, [r7, #0]
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 f99e 	bl	80101fa <USBD_CtlError>
  }
}
 800febe:	bf00      	nop
 800fec0:	bf00      	nop
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	885b      	ldrh	r3, [r3, #2]
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	4b4e      	ldr	r3, [pc, #312]	; (8010018 <USBD_SetConfig+0x150>)
 800fede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fee0:	4b4d      	ldr	r3, [pc, #308]	; (8010018 <USBD_SetConfig+0x150>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d905      	bls.n	800fef4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f985 	bl	80101fa <USBD_CtlError>
    return USBD_FAIL;
 800fef0:	2303      	movs	r3, #3
 800fef2:	e08c      	b.n	801000e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d002      	beq.n	800ff06 <USBD_SetConfig+0x3e>
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d029      	beq.n	800ff58 <USBD_SetConfig+0x90>
 800ff04:	e075      	b.n	800fff2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ff06:	4b44      	ldr	r3, [pc, #272]	; (8010018 <USBD_SetConfig+0x150>)
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d020      	beq.n	800ff50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ff0e:	4b42      	ldr	r3, [pc, #264]	; (8010018 <USBD_SetConfig+0x150>)
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff18:	4b3f      	ldr	r3, [pc, #252]	; (8010018 <USBD_SetConfig+0x150>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7fe ffe7 	bl	800eef2 <USBD_SetClassConfig>
 800ff24:	4603      	mov	r3, r0
 800ff26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d008      	beq.n	800ff40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ff2e:	6839      	ldr	r1, [r7, #0]
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f962 	bl	80101fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2202      	movs	r2, #2
 800ff3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff3e:	e065      	b.n	801000c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 fa25 	bl	8010390 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2203      	movs	r2, #3
 800ff4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ff4e:	e05d      	b.n	801000c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fa1d 	bl	8010390 <USBD_CtlSendStatus>
      break;
 800ff56:	e059      	b.n	801000c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ff58:	4b2f      	ldr	r3, [pc, #188]	; (8010018 <USBD_SetConfig+0x150>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d112      	bne.n	800ff86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2202      	movs	r2, #2
 800ff64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ff68:	4b2b      	ldr	r3, [pc, #172]	; (8010018 <USBD_SetConfig+0x150>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff72:	4b29      	ldr	r3, [pc, #164]	; (8010018 <USBD_SetConfig+0x150>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	4619      	mov	r1, r3
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7fe ffd6 	bl	800ef2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 fa06 	bl	8010390 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff84:	e042      	b.n	801000c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ff86:	4b24      	ldr	r3, [pc, #144]	; (8010018 <USBD_SetConfig+0x150>)
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d02a      	beq.n	800ffea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7fe ffc4 	bl	800ef2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ffa2:	4b1d      	ldr	r3, [pc, #116]	; (8010018 <USBD_SetConfig+0x150>)
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffac:	4b1a      	ldr	r3, [pc, #104]	; (8010018 <USBD_SetConfig+0x150>)
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7fe ff9d 	bl	800eef2 <USBD_SetClassConfig>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ffbc:	7bfb      	ldrb	r3, [r7, #15]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00f      	beq.n	800ffe2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 f918 	bl	80101fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7fe ffa9 	bl	800ef2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ffe0:	e014      	b.n	801000c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f9d4 	bl	8010390 <USBD_CtlSendStatus>
      break;
 800ffe8:	e010      	b.n	801000c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f9d0 	bl	8010390 <USBD_CtlSendStatus>
      break;
 800fff0:	e00c      	b.n	801000c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f900 	bl	80101fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fffa:	4b07      	ldr	r3, [pc, #28]	; (8010018 <USBD_SetConfig+0x150>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	4619      	mov	r1, r3
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7fe ff92 	bl	800ef2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010006:	2303      	movs	r3, #3
 8010008:	73fb      	strb	r3, [r7, #15]
      break;
 801000a:	bf00      	nop
  }

  return ret;
 801000c:	7bfb      	ldrb	r3, [r7, #15]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	20000c0c 	.word	0x20000c0c

0801001c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	88db      	ldrh	r3, [r3, #6]
 801002a:	2b01      	cmp	r3, #1
 801002c:	d004      	beq.n	8010038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801002e:	6839      	ldr	r1, [r7, #0]
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 f8e2 	bl	80101fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010036:	e023      	b.n	8010080 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801003e:	b2db      	uxtb	r3, r3
 8010040:	2b02      	cmp	r3, #2
 8010042:	dc02      	bgt.n	801004a <USBD_GetConfig+0x2e>
 8010044:	2b00      	cmp	r3, #0
 8010046:	dc03      	bgt.n	8010050 <USBD_GetConfig+0x34>
 8010048:	e015      	b.n	8010076 <USBD_GetConfig+0x5a>
 801004a:	2b03      	cmp	r3, #3
 801004c:	d00b      	beq.n	8010066 <USBD_GetConfig+0x4a>
 801004e:	e012      	b.n	8010076 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	3308      	adds	r3, #8
 801005a:	2201      	movs	r2, #1
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f93c 	bl	80102dc <USBD_CtlSendData>
        break;
 8010064:	e00c      	b.n	8010080 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	3304      	adds	r3, #4
 801006a:	2201      	movs	r2, #1
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 f934 	bl	80102dc <USBD_CtlSendData>
        break;
 8010074:	e004      	b.n	8010080 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010076:	6839      	ldr	r1, [r7, #0]
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 f8be 	bl	80101fa <USBD_CtlError>
        break;
 801007e:	bf00      	nop
}
 8010080:	bf00      	nop
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010098:	b2db      	uxtb	r3, r3
 801009a:	3b01      	subs	r3, #1
 801009c:	2b02      	cmp	r3, #2
 801009e:	d81e      	bhi.n	80100de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	88db      	ldrh	r3, [r3, #6]
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d004      	beq.n	80100b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 f8a5 	bl	80101fa <USBD_CtlError>
        break;
 80100b0:	e01a      	b.n	80100e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2201      	movs	r2, #1
 80100b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d005      	beq.n	80100ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	f043 0202 	orr.w	r2, r3, #2
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	330c      	adds	r3, #12
 80100d2:	2202      	movs	r2, #2
 80100d4:	4619      	mov	r1, r3
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f900 	bl	80102dc <USBD_CtlSendData>
      break;
 80100dc:	e004      	b.n	80100e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 f88a 	bl	80101fa <USBD_CtlError>
      break;
 80100e6:	bf00      	nop
  }
}
 80100e8:	bf00      	nop
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	885b      	ldrh	r3, [r3, #2]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d107      	bne.n	8010112 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2201      	movs	r2, #1
 8010106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 f940 	bl	8010390 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010110:	e013      	b.n	801013a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	885b      	ldrh	r3, [r3, #2]
 8010116:	2b02      	cmp	r3, #2
 8010118:	d10b      	bne.n	8010132 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	889b      	ldrh	r3, [r3, #4]
 801011e:	0a1b      	lsrs	r3, r3, #8
 8010120:	b29b      	uxth	r3, r3
 8010122:	b2da      	uxtb	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 f930 	bl	8010390 <USBD_CtlSendStatus>
}
 8010130:	e003      	b.n	801013a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 f860 	bl	80101fa <USBD_CtlError>
}
 801013a:	bf00      	nop
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010152:	b2db      	uxtb	r3, r3
 8010154:	3b01      	subs	r3, #1
 8010156:	2b02      	cmp	r3, #2
 8010158:	d80b      	bhi.n	8010172 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	885b      	ldrh	r3, [r3, #2]
 801015e:	2b01      	cmp	r3, #1
 8010160:	d10c      	bne.n	801017c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2200      	movs	r2, #0
 8010166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 f910 	bl	8010390 <USBD_CtlSendStatus>
      }
      break;
 8010170:	e004      	b.n	801017c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 f840 	bl	80101fa <USBD_CtlError>
      break;
 801017a:	e000      	b.n	801017e <USBD_ClrFeature+0x3c>
      break;
 801017c:	bf00      	nop
  }
}
 801017e:	bf00      	nop
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b084      	sub	sp, #16
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	781a      	ldrb	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	3301      	adds	r3, #1
 80101a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	781a      	ldrb	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	3301      	adds	r3, #1
 80101ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	f7ff fa41 	bl	800f638 <SWAPBYTE>
 80101b6:	4603      	mov	r3, r0
 80101b8:	461a      	mov	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	3301      	adds	r3, #1
 80101c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	3301      	adds	r3, #1
 80101c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f7ff fa34 	bl	800f638 <SWAPBYTE>
 80101d0:	4603      	mov	r3, r0
 80101d2:	461a      	mov	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	3301      	adds	r3, #1
 80101dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	3301      	adds	r3, #1
 80101e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f7ff fa27 	bl	800f638 <SWAPBYTE>
 80101ea:	4603      	mov	r3, r0
 80101ec:	461a      	mov	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	80da      	strh	r2, [r3, #6]
}
 80101f2:	bf00      	nop
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b082      	sub	sp, #8
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
 8010202:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010204:	2180      	movs	r1, #128	; 0x80
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 fcd6 	bl	8010bb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801020c:	2100      	movs	r1, #0
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 fcd2 	bl	8010bb8 <USBD_LL_StallEP>
}
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b086      	sub	sp, #24
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010228:	2300      	movs	r3, #0
 801022a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d036      	beq.n	80102a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010236:	6938      	ldr	r0, [r7, #16]
 8010238:	f000 f836 	bl	80102a8 <USBD_GetLen>
 801023c:	4603      	mov	r3, r0
 801023e:	3301      	adds	r3, #1
 8010240:	b29b      	uxth	r3, r3
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	b29a      	uxth	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	4413      	add	r3, r2
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	7812      	ldrb	r2, [r2, #0]
 8010254:	701a      	strb	r2, [r3, #0]
  idx++;
 8010256:	7dfb      	ldrb	r3, [r7, #23]
 8010258:	3301      	adds	r3, #1
 801025a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801025c:	7dfb      	ldrb	r3, [r7, #23]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	4413      	add	r3, r2
 8010262:	2203      	movs	r2, #3
 8010264:	701a      	strb	r2, [r3, #0]
  idx++;
 8010266:	7dfb      	ldrb	r3, [r7, #23]
 8010268:	3301      	adds	r3, #1
 801026a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801026c:	e013      	b.n	8010296 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	4413      	add	r3, r2
 8010274:	693a      	ldr	r2, [r7, #16]
 8010276:	7812      	ldrb	r2, [r2, #0]
 8010278:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	3301      	adds	r3, #1
 801027e:	613b      	str	r3, [r7, #16]
    idx++;
 8010280:	7dfb      	ldrb	r3, [r7, #23]
 8010282:	3301      	adds	r3, #1
 8010284:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010286:	7dfb      	ldrb	r3, [r7, #23]
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	4413      	add	r3, r2
 801028c:	2200      	movs	r2, #0
 801028e:	701a      	strb	r2, [r3, #0]
    idx++;
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	3301      	adds	r3, #1
 8010294:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1e7      	bne.n	801026e <USBD_GetString+0x52>
 801029e:	e000      	b.n	80102a2 <USBD_GetString+0x86>
    return;
 80102a0:	bf00      	nop
  }
}
 80102a2:	3718      	adds	r7, #24
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80102b0:	2300      	movs	r3, #0
 80102b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80102b8:	e005      	b.n	80102c6 <USBD_GetLen+0x1e>
  {
    len++;
 80102ba:	7bfb      	ldrb	r3, [r7, #15]
 80102bc:	3301      	adds	r3, #1
 80102be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	3301      	adds	r3, #1
 80102c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d1f5      	bne.n	80102ba <USBD_GetLen+0x12>
  }

  return len;
 80102ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2202      	movs	r2, #2
 80102ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	2100      	movs	r1, #0
 8010302:	68f8      	ldr	r0, [r7, #12]
 8010304:	f000 fce1 	bl	8010cca <USBD_LL_Transmit>

  return USBD_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3710      	adds	r7, #16
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010312:	b580      	push	{r7, lr}
 8010314:	b084      	sub	sp, #16
 8010316:	af00      	add	r7, sp, #0
 8010318:	60f8      	str	r0, [r7, #12]
 801031a:	60b9      	str	r1, [r7, #8]
 801031c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	2100      	movs	r1, #0
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f000 fcd0 	bl	8010cca <USBD_LL_Transmit>

  return USBD_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2203      	movs	r2, #3
 8010344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	68ba      	ldr	r2, [r7, #8]
 801035c:	2100      	movs	r1, #0
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f000 fcd4 	bl	8010d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	60f8      	str	r0, [r7, #12]
 8010376:	60b9      	str	r1, [r7, #8]
 8010378:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	2100      	movs	r1, #0
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f000 fcc3 	bl	8010d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010386:	2300      	movs	r3, #0
}
 8010388:	4618      	mov	r0, r3
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2204      	movs	r2, #4
 801039c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103a0:	2300      	movs	r3, #0
 80103a2:	2200      	movs	r2, #0
 80103a4:	2100      	movs	r1, #0
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 fc8f 	bl	8010cca <USBD_LL_Transmit>

  return USBD_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2205      	movs	r2, #5
 80103c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103c6:	2300      	movs	r3, #0
 80103c8:	2200      	movs	r2, #0
 80103ca:	2100      	movs	r1, #0
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 fc9d 	bl	8010d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80103e0:	2200      	movs	r2, #0
 80103e2:	4912      	ldr	r1, [pc, #72]	; (801042c <MX_USB_DEVICE_Init+0x50>)
 80103e4:	4812      	ldr	r0, [pc, #72]	; (8010430 <MX_USB_DEVICE_Init+0x54>)
 80103e6:	f7fe fd07 	bl	800edf8 <USBD_Init>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d001      	beq.n	80103f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80103f0:	f7f3 f9a0 	bl	8003734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80103f4:	490f      	ldr	r1, [pc, #60]	; (8010434 <MX_USB_DEVICE_Init+0x58>)
 80103f6:	480e      	ldr	r0, [pc, #56]	; (8010430 <MX_USB_DEVICE_Init+0x54>)
 80103f8:	f7fe fd2e 	bl	800ee58 <USBD_RegisterClass>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010402:	f7f3 f997 	bl	8003734 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010406:	490c      	ldr	r1, [pc, #48]	; (8010438 <MX_USB_DEVICE_Init+0x5c>)
 8010408:	4809      	ldr	r0, [pc, #36]	; (8010430 <MX_USB_DEVICE_Init+0x54>)
 801040a:	f7fe fc1f 	bl	800ec4c <USBD_CDC_RegisterInterface>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010414:	f7f3 f98e 	bl	8003734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010418:	4805      	ldr	r0, [pc, #20]	; (8010430 <MX_USB_DEVICE_Init+0x54>)
 801041a:	f7fe fd53 	bl	800eec4 <USBD_Start>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d001      	beq.n	8010428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010424:	f7f3 f986 	bl	8003734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010428:	bf00      	nop
 801042a:	bd80      	pop	{r7, pc}
 801042c:	20000190 	.word	0x20000190
 8010430:	20000c10 	.word	0x20000c10
 8010434:	200000fc 	.word	0x200000fc
 8010438:	2000017c 	.word	0x2000017c

0801043c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010440:	2200      	movs	r2, #0
 8010442:	4905      	ldr	r1, [pc, #20]	; (8010458 <CDC_Init_FS+0x1c>)
 8010444:	4805      	ldr	r0, [pc, #20]	; (801045c <CDC_Init_FS+0x20>)
 8010446:	f7fe fc1b 	bl	800ec80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801044a:	4905      	ldr	r1, [pc, #20]	; (8010460 <CDC_Init_FS+0x24>)
 801044c:	4803      	ldr	r0, [pc, #12]	; (801045c <CDC_Init_FS+0x20>)
 801044e:	f7fe fc39 	bl	800ecc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010452:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010454:	4618      	mov	r0, r3
 8010456:	bd80      	pop	{r7, pc}
 8010458:	200016ec 	.word	0x200016ec
 801045c:	20000c10 	.word	0x20000c10
 8010460:	20000eec 	.word	0x20000eec

08010464 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010468:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801046a:	4618      	mov	r0, r3
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010474:	b480      	push	{r7}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	4603      	mov	r3, r0
 801047c:	6039      	str	r1, [r7, #0]
 801047e:	71fb      	strb	r3, [r7, #7]
 8010480:	4613      	mov	r3, r2
 8010482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	2b23      	cmp	r3, #35	; 0x23
 8010488:	d84a      	bhi.n	8010520 <CDC_Control_FS+0xac>
 801048a:	a201      	add	r2, pc, #4	; (adr r2, 8010490 <CDC_Control_FS+0x1c>)
 801048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010490:	08010521 	.word	0x08010521
 8010494:	08010521 	.word	0x08010521
 8010498:	08010521 	.word	0x08010521
 801049c:	08010521 	.word	0x08010521
 80104a0:	08010521 	.word	0x08010521
 80104a4:	08010521 	.word	0x08010521
 80104a8:	08010521 	.word	0x08010521
 80104ac:	08010521 	.word	0x08010521
 80104b0:	08010521 	.word	0x08010521
 80104b4:	08010521 	.word	0x08010521
 80104b8:	08010521 	.word	0x08010521
 80104bc:	08010521 	.word	0x08010521
 80104c0:	08010521 	.word	0x08010521
 80104c4:	08010521 	.word	0x08010521
 80104c8:	08010521 	.word	0x08010521
 80104cc:	08010521 	.word	0x08010521
 80104d0:	08010521 	.word	0x08010521
 80104d4:	08010521 	.word	0x08010521
 80104d8:	08010521 	.word	0x08010521
 80104dc:	08010521 	.word	0x08010521
 80104e0:	08010521 	.word	0x08010521
 80104e4:	08010521 	.word	0x08010521
 80104e8:	08010521 	.word	0x08010521
 80104ec:	08010521 	.word	0x08010521
 80104f0:	08010521 	.word	0x08010521
 80104f4:	08010521 	.word	0x08010521
 80104f8:	08010521 	.word	0x08010521
 80104fc:	08010521 	.word	0x08010521
 8010500:	08010521 	.word	0x08010521
 8010504:	08010521 	.word	0x08010521
 8010508:	08010521 	.word	0x08010521
 801050c:	08010521 	.word	0x08010521
 8010510:	08010521 	.word	0x08010521
 8010514:	08010521 	.word	0x08010521
 8010518:	08010521 	.word	0x08010521
 801051c:	08010521 	.word	0x08010521
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010520:	bf00      	nop
  }

  return (USBD_OK);
 8010522:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010524:	4618      	mov	r0, r3
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	4805      	ldr	r0, [pc, #20]	; (8010554 <CDC_Receive_FS+0x24>)
 801053e:	f7fe fbc1 	bl	800ecc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010542:	4804      	ldr	r0, [pc, #16]	; (8010554 <CDC_Receive_FS+0x24>)
 8010544:	f7fe fc22 	bl	800ed8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010548:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801054a:	4618      	mov	r0, r3
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	20000c10 	.word	0x20000c10

08010558 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	460b      	mov	r3, r1
 8010562:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010568:	4b0d      	ldr	r3, [pc, #52]	; (80105a0 <CDC_Transmit_FS+0x48>)
 801056a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801056e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801057a:	2301      	movs	r3, #1
 801057c:	e00b      	b.n	8010596 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801057e:	887b      	ldrh	r3, [r7, #2]
 8010580:	461a      	mov	r2, r3
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	4806      	ldr	r0, [pc, #24]	; (80105a0 <CDC_Transmit_FS+0x48>)
 8010586:	f7fe fb7b 	bl	800ec80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801058a:	4805      	ldr	r0, [pc, #20]	; (80105a0 <CDC_Transmit_FS+0x48>)
 801058c:	f7fe fbb8 	bl	800ed00 <USBD_CDC_TransmitPacket>
 8010590:	4603      	mov	r3, r0
 8010592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010594:	7bfb      	ldrb	r3, [r7, #15]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	20000c10 	.word	0x20000c10

080105a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b087      	sub	sp, #28
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	4613      	mov	r3, r2
 80105b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105b2:	2300      	movs	r3, #0
 80105b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	371c      	adds	r7, #28
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
	...

080105c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	4603      	mov	r3, r0
 80105d0:	6039      	str	r1, [r7, #0]
 80105d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	2212      	movs	r2, #18
 80105d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80105da:	4b03      	ldr	r3, [pc, #12]	; (80105e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80105dc:	4618      	mov	r0, r3
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	200001ac 	.word	0x200001ac

080105ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	4603      	mov	r3, r0
 80105f4:	6039      	str	r1, [r7, #0]
 80105f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	2204      	movs	r2, #4
 80105fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105fe:	4b03      	ldr	r3, [pc, #12]	; (801060c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr
 801060c:	200001c0 	.word	0x200001c0

08010610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	6039      	str	r1, [r7, #0]
 801061a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d105      	bne.n	801062e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010622:	683a      	ldr	r2, [r7, #0]
 8010624:	4907      	ldr	r1, [pc, #28]	; (8010644 <USBD_FS_ProductStrDescriptor+0x34>)
 8010626:	4808      	ldr	r0, [pc, #32]	; (8010648 <USBD_FS_ProductStrDescriptor+0x38>)
 8010628:	f7ff fdf8 	bl	801021c <USBD_GetString>
 801062c:	e004      	b.n	8010638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801062e:	683a      	ldr	r2, [r7, #0]
 8010630:	4904      	ldr	r1, [pc, #16]	; (8010644 <USBD_FS_ProductStrDescriptor+0x34>)
 8010632:	4805      	ldr	r0, [pc, #20]	; (8010648 <USBD_FS_ProductStrDescriptor+0x38>)
 8010634:	f7ff fdf2 	bl	801021c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010638:	4b02      	ldr	r3, [pc, #8]	; (8010644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801063a:	4618      	mov	r0, r3
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	20001eec 	.word	0x20001eec
 8010648:	080111fc 	.word	0x080111fc

0801064c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	4603      	mov	r3, r0
 8010654:	6039      	str	r1, [r7, #0]
 8010656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010658:	683a      	ldr	r2, [r7, #0]
 801065a:	4904      	ldr	r1, [pc, #16]	; (801066c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801065c:	4804      	ldr	r0, [pc, #16]	; (8010670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801065e:	f7ff fddd 	bl	801021c <USBD_GetString>
  return USBD_StrDesc;
 8010662:	4b02      	ldr	r3, [pc, #8]	; (801066c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010664:	4618      	mov	r0, r3
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	20001eec 	.word	0x20001eec
 8010670:	08011204 	.word	0x08011204

08010674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	4603      	mov	r3, r0
 801067c:	6039      	str	r1, [r7, #0]
 801067e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	221a      	movs	r2, #26
 8010684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010686:	f000 f843 	bl	8010710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801068a:	4b02      	ldr	r3, [pc, #8]	; (8010694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	200001c4 	.word	0x200001c4

08010698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	6039      	str	r1, [r7, #0]
 80106a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106a4:	79fb      	ldrb	r3, [r7, #7]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d105      	bne.n	80106b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	4907      	ldr	r1, [pc, #28]	; (80106cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80106ae:	4808      	ldr	r0, [pc, #32]	; (80106d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106b0:	f7ff fdb4 	bl	801021c <USBD_GetString>
 80106b4:	e004      	b.n	80106c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	4904      	ldr	r1, [pc, #16]	; (80106cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80106ba:	4805      	ldr	r0, [pc, #20]	; (80106d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80106bc:	f7ff fdae 	bl	801021c <USBD_GetString>
  }
  return USBD_StrDesc;
 80106c0:	4b02      	ldr	r3, [pc, #8]	; (80106cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	20001eec 	.word	0x20001eec
 80106d0:	0801120c 	.word	0x0801120c

080106d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	6039      	str	r1, [r7, #0]
 80106de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d105      	bne.n	80106f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	4907      	ldr	r1, [pc, #28]	; (8010708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106ea:	4808      	ldr	r0, [pc, #32]	; (801070c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80106ec:	f7ff fd96 	bl	801021c <USBD_GetString>
 80106f0:	e004      	b.n	80106fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80106f2:	683a      	ldr	r2, [r7, #0]
 80106f4:	4904      	ldr	r1, [pc, #16]	; (8010708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80106f6:	4805      	ldr	r0, [pc, #20]	; (801070c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80106f8:	f7ff fd90 	bl	801021c <USBD_GetString>
  }
  return USBD_StrDesc;
 80106fc:	4b02      	ldr	r3, [pc, #8]	; (8010708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	20001eec 	.word	0x20001eec
 801070c:	08011218 	.word	0x08011218

08010710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010716:	4b0f      	ldr	r3, [pc, #60]	; (8010754 <Get_SerialNum+0x44>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801071c:	4b0e      	ldr	r3, [pc, #56]	; (8010758 <Get_SerialNum+0x48>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010722:	4b0e      	ldr	r3, [pc, #56]	; (801075c <Get_SerialNum+0x4c>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	4413      	add	r3, r2
 801072e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d009      	beq.n	801074a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010736:	2208      	movs	r2, #8
 8010738:	4909      	ldr	r1, [pc, #36]	; (8010760 <Get_SerialNum+0x50>)
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f000 f814 	bl	8010768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010740:	2204      	movs	r2, #4
 8010742:	4908      	ldr	r1, [pc, #32]	; (8010764 <Get_SerialNum+0x54>)
 8010744:	68b8      	ldr	r0, [r7, #8]
 8010746:	f000 f80f 	bl	8010768 <IntToUnicode>
  }
}
 801074a:	bf00      	nop
 801074c:	3710      	adds	r7, #16
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	1fff7a10 	.word	0x1fff7a10
 8010758:	1fff7a14 	.word	0x1fff7a14
 801075c:	1fff7a18 	.word	0x1fff7a18
 8010760:	200001c6 	.word	0x200001c6
 8010764:	200001d6 	.word	0x200001d6

08010768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010768:	b480      	push	{r7}
 801076a:	b087      	sub	sp, #28
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	4613      	mov	r3, r2
 8010774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010776:	2300      	movs	r3, #0
 8010778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801077a:	2300      	movs	r3, #0
 801077c:	75fb      	strb	r3, [r7, #23]
 801077e:	e027      	b.n	80107d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	0f1b      	lsrs	r3, r3, #28
 8010784:	2b09      	cmp	r3, #9
 8010786:	d80b      	bhi.n	80107a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	0f1b      	lsrs	r3, r3, #28
 801078c:	b2da      	uxtb	r2, r3
 801078e:	7dfb      	ldrb	r3, [r7, #23]
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	4619      	mov	r1, r3
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	440b      	add	r3, r1
 8010798:	3230      	adds	r2, #48	; 0x30
 801079a:	b2d2      	uxtb	r2, r2
 801079c:	701a      	strb	r2, [r3, #0]
 801079e:	e00a      	b.n	80107b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	0f1b      	lsrs	r3, r3, #28
 80107a4:	b2da      	uxtb	r2, r3
 80107a6:	7dfb      	ldrb	r3, [r7, #23]
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	4619      	mov	r1, r3
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	440b      	add	r3, r1
 80107b0:	3237      	adds	r2, #55	; 0x37
 80107b2:	b2d2      	uxtb	r2, r2
 80107b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	011b      	lsls	r3, r3, #4
 80107ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80107bc:	7dfb      	ldrb	r3, [r7, #23]
 80107be:	005b      	lsls	r3, r3, #1
 80107c0:	3301      	adds	r3, #1
 80107c2:	68ba      	ldr	r2, [r7, #8]
 80107c4:	4413      	add	r3, r2
 80107c6:	2200      	movs	r2, #0
 80107c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	3301      	adds	r3, #1
 80107ce:	75fb      	strb	r3, [r7, #23]
 80107d0:	7dfa      	ldrb	r2, [r7, #23]
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d3d3      	bcc.n	8010780 <IntToUnicode+0x18>
  }
}
 80107d8:	bf00      	nop
 80107da:	bf00      	nop
 80107dc:	371c      	adds	r7, #28
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr
	...

080107e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b08a      	sub	sp, #40	; 0x28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107f0:	f107 0314 	add.w	r3, r7, #20
 80107f4:	2200      	movs	r2, #0
 80107f6:	601a      	str	r2, [r3, #0]
 80107f8:	605a      	str	r2, [r3, #4]
 80107fa:	609a      	str	r2, [r3, #8]
 80107fc:	60da      	str	r2, [r3, #12]
 80107fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010808:	d13a      	bne.n	8010880 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801080a:	2300      	movs	r3, #0
 801080c:	613b      	str	r3, [r7, #16]
 801080e:	4b1e      	ldr	r3, [pc, #120]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 8010810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010812:	4a1d      	ldr	r2, [pc, #116]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 8010814:	f043 0301 	orr.w	r3, r3, #1
 8010818:	6313      	str	r3, [r2, #48]	; 0x30
 801081a:	4b1b      	ldr	r3, [pc, #108]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 801081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081e:	f003 0301 	and.w	r3, r3, #1
 8010822:	613b      	str	r3, [r7, #16]
 8010824:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010826:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801082c:	2302      	movs	r3, #2
 801082e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010830:	2300      	movs	r3, #0
 8010832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010834:	2303      	movs	r3, #3
 8010836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010838:	230a      	movs	r3, #10
 801083a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801083c:	f107 0314 	add.w	r3, r7, #20
 8010840:	4619      	mov	r1, r3
 8010842:	4812      	ldr	r0, [pc, #72]	; (801088c <HAL_PCD_MspInit+0xa4>)
 8010844:	f7f6 ffce 	bl	80077e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010848:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 801084a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801084c:	4a0e      	ldr	r2, [pc, #56]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 801084e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010852:	6353      	str	r3, [r2, #52]	; 0x34
 8010854:	2300      	movs	r3, #0
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	4b0b      	ldr	r3, [pc, #44]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 801085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801085c:	4a0a      	ldr	r2, [pc, #40]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 801085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010862:	6453      	str	r3, [r2, #68]	; 0x44
 8010864:	4b08      	ldr	r3, [pc, #32]	; (8010888 <HAL_PCD_MspInit+0xa0>)
 8010866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801086c:	60fb      	str	r3, [r7, #12]
 801086e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010870:	2200      	movs	r2, #0
 8010872:	2100      	movs	r1, #0
 8010874:	2043      	movs	r0, #67	; 0x43
 8010876:	f7f6 fcdd 	bl	8007234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801087a:	2043      	movs	r0, #67	; 0x43
 801087c:	f7f6 fcf6 	bl	800726c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010880:	bf00      	nop
 8010882:	3728      	adds	r7, #40	; 0x28
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	40023800 	.word	0x40023800
 801088c:	40020000 	.word	0x40020000

08010890 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80108a4:	4619      	mov	r1, r3
 80108a6:	4610      	mov	r0, r2
 80108a8:	f7fe fb59 	bl	800ef5e <USBD_LL_SetupStage>
}
 80108ac:	bf00      	nop
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80108c6:	78fa      	ldrb	r2, [r7, #3]
 80108c8:	6879      	ldr	r1, [r7, #4]
 80108ca:	4613      	mov	r3, r2
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	4413      	add	r3, r2
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	440b      	add	r3, r1
 80108d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	78fb      	ldrb	r3, [r7, #3]
 80108dc:	4619      	mov	r1, r3
 80108de:	f7fe fb93 	bl	800f008 <USBD_LL_DataOutStage>
}
 80108e2:	bf00      	nop
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b082      	sub	sp, #8
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	460b      	mov	r3, r1
 80108f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80108fc:	78fa      	ldrb	r2, [r7, #3]
 80108fe:	6879      	ldr	r1, [r7, #4]
 8010900:	4613      	mov	r3, r2
 8010902:	00db      	lsls	r3, r3, #3
 8010904:	4413      	add	r3, r2
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	440b      	add	r3, r1
 801090a:	334c      	adds	r3, #76	; 0x4c
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	78fb      	ldrb	r3, [r7, #3]
 8010910:	4619      	mov	r1, r3
 8010912:	f7fe fc2c 	bl	800f16e <USBD_LL_DataInStage>
}
 8010916:	bf00      	nop
 8010918:	3708      	adds	r7, #8
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b082      	sub	sp, #8
 8010922:	af00      	add	r7, sp, #0
 8010924:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801092c:	4618      	mov	r0, r3
 801092e:	f7fe fd60 	bl	800f3f2 <USBD_LL_SOF>
}
 8010932:	bf00      	nop
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b084      	sub	sp, #16
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010942:	2301      	movs	r3, #1
 8010944:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	2b02      	cmp	r3, #2
 801094c:	d001      	beq.n	8010952 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801094e:	f7f2 fef1 	bl	8003734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010958:	7bfa      	ldrb	r2, [r7, #15]
 801095a:	4611      	mov	r1, r2
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe fd0a 	bl	800f376 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fcb2 	bl	800f2d2 <USBD_LL_Reset>
}
 801096e:	bf00      	nop
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
	...

08010978 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010986:	4618      	mov	r0, r3
 8010988:	f7fe fd05 	bl	800f396 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	6812      	ldr	r2, [r2, #0]
 801099a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801099e:	f043 0301 	orr.w	r3, r3, #1
 80109a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6a1b      	ldr	r3, [r3, #32]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d005      	beq.n	80109b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109ac:	4b04      	ldr	r3, [pc, #16]	; (80109c0 <HAL_PCD_SuspendCallback+0x48>)
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	4a03      	ldr	r2, [pc, #12]	; (80109c0 <HAL_PCD_SuspendCallback+0x48>)
 80109b2:	f043 0306 	orr.w	r3, r3, #6
 80109b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	e000ed00 	.word	0xe000ed00

080109c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fe fcf5 	bl	800f3c2 <USBD_LL_Resume>
}
 80109d8:	bf00      	nop
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	460b      	mov	r3, r1
 80109ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80109f2:	78fa      	ldrb	r2, [r7, #3]
 80109f4:	4611      	mov	r1, r2
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fe fd4d 	bl	800f496 <USBD_LL_IsoOUTIncomplete>
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a16:	78fa      	ldrb	r2, [r7, #3]
 8010a18:	4611      	mov	r1, r2
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe fd09 	bl	800f432 <USBD_LL_IsoINIncomplete>
}
 8010a20:	bf00      	nop
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fe fd5f 	bl	800f4fa <USBD_LL_DevConnected>
}
 8010a3c:	bf00      	nop
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fe fd5c 	bl	800f510 <USBD_LL_DevDisconnected>
}
 8010a58:	bf00      	nop
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d13c      	bne.n	8010aea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010a70:	4a20      	ldr	r2, [pc, #128]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4a1e      	ldr	r2, [pc, #120]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010a80:	4b1c      	ldr	r3, [pc, #112]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010a86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010a88:	4b1a      	ldr	r3, [pc, #104]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a8a:	2204      	movs	r2, #4
 8010a8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010a8e:	4b19      	ldr	r3, [pc, #100]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a90:	2202      	movs	r2, #2
 8010a92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010a94:	4b17      	ldr	r3, [pc, #92]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a96:	2200      	movs	r2, #0
 8010a98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a9a:	4b16      	ldr	r3, [pc, #88]	; (8010af4 <USBD_LL_Init+0x94>)
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010aa0:	4b14      	ldr	r3, [pc, #80]	; (8010af4 <USBD_LL_Init+0x94>)
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010aa6:	4b13      	ldr	r3, [pc, #76]	; (8010af4 <USBD_LL_Init+0x94>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010aac:	4b11      	ldr	r3, [pc, #68]	; (8010af4 <USBD_LL_Init+0x94>)
 8010aae:	2200      	movs	r2, #0
 8010ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010ab2:	4b10      	ldr	r3, [pc, #64]	; (8010af4 <USBD_LL_Init+0x94>)
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010ab8:	4b0e      	ldr	r3, [pc, #56]	; (8010af4 <USBD_LL_Init+0x94>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010abe:	480d      	ldr	r0, [pc, #52]	; (8010af4 <USBD_LL_Init+0x94>)
 8010ac0:	f7f8 f8e9 	bl	8008c96 <HAL_PCD_Init>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010aca:	f7f2 fe33 	bl	8003734 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010ace:	2180      	movs	r1, #128	; 0x80
 8010ad0:	4808      	ldr	r0, [pc, #32]	; (8010af4 <USBD_LL_Init+0x94>)
 8010ad2:	f7f9 fb40 	bl	800a156 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010ad6:	2240      	movs	r2, #64	; 0x40
 8010ad8:	2100      	movs	r1, #0
 8010ada:	4806      	ldr	r0, [pc, #24]	; (8010af4 <USBD_LL_Init+0x94>)
 8010adc:	f7f9 faf4 	bl	800a0c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010ae0:	2280      	movs	r2, #128	; 0x80
 8010ae2:	2101      	movs	r1, #1
 8010ae4:	4803      	ldr	r0, [pc, #12]	; (8010af4 <USBD_LL_Init+0x94>)
 8010ae6:	f7f9 faef 	bl	800a0c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	200020ec 	.word	0x200020ec

08010af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b00:	2300      	movs	r3, #0
 8010b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7f8 f9de 	bl	8008ed0 <HAL_PCD_Start>
 8010b14:	4603      	mov	r3, r0
 8010b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f000 f942 	bl	8010da4 <USBD_Get_USB_Status>
 8010b20:	4603      	mov	r3, r0
 8010b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	4608      	mov	r0, r1
 8010b38:	4611      	mov	r1, r2
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	70fb      	strb	r3, [r7, #3]
 8010b40:	460b      	mov	r3, r1
 8010b42:	70bb      	strb	r3, [r7, #2]
 8010b44:	4613      	mov	r3, r2
 8010b46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b56:	78bb      	ldrb	r3, [r7, #2]
 8010b58:	883a      	ldrh	r2, [r7, #0]
 8010b5a:	78f9      	ldrb	r1, [r7, #3]
 8010b5c:	f7f8 feaf 	bl	80098be <HAL_PCD_EP_Open>
 8010b60:	4603      	mov	r3, r0
 8010b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 f91c 	bl	8010da4 <USBD_Get_USB_Status>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3710      	adds	r7, #16
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b084      	sub	sp, #16
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	460b      	mov	r3, r1
 8010b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b86:	2300      	movs	r3, #0
 8010b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010b94:	78fa      	ldrb	r2, [r7, #3]
 8010b96:	4611      	mov	r1, r2
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7f8 fef8 	bl	800998e <HAL_PCD_EP_Close>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ba2:	7bfb      	ldrb	r3, [r7, #15]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f000 f8fd 	bl	8010da4 <USBD_Get_USB_Status>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010bd2:	78fa      	ldrb	r2, [r7, #3]
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7f8 ffd0 	bl	8009b7c <HAL_PCD_EP_SetStall>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f000 f8de 	bl	8010da4 <USBD_Get_USB_Status>
 8010be8:	4603      	mov	r3, r0
 8010bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b084      	sub	sp, #16
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c02:	2300      	movs	r3, #0
 8010c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c06:	2300      	movs	r3, #0
 8010c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c10:	78fa      	ldrb	r2, [r7, #3]
 8010c12:	4611      	mov	r1, r2
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7f9 f815 	bl	8009c44 <HAL_PCD_EP_ClrStall>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c1e:	7bfb      	ldrb	r3, [r7, #15]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 f8bf 	bl	8010da4 <USBD_Get_USB_Status>
 8010c26:	4603      	mov	r3, r0
 8010c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010c46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	da0b      	bge.n	8010c68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c50:	78fb      	ldrb	r3, [r7, #3]
 8010c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c56:	68f9      	ldr	r1, [r7, #12]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	00db      	lsls	r3, r3, #3
 8010c5c:	4413      	add	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	440b      	add	r3, r1
 8010c62:	333e      	adds	r3, #62	; 0x3e
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	e00b      	b.n	8010c80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c68:	78fb      	ldrb	r3, [r7, #3]
 8010c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c6e:	68f9      	ldr	r1, [r7, #12]
 8010c70:	4613      	mov	r3, r2
 8010c72:	00db      	lsls	r3, r3, #3
 8010c74:	4413      	add	r3, r2
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	440b      	add	r3, r1
 8010c7a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010c7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3714      	adds	r7, #20
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ca6:	78fa      	ldrb	r2, [r7, #3]
 8010ca8:	4611      	mov	r1, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7f8 fde2 	bl	8009874 <HAL_PCD_SetAddress>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cb4:	7bfb      	ldrb	r3, [r7, #15]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f000 f874 	bl	8010da4 <USBD_Get_USB_Status>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3710      	adds	r7, #16
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}

08010cca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b086      	sub	sp, #24
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	60f8      	str	r0, [r7, #12]
 8010cd2:	607a      	str	r2, [r7, #4]
 8010cd4:	603b      	str	r3, [r7, #0]
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010ce8:	7af9      	ldrb	r1, [r7, #11]
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	f7f8 fefb 	bl	8009ae8 <HAL_PCD_EP_Transmit>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cf6:	7dfb      	ldrb	r3, [r7, #23]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f000 f853 	bl	8010da4 <USBD_Get_USB_Status>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d02:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3718      	adds	r7, #24
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	607a      	str	r2, [r7, #4]
 8010d16:	603b      	str	r3, [r7, #0]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d20:	2300      	movs	r3, #0
 8010d22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010d2a:	7af9      	ldrb	r1, [r7, #11]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	f7f8 fe77 	bl	8009a22 <HAL_PCD_EP_Receive>
 8010d34:	4603      	mov	r3, r0
 8010d36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d38:	7dfb      	ldrb	r3, [r7, #23]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f000 f832 	bl	8010da4 <USBD_Get_USB_Status>
 8010d40:	4603      	mov	r3, r0
 8010d42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d44:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3718      	adds	r7, #24
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b082      	sub	sp, #8
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
 8010d56:	460b      	mov	r3, r1
 8010d58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d60:	78fa      	ldrb	r2, [r7, #3]
 8010d62:	4611      	mov	r1, r2
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f8 fea7 	bl	8009ab8 <HAL_PCD_EP_GetRxCount>
 8010d6a:	4603      	mov	r3, r0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010d7c:	4b03      	ldr	r3, [pc, #12]	; (8010d8c <USBD_static_malloc+0x18>)
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	200025f8 	.word	0x200025f8

08010d90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]

}
 8010d98:	bf00      	nop
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dae:	2300      	movs	r3, #0
 8010db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010db2:	79fb      	ldrb	r3, [r7, #7]
 8010db4:	2b03      	cmp	r3, #3
 8010db6:	d817      	bhi.n	8010de8 <USBD_Get_USB_Status+0x44>
 8010db8:	a201      	add	r2, pc, #4	; (adr r2, 8010dc0 <USBD_Get_USB_Status+0x1c>)
 8010dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbe:	bf00      	nop
 8010dc0:	08010dd1 	.word	0x08010dd1
 8010dc4:	08010dd7 	.word	0x08010dd7
 8010dc8:	08010ddd 	.word	0x08010ddd
 8010dcc:	08010de3 	.word	0x08010de3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8010dd4:	e00b      	b.n	8010dee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010dd6:	2303      	movs	r3, #3
 8010dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8010dda:	e008      	b.n	8010dee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	73fb      	strb	r3, [r7, #15]
    break;
 8010de0:	e005      	b.n	8010dee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010de2:	2303      	movs	r3, #3
 8010de4:	73fb      	strb	r3, [r7, #15]
    break;
 8010de6:	e002      	b.n	8010dee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010de8:	2303      	movs	r3, #3
 8010dea:	73fb      	strb	r3, [r7, #15]
    break;
 8010dec:	bf00      	nop
  }
  return usb_status;
 8010dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr

08010dfc <__libc_init_array>:
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	4d0d      	ldr	r5, [pc, #52]	; (8010e34 <__libc_init_array+0x38>)
 8010e00:	4c0d      	ldr	r4, [pc, #52]	; (8010e38 <__libc_init_array+0x3c>)
 8010e02:	1b64      	subs	r4, r4, r5
 8010e04:	10a4      	asrs	r4, r4, #2
 8010e06:	2600      	movs	r6, #0
 8010e08:	42a6      	cmp	r6, r4
 8010e0a:	d109      	bne.n	8010e20 <__libc_init_array+0x24>
 8010e0c:	4d0b      	ldr	r5, [pc, #44]	; (8010e3c <__libc_init_array+0x40>)
 8010e0e:	4c0c      	ldr	r4, [pc, #48]	; (8010e40 <__libc_init_array+0x44>)
 8010e10:	f000 f82e 	bl	8010e70 <_init>
 8010e14:	1b64      	subs	r4, r4, r5
 8010e16:	10a4      	asrs	r4, r4, #2
 8010e18:	2600      	movs	r6, #0
 8010e1a:	42a6      	cmp	r6, r4
 8010e1c:	d105      	bne.n	8010e2a <__libc_init_array+0x2e>
 8010e1e:	bd70      	pop	{r4, r5, r6, pc}
 8010e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e24:	4798      	blx	r3
 8010e26:	3601      	adds	r6, #1
 8010e28:	e7ee      	b.n	8010e08 <__libc_init_array+0xc>
 8010e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e2e:	4798      	blx	r3
 8010e30:	3601      	adds	r6, #1
 8010e32:	e7f2      	b.n	8010e1a <__libc_init_array+0x1e>
 8010e34:	08011848 	.word	0x08011848
 8010e38:	08011848 	.word	0x08011848
 8010e3c:	08011848 	.word	0x08011848
 8010e40:	0801184c 	.word	0x0801184c

08010e44 <memcpy>:
 8010e44:	440a      	add	r2, r1
 8010e46:	4291      	cmp	r1, r2
 8010e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e4c:	d100      	bne.n	8010e50 <memcpy+0xc>
 8010e4e:	4770      	bx	lr
 8010e50:	b510      	push	{r4, lr}
 8010e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e5a:	4291      	cmp	r1, r2
 8010e5c:	d1f9      	bne.n	8010e52 <memcpy+0xe>
 8010e5e:	bd10      	pop	{r4, pc}

08010e60 <memset>:
 8010e60:	4402      	add	r2, r0
 8010e62:	4603      	mov	r3, r0
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d100      	bne.n	8010e6a <memset+0xa>
 8010e68:	4770      	bx	lr
 8010e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8010e6e:	e7f9      	b.n	8010e64 <memset+0x4>

08010e70 <_init>:
 8010e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e72:	bf00      	nop
 8010e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e76:	bc08      	pop	{r3}
 8010e78:	469e      	mov	lr, r3
 8010e7a:	4770      	bx	lr

08010e7c <_fini>:
 8010e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7e:	bf00      	nop
 8010e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e82:	bc08      	pop	{r3}
 8010e84:	469e      	mov	lr, r3
 8010e86:	4770      	bx	lr

08010e88 <__system_Reset_veneer>:
 8010e88:	f85f f000 	ldr.w	pc, [pc]	; 8010e8c <__system_Reset_veneer+0x4>
 8010e8c:	200001e1 	.word	0x200001e1

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 08001af1 08001b61     ............a...
20000040:	08001a1d 00010065 00000030 08001989     ....e...0.......
20000050:	080019cd 0800190d 00010066 00000000     ........f.......
	...
2000006c:	006627d9 0000000e 0800614d 08006289     .'f.....Ma...b..
2000007c:	08005f75 006627da 00000006 080048dd     u_...'f......H..
2000008c:	08004981 080047d5 006627db 0000000a     .I...G...'f.....
2000009c:	08004f61 0800505d 08004df1 006627dc     aO..]P...M...'f.
200000ac:	00000003 08001715 0800177d 08001665     ........}...e...
200000bc:	006627dd 0000000d 08005859 08005951     .'f.....YX..QY..
200000cc:	08005699 00010067 00000002 0800132d     .V..g.......-...
200000dc:	08001381 0800129d                       ........

200000e4 <SystemCoreClock>:
200000e4:	00f42400                                .$..

200000e8 <uwTickPrio>:
200000e8:	00000010                                ....

200000ec <uwTickFreq>:
200000ec:	00000001                                ....

200000f0 <USBD_CDC_DeviceQualifierDesc>:
200000f0:	0200060a 40000000 00000001              .......@....

200000fc <USBD_CDC>:
200000fc:	0800e44d 0800e63d 0800e741 00000000     M...=...A.......
2000010c:	0800ea67 0800e8f9 0800e9f7 00000000     g...............
	...
20000124:	0800eb4d 0800eadd 0800ebbd 0800ec2d     M...........-...

20000134 <USBD_CDC_CfgDesc>:
20000134:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000144:	24050001 05011000 01000124 02022404     ...$....$....$..
20000154:	00062405 82050701 10000803 00010409     .$..............
20000164:	00000a02 01050700 00004002 02810507     .........@......
20000174:	                                         @..

20000177 <CDCInEpAdd>:
20000177:	                                         .

20000178 <CDCOutEpAdd>:
20000178:	                                         .

20000179 <CDCCmdEpAdd>:
20000179:	                                         ...

2000017c <USBD_Interface_fops_FS>:
2000017c:	0801043d 08010465 08010475 08010531     =...e...u...1...
2000018c:	080105a5                                ....

20000190 <FS_Desc>:
20000190:	080105c9 080105ed 0801064d 08010611     ........M.......
200001a0:	08010675 08010699 080106d5              u...........

200001ac <USBD_FS_DeviceDesc>:
200001ac:	02000112 40000202 57400483 02010200     .......@..@W....
200001bc:	00000103                                ....

200001c0 <USBD_LangIDDesc>:
200001c0:	04090304                                ....

200001c4 <USBD_StringSerial>:
200001c4:	0000031a 00000000 00000000 00000000     ................
	...

200001e0 <system_Reset>:

__ramfunc void system_Reset()
{
200001e0:	b480      	push	{r7}
200001e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
200001e4:	b672      	cpsid	i
}
200001e6:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200001e8:	4b05      	ldr	r3, [pc, #20]	; (20000200 <system_Reset+0x20>)
200001ea:	68db      	ldr	r3, [r3, #12]
200001ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200001f0:	4903      	ldr	r1, [pc, #12]	; (20000200 <system_Reset+0x20>)
200001f2:	4b04      	ldr	r3, [pc, #16]	; (20000204 <system_Reset+0x24>)
200001f4:	4313      	orrs	r3, r2
200001f6:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
200001f8:	f3bf 8f4f 	dsb	sy
}
200001fc:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
200001fe:	e7fe      	b.n	200001fe <system_Reset+0x1e>
20000200:	e000ed00 	.word	0xe000ed00
20000204:	05fa0004 	.word	0x05fa0004
