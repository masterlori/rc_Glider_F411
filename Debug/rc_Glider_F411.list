
rc_Glider_F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  08016770  08016770  00026770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017218  08017218  00030290  2**0
                  CONTENTS
  4 .ARM          00000008  08017218  08017218  00027218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017220  08017220  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017220  08017220  00027220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017224  08017224  00027224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08017228  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00002be8  20000290  080174b8  00030290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e78  080174b8  00032e78  2**0
                  ALLOC
 11 .param_section 00001000  08060000  08060000  00040000  2**2
                  ALLOC
 12 .new_firmware 00000004  08040000  08040000  00040000  2**2
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00024a04  00000000  00000000  00030303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006100  00000000  00000000  00054d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e78  00000000  00000000  0005ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001794  00000000  00000000  0005cc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001e7c3  00000000  00000000  0005e414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002be94  00000000  00000000  0007cbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000a4a94  00000000  00000000  000a8a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008408  00000000  00000000  0014d500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  00155908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000290 	.word	0x20000290
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0801674c 	.word	0x0801674c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000294 	.word	0x20000294
 80001d4:	0801674c 	.word	0x0801674c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b970 	b.w	8000e58 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9e08      	ldr	r6, [sp, #32]
 8000b96:	460d      	mov	r5, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14a      	bne.n	8000c36 <__udivmoddi4+0xa6>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	d965      	bls.n	8000c72 <__udivmoddi4+0xe2>
 8000ba6:	fab2 f382 	clz	r3, r2
 8000baa:	b143      	cbz	r3, 8000bbe <__udivmoddi4+0x2e>
 8000bac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb0:	f1c3 0220 	rsb	r2, r3, #32
 8000bb4:	409f      	lsls	r7, r3
 8000bb6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bba:	4317      	orrs	r7, r2
 8000bbc:	409c      	lsls	r4, r3
 8000bbe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc2:	fa1f f58c 	uxth.w	r5, ip
 8000bc6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bca:	0c22      	lsrs	r2, r4, #16
 8000bcc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd4:	fb01 f005 	mul.w	r0, r1, r5
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	d90a      	bls.n	8000bf2 <__udivmoddi4+0x62>
 8000bdc:	eb1c 0202 	adds.w	r2, ip, r2
 8000be0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be4:	f080 811c 	bcs.w	8000e20 <__udivmoddi4+0x290>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f240 8119 	bls.w	8000e20 <__udivmoddi4+0x290>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4462      	add	r2, ip
 8000bf2:	1a12      	subs	r2, r2, r0
 8000bf4:	b2a4      	uxth	r4, r4
 8000bf6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	fb00 f505 	mul.w	r5, r0, r5
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x90>
 8000c0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x294>
 8000c16:	42a5      	cmp	r5, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x294>
 8000c1c:	4464      	add	r4, ip
 8000c1e:	3802      	subs	r0, #2
 8000c20:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	2100      	movs	r1, #0
 8000c28:	b11e      	cbz	r6, 8000c32 <__udivmoddi4+0xa2>
 8000c2a:	40dc      	lsrs	r4, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0xbc>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	f000 80ed 	beq.w	8000e1a <__udivmoddi4+0x28a>
 8000c40:	2100      	movs	r1, #0
 8000c42:	e9c6 0500 	strd	r0, r5, [r6]
 8000c46:	4608      	mov	r0, r1
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	fab3 f183 	clz	r1, r3
 8000c50:	2900      	cmp	r1, #0
 8000c52:	d149      	bne.n	8000ce8 <__udivmoddi4+0x158>
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d302      	bcc.n	8000c5e <__udivmoddi4+0xce>
 8000c58:	4282      	cmp	r2, r0
 8000c5a:	f200 80f8 	bhi.w	8000e4e <__udivmoddi4+0x2be>
 8000c5e:	1a84      	subs	r4, r0, r2
 8000c60:	eb65 0203 	sbc.w	r2, r5, r3
 8000c64:	2001      	movs	r0, #1
 8000c66:	4617      	mov	r7, r2
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d0e2      	beq.n	8000c32 <__udivmoddi4+0xa2>
 8000c6c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c70:	e7df      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c72:	b902      	cbnz	r2, 8000c76 <__udivmoddi4+0xe6>
 8000c74:	deff      	udf	#255	; 0xff
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x210>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c90:	fb07 2015 	mls	r0, r7, r5, r2
 8000c94:	0c22      	lsrs	r2, r4, #16
 8000c96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9a:	fb0e f005 	mul.w	r0, lr, r5
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x124>
 8000ca2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x122>
 8000cac:	4290      	cmp	r0, r2
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2b8>
 8000cb2:	4645      	mov	r5, r8
 8000cb4:	1a12      	subs	r2, r2, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cbc:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x14e>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x14c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2c2>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce6:	e79f      	b.n	8000c28 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfa:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfe:	40fd      	lsrs	r5, r7
 8000d00:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0a:	fa1f fe8c 	uxth.w	lr, ip
 8000d0e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d18:	fb08 f50e 	mul.w	r5, r8, lr
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	fa00 f001 	lsl.w	r0, r0, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b0>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2b4>
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2b4>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	b29d      	uxth	r5, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d50:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1da>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2ac>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2ac>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x29c>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x298>
 8000d80:	b156      	cbz	r6, 8000d98 <__udivmoddi4+0x208>
 8000d82:	ebb0 0208 	subs.w	r2, r0, r8
 8000d86:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8e:	40ca      	lsrs	r2, r1
 8000d90:	40cc      	lsrs	r4, r1
 8000d92:	4317      	orrs	r7, r2
 8000d94:	e9c6 7400 	strd	r7, r4, [r6]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	f1c3 0120 	rsb	r1, r3, #32
 8000da4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dac:	fa25 f101 	lsr.w	r1, r5, r1
 8000db0:	409d      	lsls	r5, r3
 8000db2:	432a      	orrs	r2, r5
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc4:	0c11      	lsrs	r1, r2, #16
 8000dc6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dca:	fb00 f50e 	mul.w	r5, r0, lr
 8000dce:	428d      	cmp	r5, r1
 8000dd0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x258>
 8000dd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b0>
 8000de0:	428d      	cmp	r5, r1
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b0>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4461      	add	r1, ip
 8000de8:	1b49      	subs	r1, r1, r5
 8000dea:	b292      	uxth	r2, r2
 8000dec:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df0:	fb07 1115 	mls	r1, r7, r5, r1
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dfc:	4291      	cmp	r1, r2
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x282>
 8000e00:	eb1c 0202 	adds.w	r2, ip, r2
 8000e04:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2a8>
 8000e0e:	3d02      	subs	r5, #2
 8000e10:	4462      	add	r2, ip
 8000e12:	1a52      	subs	r2, r2, r1
 8000e14:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0xfc>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000e20:	4639      	mov	r1, r7
 8000e22:	e6e6      	b.n	8000bf2 <__udivmoddi4+0x62>
 8000e24:	4610      	mov	r0, r2
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x90>
 8000e28:	4548      	cmp	r0, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f0>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3b01      	subs	r3, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f0>
 8000e38:	4645      	mov	r5, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x282>
 8000e3c:	462b      	mov	r3, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1da>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x258>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b0>
 8000e48:	3d02      	subs	r5, #2
 8000e4a:	4462      	add	r2, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x124>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e70a      	b.n	8000c68 <__udivmoddi4+0xd8>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x14e>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <autopilot_Timer>:

autopilot_stateTypeDef autopilot_states[AP_SATES_NUM];
volatile uint8_t _cur_ap_state;

void autopilot_Timer(uint32_t res)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e010      	b.n	8000e8c <autopilot_Timer+0x30>
	{
		if( autopilot_info.timer[i] > 0 ){
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <autopilot_Timer+0x2a>
			autopilot_info.timer[i]--;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <autopilot_Timer+0x44>)
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < AUTOPILOT_TMR_NUM; i++ )
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d9eb      	bls.n	8000e6a <autopilot_Timer+0xe>
		}
	}

	return;
 8000e92:	bf00      	nop
}
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200002ac 	.word	0x200002ac

08000ea4 <autopilot_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_InitTask()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	//Init
	_cur_ap_state = 0xFF;
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <autopilot_InitTask+0xe0>)
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	701a      	strb	r2, [r3, #0]
	autopilot_info.timer[AUTOPILOT_TMR_INIT] = 500;
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <autopilot_InitTask+0xe4>)
 8000eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb4:	601a      	str	r2, [r3, #0]
	autopilot_info.armed_flag = 0;
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <autopilot_InitTask+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	765a      	strb	r2, [r3, #25]
	autopilot_info.astart_elevator_en = 0;
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <autopilot_InitTask+0xe4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	771a      	strb	r2, [r3, #28]
	autopilot_info.astart_motor_en = 0;
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <autopilot_InitTask+0xe4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	775a      	strb	r2, [r3, #29]
	autopilot_info.astart_elevator_val = -80;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <autopilot_InitTask+0xe4>)
 8000eca:	22b0      	movs	r2, #176	; 0xb0
 8000ecc:	779a      	strb	r2, [r3, #30]
	autopilot_info.astart_motor_val = 90;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <autopilot_InitTask+0xe4>)
 8000ed0:	225a      	movs	r2, #90	; 0x5a
 8000ed2:	77da      	strb	r2, [r3, #31]

	autopilot_KalmanInit(&_roll_filter, 0.001, 0.003, 0.03);
 8000ed4:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8000f8c <autopilot_InitTask+0xe8>
 8000ed8:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8000f90 <autopilot_InitTask+0xec>
 8000edc:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8000f94 <autopilot_InitTask+0xf0>
 8000ee0:	482d      	ldr	r0, [pc, #180]	; (8000f98 <autopilot_InitTask+0xf4>)
 8000ee2:	f000 fb59 	bl	8001598 <autopilot_KalmanInit>
	autopilot_KalmanInit(&_pitch_filter, 0.001, 0.003, 0.03);
 8000ee6:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8000f8c <autopilot_InitTask+0xe8>
 8000eea:	eddf 0a29 	vldr	s1, [pc, #164]	; 8000f90 <autopilot_InitTask+0xec>
 8000eee:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000f94 <autopilot_InitTask+0xf0>
 8000ef2:	482a      	ldr	r0, [pc, #168]	; (8000f9c <autopilot_InitTask+0xf8>)
 8000ef4:	f000 fb50 	bl	8001598 <autopilot_KalmanInit>

	//Roll channel default
	_roll_pid.Kp = 1.0f;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <autopilot_InitTask+0xfc>)
 8000efa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000efe:	601a      	str	r2, [r3, #0]
	_roll_pid.Ki = 0.1f;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <autopilot_InitTask+0xfc>)
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <autopilot_InitTask+0x100>)
 8000f04:	605a      	str	r2, [r3, #4]
	_roll_pid.Kd = 0.01f;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <autopilot_InitTask+0xfc>)
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <autopilot_InitTask+0x104>)
 8000f0a:	609a      	str	r2, [r3, #8]

	//Roll channel default
	_pitch_pid.Kp = 1.0f;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <autopilot_InitTask+0x108>)
 8000f0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f12:	601a      	str	r2, [r3, #0]
	_pitch_pid.Ki = 0.1f;
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <autopilot_InitTask+0x108>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <autopilot_InitTask+0x100>)
 8000f18:	605a      	str	r2, [r3, #4]
	_pitch_pid.Kd = 0.01f;
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <autopilot_InitTask+0x108>)
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <autopilot_InitTask+0x104>)
 8000f1e:	609a      	str	r2, [r3, #8]

	autopilot_states[AP_STATE_IDLE].start_func = NULL;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
	autopilot_states[AP_STATE_IDLE].main_func = autopilot_stateIdleMain;
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f28:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <autopilot_InitTask+0x110>)
 8000f2a:	605a      	str	r2, [r3, #4]
	autopilot_states[AP_STATE_IDLE].end_func = NULL;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
	autopilot_states[AP_STATE_IDLE].upd_period = 0;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]

	autopilot_states[AP_STATE_FULLMANUAL].start_func = autopilot_stateFullManStart;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <autopilot_InitTask+0x114>)
 8000f3c:	611a      	str	r2, [r3, #16]
	autopilot_states[AP_STATE_FULLMANUAL].main_func = autopilot_stateFullManMain;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f40:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <autopilot_InitTask+0x118>)
 8000f42:	615a      	str	r2, [r3, #20]
	autopilot_states[AP_STATE_FULLMANUAL].end_func = NULL;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
	autopilot_states[AP_STATE_FULLMANUAL].upd_period = 10;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	61da      	str	r2, [r3, #28]

	autopilot_states[AP_STATE_STAB].start_func = autopilot_stateStabStart;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <autopilot_InitTask+0x11c>)
 8000f54:	621a      	str	r2, [r3, #32]
	autopilot_states[AP_STATE_STAB].main_func = autopilot_stateStabMain;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f58:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <autopilot_InitTask+0x120>)
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
	autopilot_states[AP_STATE_STAB].end_func = NULL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
	autopilot_states[AP_STATE_STAB].upd_period = 10;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c

	autopilot_states[AP_STATE_FAILSAFE].start_func = autopilot_stateFailsafeStart;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <autopilot_InitTask+0x124>)
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
	autopilot_states[AP_STATE_FAILSAFE].main_func = autopilot_stateFailsafeMain;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f70:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <autopilot_InitTask+0x128>)
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
	autopilot_states[AP_STATE_FAILSAFE].end_func = NULL;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
	autopilot_states[AP_STATE_FAILSAFE].upd_period = 0;
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <autopilot_InitTask+0x10c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c

	return;
 8000f80:	bf00      	nop
}
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200003ac 	.word	0x200003ac
 8000f88:	200002ac 	.word	0x200002ac
 8000f8c:	3cf5c28f 	.word	0x3cf5c28f
 8000f90:	3b449ba6 	.word	0x3b449ba6
 8000f94:	3a83126f 	.word	0x3a83126f
 8000f98:	200002e8 	.word	0x200002e8
 8000f9c:	20000310 	.word	0x20000310
 8000fa0:	20000338 	.word	0x20000338
 8000fa4:	3dcccccd 	.word	0x3dcccccd
 8000fa8:	3c23d70a 	.word	0x3c23d70a
 8000fac:	20000350 	.word	0x20000350
 8000fb0:	2000036c 	.word	0x2000036c
 8000fb4:	080010d1 	.word	0x080010d1
 8000fb8:	080010f1 	.word	0x080010f1
 8000fbc:	08001101 	.word	0x08001101
 8000fc0:	08001391 	.word	0x08001391
 8000fc4:	080013a1 	.word	0x080013a1
 8000fc8:	08001559 	.word	0x08001559
 8000fcc:	08001579 	.word	0x08001579

08000fd0 <autopilot_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void autopilot_Task(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	// initialize first state ever
	if( (_cur_ap_state == 0xFF) && (autopilot_info.timer[AUTOPILOT_TMR_INIT] == 0) ){
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <autopilot_Task+0x68>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d107      	bne.n	8000fee <autopilot_Task+0x1e>
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <autopilot_Task+0x6c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <autopilot_Task+0x1e>
		autopilot_gotoState(AP_STATE_IDLE);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f82c 	bl	8001044 <autopilot_gotoState>
 8000fec:	e017      	b.n	800101e <autopilot_Task+0x4e>
	}
	else
	{
		if( (_cur_ap_state < AP_SATES_NUM) && (autopilot_states[_cur_ap_state].main_func != NULL) ){
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <autopilot_Task+0x68>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d812      	bhi.n	800101e <autopilot_Task+0x4e>
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <autopilot_Task+0x68>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <autopilot_Task+0x70>)
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4413      	add	r3, r2
 8001004:	3304      	adds	r3, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <autopilot_Task+0x4e>
			autopilot_states[_cur_ap_state].main_func();
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <autopilot_Task+0x68>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <autopilot_Task+0x70>)
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	3304      	adds	r3, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4798      	blx	r3
		}
	}

	if( autopilot_info.timer[AUTOPILOT_TMR_ANG_UPD] == 0 )
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <autopilot_Task+0x6c>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d105      	bne.n	8001032 <autopilot_Task+0x62>
	{
		autopilot_info.timer[AUTOPILOT_TMR_ANG_UPD] = 10;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <autopilot_Task+0x6c>)
 8001028:	220a      	movs	r2, #10
 800102a:	609a      	str	r2, [r3, #8]
		autopilot_UpdAngles();
 800102c:	f000 fbe0 	bl	80017f0 <autopilot_UpdAngles>
	}

	return;
 8001030:	bf00      	nop
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200003ac 	.word	0x200003ac
 800103c:	200002ac 	.word	0x200002ac
 8001040:	2000036c 	.word	0x2000036c

08001044 <autopilot_gotoState>:
  * @brief  sets the new ui state
  * @param  None
  * @retval None
  */
void autopilot_gotoState(uint8_t new_state)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
#ifdef NO_AUTOPILOT
	return;
#endif //NO_AUTOPILOT

	if( new_state >= AP_SATES_NUM ){
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d833      	bhi.n	80010bc <autopilot_gotoState+0x78>
		return;
	}
	if( _cur_ap_state < AP_SATES_NUM )
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <autopilot_gotoState+0x80>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d812      	bhi.n	8001084 <autopilot_gotoState+0x40>
	{
		if( autopilot_states[_cur_ap_state].end_func != NULL ){
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <autopilot_gotoState+0x80>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <autopilot_gotoState+0x84>)
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	3308      	adds	r3, #8
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d008      	beq.n	8001084 <autopilot_gotoState+0x40>
			autopilot_states[_cur_ap_state].end_func();
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <autopilot_gotoState+0x80>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <autopilot_gotoState+0x84>)
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	3308      	adds	r3, #8
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4798      	blx	r3
		}
	}
	if( autopilot_states[new_state].start_func != NULL ){
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <autopilot_gotoState+0x84>)
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <autopilot_gotoState+0x5a>
		autopilot_states[new_state].start_func();
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <autopilot_gotoState+0x84>)
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4798      	blx	r3
	}

	autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[new_state].upd_period;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <autopilot_gotoState+0x84>)
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	330c      	adds	r3, #12
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <autopilot_gotoState+0x88>)
 80010ac:	6053      	str	r3, [r2, #4]
	_cur_ap_state = new_state;
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <autopilot_gotoState+0x80>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	7013      	strb	r3, [r2, #0]
	autopilot_info.state = new_state;
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <autopilot_gotoState+0x88>)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	7613      	strb	r3, [r2, #24]

	return;
 80010ba:	e000      	b.n	80010be <autopilot_gotoState+0x7a>
		return;
 80010bc:	bf00      	nop
}
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200003ac 	.word	0x200003ac
 80010c8:	2000036c 	.word	0x2000036c
 80010cc:	200002ac 	.word	0x200002ac

080010d0 <autopilot_stateIdleMain>:

/*IDLE*/
void autopilot_stateIdleMain()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	if( sens_info.state == 4 ){
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <autopilot_stateIdleMain+0x1c>)
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d103      	bne.n	80010e6 <autopilot_stateIdleMain+0x16>
		autopilot_gotoState(AP_STATE_STAB);
 80010de:	2002      	movs	r0, #2
 80010e0:	f7ff ffb0 	bl	8001044 <autopilot_gotoState>
		//autopilot_gotoState(AP_STATE_FULLMANUAL);
	}

	return;
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
}
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001020 	.word	0x20001020

080010f0 <autopilot_stateFullManStart>:

/*Full manual control*/
void autopilot_stateFullManStart()
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	return;
 80010f4:	bf00      	nop
}
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <autopilot_stateFullManMain>:

void autopilot_stateFullManMain()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
	float t_trot;
	static uint8_t astart_mot_state = 0;
	static uint8_t astart_elev_state = 0;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 8001106:	4b9a      	ldr	r3, [pc, #616]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8091 	bne.w	8001232 <autopilot_stateFullManMain+0x132>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 8001110:	4b98      	ldr	r3, [pc, #608]	; (8001374 <autopilot_stateFullManMain+0x274>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4a98      	ldr	r2, [pc, #608]	; (8001378 <autopilot_stateFullManMain+0x278>)
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	330c      	adds	r3, #12
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a93      	ldr	r2, [pc, #588]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001122:	6053      	str	r3, [r2, #4]
		if(rc_info.connected == 1)
 8001124:	4b95      	ldr	r3, [pc, #596]	; (800137c <autopilot_stateFullManMain+0x27c>)
 8001126:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d17d      	bne.n	800122c <autopilot_stateFullManMain+0x12c>
		{
			servo_setPercnet(SERVO_ROLL, rc_info.axis_r_y);
 8001130:	4b92      	ldr	r3, [pc, #584]	; (800137c <autopilot_stateFullManMain+0x27c>)
 8001132:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8001136:	b25b      	sxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	2000      	movs	r0, #0
 800113c:	f009 fe4a 	bl	800add4 <servo_setPercnet>

			if( autopilot_info.astart_elevator_en == 0 ){
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001142:	7f1b      	ldrb	r3, [r3, #28]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d108      	bne.n	800115c <autopilot_stateFullManMain+0x5c>
				servo_setPercnet(SERVO_PITCH, rc_info.axis_r_x);
 800114a:	4b8c      	ldr	r3, [pc, #560]	; (800137c <autopilot_stateFullManMain+0x27c>)
 800114c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001150:	b25b      	sxtb	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	2001      	movs	r0, #1
 8001156:	f009 fe3d 	bl	800add4 <servo_setPercnet>
 800115a:	e013      	b.n	8001184 <autopilot_stateFullManMain+0x84>
			}
			//Auto start
			else
			{
				servo_setPercnet(SERVO_PITCH, autopilot_info.astart_elevator_val);
 800115c:	4b84      	ldr	r3, [pc, #528]	; (8001370 <autopilot_stateFullManMain+0x270>)
 800115e:	7f9b      	ldrb	r3, [r3, #30]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	2001      	movs	r0, #1
 8001166:	f009 fe35 	bl	800add4 <servo_setPercnet>
				//Auto start switch off condition
				if( abs((int)rc_info.axis_r_x) > 50 ){
 800116a:	4b84      	ldr	r3, [pc, #528]	; (800137c <autopilot_stateFullManMain+0x27c>)
 800116c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001170:	b25b      	sxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	bfb8      	it	lt
 8001176:	425b      	neglt	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b32      	cmp	r3, #50	; 0x32
 800117c:	d902      	bls.n	8001184 <autopilot_stateFullManMain+0x84>
					autopilot_info.astart_elevator_en = 0;
 800117e:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001180:	2200      	movs	r2, #0
 8001182:	771a      	strb	r2, [r3, #28]
				}
			}
			//Motor
			if( ((rc_info.axis_l_x > 0) || (autopilot_info.astart_motor_en == 1)) && (autopilot_info.armed_flag == 1) )
 8001184:	4b7d      	ldr	r3, [pc, #500]	; (800137c <autopilot_stateFullManMain+0x27c>)
 8001186:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800118a:	b25b      	sxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	dc04      	bgt.n	800119a <autopilot_stateFullManMain+0x9a>
 8001190:	4b77      	ldr	r3, [pc, #476]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001192:	7f5b      	ldrb	r3, [r3, #29]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d133      	bne.n	8001202 <autopilot_stateFullManMain+0x102>
 800119a:	4b75      	ldr	r3, [pc, #468]	; (8001370 <autopilot_stateFullManMain+0x270>)
 800119c:	7e5b      	ldrb	r3, [r3, #25]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d12e      	bne.n	8001202 <autopilot_stateFullManMain+0x102>
			{
				if( autopilot_info.astart_motor_en == 0 ){
 80011a4:	4b72      	ldr	r3, [pc, #456]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80011a6:	7f5b      	ldrb	r3, [r3, #29]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10e      	bne.n	80011cc <autopilot_stateFullManMain+0xcc>
					t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <autopilot_stateFullManMain+0x27c>)
 80011b0:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	f000 fbd1 	bl	8001968 <autopilot_expRunningAverage>
 80011c6:	ed87 0a03 	vstr	s0, [r7, #12]
				if( autopilot_info.astart_motor_en == 0 ){
 80011ca:	e021      	b.n	8001210 <autopilot_stateFullManMain+0x110>
				}
				//Auto start
				else
				{
					t_trot = autopilot_expRunningAverage((float)autopilot_info.astart_motor_val);
 80011cc:	4b68      	ldr	r3, [pc, #416]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80011ce:	7fdb      	ldrb	r3, [r3, #31]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f000 fbc3 	bl	8001968 <autopilot_expRunningAverage>
 80011e2:	ed87 0a03 	vstr	s0, [r7, #12]
					//Auto start switch off condition
					if( abs((int)rc_info.axis_l_x) > 50 ){
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <autopilot_stateFullManMain+0x27c>)
 80011e8:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bfb8      	it	lt
 80011f2:	425b      	neglt	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b32      	cmp	r3, #50	; 0x32
 80011f8:	d90a      	bls.n	8001210 <autopilot_stateFullManMain+0x110>
						autopilot_info.astart_motor_en = 0;
 80011fa:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	775a      	strb	r2, [r3, #29]
				if( autopilot_info.astart_motor_en == 0 ){
 8001200:	e006      	b.n	8001210 <autopilot_stateFullManMain+0x110>
					}
				}
			}
			else
			{
				t_trot = autopilot_expRunningAverage(0.0f);
 8001202:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001380 <autopilot_stateFullManMain+0x280>
 8001206:	f000 fbaf 	bl	8001968 <autopilot_expRunningAverage>
 800120a:	ed87 0a03 	vstr	s0, [r7, #12]
 800120e:	e000      	b.n	8001212 <autopilot_stateFullManMain+0x112>
				if( autopilot_info.astart_motor_en == 0 ){
 8001210:	bf00      	nop
				//motor_setTorque(MOTOR_MAIN, 0);
			}
			motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 8001212:	edd7 7a03 	vldr	s15, [r7, #12]
 8001216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121a:	edc7 7a01 	vstr	s15, [r7, #4]
 800121e:	793b      	ldrb	r3, [r7, #4]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	2000      	movs	r0, #0
 8001226:	f008 fa2d 	bl	8009684 <motor_setTorque>
 800122a:	e002      	b.n	8001232 <autopilot_stateFullManMain+0x132>

		}
		//Lost RC reception
		else{
			autopilot_gotoState(AP_STATE_FAILSAFE);
 800122c:	2003      	movs	r0, #3
 800122e:	f7ff ff09 	bl	8001044 <autopilot_gotoState>
		}
	}

	//ARMING
	if( autopilot_info.armed_flag == 0 )
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001234:	7e5b      	ldrb	r3, [r3, #25]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d131      	bne.n	80012a0 <autopilot_stateFullManMain+0x1a0>
	{
		if(rc_info.connected == 1)
 800123c:	4b4f      	ldr	r3, [pc, #316]	; (800137c <autopilot_stateFullManMain+0x27c>)
 800123e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d12b      	bne.n	80012a0 <autopilot_stateFullManMain+0x1a0>
		{
			//Push trot to min for 3 sec
			if( _ap_arm_st == 0 )
 8001248:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <autopilot_stateFullManMain+0x284>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10e      	bne.n	800126e <autopilot_stateFullManMain+0x16e>
			{
				if( rc_info.axis_l_x < -70 )
 8001250:	4b4a      	ldr	r3, [pc, #296]	; (800137c <autopilot_stateFullManMain+0x27c>)
 8001252:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001256:	b25b      	sxtb	r3, r3
 8001258:	f113 0f46 	cmn.w	r3, #70	; 0x46
 800125c:	da20      	bge.n	80012a0 <autopilot_stateFullManMain+0x1a0>
				{
					autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001260:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001264:	60da      	str	r2, [r3, #12]
					_ap_arm_st = 1;
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <autopilot_stateFullManMain+0x284>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e018      	b.n	80012a0 <autopilot_stateFullManMain+0x1a0>
				}
			}
			else if( _ap_arm_st == 1 )
 800126e:	4b45      	ldr	r3, [pc, #276]	; (8001384 <autopilot_stateFullManMain+0x284>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d114      	bne.n	80012a0 <autopilot_stateFullManMain+0x1a0>
			{
				if( rc_info.axis_l_x >= -70 ){
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <autopilot_stateFullManMain+0x27c>)
 8001278:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800127c:	b25b      	sxtb	r3, r3
 800127e:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001282:	db03      	blt.n	800128c <autopilot_stateFullManMain+0x18c>
					_ap_arm_st = 0;
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <autopilot_stateFullManMain+0x284>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e009      	b.n	80012a0 <autopilot_stateFullManMain+0x1a0>
				}
				else
				{
					if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <autopilot_stateFullManMain+0x270>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <autopilot_stateFullManMain+0x1a0>
					{
						autopilot_info.armed_flag = 1;
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001296:	2201      	movs	r2, #1
 8001298:	765a      	strb	r2, [r3, #25]
						_ap_arm_st = 0;
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <autopilot_stateFullManMain+0x284>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]

		}
	}

	//Auto start elevator
	if( autopilot_info.astart_elevator_en == 0 )
 80012a0:	4b33      	ldr	r3, [pc, #204]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80012a2:	7f1b      	ldrb	r3, [r3, #28]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d129      	bne.n	80012fe <autopilot_stateFullManMain+0x1fe>
	{
		if( astart_elev_state == 0 )
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <autopilot_stateFullManMain+0x288>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <autopilot_stateFullManMain+0x1ce>
		{
			if( rc_info.button_r == 1 )
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <autopilot_stateFullManMain+0x27c>)
 80012b4:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d11f      	bne.n	80012fe <autopilot_stateFullManMain+0x1fe>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] = 2000;
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80012c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012c4:	615a      	str	r2, [r3, #20]
				astart_elev_state = 1;
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <autopilot_stateFullManMain+0x288>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e017      	b.n	80012fe <autopilot_stateFullManMain+0x1fe>
			}
		}
		else if( astart_elev_state == 1 )
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <autopilot_stateFullManMain+0x288>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d113      	bne.n	80012fe <autopilot_stateFullManMain+0x1fe>
		{
			if( rc_info.button_r != 1 ){
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <autopilot_stateFullManMain+0x27c>)
 80012d8:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d003      	beq.n	80012ea <autopilot_stateFullManMain+0x1ea>
				astart_elev_state = 0;
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <autopilot_stateFullManMain+0x288>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e009      	b.n	80012fe <autopilot_stateFullManMain+0x1fe>
			}
			else
			{
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_ELEV] == 0 )
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <autopilot_stateFullManMain+0x1fe>
				{
					autopilot_info.astart_elevator_en = 1;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <autopilot_stateFullManMain+0x270>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	771a      	strb	r2, [r3, #28]
					astart_elev_state = 0;
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <autopilot_stateFullManMain+0x288>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//Auto start motor
	if( (autopilot_info.astart_motor_en == 0) && (autopilot_info.armed_flag == 1) )
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001300:	7f5b      	ldrb	r3, [r3, #29]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d12f      	bne.n	8001368 <autopilot_stateFullManMain+0x268>
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <autopilot_stateFullManMain+0x270>)
 800130a:	7e5b      	ldrb	r3, [r3, #25]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d12a      	bne.n	8001368 <autopilot_stateFullManMain+0x268>
	{
		if( astart_mot_state == 0 )
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <autopilot_stateFullManMain+0x28c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <autopilot_stateFullManMain+0x236>
		{
			if( rc_info.button_l == 1 )
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <autopilot_stateFullManMain+0x27c>)
 800131c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d120      	bne.n	8001368 <autopilot_stateFullManMain+0x268>
			{
				autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] = 2000;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001328:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800132c:	611a      	str	r2, [r3, #16]
				astart_mot_state = 1;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <autopilot_stateFullManMain+0x28c>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 8001334:	e018      	b.n	8001368 <autopilot_stateFullManMain+0x268>
		else if( astart_mot_state == 1 )
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <autopilot_stateFullManMain+0x28c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d114      	bne.n	8001368 <autopilot_stateFullManMain+0x268>
			if( rc_info.button_l != 1 ){
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <autopilot_stateFullManMain+0x27c>)
 8001340:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <autopilot_stateFullManMain+0x252>
				astart_mot_state = 0;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <autopilot_stateFullManMain+0x28c>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
	return;
 8001350:	e00a      	b.n	8001368 <autopilot_stateFullManMain+0x268>
				if( autopilot_info.timer[AUTOPILOT_TMR_ASTART_MOTOR] == 0 )
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <autopilot_stateFullManMain+0x270>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <autopilot_stateFullManMain+0x268>
					autopilot_info.astart_motor_en = 1;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <autopilot_stateFullManMain+0x270>)
 800135c:	2201      	movs	r2, #1
 800135e:	775a      	strb	r2, [r3, #29]
					astart_mot_state = 0;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <autopilot_stateFullManMain+0x28c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
	return;
 8001366:	bf00      	nop
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002ac 	.word	0x200002ac
 8001374:	200003ac 	.word	0x200003ac
 8001378:	2000036c 	.word	0x2000036c
 800137c:	20000e68 	.word	0x20000e68
 8001380:	00000000 	.word	0x00000000
 8001384:	20000368 	.word	0x20000368
 8001388:	200003ad 	.word	0x200003ad
 800138c:	200003ae 	.word	0x200003ae

08001390 <autopilot_stateStabStart>:

/*Stabilize state*/
void autopilot_stateStabStart()
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	return;
 8001394:	bf00      	nop
}
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <autopilot_stateStabMain>:

void autopilot_stateStabMain()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
	float t_trot;

	if( autopilot_info.timer[AUTOPILOT_TMR_UPD] == 0 )
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <autopilot_stateStabMain+0x198>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 80c0 	bne.w	8001530 <autopilot_stateStabMain+0x190>
	{
		autopilot_info.timer[AUTOPILOT_TMR_UPD] = autopilot_states[_cur_ap_state].upd_period;
 80013b0:	4b62      	ldr	r3, [pc, #392]	; (800153c <autopilot_stateStabMain+0x19c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4a62      	ldr	r2, [pc, #392]	; (8001540 <autopilot_stateStabMain+0x1a0>)
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4413      	add	r3, r2
 80013bc:	330c      	adds	r3, #12
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5d      	ldr	r2, [pc, #372]	; (8001538 <autopilot_stateStabMain+0x198>)
 80013c2:	6053      	str	r3, [r2, #4]
		//Roll
		autopilot_info.tar_roll = autopilot_map((int32_t)rc_info.axis_r_y, -100, 100, -20, 20);
 80013c4:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <autopilot_stateStabMain+0x1a4>)
 80013c6:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	2314      	movs	r3, #20
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	f06f 0313 	mvn.w	r3, #19
 80013d6:	2264      	movs	r2, #100	; 0x64
 80013d8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80013dc:	f000 fb0a 	bl	80019f4 <autopilot_map>
 80013e0:	ee07 0a90 	vmov	s15, r0
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <autopilot_stateStabMain+0x198>)
 80013ea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		_roll_pid.output = autopilot_CalcPID(&_roll_pid, autopilot_info.tar_roll, autopilot_info.roll);
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <autopilot_stateStabMain+0x198>)
 80013f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <autopilot_stateStabMain+0x198>)
 80013f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80013fa:	eef0 0a47 	vmov.f32	s1, s14
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	4851      	ldr	r0, [pc, #324]	; (8001548 <autopilot_stateStabMain+0x1a8>)
 8001404:	f000 fb12 	bl	8001a2c <autopilot_CalcPID>
 8001408:	4603      	mov	r3, r0
 800140a:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <autopilot_stateStabMain+0x1a8>)
 800140c:	6153      	str	r3, [r2, #20]
		servo_setPercnet(SERVO_ROLL, (int8_t)_roll_pid.output);
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <autopilot_stateStabMain+0x1a8>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	2000      	movs	r0, #0
 8001418:	f009 fcdc 	bl	800add4 <servo_setPercnet>
		//Pitch
		autopilot_info.tar_pitch = autopilot_map((int32_t)rc_info.axis_r_x, -100, 100, -15, 15);
 800141c:	4b49      	ldr	r3, [pc, #292]	; (8001544 <autopilot_stateStabMain+0x1a4>)
 800141e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8001422:	b25b      	sxtb	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	230f      	movs	r3, #15
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	f06f 030e 	mvn.w	r3, #14
 800142e:	2264      	movs	r2, #100	; 0x64
 8001430:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001434:	f000 fade 	bl	80019f4 <autopilot_map>
 8001438:	ee07 0a90 	vmov	s15, r0
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <autopilot_stateStabMain+0x198>)
 8001442:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		_pitch_pid.output = autopilot_CalcPID(&_pitch_pid, autopilot_info.tar_pitch, autopilot_info.pitch);
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <autopilot_stateStabMain+0x198>)
 8001448:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800144c:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <autopilot_stateStabMain+0x198>)
 800144e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001452:	eef0 0a47 	vmov.f32	s1, s14
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	483c      	ldr	r0, [pc, #240]	; (800154c <autopilot_stateStabMain+0x1ac>)
 800145c:	f000 fae6 	bl	8001a2c <autopilot_CalcPID>
 8001460:	4603      	mov	r3, r0
 8001462:	4a3a      	ldr	r2, [pc, #232]	; (800154c <autopilot_stateStabMain+0x1ac>)
 8001464:	6153      	str	r3, [r2, #20]
		servo_setPercnet(SERVO_PITCH, (int8_t)_pitch_pid.output);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <autopilot_stateStabMain+0x1ac>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	2001      	movs	r0, #1
 8001470:	f009 fcb0 	bl	800add4 <servo_setPercnet>
		//Motor
		if( autopilot_info.armed_flag == 1 ){
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <autopilot_stateStabMain+0x198>)
 8001476:	7e5b      	ldrb	r3, [r3, #25]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10e      	bne.n	800149c <autopilot_stateStabMain+0xfc>
			t_trot = autopilot_expRunningAverage((float)rc_info.axis_l_x);
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <autopilot_stateStabMain+0x1a4>)
 8001480:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8001484:	b25b      	sxtb	r3, r3
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	f000 fa69 	bl	8001968 <autopilot_expRunningAverage>
 8001496:	ed87 0a03 	vstr	s0, [r7, #12]
 800149a:	e005      	b.n	80014a8 <autopilot_stateStabMain+0x108>
		}
		else{
			t_trot = autopilot_expRunningAverage(0.0f);
 800149c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001550 <autopilot_stateStabMain+0x1b0>
 80014a0:	f000 fa62 	bl	8001968 <autopilot_expRunningAverage>
 80014a4:	ed87 0a03 	vstr	s0, [r7, #12]
		}
		motor_setTorque(MOTOR_MAIN, (uint8_t)t_trot);
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b0:	edc7 7a01 	vstr	s15, [r7, #4]
 80014b4:	793b      	ldrb	r3, [r7, #4]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	2000      	movs	r0, #0
 80014bc:	f008 f8e2 	bl	8009684 <motor_setTorque>

		//ARMING
		if( autopilot_info.armed_flag == 0 )
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <autopilot_stateStabMain+0x198>)
 80014c2:	7e5b      	ldrb	r3, [r3, #25]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d132      	bne.n	8001530 <autopilot_stateStabMain+0x190>
		{
			if(rc_info.connected == 1)
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <autopilot_stateStabMain+0x1a4>)
 80014cc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d12c      	bne.n	8001530 <autopilot_stateStabMain+0x190>
			{
				//Push trot to min for 3 sec
				if( _ap_arm_st == 0 )
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <autopilot_stateStabMain+0x1b4>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10e      	bne.n	80014fc <autopilot_stateStabMain+0x15c>
				{
					if( rc_info.axis_l_x < -70 )
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <autopilot_stateStabMain+0x1a4>)
 80014e0:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80014ea:	da21      	bge.n	8001530 <autopilot_stateStabMain+0x190>
					{
						autopilot_info.timer[AUTOPILOT_TMR_ARM] = 3000;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <autopilot_stateStabMain+0x198>)
 80014ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014f2:	60da      	str	r2, [r3, #12]
						_ap_arm_st = 1;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <autopilot_stateStabMain+0x1b4>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 80014fa:	e019      	b.n	8001530 <autopilot_stateStabMain+0x190>
				else if( _ap_arm_st == 1 )
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <autopilot_stateStabMain+0x1b4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d115      	bne.n	8001530 <autopilot_stateStabMain+0x190>
					if( rc_info.axis_l_x >= -70 ){
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <autopilot_stateStabMain+0x1a4>)
 8001506:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001510:	db03      	blt.n	800151a <autopilot_stateStabMain+0x17a>
						_ap_arm_st = 0;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <autopilot_stateStabMain+0x1b4>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	return;
 8001518:	e00a      	b.n	8001530 <autopilot_stateStabMain+0x190>
						if( autopilot_info.timer[AUTOPILOT_TMR_ARM] == 0 )
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <autopilot_stateStabMain+0x198>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <autopilot_stateStabMain+0x190>
							autopilot_info.armed_flag = 1;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <autopilot_stateStabMain+0x198>)
 8001524:	2201      	movs	r2, #1
 8001526:	765a      	strb	r2, [r3, #25]
							_ap_arm_st = 0;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <autopilot_stateStabMain+0x1b4>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
	return;
 800152e:	bf00      	nop
 8001530:	bf00      	nop
}
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200002ac 	.word	0x200002ac
 800153c:	200003ac 	.word	0x200003ac
 8001540:	2000036c 	.word	0x2000036c
 8001544:	20000e68 	.word	0x20000e68
 8001548:	20000338 	.word	0x20000338
 800154c:	20000350 	.word	0x20000350
 8001550:	00000000 	.word	0x00000000
 8001554:	20000368 	.word	0x20000368

08001558 <autopilot_stateFailsafeStart>:

/*Failsafe state*/
void autopilot_stateFailsafeStart()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	servo_setPercnet(SERVO_ROLL, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	2000      	movs	r0, #0
 8001560:	f009 fc38 	bl	800add4 <servo_setPercnet>
	servo_setPercnet(SERVO_PITCH, 0);
 8001564:	2100      	movs	r1, #0
 8001566:	2001      	movs	r0, #1
 8001568:	f009 fc34 	bl	800add4 <servo_setPercnet>
	motor_setTorque(MOTOR_MAIN, 0);
 800156c:	2100      	movs	r1, #0
 800156e:	2000      	movs	r0, #0
 8001570:	f008 f888 	bl	8009684 <motor_setTorque>

	return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}

08001578 <autopilot_stateFailsafeMain>:

void autopilot_stateFailsafeMain()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	if(rc_info.connected == 1){
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <autopilot_stateFailsafeMain+0x1c>)
 800157e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d103      	bne.n	8001590 <autopilot_stateFailsafeMain+0x18>
		autopilot_gotoState(AP_STATE_FULLMANUAL);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fd5b 	bl	8001044 <autopilot_gotoState>
	}
	return;
 800158e:	bf00      	nop
 8001590:	bf00      	nop
}
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000e68 	.word	0x20000e68

08001598 <autopilot_KalmanInit>:

//Kalman filter init
void autopilot_KalmanInit(kalman_TypeDef* filter, float Q_angle, float Q_bias, float R_measure)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80015a8:	ed87 1a00 	vstr	s2, [r7]
	filter->Q_angle = Q_angle;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	601a      	str	r2, [r3, #0]
	filter->Q_bias = Q_bias;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	605a      	str	r2, [r3, #4]
	filter->R_measure = R_measure;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	609a      	str	r2, [r3, #8]

	filter->angle = 0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
	filter->bias = 0;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]

	filter->P[0][0] = 0;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
	filter->P[0][1] = 0;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
	filter->P[1][0] = 0;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
	filter->P[1][1] = 0;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

	return;
 80015ee:	bf00      	nop
}
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <autopilot_KalmanUpd>:

//Kalman filter update
float autopilot_KalmanUpd(kalman_TypeDef* filter, float newAngle, float newRate, float dt)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b089      	sub	sp, #36	; 0x24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	ed87 0a02 	vstr	s0, [r7, #8]
 8001606:	edc7 0a01 	vstr	s1, [r7, #4]
 800160a:	ed87 1a00 	vstr	s2, [r7]
	float S;
	float K[2];
	float y;

	filter->rate = newRate - filter->bias;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edd3 7a04 	vldr	s15, [r3, #16]
 8001614:	ed97 7a01 	vldr	s14, [r7, #4]
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	edc3 7a05 	vstr	s15, [r3, #20]
	filter->angle += dt * filter->rate;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7a03 	vldr	s14, [r3, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	edd3 6a05 	vldr	s13, [r3, #20]
 800162e:	edd7 7a00 	vldr	s15, [r7]
 8001632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	edc3 7a03 	vstr	s15, [r3, #12]

	filter->P[0][0] += dt * (dt*filter->P[1][1] - filter->P[0][1] - filter->P[1][0] + filter->Q_angle);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	ed93 7a06 	vldr	s14, [r3, #24]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800164c:	edd7 7a00 	vldr	s15, [r7]
 8001650:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	edd3 7a07 	vldr	s15, [r3, #28]
 800165a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	edd3 7a08 	vldr	s15, [r3, #32]
 8001664:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001672:	edd7 7a00 	vldr	s15, [r7]
 8001676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	edc3 7a06 	vstr	s15, [r3, #24]
	filter->P[0][1] -= dt * filter->P[1][1];
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	ed93 7a07 	vldr	s14, [r3, #28]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001690:	edd7 7a00 	vldr	s15, [r7]
 8001694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	edc3 7a07 	vstr	s15, [r3, #28]
	filter->P[1][0] -= dt * filter->P[1][1];
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80016ae:	edd7 7a00 	vldr	s15, [r7]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	edc3 7a08 	vstr	s15, [r3, #32]
	filter->P[1][1] += filter->Q_bias * dt;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80016cc:	edd7 7a00 	vldr	s15, [r7]
 80016d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	S = filter->P[0][0] + filter->R_measure;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	edc7 7a07 	vstr	s15, [r7, #28]
	K[0] = filter->P[0][0] / S;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	edd3 6a06 	vldr	s13, [r3, #24]
 80016f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80016fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001700:	edc7 7a04 	vstr	s15, [r7, #16]
	K[1] = filter->P[1][0] / S;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	edd3 6a08 	vldr	s13, [r3, #32]
 800170a:	ed97 7a07 	vldr	s14, [r7, #28]
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	edc7 7a05 	vstr	s15, [r7, #20]

	y = newAngle - filter->angle;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	edd3 7a03 	vldr	s15, [r3, #12]
 800171c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	edc7 7a06 	vstr	s15, [r7, #24]
	filter->angle += K[0] * y;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	ed93 7a03 	vldr	s14, [r3, #12]
 800172e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001732:	edd7 7a06 	vldr	s15, [r7, #24]
 8001736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	edc3 7a03 	vstr	s15, [r3, #12]
	filter->bias += K[1] * y;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	ed93 7a04 	vldr	s14, [r3, #16]
 800174a:	edd7 6a05 	vldr	s13, [r7, #20]
 800174e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	edc3 7a04 	vstr	s15, [r3, #16]

	filter->P[0][0] -= K[0] * filter->P[0][0];
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	ed93 7a06 	vldr	s14, [r3, #24]
 8001766:	edd7 6a04 	vldr	s13, [r7, #16]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	edc3 7a06 	vstr	s15, [r3, #24]
	filter->P[0][1] -= K[0] * filter->P[0][1];
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	ed93 7a07 	vldr	s14, [r3, #28]
 8001784:	edd7 6a04 	vldr	s13, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	edd3 7a07 	vldr	s15, [r3, #28]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	edc3 7a07 	vstr	s15, [r3, #28]
	filter->P[1][0] -= K[1] * filter->P[0][0];
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	ed93 7a08 	vldr	s14, [r3, #32]
 80017a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	edc3 7a08 	vstr	s15, [r3, #32]
	filter->P[1][1] -= K[1] * filter->P[0][1];
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80017c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return filter->angle;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	ee07 3a90 	vmov	s15, r3
}
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <autopilot_UpdAngles>:

//Update Pitch Roll angles
void autopilot_UpdAngles()
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
	if( sens_info.state == 4 )
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <autopilot_UpdAngles+0x160>)
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	f040 809d 	bne.w	800193c <autopilot_UpdAngles+0x14c>
	{
		float dt = 0.01;
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <autopilot_UpdAngles+0x164>)
 8001804:	60fb      	str	r3, [r7, #12]

		float roll = atan2(sens_info.accel_y, sens_info.accel_z) * 180/M_PI;
 8001806:	4b52      	ldr	r3, [pc, #328]	; (8001950 <autopilot_UpdAngles+0x160>)
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe50 	bl	80004b0 <__aeabi_f2d>
 8001810:	4604      	mov	r4, r0
 8001812:	460d      	mov	r5, r1
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <autopilot_UpdAngles+0x160>)
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe49 	bl	80004b0 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b11 	vmov	d1, r2, r3
 8001826:	ec45 4b10 	vmov	d0, r4, r5
 800182a:	f014 fc15 	bl	8016058 <atan2>
 800182e:	ec51 0b10 	vmov	r0, r1, d0
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b48      	ldr	r3, [pc, #288]	; (8001958 <autopilot_UpdAngles+0x168>)
 8001838:	f7fe fe92 	bl	8000560 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	a340      	add	r3, pc, #256	; (adr r3, 8001948 <autopilot_UpdAngles+0x158>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe ffb3 	bl	80007b4 <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f933 	bl	8000ac0 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	60bb      	str	r3, [r7, #8]
		float pitch = atan2(-sens_info.accel_x, sqrt(sens_info.accel_y * sens_info.accel_y + sens_info.accel_z * sens_info.accel_z)) * 180/M_PI;
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <autopilot_UpdAngles+0x160>)
 8001860:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001864:	eef1 7a67 	vneg.f32	s15, s15
 8001868:	ee17 3a90 	vmov	r3, s15
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe1f 	bl	80004b0 <__aeabi_f2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <autopilot_UpdAngles+0x160>)
 8001878:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <autopilot_UpdAngles+0x160>)
 800187e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <autopilot_UpdAngles+0x160>)
 8001888:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <autopilot_UpdAngles+0x160>)
 800188e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	ee17 0a90 	vmov	r0, s15
 800189e:	f7fe fe07 	bl	80004b0 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b10 	vmov	d0, r2, r3
 80018aa:	f014 fbd7 	bl	801605c <sqrt>
 80018ae:	eeb0 7a40 	vmov.f32	s14, s0
 80018b2:	eef0 7a60 	vmov.f32	s15, s1
 80018b6:	eeb0 1a47 	vmov.f32	s2, s14
 80018ba:	eef0 1a67 	vmov.f32	s3, s15
 80018be:	ec45 4b10 	vmov	d0, r4, r5
 80018c2:	f014 fbc9 	bl	8016058 <atan2>
 80018c6:	ec51 0b10 	vmov	r0, r1, d0
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <autopilot_UpdAngles+0x168>)
 80018d0:	f7fe fe46 	bl	8000560 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	a31a      	add	r3, pc, #104	; (adr r3, 8001948 <autopilot_UpdAngles+0x158>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe ff67 	bl	80007b4 <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f8e7 	bl	8000ac0 <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	607b      	str	r3, [r7, #4]

		autopilot_info.roll = autopilot_KalmanUpd(&_roll_filter, roll, sens_info.gyro_x, dt);
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <autopilot_UpdAngles+0x160>)
 80018f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018fc:	ed97 1a03 	vldr	s2, [r7, #12]
 8001900:	eef0 0a67 	vmov.f32	s1, s15
 8001904:	ed97 0a02 	vldr	s0, [r7, #8]
 8001908:	4814      	ldr	r0, [pc, #80]	; (800195c <autopilot_UpdAngles+0x16c>)
 800190a:	f7ff fe76 	bl	80015fa <autopilot_KalmanUpd>
 800190e:	eef0 7a40 	vmov.f32	s15, s0
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <autopilot_UpdAngles+0x170>)
 8001914:	edc3 7a08 	vstr	s15, [r3, #32]
		autopilot_info.pitch = autopilot_KalmanUpd(&_pitch_filter, pitch, sens_info.gyro_y, dt);
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <autopilot_UpdAngles+0x160>)
 800191a:	edd3 7a03 	vldr	s15, [r3, #12]
 800191e:	ed97 1a03 	vldr	s2, [r7, #12]
 8001922:	eef0 0a67 	vmov.f32	s1, s15
 8001926:	ed97 0a01 	vldr	s0, [r7, #4]
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <autopilot_UpdAngles+0x174>)
 800192c:	f7ff fe65 	bl	80015fa <autopilot_KalmanUpd>
 8001930:	eef0 7a40 	vmov.f32	s15, s0
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <autopilot_UpdAngles+0x170>)
 8001936:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	}
	return;
 800193a:	bf00      	nop
 800193c:	bf00      	nop
}
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bdb0      	pop	{r4, r5, r7, pc}
 8001944:	f3af 8000 	nop.w
 8001948:	54442d18 	.word	0x54442d18
 800194c:	400921fb 	.word	0x400921fb
 8001950:	20001020 	.word	0x20001020
 8001954:	3c23d70a 	.word	0x3c23d70a
 8001958:	40668000 	.word	0x40668000
 800195c:	200002e8 	.word	0x200002e8
 8001960:	200002ac 	.word	0x200002ac
 8001964:	20000310 	.word	0x20000310

08001968 <autopilot_expRunningAverage>:

float autopilot_expRunningAverage(float newVal)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float filVal = 0.0f;

	if( newVal == 0.0f ){
 8001972:	edd7 7a01 	vldr	s15, [r7, #4]
 8001976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d104      	bne.n	800198a <autopilot_expRunningAverage+0x22>
		filVal = 0.0f;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <autopilot_expRunningAverage+0x88>)
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e025      	b.n	80019d6 <autopilot_expRunningAverage+0x6e>
	}
	else{
		filVal += (newVal - filVal) * TROT_FILTER_KOEF;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <autopilot_expRunningAverage+0x88>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd8e 	bl	80004b0 <__aeabi_f2d>
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <autopilot_expRunningAverage+0x88>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a6:	ee17 0a90 	vmov	r0, s15
 80019aa:	f7fe fd81 	bl	80004b0 <__aeabi_f2d>
 80019ae:	a30e      	add	r3, pc, #56	; (adr r3, 80019e8 <autopilot_expRunningAverage+0x80>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fdd4 	bl	8000560 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fc18 	bl	80001f4 <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f878 	bl	8000ac0 <__aeabi_d2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <autopilot_expRunningAverage+0x88>)
 80019d4:	6013      	str	r3, [r2, #0]
	}

	return filVal;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <autopilot_expRunningAverage+0x88>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	ee07 3a90 	vmov	s15, r3
}
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}
 80019e8:	47ae147b 	.word	0x47ae147b
 80019ec:	3f947ae1 	.word	0x3f947ae1
 80019f0:	200003b0 	.word	0x200003b0

080019f4 <autopilot_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t autopilot_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	69b9      	ldr	r1, [r7, #24]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	1a8a      	subs	r2, r1, r2
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1acb      	subs	r3, r1, r3
 8001a18:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4413      	add	r3, r2
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <autopilot_CalcPID>:

// Function to calculate PID control signal
int32_t autopilot_CalcPID(PID_TypeDef *pid, float setpoint, float current_angle) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a38:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float error = setpoint - current_angle;
 8001a3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	edc7 7a04 	vstr	s15, [r7, #16]
    // Update integral sum
    pid->integral += error;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edc3 7a03 	vstr	s15, [r3, #12]

    // Limit integral sum to avoid integral windup
    if (pid->integral > 100.0) {
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a66:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001b24 <autopilot_CalcPID+0xf8>
 8001a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	dd03      	ble.n	8001a7c <autopilot_CalcPID+0x50>
        pid->integral = 100.0;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <autopilot_CalcPID+0xfc>)
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	e00c      	b.n	8001a96 <autopilot_CalcPID+0x6a>
    } else if (pid->integral < -100.0) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a82:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b2c <autopilot_CalcPID+0x100>
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d502      	bpl.n	8001a96 <autopilot_CalcPID+0x6a>
        pid->integral = -100.0;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <autopilot_CalcPID+0x104>)
 8001a94:	60da      	str	r2, [r3, #12]
    }

    // Calculate PID control signal
    float pid_output = (pid->Kp * error) + (pid->Ki * pid->integral) + (pid->Kd * (error - pid->prev_error));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	edd3 6a02 	vldr	s13, [r3, #8]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ac4:	ed97 6a04 	vldr	s12, [r7, #16]
 8001ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad4:	edc7 7a05 	vstr	s15, [r7, #20]

    // Limit output value between -100 and 100
    if (pid_output > 100.0) {
 8001ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001adc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001b24 <autopilot_CalcPID+0xf8>
 8001ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	dd02      	ble.n	8001af0 <autopilot_CalcPID+0xc4>
        pid_output = 100.0;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <autopilot_CalcPID+0xfc>)
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e00a      	b.n	8001b06 <autopilot_CalcPID+0xda>
    } else if (pid_output < -100.0) {
 8001af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001af4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001b2c <autopilot_CalcPID+0x100>
 8001af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d501      	bpl.n	8001b06 <autopilot_CalcPID+0xda>
        pid_output = -100.0;
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <autopilot_CalcPID+0x104>)
 8001b04:	617b      	str	r3, [r7, #20]
    }

    // Update previous error for the next iteration
    pid->prev_error = error;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	611a      	str	r2, [r3, #16]

    // Convert the result to int32_t and return
    return (int32_t)pid_output;
 8001b0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	42c80000 	.word	0x42c80000
 8001b28:	42c80000 	.word	0x42c80000
 8001b2c:	c2c80000 	.word	0xc2c80000
 8001b30:	c2c80000 	.word	0xc2c80000

08001b34 <cfg_NodeApVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeApVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d821      	bhi.n	8001b8c <cfg_NodeApVarProp+0x58>
 8001b48:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <cfg_NodeApVarProp+0x1c>)
 8001b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4e:	bf00      	nop
 8001b50:	08001b69 	.word	0x08001b69
 8001b54:	08001b6f 	.word	0x08001b6f
 8001b58:	08001b75 	.word	0x08001b75
 8001b5c:	08001b7b 	.word	0x08001b7b
 8001b60:	08001b81 	.word	0x08001b81
 8001b64:	08001b87 	.word	0x08001b87
	{
		case AUTOPILOT_STATE:		str = "State"; break;
 8001b68:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <cfg_NodeApVarProp+0xf0>)
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e010      	b.n	8001b90 <cfg_NodeApVarProp+0x5c>
		case AUTOPILOT_ARMED:		str = "Armed"; break;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <cfg_NodeApVarProp+0xf4>)
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e00d      	b.n	8001b90 <cfg_NodeApVarProp+0x5c>
		case AUTOPILOT_ROLL:		str = "Roll"; break;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <cfg_NodeApVarProp+0xf8>)
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <cfg_NodeApVarProp+0x5c>
		case AUTOPILOT_PITCH:		str = "Pitch"; break;
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <cfg_NodeApVarProp+0xfc>)
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e007      	b.n	8001b90 <cfg_NodeApVarProp+0x5c>
		case AUTOPILOT_TAR_ROLL:	str = "Target roll"; break;
 8001b80:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <cfg_NodeApVarProp+0x100>)
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e004      	b.n	8001b90 <cfg_NodeApVarProp+0x5c>
		case AUTOPILOT_TAR_PITCH:	str = "Target pitch"; break;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <cfg_NodeApVarProp+0x104>)
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e001      	b.n	8001b90 <cfg_NodeApVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e042      	b.n	8001c16 <cfg_NodeApVarProp+0xe2>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00f      	beq.n	8001bb6 <cfg_NodeApVarProp+0x82>
 8001b96:	e007      	b.n	8001ba8 <cfg_NodeApVarProp+0x74>
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	1c53      	adds	r3, r2, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f3      	bne.n	8001b98 <cfg_NodeApVarProp+0x64>
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d02b      	beq.n	8001c14 <cfg_NodeApVarProp+0xe0>
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d826      	bhi.n	8001c10 <cfg_NodeApVarProp+0xdc>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <cfg_NodeApVarProp+0x94>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001be1 	.word	0x08001be1
 8001bcc:	08001be9 	.word	0x08001be9
 8001bd0:	08001bf1 	.word	0x08001bf1
 8001bd4:	08001bf9 	.word	0x08001bf9
 8001bd8:	08001c01 	.word	0x08001c01
 8001bdc:	08001c09 	.word	0x08001c09
	{
		case AUTOPILOT_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	e015      	b.n	8001c14 <cfg_NodeApVarProp+0xe0>
		case AUTOPILOT_ARMED:		*prop = CFG_VAR_TYPE_BOOL; break;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	e011      	b.n	8001c14 <cfg_NodeApVarProp+0xe0>
		case AUTOPILOT_ROLL:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2214      	movs	r2, #20
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	e00d      	b.n	8001c14 <cfg_NodeApVarProp+0xe0>
		case AUTOPILOT_PITCH:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2214      	movs	r2, #20
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	e009      	b.n	8001c14 <cfg_NodeApVarProp+0xe0>
		case AUTOPILOT_TAR_ROLL:	*prop = CFG_VAR_TYPE_REAL; break;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	e005      	b.n	8001c14 <cfg_NodeApVarProp+0xe0>
		case AUTOPILOT_TAR_PITCH:	*prop = CFG_VAR_TYPE_REAL; break;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	e001      	b.n	8001c14 <cfg_NodeApVarProp+0xe0>
		default: return CFG_ERROR_VARID;
 8001c10:	2302      	movs	r3, #2
 8001c12:	e000      	b.n	8001c16 <cfg_NodeApVarProp+0xe2>
	}
	return CFG_ERROR_NONE;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	08016770 	.word	0x08016770
 8001c28:	08016778 	.word	0x08016778
 8001c2c:	08016780 	.word	0x08016780
 8001c30:	08016788 	.word	0x08016788
 8001c34:	08016790 	.word	0x08016790
 8001c38:	0801679c 	.word	0x0801679c

08001c3c <cfg_NodeApVarGet>:

uint16_t cfg_NodeApVarGet(uint16_t varid, void *value)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d036      	beq.n	8001cbc <cfg_NodeApVarGet+0x80>
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d831      	bhi.n	8001cb8 <cfg_NodeApVarGet+0x7c>
 8001c54:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <cfg_NodeApVarGet+0x20>)
 8001c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5a:	bf00      	nop
 8001c5c:	08001c75 	.word	0x08001c75
 8001c60:	08001c83 	.word	0x08001c83
 8001c64:	08001c91 	.word	0x08001c91
 8001c68:	08001c9b 	.word	0x08001c9b
 8001c6c:	08001ca5 	.word	0x08001ca5
 8001c70:	08001caf 	.word	0x08001caf
	{
		case AUTOPILOT_STATE:		*(uint32_t*)value = (uint32_t)autopilot_info.state; break;
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <cfg_NodeApVarGet+0x90>)
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e01c      	b.n	8001cbc <cfg_NodeApVarGet+0x80>
		case AUTOPILOT_ARMED:		*(uint32_t*)value = (uint32_t)autopilot_info.armed_flag; break;
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <cfg_NodeApVarGet+0x90>)
 8001c84:	7e5b      	ldrb	r3, [r3, #25]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e015      	b.n	8001cbc <cfg_NodeApVarGet+0x80>
		case AUTOPILOT_ROLL:		*(float*)value = autopilot_info.roll; break;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <cfg_NodeApVarGet+0x90>)
 8001c92:	6a1a      	ldr	r2, [r3, #32]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e010      	b.n	8001cbc <cfg_NodeApVarGet+0x80>
		case AUTOPILOT_PITCH:		*(float*)value = autopilot_info.pitch; break;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <cfg_NodeApVarGet+0x90>)
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <cfg_NodeApVarGet+0x80>
		case AUTOPILOT_TAR_ROLL:	*(float*)value = autopilot_info.tar_roll; break;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <cfg_NodeApVarGet+0x90>)
 8001ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e006      	b.n	8001cbc <cfg_NodeApVarGet+0x80>
		case AUTOPILOT_TAR_PITCH:	*(float*)value = autopilot_info.tar_pitch; break;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <cfg_NodeApVarGet+0x90>)
 8001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e001      	b.n	8001cbc <cfg_NodeApVarGet+0x80>
		default: return CFG_ERROR_VARID;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e000      	b.n	8001cbe <cfg_NodeApVarGet+0x82>
	}
	return CFG_ERROR_NONE;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	200002ac 	.word	0x200002ac

08001cd0 <cfg_NodeApVarSet>:

uint16_t cfg_NodeApVarSet(uint16_t varid, void *value)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02a      	beq.n	8001d38 <cfg_NodeApVarSet+0x68>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d825      	bhi.n	8001d34 <cfg_NodeApVarSet+0x64>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <cfg_NodeApVarSet+0x20>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d15 	.word	0x08001d15
 8001cf8:	08001d35 	.word	0x08001d35
 8001cfc:	08001d35 	.word	0x08001d35
 8001d00:	08001d21 	.word	0x08001d21
 8001d04:	08001d2b 	.word	0x08001d2b
	{
		case AUTOPILOT_STATE:		autopilot_info.state = (uint8_t)*(uint32_t*)value; break;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <cfg_NodeApVarSet+0x78>)
 8001d10:	761a      	strb	r2, [r3, #24]
 8001d12:	e011      	b.n	8001d38 <cfg_NodeApVarSet+0x68>
		case AUTOPILOT_ARMED:		autopilot_info.armed_flag = (uint8_t)*(uint32_t*)value; break;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <cfg_NodeApVarSet+0x78>)
 8001d1c:	765a      	strb	r2, [r3, #25]
 8001d1e:	e00b      	b.n	8001d38 <cfg_NodeApVarSet+0x68>
		case AUTOPILOT_TAR_ROLL:	autopilot_info.tar_roll = *(float*)value; break;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <cfg_NodeApVarSet+0x78>)
 8001d26:	6293      	str	r3, [r2, #40]	; 0x28
 8001d28:	e006      	b.n	8001d38 <cfg_NodeApVarSet+0x68>
		case AUTOPILOT_TAR_PITCH:	autopilot_info.tar_pitch = *(float*)value; break;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <cfg_NodeApVarSet+0x78>)
 8001d30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d32:	e001      	b.n	8001d38 <cfg_NodeApVarSet+0x68>
		default: return CFG_ERROR_VARID;
 8001d34:	2302      	movs	r3, #2
 8001d36:	e000      	b.n	8001d3a <cfg_NodeApVarSet+0x6a>
	}
	return CFG_ERROR_NONE;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	200002ac 	.word	0x200002ac

08001d4c <cfg_NodeRollChVarProp>:

uint16_t cfg_NodeRollChVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d81c      	bhi.n	8001d9a <cfg_NodeRollChVarProp+0x4e>
 8001d60:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <cfg_NodeRollChVarProp+0x1c>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d7d 	.word	0x08001d7d
 8001d6c:	08001d83 	.word	0x08001d83
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d8f 	.word	0x08001d8f
 8001d78:	08001d95 	.word	0x08001d95
	{
		case ROLLCH_P_COEF:		str = "P coef"; break;
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <cfg_NodeRollChVarProp+0xdc>)
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e00d      	b.n	8001d9e <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_I_COEF:		str = "I coef"; break;
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <cfg_NodeRollChVarProp+0xe0>)
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e00a      	b.n	8001d9e <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_D_COEF:		str = "D coef"; break;
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <cfg_NodeRollChVarProp+0xe4>)
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e007      	b.n	8001d9e <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_I_VAL:		str = "I value"; break;
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <cfg_NodeRollChVarProp+0xe8>)
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e004      	b.n	8001d9e <cfg_NodeRollChVarProp+0x52>
		case ROLLCH_OUTPUT:		str = "Output value"; break;
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <cfg_NodeRollChVarProp+0xec>)
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e001      	b.n	8001d9e <cfg_NodeRollChVarProp+0x52>
		default: return CFG_ERROR_VARID;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e03d      	b.n	8001e1a <cfg_NodeRollChVarProp+0xce>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <cfg_NodeRollChVarProp+0x78>
 8001da4:	e007      	b.n	8001db6 <cfg_NodeRollChVarProp+0x6a>
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c59      	adds	r1, r3, #1
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f3      	bne.n	8001da6 <cfg_NodeRollChVarProp+0x5a>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d026      	beq.n	8001e18 <cfg_NodeRollChVarProp+0xcc>
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d821      	bhi.n	8001e14 <cfg_NodeRollChVarProp+0xc8>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <cfg_NodeRollChVarProp+0x8c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001ded 	.word	0x08001ded
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001dfd 	.word	0x08001dfd
 8001de4:	08001e05 	.word	0x08001e05
 8001de8:	08001e0d 	.word	0x08001e0d
	{
		case ROLLCH_P_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	e011      	b.n	8001e18 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_I_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	e00d      	b.n	8001e18 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_D_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	e009      	b.n	8001e18 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_I_VAL:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2214      	movs	r2, #20
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	e005      	b.n	8001e18 <cfg_NodeRollChVarProp+0xcc>
		case ROLLCH_OUTPUT:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2211      	movs	r2, #17
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	e001      	b.n	8001e18 <cfg_NodeRollChVarProp+0xcc>
		default: return CFG_ERROR_VARID;
 8001e14:	2302      	movs	r3, #2
 8001e16:	e000      	b.n	8001e1a <cfg_NodeRollChVarProp+0xce>
	}
	return CFG_ERROR_NONE;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	080167ac 	.word	0x080167ac
 8001e2c:	080167b4 	.word	0x080167b4
 8001e30:	080167bc 	.word	0x080167bc
 8001e34:	080167c4 	.word	0x080167c4
 8001e38:	080167cc 	.word	0x080167cc

08001e3c <cfg_NodeRollChVarGet>:

uint16_t cfg_NodeRollChVarGet(uint16_t varid, void *value)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d02b      	beq.n	8001ea6 <cfg_NodeRollChVarGet+0x6a>
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d826      	bhi.n	8001ea2 <cfg_NodeRollChVarGet+0x66>
 8001e54:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <cfg_NodeRollChVarGet+0x20>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	08001e71 	.word	0x08001e71
 8001e60:	08001e7b 	.word	0x08001e7b
 8001e64:	08001e85 	.word	0x08001e85
 8001e68:	08001e8f 	.word	0x08001e8f
 8001e6c:	08001e99 	.word	0x08001e99
	{
		case ROLLCH_P_COEF:		*(float*)value = _roll_pid.Kp; break;
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <cfg_NodeRollChVarGet+0x78>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e015      	b.n	8001ea6 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_I_COEF:		*(float*)value = _roll_pid.Ki; break;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <cfg_NodeRollChVarGet+0x78>)
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e010      	b.n	8001ea6 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_D_COEF:		*(float*)value = _roll_pid.Kd; break;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <cfg_NodeRollChVarGet+0x78>)
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e00b      	b.n	8001ea6 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_I_VAL:		*(float*)value = _roll_pid.integral; break;
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <cfg_NodeRollChVarGet+0x78>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e006      	b.n	8001ea6 <cfg_NodeRollChVarGet+0x6a>
		case ROLLCH_OUTPUT:		*(int32_t*)value = _roll_pid.output; break;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <cfg_NodeRollChVarGet+0x78>)
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e001      	b.n	8001ea6 <cfg_NodeRollChVarGet+0x6a>
		default: return CFG_ERROR_VARID;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e000      	b.n	8001ea8 <cfg_NodeRollChVarGet+0x6c>
	}
	return CFG_ERROR_NONE;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	20000338 	.word	0x20000338

08001eb8 <cfg_NodeRollChVarSet>:

uint16_t cfg_NodeRollChVarSet(uint16_t varid, void *value)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01a      	beq.n	8001f00 <cfg_NodeRollChVarSet+0x48>
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d010      	beq.n	8001ef2 <cfg_NodeRollChVarSet+0x3a>
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	dc13      	bgt.n	8001efc <cfg_NodeRollChVarSet+0x44>
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <cfg_NodeRollChVarSet+0x26>
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d005      	beq.n	8001ee8 <cfg_NodeRollChVarSet+0x30>
 8001edc:	e00e      	b.n	8001efc <cfg_NodeRollChVarSet+0x44>
	{
		case ROLLCH_P_COEF:		_roll_pid.Kp = *(float*)value; break;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <cfg_NodeRollChVarSet+0x58>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <cfg_NodeRollChVarSet+0x48>
		case ROLLCH_I_COEF:		_roll_pid.Ki = *(float*)value; break;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <cfg_NodeRollChVarSet+0x58>)
 8001eee:	6053      	str	r3, [r2, #4]
 8001ef0:	e006      	b.n	8001f00 <cfg_NodeRollChVarSet+0x48>
		case ROLLCH_D_COEF:		_roll_pid.Kd = *(float*)value; break;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <cfg_NodeRollChVarSet+0x58>)
 8001ef8:	6093      	str	r3, [r2, #8]
 8001efa:	e001      	b.n	8001f00 <cfg_NodeRollChVarSet+0x48>
		default: return CFG_ERROR_VARID;
 8001efc:	2302      	movs	r3, #2
 8001efe:	e000      	b.n	8001f02 <cfg_NodeRollChVarSet+0x4a>
	}
	return CFG_ERROR_NONE;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000338 	.word	0x20000338

08001f14 <cfg_NodePitchChVarProp>:

uint16_t cfg_NodePitchChVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d81c      	bhi.n	8001f62 <cfg_NodePitchChVarProp+0x4e>
 8001f28:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <cfg_NodePitchChVarProp+0x1c>)
 8001f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2e:	bf00      	nop
 8001f30:	08001f45 	.word	0x08001f45
 8001f34:	08001f4b 	.word	0x08001f4b
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f57 	.word	0x08001f57
 8001f40:	08001f5d 	.word	0x08001f5d
	{
		case PITCHCH_P_COEF:		str = "P coef"; break;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <cfg_NodePitchChVarProp+0xdc>)
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00d      	b.n	8001f66 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_I_COEF:		str = "I coef"; break;
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <cfg_NodePitchChVarProp+0xe0>)
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e00a      	b.n	8001f66 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_D_COEF:		str = "D coef"; break;
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <cfg_NodePitchChVarProp+0xe4>)
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e007      	b.n	8001f66 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_I_VAL:			str = "I value"; break;
 8001f56:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <cfg_NodePitchChVarProp+0xe8>)
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e004      	b.n	8001f66 <cfg_NodePitchChVarProp+0x52>
		case PITCHCH_OUTPUT:		str = "Output value"; break;
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <cfg_NodePitchChVarProp+0xec>)
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e001      	b.n	8001f66 <cfg_NodePitchChVarProp+0x52>
		default: return CFG_ERROR_VARID;
 8001f62:	2302      	movs	r3, #2
 8001f64:	e03d      	b.n	8001fe2 <cfg_NodePitchChVarProp+0xce>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00f      	beq.n	8001f8c <cfg_NodePitchChVarProp+0x78>
 8001f6c:	e007      	b.n	8001f7e <cfg_NodePitchChVarProp+0x6a>
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	1c53      	adds	r3, r2, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f3      	bne.n	8001f6e <cfg_NodePitchChVarProp+0x5a>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d026      	beq.n	8001fe0 <cfg_NodePitchChVarProp+0xcc>
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d821      	bhi.n	8001fdc <cfg_NodePitchChVarProp+0xc8>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <cfg_NodePitchChVarProp+0x8c>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fbd 	.word	0x08001fbd
 8001fa8:	08001fc5 	.word	0x08001fc5
 8001fac:	08001fcd 	.word	0x08001fcd
 8001fb0:	08001fd5 	.word	0x08001fd5
	{
		case PITCHCH_P_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	e011      	b.n	8001fe0 <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_I_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	e00d      	b.n	8001fe0 <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_D_COEF:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_CONST; break;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e009      	b.n	8001fe0 <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_I_VAL:			*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2214      	movs	r2, #20
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	e005      	b.n	8001fe0 <cfg_NodePitchChVarProp+0xcc>
		case PITCHCH_OUTPUT:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2211      	movs	r2, #17
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	e001      	b.n	8001fe0 <cfg_NodePitchChVarProp+0xcc>
		default: return CFG_ERROR_VARID;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e000      	b.n	8001fe2 <cfg_NodePitchChVarProp+0xce>
	}
	return CFG_ERROR_NONE;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	080167ac 	.word	0x080167ac
 8001ff4:	080167b4 	.word	0x080167b4
 8001ff8:	080167bc 	.word	0x080167bc
 8001ffc:	080167c4 	.word	0x080167c4
 8002000:	080167cc 	.word	0x080167cc

08002004 <cfg_NodePitchChVarGet>:

uint16_t cfg_NodePitchChVarGet(uint16_t varid, void *value)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d02b      	beq.n	800206e <cfg_NodePitchChVarGet+0x6a>
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d826      	bhi.n	800206a <cfg_NodePitchChVarGet+0x66>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <cfg_NodePitchChVarGet+0x20>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002039 	.word	0x08002039
 8002028:	08002043 	.word	0x08002043
 800202c:	0800204d 	.word	0x0800204d
 8002030:	08002057 	.word	0x08002057
 8002034:	08002061 	.word	0x08002061
	{
		case PITCHCH_P_COEF:		*(float*)value = _pitch_pid.Kp; break;
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <cfg_NodePitchChVarGet+0x78>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e015      	b.n	800206e <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_I_COEF:		*(float*)value = _pitch_pid.Ki; break;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <cfg_NodePitchChVarGet+0x78>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e010      	b.n	800206e <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_D_COEF:		*(float*)value = _pitch_pid.Kd; break;
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <cfg_NodePitchChVarGet+0x78>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e00b      	b.n	800206e <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_I_VAL:			*(float*)value = _pitch_pid.integral; break;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <cfg_NodePitchChVarGet+0x78>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e006      	b.n	800206e <cfg_NodePitchChVarGet+0x6a>
		case PITCHCH_OUTPUT:		*(int32_t*)value = _pitch_pid.output; break;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <cfg_NodePitchChVarGet+0x78>)
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e001      	b.n	800206e <cfg_NodePitchChVarGet+0x6a>
		default: return CFG_ERROR_VARID;
 800206a:	2302      	movs	r3, #2
 800206c:	e000      	b.n	8002070 <cfg_NodePitchChVarGet+0x6c>
	}
	return CFG_ERROR_NONE;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000350 	.word	0x20000350

08002080 <cfg_NodePitchChVarSet>:

uint16_t cfg_NodePitchChVarSet(uint16_t varid, void *value)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01a      	beq.n	80020c8 <cfg_NodePitchChVarSet+0x48>
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d010      	beq.n	80020ba <cfg_NodePitchChVarSet+0x3a>
 8002098:	2b02      	cmp	r3, #2
 800209a:	dc13      	bgt.n	80020c4 <cfg_NodePitchChVarSet+0x44>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <cfg_NodePitchChVarSet+0x26>
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <cfg_NodePitchChVarSet+0x30>
 80020a4:	e00e      	b.n	80020c4 <cfg_NodePitchChVarSet+0x44>
	{
		case PITCHCH_P_COEF:		_pitch_pid.Kp = *(float*)value; break;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <cfg_NodePitchChVarSet+0x58>)
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <cfg_NodePitchChVarSet+0x48>
		case PITCHCH_I_COEF:		_pitch_pid.Ki = *(float*)value; break;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <cfg_NodePitchChVarSet+0x58>)
 80020b6:	6053      	str	r3, [r2, #4]
 80020b8:	e006      	b.n	80020c8 <cfg_NodePitchChVarSet+0x48>
		case PITCHCH_D_COEF:		_pitch_pid.Kd = *(float*)value; break;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <cfg_NodePitchChVarSet+0x58>)
 80020c0:	6093      	str	r3, [r2, #8]
 80020c2:	e001      	b.n	80020c8 <cfg_NodePitchChVarSet+0x48>
		default: return CFG_ERROR_VARID;
 80020c4:	2302      	movs	r3, #2
 80020c6:	e000      	b.n	80020ca <cfg_NodePitchChVarSet+0x4a>
	}
	return CFG_ERROR_NONE;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000350 	.word	0x20000350

080020dc <battery_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void battery_Timer(uint32_t res)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	battery_time_counter += res;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <battery_Timer+0x34>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	4a08      	ldr	r2, [pc, #32]	; (8002110 <battery_Timer+0x34>)
 80020ee:	6013      	str	r3, [r2, #0]

	if( battery_info.timer ){
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <battery_Timer+0x38>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <battery_Timer+0x28>
		battery_info.timer--;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <battery_Timer+0x38>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <battery_Timer+0x38>)
 8002100:	6013      	str	r3, [r2, #0]
	}

	return;
 8002102:	bf00      	nop
 8002104:	bf00      	nop
}
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	200003e0 	.word	0x200003e0
 8002114:	200003b4 	.word	0x200003b4

08002118 <battery_InitTask>:
  * @brief  Init the battery interface
  * @param  None
  * @retval 1 if success, 0 if failed
  */
void battery_InitTask(uint32_t battery_filtered_measure_period)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
#ifdef NO_BATTERY
	return 1;
#endif //NO_BATTERY

	// set minimum of 100mSec, just to be safe
	if ( battery_filtered_measure_period < 100 ){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b63      	cmp	r3, #99	; 0x63
 8002124:	d801      	bhi.n	800212a <battery_InitTask+0x12>
		battery_filtered_measure_period = 100;
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	607b      	str	r3, [r7, #4]
	}

	battery_info.battery_filtered_measure_period = battery_filtered_measure_period;
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <battery_InitTask+0x34>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6293      	str	r3, [r2, #40]	; 0x28
	battery_info.timer = 500;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <battery_InitTask+0x34>)
 8002132:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002136:	601a      	str	r2, [r3, #0]
	battery_info.init_flag = 1;
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <battery_InitTask+0x34>)
 800213a:	2201      	movs	r2, #1
 800213c:	711a      	strb	r2, [r3, #4]

	return;
 800213e:	bf00      	nop
}
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200003b4 	.word	0x200003b4

08002150 <battery_Task>:
  * @brief  called from the main loop
  * @param  None
  * @retval None
  */
void battery_Task()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	// enter only if there is new analog reading of the battery voltage, else there is not reason to make any thing
	if ( battery_info.battery_volatge_updated_flag == 1)
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <battery_Task+0xd8>)
 8002158:	7b5b      	ldrb	r3, [r3, #13]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d15e      	bne.n	800221e <battery_Task+0xce>
	{
		battery_info.battery_volatge_updated_flag = 0;
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <battery_Task+0xd8>)
 8002162:	2200      	movs	r2, #0
 8002164:	735a      	strb	r2, [r3, #13]
		//Initialization - 1st fill the filters array
		//done only once at the first time there is a battery voltage reading
		if( battery_info.init_flag == 1)
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <battery_Task+0xd8>)
 8002168:	791b      	ldrb	r3, [r3, #4]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d109      	bne.n	8002184 <battery_Task+0x34>
		{
			battery_filterInit(battery_info.battery_volatge);
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <battery_Task+0xd8>)
 8002172:	89db      	ldrh	r3, [r3, #14]
 8002174:	b29b      	uxth	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f858 	bl	800222c <battery_filterInit>
			battery_info.init_flag = 0;
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <battery_Task+0xd8>)
 800217e:	2200      	movs	r2, #0
 8002180:	711a      	strb	r2, [r3, #4]
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
		}
	}

	return;
 8002182:	e04c      	b.n	800221e <battery_Task+0xce>
		else if( battery_info.timer == 0 ) // need to sample
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <battery_Task+0xd8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d148      	bne.n	800221e <battery_Task+0xce>
			battery_info.timer = battery_info.battery_filtered_measure_period;
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <battery_Task+0xd8>)
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <battery_Task+0xd8>)
 8002192:	6013      	str	r3, [r2, #0]
			battery_info.battery_filter_step = (battery_info.battery_filter_step + 1) % BATTERY_FILT_MEAS_NUM;
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <battery_Task+0xd8>)
 8002196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	425a      	negs	r2, r3
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	f002 0207 	and.w	r2, r2, #7
 80021a8:	bf58      	it	pl
 80021aa:	4253      	negpl	r3, r2
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <battery_Task+0xd8>)
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			battery_info.battery_meas_arr[battery_info.battery_filter_step] = battery_info.battery_volatge;
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <battery_Task+0xd8>)
 80021b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <battery_Task+0xd8>)
 80021c0:	89db      	ldrh	r3, [r3, #14]
 80021c2:	b299      	uxth	r1, r3
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <battery_Task+0xd8>)
 80021c6:	f100 0308 	add.w	r3, r0, #8
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	460a      	mov	r2, r1
 80021d0:	809a      	strh	r2, [r3, #4]
			uint32_t meas_sum = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80021d6:	2300      	movs	r3, #0
 80021d8:	70fb      	strb	r3, [r7, #3]
 80021da:	e00d      	b.n	80021f8 <battery_Task+0xa8>
				meas_sum += (uint32_t)battery_info.battery_meas_arr[i];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <battery_Task+0xd8>)
 80021e0:	3308      	adds	r3, #8
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	889b      	ldrh	r3, [r3, #4]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	607b      	str	r3, [r7, #4]
			for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	3301      	adds	r3, #1
 80021f6:	70fb      	strb	r3, [r7, #3]
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	d9ee      	bls.n	80021dc <battery_Task+0x8c>
			battery_info.filtered_voltage = (uint16_t)(meas_sum / BATTERY_FILT_MEAS_NUM);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <battery_Task+0xd8>)
 8002206:	821a      	strh	r2, [r3, #16]
			battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <battery_Task+0xd8>)
 800220a:	8a1b      	ldrh	r3, [r3, #16]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f838 	bl	8002284 <battery_calcPerc>
 8002214:	4603      	mov	r3, r0
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <battery_Task+0xd8>)
 800221a:	749a      	strb	r2, [r3, #18]
	return;
 800221c:	bf00      	nop
 800221e:	bf00      	nop
}
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200003b4 	.word	0x200003b4

0800222c <battery_filterInit>:
  * @brief  function to init the battery filter array so it will work as expected in the first power up.
  * @param  val - battery voltage to init the filter array value.
  * @retval None
  */
static void battery_filterInit(uint16_t val)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return;
#endif //NO_BATTERY

	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e009      	b.n	8002250 <battery_filterInit+0x24>
		battery_info.battery_meas_arr[i] = val;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <battery_filterInit+0x54>)
 8002240:	3308      	adds	r3, #8
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	809a      	strh	r2, [r3, #4]
	for( uint8_t i = 0; i < BATTERY_FILT_MEAS_NUM; i++ ){
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d9f2      	bls.n	800223c <battery_filterInit+0x10>
	}

	battery_info.battery_filter_step = 0;
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <battery_filterInit+0x54>)
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	battery_info.filtered_voltage = val;
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <battery_filterInit+0x54>)
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	8213      	strh	r3, [r2, #16]
	battery_info.charge_percent = battery_calcPerc(battery_info.filtered_voltage);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <battery_filterInit+0x54>)
 8002266:	8a1b      	ldrh	r3, [r3, #16]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f80a 	bl	8002284 <battery_calcPerc>
 8002270:	4603      	mov	r3, r0
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <battery_filterInit+0x54>)
 8002276:	749a      	strb	r2, [r3, #18]

	return;
 8002278:	bf00      	nop
}
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200003b4 	.word	0x200003b4

08002284 <battery_calcPerc>:
  * @brief  function to convert from battery mVolt to battery charge percentages
  * @param  m_volt - battery voltage in mVolt.
  * @retval None
  */
uint16_t battery_calcPerc(uint16_t m_volt)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af02      	add	r7, sp, #8
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
#ifdef NO_BATTERY
	return 100;
#endif //NO_BATTERY

	uint8_t i = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
	uint16_t o_perc = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	81bb      	strh	r3, [r7, #12]

	// minimum voltage
	if( m_volt <= _battery_perc_lut[0][0] ){
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <battery_calcPerc+0xb0>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	429a      	cmp	r2, r3
 800229e:	d802      	bhi.n	80022a6 <battery_calcPerc+0x22>
		return _battery_perc_lut[0][1];
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <battery_calcPerc+0xb0>)
 80022a2:	885b      	ldrh	r3, [r3, #2]
 80022a4:	e041      	b.n	800232a <battery_calcPerc+0xa6>
	}

	// maximum voltage
	if( m_volt >= _battery_perc_lut[BATTERY_LUT_LEN - 1][0] ){
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <battery_calcPerc+0xb0>)
 80022a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d302      	bcc.n	80022b6 <battery_calcPerc+0x32>
		return _battery_perc_lut[BATTERY_LUT_LEN - 1][1];
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <battery_calcPerc+0xb0>)
 80022b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b4:	e039      	b.n	800232a <battery_calcPerc+0xa6>
	}

	// scan the look up table for needed voltage
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e011      	b.n	80022e0 <battery_calcPerc+0x5c>
	{
		if( (m_volt >= _battery_perc_lut[i][0]) && (m_volt <= _battery_perc_lut[i + 1][0]) )
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <battery_calcPerc+0xb0>)
 80022c0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d307      	bcc.n	80022da <battery_calcPerc+0x56>
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a19      	ldr	r2, [pc, #100]	; (8002334 <battery_calcPerc+0xb0>)
 80022d0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d906      	bls.n	80022e8 <battery_calcPerc+0x64>
	for( i = 0; i < BATTERY_LUT_LEN - 1; i++ )
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	3301      	adds	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d9ea      	bls.n	80022bc <battery_calcPerc+0x38>
 80022e6:	e000      	b.n	80022ea <battery_calcPerc+0x66>
		{
			break;
 80022e8:	bf00      	nop
		}
	}

	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 80022ea:	88f8      	ldrh	r0, [r7, #6]
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <battery_calcPerc+0xb0>)
 80022f0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80022f4:	4619      	mov	r1, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <battery_calcPerc+0xb0>)
 80022fc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 8002300:	461c      	mov	r4, r3
									(int32_t)_battery_perc_lut[i + 1][0], (int32_t)_battery_perc_lut[i][1],
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <battery_calcPerc+0xb0>)
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 800230c:	461d      	mov	r5, r3
									(int32_t)_battery_perc_lut[i + 1][1]);
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	3301      	adds	r3, #1
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <battery_calcPerc+0xb0>)
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	885b      	ldrh	r3, [r3, #2]
	o_perc = (uint16_t)analog_map((int32_t)m_volt, (int32_t)_battery_perc_lut[i][0],
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	462b      	mov	r3, r5
 800231e:	4622      	mov	r2, r4
 8002320:	f000 f80a 	bl	8002338 <analog_map>
 8002324:	4603      	mov	r3, r0
 8002326:	81bb      	strh	r3, [r7, #12]

	return o_perc;
 8002328:	89bb      	ldrh	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bdb0      	pop	{r4, r5, r7, pc}
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000

08002338 <analog_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
static int32_t analog_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	1a8a      	subs	r2, r1, r2
 8002352:	fb03 f202 	mul.w	r2, r3, r2
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1acb      	subs	r3, r1, r3
 800235c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4413      	add	r3, r2
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <cfg_NodeBatVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeBatVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d00c      	beq.n	800239e <cfg_NodeBatVarProp+0x2e>
 8002384:	2b02      	cmp	r3, #2
 8002386:	dc0d      	bgt.n	80023a4 <cfg_NodeBatVarProp+0x34>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <cfg_NodeBatVarProp+0x22>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d003      	beq.n	8002398 <cfg_NodeBatVarProp+0x28>
 8002390:	e008      	b.n	80023a4 <cfg_NodeBatVarProp+0x34>
	{
		case BAT_VOLTAGE:			str = "Voltage"; break;
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <cfg_NodeBatVarProp+0xa4>)
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e007      	b.n	80023a8 <cfg_NodeBatVarProp+0x38>
		case BAT_FILTERED_VOLTAGE:	str = "Filtered voltage"; break;
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <cfg_NodeBatVarProp+0xa8>)
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e004      	b.n	80023a8 <cfg_NodeBatVarProp+0x38>
		case BAT_CHG_PERC:			str = "Charge (%)"; break;
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <cfg_NodeBatVarProp+0xac>)
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e001      	b.n	80023a8 <cfg_NodeBatVarProp+0x38>
		default: return CFG_ERROR_VARID;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e02e      	b.n	8002406 <cfg_NodeBatVarProp+0x96>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00f      	beq.n	80023ce <cfg_NodeBatVarProp+0x5e>
 80023ae:	e007      	b.n	80023c0 <cfg_NodeBatVarProp+0x50>
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	1c53      	adds	r3, r2, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f3      	bne.n	80023b0 <cfg_NodeBatVarProp+0x40>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d017      	beq.n	8002404 <cfg_NodeBatVarProp+0x94>
 80023d4:	89fb      	ldrh	r3, [r7, #14]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d00e      	beq.n	80023f8 <cfg_NodeBatVarProp+0x88>
 80023da:	2b02      	cmp	r3, #2
 80023dc:	dc10      	bgt.n	8002400 <cfg_NodeBatVarProp+0x90>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <cfg_NodeBatVarProp+0x78>
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d004      	beq.n	80023f0 <cfg_NodeBatVarProp+0x80>
 80023e6:	e00b      	b.n	8002400 <cfg_NodeBatVarProp+0x90>
	{
		case BAT_VOLTAGE:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2212      	movs	r2, #18
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	e009      	b.n	8002404 <cfg_NodeBatVarProp+0x94>
		case BAT_FILTERED_VOLTAGE:	*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_READONLY; break;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2212      	movs	r2, #18
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	e005      	b.n	8002404 <cfg_NodeBatVarProp+0x94>
		case BAT_CHG_PERC:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2212      	movs	r2, #18
 80023fc:	801a      	strh	r2, [r3, #0]
 80023fe:	e001      	b.n	8002404 <cfg_NodeBatVarProp+0x94>
		default: return CFG_ERROR_VARID;
 8002400:	2302      	movs	r3, #2
 8002402:	e000      	b.n	8002406 <cfg_NodeBatVarProp+0x96>
	}
	return CFG_ERROR_NONE;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	080167dc 	.word	0x080167dc
 8002418:	080167e4 	.word	0x080167e4
 800241c:	080167f8 	.word	0x080167f8

08002420 <cfg_NodeBatVarGet>:

uint16_t cfg_NodeBatVarGet(uint16_t varid, void *value)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d020      	beq.n	8002474 <cfg_NodeBatVarGet+0x54>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d014      	beq.n	8002462 <cfg_NodeBatVarGet+0x42>
 8002438:	2b02      	cmp	r3, #2
 800243a:	dc19      	bgt.n	8002470 <cfg_NodeBatVarGet+0x50>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <cfg_NodeBatVarGet+0x26>
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <cfg_NodeBatVarGet+0x34>
 8002444:	e014      	b.n	8002470 <cfg_NodeBatVarGet+0x50>
	{
		case BAT_VOLTAGE: 			*(uint32_t*)value = (uint32_t)battery_info.battery_volatge; break;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <cfg_NodeBatVarGet+0x64>)
 8002448:	89db      	ldrh	r3, [r3, #14]
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e00f      	b.n	8002474 <cfg_NodeBatVarGet+0x54>
		case BAT_FILTERED_VOLTAGE: 	*(uint32_t*)value = (uint32_t)battery_info.filtered_voltage; break;
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <cfg_NodeBatVarGet+0x64>)
 8002456:	8a1b      	ldrh	r3, [r3, #16]
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e008      	b.n	8002474 <cfg_NodeBatVarGet+0x54>
		case BAT_CHG_PERC: 			*(uint32_t*)value = (uint32_t)battery_info.charge_percent; break;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <cfg_NodeBatVarGet+0x64>)
 8002464:	7c9b      	ldrb	r3, [r3, #18]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e001      	b.n	8002474 <cfg_NodeBatVarGet+0x54>
		default: return CFG_ERROR_VARID;
 8002470:	2302      	movs	r3, #2
 8002472:	e000      	b.n	8002476 <cfg_NodeBatVarGet+0x56>
	}
	return CFG_ERROR_NONE;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	200003b4 	.word	0x200003b4

08002488 <cfg_NodeBatVarSet>:

uint16_t cfg_NodeBatVarSet(uint16_t varid, void *value)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00f      	beq.n	80024ba <cfg_NodeBatVarSet+0x32>
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d007      	beq.n	80024b0 <cfg_NodeBatVarSet+0x28>
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	dc03      	bgt.n	80024ac <cfg_NodeBatVarSet+0x24>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <cfg_NodeBatVarSet+0x2c>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <cfg_NodeBatVarSet+0x30>
	{
		case BAT_VOLTAGE:			break;
		case BAT_FILTERED_VOLTAGE:	break;
		case BAT_CHG_PERC:			break;
		default: return CFG_ERROR_VARID;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e005      	b.n	80024bc <cfg_NodeBatVarSet+0x34>
		case BAT_CHG_PERC:			break;
 80024b0:	bf00      	nop
 80024b2:	e002      	b.n	80024ba <cfg_NodeBatVarSet+0x32>
		case BAT_VOLTAGE:			break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <cfg_NodeBatVarSet+0x32>
		case BAT_FILTERED_VOLTAGE:	break;
 80024b8:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <cfg_GetNodeName>:
	{ NODE_PITCHCH, NODE_AUTOPILOT, PITCHCH_VAR_NUM, cfg_NodePitchChVarGet, cfg_NodePitchChVarSet, cfg_NodePitchChVarProp}
};

/* @brief get the name of the node */
uint16_t cfg_GetNodeName(uint16_t nodeid, char *name)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	80fb      	strh	r3, [r7, #6]
	char *str;

	// получаем имя переменной
	switch( nodeid )
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	f642 023e 	movw	r2, #10302	; 0x283e
 80024da:	4293      	cmp	r3, r2
 80024dc:	d050      	beq.n	8002580 <cfg_GetNodeName+0xb8>
 80024de:	f642 023e 	movw	r2, #10302	; 0x283e
 80024e2:	4293      	cmp	r3, r2
 80024e4:	dc4f      	bgt.n	8002586 <cfg_GetNodeName+0xbe>
 80024e6:	f642 023d 	movw	r2, #10301	; 0x283d
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d045      	beq.n	800257a <cfg_GetNodeName+0xb2>
 80024ee:	f642 023d 	movw	r2, #10301	; 0x283d
 80024f2:	4293      	cmp	r3, r2
 80024f4:	dc47      	bgt.n	8002586 <cfg_GetNodeName+0xbe>
 80024f6:	f242 72dd 	movw	r2, #10205	; 0x27dd
 80024fa:	4293      	cmp	r3, r2
 80024fc:	dc43      	bgt.n	8002586 <cfg_GetNodeName+0xbe>
 80024fe:	f242 72d9 	movw	r2, #10201	; 0x27d9
 8002502:	4293      	cmp	r3, r2
 8002504:	da0c      	bge.n	8002520 <cfg_GetNodeName+0x58>
 8002506:	2b67      	cmp	r3, #103	; 0x67
 8002508:	d034      	beq.n	8002574 <cfg_GetNodeName+0xac>
 800250a:	2b67      	cmp	r3, #103	; 0x67
 800250c:	dc3b      	bgt.n	8002586 <cfg_GetNodeName+0xbe>
 800250e:	2b66      	cmp	r3, #102	; 0x66
 8002510:	d01e      	beq.n	8002550 <cfg_GetNodeName+0x88>
 8002512:	2b66      	cmp	r3, #102	; 0x66
 8002514:	dc37      	bgt.n	8002586 <cfg_GetNodeName+0xbe>
 8002516:	2b01      	cmp	r3, #1
 8002518:	d014      	beq.n	8002544 <cfg_GetNodeName+0x7c>
 800251a:	2b65      	cmp	r3, #101	; 0x65
 800251c:	d015      	beq.n	800254a <cfg_GetNodeName+0x82>
		case NODE_BAT    	: str = "Battery"; break;
		case NODE_SENS    	: str = "Sensors"; break;
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
		case NODE_ROLLCH	: str = "Roll channel"; break;
		case NODE_PITCHCH	: str = "Pitch channel"; break;
		default:break;
 800251e:	e032      	b.n	8002586 <cfg_GetNodeName+0xbe>
	switch( nodeid )
 8002520:	f5a3 531f 	sub.w	r3, r3, #10176	; 0x27c0
 8002524:	3b19      	subs	r3, #25
 8002526:	2b04      	cmp	r3, #4
 8002528:	d82d      	bhi.n	8002586 <cfg_GetNodeName+0xbe>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <cfg_GetNodeName+0x68>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	08002557 	.word	0x08002557
 8002534:	0800255d 	.word	0x0800255d
 8002538:	08002563 	.word	0x08002563
 800253c:	08002569 	.word	0x08002569
 8002540:	0800256f 	.word	0x0800256f
		case NODE_MAIN		: str = "Nimbus_2000"; break;
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <cfg_GetNodeName+0xf4>)
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e01e      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_FW		: str = "Firmware"; break;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <cfg_GetNodeName+0xf8>)
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e01b      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_DEV    	: str = "Aircraft devices"; break;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <cfg_GetNodeName+0xfc>)
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e018      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_SERVO    	: str = "Servo"; break;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <cfg_GetNodeName+0x100>)
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e015      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_MOTOR    	: str = "Motor"; break;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <cfg_GetNodeName+0x104>)
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e012      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_RC    	: str = "RC"; break;
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <cfg_GetNodeName+0x108>)
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e00f      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_BAT    	: str = "Battery"; break;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <cfg_GetNodeName+0x10c>)
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e00c      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_SENS    	: str = "Sensors"; break;
 800256e:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <cfg_GetNodeName+0x110>)
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	e009      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_AUTOPILOT	: str = "Autopilot"; break;
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <cfg_GetNodeName+0x114>)
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e006      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_ROLLCH	: str = "Roll channel"; break;
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <cfg_GetNodeName+0x118>)
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e003      	b.n	8002588 <cfg_GetNodeName+0xc0>
		case NODE_PITCHCH	: str = "Pitch channel"; break;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <cfg_GetNodeName+0x11c>)
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e000      	b.n	8002588 <cfg_GetNodeName+0xc0>
		default:break;
 8002586:	bf00      	nop
	}
	if( name )
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00f      	beq.n	80025ae <cfg_GetNodeName+0xe6>
	{
		while( *str ){
 800258e:	e007      	b.n	80025a0 <cfg_GetNodeName+0xd8>
			*name++ = *str++;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	1c53      	adds	r3, r2, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	1c59      	adds	r1, r3, #1
 800259a:	6039      	str	r1, [r7, #0]
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	701a      	strb	r2, [r3, #0]
		while( *str ){
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f3      	bne.n	8002590 <cfg_GetNodeName+0xc8>
		}
		*name = 0;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
	}

	return CFG_ERROR_NONE;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	08016804 	.word	0x08016804
 80025c0:	08016810 	.word	0x08016810
 80025c4:	0801681c 	.word	0x0801681c
 80025c8:	08016830 	.word	0x08016830
 80025cc:	08016838 	.word	0x08016838
 80025d0:	08016840 	.word	0x08016840
 80025d4:	08016844 	.word	0x08016844
 80025d8:	0801684c 	.word	0x0801684c
 80025dc:	08016854 	.word	0x08016854
 80025e0:	08016860 	.word	0x08016860
 80025e4:	08016870 	.word	0x08016870

080025e8 <cfg_GetNode>:

/* @brief get node*/
cgf_nodeTypeDef* cfg_GetNode(uint16_t nodeid)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
	cgf_nodeTypeDef *node = cfg_NodeList;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <cfg_GetNode+0x58>)
 80025f4:	60fb      	str	r3, [r7, #12]
	uint16_t n;

	for( n = 0; n < cfg_info.node_num && node->id != nodeid ; n++, node++ );
 80025f6:	2300      	movs	r3, #0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	e005      	b.n	8002608 <cfg_GetNode+0x20>
 80025fc:	897b      	ldrh	r3, [r7, #10]
 80025fe:	3301      	adds	r3, #1
 8002600:	817b      	strh	r3, [r7, #10]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3314      	adds	r3, #20
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <cfg_GetNode+0x5c>)
 800260a:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800260e:	b29b      	uxth	r3, r3
 8002610:	897a      	ldrh	r2, [r7, #10]
 8002612:	429a      	cmp	r2, r3
 8002614:	d204      	bcs.n	8002620 <cfg_GetNode+0x38>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	429a      	cmp	r2, r3
 800261e:	d1ed      	bne.n	80025fc <cfg_GetNode+0x14>

	return n == cfg_info.node_num ? 0 : node;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <cfg_GetNode+0x5c>)
 8002622:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002626:	b29b      	uxth	r3, r3
 8002628:	897a      	ldrh	r2, [r7, #10]
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <cfg_GetNode+0x4a>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	e000      	b.n	8002634 <cfg_GetNode+0x4c>
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	20000030 	.word	0x20000030
 8002644:	200003e4 	.word	0x200003e4

08002648 <cfg_NodeFwVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeFwVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	81fb      	strh	r3, [r7, #14]
	char *str;// = malloc(50);

	if( varid == 0 )
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <cfg_NodeFwVarProp+0x20>
	{
		str = "Version";
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <cfg_NodeFwVarProp+0x70>)
 800265e:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2214      	movs	r2, #20
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e00d      	b.n	8002684 <cfg_NodeFwVarProp+0x3c>
	}
	else if( varid == 1 )
 8002668:	89fb      	ldrh	r3, [r7, #14]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <cfg_NodeFwVarProp+0x32>
	{
		str = "Prepare for flashing";
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <cfg_NodeFwVarProp+0x74>)
 8002670:	617b      	str	r3, [r7, #20]
		*prop = CFG_VAR_TYPE_BOOL;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2203      	movs	r2, #3
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	e004      	b.n	8002684 <cfg_NodeFwVarProp+0x3c>
	}
	else
	{
		str = "Data";
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <cfg_NodeFwVarProp+0x78>)
 800267c:	617b      	str	r3, [r7, #20]
		//str = malloc(15);
		//sprintf(str, "Data %u", varid - 2);
		*prop = CFG_VAR_TYPE_HEX | CFG_VAR_PROP_READONLY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2215      	movs	r2, #21
 8002682:	801a      	strh	r2, [r3, #0]
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00f      	beq.n	80026aa <cfg_NodeFwVarProp+0x62>
 800268a:	e007      	b.n	800269c <cfg_NodeFwVarProp+0x54>
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	1c53      	adds	r3, r2, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1c59      	adds	r1, r3, #1
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f3      	bne.n	800268c <cfg_NodeFwVarProp+0x44>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
	//free(str);
	return CFG_ERROR_NONE;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	08016880 	.word	0x08016880
 80026bc:	08016888 	.word	0x08016888
 80026c0:	080168a0 	.word	0x080168a0

080026c4 <cfg_NodeFwVarGet>:

uint16_t cfg_NodeFwVarGet(uint16_t varid, void *value)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	80fb      	strh	r3, [r7, #6]
	if( varid == 0 ){
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <cfg_NodeFwVarGet+0x1a>
		*(float*)value = 0.9;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <cfg_NodeFwVarGet+0x40>)
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e00a      	b.n	80026f4 <cfg_NodeFwVarGet+0x30>
	}
	else if( varid == 1){
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d103      	bne.n	80026ec <cfg_NodeFwVarGet+0x28>
		*(uint32_t*)value = 0;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e003      	b.n	80026f4 <cfg_NodeFwVarGet+0x30>
	}
	else {
		*(uint32_t*)value = 0xFFFFFFFF;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f04f 32ff 	mov.w	r2, #4294967295
 80026f2:	601a      	str	r2, [r3, #0]
	}
	return CFG_ERROR_NONE;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	3f666666 	.word	0x3f666666

08002708 <cfg_NodeFwVarSet>:

uint16_t cfg_NodeFwVarSet(uint16_t varid, void *value)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	80fb      	strh	r3, [r7, #6]
	//Prepare for flashing (clear new fw buffer)
	if( varid == 1 )
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <cfg_NodeFwVarSet+0x20>
	{
		if( *(uint32_t*)value != 0 ){
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <cfg_NodeFwVarSet+0x40>
			cfg_ClearFwBuf();
 8002722:	f001 f91d 	bl	8003960 <cfg_ClearFwBuf>
 8002726:	e00f      	b.n	8002748 <cfg_NodeFwVarSet+0x40>
		}
	}
	//Receiving data
	else if( varid < CFG_FW_VAR_NUM ){
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2b2f      	cmp	r3, #47	; 0x2f
 800272c:	d805      	bhi.n	800273a <cfg_NodeFwVarSet+0x32>
		cfg_WriteFwData(*(uint32_t*)value);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f001 f92c 	bl	8003990 <cfg_WriteFwData>
 8002738:	e006      	b.n	8002748 <cfg_NodeFwVarSet+0x40>
	}
	//Receiving complete
	else if( varid == (CFG_FW_VAR_NUM + 1) ){
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b31      	cmp	r3, #49	; 0x31
 800273e:	d103      	bne.n	8002748 <cfg_NodeFwVarSet+0x40>
		cfg_info.new_fw_received = 1;
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <cfg_NodeFwVarSet+0x4c>)
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
	}
	return CFG_ERROR_NONE;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200003e4 	.word	0x200003e4

08002758 <cfg_NodeMainVarProp>:

/* Main node functions*/
/*************************************************************************/
uint16_t cfg_NodeMainVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8002766:	89fb      	ldrh	r3, [r7, #14]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d817      	bhi.n	800279c <cfg_NodeMainVarProp+0x44>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <cfg_NodeMainVarProp+0x1c>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002785 	.word	0x08002785
 8002778:	0800278b 	.word	0x0800278b
 800277c:	08002791 	.word	0x08002791
 8002780:	08002797 	.word	0x08002797
	{
		case MAIN_DEVICE_ID:			str = "Device ID"; break;
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <cfg_NodeMainVarProp+0xc4>)
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e00a      	b.n	80027a0 <cfg_NodeMainVarProp+0x48>
		case MAIN_WORKING_TIME:			str = "Working time"; break;
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <cfg_NodeMainVarProp+0xc8>)
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e007      	b.n	80027a0 <cfg_NodeMainVarProp+0x48>
		case MAIN_SAVE:					str = "Save settings"; break;
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <cfg_NodeMainVarProp+0xcc>)
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e004      	b.n	80027a0 <cfg_NodeMainVarProp+0x48>
		case MAIN_RESET:				str = "Reboot device"; break;
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <cfg_NodeMainVarProp+0xd0>)
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e001      	b.n	80027a0 <cfg_NodeMainVarProp+0x48>
		default: return CFG_ERROR_VARID;
 800279c:	2302      	movs	r3, #2
 800279e:	e036      	b.n	800280e <cfg_NodeMainVarProp+0xb6>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00f      	beq.n	80027c6 <cfg_NodeMainVarProp+0x6e>
 80027a6:	e007      	b.n	80027b8 <cfg_NodeMainVarProp+0x60>
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	1c53      	adds	r3, r2, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f3      	bne.n	80027a8 <cfg_NodeMainVarProp+0x50>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01f      	beq.n	800280c <cfg_NodeMainVarProp+0xb4>
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d81a      	bhi.n	8002808 <cfg_NodeMainVarProp+0xb0>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <cfg_NodeMainVarProp+0x80>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027f1 	.word	0x080027f1
 80027e0:	080027f9 	.word	0x080027f9
 80027e4:	08002801 	.word	0x08002801
	{
		case MAIN_DEVICE_ID:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2222      	movs	r2, #34	; 0x22
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	e00d      	b.n	800280c <cfg_NodeMainVarProp+0xb4>
		case MAIN_WORKING_TIME:	  		*prop = CFG_VAR_TYPE_TIME | CFG_VAR_PROP_READONLY; break;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2217      	movs	r2, #23
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	e009      	b.n	800280c <cfg_NodeMainVarProp+0xb4>
		case MAIN_SAVE:					*prop = CFG_VAR_TYPE_BOOL; break;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	e005      	b.n	800280c <cfg_NodeMainVarProp+0xb4>
		case MAIN_RESET:				*prop = CFG_VAR_TYPE_BOOL; break;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2203      	movs	r2, #3
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	e001      	b.n	800280c <cfg_NodeMainVarProp+0xb4>
		default: return CFG_ERROR_VARID;
 8002808:	2302      	movs	r3, #2
 800280a:	e000      	b.n	800280e <cfg_NodeMainVarProp+0xb6>
	}
	return CFG_ERROR_NONE;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	080168a8 	.word	0x080168a8
 8002820:	080168b4 	.word	0x080168b4
 8002824:	080168c4 	.word	0x080168c4
 8002828:	080168d4 	.word	0x080168d4

0800282c <cfg_NodeMainVarGet>:

uint16_t cfg_NodeMainVarGet(uint16_t varid, void *value)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d026      	beq.n	800288c <cfg_NodeMainVarGet+0x60>
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d821      	bhi.n	8002888 <cfg_NodeMainVarGet+0x5c>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <cfg_NodeMainVarGet+0x20>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	0800285d 	.word	0x0800285d
 8002850:	0800286d 	.word	0x0800286d
 8002854:	08002879 	.word	0x08002879
 8002858:	08002881 	.word	0x08002881
	{
		case MAIN_DEVICE_ID: 			*(uint32_t*)value = (uint32_t)cfg_info.device_id; break;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <cfg_NodeMainVarGet+0x6c>)
 800285e:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e00f      	b.n	800288c <cfg_NodeMainVarGet+0x60>
		case MAIN_WORKING_TIME: 		*(uint32_t*)value = HAL_GetTick(); break;
 800286c:	f009 f840 	bl	800b8f0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e009      	b.n	800288c <cfg_NodeMainVarGet+0x60>
		case MAIN_SAVE: 				*(uint32_t*)value = 0; break;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e005      	b.n	800288c <cfg_NodeMainVarGet+0x60>
		case MAIN_RESET: 				*(uint32_t*)value = 0; break;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e001      	b.n	800288c <cfg_NodeMainVarGet+0x60>
		default: return CFG_ERROR_VARID;
 8002888:	2302      	movs	r3, #2
 800288a:	e000      	b.n	800288e <cfg_NodeMainVarGet+0x62>
	}
	return CFG_ERROR_NONE;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200003e4 	.word	0x200003e4

0800289c <cfg_NodeMainVarSet>:

uint16_t cfg_NodeMainVarSet(uint16_t varid, void *value)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02a      	beq.n	8002904 <cfg_NodeMainVarSet+0x68>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d820      	bhi.n	80028f6 <cfg_NodeMainVarSet+0x5a>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <cfg_NodeMainVarSet+0x20>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028fb 	.word	0x080028fb
 80028c4:	080028d9 	.word	0x080028d9
 80028c8:	080028e7 	.word	0x080028e7
	{
		case MAIN_DEVICE_ID:				cfg_info.device_id = *(uint16_t*)value; break;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <cfg_NodeMainVarSet+0x74>)
 80028d2:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
 80028d6:	e015      	b.n	8002904 <cfg_NodeMainVarSet+0x68>
		case MAIN_WORKING_TIME:				break;
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <cfg_NodeMainVarSet+0x62>
 80028e0:	f000 fe68 	bl	80035b4 <cfg_SaveSettings>
 80028e4:	e00b      	b.n	80028fe <cfg_NodeMainVarSet+0x62>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <cfg_NodeMainVarSet+0x66>
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <cfg_NodeMainVarSet+0x78>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	705a      	strb	r2, [r3, #1]
 80028f4:	e005      	b.n	8002902 <cfg_NodeMainVarSet+0x66>
		default: return CFG_ERROR_VARID;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e005      	b.n	8002906 <cfg_NodeMainVarSet+0x6a>
		case MAIN_WORKING_TIME:				break;
 80028fa:	bf00      	nop
 80028fc:	e002      	b.n	8002904 <cfg_NodeMainVarSet+0x68>
		case MAIN_SAVE:						if( *(uint32_t*)value ) {cfg_SaveSettings();} break;
 80028fe:	bf00      	nop
 8002900:	e000      	b.n	8002904 <cfg_NodeMainVarSet+0x68>
		case MAIN_RESET:					if( *(uint32_t*)value ) {system_info.reset_req = 1;} break;
 8002902:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200003e4 	.word	0x200003e4
 8002914:	200010b8 	.word	0x200010b8

08002918 <cfg_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void cfg_Timer(uint32_t res)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e023      	b.n	800296e <cfg_Timer+0x56>
	{
		if( cfg_info.iface[i].timer > 0 ){
 8002926:	4a16      	ldr	r2, [pc, #88]	; (8002980 <cfg_Timer+0x68>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d014      	beq.n	8002968 <cfg_Timer+0x50>
			cfg_info.iface[i].timer--;
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <cfg_Timer+0x68>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1e5a      	subs	r2, r3, #1
 8002954:	490a      	ldr	r1, [pc, #40]	; (8002980 <cfg_Timer+0x68>)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800295c:	fb00 f303 	mul.w	r3, r0, r3
 8002960:	440b      	add	r3, r1
 8002962:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002966:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d9d8      	bls.n	8002926 <cfg_Timer+0xe>
		}
	}

	return;
 8002974:	bf00      	nop
}
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	200003e4 	.word	0x200003e4

08002984 <cfg_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_InitTask()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	cfg_info.device_id = 1;
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <cfg_InitTask+0xc0>)
 800298c:	2201      	movs	r2, #1
 800298e:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
	cfg_info.node_num = sizeof( cfg_NodeList ) / sizeof( cgf_nodeTypeDef );
 8002992:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <cfg_InitTask+0xc0>)
 8002994:	220b      	movs	r2, #11
 8002996:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	e040      	b.n	8002a22 <cfg_InitTask+0x9e>
	{
		cfg_info.iface[i].timer = 0;
 80029a0:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <cfg_InitTask+0xc0>)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.head = 0;
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <cfg_InitTask+0xc0>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3302      	adds	r3, #2
 80029c6:	2200      	movs	r2, #0
 80029c8:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.tail = 0;
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <cfg_InitTask+0xc0>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3304      	adds	r3, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
		cfg_info.iface[i].rx_buf.state = RINGBUF_WAIT_HEADER;
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <cfg_InitTask+0xc0>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
		cfg_info.iface[i].tx_buf_bytes = 0;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <cfg_InitTask+0xc0>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
		cfg_info.iface[i].req_num = 0;
 8002a06:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <cfg_InitTask+0xc0>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d9bb      	bls.n	80029a0 <cfg_InitTask+0x1c>
	}

	cfg_info.iface[CFG_IFACE_CH0].tx_func = cfg_TxDataCh0;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <cfg_InitTask+0xc0>)
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <cfg_InitTask+0xc4>)
 8002a2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	cfg_info.iface[CFG_IFACE_CH1_USB].tx_func = cfg_TxDataCh1USB;
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <cfg_InitTask+0xc0>)
 8002a32:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <cfg_InitTask+0xc8>)
 8002a34:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

	cfg_LoadSettings();
 8002a38:	f000 fee4 	bl	8003804 <cfg_LoadSettings>

	return;
 8002a3c:	bf00      	nop
}
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200003e4 	.word	0x200003e4
 8002a48:	08003dad 	.word	0x08003dad
 8002a4c:	08003dc9 	.word	0x08003dc9

08002a50 <cfg_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void cfg_Task(void)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b099      	sub	sp, #100	; 0x64
 8002a54:	af00      	add	r7, sp, #0
	return;
#endif //NO_CFG

	uint16_t tmp_u16;
	uint8_t tmp_u8;
	uint16_t node_num = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t node_id = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t var_id = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t var_prop = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t var_num = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint32_t var_val = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t j = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char name[CFG_NAMECHARS];
	uint8_t name_len;

	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8002a7e:	2300      	movs	r3, #0
 8002a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a82:	e3f3      	b.n	800326c <cfg_Task+0x81c>
	{
		//Transmitting
		if( (cfg_info.iface[i].tx_buf_bytes > 0) && (cfg_info.iface[i].timer == 0) )
 8002a84:	4ab8      	ldr	r2, [pc, #736]	; (8002d68 <cfg_Task+0x318>)
 8002a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a88:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d069      	beq.n	8002b70 <cfg_Task+0x120>
 8002a9c:	4ab2      	ldr	r2, [pc, #712]	; (8002d68 <cfg_Task+0x318>)
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d15d      	bne.n	8002b70 <cfg_Task+0x120>
		{
			cfg_info.iface[i].timer = CFG_TX_PERIOD;
 8002ab4:	4aac      	ldr	r2, [pc, #688]	; (8002d68 <cfg_Task+0x318>)
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
			if( cfg_info.iface[i].tx_buf_bytes > CFG_MAX_TX_LEN )
 8002aca:	4aa7      	ldr	r2, [pc, #668]	; (8002d68 <cfg_Task+0x318>)
 8002acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ace:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d91c      	bls.n	8002b1c <cfg_Task+0xcc>
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, CFG_MAX_TX_LEN);
 8002ae2:	4aa1      	ldr	r2, [pc, #644]	; (8002d68 <cfg_Task+0x318>)
 8002ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002af8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002afc:	fb01 f202 	mul.w	r2, r1, r2
 8002b00:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8002b04:	4998      	ldr	r1, [pc, #608]	; (8002d68 <cfg_Task+0x318>)
 8002b06:	440a      	add	r2, r1
 8002b08:	2140      	movs	r1, #64	; 0x40
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4798      	blx	r3
				cfg_RemTxData(i, CFG_MAX_TX_LEN);
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 f89f 	bl	8003c58 <cfg_RemTxData>
 8002b1a:	e029      	b.n	8002b70 <cfg_Task+0x120>
			}
			else
			{
				cfg_info.iface[i].tx_func((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 8002b1c:	4a92      	ldr	r2, [pc, #584]	; (8002d68 <cfg_Task+0x318>)
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b32:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b36:	fb01 f202 	mul.w	r2, r1, r2
 8002b3a:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8002b3e:	498a      	ldr	r1, [pc, #552]	; (8002d68 <cfg_Task+0x318>)
 8002b40:	1850      	adds	r0, r2, r1
 8002b42:	4989      	ldr	r1, [pc, #548]	; (8002d68 <cfg_Task+0x318>)
 8002b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b46:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8002b4a:	fb04 f202 	mul.w	r2, r4, r2
 8002b4e:	440a      	add	r2, r1
 8002b50:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4798      	blx	r3
				cfg_info.iface[i].tx_buf_bytes = 0;
 8002b5a:	4a83      	ldr	r2, [pc, #524]	; (8002d68 <cfg_Task+0x318>)
 8002b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
			}
		}
		//Handling received pkt
		if( cfg_info.iface[i].rvd_pkt_size > 0 )
 8002b70:	4a7d      	ldr	r2, [pc, #500]	; (8002d68 <cfg_Task+0x318>)
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 836e 	beq.w	8003266 <cfg_Task+0x816>
		{
			cfg_info.iface[i].req_num += 1;
 8002b8a:	4a77      	ldr	r2, [pc, #476]	; (8002d68 <cfg_Task+0x318>)
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	4971      	ldr	r1, [pc, #452]	; (8002d68 <cfg_Task+0x318>)
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002ba8:	fb00 f303 	mul.w	r3, r0, r3
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8002bb2:	601a      	str	r2, [r3, #0]
			//Answer
			tmp_u16 = CFG_HEADER;
 8002bb4:	f64c 63fa 	movw	r3, #52986	; 0xcefa
 8002bb8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 ff08 	bl	80039dc <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.device_id, 2);
 8002bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4966      	ldr	r1, [pc, #408]	; (8002d6c <cfg_Task+0x31c>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 ff01 	bl	80039dc <cfg_AddTxData>
			cfg_AddTxData(i, (uint8_t*)&cfg_info.iface[i].rvd_pkt[5], 1); /*cmd*/
 8002bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bdc:	b298      	uxth	r0, r3
 8002bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	f203 2315 	addw	r3, r3, #533	; 0x215
 8002bec:	4a5e      	ldr	r2, [pc, #376]	; (8002d68 <cfg_Task+0x318>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f000 fef1 	bl	80039dc <cfg_AddTxData>
			//Handle command
			if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODENUM )
 8002bfa:	4a5b      	ldr	r2, [pc, #364]	; (8002d68 <cfg_Task+0x318>)
 8002bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfe:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d107      	bne.n	8002c24 <cfg_Task+0x1d4>
			{
				cfg_AddTxData(i, (uint8_t*)&cfg_info.node_num, 2);
 8002c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4955      	ldr	r1, [pc, #340]	; (8002d70 <cfg_Task+0x320>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fedd 	bl	80039dc <cfg_AddTxData>
 8002c22:	e2db      	b.n	80031dc <cfg_Task+0x78c>
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETNODEDESCR )
 8002c24:	4a50      	ldr	r2, [pc, #320]	; (8002d68 <cfg_Task+0x318>)
 8002c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c28:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	f040 809c 	bne.w	8002d78 <cfg_Task+0x328>
			{
				memcpy(&node_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_num));
 8002c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c42:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <cfg_Task+0x318>)
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				if( node_num < cfg_info.node_num )
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <cfg_Task+0x318>)
 8002c5e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d957      	bls.n	8002d1c <cfg_Task+0x2cc>
				{
					cfg_AddTxData(i, (uint8_t*)&node_num, 2);
 8002c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002c74:	2202      	movs	r2, #2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 feb0 	bl	80039dc <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].id, 2);
 8002c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002c84:	461a      	mov	r2, r3
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <cfg_Task+0x324>)
 8002c90:	4413      	add	r3, r2
 8002c92:	2202      	movs	r2, #2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f000 fea1 	bl	80039dc <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].pid, 2);
 8002c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9c:	b298      	uxth	r0, r3
 8002c9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <cfg_Task+0x324>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f000 fe91 	bl	80039dc <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&cfg_NodeList[node_num].var_num, 2);
 8002cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbc:	b298      	uxth	r0, r3
 8002cbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <cfg_Task+0x324>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f000 fe81 	bl	80039dc <cfg_AddTxData>
					/*node name*/
					cfg_GetNodeName(cfg_NodeList[node_num].id, name);
 8002cda:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <cfg_Task+0x324>)
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	1d3a      	adds	r2, r7, #4
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fbe8 	bl	80024c8 <cfg_GetNodeName>
					name_len = strlen(name) + 1;
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fa6c 	bl	80001d8 <strlen>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002d12:	1d39      	adds	r1, r7, #4
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fe61 	bl	80039dc <cfg_AddTxData>
 8002d1a:	e25f      	b.n	80031dc <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <cfg_Task+0x318>)
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d20:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <cfg_Task+0x318>)
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODENUM;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fe3c 	bl	80039dc <cfg_AddTxData>
 8002d64:	e23a      	b.n	80031dc <cfg_Task+0x78c>
 8002d66:	bf00      	nop
 8002d68:	200003e4 	.word	0x200003e4
 8002d6c:	20000a1c 	.word	0x20000a1c
 8002d70:	20000a24 	.word	0x20000a24
 8002d74:	20000030 	.word	0x20000030
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARDESCR )
 8002d78:	4ab0      	ldr	r2, [pc, #704]	; (800303c <cfg_Task+0x5ec>)
 8002d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	f040 80a8 	bne.w	8002ee4 <cfg_Task+0x494>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d96:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002da2:	4aa6      	ldr	r2, [pc, #664]	; (800303c <cfg_Task+0x5ec>)
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002dbe:	4a9f      	ldr	r2, [pc, #636]	; (800303c <cfg_Task+0x5ec>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				if( cfg_GetNode(node_id) != 0 )
 8002dcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fc09 	bl	80025e8 <cfg_GetNode>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05e      	beq.n	8002e9a <cfg_Task+0x44a>
				{
					if( cfg_GetNode(node_id)->var_prop_func(var_id, name, &var_prop) == CFG_ERROR_NONE )
 8002ddc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fc01 	bl	80025e8 <cfg_GetNode>
 8002de6:	4603      	mov	r3, r0
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8002dee:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8002df2:	1d39      	adds	r1, r7, #4
 8002df4:	4798      	blx	r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d129      	bne.n	8002e50 <cfg_Task+0x400>
					{
						cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002e04:	2202      	movs	r2, #2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fde8 	bl	80039dc <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002e14:	2202      	movs	r2, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fde0 	bl	80039dc <cfg_AddTxData>
						cfg_AddTxData(i, (uint8_t*)&var_prop, 2);
 8002e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 8002e24:	2202      	movs	r2, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fdd8 	bl	80039dc <cfg_AddTxData>
						name_len = strlen(name) + 1;
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd f9d2 	bl	80001d8 <strlen>
 8002e34:	4603      	mov	r3, r0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						cfg_AddTxData(i, (uint8_t*)name, (uint32_t)name_len);
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002e46:	1d39      	adds	r1, r7, #4
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fdc7 	bl	80039dc <cfg_AddTxData>
 8002e4e:	e1c5      	b.n	80031dc <cfg_Task+0x78c>
					}
					else
					{
						cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002e50:	4a7a      	ldr	r2, [pc, #488]	; (800303c <cfg_Task+0x5ec>)
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e6a:	b2d8      	uxtb	r0, r3
 8002e6c:	4a73      	ldr	r2, [pc, #460]	; (800303c <cfg_Task+0x5ec>)
 8002e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e70:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002e7e:	4602      	mov	r2, r0
 8002e80:	701a      	strb	r2, [r3, #0]
						tmp_u8 = CFG_CMD_ERROR_VARNUM;
 8002e82:	2304      	movs	r3, #4
 8002e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002e90:	2201      	movs	r2, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fda2 	bl	80039dc <cfg_AddTxData>
 8002e98:	e1a0      	b.n	80031dc <cfg_Task+0x78c>
					}
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002e9a:	4a68      	ldr	r2, [pc, #416]	; (800303c <cfg_Task+0x5ec>)
 8002e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eb4:	b2d8      	uxtb	r0, r3
 8002eb6:	4a61      	ldr	r2, [pc, #388]	; (800303c <cfg_Task+0x5ec>)
 8002eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eba:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002ec8:	4602      	mov	r2, r0
 8002eca:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8002eda:	2201      	movs	r2, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fd7d 	bl	80039dc <cfg_AddTxData>
 8002ee2:	e17b      	b.n	80031dc <cfg_Task+0x78c>
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_GETVARS )
 8002ee4:	4a55      	ldr	r2, [pc, #340]	; (800303c <cfg_Task+0x5ec>)
 8002ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f203 2319 	addw	r3, r3, #537	; 0x219
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	f040 80a0 	bne.w	8003040 <cfg_Task+0x5f0>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 8002f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f02:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002f0e:	4a4b      	ldr	r2, [pc, #300]	; (800303c <cfg_Task+0x5ec>)
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8002f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002f2a:	4a44      	ldr	r2, [pc, #272]	; (800303c <cfg_Task+0x5ec>)
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8002f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8002f46:	4a3d      	ldr	r2, [pc, #244]	; (800303c <cfg_Task+0x5ec>)
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 8002f54:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fb45 	bl	80025e8 <cfg_GetNode>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d046      	beq.n	8002ff2 <cfg_Task+0x5a2>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 8002f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fd34 	bl	80039dc <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 8002f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fd2c 	bl	80039dc <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f8a:	e021      	b.n	8002fd0 <cfg_Task+0x580>
					{
						if( cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE ){
 8002f8c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fb29 	bl	80025e8 <cfg_GetNode>
 8002f96:	4603      	mov	r3, r0
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8002f9e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002fa2:	440a      	add	r2, r1
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002faa:	4610      	mov	r0, r2
 8002fac:	4798      	blx	r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <cfg_Task+0x58e>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 8002fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fd0c 	bl	80039dc <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 8002fc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002fd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3d7      	bcc.n	8002f8c <cfg_Task+0x53c>
 8002fdc:	e000      	b.n	8002fe0 <cfg_Task+0x590>
						}
						else{
							break;
 8002fde:	bf00      	nop
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 8002fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe2:	b298      	uxth	r0, r3
 8002fe4:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002fe8:	2302      	movs	r3, #2
 8002fea:	2109      	movs	r1, #9
 8002fec:	f000 fd48 	bl	8003a80 <cfg_IntertTxData>
 8002ff0:	e0f4      	b.n	80031dc <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <cfg_Task+0x5ec>)
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800300c:	b2d8      	uxtb	r0, r3
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <cfg_Task+0x5ec>)
 8003010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003012:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003020:	4602      	mov	r2, r0
 8003022:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 8003024:	2303      	movs	r3, #3
 8003026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 800302a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800302c:	b29b      	uxth	r3, r3
 800302e:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8003032:	2201      	movs	r2, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fcd1 	bl	80039dc <cfg_AddTxData>
 800303a:	e0cf      	b.n	80031dc <cfg_Task+0x78c>
 800303c:	200003e4 	.word	0x200003e4
				}
			}
			else if( cfg_info.iface[i].rvd_pkt[5] == CFG_CMD_SETVARS )
 8003040:	4a8e      	ldr	r2, [pc, #568]	; (800327c <cfg_Task+0x82c>)
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	f203 2319 	addw	r3, r3, #537	; 0x219
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b11      	cmp	r3, #17
 8003058:	f040 80c0 	bne.w	80031dc <cfg_Task+0x78c>
			{
				memcpy(&node_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[6], sizeof(node_id));
 800305c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	f203 2316 	addw	r3, r3, #534	; 0x216
 800306a:	4a84      	ldr	r2, [pc, #528]	; (800327c <cfg_Task+0x82c>)
 800306c:	4413      	add	r3, r2
 800306e:	3304      	adds	r3, #4
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				memcpy(&var_id, (uint8_t*)&cfg_info.iface[i].rvd_pkt[8], sizeof(var_id));
 8003078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003086:	4a7d      	ldr	r2, [pc, #500]	; (800327c <cfg_Task+0x82c>)
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				memcpy(&var_num, (uint8_t*)&cfg_info.iface[i].rvd_pkt[10], sizeof(var_num));
 8003094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003096:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	f203 231a 	addw	r3, r3, #538	; 0x21a
 80030a2:	4a76      	ldr	r2, [pc, #472]	; (800327c <cfg_Task+0x82c>)
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				if( cfg_GetNode(node_id) != 0 )
 80030b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fa97 	bl	80025e8 <cfg_GetNode>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d069      	beq.n	8003194 <cfg_Task+0x744>
				{
					cfg_AddTxData(i, (uint8_t*)&node_id, 2);
 80030c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f107 0152 	add.w	r1, r7, #82	; 0x52
 80030c8:	2202      	movs	r2, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fc86 	bl	80039dc <cfg_AddTxData>
					cfg_AddTxData(i, (uint8_t*)&var_id, 2);
 80030d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80030d8:	2202      	movs	r2, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fc7e 	bl	80039dc <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80030e6:	e046      	b.n	8003176 <cfg_Task+0x726>
					{
						memcpy(&var_val, (uint8_t*)&cfg_info.iface[i].rvd_pkt[12 + (j * 4)], sizeof(var_val));
 80030e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030ec:	3303      	adds	r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030f2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80030f6:	fb01 f202 	mul.w	r2, r1, r2
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003100:	4a5e      	ldr	r2, [pc, #376]	; (800327c <cfg_Task+0x82c>)
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 800310a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fa6a 	bl	80025e8 <cfg_GetNode>
 8003114:	4603      	mov	r3, r0
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800311c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003120:	440a      	add	r2, r1
 8003122:	b292      	uxth	r2, r2
 8003124:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003128:	4610      	mov	r0, r2
 800312a:	4798      	blx	r3
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d127      	bne.n	8003182 <cfg_Task+0x732>
								(cfg_GetNode(node_id)->var_get_func(var_id + j, &var_val) == CFG_ERROR_NONE) ){
 8003132:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fa56 	bl	80025e8 <cfg_GetNode>
 800313c:	4603      	mov	r3, r0
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8003144:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003148:	440a      	add	r2, r1
 800314a:	b292      	uxth	r2, r2
 800314c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
 8003154:	4603      	mov	r3, r0
						if( (cfg_GetNode(node_id)->var_set_func(var_id + j, &var_val) == CFG_ERROR_NONE) &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d113      	bne.n	8003182 <cfg_Task+0x732>
							cfg_AddTxData(i, (uint8_t*)&var_val, 4);
 800315a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315c:	b29b      	uxth	r3, r3
 800315e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003162:	2204      	movs	r2, #4
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc39 	bl	80039dc <cfg_AddTxData>
					for( j = 0; j < var_num; j++ )
 800316a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800316e:	3301      	adds	r3, #1
 8003170:	b29b      	uxth	r3, r3
 8003172:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003176:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800317a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800317e:	429a      	cmp	r2, r3
 8003180:	d3b2      	bcc.n	80030e8 <cfg_Task+0x698>
						}
						else{
							break;
						}
					}
					cfg_IntertTxData(i, 9, (uint8_t*)&j, 2); /*insert number of parameters (variables)*/
 8003182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003184:	b298      	uxth	r0, r3
 8003186:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800318a:	2302      	movs	r3, #2
 800318c:	2109      	movs	r1, #9
 800318e:	f000 fc77 	bl	8003a80 <cfg_IntertTxData>
 8003192:	e023      	b.n	80031dc <cfg_Task+0x78c>
				}
				else
				{
					cfg_info.iface[i].tx_buf[4] |= 0x80;
 8003194:	4a39      	ldr	r2, [pc, #228]	; (800327c <cfg_Task+0x82c>)
 8003196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003198:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ae:	b2d8      	uxtb	r0, r3
 80031b0:	4a32      	ldr	r2, [pc, #200]	; (800327c <cfg_Task+0x82c>)
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80031c2:	4602      	mov	r2, r0
 80031c4:	701a      	strb	r2, [r3, #0]
					tmp_u8 = CFG_CMD_ERROR_NODEID;
 80031c6:	2303      	movs	r3, #3
 80031c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cfg_AddTxData(i, (uint8_t*)&tmp_u8, 1);
 80031cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f107 0157 	add.w	r1, r7, #87	; 0x57
 80031d4:	2201      	movs	r2, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fc00 	bl	80039dc <cfg_AddTxData>
			else
			{

			}
			/*data length*/
			tmp_u8 = cfg_info.iface[i].tx_buf_bytes - 4;
 80031dc:	4a27      	ldr	r2, [pc, #156]	; (800327c <cfg_Task+0x82c>)
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3b04      	subs	r3, #4
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cfg_IntertTxData(i, 4, &tmp_u8, 1);
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	b298      	uxth	r0, r3
 80031fe:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8003202:	2301      	movs	r3, #1
 8003204:	2104      	movs	r1, #4
 8003206:	f000 fc3b 	bl	8003a80 <cfg_IntertTxData>
			//crc calc
			tmp_u16 = crc16_calc((uint8_t*)cfg_info.iface[i].tx_buf, cfg_info.iface[i].tx_buf_bytes);
 800320a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <cfg_Task+0x82c>)
 800321a:	441a      	add	r2, r3
 800321c:	4917      	ldr	r1, [pc, #92]	; (800327c <cfg_Task+0x82c>)
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	440b      	add	r3, r1
 800322a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f000 fdd7 	bl	8003de8 <crc16_calc>
 800323a:	4603      	mov	r3, r0
 800323c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			cfg_AddTxData(i, (uint8_t*)&tmp_u16, 2);
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	b29b      	uxth	r3, r3
 8003244:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003248:	2202      	movs	r2, #2
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fbc6 	bl	80039dc <cfg_AddTxData>
			cfg_info.iface[i].rvd_pkt_size = 0;
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <cfg_Task+0x82c>)
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
	for( uint32_t i = 0; i < CFG_IFACE_NUM; i++ )
 8003266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003268:	3301      	adds	r3, #1
 800326a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800326c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326e:	2b01      	cmp	r3, #1
 8003270:	f67f ac08 	bls.w	8002a84 <cfg_Task+0x34>
		}
	}

	return;
 8003274:	bf00      	nop
}
 8003276:	3764      	adds	r7, #100	; 0x64
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}
 800327c:	200003e4 	.word	0x200003e4

08003280 <cfg_RcvData>:

void cfg_RcvData(uint16_t iface, uint8_t data)
{
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	460a      	mov	r2, r1
 800328a:	80fb      	strh	r3, [r7, #6]
 800328c:	4613      	mov	r3, r2
 800328e:	717b      	strb	r3, [r7, #5]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t dev_id;
	uint16_t crc;

	if( iface >= CFG_IFACE_NUM ){
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f200 8164 	bhi.w	8003560 <cfg_RcvData+0x2e0>
		return;
	}

	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 8003298:	88fb      	ldrh	r3, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	49b4      	ldr	r1, [pc, #720]	; (8003570 <cfg_RcvData+0x2f0>)
 800329e:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80032a2:	fb00 f202 	mul.w	r2, r0, r2
 80032a6:	440a      	add	r2, r1
 80032a8:	3204      	adds	r2, #4
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	b292      	uxth	r2, r2
 80032ae:	3201      	adds	r2, #1
 80032b0:	b291      	uxth	r1, r2
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 80032b2:	88fa      	ldrh	r2, [r7, #6]
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 80032b4:	b2c9      	uxtb	r1, r1
 80032b6:	b28c      	uxth	r4, r1
	cfg_info.iface[iface].rx_buf.data[cfg_info.iface[iface].rx_buf.tail =
 80032b8:	49ad      	ldr	r1, [pc, #692]	; (8003570 <cfg_RcvData+0x2f0>)
 80032ba:	f44f 7047 	mov.w	r0, #796	; 0x31c
 80032be:	fb00 f202 	mul.w	r2, r0, r2
 80032c2:	440a      	add	r2, r1
 80032c4:	3204      	adds	r2, #4
 80032c6:	4621      	mov	r1, r4
 80032c8:	8011      	strh	r1, [r2, #0]
 80032ca:	4620      	mov	r0, r4
			(cfg_info.iface[iface].rx_buf.tail + 1) & CFG_BUF_MASK] = data;
 80032cc:	4aa8      	ldr	r2, [pc, #672]	; (8003570 <cfg_RcvData+0x2f0>)
 80032ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	4403      	add	r3, r0
 80032da:	3308      	adds	r3, #8
 80032dc:	797a      	ldrb	r2, [r7, #5]
 80032de:	701a      	strb	r2, [r3, #0]
	//Waiting header
	if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_HEADER )
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	4aa3      	ldr	r2, [pc, #652]	; (8003570 <cfg_RcvData+0x2f0>)
 80032e4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d17b      	bne.n	80033ee <cfg_RcvData+0x16e>
	{
		//Catch header
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	3308      	adds	r3, #8
 8003302:	4a9b      	ldr	r2, [pc, #620]	; (8003570 <cfg_RcvData+0x2f0>)
 8003304:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	4999      	ldr	r1, [pc, #612]	; (8003570 <cfg_RcvData+0x2f0>)
 800330a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	440b      	add	r3, r1
 8003314:	3304      	adds	r3, #4
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b04      	subs	r3, #4
 800331c:	b29b      	uxth	r3, r3
		header = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 800331e:	b2db      	uxtb	r3, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 f927 	bl	8003578 <cfg_ringBufRead16b>
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	3308      	adds	r3, #8
 800333a:	4a8d      	ldr	r2, [pc, #564]	; (8003570 <cfg_RcvData+0x2f0>)
 800333c:	441a      	add	r2, r3
				(cfg_info.iface[iface].rx_buf.tail - 2) & CFG_BUF_MASK);
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	498b      	ldr	r1, [pc, #556]	; (8003570 <cfg_RcvData+0x2f0>)
 8003342:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	440b      	add	r3, r1
 800334c:	3304      	adds	r3, #4
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b02      	subs	r3, #2
 8003354:	b29b      	uxth	r3, r3
		dev_id = cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8003356:	b2db      	uxtb	r3, r3
 8003358:	b29b      	uxth	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 f90b 	bl	8003578 <cfg_ringBufRead16b>
 8003362:	4603      	mov	r3, r0
 8003364:	813b      	strh	r3, [r7, #8]
		if( (header == CFG_HEADER) && (dev_id == cfg_info.device_id) )
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	f64c 62fa 	movw	r2, #52986	; 0xcefa
 800336c:	4293      	cmp	r3, r2
 800336e:	f040 80f9 	bne.w	8003564 <cfg_RcvData+0x2e4>
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <cfg_RcvData+0x2f0>)
 8003374:	f8b3 3638 	ldrh.w	r3, [r3, #1592]	; 0x638
 8003378:	b29b      	uxth	r3, r3
 800337a:	893a      	ldrh	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 80f1 	bne.w	8003564 <cfg_RcvData+0x2e4>
		{
			cfg_info.iface[iface].rx_buf.head = (cfg_info.iface[iface].rx_buf.tail - 4) & CFG_BUF_MASK;
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <cfg_RcvData+0x2f0>)
 8003386:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b04      	subs	r3, #4
 8003398:	b29a      	uxth	r2, r3
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	b290      	uxth	r0, r2
 80033a0:	4a73      	ldr	r2, [pc, #460]	; (8003570 <cfg_RcvData+0x2f0>)
 80033a2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3302      	adds	r3, #2
 80033ae:	4602      	mov	r2, r0
 80033b0:	801a      	strh	r2, [r3, #0]
			rcv_size = data + 1;
 80033b2:	797b      	ldrb	r3, [r7, #5]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <cfg_RcvData+0x2f4>)
 80033bc:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.data_size  = data + 5;
 80033be:	797b      	ldrb	r3, [r7, #5]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	3205      	adds	r2, #5
 80033c6:	b290      	uxth	r0, r2
 80033c8:	4a69      	ldr	r2, [pc, #420]	; (8003570 <cfg_RcvData+0x2f0>)
 80033ca:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3306      	adds	r3, #6
 80033d6:	4602      	mov	r2, r0
 80033d8:	801a      	strh	r2, [r3, #0]
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_DATA;
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4a64      	ldr	r2, [pc, #400]	; (8003570 <cfg_RcvData+0x2f0>)
 80033de:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	return;
 80033ec:	e0ba      	b.n	8003564 <cfg_RcvData+0x2e4>
	else if( cfg_info.iface[iface].rx_buf.state == RINGBUF_WAIT_DATA )
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4a5f      	ldr	r2, [pc, #380]	; (8003570 <cfg_RcvData+0x2f0>)
 80033f2:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	f040 80af 	bne.w	8003564 <cfg_RcvData+0x2e4>
		if( rcv_size-- != 0 ){
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <cfg_RcvData+0x2f4>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	1e5a      	subs	r2, r3, #1
 800340c:	b291      	uxth	r1, r2
 800340e:	4a59      	ldr	r2, [pc, #356]	; (8003574 <cfg_RcvData+0x2f4>)
 8003410:	8011      	strh	r1, [r2, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 80a8 	bne.w	8003568 <cfg_RcvData+0x2e8>
			cfg_info.iface[iface].rx_buf.state = RINGBUF_WAIT_HEADER;
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4a55      	ldr	r2, [pc, #340]	; (8003570 <cfg_RcvData+0x2f0>)
 800341c:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	3308      	adds	r3, #8
 8003436:	4a4e      	ldr	r2, [pc, #312]	; (8003570 <cfg_RcvData+0x2f0>)
 8003438:	1898      	adds	r0, r3, r2
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <cfg_RcvData+0x2f0>)
 800343e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3302      	adds	r3, #2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b299      	uxth	r1, r3
 800344e:	88fb      	ldrh	r3, [r7, #6]
					cfg_info.iface[iface].rx_buf.data_size, CFG_BUF_MASK);
 8003450:	4a47      	ldr	r2, [pc, #284]	; (8003570 <cfg_RcvData+0x2f0>)
 8003452:	f44f 7447 	mov.w	r4, #796	; 0x31c
 8003456:	fb04 f303 	mul.w	r3, r4, r3
 800345a:	4413      	add	r3, r2
 800345c:	3306      	adds	r3, #6
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29a      	uxth	r2, r3
			crc = crc16_RingBuf((uint8_t*)cfg_info.iface[iface].rx_buf.data, cfg_info.iface[iface].rx_buf.head,
 8003462:	23ff      	movs	r3, #255	; 0xff
 8003464:	f000 fcea 	bl	8003e3c <crc16_RingBuf>
 8003468:	4603      	mov	r3, r0
 800346a:	81bb      	strh	r3, [r7, #12]
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	3308      	adds	r3, #8
 8003478:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <cfg_RcvData+0x2f0>)
 800347a:	441a      	add	r2, r3
					(cfg_info.iface[iface].rx_buf.tail - 1) & CFG_BUF_MASK) ){
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	493c      	ldr	r1, [pc, #240]	; (8003570 <cfg_RcvData+0x2f0>)
 8003480:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003484:	fb00 f303 	mul.w	r3, r0, r3
 8003488:	440b      	add	r3, r1
 800348a:	3304      	adds	r3, #4
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29b      	uxth	r3, r3
			if( crc == cfg_ringBufRead16b((uint8_t*)cfg_info.iface[iface].rx_buf.data,
 8003494:	b2db      	uxtb	r3, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 f86c 	bl	8003578 <cfg_ringBufRead16b>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	89bb      	ldrh	r3, [r7, #12]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d15c      	bne.n	8003564 <cfg_RcvData+0x2e4>
				if( cfg_info.iface[iface].rvd_pkt_size == 0 )
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <cfg_RcvData+0x2f0>)
 80034ae:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 7345 	add.w	r3, r3, #788	; 0x314
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d150      	bne.n	8003564 <cfg_RcvData+0x2e4>
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 80034c2:	2300      	movs	r3, #0
 80034c4:	81fb      	strh	r3, [r7, #14]
 80034c6:	e028      	b.n	800351a <cfg_RcvData+0x29a>
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 80034c8:	88f8      	ldrh	r0, [r7, #6]
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <cfg_RcvData+0x2f0>)
 80034ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3302      	adds	r3, #2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	89fb      	ldrh	r3, [r7, #14]
 80034e0:	4413      	add	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	b2d9      	uxtb	r1, r3
						cfg_info.iface[iface].rvd_pkt[i] =
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	89fb      	ldrh	r3, [r7, #14]
							cfg_info.iface[iface].rx_buf.data[(cfg_info.iface[iface].rx_buf.head + i) & CFG_BUF_MASK];
 80034ea:	4c21      	ldr	r4, [pc, #132]	; (8003570 <cfg_RcvData+0x2f0>)
 80034ec:	f44f 7547 	mov.w	r5, #796	; 0x31c
 80034f0:	fb05 f000 	mul.w	r0, r5, r0
 80034f4:	4420      	add	r0, r4
 80034f6:	4401      	add	r1, r0
 80034f8:	3108      	adds	r1, #8
 80034fa:	7809      	ldrb	r1, [r1, #0]
 80034fc:	b2cc      	uxtb	r4, r1
						cfg_info.iface[iface].rvd_pkt[i] =
 80034fe:	491c      	ldr	r1, [pc, #112]	; (8003570 <cfg_RcvData+0x2f0>)
 8003500:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003504:	fb00 f202 	mul.w	r2, r0, r2
 8003508:	440a      	add	r2, r1
 800350a:	4413      	add	r3, r2
 800350c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003510:	4622      	mov	r2, r4
 8003512:	701a      	strb	r2, [r3, #0]
					for( uint16_t i = 0; i < cfg_info.iface[iface].rx_buf.data_size; i++ ){
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	3301      	adds	r3, #1
 8003518:	81fb      	strh	r3, [r7, #14]
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <cfg_RcvData+0x2f0>)
 800351e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3306      	adds	r3, #6
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	89fa      	ldrh	r2, [r7, #14]
 8003530:	429a      	cmp	r2, r3
 8003532:	d3c9      	bcc.n	80034c8 <cfg_RcvData+0x248>
					cfg_info.iface[iface].rvd_pkt_size = cfg_info.iface[iface].rx_buf.data_size;
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <cfg_RcvData+0x2f0>)
 8003538:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3306      	adds	r3, #6
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b29a      	uxth	r2, r3
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	4610      	mov	r0, r2
 800354c:	4a08      	ldr	r2, [pc, #32]	; (8003570 <cfg_RcvData+0x2f0>)
 800354e:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800355c:	6018      	str	r0, [r3, #0]
	return;
 800355e:	e001      	b.n	8003564 <cfg_RcvData+0x2e4>
		return;
 8003560:	bf00      	nop
 8003562:	e002      	b.n	800356a <cfg_RcvData+0x2ea>
	return;
 8003564:	bf00      	nop
 8003566:	e000      	b.n	800356a <cfg_RcvData+0x2ea>
			return;
 8003568:	bf00      	nop
}
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bdb0      	pop	{r4, r5, r7, pc}
 8003570:	200003e4 	.word	0x200003e4
 8003574:	20000a38 	.word	0x20000a38

08003578 <cfg_ringBufRead16b>:

uint16_t cfg_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & CFG_BUF_MASK] & 0xFF;
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	3301      	adds	r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	b29a      	uxth	r2, r3
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	440b      	add	r3, r1
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	81fb      	strh	r3, [r7, #14]
	return tmp;
 80035a6:	89fb      	ldrh	r3, [r7, #14]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <cfg_SaveSettings>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void cfg_SaveSettings()
{
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
#endif //NO_CFG

	uint16_t i, j;
	uint32_t tmp_var_buf[CFG_MAX_SAVE_PAR_NUM];
	uint16_t var_prop;
	uint16_t var_cnt = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80035c6:	f102 020a 	add.w	r2, r2, #10
 80035ca:	8013      	strh	r3, [r2, #0]
	uint32_t var_crc;

	//Count parameters to be saved
	//Nodes
	for( i = 0; i < cfg_info.node_num; i++ )
 80035cc:	2300      	movs	r3, #0
 80035ce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80035d2:	f102 020e 	add.w	r2, r2, #14
 80035d6:	8013      	strh	r3, [r2, #0]
 80035d8:	e079      	b.n	80036ce <cfg_SaveSettings+0x11a>
	{
		//Parameters (Variables)
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80035da:	2300      	movs	r3, #0
 80035dc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80035e0:	f102 020c 	add.w	r2, r2, #12
 80035e4:	8013      	strh	r3, [r2, #0]
 80035e6:	e053      	b.n	8003690 <cfg_SaveSettings+0xdc>
		{
			cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80035e8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80035ec:	f103 030e 	add.w	r3, r3, #14
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	4981      	ldr	r1, [pc, #516]	; (80037f8 <cfg_SaveSettings+0x244>)
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3310      	adds	r3, #16
 8003600:	681e      	ldr	r6, [r3, #0]
 8003602:	f107 0310 	add.w	r3, r7, #16
 8003606:	3b0e      	subs	r3, #14
 8003608:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800360c:	f102 020c 	add.w	r2, r2, #12
 8003610:	8810      	ldrh	r0, [r2, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	2100      	movs	r1, #0
 8003616:	47b0      	blx	r6
			if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 8003618:	f107 0310 	add.w	r3, r7, #16
 800361c:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d028      	beq.n	800367a <cfg_SaveSettings+0xc6>
			{
				cfg_NodeList[i].var_get_func(j, &tmp_var_buf[var_cnt]);
 8003628:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800362c:	f103 030e 	add.w	r3, r3, #14
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	4971      	ldr	r1, [pc, #452]	; (80037f8 <cfg_SaveSettings+0x244>)
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3308      	adds	r3, #8
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003646:	f103 030a 	add.w	r3, r3, #10
 800364a:	8819      	ldrh	r1, [r3, #0]
 800364c:	f107 0310 	add.w	r3, r7, #16
 8003650:	3b0c      	subs	r3, #12
 8003652:	0089      	lsls	r1, r1, #2
 8003654:	4419      	add	r1, r3
 8003656:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800365a:	f103 030c 	add.w	r3, r3, #12
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	4790      	blx	r2
				var_cnt += 1;
 8003664:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003668:	f103 030a 	add.w	r3, r3, #10
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003674:	f102 020a 	add.w	r2, r2, #10
 8003678:	8013      	strh	r3, [r2, #0]
		for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800367a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800367e:	f103 030c 	add.w	r3, r3, #12
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800368a:	f102 020c 	add.w	r2, r2, #12
 800368e:	8013      	strh	r3, [r2, #0]
 8003690:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003694:	f103 030e 	add.w	r3, r3, #14
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	4957      	ldr	r1, [pc, #348]	; (80037f8 <cfg_SaveSettings+0x244>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	3304      	adds	r3, #4
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80036ae:	f102 020c 	add.w	r2, r2, #12
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d397      	bcc.n	80035e8 <cfg_SaveSettings+0x34>
	for( i = 0; i < cfg_info.node_num; i++ )
 80036b8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036bc:	f103 030e 	add.w	r3, r3, #14
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80036c8:	f102 020e 	add.w	r2, r2, #14
 80036cc:	8013      	strh	r3, [r2, #0]
 80036ce:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <cfg_SaveSettings+0x248>)
 80036d0:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80036da:	f102 020e 	add.w	r2, r2, #14
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f4ff af7a 	bcc.w	80035da <cfg_SaveSettings+0x26>
			}
		}
	}
	//Writing array to flash (parameters + parameters number + crc)
	if( (var_cnt > 0) && (var_cnt < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 80036e6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036ea:	f103 030a 	add.w	r3, r3, #10
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d07a      	beq.n	80037ea <cfg_SaveSettings+0x236>
 80036f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80036f8:	f103 030a 	add.w	r3, r3, #10
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003702:	4293      	cmp	r3, r2
 8003704:	d871      	bhi.n	80037ea <cfg_SaveSettings+0x236>
	{
		var_crc = crc32_calc(0, tmp_var_buf, var_cnt);
 8003706:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800370a:	f103 030a 	add.w	r3, r3, #10
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	f107 0310 	add.w	r3, r7, #16
 8003714:	3b0c      	subs	r3, #12
 8003716:	4619      	mov	r1, r3
 8003718:	2000      	movs	r0, #0
 800371a:	f000 fbc7 	bl	8003eac <crc32_calc>
 800371e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003722:	f103 0304 	add.w	r3, r3, #4
 8003726:	6018      	str	r0, [r3, #0]
		HAL_FLASH_Unlock();
 8003728:	f008 ff78 	bl	800c61c <HAL_FLASH_Unlock>
		//Erase sector which stores parameters array
		FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 800372c:	2102      	movs	r1, #2
 800372e:	2007      	movs	r0, #7
 8003730:	f009 f8e6 	bl	800c900 <FLASH_Erase_Sector>
		//Write number of parameters
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr, (uint64_t)var_cnt);
 8003734:	4932      	ldr	r1, [pc, #200]	; (8003800 <cfg_SaveSettings+0x24c>)
 8003736:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800373a:	f103 030a 	add.w	r3, r3, #10
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	469a      	mov	sl, r3
 8003744:	4693      	mov	fp, r2
 8003746:	4652      	mov	r2, sl
 8003748:	465b      	mov	r3, fp
 800374a:	2002      	movs	r0, #2
 800374c:	f008 ff12 	bl	800c574 <HAL_FLASH_Program>
		//Write CRC
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 4, (uint64_t)var_crc);
 8003750:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <cfg_SaveSettings+0x24c>)
 8003752:	1d19      	adds	r1, r3, #4
 8003754:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003758:	f103 0304 	add.w	r3, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	4698      	mov	r8, r3
 8003762:	4691      	mov	r9, r2
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	2002      	movs	r0, #2
 800376a:	f008 ff03 	bl	800c574 <HAL_FLASH_Program>
		//Write parameters
		for(i = 0; i < var_cnt; i++ ){
 800376e:	2300      	movs	r3, #0
 8003770:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003774:	f102 020e 	add.w	r2, r2, #14
 8003778:	8013      	strh	r3, [r2, #0]
 800377a:	e027      	b.n	80037cc <cfg_SaveSettings+0x218>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)param_arr + 8 + (i * 4), (uint64_t)tmp_var_buf[i]);
 800377c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003780:	f103 030e 	add.w	r3, r3, #14
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <cfg_SaveSettings+0x24c>)
 800378c:	3308      	adds	r3, #8
 800378e:	18d1      	adds	r1, r2, r3
 8003790:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003794:	f103 030e 	add.w	r3, r3, #14
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f107 0210 	add.w	r2, r7, #16
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	461c      	mov	r4, r3
 80037aa:	4615      	mov	r5, r2
 80037ac:	4622      	mov	r2, r4
 80037ae:	462b      	mov	r3, r5
 80037b0:	2002      	movs	r0, #2
 80037b2:	f008 fedf 	bl	800c574 <HAL_FLASH_Program>
		for(i = 0; i < var_cnt; i++ ){
 80037b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037ba:	f103 030e 	add.w	r3, r3, #14
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80037c6:	f102 020e 	add.w	r2, r2, #14
 80037ca:	8013      	strh	r3, [r2, #0]
 80037cc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037d0:	f103 030e 	add.w	r3, r3, #14
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80037da:	f103 030a 	add.w	r3, r3, #10
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d3cb      	bcc.n	800377c <cfg_SaveSettings+0x1c8>
		}
		HAL_FLASH_Lock();
 80037e4:	f008 ff3c 	bl	800c660 <HAL_FLASH_Lock>

	}

	return;
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
}
 80037ec:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f8:	20000030 	.word	0x20000030
 80037fc:	200003e4 	.word	0x200003e4
 8003800:	08060000 	.word	0x08060000

08003804 <cfg_LoadSettings>:

void cfg_LoadSettings()
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	uint16_t i, j;
	uint16_t var_prop = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	80fb      	strh	r3, [r7, #6]
	uint16_t var_cnt = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	827b      	strh	r3, [r7, #18]
	uint16_t load_var_cnt = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	823b      	strh	r3, [r7, #16]
	uint32_t var_num = param_arr[0]; /* Number of stored parameters */
 8003816:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <cfg_LoadSettings+0x14c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]
	uint32_t var_crc = param_arr[1];
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <cfg_LoadSettings+0x14c>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60bb      	str	r3, [r7, #8]

	if( (var_num > 0) && (var_num < (CFG_MAX_SAVE_PAR_NUM - 2)) )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 808e 	beq.w	8003946 <cfg_LoadSettings+0x142>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003830:	4293      	cmp	r3, r2
 8003832:	f200 8088 	bhi.w	8003946 <cfg_LoadSettings+0x142>
	{
		//Count parameters to be saved
		//Nodes
		for( i = 0; i < cfg_info.node_num; i++ )
 8003836:	2300      	movs	r3, #0
 8003838:	82fb      	strh	r3, [r7, #22]
 800383a:	e029      	b.n	8003890 <cfg_LoadSettings+0x8c>
		{
			//Parameters (Variables)
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800383c:	2300      	movs	r3, #0
 800383e:	82bb      	strh	r3, [r7, #20]
 8003840:	e017      	b.n	8003872 <cfg_LoadSettings+0x6e>
			{
				cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 8003842:	8afa      	ldrh	r2, [r7, #22]
 8003844:	4943      	ldr	r1, [pc, #268]	; (8003954 <cfg_LoadSettings+0x150>)
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3310      	adds	r3, #16
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1dba      	adds	r2, r7, #6
 8003856:	8ab8      	ldrh	r0, [r7, #20]
 8003858:	2100      	movs	r1, #0
 800385a:	4798      	blx	r3
				if( (var_prop & CFG_VAR_PROP_CONST) != 0 ){
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <cfg_LoadSettings+0x68>
					var_cnt += 1;
 8003866:	8a7b      	ldrh	r3, [r7, #18]
 8003868:	3301      	adds	r3, #1
 800386a:	827b      	strh	r3, [r7, #18]
			for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 800386c:	8abb      	ldrh	r3, [r7, #20]
 800386e:	3301      	adds	r3, #1
 8003870:	82bb      	strh	r3, [r7, #20]
 8003872:	8afa      	ldrh	r2, [r7, #22]
 8003874:	4937      	ldr	r1, [pc, #220]	; (8003954 <cfg_LoadSettings+0x150>)
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3304      	adds	r3, #4
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	8aba      	ldrh	r2, [r7, #20]
 8003886:	429a      	cmp	r2, r3
 8003888:	d3db      	bcc.n	8003842 <cfg_LoadSettings+0x3e>
		for( i = 0; i < cfg_info.node_num; i++ )
 800388a:	8afb      	ldrh	r3, [r7, #22]
 800388c:	3301      	adds	r3, #1
 800388e:	82fb      	strh	r3, [r7, #22]
 8003890:	4b31      	ldr	r3, [pc, #196]	; (8003958 <cfg_LoadSettings+0x154>)
 8003892:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 8003896:	b29b      	uxth	r3, r3
 8003898:	8afa      	ldrh	r2, [r7, #22]
 800389a:	429a      	cmp	r2, r3
 800389c:	d3ce      	bcc.n	800383c <cfg_LoadSettings+0x38>
				}
			}
		}

		//volatile uint32_t t_crc = crc32_calc(0, &param_arr[2], var_cnt);
		if( (var_num == var_cnt) && (var_crc == crc32_calc(0, &param_arr[2], var_cnt)) )
 800389e:	8a7b      	ldrh	r3, [r7, #18]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d14f      	bne.n	8003946 <cfg_LoadSettings+0x142>
 80038a6:	8a7b      	ldrh	r3, [r7, #18]
 80038a8:	461a      	mov	r2, r3
 80038aa:	492c      	ldr	r1, [pc, #176]	; (800395c <cfg_LoadSettings+0x158>)
 80038ac:	2000      	movs	r0, #0
 80038ae:	f000 fafd 	bl	8003eac <crc32_calc>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d145      	bne.n	8003946 <cfg_LoadSettings+0x142>
		{
			for( i = 0; i < cfg_info.node_num; i++ )
 80038ba:	2300      	movs	r3, #0
 80038bc:	82fb      	strh	r3, [r7, #22]
 80038be:	e03a      	b.n	8003936 <cfg_LoadSettings+0x132>
			{
				//Parameters (Variables)
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 80038c0:	2300      	movs	r3, #0
 80038c2:	82bb      	strh	r3, [r7, #20]
 80038c4:	e028      	b.n	8003918 <cfg_LoadSettings+0x114>
				{
					cfg_NodeList[i].var_prop_func(j, NULL, &var_prop);
 80038c6:	8afa      	ldrh	r2, [r7, #22]
 80038c8:	4922      	ldr	r1, [pc, #136]	; (8003954 <cfg_LoadSettings+0x150>)
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3310      	adds	r3, #16
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	1dba      	adds	r2, r7, #6
 80038da:	8ab8      	ldrh	r0, [r7, #20]
 80038dc:	2100      	movs	r1, #0
 80038de:	4798      	blx	r3
					if( (var_prop & CFG_VAR_PROP_CONST) != 0 )
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d013      	beq.n	8003912 <cfg_LoadSettings+0x10e>
					{
						cfg_NodeList[i].var_set_func(j, &param_arr[2 + load_var_cnt]);
 80038ea:	8afa      	ldrh	r2, [r7, #22]
 80038ec:	4919      	ldr	r1, [pc, #100]	; (8003954 <cfg_LoadSettings+0x150>)
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	330c      	adds	r3, #12
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	8a3a      	ldrh	r2, [r7, #16]
 80038fe:	3202      	adds	r2, #2
 8003900:	0092      	lsls	r2, r2, #2
 8003902:	4913      	ldr	r1, [pc, #76]	; (8003950 <cfg_LoadSettings+0x14c>)
 8003904:	4411      	add	r1, r2
 8003906:	8aba      	ldrh	r2, [r7, #20]
 8003908:	4610      	mov	r0, r2
 800390a:	4798      	blx	r3
						load_var_cnt += 1;
 800390c:	8a3b      	ldrh	r3, [r7, #16]
 800390e:	3301      	adds	r3, #1
 8003910:	823b      	strh	r3, [r7, #16]
				for( j = 0; j < cfg_NodeList[i].var_num; j++ )
 8003912:	8abb      	ldrh	r3, [r7, #20]
 8003914:	3301      	adds	r3, #1
 8003916:	82bb      	strh	r3, [r7, #20]
 8003918:	8afa      	ldrh	r2, [r7, #22]
 800391a:	490e      	ldr	r1, [pc, #56]	; (8003954 <cfg_LoadSettings+0x150>)
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3304      	adds	r3, #4
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	8aba      	ldrh	r2, [r7, #20]
 800392c:	429a      	cmp	r2, r3
 800392e:	d3ca      	bcc.n	80038c6 <cfg_LoadSettings+0xc2>
			for( i = 0; i < cfg_info.node_num; i++ )
 8003930:	8afb      	ldrh	r3, [r7, #22]
 8003932:	3301      	adds	r3, #1
 8003934:	82fb      	strh	r3, [r7, #22]
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <cfg_LoadSettings+0x154>)
 8003938:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800393c:	b29b      	uxth	r3, r3
 800393e:	8afa      	ldrh	r2, [r7, #22]
 8003940:	429a      	cmp	r2, r3
 8003942:	d3bd      	bcc.n	80038c0 <cfg_LoadSettings+0xbc>
				}
			}
		}
	}

	return;
 8003944:	bf00      	nop
 8003946:	bf00      	nop
}
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	08060000 	.word	0x08060000
 8003954:	20000030 	.word	0x20000030
 8003958:	200003e4 	.word	0x200003e4
 800395c:	08060008 	.word	0x08060008

08003960 <cfg_ClearFwBuf>:

void cfg_ClearFwBuf()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8003964:	f008 fe5a 	bl	800c61c <HAL_FLASH_Unlock>
	//todo: calc sectors from addr
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8003968:	2102      	movs	r1, #2
 800396a:	2006      	movs	r0, #6
 800396c:	f008 ffc8 	bl	800c900 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_15, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_16, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_17, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_18, FLASH_VOLTAGE_RANGE_3);
	FLASH_Erase_Sector(FLASH_SECTOR_19, FLASH_VOLTAGE_RANGE_3);*/
	HAL_FLASH_Lock();
 8003970:	f008 fe76 	bl	800c660 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr = (uint32_t)&new_fw_start;
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <cfg_ClearFwBuf+0x24>)
 8003976:	4b04      	ldr	r3, [pc, #16]	; (8003988 <cfg_ClearFwBuf+0x28>)
 8003978:	601a      	str	r2, [r3, #0]
	cfg_new_fw_size = 0;
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <cfg_ClearFwBuf+0x2c>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

	return;
 8003980:	bf00      	nop
}
 8003982:	bd80      	pop	{r7, pc}
 8003984:	08040000 	.word	0x08040000
 8003988:	20000a30 	.word	0x20000a30
 800398c:	20000a34 	.word	0x20000a34

08003990 <cfg_WriteFwData>:

void cfg_WriteFwData(uint32_t data)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	HAL_FLASH_Unlock();
 8003998:	f008 fe40 	bl	800c61c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, cfg_new_fw_cur_addr, (uint64_t)data);
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <cfg_WriteFwData+0x44>)
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	461c      	mov	r4, r3
 80039a6:	4615      	mov	r5, r2
 80039a8:	4622      	mov	r2, r4
 80039aa:	462b      	mov	r3, r5
 80039ac:	2002      	movs	r0, #2
 80039ae:	f008 fde1 	bl	800c574 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80039b2:	f008 fe55 	bl	800c660 <HAL_FLASH_Lock>
	cfg_new_fw_cur_addr += 4;
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <cfg_WriteFwData+0x44>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <cfg_WriteFwData+0x44>)
 80039be:	6013      	str	r3, [r2, #0]
	cfg_new_fw_size += 4;
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <cfg_WriteFwData+0x48>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <cfg_WriteFwData+0x48>)
 80039c8:	6013      	str	r3, [r2, #0]

	return;
 80039ca:	bf00      	nop
}
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bdb0      	pop	{r4, r5, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000a30 	.word	0x20000a30
 80039d8:	20000a34 	.word	0x20000a34

080039dc <cfg_AddTxData>:

void cfg_AddTxData(uint16_t iface, uint8_t *data, uint32_t len)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	81fb      	strh	r3, [r7, #14]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	if( iface >= CFG_IFACE_NUM ){
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d83e      	bhi.n	8003a6e <cfg_AddTxData+0x92>
		return;
	}

	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 80039f0:	89fb      	ldrh	r3, [r7, #14]
 80039f2:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <cfg_AddTxData+0xa0>)
 80039f4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d831      	bhi.n	8003a72 <cfg_AddTxData+0x96>
		return;
	}
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[cfg_info.iface[iface].tx_buf_bytes], data, len);
 8003a0e:	89fa      	ldrh	r2, [r7, #14]
 8003a10:	89fb      	ldrh	r3, [r7, #14]
 8003a12:	491a      	ldr	r1, [pc, #104]	; (8003a7c <cfg_AddTxData+0xa0>)
 8003a14:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003a18:	fb00 f303 	mul.w	r3, r0, r3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003a28:	fb01 f202 	mul.w	r2, r1, r2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <cfg_AddTxData+0xa0>)
 8003a34:	4413      	add	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f012 fafe 	bl	801603c <memcpy>
	cfg_info.iface[iface].tx_buf_bytes += len;
 8003a40:	89fb      	ldrh	r3, [r7, #14]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <cfg_AddTxData+0xa0>)
 8003a44:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	440a      	add	r2, r1
 8003a5a:	4908      	ldr	r1, [pc, #32]	; (8003a7c <cfg_AddTxData+0xa0>)
 8003a5c:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a6a:	601a      	str	r2, [r3, #0]

	return;
 8003a6c:	e002      	b.n	8003a74 <cfg_AddTxData+0x98>
		return;
 8003a6e:	bf00      	nop
 8003a70:	e000      	b.n	8003a74 <cfg_AddTxData+0x98>
		return;
 8003a72:	bf00      	nop
}
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	200003e4 	.word	0x200003e4

08003a80 <cfg_IntertTxData>:

void cfg_IntertTxData(uint16_t iface, uint32_t pos, uint8_t *data, uint32_t len)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b0c5      	sub	sp, #276	; 0x114
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4604      	mov	r4, r0
 8003a88:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8003a8c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8003a90:	6001      	str	r1, [r0, #0]
 8003a92:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003a96:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8003a9a:	600a      	str	r2, [r1, #0]
 8003a9c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003aa0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aaa:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003aae:	4622      	mov	r2, r4
 8003ab0:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( iface >= CFG_IFACE_NUM ){
 8003ab2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ab6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f200 80c0 	bhi.w	8003c42 <cfg_IntertTxData+0x1c2>
		return;
	}
	if( len > (CFG_BUF_SIZE - cfg_info.iface[iface].tx_buf_bytes) ){
 8003ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ac6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	4a61      	ldr	r2, [pc, #388]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003ace:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003ae2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003ae6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f200 80aa 	bhi.w	8003c46 <cfg_IntertTxData+0x1c6>
		return;
	}
	if( pos >= CFG_BUF_SIZE ){
 8003af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2bff      	cmp	r3, #255	; 0xff
 8003afe:	f200 80a4 	bhi.w	8003c4a <cfg_IntertTxData+0x1ca>
	/*tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes - pos);
	if( tmp_buf == 0 )
	{
		tmp_buf = 1;
	}*/
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[pos], cfg_info.iface[iface].tx_buf_bytes - pos);
 8003b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b06:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003b10:	fb03 f202 	mul.w	r2, r3, r2
 8003b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b24:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003b26:	1899      	adds	r1, r3, r2
 8003b28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b2c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	4a48      	ldr	r2, [pc, #288]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003b34:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003b38:	fb00 f303 	mul.w	r3, r0, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	f107 0310 	add.w	r3, r7, #16
 8003b54:	4618      	mov	r0, r3
 8003b56:	f012 fa71 	bl	801603c <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos], data, len);
 8003b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b5e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003b68:	fb03 f202 	mul.w	r2, r3, r2
 8003b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b7c:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003b7e:	1898      	adds	r0, r3, r2
 8003b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b84:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8003b88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	f012 fa52 	bl	801603c <memcpy>
	memcpy((uint8_t*)&cfg_info.iface[iface].tx_buf[pos + len], tmp_buf, cfg_info.iface[iface].tx_buf_bytes - pos);
 8003b98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b9c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ba6:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8003baa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bb2:	6809      	ldr	r1, [r1, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003bbc:	fb01 f202 	mul.w	r2, r1, r2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003bc6:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003bc8:	1898      	adds	r0, r3, r2
 8003bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bce:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003bd6:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	f107 0310 	add.w	r3, r7, #16
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f012 fa20 	bl	801603c <memcpy>
	//free(tmp_buf);
	cfg_info.iface[iface].tx_buf_bytes += len;
 8003bfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c00:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003c08:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c1c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003c26:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	4909      	ldr	r1, [pc, #36]	; (8003c54 <cfg_IntertTxData+0x1d4>)
 8003c30:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003c34:	fb00 f303 	mul.w	r3, r0, r3
 8003c38:	440b      	add	r3, r1
 8003c3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c3e:	601a      	str	r2, [r3, #0]

	return;
 8003c40:	e004      	b.n	8003c4c <cfg_IntertTxData+0x1cc>
		return;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <cfg_IntertTxData+0x1cc>
		return;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <cfg_IntertTxData+0x1cc>
		return;
 8003c4a:	bf00      	nop
}
 8003c4c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd90      	pop	{r4, r7, pc}
 8003c54:	200003e4 	.word	0x200003e4

08003c58 <cfg_RemTxData>:

void cfg_RemTxData(uint16_t iface, uint32_t len)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b0c2      	sub	sp, #264	; 0x108
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4602      	mov	r2, r0
 8003c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c68:	6019      	str	r1, [r3, #0]
 8003c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c6e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c72:	801a      	strh	r2, [r3, #0]
	return;
#endif //NO_CFG

	uint8_t tmp_buf[CFG_BUF_SIZE];

	if( (len > cfg_info.iface[iface].tx_buf_bytes)
 8003c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c78:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	4a4a      	ldr	r2, [pc, #296]	; (8003da8 <cfg_RemTxData+0x150>)
 8003c80:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003c94:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d87f      	bhi.n	8003d9e <cfg_RemTxData+0x146>
			|| (len == 0) || (cfg_info.iface[iface].tx_buf_bytes == 0) ){
 8003c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d078      	beq.n	8003d9e <cfg_RemTxData+0x146>
 8003cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	4a3c      	ldr	r2, [pc, #240]	; (8003da8 <cfg_RemTxData+0x150>)
 8003cb8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d068      	beq.n	8003d9e <cfg_RemTxData+0x146>
		return;
	}
	cfg_info.iface[iface].tx_buf_bytes -= len;
 8003ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <cfg_RemTxData+0x150>)
 8003cd8:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cec:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003cf6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	1a8a      	subs	r2, r1, r2
 8003cfe:	492a      	ldr	r1, [pc, #168]	; (8003da8 <cfg_RemTxData+0x150>)
 8003d00:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003d04:	fb00 f303 	mul.w	r3, r0, r3
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d0e:	601a      	str	r2, [r3, #0]
	//tmp_buf = malloc(cfg_info.iface[iface].tx_buf_bytes);
	memcpy(tmp_buf, (uint8_t*)&cfg_info.iface[iface].tx_buf[len], cfg_info.iface[iface].tx_buf_bytes);
 8003d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d14:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003d1e:	fb03 f202 	mul.w	r2, r3, r2
 8003d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <cfg_RemTxData+0x150>)
 8003d34:	1899      	adds	r1, r3, r2
 8003d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d3a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <cfg_RemTxData+0x150>)
 8003d42:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8003d46:	fb00 f303 	mul.w	r3, r0, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4618      	mov	r0, r3
 8003d58:	f012 f970 	bl	801603c <memcpy>
	memcpy((uint8_t*)cfg_info.iface[iface].tx_buf, tmp_buf, cfg_info.iface[iface].tx_buf_bytes);
 8003d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d60:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d72:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <cfg_RemTxData+0x150>)
 8003d74:	1898      	adds	r0, r3, r2
 8003d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d7a:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <cfg_RemTxData+0x150>)
 8003d82:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4619      	mov	r1, r3
 8003d98:	f012 f950 	bl	801603c <memcpy>
	//free(tmp_buf);

	return;
 8003d9c:	e000      	b.n	8003da0 <cfg_RemTxData+0x148>
		return;
 8003d9e:	bf00      	nop
}
 8003da0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	200003e4 	.word	0x200003e4

08003dac <cfg_TxDataCh0>:

void cfg_TxDataCh0(uint8_t *data, uint32_t len)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f005 fa04 	bl	80091c8 <modem_TrmData>
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8003dc0:	bf00      	nop
}
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <cfg_TxDataCh1USB>:

void cfg_TxDataCh1USB(uint8_t *data, uint32_t len)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
#ifdef NO_CFG
	return;
#endif //NO_CFG

	CDC_Transmit_FS(data, (uint16_t)len);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f011 fcab 	bl	8015734 <CDC_Transmit_FS>
	//modem_TrmData(SYSTEM_CFG_MODEM_CH, data, len);
	//HAL_UART_Transmit(&HAL_CFG_UART, data, len, HAL_MAX_DELAY);

	return;
 8003dde:	bf00      	nop
}
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <crc16_calc>:
	    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
	    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
};

uint16_t crc16_calc(uint8_t *buf, uint16_t len)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
	uint8_t *data = buf;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60fb      	str	r3, [r7, #12]
	uint16_t crc = 0xFFFF;
 8003df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dfc:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003dfe:	e00e      	b.n	8003e1e <crc16_calc+0x36>
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (*data++ & 0xFF)];
 8003e00:	897b      	ldrh	r3, [r7, #10]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	b2d9      	uxtb	r1, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1c58      	adds	r0, r3, #1
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	404b      	eors	r3, r1
 8003e14:	4908      	ldr	r1, [pc, #32]	; (8003e38 <crc16_calc+0x50>)
 8003e16:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e1a:	4053      	eors	r3, r2
 8003e1c:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	1e5a      	subs	r2, r3, #1
 8003e22:	807a      	strh	r2, [r7, #2]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1eb      	bne.n	8003e00 <crc16_calc+0x18>
	return crc;
 8003e28:	897b      	ldrh	r3, [r7, #10]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	08016b8c 	.word	0x08016b8c

08003e3c <crc16_RingBuf>:

uint16_t crc16_RingBuf(uint8_t *buf, uint16_t tail, uint16_t len, uint16_t mask)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
	uint16_t crc = 0xFFFF;
 8003e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e5a:	82fb      	strh	r3, [r7, #22]
	while( len-- )
 8003e5c:	e017      	b.n	8003e8e <crc16_RingBuf+0x52>
	{
		crc = ( crc >> 8 ) ^ crc16_table[(crc & 0xFF) ^ (buf[tail] & 0xFF)];
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	8afb      	ldrh	r3, [r7, #22]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	4401      	add	r1, r0
 8003e6e:	7809      	ldrb	r1, [r1, #0]
 8003e70:	404b      	eors	r3, r1
 8003e72:	490d      	ldr	r1, [pc, #52]	; (8003ea8 <crc16_RingBuf+0x6c>)
 8003e74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003e78:	4053      	eors	r3, r2
 8003e7a:	82fb      	strh	r3, [r7, #22]
		tail = (tail + 1) & mask;
 8003e7c:	897b      	ldrh	r3, [r7, #10]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	817b      	strh	r3, [r7, #10]
	while( len-- )
 8003e8e:	893b      	ldrh	r3, [r7, #8]
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	813a      	strh	r2, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e2      	bne.n	8003e5e <crc16_RingBuf+0x22>
	}
	return crc;
 8003e98:	8afb      	ldrh	r3, [r7, #22]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	08016b8c 	.word	0x08016b8c

08003eac <crc32_calc>:
  0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
  0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

uint32_t crc32_calc (uint16_t init, uint32_t *buf, uint16_t len)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	80fb      	strh	r3, [r7, #6]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	80bb      	strh	r3, [r7, #4]
  uint32_t crc = init;
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	60fb      	str	r3, [r7, #12]
  while (len--)
 8003ec0:	e00f      	b.n	8003ee2 <crc32_calc+0x36>
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	0e19      	lsrs	r1, r3, #24
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	404b      	eors	r3, r1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	490a      	ldr	r1, [pc, #40]	; (8003efc <crc32_calc+0x50>)
 8003ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed8:	4053      	eors	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
      buf++;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	603b      	str	r3, [r7, #0]
  while (len--)
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	80ba      	strh	r2, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ea      	bne.n	8003ec2 <crc32_calc+0x16>
    }
  return crc;
 8003eec:	68fb      	ldr	r3, [r7, #12]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	08016d8c 	.word	0x08016d8c

08003f00 <leds_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void leds_Timer(uint32_t res)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
#ifdef NO_LEDS
	return;
#endif //NO_LEDS

	leds_time_counter += res;
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <leds_Timer+0x70>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <leds_Timer+0x70>)
 8003f12:	6013      	str	r3, [r2, #0]

	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e020      	b.n	8003f5c <leds_Timer+0x5c>
	{
		if( leds_info.leds[i].timer )
 8003f1a:	4916      	ldr	r1, [pc, #88]	; (8003f74 <leds_Timer+0x74>)
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	3304      	adds	r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <leds_Timer+0x56>
			leds_info.leds[i].timer--;
 8003f30:	4910      	ldr	r1, [pc, #64]	; (8003f74 <leds_Timer+0x74>)
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3304      	adds	r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1e59      	subs	r1, r3, #1
 8003f44:	480b      	ldr	r0, [pc, #44]	; (8003f74 <leds_Timer+0x74>)
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4403      	add	r3, r0
 8003f52:	3304      	adds	r3, #4
 8003f54:	6019      	str	r1, [r3, #0]
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0db      	beq.n	8003f1a <leds_Timer+0x1a>
	}
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	20000ad0 	.word	0x20000ad0
 8003f74:	20000a3c 	.word	0x20000a3c

08003f78 <leds_InitTask>:
  * @param  None
  * @retval 1 if success, 0 if failed
  */
/**********************************************************************/
uint8_t leds_InitTask()
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	leds_info.leds[LED_SIM_BLUE].type = led_simple;
 8003f7e:	4b8f      	ldr	r3, [pc, #572]	; (80041bc <leds_InitTask+0x244>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
	leds_info.leds[LED_SIM_BLUE].sim_port = BLUE_LED_GPIO_Port;
 8003f84:	4b8d      	ldr	r3, [pc, #564]	; (80041bc <leds_InitTask+0x244>)
 8003f86:	4a8e      	ldr	r2, [pc, #568]	; (80041c0 <leds_InitTask+0x248>)
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c
	leds_info.leds[LED_SIM_BLUE].sim_pin = BLUE_LED_Pin;
 8003f8a:	4b8c      	ldr	r3, [pc, #560]	; (80041bc <leds_InitTask+0x244>)
 8003f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	//Initialize beginning state
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	e362      	b.n	8004660 <leds_InitTask+0x6e8>
	{
		//SIMPLE
		if( leds_info.leds[i].type == led_simple )
 8003f9a:	4988      	ldr	r1, [pc, #544]	; (80041bc <leds_InitTask+0x244>)
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d12b      	bne.n	8004008 <leds_InitTask+0x90>
		{
			leds_info.leds[i].state = led_st0;
 8003fb0:	4982      	ldr	r1, [pc, #520]	; (80041bc <leds_InitTask+0x244>)
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
			leds_info.leds[i].mode = led_toggle;
 8003fc4:	497d      	ldr	r1, [pc, #500]	; (80041bc <leds_InitTask+0x244>)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8003fd8:	4978      	ldr	r1, [pc, #480]	; (80041bc <leds_InitTask+0x244>)
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	333c      	adds	r3, #60	; 0x3c
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	4974      	ldr	r1, [pc, #464]	; (80041bc <leds_InitTask+0x244>)
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3340      	adds	r3, #64	; 0x40
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2200      	movs	r2, #0
 8004000:	4619      	mov	r1, r3
 8004002:	f008 ff45 	bl	800ce90 <HAL_GPIO_WritePin>
 8004006:	e328      	b.n	800465a <leds_InitTask+0x6e2>
		}
		//PWM
		else if( leds_info.leds[i].type == led_pwm )
 8004008:	496c      	ldr	r1, [pc, #432]	; (80041bc <leds_InitTask+0x244>)
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	440b      	add	r3, r1
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	f040 80d2 	bne.w	80041c4 <leds_InitTask+0x24c>
		{
			if( leds_info.leds[i].pwmch0_tim != NULL )
 8004020:	4966      	ldr	r1, [pc, #408]	; (80041bc <leds_InitTask+0x244>)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3344      	adds	r3, #68	; 0x44
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80c0 	beq.w	80041b8 <leds_InitTask+0x240>
			{
				leds_info.leds[i].state = led_st0;
 8004038:	4960      	ldr	r1, [pc, #384]	; (80041bc <leds_InitTask+0x244>)
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	4413      	add	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	440b      	add	r3, r1
 8004046:	3301      	adds	r3, #1
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].mode = led_toggle;
 800404c:	495b      	ldr	r1, [pc, #364]	; (80041bc <leds_InitTask+0x244>)
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	3302      	adds	r3, #2
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_value0 = LEDS_MIN_PWM_VALUE;
 8004060:	4956      	ldr	r1, [pc, #344]	; (80041bc <leds_InitTask+0x244>)
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	330c      	adds	r3, #12
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8004074:	4951      	ldr	r1, [pc, #324]	; (80041bc <leds_InitTask+0x244>)
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	3308      	adds	r3, #8
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch) != HAL_OK )
 800408a:	494c      	ldr	r1, [pc, #304]	; (80041bc <leds_InitTask+0x244>)
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	3344      	adds	r3, #68	; 0x44
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	4947      	ldr	r1, [pc, #284]	; (80041bc <leds_InitTask+0x244>)
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	440b      	add	r3, r1
 80040aa:	3348      	adds	r3, #72	; 0x48
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	f00b feda 	bl	800fe68 <HAL_TIM_PWM_Start>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <leds_InitTask+0x146>
				{
					return 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e2d5      	b.n	800466a <leds_InitTask+0x6f2>
				}
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
 80040be:	493f      	ldr	r1, [pc, #252]	; (80041bc <leds_InitTask+0x244>)
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	3348      	adds	r3, #72	; 0x48
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <leds_InitTask+0x18a>
 80040d4:	4939      	ldr	r1, [pc, #228]	; (80041bc <leds_InitTask+0x244>)
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	440b      	add	r3, r1
 80040e2:	330c      	adds	r3, #12
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2d8      	uxtb	r0, r3
 80040e8:	4934      	ldr	r1, [pc, #208]	; (80041bc <leds_InitTask+0x244>)
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	3344      	adds	r3, #68	; 0x44
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4602      	mov	r2, r0
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004100:	e2ab      	b.n	800465a <leds_InitTask+0x6e2>
 8004102:	492e      	ldr	r1, [pc, #184]	; (80041bc <leds_InitTask+0x244>)
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	3348      	adds	r3, #72	; 0x48
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d116      	bne.n	8004146 <leds_InitTask+0x1ce>
 8004118:	4928      	ldr	r1, [pc, #160]	; (80041bc <leds_InitTask+0x244>)
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	330c      	adds	r3, #12
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2d8      	uxtb	r0, r3
 800412c:	4923      	ldr	r1, [pc, #140]	; (80041bc <leds_InitTask+0x244>)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	3344      	adds	r3, #68	; 0x44
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4603      	mov	r3, r0
 8004142:	6393      	str	r3, [r2, #56]	; 0x38
 8004144:	e289      	b.n	800465a <leds_InitTask+0x6e2>
 8004146:	491d      	ldr	r1, [pc, #116]	; (80041bc <leds_InitTask+0x244>)
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	3348      	adds	r3, #72	; 0x48
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d116      	bne.n	800418a <leds_InitTask+0x212>
 800415c:	4917      	ldr	r1, [pc, #92]	; (80041bc <leds_InitTask+0x244>)
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	330c      	adds	r3, #12
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2d8      	uxtb	r0, r3
 8004170:	4912      	ldr	r1, [pc, #72]	; (80041bc <leds_InitTask+0x244>)
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3344      	adds	r3, #68	; 0x44
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4603      	mov	r3, r0
 8004186:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004188:	e267      	b.n	800465a <leds_InitTask+0x6e2>
 800418a:	490c      	ldr	r1, [pc, #48]	; (80041bc <leds_InitTask+0x244>)
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	440b      	add	r3, r1
 8004198:	330c      	adds	r3, #12
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2d8      	uxtb	r0, r3
 800419e:	4907      	ldr	r1, [pc, #28]	; (80041bc <leds_InitTask+0x244>)
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	440b      	add	r3, r1
 80041ac:	3344      	adds	r3, #68	; 0x44
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4603      	mov	r3, r0
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	e250      	b.n	800465a <leds_InitTask+0x6e2>
			}
			else
			{
				return 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e256      	b.n	800466a <leds_InitTask+0x6f2>
 80041bc:	20000a3c 	.word	0x20000a3c
 80041c0:	40020800 	.word	0x40020800
			}
		}
		//RGB
		else if( leds_info.leds[i].type == led_rgb )
 80041c4:	49b7      	ldr	r1, [pc, #732]	; (80044a4 <leds_InitTask+0x52c>)
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	440b      	add	r3, r1
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	f040 823f 	bne.w	800465a <leds_InitTask+0x6e2>
		{
			if( (leds_info.leds[i].pwmch0_tim != NULL) && (leds_info.leds[i].pwmch1_tim != NULL) && (leds_info.leds[i].pwmch2_tim != NULL) )
 80041dc:	49b1      	ldr	r1, [pc, #708]	; (80044a4 <leds_InitTask+0x52c>)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	3344      	adds	r3, #68	; 0x44
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8231 	beq.w	8004656 <leds_InitTask+0x6de>
 80041f4:	49ab      	ldr	r1, [pc, #684]	; (80044a4 <leds_InitTask+0x52c>)
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	334c      	adds	r3, #76	; 0x4c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8225 	beq.w	8004656 <leds_InitTask+0x6de>
 800420c:	49a5      	ldr	r1, [pc, #660]	; (80044a4 <leds_InitTask+0x52c>)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	3354      	adds	r3, #84	; 0x54
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8219 	beq.w	8004656 <leds_InitTask+0x6de>
			{
				leds_info.leds[i].state = led_st0;
 8004224:	499f      	ldr	r1, [pc, #636]	; (80044a4 <leds_InitTask+0x52c>)
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	440b      	add	r3, r1
 8004232:	3301      	adds	r3, #1
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].mode = led_toggle;
 8004238:	499a      	ldr	r1, [pc, #616]	; (80044a4 <leds_InitTask+0x52c>)
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	3302      	adds	r3, #2
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_value0 = LEDS_MIN_PWM_VALUE;
 800424c:	4995      	ldr	r1, [pc, #596]	; (80044a4 <leds_InitTask+0x52c>)
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	440b      	add	r3, r1
 800425a:	330c      	adds	r3, #12
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch0_cur_value = (float)LEDS_MIN_PWM_VALUE;
 8004260:	4990      	ldr	r1, [pc, #576]	; (80044a4 <leds_InitTask+0x52c>)
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	440b      	add	r3, r1
 800426e:	3308      	adds	r3, #8
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
				leds_info.leds[i].pwmch1_value0 = LEDS_MIN_PWM_VALUE;
 8004276:	498b      	ldr	r1, [pc, #556]	; (80044a4 <leds_InitTask+0x52c>)
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	440b      	add	r3, r1
 8004284:	3318      	adds	r3, #24
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch1_cur_value = (float)LEDS_MIN_PWM_VALUE;
 800428a:	4986      	ldr	r1, [pc, #536]	; (80044a4 <leds_InitTask+0x52c>)
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	3314      	adds	r3, #20
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
				leds_info.leds[i].pwmch2_value0 = LEDS_MIN_PWM_VALUE;
 80042a0:	4980      	ldr	r1, [pc, #512]	; (80044a4 <leds_InitTask+0x52c>)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	3324      	adds	r3, #36	; 0x24
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
				leds_info.leds[i].pwmch2_cur_value = (float)LEDS_MIN_PWM_VALUE;
 80042b4:	497b      	ldr	r1, [pc, #492]	; (80044a4 <leds_InitTask+0x52c>)
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	3320      	adds	r3, #32
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch) != HAL_OK )
 80042ca:	4976      	ldr	r1, [pc, #472]	; (80044a4 <leds_InitTask+0x52c>)
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3344      	adds	r3, #68	; 0x44
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4971      	ldr	r1, [pc, #452]	; (80044a4 <leds_InitTask+0x52c>)
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4413      	add	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	440b      	add	r3, r1
 80042ea:	3348      	adds	r3, #72	; 0x48
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	f00b fdba 	bl	800fe68 <HAL_TIM_PWM_Start>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <leds_InitTask+0x386>
				{
					return 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e1b5      	b.n	800466a <leds_InitTask+0x6f2>
				}
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch1_tim, leds_info.leds[i].pwmch1_timch) != HAL_OK )
 80042fe:	4969      	ldr	r1, [pc, #420]	; (80044a4 <leds_InitTask+0x52c>)
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	334c      	adds	r3, #76	; 0x4c
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4964      	ldr	r1, [pc, #400]	; (80044a4 <leds_InitTask+0x52c>)
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	3350      	adds	r3, #80	; 0x50
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4619      	mov	r1, r3
 8004324:	f00b fda0 	bl	800fe68 <HAL_TIM_PWM_Start>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <leds_InitTask+0x3ba>
				{
					return 0;
 800432e:	2300      	movs	r3, #0
 8004330:	e19b      	b.n	800466a <leds_InitTask+0x6f2>
				}
				if( HAL_TIM_PWM_Start(leds_info.leds[i].pwmch2_tim, leds_info.leds[i].pwmch2_timch) != HAL_OK )
 8004332:	495c      	ldr	r1, [pc, #368]	; (80044a4 <leds_InitTask+0x52c>)
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	3354      	adds	r3, #84	; 0x54
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	4957      	ldr	r1, [pc, #348]	; (80044a4 <leds_InitTask+0x52c>)
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4413      	add	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	440b      	add	r3, r1
 8004352:	3358      	adds	r3, #88	; 0x58
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	f00b fd86 	bl	800fe68 <HAL_TIM_PWM_Start>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <leds_InitTask+0x3ee>
				{
					return 0;
 8004362:	2300      	movs	r3, #0
 8004364:	e181      	b.n	800466a <leds_InitTask+0x6f2>
				}
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim, leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
 8004366:	494f      	ldr	r1, [pc, #316]	; (80044a4 <leds_InitTask+0x52c>)
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	3348      	adds	r3, #72	; 0x48
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d116      	bne.n	80043aa <leds_InitTask+0x432>
 800437c:	4949      	ldr	r1, [pc, #292]	; (80044a4 <leds_InitTask+0x52c>)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	330c      	adds	r3, #12
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b2d8      	uxtb	r0, r3
 8004390:	4944      	ldr	r1, [pc, #272]	; (80044a4 <leds_InitTask+0x52c>)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	4413      	add	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	440b      	add	r3, r1
 800439e:	3344      	adds	r3, #68	; 0x44
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4602      	mov	r2, r0
 80043a6:	635a      	str	r2, [r3, #52]	; 0x34
 80043a8:	e059      	b.n	800445e <leds_InitTask+0x4e6>
 80043aa:	493e      	ldr	r1, [pc, #248]	; (80044a4 <leds_InitTask+0x52c>)
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	440b      	add	r3, r1
 80043b8:	3348      	adds	r3, #72	; 0x48
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d116      	bne.n	80043ee <leds_InitTask+0x476>
 80043c0:	4938      	ldr	r1, [pc, #224]	; (80044a4 <leds_InitTask+0x52c>)
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	440b      	add	r3, r1
 80043ce:	330c      	adds	r3, #12
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b2d8      	uxtb	r0, r3
 80043d4:	4933      	ldr	r1, [pc, #204]	; (80044a4 <leds_InitTask+0x52c>)
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	3344      	adds	r3, #68	; 0x44
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4603      	mov	r3, r0
 80043ea:	6393      	str	r3, [r2, #56]	; 0x38
 80043ec:	e037      	b.n	800445e <leds_InitTask+0x4e6>
 80043ee:	492d      	ldr	r1, [pc, #180]	; (80044a4 <leds_InitTask+0x52c>)
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	440b      	add	r3, r1
 80043fc:	3348      	adds	r3, #72	; 0x48
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d116      	bne.n	8004432 <leds_InitTask+0x4ba>
 8004404:	4927      	ldr	r1, [pc, #156]	; (80044a4 <leds_InitTask+0x52c>)
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	330c      	adds	r3, #12
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2d8      	uxtb	r0, r3
 8004418:	4922      	ldr	r1, [pc, #136]	; (80044a4 <leds_InitTask+0x52c>)
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	440b      	add	r3, r1
 8004426:	3344      	adds	r3, #68	; 0x44
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4603      	mov	r3, r0
 800442e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004430:	e015      	b.n	800445e <leds_InitTask+0x4e6>
 8004432:	491c      	ldr	r1, [pc, #112]	; (80044a4 <leds_InitTask+0x52c>)
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	330c      	adds	r3, #12
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2d8      	uxtb	r0, r3
 8004446:	4917      	ldr	r1, [pc, #92]	; (80044a4 <leds_InitTask+0x52c>)
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	3344      	adds	r3, #68	; 0x44
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4603      	mov	r3, r0
 800445c:	6413      	str	r3, [r2, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim, leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value0);
 800445e:	4911      	ldr	r1, [pc, #68]	; (80044a4 <leds_InitTask+0x52c>)
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	440b      	add	r3, r1
 800446c:	3350      	adds	r3, #80	; 0x50
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d119      	bne.n	80044a8 <leds_InitTask+0x530>
 8004474:	490b      	ldr	r1, [pc, #44]	; (80044a4 <leds_InitTask+0x52c>)
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	3318      	adds	r3, #24
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b2d8      	uxtb	r0, r3
 8004488:	4906      	ldr	r1, [pc, #24]	; (80044a4 <leds_InitTask+0x52c>)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	334c      	adds	r3, #76	; 0x4c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4602      	mov	r2, r0
 800449e:	635a      	str	r2, [r3, #52]	; 0x34
 80044a0:	e05c      	b.n	800455c <leds_InitTask+0x5e4>
 80044a2:	bf00      	nop
 80044a4:	20000a3c 	.word	0x20000a3c
 80044a8:	4972      	ldr	r1, [pc, #456]	; (8004674 <leds_InitTask+0x6fc>)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	440b      	add	r3, r1
 80044b6:	3350      	adds	r3, #80	; 0x50
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d116      	bne.n	80044ec <leds_InitTask+0x574>
 80044be:	496d      	ldr	r1, [pc, #436]	; (8004674 <leds_InitTask+0x6fc>)
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	440b      	add	r3, r1
 80044cc:	3318      	adds	r3, #24
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	b2d8      	uxtb	r0, r3
 80044d2:	4968      	ldr	r1, [pc, #416]	; (8004674 <leds_InitTask+0x6fc>)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	334c      	adds	r3, #76	; 0x4c
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4603      	mov	r3, r0
 80044e8:	6393      	str	r3, [r2, #56]	; 0x38
 80044ea:	e037      	b.n	800455c <leds_InitTask+0x5e4>
 80044ec:	4961      	ldr	r1, [pc, #388]	; (8004674 <leds_InitTask+0x6fc>)
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	3350      	adds	r3, #80	; 0x50
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d116      	bne.n	8004530 <leds_InitTask+0x5b8>
 8004502:	495c      	ldr	r1, [pc, #368]	; (8004674 <leds_InitTask+0x6fc>)
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	3318      	adds	r3, #24
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2d8      	uxtb	r0, r3
 8004516:	4957      	ldr	r1, [pc, #348]	; (8004674 <leds_InitTask+0x6fc>)
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	440b      	add	r3, r1
 8004524:	334c      	adds	r3, #76	; 0x4c
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4603      	mov	r3, r0
 800452c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800452e:	e015      	b.n	800455c <leds_InitTask+0x5e4>
 8004530:	4950      	ldr	r1, [pc, #320]	; (8004674 <leds_InitTask+0x6fc>)
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	3318      	adds	r3, #24
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	494b      	ldr	r1, [pc, #300]	; (8004674 <leds_InitTask+0x6fc>)
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	334c      	adds	r3, #76	; 0x4c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4603      	mov	r3, r0
 800455a:	6413      	str	r3, [r2, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim, leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value0);
 800455c:	4945      	ldr	r1, [pc, #276]	; (8004674 <leds_InitTask+0x6fc>)
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4413      	add	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	440b      	add	r3, r1
 800456a:	3358      	adds	r3, #88	; 0x58
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <leds_InitTask+0x628>
 8004572:	4940      	ldr	r1, [pc, #256]	; (8004674 <leds_InitTask+0x6fc>)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	3324      	adds	r3, #36	; 0x24
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b2d8      	uxtb	r0, r3
 8004586:	493b      	ldr	r1, [pc, #236]	; (8004674 <leds_InitTask+0x6fc>)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	4413      	add	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	440b      	add	r3, r1
 8004594:	3354      	adds	r3, #84	; 0x54
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4602      	mov	r2, r0
 800459c:	635a      	str	r2, [r3, #52]	; 0x34
 800459e:	e05c      	b.n	800465a <leds_InitTask+0x6e2>
 80045a0:	4934      	ldr	r1, [pc, #208]	; (8004674 <leds_InitTask+0x6fc>)
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	440b      	add	r3, r1
 80045ae:	3358      	adds	r3, #88	; 0x58
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d116      	bne.n	80045e4 <leds_InitTask+0x66c>
 80045b6:	492f      	ldr	r1, [pc, #188]	; (8004674 <leds_InitTask+0x6fc>)
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4413      	add	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	440b      	add	r3, r1
 80045c4:	3324      	adds	r3, #36	; 0x24
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b2d8      	uxtb	r0, r3
 80045ca:	492a      	ldr	r1, [pc, #168]	; (8004674 <leds_InitTask+0x6fc>)
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	4413      	add	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	440b      	add	r3, r1
 80045d8:	3354      	adds	r3, #84	; 0x54
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4603      	mov	r3, r0
 80045e0:	6393      	str	r3, [r2, #56]	; 0x38
 80045e2:	e03a      	b.n	800465a <leds_InitTask+0x6e2>
 80045e4:	4923      	ldr	r1, [pc, #140]	; (8004674 <leds_InitTask+0x6fc>)
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	440b      	add	r3, r1
 80045f2:	3358      	adds	r3, #88	; 0x58
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d116      	bne.n	8004628 <leds_InitTask+0x6b0>
 80045fa:	491e      	ldr	r1, [pc, #120]	; (8004674 <leds_InitTask+0x6fc>)
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	3324      	adds	r3, #36	; 0x24
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2d8      	uxtb	r0, r3
 800460e:	4919      	ldr	r1, [pc, #100]	; (8004674 <leds_InitTask+0x6fc>)
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	440b      	add	r3, r1
 800461c:	3354      	adds	r3, #84	; 0x54
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4603      	mov	r3, r0
 8004624:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004626:	e018      	b.n	800465a <leds_InitTask+0x6e2>
 8004628:	4912      	ldr	r1, [pc, #72]	; (8004674 <leds_InitTask+0x6fc>)
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	3324      	adds	r3, #36	; 0x24
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b2d8      	uxtb	r0, r3
 800463c:	490d      	ldr	r1, [pc, #52]	; (8004674 <leds_InitTask+0x6fc>)
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	4413      	add	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	440b      	add	r3, r1
 800464a:	3354      	adds	r3, #84	; 0x54
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4603      	mov	r3, r0
 8004652:	6413      	str	r3, [r2, #64]	; 0x40
 8004654:	e001      	b.n	800465a <leds_InitTask+0x6e2>
			}
			else
			{
				return 0;
 8004656:	2300      	movs	r3, #0
 8004658:	e007      	b.n	800466a <leds_InitTask+0x6f2>
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3301      	adds	r3, #1
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f43f ac99 	beq.w	8003f9a <leds_InitTask+0x22>
			}
		}
	}

	return 1;
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000a3c 	.word	0x20000a3c

08004678 <leds_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void leds_Task(void)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
#ifdef NO_LEDS
	return;
#endif //NO_LEDS

	//Handle leds
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	f002 bdc6 	b.w	8007212 <leds_Task+0x2b9a>
	{
		//Simple led
		//************************************************************************************************
		if( leds_info.leds[i].type == led_simple )
 8004686:	499e      	ldr	r1, [pc, #632]	; (8004900 <leds_Task+0x288>)
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	4413      	add	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	440b      	add	r3, r1
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 8133 	bne.w	8004904 <leds_Task+0x28c>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 800469e:	4998      	ldr	r1, [pc, #608]	; (8004900 <leds_Task+0x288>)
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	3302      	adds	r3, #2
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f042 85aa 	bne.w	800720c <leds_Task+0x2b94>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 80046b8:	4991      	ldr	r1, [pc, #580]	; (8004900 <leds_Task+0x288>)
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	440b      	add	r3, r1
 80046c6:	3301      	adds	r3, #1
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d164      	bne.n	800479a <leds_Task+0x122>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 80046d0:	498b      	ldr	r1, [pc, #556]	; (8004900 <leds_Task+0x288>)
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4413      	add	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	440b      	add	r3, r1
 80046de:	3304      	adds	r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f042 8592 	bne.w	800720c <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 80046e8:	4985      	ldr	r1, [pc, #532]	; (8004900 <leds_Task+0x288>)
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	440b      	add	r3, r1
 80046f6:	3301      	adds	r3, #1
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
						if( leds_info.leds[i].pwmch0_value1 > 0 ) {
 80046fc:	4980      	ldr	r1, [pc, #512]	; (8004900 <leds_Task+0x288>)
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	4413      	add	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	330d      	adds	r3, #13
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d017      	beq.n	8004744 <leds_Task+0xcc>
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_SET);
 8004714:	497a      	ldr	r1, [pc, #488]	; (8004900 <leds_Task+0x288>)
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	440b      	add	r3, r1
 8004722:	333c      	adds	r3, #60	; 0x3c
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	4976      	ldr	r1, [pc, #472]	; (8004900 <leds_Task+0x288>)
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4613      	mov	r3, r2
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	440b      	add	r3, r1
 8004734:	3340      	adds	r3, #64	; 0x40
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	2201      	movs	r2, #1
 800473c:	4619      	mov	r1, r3
 800473e:	f008 fba7 	bl	800ce90 <HAL_GPIO_WritePin>
 8004742:	e016      	b.n	8004772 <leds_Task+0xfa>
						}
						else {
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8004744:	496e      	ldr	r1, [pc, #440]	; (8004900 <leds_Task+0x288>)
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	333c      	adds	r3, #60	; 0x3c
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	496a      	ldr	r1, [pc, #424]	; (8004900 <leds_Task+0x288>)
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	3340      	adds	r3, #64	; 0x40
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	2200      	movs	r2, #0
 800476c:	4619      	mov	r1, r3
 800476e:	f008 fb8f 	bl	800ce90 <HAL_GPIO_WritePin>
						}
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8004772:	4963      	ldr	r1, [pc, #396]	; (8004900 <leds_Task+0x288>)
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	440b      	add	r3, r1
 8004780:	3330      	adds	r3, #48	; 0x30
 8004782:	6819      	ldr	r1, [r3, #0]
 8004784:	485e      	ldr	r0, [pc, #376]	; (8004900 <leds_Task+0x288>)
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	4413      	add	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4403      	add	r3, r0
 8004792:	3304      	adds	r3, #4
 8004794:	6019      	str	r1, [r3, #0]
 8004796:	f002 bd39 	b.w	800720c <leds_Task+0x2b94>
					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 800479a:	4959      	ldr	r1, [pc, #356]	; (8004900 <leds_Task+0x288>)
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	3301      	adds	r3, #1
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	f042 852c 	bne.w	800720c <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 80047b4:	4952      	ldr	r1, [pc, #328]	; (8004900 <leds_Task+0x288>)
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	4413      	add	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	440b      	add	r3, r1
 80047c2:	3304      	adds	r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f042 8520 	bne.w	800720c <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 80047cc:	494c      	ldr	r1, [pc, #304]	; (8004900 <leds_Task+0x288>)
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	3301      	adds	r3, #1
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
						if( leds_info.leds[i].pwmch0_value0 > 0 ) {
 80047e0:	4947      	ldr	r1, [pc, #284]	; (8004900 <leds_Task+0x288>)
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	330c      	adds	r3, #12
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d017      	beq.n	8004828 <leds_Task+0x1b0>
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_SET);
 80047f8:	4941      	ldr	r1, [pc, #260]	; (8004900 <leds_Task+0x288>)
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4413      	add	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	440b      	add	r3, r1
 8004806:	333c      	adds	r3, #60	; 0x3c
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	493d      	ldr	r1, [pc, #244]	; (8004900 <leds_Task+0x288>)
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	440b      	add	r3, r1
 8004818:	3340      	adds	r3, #64	; 0x40
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	2201      	movs	r2, #1
 8004820:	4619      	mov	r1, r3
 8004822:	f008 fb35 	bl	800ce90 <HAL_GPIO_WritePin>
 8004826:	e016      	b.n	8004856 <leds_Task+0x1de>
						}
						else {
							HAL_GPIO_WritePin(leds_info.leds[i].sim_port, leds_info.leds[i].sim_pin, GPIO_PIN_RESET);
 8004828:	4935      	ldr	r1, [pc, #212]	; (8004900 <leds_Task+0x288>)
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	333c      	adds	r3, #60	; 0x3c
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	4931      	ldr	r1, [pc, #196]	; (8004900 <leds_Task+0x288>)
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	4413      	add	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	440b      	add	r3, r1
 8004848:	3340      	adds	r3, #64	; 0x40
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	2200      	movs	r2, #0
 8004850:	4619      	mov	r1, r3
 8004852:	f008 fb1d 	bl	800ce90 <HAL_GPIO_WritePin>
						}
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8004856:	492a      	ldr	r1, [pc, #168]	; (8004900 <leds_Task+0x288>)
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	3334      	adds	r3, #52	; 0x34
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d80a      	bhi.n	8004882 <leds_Task+0x20a>
 800486c:	4924      	ldr	r1, [pc, #144]	; (8004900 <leds_Task+0x288>)
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	440b      	add	r3, r1
 800487a:	3334      	adds	r3, #52	; 0x34
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d131      	bne.n	80048e6 <leds_Task+0x26e>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 8004882:	491f      	ldr	r1, [pc, #124]	; (8004900 <leds_Task+0x288>)
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	440b      	add	r3, r1
 8004890:	3334      	adds	r3, #52	; 0x34
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d912      	bls.n	80048be <leds_Task+0x246>
								leds_info.leds[i].loop_cnt--;
 8004898:	4919      	ldr	r1, [pc, #100]	; (8004900 <leds_Task+0x288>)
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	440b      	add	r3, r1
 80048a6:	3334      	adds	r3, #52	; 0x34
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1e59      	subs	r1, r3, #1
 80048ac:	4814      	ldr	r0, [pc, #80]	; (8004900 <leds_Task+0x288>)
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4613      	mov	r3, r2
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4403      	add	r3, r0
 80048ba:	3334      	adds	r3, #52	; 0x34
 80048bc:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 80048be:	4910      	ldr	r1, [pc, #64]	; (8004900 <leds_Task+0x288>)
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	4413      	add	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	440b      	add	r3, r1
 80048cc:	332c      	adds	r3, #44	; 0x2c
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	480b      	ldr	r0, [pc, #44]	; (8004900 <leds_Task+0x288>)
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4403      	add	r3, r0
 80048de:	3304      	adds	r3, #4
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	f002 bc93 	b.w	800720c <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 80048e6:	4906      	ldr	r1, [pc, #24]	; (8004900 <leds_Task+0x288>)
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	3302      	adds	r3, #2
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	f002 bc87 	b.w	800720c <leds_Task+0x2b94>
 80048fe:	bf00      	nop
 8004900:	20000a3c 	.word	0x20000a3c
				}
			}
		}
		//PWM led
		//************************************************************************************************
		else if( leds_info.leds[i].type == led_pwm )
 8004904:	49b1      	ldr	r1, [pc, #708]	; (8004bcc <leds_Task+0x554>)
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 863a 	bne.w	8005590 <leds_Task+0xf18>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 800491c:	49ab      	ldr	r1, [pc, #684]	; (8004bcc <leds_Task+0x554>)
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	3302      	adds	r3, #2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 81db 	bne.w	8004cec <leds_Task+0x674>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 8004936:	49a5      	ldr	r1, [pc, #660]	; (8004bcc <leds_Task+0x554>)
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	440b      	add	r3, r1
 8004944:	3301      	adds	r3, #1
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 80be 	bne.w	8004acc <leds_Task+0x454>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 8004950:	499e      	ldr	r1, [pc, #632]	; (8004bcc <leds_Task+0x554>)
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4613      	mov	r3, r2
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	3304      	adds	r3, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f042 8452 	bne.w	800720c <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 8004968:	4998      	ldr	r1, [pc, #608]	; (8004bcc <leds_Task+0x554>)
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	4413      	add	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	440b      	add	r3, r1
 8004976:	3301      	adds	r3, #1
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 800497c:	4993      	ldr	r1, [pc, #588]	; (8004bcc <leds_Task+0x554>)
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	330d      	adds	r3, #13
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	498c      	ldr	r1, [pc, #560]	; (8004bcc <leds_Task+0x554>)
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	3308      	adds	r3, #8
 80049a8:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80049ac:	4987      	ldr	r1, [pc, #540]	; (8004bcc <leds_Task+0x554>)
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	440b      	add	r3, r1
 80049ba:	3348      	adds	r3, #72	; 0x48
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <leds_Task+0x378>
 80049c2:	4982      	ldr	r1, [pc, #520]	; (8004bcc <leds_Task+0x554>)
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	330d      	adds	r3, #13
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b2d8      	uxtb	r0, r3
 80049d6:	497d      	ldr	r1, [pc, #500]	; (8004bcc <leds_Task+0x554>)
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4613      	mov	r3, r2
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	3344      	adds	r3, #68	; 0x44
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4602      	mov	r2, r0
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34
 80049ee:	e059      	b.n	8004aa4 <leds_Task+0x42c>
 80049f0:	4976      	ldr	r1, [pc, #472]	; (8004bcc <leds_Task+0x554>)
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4613      	mov	r3, r2
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	3348      	adds	r3, #72	; 0x48
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d116      	bne.n	8004a34 <leds_Task+0x3bc>
 8004a06:	4971      	ldr	r1, [pc, #452]	; (8004bcc <leds_Task+0x554>)
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	330d      	adds	r3, #13
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	b2d8      	uxtb	r0, r3
 8004a1a:	496c      	ldr	r1, [pc, #432]	; (8004bcc <leds_Task+0x554>)
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	440b      	add	r3, r1
 8004a28:	3344      	adds	r3, #68	; 0x44
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4603      	mov	r3, r0
 8004a30:	6393      	str	r3, [r2, #56]	; 0x38
 8004a32:	e037      	b.n	8004aa4 <leds_Task+0x42c>
 8004a34:	4965      	ldr	r1, [pc, #404]	; (8004bcc <leds_Task+0x554>)
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	3348      	adds	r3, #72	; 0x48
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d116      	bne.n	8004a78 <leds_Task+0x400>
 8004a4a:	4960      	ldr	r1, [pc, #384]	; (8004bcc <leds_Task+0x554>)
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	330d      	adds	r3, #13
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2d8      	uxtb	r0, r3
 8004a5e:	495b      	ldr	r1, [pc, #364]	; (8004bcc <leds_Task+0x554>)
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3344      	adds	r3, #68	; 0x44
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4603      	mov	r3, r0
 8004a74:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004a76:	e015      	b.n	8004aa4 <leds_Task+0x42c>
 8004a78:	4954      	ldr	r1, [pc, #336]	; (8004bcc <leds_Task+0x554>)
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	330d      	adds	r3, #13
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b2d8      	uxtb	r0, r3
 8004a8c:	494f      	ldr	r1, [pc, #316]	; (8004bcc <leds_Task+0x554>)
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	3344      	adds	r3, #68	; 0x44
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value1);
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8004aa4:	4949      	ldr	r1, [pc, #292]	; (8004bcc <leds_Task+0x554>)
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3330      	adds	r3, #48	; 0x30
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	4845      	ldr	r0, [pc, #276]	; (8004bcc <leds_Task+0x554>)
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	4413      	add	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4403      	add	r3, r0
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	6019      	str	r1, [r3, #0]
 8004ac8:	f002 bba0 	b.w	800720c <leds_Task+0x2b94>
					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 8004acc:	493f      	ldr	r1, [pc, #252]	; (8004bcc <leds_Task+0x554>)
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	3301      	adds	r3, #1
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	f042 8393 	bne.w	800720c <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8004ae6:	4939      	ldr	r1, [pc, #228]	; (8004bcc <leds_Task+0x554>)
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	4413      	add	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	440b      	add	r3, r1
 8004af4:	3304      	adds	r3, #4
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f042 8387 	bne.w	800720c <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 8004afe:	4933      	ldr	r1, [pc, #204]	; (8004bcc <leds_Task+0x554>)
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	4413      	add	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8004b12:	492e      	ldr	r1, [pc, #184]	; (8004bcc <leds_Task+0x554>)
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	4413      	add	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	440b      	add	r3, r1
 8004b20:	330c      	adds	r3, #12
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	4927      	ldr	r1, [pc, #156]	; (8004bcc <leds_Task+0x554>)
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004b42:	4922      	ldr	r1, [pc, #136]	; (8004bcc <leds_Task+0x554>)
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	3348      	adds	r3, #72	; 0x48
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d116      	bne.n	8004b86 <leds_Task+0x50e>
 8004b58:	491c      	ldr	r1, [pc, #112]	; (8004bcc <leds_Task+0x554>)
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	330c      	adds	r3, #12
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	b2d8      	uxtb	r0, r3
 8004b6c:	4917      	ldr	r1, [pc, #92]	; (8004bcc <leds_Task+0x554>)
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	440b      	add	r3, r1
 8004b7a:	3344      	adds	r3, #68	; 0x44
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4602      	mov	r2, r0
 8004b82:	635a      	str	r2, [r3, #52]	; 0x34
 8004b84:	e05c      	b.n	8004c40 <leds_Task+0x5c8>
 8004b86:	4911      	ldr	r1, [pc, #68]	; (8004bcc <leds_Task+0x554>)
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	4413      	add	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	440b      	add	r3, r1
 8004b94:	3348      	adds	r3, #72	; 0x48
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d119      	bne.n	8004bd0 <leds_Task+0x558>
 8004b9c:	490b      	ldr	r1, [pc, #44]	; (8004bcc <leds_Task+0x554>)
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	4413      	add	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	440b      	add	r3, r1
 8004baa:	330c      	adds	r3, #12
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b2d8      	uxtb	r0, r3
 8004bb0:	4906      	ldr	r1, [pc, #24]	; (8004bcc <leds_Task+0x554>)
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3344      	adds	r3, #68	; 0x44
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	6393      	str	r3, [r2, #56]	; 0x38
 8004bc8:	e03a      	b.n	8004c40 <leds_Task+0x5c8>
 8004bca:	bf00      	nop
 8004bcc:	20000a3c 	.word	0x20000a3c
 8004bd0:	4945      	ldr	r1, [pc, #276]	; (8004ce8 <leds_Task+0x670>)
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3348      	adds	r3, #72	; 0x48
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d116      	bne.n	8004c14 <leds_Task+0x59c>
 8004be6:	4940      	ldr	r1, [pc, #256]	; (8004ce8 <leds_Task+0x670>)
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	440b      	add	r3, r1
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2d8      	uxtb	r0, r3
 8004bfa:	493b      	ldr	r1, [pc, #236]	; (8004ce8 <leds_Task+0x670>)
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4413      	add	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	440b      	add	r3, r1
 8004c08:	3344      	adds	r3, #68	; 0x44
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4603      	mov	r3, r0
 8004c10:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004c12:	e015      	b.n	8004c40 <leds_Task+0x5c8>
 8004c14:	4934      	ldr	r1, [pc, #208]	; (8004ce8 <leds_Task+0x670>)
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	330c      	adds	r3, #12
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b2d8      	uxtb	r0, r3
 8004c28:	492f      	ldr	r1, [pc, #188]	; (8004ce8 <leds_Task+0x670>)
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	440b      	add	r3, r1
 8004c36:	3344      	adds	r3, #68	; 0x44
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8004c40:	4929      	ldr	r1, [pc, #164]	; (8004ce8 <leds_Task+0x670>)
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4413      	add	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3334      	adds	r3, #52	; 0x34
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d80a      	bhi.n	8004c6c <leds_Task+0x5f4>
 8004c56:	4924      	ldr	r1, [pc, #144]	; (8004ce8 <leds_Task+0x670>)
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	3334      	adds	r3, #52	; 0x34
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d131      	bne.n	8004cd0 <leds_Task+0x658>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 8004c6c:	491e      	ldr	r1, [pc, #120]	; (8004ce8 <leds_Task+0x670>)
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3334      	adds	r3, #52	; 0x34
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d912      	bls.n	8004ca8 <leds_Task+0x630>
								leds_info.leds[i].loop_cnt--;
 8004c82:	4919      	ldr	r1, [pc, #100]	; (8004ce8 <leds_Task+0x670>)
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	440b      	add	r3, r1
 8004c90:	3334      	adds	r3, #52	; 0x34
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	1e59      	subs	r1, r3, #1
 8004c96:	4814      	ldr	r0, [pc, #80]	; (8004ce8 <leds_Task+0x670>)
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4403      	add	r3, r0
 8004ca4:	3334      	adds	r3, #52	; 0x34
 8004ca6:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 8004ca8:	490f      	ldr	r1, [pc, #60]	; (8004ce8 <leds_Task+0x670>)
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	332c      	adds	r3, #44	; 0x2c
 8004cb8:	6819      	ldr	r1, [r3, #0]
 8004cba:	480b      	ldr	r0, [pc, #44]	; (8004ce8 <leds_Task+0x670>)
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	4413      	add	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4403      	add	r3, r0
 8004cc8:	3304      	adds	r3, #4
 8004cca:	6019      	str	r1, [r3, #0]
 8004ccc:	f002 ba9e 	b.w	800720c <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 8004cd0:	4905      	ldr	r1, [pc, #20]	; (8004ce8 <leds_Task+0x670>)
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	4413      	add	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	440b      	add	r3, r1
 8004cde:	3302      	adds	r3, #2
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	f002 ba92 	b.w	800720c <leds_Task+0x2b94>
 8004ce8:	20000a3c 	.word	0x20000a3c
					}
				}
			}
			//Fade blink mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fadeblink )
 8004cec:	49c1      	ldr	r1, [pc, #772]	; (8004ff4 <leds_Task+0x97c>)
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f040 8330 	bne.w	8005366 <leds_Task+0xcee>
			{
				//
				if( leds_info.leds[i].state == led_go_to_st1 )
 8004d06:	49bb      	ldr	r1, [pc, #748]	; (8004ff4 <leds_Task+0x97c>)
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	440b      	add	r3, r1
 8004d14:	3301      	adds	r3, #1
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	f040 816e 	bne.w	8004ffc <leds_Task+0x984>
				{
					if( leds_info.leds[i].timer == 0 )
 8004d20:	49b4      	ldr	r1, [pc, #720]	; (8004ff4 <leds_Task+0x97c>)
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3304      	adds	r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f042 826a 	bne.w	800720c <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8004d38:	49ae      	ldr	r1, [pc, #696]	; (8004ff4 <leds_Task+0x97c>)
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	3304      	adds	r3, #4
 8004d48:	2214      	movs	r2, #20
 8004d4a:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8004d4c:	49a9      	ldr	r1, [pc, #676]	; (8004ff4 <leds_Task+0x97c>)
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	440b      	add	r3, r1
 8004d5a:	3310      	adds	r3, #16
 8004d5c:	ed93 7a00 	vldr	s14, [r3]
 8004d60:	49a4      	ldr	r1, [pc, #656]	; (8004ff4 <leds_Task+0x97c>)
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3308      	adds	r3, #8
 8004d70:	edd3 7a00 	vldr	s15, [r3]
 8004d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d78:	499e      	ldr	r1, [pc, #632]	; (8004ff4 <leds_Task+0x97c>)
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	3308      	adds	r3, #8
 8004d88:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8004d8c:	4999      	ldr	r1, [pc, #612]	; (8004ff4 <leds_Task+0x97c>)
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	3338      	adds	r3, #56	; 0x38
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	1e50      	subs	r0, r2, #1
 8004da0:	4c94      	ldr	r4, [pc, #592]	; (8004ff4 <leds_Task+0x97c>)
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	460b      	mov	r3, r1
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	440b      	add	r3, r1
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4423      	add	r3, r4
 8004dae:	3338      	adds	r3, #56	; 0x38
 8004db0:	6018      	str	r0, [r3, #0]
 8004db2:	2a00      	cmp	r2, #0
 8004db4:	f040 8084 	bne.w	8004ec0 <leds_Task+0x848>
						{
							leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8004db8:	498e      	ldr	r1, [pc, #568]	; (8004ff4 <leds_Task+0x97c>)
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	330d      	adds	r3, #13
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd4:	4987      	ldr	r1, [pc, #540]	; (8004ff4 <leds_Task+0x97c>)
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	440b      	add	r3, r1
 8004de2:	3308      	adds	r3, #8
 8004de4:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].state = led_go_to_st0;
 8004de8:	4982      	ldr	r1, [pc, #520]	; (8004ff4 <leds_Task+0x97c>)
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4413      	add	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	440b      	add	r3, r1
 8004df6:	3301      	adds	r3, #1
 8004df8:	2202      	movs	r2, #2
 8004dfa:	701a      	strb	r2, [r3, #0]
							leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st1 / LEDS_FADE_STEP_TIME;
 8004dfc:	497d      	ldr	r1, [pc, #500]	; (8004ff4 <leds_Task+0x97c>)
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	4413      	add	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	440b      	add	r3, r1
 8004e0a:	3330      	adds	r3, #48	; 0x30
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7a      	ldr	r2, [pc, #488]	; (8004ff8 <leds_Task+0x980>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	0919      	lsrs	r1, r3, #4
 8004e16:	4877      	ldr	r0, [pc, #476]	; (8004ff4 <leds_Task+0x97c>)
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4403      	add	r3, r0
 8004e24:	3338      	adds	r3, #56	; 0x38
 8004e26:	6019      	str	r1, [r3, #0]
							if( leds_info.leds[i].step_cnt == 0 )
 8004e28:	4972      	ldr	r1, [pc, #456]	; (8004ff4 <leds_Task+0x97c>)
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	440b      	add	r3, r1
 8004e36:	3338      	adds	r3, #56	; 0x38
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <leds_Task+0x7da>
								leds_info.leds[i].step_cnt = 1;
 8004e3e:	496d      	ldr	r1, [pc, #436]	; (8004ff4 <leds_Task+0x97c>)
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3338      	adds	r3, #56	; 0x38
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
							leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value0 - (float)leds_info.leds[i].pwmch0_value1) / (float)leds_info.leds[i].step_cnt;
 8004e52:	4968      	ldr	r1, [pc, #416]	; (8004ff4 <leds_Task+0x97c>)
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	440b      	add	r3, r1
 8004e60:	330c      	adds	r3, #12
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e6e:	4961      	ldr	r1, [pc, #388]	; (8004ff4 <leds_Task+0x97c>)
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4613      	mov	r3, r2
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	330d      	adds	r3, #13
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004e8e:	4959      	ldr	r1, [pc, #356]	; (8004ff4 <leds_Task+0x97c>)
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3338      	adds	r3, #56	; 0x38
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eac:	4951      	ldr	r1, [pc, #324]	; (8004ff4 <leds_Task+0x97c>)
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	440b      	add	r3, r1
 8004eba:	3310      	adds	r3, #16
 8004ebc:	edc3 7a00 	vstr	s15, [r3]
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8004ec0:	494c      	ldr	r1, [pc, #304]	; (8004ff4 <leds_Task+0x97c>)
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3348      	adds	r3, #72	; 0x48
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <leds_Task+0x89a>
 8004ed6:	4947      	ldr	r1, [pc, #284]	; (8004ff4 <leds_Task+0x97c>)
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	edd3 7a00 	vldr	s15, [r3]
 8004eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eee:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ef2:	793b      	ldrb	r3, [r7, #4]
 8004ef4:	b2d8      	uxtb	r0, r3
 8004ef6:	493f      	ldr	r1, [pc, #252]	; (8004ff4 <leds_Task+0x97c>)
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	4413      	add	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	440b      	add	r3, r1
 8004f04:	3344      	adds	r3, #68	; 0x44
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f0e:	f002 b97d 	b.w	800720c <leds_Task+0x2b94>
 8004f12:	4938      	ldr	r1, [pc, #224]	; (8004ff4 <leds_Task+0x97c>)
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	3348      	adds	r3, #72	; 0x48
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d11d      	bne.n	8004f64 <leds_Task+0x8ec>
 8004f28:	4932      	ldr	r1, [pc, #200]	; (8004ff4 <leds_Task+0x97c>)
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	3308      	adds	r3, #8
 8004f38:	edd3 7a00 	vldr	s15, [r3]
 8004f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f40:	edc7 7a01 	vstr	s15, [r7, #4]
 8004f44:	793b      	ldrb	r3, [r7, #4]
 8004f46:	b2d8      	uxtb	r0, r3
 8004f48:	492a      	ldr	r1, [pc, #168]	; (8004ff4 <leds_Task+0x97c>)
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	3344      	adds	r3, #68	; 0x44
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	6393      	str	r3, [r2, #56]	; 0x38
 8004f60:	f002 b954 	b.w	800720c <leds_Task+0x2b94>
 8004f64:	4923      	ldr	r1, [pc, #140]	; (8004ff4 <leds_Task+0x97c>)
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	3348      	adds	r3, #72	; 0x48
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d11d      	bne.n	8004fb6 <leds_Task+0x93e>
 8004f7a:	491e      	ldr	r1, [pc, #120]	; (8004ff4 <leds_Task+0x97c>)
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	440b      	add	r3, r1
 8004f88:	3308      	adds	r3, #8
 8004f8a:	edd3 7a00 	vldr	s15, [r3]
 8004f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f92:	edc7 7a01 	vstr	s15, [r7, #4]
 8004f96:	793b      	ldrb	r3, [r7, #4]
 8004f98:	b2d8      	uxtb	r0, r3
 8004f9a:	4916      	ldr	r1, [pc, #88]	; (8004ff4 <leds_Task+0x97c>)
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3344      	adds	r3, #68	; 0x44
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4603      	mov	r3, r0
 8004fb0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004fb2:	f002 b92b 	b.w	800720c <leds_Task+0x2b94>
 8004fb6:	490f      	ldr	r1, [pc, #60]	; (8004ff4 <leds_Task+0x97c>)
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fce:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fd2:	793b      	ldrb	r3, [r7, #4]
 8004fd4:	b2d8      	uxtb	r0, r3
 8004fd6:	4907      	ldr	r1, [pc, #28]	; (8004ff4 <leds_Task+0x97c>)
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3344      	adds	r3, #68	; 0x44
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4603      	mov	r3, r0
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
 8004fee:	f002 b90d 	b.w	800720c <leds_Task+0x2b94>
 8004ff2:	bf00      	nop
 8004ff4:	20000a3c 	.word	0x20000a3c
 8004ff8:	cccccccd 	.word	0xcccccccd
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
					}
				}
				else if( leds_info.leds[i].state == led_go_to_st0 )
 8004ffc:	49b4      	ldr	r1, [pc, #720]	; (80052d0 <leds_Task+0xc58>)
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	3301      	adds	r3, #1
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	f042 80fb 	bne.w	800720c <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 8005016:	49ae      	ldr	r1, [pc, #696]	; (80052d0 <leds_Task+0xc58>)
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4613      	mov	r3, r2
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	440b      	add	r3, r1
 8005024:	3304      	adds	r3, #4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f042 80ef 	bne.w	800720c <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 800502e:	49a8      	ldr	r1, [pc, #672]	; (80052d0 <leds_Task+0xc58>)
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	3304      	adds	r3, #4
 800503e:	2214      	movs	r2, #20
 8005040:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8005042:	49a3      	ldr	r1, [pc, #652]	; (80052d0 <leds_Task+0xc58>)
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3310      	adds	r3, #16
 8005052:	ed93 7a00 	vldr	s14, [r3]
 8005056:	499e      	ldr	r1, [pc, #632]	; (80052d0 <leds_Task+0xc58>)
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	3308      	adds	r3, #8
 8005066:	edd3 7a00 	vldr	s15, [r3]
 800506a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506e:	4998      	ldr	r1, [pc, #608]	; (80052d0 <leds_Task+0xc58>)
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3308      	adds	r3, #8
 800507e:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8005082:	4993      	ldr	r1, [pc, #588]	; (80052d0 <leds_Task+0xc58>)
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4413      	add	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	440b      	add	r3, r1
 8005090:	3338      	adds	r3, #56	; 0x38
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	1e50      	subs	r0, r2, #1
 8005096:	4c8e      	ldr	r4, [pc, #568]	; (80052d0 <leds_Task+0xc58>)
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	460b      	mov	r3, r1
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	440b      	add	r3, r1
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4423      	add	r3, r4
 80050a4:	3338      	adds	r3, #56	; 0x38
 80050a6:	6018      	str	r0, [r3, #0]
 80050a8:	2a00      	cmp	r2, #0
 80050aa:	f040 80bf 	bne.w	800522c <leds_Task+0xbb4>
						{
							if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 80050ae:	4988      	ldr	r1, [pc, #544]	; (80052d0 <leds_Task+0xc58>)
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4613      	mov	r3, r2
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	440b      	add	r3, r1
 80050bc:	3334      	adds	r3, #52	; 0x34
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d80b      	bhi.n	80050dc <leds_Task+0xa64>
 80050c4:	4982      	ldr	r1, [pc, #520]	; (80052d0 <leds_Task+0xc58>)
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	3334      	adds	r3, #52	; 0x34
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 80a3 	bne.w	8005222 <leds_Task+0xbaa>
							{
								if( leds_info.leds[i].loop_cnt > 1 )
 80050dc:	497c      	ldr	r1, [pc, #496]	; (80052d0 <leds_Task+0xc58>)
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	3334      	adds	r3, #52	; 0x34
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d912      	bls.n	8005118 <leds_Task+0xaa0>
									leds_info.leds[i].loop_cnt--;
 80050f2:	4977      	ldr	r1, [pc, #476]	; (80052d0 <leds_Task+0xc58>)
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3334      	adds	r3, #52	; 0x34
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	1e59      	subs	r1, r3, #1
 8005106:	4872      	ldr	r0, [pc, #456]	; (80052d0 <leds_Task+0xc58>)
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4403      	add	r3, r0
 8005114:	3334      	adds	r3, #52	; 0x34
 8005116:	6019      	str	r1, [r3, #0]
								leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 8005118:	496d      	ldr	r1, [pc, #436]	; (80052d0 <leds_Task+0xc58>)
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4613      	mov	r3, r2
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	440b      	add	r3, r1
 8005126:	330c      	adds	r3, #12
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005134:	4966      	ldr	r1, [pc, #408]	; (80052d0 <leds_Task+0xc58>)
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	4413      	add	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	440b      	add	r3, r1
 8005142:	3308      	adds	r3, #8
 8005144:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].state = led_go_to_st1;
 8005148:	4961      	ldr	r1, [pc, #388]	; (80052d0 <leds_Task+0xc58>)
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	3301      	adds	r3, #1
 8005158:	2203      	movs	r2, #3
 800515a:	701a      	strb	r2, [r3, #0]
								leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st0 / LEDS_FADE_STEP_TIME;
 800515c:	495c      	ldr	r1, [pc, #368]	; (80052d0 <leds_Task+0xc58>)
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4613      	mov	r3, r2
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	4413      	add	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	440b      	add	r3, r1
 800516a:	332c      	adds	r3, #44	; 0x2c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a59      	ldr	r2, [pc, #356]	; (80052d4 <leds_Task+0xc5c>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0919      	lsrs	r1, r3, #4
 8005176:	4856      	ldr	r0, [pc, #344]	; (80052d0 <leds_Task+0xc58>)
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4403      	add	r3, r0
 8005184:	3338      	adds	r3, #56	; 0x38
 8005186:	6019      	str	r1, [r3, #0]
								if( leds_info.leds[i].step_cnt == 0 )
 8005188:	4951      	ldr	r1, [pc, #324]	; (80052d0 <leds_Task+0xc58>)
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	4413      	add	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	440b      	add	r3, r1
 8005196:	3338      	adds	r3, #56	; 0x38
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <leds_Task+0xb3a>
									leds_info.leds[i].step_cnt = 1;
 800519e:	494c      	ldr	r1, [pc, #304]	; (80052d0 <leds_Task+0xc58>)
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3338      	adds	r3, #56	; 0x38
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
								leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value1 - (float)leds_info.leds[i].pwmch0_value0) / (float)leds_info.leds[i].step_cnt;
 80051b2:	4947      	ldr	r1, [pc, #284]	; (80052d0 <leds_Task+0xc58>)
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	330d      	adds	r3, #13
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051ce:	4940      	ldr	r1, [pc, #256]	; (80052d0 <leds_Task+0xc58>)
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	330c      	adds	r3, #12
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80051ee:	4938      	ldr	r1, [pc, #224]	; (80052d0 <leds_Task+0xc58>)
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	440b      	add	r3, r1
 80051fc:	3338      	adds	r3, #56	; 0x38
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520c:	4930      	ldr	r1, [pc, #192]	; (80052d0 <leds_Task+0xc58>)
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4613      	mov	r3, r2
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	3310      	adds	r3, #16
 800521c:	edc3 7a00 	vstr	s15, [r3]
 8005220:	e004      	b.n	800522c <leds_Task+0xbb4>
							}
							else
								//leds_info.leds[i].mode = led_toggle;
								leds_setFade(i, 200, LEDS_MIN_PWM_VALUE);
 8005222:	2200      	movs	r2, #0
 8005224:	21c8      	movs	r1, #200	; 0xc8
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f002 fbde 	bl	80079e8 <leds_setFade>
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 800522c:	4928      	ldr	r1, [pc, #160]	; (80052d0 <leds_Task+0xc58>)
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	3348      	adds	r3, #72	; 0x48
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11d      	bne.n	800527e <leds_Task+0xc06>
 8005242:	4923      	ldr	r1, [pc, #140]	; (80052d0 <leds_Task+0xc58>)
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	3308      	adds	r3, #8
 8005252:	edd3 7a00 	vldr	s15, [r3]
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	edc7 7a01 	vstr	s15, [r7, #4]
 800525e:	793b      	ldrb	r3, [r7, #4]
 8005260:	b2d8      	uxtb	r0, r3
 8005262:	491b      	ldr	r1, [pc, #108]	; (80052d0 <leds_Task+0xc58>)
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	3344      	adds	r3, #68	; 0x44
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4602      	mov	r2, r0
 8005278:	635a      	str	r2, [r3, #52]	; 0x34
 800527a:	f001 bfc7 	b.w	800720c <leds_Task+0x2b94>
 800527e:	4914      	ldr	r1, [pc, #80]	; (80052d0 <leds_Task+0xc58>)
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4613      	mov	r3, r2
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	3348      	adds	r3, #72	; 0x48
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d121      	bne.n	80052d8 <leds_Task+0xc60>
 8005294:	490e      	ldr	r1, [pc, #56]	; (80052d0 <leds_Task+0xc58>)
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	3308      	adds	r3, #8
 80052a4:	edd3 7a00 	vldr	s15, [r3]
 80052a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80052b0:	793b      	ldrb	r3, [r7, #4]
 80052b2:	b2d8      	uxtb	r0, r3
 80052b4:	4906      	ldr	r1, [pc, #24]	; (80052d0 <leds_Task+0xc58>)
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3344      	adds	r3, #68	; 0x44
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4603      	mov	r3, r0
 80052ca:	6393      	str	r3, [r2, #56]	; 0x38
 80052cc:	f001 bf9e 	b.w	800720c <leds_Task+0x2b94>
 80052d0:	20000a3c 	.word	0x20000a3c
 80052d4:	cccccccd 	.word	0xcccccccd
 80052d8:	49ac      	ldr	r1, [pc, #688]	; (800558c <leds_Task+0xf14>)
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	3348      	adds	r3, #72	; 0x48
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d11d      	bne.n	800532a <leds_Task+0xcb2>
 80052ee:	49a7      	ldr	r1, [pc, #668]	; (800558c <leds_Task+0xf14>)
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	3308      	adds	r3, #8
 80052fe:	edd3 7a00 	vldr	s15, [r3]
 8005302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005306:	edc7 7a01 	vstr	s15, [r7, #4]
 800530a:	793b      	ldrb	r3, [r7, #4]
 800530c:	b2d8      	uxtb	r0, r3
 800530e:	499f      	ldr	r1, [pc, #636]	; (800558c <leds_Task+0xf14>)
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	440b      	add	r3, r1
 800531c:	3344      	adds	r3, #68	; 0x44
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4603      	mov	r3, r0
 8005324:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005326:	f001 bf71 	b.w	800720c <leds_Task+0x2b94>
 800532a:	4998      	ldr	r1, [pc, #608]	; (800558c <leds_Task+0xf14>)
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	4413      	add	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	440b      	add	r3, r1
 8005338:	3308      	adds	r3, #8
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005342:	edc7 7a01 	vstr	s15, [r7, #4]
 8005346:	793b      	ldrb	r3, [r7, #4]
 8005348:	b2d8      	uxtb	r0, r3
 800534a:	4990      	ldr	r1, [pc, #576]	; (800558c <leds_Task+0xf14>)
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	3344      	adds	r3, #68	; 0x44
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4603      	mov	r3, r0
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
 8005362:	f001 bf53 	b.w	800720c <leds_Task+0x2b94>
					}
				}
			}
			//Fade mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fade )
 8005366:	4989      	ldr	r1, [pc, #548]	; (800558c <leds_Task+0xf14>)
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	440b      	add	r3, r1
 8005374:	3302      	adds	r3, #2
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b03      	cmp	r3, #3
 800537c:	f041 8746 	bne.w	800720c <leds_Task+0x2b94>
			{
				if( leds_info.leds[i].timer == 0 )
 8005380:	4982      	ldr	r1, [pc, #520]	; (800558c <leds_Task+0xf14>)
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	3304      	adds	r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f041 873a 	bne.w	800720c <leds_Task+0x2b94>
				{
					leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8005398:	497c      	ldr	r1, [pc, #496]	; (800558c <leds_Task+0xf14>)
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	3304      	adds	r3, #4
 80053a8:	2214      	movs	r2, #20
 80053aa:	601a      	str	r2, [r3, #0]
					leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 80053ac:	4977      	ldr	r1, [pc, #476]	; (800558c <leds_Task+0xf14>)
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	3310      	adds	r3, #16
 80053bc:	ed93 7a00 	vldr	s14, [r3]
 80053c0:	4972      	ldr	r1, [pc, #456]	; (800558c <leds_Task+0xf14>)
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	440b      	add	r3, r1
 80053ce:	3308      	adds	r3, #8
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d8:	496c      	ldr	r1, [pc, #432]	; (800558c <leds_Task+0xf14>)
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	3308      	adds	r3, #8
 80053e8:	edc3 7a00 	vstr	s15, [r3]
					if( leds_info.leds[i].step_cnt-- == 0 )
 80053ec:	4967      	ldr	r1, [pc, #412]	; (800558c <leds_Task+0xf14>)
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	3338      	adds	r3, #56	; 0x38
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	1e50      	subs	r0, r2, #1
 8005400:	4c62      	ldr	r4, [pc, #392]	; (800558c <leds_Task+0xf14>)
 8005402:	68f9      	ldr	r1, [r7, #12]
 8005404:	460b      	mov	r3, r1
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	440b      	add	r3, r1
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4423      	add	r3, r4
 800540e:	3338      	adds	r3, #56	; 0x38
 8005410:	6018      	str	r0, [r3, #0]
 8005412:	2a00      	cmp	r2, #0
 8005414:	d121      	bne.n	800545a <leds_Task+0xde2>
					{
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8005416:	495d      	ldr	r1, [pc, #372]	; (800558c <leds_Task+0xf14>)
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	330d      	adds	r3, #13
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	4956      	ldr	r1, [pc, #344]	; (800558c <leds_Task+0xf14>)
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4613      	mov	r3, r2
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4413      	add	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	440b      	add	r3, r1
 8005440:	3308      	adds	r3, #8
 8005442:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].mode = led_toggle;
 8005446:	4951      	ldr	r1, [pc, #324]	; (800558c <leds_Task+0xf14>)
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	3302      	adds	r3, #2
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 800545a:	494c      	ldr	r1, [pc, #304]	; (800558c <leds_Task+0xf14>)
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	3348      	adds	r3, #72	; 0x48
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11d      	bne.n	80054ac <leds_Task+0xe34>
 8005470:	4946      	ldr	r1, [pc, #280]	; (800558c <leds_Task+0xf14>)
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	440b      	add	r3, r1
 800547e:	3308      	adds	r3, #8
 8005480:	edd3 7a00 	vldr	s15, [r3]
 8005484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005488:	edc7 7a01 	vstr	s15, [r7, #4]
 800548c:	793b      	ldrb	r3, [r7, #4]
 800548e:	b2d8      	uxtb	r0, r3
 8005490:	493e      	ldr	r1, [pc, #248]	; (800558c <leds_Task+0xf14>)
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4613      	mov	r3, r2
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4413      	add	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	440b      	add	r3, r1
 800549e:	3344      	adds	r3, #68	; 0x44
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4602      	mov	r2, r0
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34
 80054a8:	f001 beb0 	b.w	800720c <leds_Task+0x2b94>
 80054ac:	4937      	ldr	r1, [pc, #220]	; (800558c <leds_Task+0xf14>)
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	3348      	adds	r3, #72	; 0x48
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d11d      	bne.n	80054fe <leds_Task+0xe86>
 80054c2:	4932      	ldr	r1, [pc, #200]	; (800558c <leds_Task+0xf14>)
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4413      	add	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	440b      	add	r3, r1
 80054d0:	3308      	adds	r3, #8
 80054d2:	edd3 7a00 	vldr	s15, [r3]
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	edc7 7a01 	vstr	s15, [r7, #4]
 80054de:	793b      	ldrb	r3, [r7, #4]
 80054e0:	b2d8      	uxtb	r0, r3
 80054e2:	492a      	ldr	r1, [pc, #168]	; (800558c <leds_Task+0xf14>)
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	3344      	adds	r3, #68	; 0x44
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4603      	mov	r3, r0
 80054f8:	6393      	str	r3, [r2, #56]	; 0x38
 80054fa:	f001 be87 	b.w	800720c <leds_Task+0x2b94>
 80054fe:	4923      	ldr	r1, [pc, #140]	; (800558c <leds_Task+0xf14>)
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4613      	mov	r3, r2
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	440b      	add	r3, r1
 800550c:	3348      	adds	r3, #72	; 0x48
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d11d      	bne.n	8005550 <leds_Task+0xed8>
 8005514:	491d      	ldr	r1, [pc, #116]	; (800558c <leds_Task+0xf14>)
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	4413      	add	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	440b      	add	r3, r1
 8005522:	3308      	adds	r3, #8
 8005524:	edd3 7a00 	vldr	s15, [r3]
 8005528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005530:	793b      	ldrb	r3, [r7, #4]
 8005532:	b2d8      	uxtb	r0, r3
 8005534:	4915      	ldr	r1, [pc, #84]	; (800558c <leds_Task+0xf14>)
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4613      	mov	r3, r2
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	3344      	adds	r3, #68	; 0x44
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4603      	mov	r3, r0
 800554a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800554c:	f001 be5e 	b.w	800720c <leds_Task+0x2b94>
 8005550:	490e      	ldr	r1, [pc, #56]	; (800558c <leds_Task+0xf14>)
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	4413      	add	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	440b      	add	r3, r1
 800555e:	3308      	adds	r3, #8
 8005560:	edd3 7a00 	vldr	s15, [r3]
 8005564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005568:	edc7 7a01 	vstr	s15, [r7, #4]
 800556c:	793b      	ldrb	r3, [r7, #4]
 800556e:	b2d8      	uxtb	r0, r3
 8005570:	4906      	ldr	r1, [pc, #24]	; (800558c <leds_Task+0xf14>)
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	3344      	adds	r3, #68	; 0x44
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4603      	mov	r3, r0
 8005586:	6413      	str	r3, [r2, #64]	; 0x40
 8005588:	f001 be40 	b.w	800720c <leds_Task+0x2b94>
 800558c:	20000a3c 	.word	0x20000a3c
				}
			}
		}
		//RGB led
		//************************************************************************************************
		else if( leds_info.leds[i].type == led_rgb )
 8005590:	49b2      	ldr	r1, [pc, #712]	; (800585c <leds_Task+0x11e4>)
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4613      	mov	r3, r2
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	440b      	add	r3, r1
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	f041 8632 	bne.w	800720c <leds_Task+0x2b94>
		{
			//Blink mode
			//----------------------------------------------------------------------------------------------------------------
			if( leds_info.leds[i].mode == led_blink )
 80055a8:	49ac      	ldr	r1, [pc, #688]	; (800585c <leds_Task+0x11e4>)
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	440b      	add	r3, r1
 80055b6:	3302      	adds	r3, #2
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 842d 	bne.w	8005e1c <leds_Task+0x17a4>
			{
				//Blink state 0
				if( leds_info.leds[i].state == led_st0 )
 80055c2:	49a6      	ldr	r1, [pc, #664]	; (800585c <leds_Task+0x11e4>)
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	4413      	add	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	440b      	add	r3, r1
 80055d0:	3301      	adds	r3, #1
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 81e8 	bne.w	80059ac <leds_Task+0x1334>
				{
					//Wait for the timer
					if( leds_info.leds[i].timer == 0 )
 80055dc:	499f      	ldr	r1, [pc, #636]	; (800585c <leds_Task+0x11e4>)
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	440b      	add	r3, r1
 80055ea:	3304      	adds	r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f041 860c 	bne.w	800720c <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st1;
 80055f4:	4999      	ldr	r1, [pc, #612]	; (800585c <leds_Task+0x11e4>)
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	440b      	add	r3, r1
 8005602:	3301      	adds	r3, #1
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8005608:	4994      	ldr	r1, [pc, #592]	; (800585c <leds_Task+0x11e4>)
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	4413      	add	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	440b      	add	r3, r1
 8005616:	330d      	adds	r3, #13
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	498d      	ldr	r1, [pc, #564]	; (800585c <leds_Task+0x11e4>)
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4613      	mov	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	3308      	adds	r3, #8
 8005634:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8005638:	4988      	ldr	r1, [pc, #544]	; (800585c <leds_Task+0x11e4>)
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	440b      	add	r3, r1
 8005646:	3319      	adds	r3, #25
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005654:	4981      	ldr	r1, [pc, #516]	; (800585c <leds_Task+0x11e4>)
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	440b      	add	r3, r1
 8005662:	3314      	adds	r3, #20
 8005664:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8005668:	497c      	ldr	r1, [pc, #496]	; (800585c <leds_Task+0x11e4>)
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	3325      	adds	r3, #37	; 0x25
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	4975      	ldr	r1, [pc, #468]	; (800585c <leds_Task+0x11e4>)
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	4413      	add	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	440b      	add	r3, r1
 8005692:	3320      	adds	r3, #32
 8005694:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8005698:	4970      	ldr	r1, [pc, #448]	; (800585c <leds_Task+0x11e4>)
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3348      	adds	r3, #72	; 0x48
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d116      	bne.n	80056dc <leds_Task+0x1064>
 80056ae:	496b      	ldr	r1, [pc, #428]	; (800585c <leds_Task+0x11e4>)
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	330d      	adds	r3, #13
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	b2d8      	uxtb	r0, r3
 80056c2:	4966      	ldr	r1, [pc, #408]	; (800585c <leds_Task+0x11e4>)
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	3344      	adds	r3, #68	; 0x44
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4602      	mov	r2, r0
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
 80056da:	e059      	b.n	8005790 <leds_Task+0x1118>
 80056dc:	495f      	ldr	r1, [pc, #380]	; (800585c <leds_Task+0x11e4>)
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4413      	add	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	440b      	add	r3, r1
 80056ea:	3348      	adds	r3, #72	; 0x48
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d116      	bne.n	8005720 <leds_Task+0x10a8>
 80056f2:	495a      	ldr	r1, [pc, #360]	; (800585c <leds_Task+0x11e4>)
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	440b      	add	r3, r1
 8005700:	330d      	adds	r3, #13
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	b2d8      	uxtb	r0, r3
 8005706:	4955      	ldr	r1, [pc, #340]	; (800585c <leds_Task+0x11e4>)
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	4413      	add	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	440b      	add	r3, r1
 8005714:	3344      	adds	r3, #68	; 0x44
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4603      	mov	r3, r0
 800571c:	6393      	str	r3, [r2, #56]	; 0x38
 800571e:	e037      	b.n	8005790 <leds_Task+0x1118>
 8005720:	494e      	ldr	r1, [pc, #312]	; (800585c <leds_Task+0x11e4>)
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	3348      	adds	r3, #72	; 0x48
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b08      	cmp	r3, #8
 8005734:	d116      	bne.n	8005764 <leds_Task+0x10ec>
 8005736:	4949      	ldr	r1, [pc, #292]	; (800585c <leds_Task+0x11e4>)
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	330d      	adds	r3, #13
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b2d8      	uxtb	r0, r3
 800574a:	4944      	ldr	r1, [pc, #272]	; (800585c <leds_Task+0x11e4>)
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4613      	mov	r3, r2
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	3344      	adds	r3, #68	; 0x44
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4603      	mov	r3, r0
 8005760:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005762:	e015      	b.n	8005790 <leds_Task+0x1118>
 8005764:	493d      	ldr	r1, [pc, #244]	; (800585c <leds_Task+0x11e4>)
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	330d      	adds	r3, #13
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b2d8      	uxtb	r0, r3
 8005778:	4938      	ldr	r1, [pc, #224]	; (800585c <leds_Task+0x11e4>)
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	3344      	adds	r3, #68	; 0x44
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4603      	mov	r3, r0
 800578e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value1);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8005790:	4932      	ldr	r1, [pc, #200]	; (800585c <leds_Task+0x11e4>)
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	3350      	adds	r3, #80	; 0x50
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <leds_Task+0x115c>
 80057a6:	492d      	ldr	r1, [pc, #180]	; (800585c <leds_Task+0x11e4>)
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	3319      	adds	r3, #25
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	b2d8      	uxtb	r0, r3
 80057ba:	4928      	ldr	r1, [pc, #160]	; (800585c <leds_Task+0x11e4>)
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	334c      	adds	r3, #76	; 0x4c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4602      	mov	r2, r0
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34
 80057d2:	e05b      	b.n	800588c <leds_Task+0x1214>
 80057d4:	4921      	ldr	r1, [pc, #132]	; (800585c <leds_Task+0x11e4>)
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3350      	adds	r3, #80	; 0x50
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d116      	bne.n	8005818 <leds_Task+0x11a0>
 80057ea:	491c      	ldr	r1, [pc, #112]	; (800585c <leds_Task+0x11e4>)
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	440b      	add	r3, r1
 80057f8:	3319      	adds	r3, #25
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b2d8      	uxtb	r0, r3
 80057fe:	4917      	ldr	r1, [pc, #92]	; (800585c <leds_Task+0x11e4>)
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	334c      	adds	r3, #76	; 0x4c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4603      	mov	r3, r0
 8005814:	6393      	str	r3, [r2, #56]	; 0x38
 8005816:	e039      	b.n	800588c <leds_Task+0x1214>
 8005818:	4910      	ldr	r1, [pc, #64]	; (800585c <leds_Task+0x11e4>)
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	4413      	add	r3, r2
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	440b      	add	r3, r1
 8005826:	3350      	adds	r3, #80	; 0x50
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d118      	bne.n	8005860 <leds_Task+0x11e8>
 800582e:	490b      	ldr	r1, [pc, #44]	; (800585c <leds_Task+0x11e4>)
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	4413      	add	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	440b      	add	r3, r1
 800583c:	3319      	adds	r3, #25
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2d8      	uxtb	r0, r3
 8005842:	4906      	ldr	r1, [pc, #24]	; (800585c <leds_Task+0x11e4>)
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	334c      	adds	r3, #76	; 0x4c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4603      	mov	r3, r0
 8005858:	63d3      	str	r3, [r2, #60]	; 0x3c
 800585a:	e017      	b.n	800588c <leds_Task+0x1214>
 800585c:	20000a3c 	.word	0x20000a3c
 8005860:	49bb      	ldr	r1, [pc, #748]	; (8005b50 <leds_Task+0x14d8>)
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	4413      	add	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	3319      	adds	r3, #25
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	b2d8      	uxtb	r0, r3
 8005874:	49b6      	ldr	r1, [pc, #728]	; (8005b50 <leds_Task+0x14d8>)
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4613      	mov	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	334c      	adds	r3, #76	; 0x4c
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4603      	mov	r3, r0
 800588a:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value1);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 800588c:	49b0      	ldr	r1, [pc, #704]	; (8005b50 <leds_Task+0x14d8>)
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4613      	mov	r3, r2
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	3358      	adds	r3, #88	; 0x58
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d116      	bne.n	80058d0 <leds_Task+0x1258>
 80058a2:	49ab      	ldr	r1, [pc, #684]	; (8005b50 <leds_Task+0x14d8>)
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	440b      	add	r3, r1
 80058b0:	3325      	adds	r3, #37	; 0x25
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	b2d8      	uxtb	r0, r3
 80058b6:	49a6      	ldr	r1, [pc, #664]	; (8005b50 <leds_Task+0x14d8>)
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	3354      	adds	r3, #84	; 0x54
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4602      	mov	r2, r0
 80058cc:	635a      	str	r2, [r3, #52]	; 0x34
 80058ce:	e059      	b.n	8005984 <leds_Task+0x130c>
 80058d0:	499f      	ldr	r1, [pc, #636]	; (8005b50 <leds_Task+0x14d8>)
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4613      	mov	r3, r2
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	4413      	add	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	440b      	add	r3, r1
 80058de:	3358      	adds	r3, #88	; 0x58
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d116      	bne.n	8005914 <leds_Task+0x129c>
 80058e6:	499a      	ldr	r1, [pc, #616]	; (8005b50 <leds_Task+0x14d8>)
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4613      	mov	r3, r2
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	440b      	add	r3, r1
 80058f4:	3325      	adds	r3, #37	; 0x25
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b2d8      	uxtb	r0, r3
 80058fa:	4995      	ldr	r1, [pc, #596]	; (8005b50 <leds_Task+0x14d8>)
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4613      	mov	r3, r2
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	440b      	add	r3, r1
 8005908:	3354      	adds	r3, #84	; 0x54
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4603      	mov	r3, r0
 8005910:	6393      	str	r3, [r2, #56]	; 0x38
 8005912:	e037      	b.n	8005984 <leds_Task+0x130c>
 8005914:	498e      	ldr	r1, [pc, #568]	; (8005b50 <leds_Task+0x14d8>)
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4613      	mov	r3, r2
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	440b      	add	r3, r1
 8005922:	3358      	adds	r3, #88	; 0x58
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b08      	cmp	r3, #8
 8005928:	d116      	bne.n	8005958 <leds_Task+0x12e0>
 800592a:	4989      	ldr	r1, [pc, #548]	; (8005b50 <leds_Task+0x14d8>)
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4613      	mov	r3, r2
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	3325      	adds	r3, #37	; 0x25
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2d8      	uxtb	r0, r3
 800593e:	4984      	ldr	r1, [pc, #528]	; (8005b50 <leds_Task+0x14d8>)
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	4413      	add	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	440b      	add	r3, r1
 800594c:	3354      	adds	r3, #84	; 0x54
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4603      	mov	r3, r0
 8005954:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005956:	e015      	b.n	8005984 <leds_Task+0x130c>
 8005958:	497d      	ldr	r1, [pc, #500]	; (8005b50 <leds_Task+0x14d8>)
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	3325      	adds	r3, #37	; 0x25
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b2d8      	uxtb	r0, r3
 800596c:	4978      	ldr	r1, [pc, #480]	; (8005b50 <leds_Task+0x14d8>)
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	440b      	add	r3, r1
 800597a:	3354      	adds	r3, #84	; 0x54
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4603      	mov	r3, r0
 8005982:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value1);
						leds_info.leds[i].timer = leds_info.leds[i].anim_time_st1;
 8005984:	4972      	ldr	r1, [pc, #456]	; (8005b50 <leds_Task+0x14d8>)
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	440b      	add	r3, r1
 8005992:	3330      	adds	r3, #48	; 0x30
 8005994:	6819      	ldr	r1, [r3, #0]
 8005996:	486e      	ldr	r0, [pc, #440]	; (8005b50 <leds_Task+0x14d8>)
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4613      	mov	r3, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4403      	add	r3, r0
 80059a4:	3304      	adds	r3, #4
 80059a6:	6019      	str	r1, [r3, #0]
 80059a8:	f001 bc30 	b.w	800720c <leds_Task+0x2b94>

					}
				}
				//Blink state 1
				else if( leds_info.leds[i].state == led_st1 )
 80059ac:	4968      	ldr	r1, [pc, #416]	; (8005b50 <leds_Task+0x14d8>)
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4413      	add	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	3301      	adds	r3, #1
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	f041 8423 	bne.w	800720c <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 80059c6:	4962      	ldr	r1, [pc, #392]	; (8005b50 <leds_Task+0x14d8>)
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4613      	mov	r3, r2
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	3304      	adds	r3, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f041 8417 	bne.w	800720c <leds_Task+0x2b94>
					{
						//Switch state
						leds_info.leds[i].state = led_st0;
 80059de:	495c      	ldr	r1, [pc, #368]	; (8005b50 <leds_Task+0x14d8>)
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4613      	mov	r3, r2
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	4413      	add	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	440b      	add	r3, r1
 80059ec:	3301      	adds	r3, #1
 80059ee:	2200      	movs	r2, #0
 80059f0:	701a      	strb	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 80059f2:	4957      	ldr	r1, [pc, #348]	; (8005b50 <leds_Task+0x14d8>)
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	330c      	adds	r3, #12
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0e:	4950      	ldr	r1, [pc, #320]	; (8005b50 <leds_Task+0x14d8>)
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4613      	mov	r3, r2
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4413      	add	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value0;
 8005a22:	494b      	ldr	r1, [pc, #300]	; (8005b50 <leds_Task+0x14d8>)
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	3318      	adds	r3, #24
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	4944      	ldr	r1, [pc, #272]	; (8005b50 <leds_Task+0x14d8>)
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	4413      	add	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value0;
 8005a52:	493f      	ldr	r1, [pc, #252]	; (8005b50 <leds_Task+0x14d8>)
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4613      	mov	r3, r2
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	4413      	add	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	440b      	add	r3, r1
 8005a60:	3324      	adds	r3, #36	; 0x24
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	4938      	ldr	r1, [pc, #224]	; (8005b50 <leds_Task+0x14d8>)
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4613      	mov	r3, r2
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4413      	add	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3320      	adds	r3, #32
 8005a7e:	edc3 7a00 	vstr	s15, [r3]
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8005a82:	4933      	ldr	r1, [pc, #204]	; (8005b50 <leds_Task+0x14d8>)
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4613      	mov	r3, r2
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	3348      	adds	r3, #72	; 0x48
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d116      	bne.n	8005ac6 <leds_Task+0x144e>
 8005a98:	492d      	ldr	r1, [pc, #180]	; (8005b50 <leds_Task+0x14d8>)
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	440b      	add	r3, r1
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	b2d8      	uxtb	r0, r3
 8005aac:	4928      	ldr	r1, [pc, #160]	; (8005b50 <leds_Task+0x14d8>)
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	440b      	add	r3, r1
 8005aba:	3344      	adds	r3, #68	; 0x44
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34
 8005ac4:	e05c      	b.n	8005b80 <leds_Task+0x1508>
 8005ac6:	4922      	ldr	r1, [pc, #136]	; (8005b50 <leds_Task+0x14d8>)
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3348      	adds	r3, #72	; 0x48
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d116      	bne.n	8005b0a <leds_Task+0x1492>
 8005adc:	491c      	ldr	r1, [pc, #112]	; (8005b50 <leds_Task+0x14d8>)
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	330c      	adds	r3, #12
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b2d8      	uxtb	r0, r3
 8005af0:	4917      	ldr	r1, [pc, #92]	; (8005b50 <leds_Task+0x14d8>)
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	4413      	add	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	440b      	add	r3, r1
 8005afe:	3344      	adds	r3, #68	; 0x44
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4603      	mov	r3, r0
 8005b06:	6393      	str	r3, [r2, #56]	; 0x38
 8005b08:	e03a      	b.n	8005b80 <leds_Task+0x1508>
 8005b0a:	4911      	ldr	r1, [pc, #68]	; (8005b50 <leds_Task+0x14d8>)
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	3348      	adds	r3, #72	; 0x48
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d119      	bne.n	8005b54 <leds_Task+0x14dc>
 8005b20:	490b      	ldr	r1, [pc, #44]	; (8005b50 <leds_Task+0x14d8>)
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	330c      	adds	r3, #12
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b2d8      	uxtb	r0, r3
 8005b34:	4906      	ldr	r1, [pc, #24]	; (8005b50 <leds_Task+0x14d8>)
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	4413      	add	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	3344      	adds	r3, #68	; 0x44
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4603      	mov	r3, r0
 8005b4a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005b4c:	e018      	b.n	8005b80 <leds_Task+0x1508>
 8005b4e:	bf00      	nop
 8005b50:	20000a3c 	.word	0x20000a3c
 8005b54:	49b0      	ldr	r1, [pc, #704]	; (8005e18 <leds_Task+0x17a0>)
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	330c      	adds	r3, #12
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b2d8      	uxtb	r0, r3
 8005b68:	49ab      	ldr	r1, [pc, #684]	; (8005e18 <leds_Task+0x17a0>)
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	3344      	adds	r3, #68	; 0x44
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch0_timch, leds_info.leds[i].pwmch0_value0);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8005b80:	49a5      	ldr	r1, [pc, #660]	; (8005e18 <leds_Task+0x17a0>)
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3350      	adds	r3, #80	; 0x50
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d116      	bne.n	8005bc4 <leds_Task+0x154c>
 8005b96:	49a0      	ldr	r1, [pc, #640]	; (8005e18 <leds_Task+0x17a0>)
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4413      	add	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	440b      	add	r3, r1
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	b2d8      	uxtb	r0, r3
 8005baa:	499b      	ldr	r1, [pc, #620]	; (8005e18 <leds_Task+0x17a0>)
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	334c      	adds	r3, #76	; 0x4c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8005bc2:	e059      	b.n	8005c78 <leds_Task+0x1600>
 8005bc4:	4994      	ldr	r1, [pc, #592]	; (8005e18 <leds_Task+0x17a0>)
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	4413      	add	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	440b      	add	r3, r1
 8005bd2:	3350      	adds	r3, #80	; 0x50
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d116      	bne.n	8005c08 <leds_Task+0x1590>
 8005bda:	498f      	ldr	r1, [pc, #572]	; (8005e18 <leds_Task+0x17a0>)
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	4413      	add	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	440b      	add	r3, r1
 8005be8:	3318      	adds	r3, #24
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2d8      	uxtb	r0, r3
 8005bee:	498a      	ldr	r1, [pc, #552]	; (8005e18 <leds_Task+0x17a0>)
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	4413      	add	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	440b      	add	r3, r1
 8005bfc:	334c      	adds	r3, #76	; 0x4c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4603      	mov	r3, r0
 8005c04:	6393      	str	r3, [r2, #56]	; 0x38
 8005c06:	e037      	b.n	8005c78 <leds_Task+0x1600>
 8005c08:	4983      	ldr	r1, [pc, #524]	; (8005e18 <leds_Task+0x17a0>)
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4413      	add	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	440b      	add	r3, r1
 8005c16:	3350      	adds	r3, #80	; 0x50
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d116      	bne.n	8005c4c <leds_Task+0x15d4>
 8005c1e:	497e      	ldr	r1, [pc, #504]	; (8005e18 <leds_Task+0x17a0>)
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4613      	mov	r3, r2
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4413      	add	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	b2d8      	uxtb	r0, r3
 8005c32:	4979      	ldr	r1, [pc, #484]	; (8005e18 <leds_Task+0x17a0>)
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4613      	mov	r3, r2
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	4413      	add	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	440b      	add	r3, r1
 8005c40:	334c      	adds	r3, #76	; 0x4c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4603      	mov	r3, r0
 8005c48:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005c4a:	e015      	b.n	8005c78 <leds_Task+0x1600>
 8005c4c:	4972      	ldr	r1, [pc, #456]	; (8005e18 <leds_Task+0x17a0>)
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	4413      	add	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	440b      	add	r3, r1
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b2d8      	uxtb	r0, r3
 8005c60:	496d      	ldr	r1, [pc, #436]	; (8005e18 <leds_Task+0x17a0>)
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4613      	mov	r3, r2
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	334c      	adds	r3, #76	; 0x4c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch1_timch, leds_info.leds[i].pwmch1_value0);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8005c78:	4967      	ldr	r1, [pc, #412]	; (8005e18 <leds_Task+0x17a0>)
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	4413      	add	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	440b      	add	r3, r1
 8005c86:	3358      	adds	r3, #88	; 0x58
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d116      	bne.n	8005cbc <leds_Task+0x1644>
 8005c8e:	4962      	ldr	r1, [pc, #392]	; (8005e18 <leds_Task+0x17a0>)
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4613      	mov	r3, r2
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4413      	add	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3324      	adds	r3, #36	; 0x24
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b2d8      	uxtb	r0, r3
 8005ca2:	495d      	ldr	r1, [pc, #372]	; (8005e18 <leds_Task+0x17a0>)
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	3354      	adds	r3, #84	; 0x54
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8005cba:	e059      	b.n	8005d70 <leds_Task+0x16f8>
 8005cbc:	4956      	ldr	r1, [pc, #344]	; (8005e18 <leds_Task+0x17a0>)
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	440b      	add	r3, r1
 8005cca:	3358      	adds	r3, #88	; 0x58
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d116      	bne.n	8005d00 <leds_Task+0x1688>
 8005cd2:	4951      	ldr	r1, [pc, #324]	; (8005e18 <leds_Task+0x17a0>)
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b2d8      	uxtb	r0, r3
 8005ce6:	494c      	ldr	r1, [pc, #304]	; (8005e18 <leds_Task+0x17a0>)
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3354      	adds	r3, #84	; 0x54
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6393      	str	r3, [r2, #56]	; 0x38
 8005cfe:	e037      	b.n	8005d70 <leds_Task+0x16f8>
 8005d00:	4945      	ldr	r1, [pc, #276]	; (8005e18 <leds_Task+0x17a0>)
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4613      	mov	r3, r2
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3358      	adds	r3, #88	; 0x58
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d116      	bne.n	8005d44 <leds_Task+0x16cc>
 8005d16:	4940      	ldr	r1, [pc, #256]	; (8005e18 <leds_Task+0x17a0>)
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	4413      	add	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	440b      	add	r3, r1
 8005d24:	3324      	adds	r3, #36	; 0x24
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2d8      	uxtb	r0, r3
 8005d2a:	493b      	ldr	r1, [pc, #236]	; (8005e18 <leds_Task+0x17a0>)
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	4413      	add	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	440b      	add	r3, r1
 8005d38:	3354      	adds	r3, #84	; 0x54
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4603      	mov	r3, r0
 8005d40:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005d42:	e015      	b.n	8005d70 <leds_Task+0x16f8>
 8005d44:	4934      	ldr	r1, [pc, #208]	; (8005e18 <leds_Task+0x17a0>)
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	4413      	add	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	440b      	add	r3, r1
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	b2d8      	uxtb	r0, r3
 8005d58:	492f      	ldr	r1, [pc, #188]	; (8005e18 <leds_Task+0x17a0>)
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	4413      	add	r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	440b      	add	r3, r1
 8005d66:	3354      	adds	r3, #84	; 0x54
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	6413      	str	r3, [r2, #64]	; 0x40
												leds_info.leds[i].pwmch2_timch, leds_info.leds[i].pwmch2_value0);
						//Loops
						if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8005d70:	4929      	ldr	r1, [pc, #164]	; (8005e18 <leds_Task+0x17a0>)
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4613      	mov	r3, r2
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	4413      	add	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3334      	adds	r3, #52	; 0x34
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d80a      	bhi.n	8005d9c <leds_Task+0x1724>
 8005d86:	4924      	ldr	r1, [pc, #144]	; (8005e18 <leds_Task+0x17a0>)
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	3334      	adds	r3, #52	; 0x34
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d131      	bne.n	8005e00 <leds_Task+0x1788>
						{
							if( leds_info.leds[i].loop_cnt > 1 )
 8005d9c:	491e      	ldr	r1, [pc, #120]	; (8005e18 <leds_Task+0x17a0>)
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4613      	mov	r3, r2
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	3334      	adds	r3, #52	; 0x34
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d912      	bls.n	8005dd8 <leds_Task+0x1760>
								leds_info.leds[i].loop_cnt--;
 8005db2:	4919      	ldr	r1, [pc, #100]	; (8005e18 <leds_Task+0x17a0>)
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3334      	adds	r3, #52	; 0x34
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	1e59      	subs	r1, r3, #1
 8005dc6:	4814      	ldr	r0, [pc, #80]	; (8005e18 <leds_Task+0x17a0>)
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4403      	add	r3, r0
 8005dd4:	3334      	adds	r3, #52	; 0x34
 8005dd6:	6019      	str	r1, [r3, #0]
							leds_info.leds[i].timer = leds_info.leds[i].anim_time_st0;
 8005dd8:	490f      	ldr	r1, [pc, #60]	; (8005e18 <leds_Task+0x17a0>)
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	440b      	add	r3, r1
 8005de6:	332c      	adds	r3, #44	; 0x2c
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	480b      	ldr	r0, [pc, #44]	; (8005e18 <leds_Task+0x17a0>)
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4613      	mov	r3, r2
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	4413      	add	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4403      	add	r3, r0
 8005df8:	3304      	adds	r3, #4
 8005dfa:	6019      	str	r1, [r3, #0]
 8005dfc:	f001 ba06 	b.w	800720c <leds_Task+0x2b94>
						}
						//Stop blinking
						else
							leds_info.leds[i].mode = led_toggle;
 8005e00:	4905      	ldr	r1, [pc, #20]	; (8005e18 <leds_Task+0x17a0>)
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4413      	add	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3302      	adds	r3, #2
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	f001 b9fa 	b.w	800720c <leds_Task+0x2b94>
 8005e18:	20000a3c 	.word	0x20000a3c
					}
				}
			}
			//Fade blink mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fadeblink )
 8005e1c:	49cd      	ldr	r1, [pc, #820]	; (8006154 <leds_Task+0x1adc>)
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	440b      	add	r3, r1
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	f040 8743 	bne.w	8006cbc <leds_Task+0x2644>
			{
				//
				if( leds_info.leds[i].state == led_go_to_st1 )
 8005e36:	49c7      	ldr	r1, [pc, #796]	; (8006154 <leds_Task+0x1adc>)
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	4413      	add	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	440b      	add	r3, r1
 8005e44:	3301      	adds	r3, #1
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	f040 8378 	bne.w	8006540 <leds_Task+0x1ec8>
				{
					if( leds_info.leds[i].timer == 0 )
 8005e50:	49c0      	ldr	r1, [pc, #768]	; (8006154 <leds_Task+0x1adc>)
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4613      	mov	r3, r2
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	4413      	add	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3304      	adds	r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f041 81d2 	bne.w	800720c <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8005e68:	49ba      	ldr	r1, [pc, #744]	; (8006154 <leds_Task+0x1adc>)
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	4413      	add	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	440b      	add	r3, r1
 8005e76:	3304      	adds	r3, #4
 8005e78:	2214      	movs	r2, #20
 8005e7a:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8005e7c:	49b5      	ldr	r1, [pc, #724]	; (8006154 <leds_Task+0x1adc>)
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	4413      	add	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	3310      	adds	r3, #16
 8005e8c:	ed93 7a00 	vldr	s14, [r3]
 8005e90:	49b0      	ldr	r1, [pc, #704]	; (8006154 <leds_Task+0x1adc>)
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4613      	mov	r3, r2
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	4413      	add	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	edd3 7a00 	vldr	s15, [r3]
 8005ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea8:	49aa      	ldr	r1, [pc, #680]	; (8006154 <leds_Task+0x1adc>)
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4613      	mov	r3, r2
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8005ebc:	49a5      	ldr	r1, [pc, #660]	; (8006154 <leds_Task+0x1adc>)
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	4413      	add	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	440b      	add	r3, r1
 8005eca:	331c      	adds	r3, #28
 8005ecc:	ed93 7a00 	vldr	s14, [r3]
 8005ed0:	49a0      	ldr	r1, [pc, #640]	; (8006154 <leds_Task+0x1adc>)
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	3314      	adds	r3, #20
 8005ee0:	edd3 7a00 	vldr	s15, [r3]
 8005ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee8:	499a      	ldr	r1, [pc, #616]	; (8006154 <leds_Task+0x1adc>)
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4613      	mov	r3, r2
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	4413      	add	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8005efc:	4995      	ldr	r1, [pc, #596]	; (8006154 <leds_Task+0x1adc>)
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4613      	mov	r3, r2
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	440b      	add	r3, r1
 8005f0a:	3328      	adds	r3, #40	; 0x28
 8005f0c:	ed93 7a00 	vldr	s14, [r3]
 8005f10:	4990      	ldr	r1, [pc, #576]	; (8006154 <leds_Task+0x1adc>)
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4613      	mov	r3, r2
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	4413      	add	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	440b      	add	r3, r1
 8005f1e:	3320      	adds	r3, #32
 8005f20:	edd3 7a00 	vldr	s15, [r3]
 8005f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f28:	498a      	ldr	r1, [pc, #552]	; (8006154 <leds_Task+0x1adc>)
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	4413      	add	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	440b      	add	r3, r1
 8005f36:	3320      	adds	r3, #32
 8005f38:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8005f3c:	4985      	ldr	r1, [pc, #532]	; (8006154 <leds_Task+0x1adc>)
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4613      	mov	r3, r2
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	440b      	add	r3, r1
 8005f4a:	3338      	adds	r3, #56	; 0x38
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	1e50      	subs	r0, r2, #1
 8005f50:	4c80      	ldr	r4, [pc, #512]	; (8006154 <leds_Task+0x1adc>)
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	460b      	mov	r3, r1
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	440b      	add	r3, r1
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4423      	add	r3, r4
 8005f5e:	3338      	adds	r3, #56	; 0x38
 8005f60:	6018      	str	r0, [r3, #0]
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	f040 8127 	bne.w	80061b6 <leds_Task+0x1b3e>
						{
							leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8005f68:	497a      	ldr	r1, [pc, #488]	; (8006154 <leds_Task+0x1adc>)
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	440b      	add	r3, r1
 8005f76:	330d      	adds	r3, #13
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f84:	4973      	ldr	r1, [pc, #460]	; (8006154 <leds_Task+0x1adc>)
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	440b      	add	r3, r1
 8005f92:	3308      	adds	r3, #8
 8005f94:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8005f98:	496e      	ldr	r1, [pc, #440]	; (8006154 <leds_Task+0x1adc>)
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3319      	adds	r3, #25
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	4967      	ldr	r1, [pc, #412]	; (8006154 <leds_Task+0x1adc>)
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	440b      	add	r3, r1
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8005fc8:	4962      	ldr	r1, [pc, #392]	; (8006154 <leds_Task+0x1adc>)
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	440b      	add	r3, r1
 8005fd6:	3325      	adds	r3, #37	; 0x25
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe4:	495b      	ldr	r1, [pc, #364]	; (8006154 <leds_Task+0x1adc>)
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3320      	adds	r3, #32
 8005ff4:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].state = led_go_to_st0;
 8005ff8:	4956      	ldr	r1, [pc, #344]	; (8006154 <leds_Task+0x1adc>)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4413      	add	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	440b      	add	r3, r1
 8006006:	3301      	adds	r3, #1
 8006008:	2202      	movs	r2, #2
 800600a:	701a      	strb	r2, [r3, #0]
							leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st1 / LEDS_FADE_STEP_TIME;
 800600c:	4951      	ldr	r1, [pc, #324]	; (8006154 <leds_Task+0x1adc>)
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	3330      	adds	r3, #48	; 0x30
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4e      	ldr	r2, [pc, #312]	; (8006158 <leds_Task+0x1ae0>)
 8006020:	fba2 2303 	umull	r2, r3, r2, r3
 8006024:	0919      	lsrs	r1, r3, #4
 8006026:	484b      	ldr	r0, [pc, #300]	; (8006154 <leds_Task+0x1adc>)
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	4413      	add	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4403      	add	r3, r0
 8006034:	3338      	adds	r3, #56	; 0x38
 8006036:	6019      	str	r1, [r3, #0]
							if( leds_info.leds[i].step_cnt == 0 )
 8006038:	4946      	ldr	r1, [pc, #280]	; (8006154 <leds_Task+0x1adc>)
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4613      	mov	r3, r2
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	4413      	add	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	440b      	add	r3, r1
 8006046:	3338      	adds	r3, #56	; 0x38
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <leds_Task+0x19ea>
								leds_info.leds[i].step_cnt = 1;
 800604e:	4941      	ldr	r1, [pc, #260]	; (8006154 <leds_Task+0x1adc>)
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	4413      	add	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	440b      	add	r3, r1
 800605c:	3338      	adds	r3, #56	; 0x38
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]
							leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value0 - (float)leds_info.leds[i].pwmch0_value1) / (float)leds_info.leds[i].step_cnt;
 8006062:	493c      	ldr	r1, [pc, #240]	; (8006154 <leds_Task+0x1adc>)
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4613      	mov	r3, r2
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	4413      	add	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	440b      	add	r3, r1
 8006070:	330c      	adds	r3, #12
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800607e:	4935      	ldr	r1, [pc, #212]	; (8006154 <leds_Task+0x1adc>)
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4613      	mov	r3, r2
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	440b      	add	r3, r1
 800608c:	330d      	adds	r3, #13
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800609e:	492d      	ldr	r1, [pc, #180]	; (8006154 <leds_Task+0x1adc>)
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4613      	mov	r3, r2
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	440b      	add	r3, r1
 80060ac:	3338      	adds	r3, #56	; 0x38
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060bc:	4925      	ldr	r1, [pc, #148]	; (8006154 <leds_Task+0x1adc>)
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3310      	adds	r3, #16
 80060cc:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch1_step = ((float)leds_info.leds[i].pwmch1_value0 - (float)leds_info.leds[i].pwmch1_value1) / (float)leds_info.leds[i].step_cnt;
 80060d0:	4920      	ldr	r1, [pc, #128]	; (8006154 <leds_Task+0x1adc>)
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4613      	mov	r3, r2
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4413      	add	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	440b      	add	r3, r1
 80060de:	3318      	adds	r3, #24
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060ec:	4919      	ldr	r1, [pc, #100]	; (8006154 <leds_Task+0x1adc>)
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	4413      	add	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	440b      	add	r3, r1
 80060fa:	3319      	adds	r3, #25
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006108:	ee77 6a67 	vsub.f32	s13, s14, s15
 800610c:	4911      	ldr	r1, [pc, #68]	; (8006154 <leds_Task+0x1adc>)
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4613      	mov	r3, r2
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	4413      	add	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	440b      	add	r3, r1
 800611a:	3338      	adds	r3, #56	; 0x38
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800612a:	490a      	ldr	r1, [pc, #40]	; (8006154 <leds_Task+0x1adc>)
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4613      	mov	r3, r2
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	440b      	add	r3, r1
 8006138:	331c      	adds	r3, #28
 800613a:	edc3 7a00 	vstr	s15, [r3]
							leds_info.leds[i].pwmch2_step = ((float)leds_info.leds[i].pwmch2_value0 - (float)leds_info.leds[i].pwmch2_value1) / (float)leds_info.leds[i].step_cnt;
 800613e:	4905      	ldr	r1, [pc, #20]	; (8006154 <leds_Task+0x1adc>)
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	440b      	add	r3, r1
 800614c:	3324      	adds	r3, #36	; 0x24
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e003      	b.n	800615c <leds_Task+0x1ae4>
 8006154:	20000a3c 	.word	0x20000a3c
 8006158:	cccccccd 	.word	0xcccccccd
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006164:	49bc      	ldr	r1, [pc, #752]	; (8006458 <leds_Task+0x1de0>)
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4613      	mov	r3, r2
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	4413      	add	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	440b      	add	r3, r1
 8006172:	3325      	adds	r3, #37	; 0x25
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006180:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006184:	49b4      	ldr	r1, [pc, #720]	; (8006458 <leds_Task+0x1de0>)
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	4413      	add	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	440b      	add	r3, r1
 8006192:	3338      	adds	r3, #56	; 0x38
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	49ad      	ldr	r1, [pc, #692]	; (8006458 <leds_Task+0x1de0>)
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4613      	mov	r3, r2
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	4413      	add	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	440b      	add	r3, r1
 80061b0:	3328      	adds	r3, #40	; 0x28
 80061b2:	edc3 7a00 	vstr	s15, [r3]
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 80061b6:	49a8      	ldr	r1, [pc, #672]	; (8006458 <leds_Task+0x1de0>)
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4613      	mov	r3, r2
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	4413      	add	r3, r2
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	440b      	add	r3, r1
 80061c4:	3348      	adds	r3, #72	; 0x48
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d11c      	bne.n	8006206 <leds_Task+0x1b8e>
 80061cc:	49a2      	ldr	r1, [pc, #648]	; (8006458 <leds_Task+0x1de0>)
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4613      	mov	r3, r2
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	4413      	add	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	440b      	add	r3, r1
 80061da:	3308      	adds	r3, #8
 80061dc:	edd3 7a00 	vldr	s15, [r3]
 80061e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80061e8:	793b      	ldrb	r3, [r7, #4]
 80061ea:	b2d8      	uxtb	r0, r3
 80061ec:	499a      	ldr	r1, [pc, #616]	; (8006458 <leds_Task+0x1de0>)
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4613      	mov	r3, r2
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	4413      	add	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	440b      	add	r3, r1
 80061fa:	3344      	adds	r3, #68	; 0x44
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4602      	mov	r2, r0
 8006202:	635a      	str	r2, [r3, #52]	; 0x34
 8006204:	e06b      	b.n	80062de <leds_Task+0x1c66>
 8006206:	4994      	ldr	r1, [pc, #592]	; (8006458 <leds_Task+0x1de0>)
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4613      	mov	r3, r2
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	3348      	adds	r3, #72	; 0x48
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b04      	cmp	r3, #4
 800621a:	d11c      	bne.n	8006256 <leds_Task+0x1bde>
 800621c:	498e      	ldr	r1, [pc, #568]	; (8006458 <leds_Task+0x1de0>)
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	3308      	adds	r3, #8
 800622c:	edd3 7a00 	vldr	s15, [r3]
 8006230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006234:	edc7 7a01 	vstr	s15, [r7, #4]
 8006238:	793b      	ldrb	r3, [r7, #4]
 800623a:	b2d8      	uxtb	r0, r3
 800623c:	4986      	ldr	r1, [pc, #536]	; (8006458 <leds_Task+0x1de0>)
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	4413      	add	r3, r2
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	440b      	add	r3, r1
 800624a:	3344      	adds	r3, #68	; 0x44
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4603      	mov	r3, r0
 8006252:	6393      	str	r3, [r2, #56]	; 0x38
 8006254:	e043      	b.n	80062de <leds_Task+0x1c66>
 8006256:	4980      	ldr	r1, [pc, #512]	; (8006458 <leds_Task+0x1de0>)
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4613      	mov	r3, r2
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	440b      	add	r3, r1
 8006264:	3348      	adds	r3, #72	; 0x48
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d11c      	bne.n	80062a6 <leds_Task+0x1c2e>
 800626c:	497a      	ldr	r1, [pc, #488]	; (8006458 <leds_Task+0x1de0>)
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4613      	mov	r3, r2
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	440b      	add	r3, r1
 800627a:	3308      	adds	r3, #8
 800627c:	edd3 7a00 	vldr	s15, [r3]
 8006280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006284:	edc7 7a01 	vstr	s15, [r7, #4]
 8006288:	793b      	ldrb	r3, [r7, #4]
 800628a:	b2d8      	uxtb	r0, r3
 800628c:	4972      	ldr	r1, [pc, #456]	; (8006458 <leds_Task+0x1de0>)
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	440b      	add	r3, r1
 800629a:	3344      	adds	r3, #68	; 0x44
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4603      	mov	r3, r0
 80062a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80062a4:	e01b      	b.n	80062de <leds_Task+0x1c66>
 80062a6:	496c      	ldr	r1, [pc, #432]	; (8006458 <leds_Task+0x1de0>)
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4613      	mov	r3, r2
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	4413      	add	r3, r2
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	440b      	add	r3, r1
 80062b4:	3308      	adds	r3, #8
 80062b6:	edd3 7a00 	vldr	s15, [r3]
 80062ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062be:	edc7 7a01 	vstr	s15, [r7, #4]
 80062c2:	793b      	ldrb	r3, [r7, #4]
 80062c4:	b2d8      	uxtb	r0, r3
 80062c6:	4964      	ldr	r1, [pc, #400]	; (8006458 <leds_Task+0x1de0>)
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4613      	mov	r3, r2
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	4413      	add	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	440b      	add	r3, r1
 80062d4:	3344      	adds	r3, #68	; 0x44
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4603      	mov	r3, r0
 80062dc:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 80062de:	495e      	ldr	r1, [pc, #376]	; (8006458 <leds_Task+0x1de0>)
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4613      	mov	r3, r2
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	4413      	add	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	440b      	add	r3, r1
 80062ec:	3350      	adds	r3, #80	; 0x50
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11c      	bne.n	800632e <leds_Task+0x1cb6>
 80062f4:	4958      	ldr	r1, [pc, #352]	; (8006458 <leds_Task+0x1de0>)
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	4413      	add	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	440b      	add	r3, r1
 8006302:	3314      	adds	r3, #20
 8006304:	edd3 7a00 	vldr	s15, [r3]
 8006308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800630c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006310:	793b      	ldrb	r3, [r7, #4]
 8006312:	b2d8      	uxtb	r0, r3
 8006314:	4950      	ldr	r1, [pc, #320]	; (8006458 <leds_Task+0x1de0>)
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	4413      	add	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	440b      	add	r3, r1
 8006322:	334c      	adds	r3, #76	; 0x4c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4602      	mov	r2, r0
 800632a:	635a      	str	r2, [r3, #52]	; 0x34
 800632c:	e06b      	b.n	8006406 <leds_Task+0x1d8e>
 800632e:	494a      	ldr	r1, [pc, #296]	; (8006458 <leds_Task+0x1de0>)
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4613      	mov	r3, r2
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	4413      	add	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	440b      	add	r3, r1
 800633c:	3350      	adds	r3, #80	; 0x50
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b04      	cmp	r3, #4
 8006342:	d11c      	bne.n	800637e <leds_Task+0x1d06>
 8006344:	4944      	ldr	r1, [pc, #272]	; (8006458 <leds_Task+0x1de0>)
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	4413      	add	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	440b      	add	r3, r1
 8006352:	3314      	adds	r3, #20
 8006354:	edd3 7a00 	vldr	s15, [r3]
 8006358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800635c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006360:	793b      	ldrb	r3, [r7, #4]
 8006362:	b2d8      	uxtb	r0, r3
 8006364:	493c      	ldr	r1, [pc, #240]	; (8006458 <leds_Task+0x1de0>)
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4613      	mov	r3, r2
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	4413      	add	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	440b      	add	r3, r1
 8006372:	334c      	adds	r3, #76	; 0x4c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4603      	mov	r3, r0
 800637a:	6393      	str	r3, [r2, #56]	; 0x38
 800637c:	e043      	b.n	8006406 <leds_Task+0x1d8e>
 800637e:	4936      	ldr	r1, [pc, #216]	; (8006458 <leds_Task+0x1de0>)
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4613      	mov	r3, r2
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	4413      	add	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	440b      	add	r3, r1
 800638c:	3350      	adds	r3, #80	; 0x50
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b08      	cmp	r3, #8
 8006392:	d11c      	bne.n	80063ce <leds_Task+0x1d56>
 8006394:	4930      	ldr	r1, [pc, #192]	; (8006458 <leds_Task+0x1de0>)
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4613      	mov	r3, r2
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	4413      	add	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	440b      	add	r3, r1
 80063a2:	3314      	adds	r3, #20
 80063a4:	edd3 7a00 	vldr	s15, [r3]
 80063a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80063b0:	793b      	ldrb	r3, [r7, #4]
 80063b2:	b2d8      	uxtb	r0, r3
 80063b4:	4928      	ldr	r1, [pc, #160]	; (8006458 <leds_Task+0x1de0>)
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	440b      	add	r3, r1
 80063c2:	334c      	adds	r3, #76	; 0x4c
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4603      	mov	r3, r0
 80063ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80063cc:	e01b      	b.n	8006406 <leds_Task+0x1d8e>
 80063ce:	4922      	ldr	r1, [pc, #136]	; (8006458 <leds_Task+0x1de0>)
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4613      	mov	r3, r2
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	3314      	adds	r3, #20
 80063de:	edd3 7a00 	vldr	s15, [r3]
 80063e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80063ea:	793b      	ldrb	r3, [r7, #4]
 80063ec:	b2d8      	uxtb	r0, r3
 80063ee:	491a      	ldr	r1, [pc, #104]	; (8006458 <leds_Task+0x1de0>)
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4613      	mov	r3, r2
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	4413      	add	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	440b      	add	r3, r1
 80063fc:	334c      	adds	r3, #76	; 0x4c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4603      	mov	r3, r0
 8006404:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8006406:	4914      	ldr	r1, [pc, #80]	; (8006458 <leds_Task+0x1de0>)
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4613      	mov	r3, r2
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	3358      	adds	r3, #88	; 0x58
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11f      	bne.n	800645c <leds_Task+0x1de4>
 800641c:	490e      	ldr	r1, [pc, #56]	; (8006458 <leds_Task+0x1de0>)
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4613      	mov	r3, r2
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	4413      	add	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	440b      	add	r3, r1
 800642a:	3320      	adds	r3, #32
 800642c:	edd3 7a00 	vldr	s15, [r3]
 8006430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006434:	edc7 7a01 	vstr	s15, [r7, #4]
 8006438:	793b      	ldrb	r3, [r7, #4]
 800643a:	b2d8      	uxtb	r0, r3
 800643c:	4906      	ldr	r1, [pc, #24]	; (8006458 <leds_Task+0x1de0>)
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4613      	mov	r3, r2
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	4413      	add	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	440b      	add	r3, r1
 800644a:	3354      	adds	r3, #84	; 0x54
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4602      	mov	r2, r0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34
 8006454:	f000 beda 	b.w	800720c <leds_Task+0x2b94>
 8006458:	20000a3c 	.word	0x20000a3c
 800645c:	4937      	ldr	r1, [pc, #220]	; (800653c <leds_Task+0x1ec4>)
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4613      	mov	r3, r2
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	4413      	add	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	440b      	add	r3, r1
 800646a:	3358      	adds	r3, #88	; 0x58
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d11d      	bne.n	80064ae <leds_Task+0x1e36>
 8006472:	4932      	ldr	r1, [pc, #200]	; (800653c <leds_Task+0x1ec4>)
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4613      	mov	r3, r2
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	4413      	add	r3, r2
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	440b      	add	r3, r1
 8006480:	3320      	adds	r3, #32
 8006482:	edd3 7a00 	vldr	s15, [r3]
 8006486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648a:	edc7 7a01 	vstr	s15, [r7, #4]
 800648e:	793b      	ldrb	r3, [r7, #4]
 8006490:	b2d8      	uxtb	r0, r3
 8006492:	492a      	ldr	r1, [pc, #168]	; (800653c <leds_Task+0x1ec4>)
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	4413      	add	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	440b      	add	r3, r1
 80064a0:	3354      	adds	r3, #84	; 0x54
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4603      	mov	r3, r0
 80064a8:	6393      	str	r3, [r2, #56]	; 0x38
 80064aa:	f000 beaf 	b.w	800720c <leds_Task+0x2b94>
 80064ae:	4923      	ldr	r1, [pc, #140]	; (800653c <leds_Task+0x1ec4>)
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	4413      	add	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	440b      	add	r3, r1
 80064bc:	3358      	adds	r3, #88	; 0x58
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d11d      	bne.n	8006500 <leds_Task+0x1e88>
 80064c4:	491d      	ldr	r1, [pc, #116]	; (800653c <leds_Task+0x1ec4>)
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4613      	mov	r3, r2
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	4413      	add	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	440b      	add	r3, r1
 80064d2:	3320      	adds	r3, #32
 80064d4:	edd3 7a00 	vldr	s15, [r3]
 80064d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80064e0:	793b      	ldrb	r3, [r7, #4]
 80064e2:	b2d8      	uxtb	r0, r3
 80064e4:	4915      	ldr	r1, [pc, #84]	; (800653c <leds_Task+0x1ec4>)
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3354      	adds	r3, #84	; 0x54
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4603      	mov	r3, r0
 80064fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80064fc:	f000 be86 	b.w	800720c <leds_Task+0x2b94>
 8006500:	490e      	ldr	r1, [pc, #56]	; (800653c <leds_Task+0x1ec4>)
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	4413      	add	r3, r2
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	440b      	add	r3, r1
 800650e:	3320      	adds	r3, #32
 8006510:	edd3 7a00 	vldr	s15, [r3]
 8006514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006518:	edc7 7a01 	vstr	s15, [r7, #4]
 800651c:	793b      	ldrb	r3, [r7, #4]
 800651e:	b2d8      	uxtb	r0, r3
 8006520:	4906      	ldr	r1, [pc, #24]	; (800653c <leds_Task+0x1ec4>)
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4613      	mov	r3, r2
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	4413      	add	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	440b      	add	r3, r1
 800652e:	3354      	adds	r3, #84	; 0x54
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4603      	mov	r3, r0
 8006536:	6413      	str	r3, [r2, #64]	; 0x40
 8006538:	f000 be68 	b.w	800720c <leds_Task+0x2b94>
 800653c:	20000a3c 	.word	0x20000a3c
											leds_info.leds[i].pwmch2_timch, (uint8_t)leds_info.leds[i].pwmch2_cur_value);
					}
				}
				else if( leds_info.leds[i].state == led_go_to_st0 )
 8006540:	49ca      	ldr	r1, [pc, #808]	; (800686c <leds_Task+0x21f4>)
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4613      	mov	r3, r2
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	4413      	add	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	440b      	add	r3, r1
 800654e:	3301      	adds	r3, #1
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	f040 8659 	bne.w	800720c <leds_Task+0x2b94>
				{
					if( leds_info.leds[i].timer == 0 )
 800655a:	49c4      	ldr	r1, [pc, #784]	; (800686c <leds_Task+0x21f4>)
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4613      	mov	r3, r2
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	4413      	add	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	440b      	add	r3, r1
 8006568:	3304      	adds	r3, #4
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 864d 	bne.w	800720c <leds_Task+0x2b94>
					{
						leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8006572:	49be      	ldr	r1, [pc, #760]	; (800686c <leds_Task+0x21f4>)
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4613      	mov	r3, r2
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	4413      	add	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	440b      	add	r3, r1
 8006580:	3304      	adds	r3, #4
 8006582:	2214      	movs	r2, #20
 8006584:	601a      	str	r2, [r3, #0]
						leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8006586:	49b9      	ldr	r1, [pc, #740]	; (800686c <leds_Task+0x21f4>)
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4613      	mov	r3, r2
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	4413      	add	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	440b      	add	r3, r1
 8006594:	3310      	adds	r3, #16
 8006596:	ed93 7a00 	vldr	s14, [r3]
 800659a:	49b4      	ldr	r1, [pc, #720]	; (800686c <leds_Task+0x21f4>)
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4613      	mov	r3, r2
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	440b      	add	r3, r1
 80065a8:	3308      	adds	r3, #8
 80065aa:	edd3 7a00 	vldr	s15, [r3]
 80065ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b2:	49ae      	ldr	r1, [pc, #696]	; (800686c <leds_Task+0x21f4>)
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4613      	mov	r3, r2
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	4413      	add	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	440b      	add	r3, r1
 80065c0:	3308      	adds	r3, #8
 80065c2:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 80065c6:	49a9      	ldr	r1, [pc, #676]	; (800686c <leds_Task+0x21f4>)
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4613      	mov	r3, r2
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	331c      	adds	r3, #28
 80065d6:	ed93 7a00 	vldr	s14, [r3]
 80065da:	49a4      	ldr	r1, [pc, #656]	; (800686c <leds_Task+0x21f4>)
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4613      	mov	r3, r2
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	440b      	add	r3, r1
 80065e8:	3314      	adds	r3, #20
 80065ea:	edd3 7a00 	vldr	s15, [r3]
 80065ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f2:	499e      	ldr	r1, [pc, #632]	; (800686c <leds_Task+0x21f4>)
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4613      	mov	r3, r2
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	3314      	adds	r3, #20
 8006602:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8006606:	4999      	ldr	r1, [pc, #612]	; (800686c <leds_Task+0x21f4>)
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4613      	mov	r3, r2
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	4413      	add	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	440b      	add	r3, r1
 8006614:	3328      	adds	r3, #40	; 0x28
 8006616:	ed93 7a00 	vldr	s14, [r3]
 800661a:	4994      	ldr	r1, [pc, #592]	; (800686c <leds_Task+0x21f4>)
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4613      	mov	r3, r2
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	440b      	add	r3, r1
 8006628:	3320      	adds	r3, #32
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006632:	498e      	ldr	r1, [pc, #568]	; (800686c <leds_Task+0x21f4>)
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4613      	mov	r3, r2
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	4413      	add	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	440b      	add	r3, r1
 8006640:	3320      	adds	r3, #32
 8006642:	edc3 7a00 	vstr	s15, [r3]
						if( leds_info.leds[i].step_cnt-- == 0 )
 8006646:	4989      	ldr	r1, [pc, #548]	; (800686c <leds_Task+0x21f4>)
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4613      	mov	r3, r2
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	4413      	add	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	440b      	add	r3, r1
 8006654:	3338      	adds	r3, #56	; 0x38
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	1e50      	subs	r0, r2, #1
 800665a:	4c84      	ldr	r4, [pc, #528]	; (800686c <leds_Task+0x21f4>)
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	460b      	mov	r3, r1
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	440b      	add	r3, r1
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4423      	add	r3, r4
 8006668:	3338      	adds	r3, #56	; 0x38
 800666a:	6018      	str	r0, [r3, #0]
 800666c:	2a00      	cmp	r2, #0
 800666e:	f040 8163 	bne.w	8006938 <leds_Task+0x22c0>
						{
							if( (leds_info.leds[i].loop_cnt > 1) || (leds_info.leds[i].loop_cnt == 0) )
 8006672:	497e      	ldr	r1, [pc, #504]	; (800686c <leds_Task+0x21f4>)
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4613      	mov	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4413      	add	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	440b      	add	r3, r1
 8006680:	3334      	adds	r3, #52	; 0x34
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d80b      	bhi.n	80066a0 <leds_Task+0x2028>
 8006688:	4978      	ldr	r1, [pc, #480]	; (800686c <leds_Task+0x21f4>)
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4613      	mov	r3, r2
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	440b      	add	r3, r1
 8006696:	3334      	adds	r3, #52	; 0x34
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f040 8147 	bne.w	800692e <leds_Task+0x22b6>
							{
								if( leds_info.leds[i].loop_cnt > 1 )
 80066a0:	4972      	ldr	r1, [pc, #456]	; (800686c <leds_Task+0x21f4>)
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4613      	mov	r3, r2
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	4413      	add	r3, r2
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	440b      	add	r3, r1
 80066ae:	3334      	adds	r3, #52	; 0x34
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d912      	bls.n	80066dc <leds_Task+0x2064>
									leds_info.leds[i].loop_cnt--;
 80066b6:	496d      	ldr	r1, [pc, #436]	; (800686c <leds_Task+0x21f4>)
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4613      	mov	r3, r2
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	440b      	add	r3, r1
 80066c4:	3334      	adds	r3, #52	; 0x34
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	1e59      	subs	r1, r3, #1
 80066ca:	4868      	ldr	r0, [pc, #416]	; (800686c <leds_Task+0x21f4>)
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4613      	mov	r3, r2
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	4413      	add	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	4403      	add	r3, r0
 80066d8:	3334      	adds	r3, #52	; 0x34
 80066da:	6019      	str	r1, [r3, #0]
								leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value0;
 80066dc:	4963      	ldr	r1, [pc, #396]	; (800686c <leds_Task+0x21f4>)
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4613      	mov	r3, r2
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	4413      	add	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	440b      	add	r3, r1
 80066ea:	330c      	adds	r3, #12
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f8:	495c      	ldr	r1, [pc, #368]	; (800686c <leds_Task+0x21f4>)
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	4413      	add	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	440b      	add	r3, r1
 8006706:	3308      	adds	r3, #8
 8006708:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value0;
 800670c:	4957      	ldr	r1, [pc, #348]	; (800686c <leds_Task+0x21f4>)
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4613      	mov	r3, r2
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	440b      	add	r3, r1
 800671a:	3318      	adds	r3, #24
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006728:	4950      	ldr	r1, [pc, #320]	; (800686c <leds_Task+0x21f4>)
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4613      	mov	r3, r2
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4413      	add	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	440b      	add	r3, r1
 8006736:	3314      	adds	r3, #20
 8006738:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value0;
 800673c:	494b      	ldr	r1, [pc, #300]	; (800686c <leds_Task+0x21f4>)
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4613      	mov	r3, r2
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	4413      	add	r3, r2
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	440b      	add	r3, r1
 800674a:	3324      	adds	r3, #36	; 0x24
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006758:	4944      	ldr	r1, [pc, #272]	; (800686c <leds_Task+0x21f4>)
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4613      	mov	r3, r2
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	4413      	add	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	440b      	add	r3, r1
 8006766:	3320      	adds	r3, #32
 8006768:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].state = led_go_to_st1;
 800676c:	493f      	ldr	r1, [pc, #252]	; (800686c <leds_Task+0x21f4>)
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4613      	mov	r3, r2
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	4413      	add	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	440b      	add	r3, r1
 800677a:	3301      	adds	r3, #1
 800677c:	2203      	movs	r2, #3
 800677e:	701a      	strb	r2, [r3, #0]
								leds_info.leds[i].step_cnt = leds_info.leds[i].anim_time_st0 / LEDS_FADE_STEP_TIME;
 8006780:	493a      	ldr	r1, [pc, #232]	; (800686c <leds_Task+0x21f4>)
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4613      	mov	r3, r2
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	4413      	add	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	440b      	add	r3, r1
 800678e:	332c      	adds	r3, #44	; 0x2c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a37      	ldr	r2, [pc, #220]	; (8006870 <leds_Task+0x21f8>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	0919      	lsrs	r1, r3, #4
 800679a:	4834      	ldr	r0, [pc, #208]	; (800686c <leds_Task+0x21f4>)
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4613      	mov	r3, r2
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4413      	add	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4403      	add	r3, r0
 80067a8:	3338      	adds	r3, #56	; 0x38
 80067aa:	6019      	str	r1, [r3, #0]
								if( leds_info.leds[i].step_cnt == 0 )
 80067ac:	492f      	ldr	r1, [pc, #188]	; (800686c <leds_Task+0x21f4>)
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	4413      	add	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	440b      	add	r3, r1
 80067ba:	3338      	adds	r3, #56	; 0x38
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <leds_Task+0x215e>
									leds_info.leds[i].step_cnt = 1;
 80067c2:	492a      	ldr	r1, [pc, #168]	; (800686c <leds_Task+0x21f4>)
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4613      	mov	r3, r2
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	4413      	add	r3, r2
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	440b      	add	r3, r1
 80067d0:	3338      	adds	r3, #56	; 0x38
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
								leds_info.leds[i].pwmch0_step = ((float)leds_info.leds[i].pwmch0_value1 - (float)leds_info.leds[i].pwmch0_value0) / (float)leds_info.leds[i].step_cnt;
 80067d6:	4925      	ldr	r1, [pc, #148]	; (800686c <leds_Task+0x21f4>)
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4613      	mov	r3, r2
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	4413      	add	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	440b      	add	r3, r1
 80067e4:	330d      	adds	r3, #13
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067f2:	491e      	ldr	r1, [pc, #120]	; (800686c <leds_Task+0x21f4>)
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4613      	mov	r3, r2
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	4413      	add	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	440b      	add	r3, r1
 8006800:	330c      	adds	r3, #12
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006812:	4916      	ldr	r1, [pc, #88]	; (800686c <leds_Task+0x21f4>)
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4613      	mov	r3, r2
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	4413      	add	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	440b      	add	r3, r1
 8006820:	3338      	adds	r3, #56	; 0x38
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800682c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006830:	490e      	ldr	r1, [pc, #56]	; (800686c <leds_Task+0x21f4>)
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4613      	mov	r3, r2
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	4413      	add	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	440b      	add	r3, r1
 800683e:	3310      	adds	r3, #16
 8006840:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch1_step = ((float)leds_info.leds[i].pwmch1_value1 - (float)leds_info.leds[i].pwmch1_value0) / (float)leds_info.leds[i].step_cnt;
 8006844:	4909      	ldr	r1, [pc, #36]	; (800686c <leds_Task+0x21f4>)
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4413      	add	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	440b      	add	r3, r1
 8006852:	3319      	adds	r3, #25
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006860:	4902      	ldr	r1, [pc, #8]	; (800686c <leds_Task+0x21f4>)
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4613      	mov	r3, r2
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	e004      	b.n	8006874 <leds_Task+0x21fc>
 800686a:	bf00      	nop
 800686c:	20000a3c 	.word	0x20000a3c
 8006870:	cccccccd 	.word	0xcccccccd
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	440b      	add	r3, r1
 800687a:	3318      	adds	r3, #24
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006888:	ee77 6a67 	vsub.f32	s13, s14, s15
 800688c:	49b0      	ldr	r1, [pc, #704]	; (8006b50 <leds_Task+0x24d8>)
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4613      	mov	r3, r2
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	4413      	add	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	440b      	add	r3, r1
 800689a:	3338      	adds	r3, #56	; 0x38
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068aa:	49a9      	ldr	r1, [pc, #676]	; (8006b50 <leds_Task+0x24d8>)
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4613      	mov	r3, r2
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	4413      	add	r3, r2
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	440b      	add	r3, r1
 80068b8:	331c      	adds	r3, #28
 80068ba:	edc3 7a00 	vstr	s15, [r3]
								leds_info.leds[i].pwmch2_step = ((float)leds_info.leds[i].pwmch2_value1 - (float)leds_info.leds[i].pwmch2_value0) / (float)leds_info.leds[i].step_cnt;
 80068be:	49a4      	ldr	r1, [pc, #656]	; (8006b50 <leds_Task+0x24d8>)
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4613      	mov	r3, r2
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	4413      	add	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	440b      	add	r3, r1
 80068cc:	3325      	adds	r3, #37	; 0x25
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068da:	499d      	ldr	r1, [pc, #628]	; (8006b50 <leds_Task+0x24d8>)
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4613      	mov	r3, r2
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	4413      	add	r3, r2
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	440b      	add	r3, r1
 80068e8:	3324      	adds	r3, #36	; 0x24
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80068fa:	4995      	ldr	r1, [pc, #596]	; (8006b50 <leds_Task+0x24d8>)
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4613      	mov	r3, r2
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	4413      	add	r3, r2
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	440b      	add	r3, r1
 8006908:	3338      	adds	r3, #56	; 0x38
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006918:	498d      	ldr	r1, [pc, #564]	; (8006b50 <leds_Task+0x24d8>)
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	440b      	add	r3, r1
 8006926:	3328      	adds	r3, #40	; 0x28
 8006928:	edc3 7a00 	vstr	s15, [r3]
 800692c:	e004      	b.n	8006938 <leds_Task+0x22c0>
							}
							else
								//leds_info.leds[i].mode = led_toggle;
								leds_setFade(i, 200, LEDS_MIN_PWM_VALUE);
 800692e:	2200      	movs	r2, #0
 8006930:	21c8      	movs	r1, #200	; 0xc8
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f001 f858 	bl	80079e8 <leds_setFade>
						}
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8006938:	4985      	ldr	r1, [pc, #532]	; (8006b50 <leds_Task+0x24d8>)
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4613      	mov	r3, r2
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4413      	add	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	440b      	add	r3, r1
 8006946:	3348      	adds	r3, #72	; 0x48
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d11c      	bne.n	8006988 <leds_Task+0x2310>
 800694e:	4980      	ldr	r1, [pc, #512]	; (8006b50 <leds_Task+0x24d8>)
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4613      	mov	r3, r2
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	4413      	add	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	440b      	add	r3, r1
 800695c:	3308      	adds	r3, #8
 800695e:	edd3 7a00 	vldr	s15, [r3]
 8006962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006966:	edc7 7a01 	vstr	s15, [r7, #4]
 800696a:	793b      	ldrb	r3, [r7, #4]
 800696c:	b2d8      	uxtb	r0, r3
 800696e:	4978      	ldr	r1, [pc, #480]	; (8006b50 <leds_Task+0x24d8>)
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4613      	mov	r3, r2
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	4413      	add	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	440b      	add	r3, r1
 800697c:	3344      	adds	r3, #68	; 0x44
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4602      	mov	r2, r0
 8006984:	635a      	str	r2, [r3, #52]	; 0x34
 8006986:	e06b      	b.n	8006a60 <leds_Task+0x23e8>
 8006988:	4971      	ldr	r1, [pc, #452]	; (8006b50 <leds_Task+0x24d8>)
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4613      	mov	r3, r2
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	4413      	add	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	440b      	add	r3, r1
 8006996:	3348      	adds	r3, #72	; 0x48
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d11c      	bne.n	80069d8 <leds_Task+0x2360>
 800699e:	496c      	ldr	r1, [pc, #432]	; (8006b50 <leds_Task+0x24d8>)
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4613      	mov	r3, r2
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4413      	add	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	440b      	add	r3, r1
 80069ac:	3308      	adds	r3, #8
 80069ae:	edd3 7a00 	vldr	s15, [r3]
 80069b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80069ba:	793b      	ldrb	r3, [r7, #4]
 80069bc:	b2d8      	uxtb	r0, r3
 80069be:	4964      	ldr	r1, [pc, #400]	; (8006b50 <leds_Task+0x24d8>)
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4613      	mov	r3, r2
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	4413      	add	r3, r2
 80069c8:	00db      	lsls	r3, r3, #3
 80069ca:	440b      	add	r3, r1
 80069cc:	3344      	adds	r3, #68	; 0x44
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4603      	mov	r3, r0
 80069d4:	6393      	str	r3, [r2, #56]	; 0x38
 80069d6:	e043      	b.n	8006a60 <leds_Task+0x23e8>
 80069d8:	495d      	ldr	r1, [pc, #372]	; (8006b50 <leds_Task+0x24d8>)
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4613      	mov	r3, r2
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	4413      	add	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	440b      	add	r3, r1
 80069e6:	3348      	adds	r3, #72	; 0x48
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d11c      	bne.n	8006a28 <leds_Task+0x23b0>
 80069ee:	4958      	ldr	r1, [pc, #352]	; (8006b50 <leds_Task+0x24d8>)
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4613      	mov	r3, r2
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4413      	add	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	440b      	add	r3, r1
 80069fc:	3308      	adds	r3, #8
 80069fe:	edd3 7a00 	vldr	s15, [r3]
 8006a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a06:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a0a:	793b      	ldrb	r3, [r7, #4]
 8006a0c:	b2d8      	uxtb	r0, r3
 8006a0e:	4950      	ldr	r1, [pc, #320]	; (8006b50 <leds_Task+0x24d8>)
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4613      	mov	r3, r2
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	4413      	add	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	440b      	add	r3, r1
 8006a1c:	3344      	adds	r3, #68	; 0x44
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4603      	mov	r3, r0
 8006a24:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006a26:	e01b      	b.n	8006a60 <leds_Task+0x23e8>
 8006a28:	4949      	ldr	r1, [pc, #292]	; (8006b50 <leds_Task+0x24d8>)
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	4413      	add	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	440b      	add	r3, r1
 8006a36:	3308      	adds	r3, #8
 8006a38:	edd3 7a00 	vldr	s15, [r3]
 8006a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a40:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a44:	793b      	ldrb	r3, [r7, #4]
 8006a46:	b2d8      	uxtb	r0, r3
 8006a48:	4941      	ldr	r1, [pc, #260]	; (8006b50 <leds_Task+0x24d8>)
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	4413      	add	r3, r2
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	440b      	add	r3, r1
 8006a56:	3344      	adds	r3, #68	; 0x44
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8006a60:	493b      	ldr	r1, [pc, #236]	; (8006b50 <leds_Task+0x24d8>)
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4613      	mov	r3, r2
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4413      	add	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3350      	adds	r3, #80	; 0x50
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d11c      	bne.n	8006ab0 <leds_Task+0x2438>
 8006a76:	4936      	ldr	r1, [pc, #216]	; (8006b50 <leds_Task+0x24d8>)
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	4413      	add	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	440b      	add	r3, r1
 8006a84:	3314      	adds	r3, #20
 8006a86:	edd3 7a00 	vldr	s15, [r3]
 8006a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a92:	793b      	ldrb	r3, [r7, #4]
 8006a94:	b2d8      	uxtb	r0, r3
 8006a96:	492e      	ldr	r1, [pc, #184]	; (8006b50 <leds_Task+0x24d8>)
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	4413      	add	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	440b      	add	r3, r1
 8006aa4:	334c      	adds	r3, #76	; 0x4c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4602      	mov	r2, r0
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34
 8006aae:	e06d      	b.n	8006b8c <leds_Task+0x2514>
 8006ab0:	4927      	ldr	r1, [pc, #156]	; (8006b50 <leds_Task+0x24d8>)
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	4413      	add	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	440b      	add	r3, r1
 8006abe:	3350      	adds	r3, #80	; 0x50
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d11c      	bne.n	8006b00 <leds_Task+0x2488>
 8006ac6:	4922      	ldr	r1, [pc, #136]	; (8006b50 <leds_Task+0x24d8>)
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4613      	mov	r3, r2
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	4413      	add	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	edd3 7a00 	vldr	s15, [r3]
 8006ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ade:	edc7 7a01 	vstr	s15, [r7, #4]
 8006ae2:	793b      	ldrb	r3, [r7, #4]
 8006ae4:	b2d8      	uxtb	r0, r3
 8006ae6:	491a      	ldr	r1, [pc, #104]	; (8006b50 <leds_Task+0x24d8>)
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4613      	mov	r3, r2
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	4413      	add	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	440b      	add	r3, r1
 8006af4:	334c      	adds	r3, #76	; 0x4c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4603      	mov	r3, r0
 8006afc:	6393      	str	r3, [r2, #56]	; 0x38
 8006afe:	e045      	b.n	8006b8c <leds_Task+0x2514>
 8006b00:	4913      	ldr	r1, [pc, #76]	; (8006b50 <leds_Task+0x24d8>)
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4613      	mov	r3, r2
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	4413      	add	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3350      	adds	r3, #80	; 0x50
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d11e      	bne.n	8006b54 <leds_Task+0x24dc>
 8006b16:	490e      	ldr	r1, [pc, #56]	; (8006b50 <leds_Task+0x24d8>)
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	4413      	add	r3, r2
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	440b      	add	r3, r1
 8006b24:	3314      	adds	r3, #20
 8006b26:	edd3 7a00 	vldr	s15, [r3]
 8006b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006b32:	793b      	ldrb	r3, [r7, #4]
 8006b34:	b2d8      	uxtb	r0, r3
 8006b36:	4906      	ldr	r1, [pc, #24]	; (8006b50 <leds_Task+0x24d8>)
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	440b      	add	r3, r1
 8006b44:	334c      	adds	r3, #76	; 0x4c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006b4e:	e01d      	b.n	8006b8c <leds_Task+0x2514>
 8006b50:	20000a3c 	.word	0x20000a3c
 8006b54:	4958      	ldr	r1, [pc, #352]	; (8006cb8 <leds_Task+0x2640>)
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	4413      	add	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	440b      	add	r3, r1
 8006b62:	3314      	adds	r3, #20
 8006b64:	edd3 7a00 	vldr	s15, [r3]
 8006b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006b70:	793b      	ldrb	r3, [r7, #4]
 8006b72:	b2d8      	uxtb	r0, r3
 8006b74:	4950      	ldr	r1, [pc, #320]	; (8006cb8 <leds_Task+0x2640>)
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	4413      	add	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	440b      	add	r3, r1
 8006b82:	334c      	adds	r3, #76	; 0x4c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	6413      	str	r3, [r2, #64]	; 0x40
											leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
						__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 8006b8c:	494a      	ldr	r1, [pc, #296]	; (8006cb8 <leds_Task+0x2640>)
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4613      	mov	r3, r2
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	4413      	add	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	440b      	add	r3, r1
 8006b9a:	3358      	adds	r3, #88	; 0x58
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11c      	bne.n	8006bdc <leds_Task+0x2564>
 8006ba2:	4945      	ldr	r1, [pc, #276]	; (8006cb8 <leds_Task+0x2640>)
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	440b      	add	r3, r1
 8006bb0:	3320      	adds	r3, #32
 8006bb2:	edd3 7a00 	vldr	s15, [r3]
 8006bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bba:	edc7 7a01 	vstr	s15, [r7, #4]
 8006bbe:	793b      	ldrb	r3, [r7, #4]
 8006bc0:	b2d8      	uxtb	r0, r3
 8006bc2:	493d      	ldr	r1, [pc, #244]	; (8006cb8 <leds_Task+0x2640>)
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	4413      	add	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	440b      	add	r3, r1
 8006bd0:	3354      	adds	r3, #84	; 0x54
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8006bda:	e317      	b.n	800720c <leds_Task+0x2b94>
 8006bdc:	4936      	ldr	r1, [pc, #216]	; (8006cb8 <leds_Task+0x2640>)
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4613      	mov	r3, r2
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	4413      	add	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	440b      	add	r3, r1
 8006bea:	3358      	adds	r3, #88	; 0x58
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d11c      	bne.n	8006c2c <leds_Task+0x25b4>
 8006bf2:	4931      	ldr	r1, [pc, #196]	; (8006cb8 <leds_Task+0x2640>)
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	4413      	add	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	440b      	add	r3, r1
 8006c00:	3320      	adds	r3, #32
 8006c02:	edd3 7a00 	vldr	s15, [r3]
 8006c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006c0e:	793b      	ldrb	r3, [r7, #4]
 8006c10:	b2d8      	uxtb	r0, r3
 8006c12:	4929      	ldr	r1, [pc, #164]	; (8006cb8 <leds_Task+0x2640>)
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4613      	mov	r3, r2
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	4413      	add	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	440b      	add	r3, r1
 8006c20:	3354      	adds	r3, #84	; 0x54
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4603      	mov	r3, r0
 8006c28:	6393      	str	r3, [r2, #56]	; 0x38
 8006c2a:	e2ef      	b.n	800720c <leds_Task+0x2b94>
 8006c2c:	4922      	ldr	r1, [pc, #136]	; (8006cb8 <leds_Task+0x2640>)
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4613      	mov	r3, r2
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	4413      	add	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	440b      	add	r3, r1
 8006c3a:	3358      	adds	r3, #88	; 0x58
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d11c      	bne.n	8006c7c <leds_Task+0x2604>
 8006c42:	491d      	ldr	r1, [pc, #116]	; (8006cb8 <leds_Task+0x2640>)
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4613      	mov	r3, r2
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	4413      	add	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	440b      	add	r3, r1
 8006c50:	3320      	adds	r3, #32
 8006c52:	edd3 7a00 	vldr	s15, [r3]
 8006c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006c5e:	793b      	ldrb	r3, [r7, #4]
 8006c60:	b2d8      	uxtb	r0, r3
 8006c62:	4915      	ldr	r1, [pc, #84]	; (8006cb8 <leds_Task+0x2640>)
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4613      	mov	r3, r2
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	4413      	add	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	440b      	add	r3, r1
 8006c70:	3354      	adds	r3, #84	; 0x54
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4603      	mov	r3, r0
 8006c78:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006c7a:	e2c7      	b.n	800720c <leds_Task+0x2b94>
 8006c7c:	490e      	ldr	r1, [pc, #56]	; (8006cb8 <leds_Task+0x2640>)
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4613      	mov	r3, r2
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	440b      	add	r3, r1
 8006c8a:	3320      	adds	r3, #32
 8006c8c:	edd3 7a00 	vldr	s15, [r3]
 8006c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c94:	edc7 7a01 	vstr	s15, [r7, #4]
 8006c98:	793b      	ldrb	r3, [r7, #4]
 8006c9a:	b2d8      	uxtb	r0, r3
 8006c9c:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <leds_Task+0x2640>)
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	440b      	add	r3, r1
 8006caa:	3354      	adds	r3, #84	; 0x54
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb4:	e2aa      	b.n	800720c <leds_Task+0x2b94>
 8006cb6:	bf00      	nop
 8006cb8:	20000a3c 	.word	0x20000a3c
					}
				}
			}
			//Fade mode
			//----------------------------------------------------------------------------------------------------------------
			else if( leds_info.leds[i].mode == led_fade )
 8006cbc:	49b0      	ldr	r1, [pc, #704]	; (8006f80 <leds_Task+0x2908>)
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	440b      	add	r3, r1
 8006cca:	3302      	adds	r3, #2
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	f040 829b 	bne.w	800720c <leds_Task+0x2b94>
			{
				if( leds_info.leds[i].timer == 0 )
 8006cd6:	49aa      	ldr	r1, [pc, #680]	; (8006f80 <leds_Task+0x2908>)
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f040 828f 	bne.w	800720c <leds_Task+0x2b94>
				{
					leds_info.leds[i].timer = LEDS_FADE_STEP_TIME;
 8006cee:	49a4      	ldr	r1, [pc, #656]	; (8006f80 <leds_Task+0x2908>)
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2214      	movs	r2, #20
 8006d00:	601a      	str	r2, [r3, #0]
					leds_info.leds[i].pwmch0_cur_value += leds_info.leds[i].pwmch0_step;
 8006d02:	499f      	ldr	r1, [pc, #636]	; (8006f80 <leds_Task+0x2908>)
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4613      	mov	r3, r2
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	4413      	add	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	440b      	add	r3, r1
 8006d10:	3310      	adds	r3, #16
 8006d12:	ed93 7a00 	vldr	s14, [r3]
 8006d16:	499a      	ldr	r1, [pc, #616]	; (8006f80 <leds_Task+0x2908>)
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	440b      	add	r3, r1
 8006d24:	3308      	adds	r3, #8
 8006d26:	edd3 7a00 	vldr	s15, [r3]
 8006d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d2e:	4994      	ldr	r1, [pc, #592]	; (8006f80 <leds_Task+0x2908>)
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4613      	mov	r3, r2
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	4413      	add	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	440b      	add	r3, r1
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	edc3 7a00 	vstr	s15, [r3]
					leds_info.leds[i].pwmch1_cur_value += leds_info.leds[i].pwmch1_step;
 8006d42:	498f      	ldr	r1, [pc, #572]	; (8006f80 <leds_Task+0x2908>)
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4613      	mov	r3, r2
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	440b      	add	r3, r1
 8006d50:	331c      	adds	r3, #28
 8006d52:	ed93 7a00 	vldr	s14, [r3]
 8006d56:	498a      	ldr	r1, [pc, #552]	; (8006f80 <leds_Task+0x2908>)
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	440b      	add	r3, r1
 8006d64:	3314      	adds	r3, #20
 8006d66:	edd3 7a00 	vldr	s15, [r3]
 8006d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d6e:	4984      	ldr	r1, [pc, #528]	; (8006f80 <leds_Task+0x2908>)
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4613      	mov	r3, r2
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	4413      	add	r3, r2
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	edc3 7a00 	vstr	s15, [r3]
					leds_info.leds[i].pwmch2_cur_value += leds_info.leds[i].pwmch2_step;
 8006d82:	497f      	ldr	r1, [pc, #508]	; (8006f80 <leds_Task+0x2908>)
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4613      	mov	r3, r2
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	4413      	add	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	440b      	add	r3, r1
 8006d90:	3328      	adds	r3, #40	; 0x28
 8006d92:	ed93 7a00 	vldr	s14, [r3]
 8006d96:	497a      	ldr	r1, [pc, #488]	; (8006f80 <leds_Task+0x2908>)
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	4413      	add	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	440b      	add	r3, r1
 8006da4:	3320      	adds	r3, #32
 8006da6:	edd3 7a00 	vldr	s15, [r3]
 8006daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dae:	4974      	ldr	r1, [pc, #464]	; (8006f80 <leds_Task+0x2908>)
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4613      	mov	r3, r2
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	4413      	add	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	440b      	add	r3, r1
 8006dbc:	3320      	adds	r3, #32
 8006dbe:	edc3 7a00 	vstr	s15, [r3]
					if( leds_info.leds[i].step_cnt-- == 0 )
 8006dc2:	496f      	ldr	r1, [pc, #444]	; (8006f80 <leds_Task+0x2908>)
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	4413      	add	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	440b      	add	r3, r1
 8006dd0:	3338      	adds	r3, #56	; 0x38
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	1e50      	subs	r0, r2, #1
 8006dd6:	4c6a      	ldr	r4, [pc, #424]	; (8006f80 <leds_Task+0x2908>)
 8006dd8:	68f9      	ldr	r1, [r7, #12]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	440b      	add	r3, r1
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4423      	add	r3, r4
 8006de4:	3338      	adds	r3, #56	; 0x38
 8006de6:	6018      	str	r0, [r3, #0]
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	d151      	bne.n	8006e90 <leds_Task+0x2818>
					{
						leds_info.leds[i].pwmch0_cur_value = (float)leds_info.leds[i].pwmch0_value1;
 8006dec:	4964      	ldr	r1, [pc, #400]	; (8006f80 <leds_Task+0x2908>)
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4613      	mov	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	4413      	add	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	440b      	add	r3, r1
 8006dfa:	330d      	adds	r3, #13
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	495d      	ldr	r1, [pc, #372]	; (8006f80 <leds_Task+0x2908>)
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	4413      	add	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	440b      	add	r3, r1
 8006e16:	3308      	adds	r3, #8
 8006e18:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch1_cur_value = (float)leds_info.leds[i].pwmch1_value1;
 8006e1c:	4958      	ldr	r1, [pc, #352]	; (8006f80 <leds_Task+0x2908>)
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4613      	mov	r3, r2
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	4413      	add	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	440b      	add	r3, r1
 8006e2a:	3319      	adds	r3, #25
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	ee07 3a90 	vmov	s15, r3
 8006e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e38:	4951      	ldr	r1, [pc, #324]	; (8006f80 <leds_Task+0x2908>)
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	4413      	add	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	440b      	add	r3, r1
 8006e46:	3314      	adds	r3, #20
 8006e48:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].pwmch2_cur_value = (float)leds_info.leds[i].pwmch2_value1;
 8006e4c:	494c      	ldr	r1, [pc, #304]	; (8006f80 <leds_Task+0x2908>)
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4613      	mov	r3, r2
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	4413      	add	r3, r2
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	440b      	add	r3, r1
 8006e5a:	3325      	adds	r3, #37	; 0x25
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	ee07 3a90 	vmov	s15, r3
 8006e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e68:	4945      	ldr	r1, [pc, #276]	; (8006f80 <leds_Task+0x2908>)
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	4413      	add	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	440b      	add	r3, r1
 8006e76:	3320      	adds	r3, #32
 8006e78:	edc3 7a00 	vstr	s15, [r3]
						leds_info.leds[i].mode = led_toggle;
 8006e7c:	4940      	ldr	r1, [pc, #256]	; (8006f80 <leds_Task+0x2908>)
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4613      	mov	r3, r2
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	4413      	add	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	440b      	add	r3, r1
 8006e8a:	3302      	adds	r3, #2
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
					}
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch0_tim,
 8006e90:	493b      	ldr	r1, [pc, #236]	; (8006f80 <leds_Task+0x2908>)
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4613      	mov	r3, r2
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	4413      	add	r3, r2
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	440b      	add	r3, r1
 8006e9e:	3348      	adds	r3, #72	; 0x48
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d11c      	bne.n	8006ee0 <leds_Task+0x2868>
 8006ea6:	4936      	ldr	r1, [pc, #216]	; (8006f80 <leds_Task+0x2908>)
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	4413      	add	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	440b      	add	r3, r1
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	edd3 7a00 	vldr	s15, [r3]
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	edc7 7a01 	vstr	s15, [r7, #4]
 8006ec2:	793b      	ldrb	r3, [r7, #4]
 8006ec4:	b2d8      	uxtb	r0, r3
 8006ec6:	492e      	ldr	r1, [pc, #184]	; (8006f80 <leds_Task+0x2908>)
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4413      	add	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3344      	adds	r3, #68	; 0x44
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4602      	mov	r2, r0
 8006edc:	635a      	str	r2, [r3, #52]	; 0x34
 8006ede:	e06d      	b.n	8006fbc <leds_Task+0x2944>
 8006ee0:	4927      	ldr	r1, [pc, #156]	; (8006f80 <leds_Task+0x2908>)
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	4413      	add	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	440b      	add	r3, r1
 8006eee:	3348      	adds	r3, #72	; 0x48
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b04      	cmp	r3, #4
 8006ef4:	d11c      	bne.n	8006f30 <leds_Task+0x28b8>
 8006ef6:	4922      	ldr	r1, [pc, #136]	; (8006f80 <leds_Task+0x2908>)
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4613      	mov	r3, r2
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	4413      	add	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	440b      	add	r3, r1
 8006f04:	3308      	adds	r3, #8
 8006f06:	edd3 7a00 	vldr	s15, [r3]
 8006f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f12:	793b      	ldrb	r3, [r7, #4]
 8006f14:	b2d8      	uxtb	r0, r3
 8006f16:	491a      	ldr	r1, [pc, #104]	; (8006f80 <leds_Task+0x2908>)
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	4413      	add	r3, r2
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	440b      	add	r3, r1
 8006f24:	3344      	adds	r3, #68	; 0x44
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6393      	str	r3, [r2, #56]	; 0x38
 8006f2e:	e045      	b.n	8006fbc <leds_Task+0x2944>
 8006f30:	4913      	ldr	r1, [pc, #76]	; (8006f80 <leds_Task+0x2908>)
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4613      	mov	r3, r2
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	4413      	add	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	440b      	add	r3, r1
 8006f3e:	3348      	adds	r3, #72	; 0x48
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d11e      	bne.n	8006f84 <leds_Task+0x290c>
 8006f46:	490e      	ldr	r1, [pc, #56]	; (8006f80 <leds_Task+0x2908>)
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	440b      	add	r3, r1
 8006f54:	3308      	adds	r3, #8
 8006f56:	edd3 7a00 	vldr	s15, [r3]
 8006f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f62:	793b      	ldrb	r3, [r7, #4]
 8006f64:	b2d8      	uxtb	r0, r3
 8006f66:	4906      	ldr	r1, [pc, #24]	; (8006f80 <leds_Task+0x2908>)
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	4413      	add	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	440b      	add	r3, r1
 8006f74:	3344      	adds	r3, #68	; 0x44
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006f7e:	e01d      	b.n	8006fbc <leds_Task+0x2944>
 8006f80:	20000a3c 	.word	0x20000a3c
 8006f84:	49a7      	ldr	r1, [pc, #668]	; (8007224 <leds_Task+0x2bac>)
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	440b      	add	r3, r1
 8006f92:	3308      	adds	r3, #8
 8006f94:	edd3 7a00 	vldr	s15, [r3]
 8006f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006fa0:	793b      	ldrb	r3, [r7, #4]
 8006fa2:	b2d8      	uxtb	r0, r3
 8006fa4:	499f      	ldr	r1, [pc, #636]	; (8007224 <leds_Task+0x2bac>)
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	4413      	add	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	440b      	add	r3, r1
 8006fb2:	3344      	adds	r3, #68	; 0x44
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4603      	mov	r3, r0
 8006fba:	6413      	str	r3, [r2, #64]	; 0x40
										leds_info.leds[i].pwmch0_timch, (uint8_t)leds_info.leds[i].pwmch0_cur_value);
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch1_tim,
 8006fbc:	4999      	ldr	r1, [pc, #612]	; (8007224 <leds_Task+0x2bac>)
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	440b      	add	r3, r1
 8006fca:	3350      	adds	r3, #80	; 0x50
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d11c      	bne.n	800700c <leds_Task+0x2994>
 8006fd2:	4994      	ldr	r1, [pc, #592]	; (8007224 <leds_Task+0x2bac>)
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	4413      	add	r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	440b      	add	r3, r1
 8006fe0:	3314      	adds	r3, #20
 8006fe2:	edd3 7a00 	vldr	s15, [r3]
 8006fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fea:	edc7 7a01 	vstr	s15, [r7, #4]
 8006fee:	793b      	ldrb	r3, [r7, #4]
 8006ff0:	b2d8      	uxtb	r0, r3
 8006ff2:	498c      	ldr	r1, [pc, #560]	; (8007224 <leds_Task+0x2bac>)
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	4413      	add	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	440b      	add	r3, r1
 8007000:	334c      	adds	r3, #76	; 0x4c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4602      	mov	r2, r0
 8007008:	635a      	str	r2, [r3, #52]	; 0x34
 800700a:	e06b      	b.n	80070e4 <leds_Task+0x2a6c>
 800700c:	4985      	ldr	r1, [pc, #532]	; (8007224 <leds_Task+0x2bac>)
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4613      	mov	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	4413      	add	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	440b      	add	r3, r1
 800701a:	3350      	adds	r3, #80	; 0x50
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d11c      	bne.n	800705c <leds_Task+0x29e4>
 8007022:	4980      	ldr	r1, [pc, #512]	; (8007224 <leds_Task+0x2bac>)
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	4413      	add	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	440b      	add	r3, r1
 8007030:	3314      	adds	r3, #20
 8007032:	edd3 7a00 	vldr	s15, [r3]
 8007036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703a:	edc7 7a01 	vstr	s15, [r7, #4]
 800703e:	793b      	ldrb	r3, [r7, #4]
 8007040:	b2d8      	uxtb	r0, r3
 8007042:	4978      	ldr	r1, [pc, #480]	; (8007224 <leds_Task+0x2bac>)
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4613      	mov	r3, r2
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	4413      	add	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	440b      	add	r3, r1
 8007050:	334c      	adds	r3, #76	; 0x4c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4603      	mov	r3, r0
 8007058:	6393      	str	r3, [r2, #56]	; 0x38
 800705a:	e043      	b.n	80070e4 <leds_Task+0x2a6c>
 800705c:	4971      	ldr	r1, [pc, #452]	; (8007224 <leds_Task+0x2bac>)
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4613      	mov	r3, r2
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	440b      	add	r3, r1
 800706a:	3350      	adds	r3, #80	; 0x50
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b08      	cmp	r3, #8
 8007070:	d11c      	bne.n	80070ac <leds_Task+0x2a34>
 8007072:	496c      	ldr	r1, [pc, #432]	; (8007224 <leds_Task+0x2bac>)
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4613      	mov	r3, r2
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	4413      	add	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	440b      	add	r3, r1
 8007080:	3314      	adds	r3, #20
 8007082:	edd3 7a00 	vldr	s15, [r3]
 8007086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708a:	edc7 7a01 	vstr	s15, [r7, #4]
 800708e:	793b      	ldrb	r3, [r7, #4]
 8007090:	b2d8      	uxtb	r0, r3
 8007092:	4964      	ldr	r1, [pc, #400]	; (8007224 <leds_Task+0x2bac>)
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4613      	mov	r3, r2
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	4413      	add	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	440b      	add	r3, r1
 80070a0:	334c      	adds	r3, #76	; 0x4c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4603      	mov	r3, r0
 80070a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80070aa:	e01b      	b.n	80070e4 <leds_Task+0x2a6c>
 80070ac:	495d      	ldr	r1, [pc, #372]	; (8007224 <leds_Task+0x2bac>)
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4613      	mov	r3, r2
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	4413      	add	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	440b      	add	r3, r1
 80070ba:	3314      	adds	r3, #20
 80070bc:	edd3 7a00 	vldr	s15, [r3]
 80070c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80070c8:	793b      	ldrb	r3, [r7, #4]
 80070ca:	b2d8      	uxtb	r0, r3
 80070cc:	4955      	ldr	r1, [pc, #340]	; (8007224 <leds_Task+0x2bac>)
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4613      	mov	r3, r2
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	4413      	add	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	440b      	add	r3, r1
 80070da:	334c      	adds	r3, #76	; 0x4c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4603      	mov	r3, r0
 80070e2:	6413      	str	r3, [r2, #64]	; 0x40
										leds_info.leds[i].pwmch1_timch, (uint8_t)leds_info.leds[i].pwmch1_cur_value);
					__HAL_TIM_SET_COMPARE(leds_info.leds[i].pwmch2_tim,
 80070e4:	494f      	ldr	r1, [pc, #316]	; (8007224 <leds_Task+0x2bac>)
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4613      	mov	r3, r2
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	4413      	add	r3, r2
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	440b      	add	r3, r1
 80070f2:	3358      	adds	r3, #88	; 0x58
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11c      	bne.n	8007134 <leds_Task+0x2abc>
 80070fa:	494a      	ldr	r1, [pc, #296]	; (8007224 <leds_Task+0x2bac>)
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4613      	mov	r3, r2
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	4413      	add	r3, r2
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	440b      	add	r3, r1
 8007108:	3320      	adds	r3, #32
 800710a:	edd3 7a00 	vldr	s15, [r3]
 800710e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007112:	edc7 7a01 	vstr	s15, [r7, #4]
 8007116:	793b      	ldrb	r3, [r7, #4]
 8007118:	b2d8      	uxtb	r0, r3
 800711a:	4942      	ldr	r1, [pc, #264]	; (8007224 <leds_Task+0x2bac>)
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4613      	mov	r3, r2
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	4413      	add	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	440b      	add	r3, r1
 8007128:	3354      	adds	r3, #84	; 0x54
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4602      	mov	r2, r0
 8007130:	635a      	str	r2, [r3, #52]	; 0x34
 8007132:	e06b      	b.n	800720c <leds_Task+0x2b94>
 8007134:	493b      	ldr	r1, [pc, #236]	; (8007224 <leds_Task+0x2bac>)
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4613      	mov	r3, r2
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	440b      	add	r3, r1
 8007142:	3358      	adds	r3, #88	; 0x58
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b04      	cmp	r3, #4
 8007148:	d11c      	bne.n	8007184 <leds_Task+0x2b0c>
 800714a:	4936      	ldr	r1, [pc, #216]	; (8007224 <leds_Task+0x2bac>)
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4613      	mov	r3, r2
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	4413      	add	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	440b      	add	r3, r1
 8007158:	3320      	adds	r3, #32
 800715a:	edd3 7a00 	vldr	s15, [r3]
 800715e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007162:	edc7 7a01 	vstr	s15, [r7, #4]
 8007166:	793b      	ldrb	r3, [r7, #4]
 8007168:	b2d8      	uxtb	r0, r3
 800716a:	492e      	ldr	r1, [pc, #184]	; (8007224 <leds_Task+0x2bac>)
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4613      	mov	r3, r2
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	4413      	add	r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	440b      	add	r3, r1
 8007178:	3354      	adds	r3, #84	; 0x54
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4603      	mov	r3, r0
 8007180:	6393      	str	r3, [r2, #56]	; 0x38
 8007182:	e043      	b.n	800720c <leds_Task+0x2b94>
 8007184:	4927      	ldr	r1, [pc, #156]	; (8007224 <leds_Task+0x2bac>)
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4613      	mov	r3, r2
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	4413      	add	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	440b      	add	r3, r1
 8007192:	3358      	adds	r3, #88	; 0x58
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b08      	cmp	r3, #8
 8007198:	d11c      	bne.n	80071d4 <leds_Task+0x2b5c>
 800719a:	4922      	ldr	r1, [pc, #136]	; (8007224 <leds_Task+0x2bac>)
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4613      	mov	r3, r2
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	4413      	add	r3, r2
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	440b      	add	r3, r1
 80071a8:	3320      	adds	r3, #32
 80071aa:	edd3 7a00 	vldr	s15, [r3]
 80071ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80071b6:	793b      	ldrb	r3, [r7, #4]
 80071b8:	b2d8      	uxtb	r0, r3
 80071ba:	491a      	ldr	r1, [pc, #104]	; (8007224 <leds_Task+0x2bac>)
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4613      	mov	r3, r2
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	4413      	add	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	440b      	add	r3, r1
 80071c8:	3354      	adds	r3, #84	; 0x54
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4603      	mov	r3, r0
 80071d0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80071d2:	e01b      	b.n	800720c <leds_Task+0x2b94>
 80071d4:	4913      	ldr	r1, [pc, #76]	; (8007224 <leds_Task+0x2bac>)
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	440b      	add	r3, r1
 80071e2:	3320      	adds	r3, #32
 80071e4:	edd3 7a00 	vldr	s15, [r3]
 80071e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80071f0:	793b      	ldrb	r3, [r7, #4]
 80071f2:	b2d8      	uxtb	r0, r3
 80071f4:	490b      	ldr	r1, [pc, #44]	; (8007224 <leds_Task+0x2bac>)
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4613      	mov	r3, r2
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	4413      	add	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	440b      	add	r3, r1
 8007202:	3354      	adds	r3, #84	; 0x54
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	4603      	mov	r3, r0
 800720a:	6413      	str	r3, [r2, #64]	; 0x40
	for( uint32_t i = 0; i < LEDS_NUM; i++ )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f43d aa36 	beq.w	8004686 <leds_Task+0xe>
				}
			}
		}
	}

	return;
 800721a:	bf00      	nop
}
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	bd90      	pop	{r4, r7, pc}
 8007222:	bf00      	nop
 8007224:	20000a3c 	.word	0x20000a3c

08007228 <leds_setBlink>:
  * @param  val1 	- pwm value can be for pwm led from LEDS_MIN_PWM_VALUE to LEDS_MAX_PWM_VALUE
  * 					or 0xXXBBGGRR format for RGB led
  * @retval 1 if success, 0 if failed
  */
uint8_t leds_setBlink(uint32_t s_led, uint32_t st0_time, uint32_t st1_time, uint32_t loops, uint32_t val0, uint32_t val1)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	if( s_led >= LEDS_NUM )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <leds_setBlink+0x18>
	{
		return 0;
 800723c:	2300      	movs	r3, #0
 800723e:	e3cc      	b.n	80079da <leds_setBlink+0x7b2>
	}

	//SIMPLE
	if( leds_info.leds[s_led].type == led_simple )
 8007240:	49b8      	ldr	r1, [pc, #736]	; (8007524 <leds_setBlink+0x2fc>)
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4613      	mov	r3, r2
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4413      	add	r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	440b      	add	r3, r1
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 80a5 	bne.w	80073a2 <leds_setBlink+0x17a>
	{
		leds_info.leds[s_led].pwmch0_value0 = val0;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	b2d8      	uxtb	r0, r3
 800725c:	49b1      	ldr	r1, [pc, #708]	; (8007524 <leds_setBlink+0x2fc>)
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	4413      	add	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	440b      	add	r3, r1
 800726a:	330c      	adds	r3, #12
 800726c:	4602      	mov	r2, r0
 800726e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = val1;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	b2d8      	uxtb	r0, r3
 8007274:	49ab      	ldr	r1, [pc, #684]	; (8007524 <leds_setBlink+0x2fc>)
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4613      	mov	r3, r2
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4413      	add	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	440b      	add	r3, r1
 8007282:	330d      	adds	r3, #13
 8007284:	4602      	mov	r2, r0
 8007286:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 8007288:	49a6      	ldr	r1, [pc, #664]	; (8007524 <leds_setBlink+0x2fc>)
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4613      	mov	r3, r2
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	4413      	add	r3, r2
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	440b      	add	r3, r1
 8007296:	3334      	adds	r3, #52	; 0x34
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 800729c:	49a1      	ldr	r1, [pc, #644]	; (8007524 <leds_setBlink+0x2fc>)
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4613      	mov	r3, r2
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	4413      	add	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	440b      	add	r3, r1
 80072aa:	332c      	adds	r3, #44	; 0x2c
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 80072b0:	499c      	ldr	r1, [pc, #624]	; (8007524 <leds_setBlink+0x2fc>)
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4613      	mov	r3, r2
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	4413      	add	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	440b      	add	r3, r1
 80072be:	3330      	adds	r3, #48	; 0x30
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 80072c4:	4997      	ldr	r1, [pc, #604]	; (8007524 <leds_setBlink+0x2fc>)
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	440b      	add	r3, r1
 80072d2:	3302      	adds	r3, #2
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	f000 837d 	beq.w	80079d8 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 80072de:	4991      	ldr	r1, [pc, #580]	; (8007524 <leds_setBlink+0x2fc>)
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4613      	mov	r3, r2
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	440b      	add	r3, r1
 80072ec:	3301      	adds	r3, #1
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 80072f2:	498c      	ldr	r1, [pc, #560]	; (8007524 <leds_setBlink+0x2fc>)
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4613      	mov	r3, r2
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	4413      	add	r3, r2
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	440b      	add	r3, r1
 8007300:	3302      	adds	r3, #2
 8007302:	2201      	movs	r2, #1
 8007304:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8007306:	4987      	ldr	r1, [pc, #540]	; (8007524 <leds_setBlink+0x2fc>)
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4613      	mov	r3, r2
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	4413      	add	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	440b      	add	r3, r1
 8007314:	332c      	adds	r3, #44	; 0x2c
 8007316:	6819      	ldr	r1, [r3, #0]
 8007318:	4882      	ldr	r0, [pc, #520]	; (8007524 <leds_setBlink+0x2fc>)
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4613      	mov	r3, r2
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	4413      	add	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4403      	add	r3, r0
 8007326:	3304      	adds	r3, #4
 8007328:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].pwmch0_value0 > 0 ) {
 800732a:	497e      	ldr	r1, [pc, #504]	; (8007524 <leds_setBlink+0x2fc>)
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4613      	mov	r3, r2
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	4413      	add	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	440b      	add	r3, r1
 8007338:	330c      	adds	r3, #12
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d017      	beq.n	8007372 <leds_setBlink+0x14a>
				HAL_GPIO_WritePin(leds_info.leds[s_led].sim_port, leds_info.leds[s_led].sim_pin, GPIO_PIN_SET);
 8007342:	4978      	ldr	r1, [pc, #480]	; (8007524 <leds_setBlink+0x2fc>)
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4613      	mov	r3, r2
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	4413      	add	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	440b      	add	r3, r1
 8007350:	333c      	adds	r3, #60	; 0x3c
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	4973      	ldr	r1, [pc, #460]	; (8007524 <leds_setBlink+0x2fc>)
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	440b      	add	r3, r1
 8007362:	3340      	adds	r3, #64	; 0x40
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	2201      	movs	r2, #1
 800736a:	4619      	mov	r1, r3
 800736c:	f005 fd90 	bl	800ce90 <HAL_GPIO_WritePin>
 8007370:	e332      	b.n	80079d8 <leds_setBlink+0x7b0>
			}
			else {
				HAL_GPIO_WritePin(leds_info.leds[s_led].sim_port, leds_info.leds[s_led].sim_pin, GPIO_PIN_RESET);
 8007372:	496c      	ldr	r1, [pc, #432]	; (8007524 <leds_setBlink+0x2fc>)
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4613      	mov	r3, r2
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	4413      	add	r3, r2
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	440b      	add	r3, r1
 8007380:	333c      	adds	r3, #60	; 0x3c
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	4967      	ldr	r1, [pc, #412]	; (8007524 <leds_setBlink+0x2fc>)
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4613      	mov	r3, r2
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	4413      	add	r3, r2
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	440b      	add	r3, r1
 8007392:	3340      	adds	r3, #64	; 0x40
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	2200      	movs	r2, #0
 800739a:	4619      	mov	r1, r3
 800739c:	f005 fd78 	bl	800ce90 <HAL_GPIO_WritePin>
 80073a0:	e31a      	b.n	80079d8 <leds_setBlink+0x7b0>
			}
		}
	}
	//PWM
	else if( leds_info.leds[s_led].type == led_pwm )
 80073a2:	4960      	ldr	r1, [pc, #384]	; (8007524 <leds_setBlink+0x2fc>)
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4613      	mov	r3, r2
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	4413      	add	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	440b      	add	r3, r1
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	f040 80f0 	bne.w	800759a <leds_setBlink+0x372>
	{
		if( (val0 < LEDS_MIN_PWM_VALUE) || (val0 > LEDS_MAX_PWM_VALUE) || (val1 < LEDS_MIN_PWM_VALUE) || (val1 > LEDS_MAX_PWM_VALUE) )
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2bff      	cmp	r3, #255	; 0xff
 80073be:	d802      	bhi.n	80073c6 <leds_setBlink+0x19e>
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	2bff      	cmp	r3, #255	; 0xff
 80073c4:	d901      	bls.n	80073ca <leds_setBlink+0x1a2>
		{
			return 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e307      	b.n	80079da <leds_setBlink+0x7b2>
		}
		leds_info.leds[s_led].pwmch0_value0 = val0;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	b2d8      	uxtb	r0, r3
 80073ce:	4955      	ldr	r1, [pc, #340]	; (8007524 <leds_setBlink+0x2fc>)
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4613      	mov	r3, r2
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	4413      	add	r3, r2
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	440b      	add	r3, r1
 80073dc:	330c      	adds	r3, #12
 80073de:	4602      	mov	r2, r0
 80073e0:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = val1;
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	b2d8      	uxtb	r0, r3
 80073e6:	494f      	ldr	r1, [pc, #316]	; (8007524 <leds_setBlink+0x2fc>)
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4613      	mov	r3, r2
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	4413      	add	r3, r2
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	440b      	add	r3, r1
 80073f4:	330d      	adds	r3, #13
 80073f6:	4602      	mov	r2, r0
 80073f8:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 80073fa:	494a      	ldr	r1, [pc, #296]	; (8007524 <leds_setBlink+0x2fc>)
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4613      	mov	r3, r2
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	4413      	add	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	440b      	add	r3, r1
 8007408:	3334      	adds	r3, #52	; 0x34
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 800740e:	4945      	ldr	r1, [pc, #276]	; (8007524 <leds_setBlink+0x2fc>)
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4613      	mov	r3, r2
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	4413      	add	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	440b      	add	r3, r1
 800741c:	332c      	adds	r3, #44	; 0x2c
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 8007422:	4940      	ldr	r1, [pc, #256]	; (8007524 <leds_setBlink+0x2fc>)
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4613      	mov	r3, r2
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	4413      	add	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	440b      	add	r3, r1
 8007430:	3330      	adds	r3, #48	; 0x30
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8007436:	493b      	ldr	r1, [pc, #236]	; (8007524 <leds_setBlink+0x2fc>)
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4613      	mov	r3, r2
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	4413      	add	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	440b      	add	r3, r1
 8007444:	3302      	adds	r3, #2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b01      	cmp	r3, #1
 800744c:	f000 82c4 	beq.w	80079d8 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 8007450:	4934      	ldr	r1, [pc, #208]	; (8007524 <leds_setBlink+0x2fc>)
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4613      	mov	r3, r2
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	4413      	add	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	440b      	add	r3, r1
 800745e:	3301      	adds	r3, #1
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 8007464:	492f      	ldr	r1, [pc, #188]	; (8007524 <leds_setBlink+0x2fc>)
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4613      	mov	r3, r2
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	4413      	add	r3, r2
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	440b      	add	r3, r1
 8007472:	3302      	adds	r3, #2
 8007474:	2201      	movs	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 8007478:	492a      	ldr	r1, [pc, #168]	; (8007524 <leds_setBlink+0x2fc>)
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	4413      	add	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	440b      	add	r3, r1
 8007486:	332c      	adds	r3, #44	; 0x2c
 8007488:	6819      	ldr	r1, [r3, #0]
 800748a:	4826      	ldr	r0, [pc, #152]	; (8007524 <leds_setBlink+0x2fc>)
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4613      	mov	r3, r2
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4403      	add	r3, r0
 8007498:	3304      	adds	r3, #4
 800749a:	6019      	str	r1, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 800749c:	4921      	ldr	r1, [pc, #132]	; (8007524 <leds_setBlink+0x2fc>)
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4613      	mov	r3, r2
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	4413      	add	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	440b      	add	r3, r1
 80074aa:	3348      	adds	r3, #72	; 0x48
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d116      	bne.n	80074e0 <leds_setBlink+0x2b8>
 80074b2:	491c      	ldr	r1, [pc, #112]	; (8007524 <leds_setBlink+0x2fc>)
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4613      	mov	r3, r2
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	4413      	add	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	440b      	add	r3, r1
 80074c0:	330c      	adds	r3, #12
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2d8      	uxtb	r0, r3
 80074c6:	4917      	ldr	r1, [pc, #92]	; (8007524 <leds_setBlink+0x2fc>)
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4613      	mov	r3, r2
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	4413      	add	r3, r2
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	440b      	add	r3, r1
 80074d4:	3344      	adds	r3, #68	; 0x44
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4602      	mov	r2, r0
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34
 80074de:	e27b      	b.n	80079d8 <leds_setBlink+0x7b0>
 80074e0:	4910      	ldr	r1, [pc, #64]	; (8007524 <leds_setBlink+0x2fc>)
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4613      	mov	r3, r2
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	4413      	add	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	440b      	add	r3, r1
 80074ee:	3348      	adds	r3, #72	; 0x48
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d118      	bne.n	8007528 <leds_setBlink+0x300>
 80074f6:	490b      	ldr	r1, [pc, #44]	; (8007524 <leds_setBlink+0x2fc>)
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4613      	mov	r3, r2
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	440b      	add	r3, r1
 8007504:	330c      	adds	r3, #12
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b2d8      	uxtb	r0, r3
 800750a:	4906      	ldr	r1, [pc, #24]	; (8007524 <leds_setBlink+0x2fc>)
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4613      	mov	r3, r2
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	4413      	add	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	440b      	add	r3, r1
 8007518:	3344      	adds	r3, #68	; 0x44
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	4603      	mov	r3, r0
 8007520:	6393      	str	r3, [r2, #56]	; 0x38
 8007522:	e259      	b.n	80079d8 <leds_setBlink+0x7b0>
 8007524:	20000a3c 	.word	0x20000a3c
 8007528:	49a3      	ldr	r1, [pc, #652]	; (80077b8 <leds_setBlink+0x590>)
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4613      	mov	r3, r2
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	440b      	add	r3, r1
 8007536:	3348      	adds	r3, #72	; 0x48
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d116      	bne.n	800756c <leds_setBlink+0x344>
 800753e:	499e      	ldr	r1, [pc, #632]	; (80077b8 <leds_setBlink+0x590>)
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4613      	mov	r3, r2
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	440b      	add	r3, r1
 800754c:	330c      	adds	r3, #12
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b2d8      	uxtb	r0, r3
 8007552:	4999      	ldr	r1, [pc, #612]	; (80077b8 <leds_setBlink+0x590>)
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4613      	mov	r3, r2
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	4413      	add	r3, r2
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	440b      	add	r3, r1
 8007560:	3344      	adds	r3, #68	; 0x44
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4603      	mov	r3, r0
 8007568:	63d3      	str	r3, [r2, #60]	; 0x3c
 800756a:	e235      	b.n	80079d8 <leds_setBlink+0x7b0>
 800756c:	4992      	ldr	r1, [pc, #584]	; (80077b8 <leds_setBlink+0x590>)
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4613      	mov	r3, r2
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	4413      	add	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	440b      	add	r3, r1
 800757a:	330c      	adds	r3, #12
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b2d8      	uxtb	r0, r3
 8007580:	498d      	ldr	r1, [pc, #564]	; (80077b8 <leds_setBlink+0x590>)
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4613      	mov	r3, r2
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	4413      	add	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	440b      	add	r3, r1
 800758e:	3344      	adds	r3, #68	; 0x44
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	4603      	mov	r3, r0
 8007596:	6413      	str	r3, [r2, #64]	; 0x40
 8007598:	e21e      	b.n	80079d8 <leds_setBlink+0x7b0>
		}
	}
	//RGB
	else if( leds_info.leds[s_led].type == led_rgb )
 800759a:	4987      	ldr	r1, [pc, #540]	; (80077b8 <leds_setBlink+0x590>)
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4613      	mov	r3, r2
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	4413      	add	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	440b      	add	r3, r1
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	f040 8213 	bne.w	80079d8 <leds_setBlink+0x7b0>
	{
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)(val0 & 0xFF);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	b2d8      	uxtb	r0, r3
 80075b6:	4980      	ldr	r1, [pc, #512]	; (80077b8 <leds_setBlink+0x590>)
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4613      	mov	r3, r2
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	4413      	add	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	440b      	add	r3, r1
 80075c4:	330c      	adds	r3, #12
 80075c6:	4602      	mov	r2, r0
 80075c8:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value0 = (uint8_t)((val0 >> 8) & 0xFF);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	b2d8      	uxtb	r0, r3
 80075d0:	4979      	ldr	r1, [pc, #484]	; (80077b8 <leds_setBlink+0x590>)
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4613      	mov	r3, r2
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	4413      	add	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	440b      	add	r3, r1
 80075de:	3318      	adds	r3, #24
 80075e0:	4602      	mov	r2, r0
 80075e2:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value0 = (uint8_t)((val0 >> 16) & 0xFF);
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b2d8      	uxtb	r0, r3
 80075ea:	4973      	ldr	r1, [pc, #460]	; (80077b8 <leds_setBlink+0x590>)
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4613      	mov	r3, r2
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4413      	add	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	440b      	add	r3, r1
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	4602      	mov	r2, r0
 80075fc:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)(val1 & 0xFF);
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	b2d8      	uxtb	r0, r3
 8007602:	496d      	ldr	r1, [pc, #436]	; (80077b8 <leds_setBlink+0x590>)
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4613      	mov	r3, r2
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4413      	add	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	440b      	add	r3, r1
 8007610:	330d      	adds	r3, #13
 8007612:	4602      	mov	r2, r0
 8007614:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value1 = (uint8_t)((val1 >> 8) & 0xFF);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	0a1b      	lsrs	r3, r3, #8
 800761a:	b2d8      	uxtb	r0, r3
 800761c:	4966      	ldr	r1, [pc, #408]	; (80077b8 <leds_setBlink+0x590>)
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4613      	mov	r3, r2
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	4413      	add	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	440b      	add	r3, r1
 800762a:	3319      	adds	r3, #25
 800762c:	4602      	mov	r2, r0
 800762e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value1 = (uint8_t)((val1 >> 16) & 0xFF);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	b2d8      	uxtb	r0, r3
 8007636:	4960      	ldr	r1, [pc, #384]	; (80077b8 <leds_setBlink+0x590>)
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4613      	mov	r3, r2
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	4413      	add	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	440b      	add	r3, r1
 8007644:	3325      	adds	r3, #37	; 0x25
 8007646:	4602      	mov	r2, r0
 8007648:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].loop_cnt = loops;
 800764a:	495b      	ldr	r1, [pc, #364]	; (80077b8 <leds_setBlink+0x590>)
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4613      	mov	r3, r2
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	4413      	add	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	440b      	add	r3, r1
 8007658:	3334      	adds	r3, #52	; 0x34
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = st0_time;
 800765e:	4956      	ldr	r1, [pc, #344]	; (80077b8 <leds_setBlink+0x590>)
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4613      	mov	r3, r2
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	4413      	add	r3, r2
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	440b      	add	r3, r1
 800766c:	332c      	adds	r3, #44	; 0x2c
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	601a      	str	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st1 = st1_time;
 8007672:	4951      	ldr	r1, [pc, #324]	; (80077b8 <leds_setBlink+0x590>)
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4613      	mov	r3, r2
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	4413      	add	r3, r2
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	440b      	add	r3, r1
 8007680:	3330      	adds	r3, #48	; 0x30
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_blink )
 8007686:	494c      	ldr	r1, [pc, #304]	; (80077b8 <leds_setBlink+0x590>)
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4613      	mov	r3, r2
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	4413      	add	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	440b      	add	r3, r1
 8007694:	3302      	adds	r3, #2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b01      	cmp	r3, #1
 800769c:	f000 819c 	beq.w	80079d8 <leds_setBlink+0x7b0>
		{
			leds_info.leds[s_led].state = led_st0;
 80076a0:	4945      	ldr	r1, [pc, #276]	; (80077b8 <leds_setBlink+0x590>)
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4613      	mov	r3, r2
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	440b      	add	r3, r1
 80076ae:	3301      	adds	r3, #1
 80076b0:	2200      	movs	r2, #0
 80076b2:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].mode = led_blink;
 80076b4:	4940      	ldr	r1, [pc, #256]	; (80077b8 <leds_setBlink+0x590>)
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4613      	mov	r3, r2
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	440b      	add	r3, r1
 80076c2:	3302      	adds	r3, #2
 80076c4:	2201      	movs	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = leds_info.leds[s_led].anim_time_st0;
 80076c8:	493b      	ldr	r1, [pc, #236]	; (80077b8 <leds_setBlink+0x590>)
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4613      	mov	r3, r2
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	4413      	add	r3, r2
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	440b      	add	r3, r1
 80076d6:	332c      	adds	r3, #44	; 0x2c
 80076d8:	6819      	ldr	r1, [r3, #0]
 80076da:	4837      	ldr	r0, [pc, #220]	; (80077b8 <leds_setBlink+0x590>)
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4613      	mov	r3, r2
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4413      	add	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4403      	add	r3, r0
 80076e8:	3304      	adds	r3, #4
 80076ea:	6019      	str	r1, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 80076ec:	4932      	ldr	r1, [pc, #200]	; (80077b8 <leds_setBlink+0x590>)
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4613      	mov	r3, r2
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	440b      	add	r3, r1
 80076fa:	3348      	adds	r3, #72	; 0x48
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d116      	bne.n	8007730 <leds_setBlink+0x508>
 8007702:	492d      	ldr	r1, [pc, #180]	; (80077b8 <leds_setBlink+0x590>)
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4613      	mov	r3, r2
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	4413      	add	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	440b      	add	r3, r1
 8007710:	330c      	adds	r3, #12
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b2d8      	uxtb	r0, r3
 8007716:	4928      	ldr	r1, [pc, #160]	; (80077b8 <leds_setBlink+0x590>)
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4613      	mov	r3, r2
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	4413      	add	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	440b      	add	r3, r1
 8007724:	3344      	adds	r3, #68	; 0x44
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4602      	mov	r2, r0
 800772c:	635a      	str	r2, [r3, #52]	; 0x34
 800772e:	e05b      	b.n	80077e8 <leds_setBlink+0x5c0>
 8007730:	4921      	ldr	r1, [pc, #132]	; (80077b8 <leds_setBlink+0x590>)
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4613      	mov	r3, r2
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	4413      	add	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	440b      	add	r3, r1
 800773e:	3348      	adds	r3, #72	; 0x48
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d116      	bne.n	8007774 <leds_setBlink+0x54c>
 8007746:	491c      	ldr	r1, [pc, #112]	; (80077b8 <leds_setBlink+0x590>)
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4613      	mov	r3, r2
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	4413      	add	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	440b      	add	r3, r1
 8007754:	330c      	adds	r3, #12
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	b2d8      	uxtb	r0, r3
 800775a:	4917      	ldr	r1, [pc, #92]	; (80077b8 <leds_setBlink+0x590>)
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4613      	mov	r3, r2
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	440b      	add	r3, r1
 8007768:	3344      	adds	r3, #68	; 0x44
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4603      	mov	r3, r0
 8007770:	6393      	str	r3, [r2, #56]	; 0x38
 8007772:	e039      	b.n	80077e8 <leds_setBlink+0x5c0>
 8007774:	4910      	ldr	r1, [pc, #64]	; (80077b8 <leds_setBlink+0x590>)
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	4413      	add	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	440b      	add	r3, r1
 8007782:	3348      	adds	r3, #72	; 0x48
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b08      	cmp	r3, #8
 8007788:	d118      	bne.n	80077bc <leds_setBlink+0x594>
 800778a:	490b      	ldr	r1, [pc, #44]	; (80077b8 <leds_setBlink+0x590>)
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4613      	mov	r3, r2
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	4413      	add	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	440b      	add	r3, r1
 8007798:	330c      	adds	r3, #12
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b2d8      	uxtb	r0, r3
 800779e:	4906      	ldr	r1, [pc, #24]	; (80077b8 <leds_setBlink+0x590>)
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	4413      	add	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	440b      	add	r3, r1
 80077ac:	3344      	adds	r3, #68	; 0x44
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4603      	mov	r3, r0
 80077b4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80077b6:	e017      	b.n	80077e8 <leds_setBlink+0x5c0>
 80077b8:	20000a3c 	.word	0x20000a3c
 80077bc:	4989      	ldr	r1, [pc, #548]	; (80079e4 <leds_setBlink+0x7bc>)
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	4413      	add	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	440b      	add	r3, r1
 80077ca:	330c      	adds	r3, #12
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2d8      	uxtb	r0, r3
 80077d0:	4984      	ldr	r1, [pc, #528]	; (80079e4 <leds_setBlink+0x7bc>)
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	4413      	add	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	440b      	add	r3, r1
 80077de:	3344      	adds	r3, #68	; 0x44
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	4603      	mov	r3, r0
 80077e6:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch1_tim, leds_info.leds[s_led].pwmch1_timch, leds_info.leds[s_led].pwmch1_value0);
 80077e8:	497e      	ldr	r1, [pc, #504]	; (80079e4 <leds_setBlink+0x7bc>)
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4613      	mov	r3, r2
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	4413      	add	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	440b      	add	r3, r1
 80077f6:	3350      	adds	r3, #80	; 0x50
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d116      	bne.n	800782c <leds_setBlink+0x604>
 80077fe:	4979      	ldr	r1, [pc, #484]	; (80079e4 <leds_setBlink+0x7bc>)
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4613      	mov	r3, r2
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	4413      	add	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	440b      	add	r3, r1
 800780c:	3318      	adds	r3, #24
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	b2d8      	uxtb	r0, r3
 8007812:	4974      	ldr	r1, [pc, #464]	; (80079e4 <leds_setBlink+0x7bc>)
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4613      	mov	r3, r2
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	4413      	add	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	440b      	add	r3, r1
 8007820:	334c      	adds	r3, #76	; 0x4c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4602      	mov	r2, r0
 8007828:	635a      	str	r2, [r3, #52]	; 0x34
 800782a:	e059      	b.n	80078e0 <leds_setBlink+0x6b8>
 800782c:	496d      	ldr	r1, [pc, #436]	; (80079e4 <leds_setBlink+0x7bc>)
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4613      	mov	r3, r2
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	4413      	add	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	440b      	add	r3, r1
 800783a:	3350      	adds	r3, #80	; 0x50
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b04      	cmp	r3, #4
 8007840:	d116      	bne.n	8007870 <leds_setBlink+0x648>
 8007842:	4968      	ldr	r1, [pc, #416]	; (80079e4 <leds_setBlink+0x7bc>)
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4613      	mov	r3, r2
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	4413      	add	r3, r2
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	440b      	add	r3, r1
 8007850:	3318      	adds	r3, #24
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b2d8      	uxtb	r0, r3
 8007856:	4963      	ldr	r1, [pc, #396]	; (80079e4 <leds_setBlink+0x7bc>)
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4613      	mov	r3, r2
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	4413      	add	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	440b      	add	r3, r1
 8007864:	334c      	adds	r3, #76	; 0x4c
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	4603      	mov	r3, r0
 800786c:	6393      	str	r3, [r2, #56]	; 0x38
 800786e:	e037      	b.n	80078e0 <leds_setBlink+0x6b8>
 8007870:	495c      	ldr	r1, [pc, #368]	; (80079e4 <leds_setBlink+0x7bc>)
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4613      	mov	r3, r2
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	4413      	add	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	440b      	add	r3, r1
 800787e:	3350      	adds	r3, #80	; 0x50
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b08      	cmp	r3, #8
 8007884:	d116      	bne.n	80078b4 <leds_setBlink+0x68c>
 8007886:	4957      	ldr	r1, [pc, #348]	; (80079e4 <leds_setBlink+0x7bc>)
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4613      	mov	r3, r2
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	4413      	add	r3, r2
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	440b      	add	r3, r1
 8007894:	3318      	adds	r3, #24
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	b2d8      	uxtb	r0, r3
 800789a:	4952      	ldr	r1, [pc, #328]	; (80079e4 <leds_setBlink+0x7bc>)
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4613      	mov	r3, r2
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	440b      	add	r3, r1
 80078a8:	334c      	adds	r3, #76	; 0x4c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4603      	mov	r3, r0
 80078b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80078b2:	e015      	b.n	80078e0 <leds_setBlink+0x6b8>
 80078b4:	494b      	ldr	r1, [pc, #300]	; (80079e4 <leds_setBlink+0x7bc>)
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4613      	mov	r3, r2
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4413      	add	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	440b      	add	r3, r1
 80078c2:	3318      	adds	r3, #24
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b2d8      	uxtb	r0, r3
 80078c8:	4946      	ldr	r1, [pc, #280]	; (80079e4 <leds_setBlink+0x7bc>)
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4613      	mov	r3, r2
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	4413      	add	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	440b      	add	r3, r1
 80078d6:	334c      	adds	r3, #76	; 0x4c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4603      	mov	r3, r0
 80078de:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch2_tim, leds_info.leds[s_led].pwmch2_timch, leds_info.leds[s_led].pwmch2_value0);
 80078e0:	4940      	ldr	r1, [pc, #256]	; (80079e4 <leds_setBlink+0x7bc>)
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4613      	mov	r3, r2
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	4413      	add	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	440b      	add	r3, r1
 80078ee:	3358      	adds	r3, #88	; 0x58
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d116      	bne.n	8007924 <leds_setBlink+0x6fc>
 80078f6:	493b      	ldr	r1, [pc, #236]	; (80079e4 <leds_setBlink+0x7bc>)
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4613      	mov	r3, r2
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	4413      	add	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	440b      	add	r3, r1
 8007904:	3324      	adds	r3, #36	; 0x24
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b2d8      	uxtb	r0, r3
 800790a:	4936      	ldr	r1, [pc, #216]	; (80079e4 <leds_setBlink+0x7bc>)
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4613      	mov	r3, r2
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	4413      	add	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	3354      	adds	r3, #84	; 0x54
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4602      	mov	r2, r0
 8007920:	635a      	str	r2, [r3, #52]	; 0x34
 8007922:	e059      	b.n	80079d8 <leds_setBlink+0x7b0>
 8007924:	492f      	ldr	r1, [pc, #188]	; (80079e4 <leds_setBlink+0x7bc>)
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4613      	mov	r3, r2
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	4413      	add	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	440b      	add	r3, r1
 8007932:	3358      	adds	r3, #88	; 0x58
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b04      	cmp	r3, #4
 8007938:	d116      	bne.n	8007968 <leds_setBlink+0x740>
 800793a:	492a      	ldr	r1, [pc, #168]	; (80079e4 <leds_setBlink+0x7bc>)
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4613      	mov	r3, r2
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	4413      	add	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	440b      	add	r3, r1
 8007948:	3324      	adds	r3, #36	; 0x24
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b2d8      	uxtb	r0, r3
 800794e:	4925      	ldr	r1, [pc, #148]	; (80079e4 <leds_setBlink+0x7bc>)
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4613      	mov	r3, r2
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	4413      	add	r3, r2
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	440b      	add	r3, r1
 800795c:	3354      	adds	r3, #84	; 0x54
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4603      	mov	r3, r0
 8007964:	6393      	str	r3, [r2, #56]	; 0x38
 8007966:	e037      	b.n	80079d8 <leds_setBlink+0x7b0>
 8007968:	491e      	ldr	r1, [pc, #120]	; (80079e4 <leds_setBlink+0x7bc>)
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4613      	mov	r3, r2
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	4413      	add	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	440b      	add	r3, r1
 8007976:	3358      	adds	r3, #88	; 0x58
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b08      	cmp	r3, #8
 800797c:	d116      	bne.n	80079ac <leds_setBlink+0x784>
 800797e:	4919      	ldr	r1, [pc, #100]	; (80079e4 <leds_setBlink+0x7bc>)
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4613      	mov	r3, r2
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	4413      	add	r3, r2
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	440b      	add	r3, r1
 800798c:	3324      	adds	r3, #36	; 0x24
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b2d8      	uxtb	r0, r3
 8007992:	4914      	ldr	r1, [pc, #80]	; (80079e4 <leds_setBlink+0x7bc>)
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4613      	mov	r3, r2
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	4413      	add	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	440b      	add	r3, r1
 80079a0:	3354      	adds	r3, #84	; 0x54
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4603      	mov	r3, r0
 80079a8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80079aa:	e015      	b.n	80079d8 <leds_setBlink+0x7b0>
 80079ac:	490d      	ldr	r1, [pc, #52]	; (80079e4 <leds_setBlink+0x7bc>)
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4613      	mov	r3, r2
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	4413      	add	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	440b      	add	r3, r1
 80079ba:	3324      	adds	r3, #36	; 0x24
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	b2d8      	uxtb	r0, r3
 80079c0:	4908      	ldr	r1, [pc, #32]	; (80079e4 <leds_setBlink+0x7bc>)
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	4413      	add	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	440b      	add	r3, r1
 80079ce:	3354      	adds	r3, #84	; 0x54
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4603      	mov	r3, r0
 80079d6:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}

	return 1;
 80079d8:	2301      	movs	r3, #1
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000a3c 	.word	0x20000a3c

080079e8 <leds_setFade>:
  * @param  pwm_val - pwm value can be for pwm led from LEDS_MIN_PWM_VALUE to LEDS_MAX_PWM_VALUE
  * 					or 0xXXBBGGRR format for RGB led
  * @retval 1 if success, 0 if failed
  */
uint8_t leds_setFade(uint32_t s_led, uint32_t fade_time, uint32_t pwm_val)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
#ifdef NO_LEDS
	return 1;
#endif //NO_LEDS

	if( s_led >= LEDS_NUM )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <leds_setFade+0x18>
	{
		return 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f000 bc27 	b.w	800824e <leds_setFade+0x866>
	}

	//PWM led
	if( leds_info.leds[s_led].type == led_pwm )
 8007a00:	4998      	ldr	r1, [pc, #608]	; (8007c64 <leds_setFade+0x27c>)
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4613      	mov	r3, r2
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	4413      	add	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	440b      	add	r3, r1
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	f040 812a 	bne.w	8007c6c <leds_setFade+0x284>
	{
		if( (pwm_val < LEDS_MIN_PWM_VALUE) || (pwm_val > LEDS_MAX_PWM_VALUE) )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2bff      	cmp	r3, #255	; 0xff
 8007a1c:	d902      	bls.n	8007a24 <leds_setFade+0x3c>
		{
			return 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f000 bc15 	b.w	800824e <leds_setFade+0x866>
		}
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)leds_info.leds[s_led].pwmch0_cur_value;
 8007a24:	498f      	ldr	r1, [pc, #572]	; (8007c64 <leds_setFade+0x27c>)
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	011b      	lsls	r3, r3, #4
 8007a2c:	4413      	add	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	440b      	add	r3, r1
 8007a32:	3308      	adds	r3, #8
 8007a34:	edd3 7a00 	vldr	s15, [r3]
 8007a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3c:	edc7 7a00 	vstr	s15, [r7]
 8007a40:	783b      	ldrb	r3, [r7, #0]
 8007a42:	b2d8      	uxtb	r0, r3
 8007a44:	4987      	ldr	r1, [pc, #540]	; (8007c64 <leds_setFade+0x27c>)
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	440b      	add	r3, r1
 8007a52:	330c      	adds	r3, #12
 8007a54:	4602      	mov	r2, r0
 8007a56:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)pwm_val;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	b2d8      	uxtb	r0, r3
 8007a5c:	4981      	ldr	r1, [pc, #516]	; (8007c64 <leds_setFade+0x27c>)
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4613      	mov	r3, r2
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	4413      	add	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	440b      	add	r3, r1
 8007a6a:	330d      	adds	r3, #13
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = fade_time;
 8007a70:	497c      	ldr	r1, [pc, #496]	; (8007c64 <leds_setFade+0x27c>)
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4613      	mov	r3, r2
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	440b      	add	r3, r1
 8007a7e:	332c      	adds	r3, #44	; 0x2c
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_fade )
 8007a84:	4977      	ldr	r1, [pc, #476]	; (8007c64 <leds_setFade+0x27c>)
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	4413      	add	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	440b      	add	r3, r1
 8007a92:	3302      	adds	r3, #2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	f000 83d7 	beq.w	800824c <leds_setFade+0x864>
		{
			leds_info.leds[s_led].step_cnt = fade_time / LEDS_FADE_STEP_TIME;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a71      	ldr	r2, [pc, #452]	; (8007c68 <leds_setFade+0x280>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	0919      	lsrs	r1, r3, #4
 8007aa8:	486e      	ldr	r0, [pc, #440]	; (8007c64 <leds_setFade+0x27c>)
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4613      	mov	r3, r2
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	4413      	add	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4403      	add	r3, r0
 8007ab6:	3338      	adds	r3, #56	; 0x38
 8007ab8:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].step_cnt == 0 )
 8007aba:	496a      	ldr	r1, [pc, #424]	; (8007c64 <leds_setFade+0x27c>)
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	4413      	add	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3338      	adds	r3, #56	; 0x38
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <leds_setFade+0xfc>
				leds_info.leds[s_led].step_cnt = 1;
 8007ad0:	4964      	ldr	r1, [pc, #400]	; (8007c64 <leds_setFade+0x27c>)
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	4413      	add	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	440b      	add	r3, r1
 8007ade:	3338      	adds	r3, #56	; 0x38
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
			leds_info.leds[s_led].pwmch0_step = ((float)pwm_val - (float)leds_info.leds[s_led].pwmch0_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aee:	495d      	ldr	r1, [pc, #372]	; (8007c64 <leds_setFade+0x27c>)
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4613      	mov	r3, r2
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	4413      	add	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	440b      	add	r3, r1
 8007afc:	330c      	adds	r3, #12
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b0e:	4955      	ldr	r1, [pc, #340]	; (8007c64 <leds_setFade+0x27c>)
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4613      	mov	r3, r2
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4413      	add	r3, r2
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	440b      	add	r3, r1
 8007b1c:	3338      	adds	r3, #56	; 0x38
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2c:	494d      	ldr	r1, [pc, #308]	; (8007c64 <leds_setFade+0x27c>)
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4613      	mov	r3, r2
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	4413      	add	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	440b      	add	r3, r1
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].mode = led_fade;
 8007b40:	4948      	ldr	r1, [pc, #288]	; (8007c64 <leds_setFade+0x27c>)
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4613      	mov	r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	440b      	add	r3, r1
 8007b4e:	3302      	adds	r3, #2
 8007b50:	2203      	movs	r2, #3
 8007b52:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = LEDS_FADE_STEP_TIME;
 8007b54:	4943      	ldr	r1, [pc, #268]	; (8007c64 <leds_setFade+0x27c>)
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	4413      	add	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	440b      	add	r3, r1
 8007b62:	3304      	adds	r3, #4
 8007b64:	2214      	movs	r2, #20
 8007b66:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8007b68:	493e      	ldr	r1, [pc, #248]	; (8007c64 <leds_setFade+0x27c>)
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	4413      	add	r3, r2
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	440b      	add	r3, r1
 8007b76:	3348      	adds	r3, #72	; 0x48
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d116      	bne.n	8007bac <leds_setFade+0x1c4>
 8007b7e:	4939      	ldr	r1, [pc, #228]	; (8007c64 <leds_setFade+0x27c>)
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4613      	mov	r3, r2
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	4413      	add	r3, r2
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	440b      	add	r3, r1
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b2d8      	uxtb	r0, r3
 8007b92:	4934      	ldr	r1, [pc, #208]	; (8007c64 <leds_setFade+0x27c>)
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4613      	mov	r3, r2
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	4413      	add	r3, r2
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3344      	adds	r3, #68	; 0x44
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8007baa:	e34f      	b.n	800824c <leds_setFade+0x864>
 8007bac:	492d      	ldr	r1, [pc, #180]	; (8007c64 <leds_setFade+0x27c>)
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	4413      	add	r3, r2
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	440b      	add	r3, r1
 8007bba:	3348      	adds	r3, #72	; 0x48
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d116      	bne.n	8007bf0 <leds_setFade+0x208>
 8007bc2:	4928      	ldr	r1, [pc, #160]	; (8007c64 <leds_setFade+0x27c>)
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	4413      	add	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	440b      	add	r3, r1
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	b2d8      	uxtb	r0, r3
 8007bd6:	4923      	ldr	r1, [pc, #140]	; (8007c64 <leds_setFade+0x27c>)
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	4413      	add	r3, r2
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	440b      	add	r3, r1
 8007be4:	3344      	adds	r3, #68	; 0x44
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4603      	mov	r3, r0
 8007bec:	6393      	str	r3, [r2, #56]	; 0x38
 8007bee:	e32d      	b.n	800824c <leds_setFade+0x864>
 8007bf0:	491c      	ldr	r1, [pc, #112]	; (8007c64 <leds_setFade+0x27c>)
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	4413      	add	r3, r2
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	440b      	add	r3, r1
 8007bfe:	3348      	adds	r3, #72	; 0x48
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d116      	bne.n	8007c34 <leds_setFade+0x24c>
 8007c06:	4917      	ldr	r1, [pc, #92]	; (8007c64 <leds_setFade+0x27c>)
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	4413      	add	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	440b      	add	r3, r1
 8007c14:	330c      	adds	r3, #12
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b2d8      	uxtb	r0, r3
 8007c1a:	4912      	ldr	r1, [pc, #72]	; (8007c64 <leds_setFade+0x27c>)
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	4413      	add	r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	440b      	add	r3, r1
 8007c28:	3344      	adds	r3, #68	; 0x44
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4603      	mov	r3, r0
 8007c30:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007c32:	e30b      	b.n	800824c <leds_setFade+0x864>
 8007c34:	490b      	ldr	r1, [pc, #44]	; (8007c64 <leds_setFade+0x27c>)
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	4413      	add	r3, r2
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	440b      	add	r3, r1
 8007c42:	330c      	adds	r3, #12
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b2d8      	uxtb	r0, r3
 8007c48:	4906      	ldr	r1, [pc, #24]	; (8007c64 <leds_setFade+0x27c>)
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	4413      	add	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	440b      	add	r3, r1
 8007c56:	3344      	adds	r3, #68	; 0x44
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8007c60:	e2f4      	b.n	800824c <leds_setFade+0x864>
 8007c62:	bf00      	nop
 8007c64:	20000a3c 	.word	0x20000a3c
 8007c68:	cccccccd 	.word	0xcccccccd
		}
	}
	//RGB
	else if( leds_info.leds[s_led].type == led_rgb )
 8007c6c:	49ca      	ldr	r1, [pc, #808]	; (8007f98 <leds_setFade+0x5b0>)
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4613      	mov	r3, r2
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	4413      	add	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	440b      	add	r3, r1
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	f040 82e2 	bne.w	8008248 <leds_setFade+0x860>
	{
		leds_info.leds[s_led].pwmch0_value0 = (uint8_t)leds_info.leds[s_led].pwmch0_cur_value;
 8007c84:	49c4      	ldr	r1, [pc, #784]	; (8007f98 <leds_setFade+0x5b0>)
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	4413      	add	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	440b      	add	r3, r1
 8007c92:	3308      	adds	r3, #8
 8007c94:	edd3 7a00 	vldr	s15, [r3]
 8007c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c9c:	edc7 7a00 	vstr	s15, [r7]
 8007ca0:	783b      	ldrb	r3, [r7, #0]
 8007ca2:	b2d8      	uxtb	r0, r3
 8007ca4:	49bc      	ldr	r1, [pc, #752]	; (8007f98 <leds_setFade+0x5b0>)
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	4413      	add	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	440b      	add	r3, r1
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch0_value1 = (uint8_t)(pwm_val & 0xFF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	b2d8      	uxtb	r0, r3
 8007cbc:	49b6      	ldr	r1, [pc, #728]	; (8007f98 <leds_setFade+0x5b0>)
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	4413      	add	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	440b      	add	r3, r1
 8007cca:	330d      	adds	r3, #13
 8007ccc:	4602      	mov	r2, r0
 8007cce:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value0 = (uint8_t)leds_info.leds[s_led].pwmch1_cur_value;
 8007cd0:	49b1      	ldr	r1, [pc, #708]	; (8007f98 <leds_setFade+0x5b0>)
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	4413      	add	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	440b      	add	r3, r1
 8007cde:	3314      	adds	r3, #20
 8007ce0:	edd3 7a00 	vldr	s15, [r3]
 8007ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce8:	edc7 7a00 	vstr	s15, [r7]
 8007cec:	783b      	ldrb	r3, [r7, #0]
 8007cee:	b2d8      	uxtb	r0, r3
 8007cf0:	49a9      	ldr	r1, [pc, #676]	; (8007f98 <leds_setFade+0x5b0>)
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	4413      	add	r3, r2
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	440b      	add	r3, r1
 8007cfe:	3318      	adds	r3, #24
 8007d00:	4602      	mov	r2, r0
 8007d02:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch1_value1 = (uint8_t)((pwm_val >> 8) & 0xFF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	b2d8      	uxtb	r0, r3
 8007d0a:	49a3      	ldr	r1, [pc, #652]	; (8007f98 <leds_setFade+0x5b0>)
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	4413      	add	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	440b      	add	r3, r1
 8007d18:	3319      	adds	r3, #25
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value0 = (uint8_t)leds_info.leds[s_led].pwmch2_cur_value;
 8007d1e:	499e      	ldr	r1, [pc, #632]	; (8007f98 <leds_setFade+0x5b0>)
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4613      	mov	r3, r2
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	4413      	add	r3, r2
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3320      	adds	r3, #32
 8007d2e:	edd3 7a00 	vldr	s15, [r3]
 8007d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d36:	edc7 7a00 	vstr	s15, [r7]
 8007d3a:	783b      	ldrb	r3, [r7, #0]
 8007d3c:	b2d8      	uxtb	r0, r3
 8007d3e:	4996      	ldr	r1, [pc, #600]	; (8007f98 <leds_setFade+0x5b0>)
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4613      	mov	r3, r2
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	4413      	add	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3324      	adds	r3, #36	; 0x24
 8007d4e:	4602      	mov	r2, r0
 8007d50:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].pwmch2_value1 = (uint8_t)((pwm_val >> 16) & 0xFF);;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	0c1b      	lsrs	r3, r3, #16
 8007d56:	b2d8      	uxtb	r0, r3
 8007d58:	498f      	ldr	r1, [pc, #572]	; (8007f98 <leds_setFade+0x5b0>)
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	4413      	add	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	440b      	add	r3, r1
 8007d66:	3325      	adds	r3, #37	; 0x25
 8007d68:	4602      	mov	r2, r0
 8007d6a:	701a      	strb	r2, [r3, #0]
		leds_info.leds[s_led].anim_time_st0 = fade_time;
 8007d6c:	498a      	ldr	r1, [pc, #552]	; (8007f98 <leds_setFade+0x5b0>)
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4613      	mov	r3, r2
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	4413      	add	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	440b      	add	r3, r1
 8007d7a:	332c      	adds	r3, #44	; 0x2c
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	601a      	str	r2, [r3, #0]
		if( leds_info.leds[s_led].mode != led_fade )
 8007d80:	4985      	ldr	r1, [pc, #532]	; (8007f98 <leds_setFade+0x5b0>)
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4613      	mov	r3, r2
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	4413      	add	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	440b      	add	r3, r1
 8007d8e:	3302      	adds	r3, #2
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	f000 8259 	beq.w	800824c <leds_setFade+0x864>
		{
			leds_info.leds[s_led].step_cnt = fade_time / LEDS_FADE_STEP_TIME;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4a7f      	ldr	r2, [pc, #508]	; (8007f9c <leds_setFade+0x5b4>)
 8007d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007da2:	0919      	lsrs	r1, r3, #4
 8007da4:	487c      	ldr	r0, [pc, #496]	; (8007f98 <leds_setFade+0x5b0>)
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4613      	mov	r3, r2
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	4413      	add	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4403      	add	r3, r0
 8007db2:	3338      	adds	r3, #56	; 0x38
 8007db4:	6019      	str	r1, [r3, #0]
			if( leds_info.leds[s_led].step_cnt == 0 )
 8007db6:	4978      	ldr	r1, [pc, #480]	; (8007f98 <leds_setFade+0x5b0>)
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3338      	adds	r3, #56	; 0x38
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d109      	bne.n	8007de0 <leds_setFade+0x3f8>
				leds_info.leds[s_led].step_cnt = 1;
 8007dcc:	4972      	ldr	r1, [pc, #456]	; (8007f98 <leds_setFade+0x5b0>)
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	4413      	add	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	440b      	add	r3, r1
 8007dda:	3338      	adds	r3, #56	; 0x38
 8007ddc:	2201      	movs	r2, #1
 8007dde:	601a      	str	r2, [r3, #0]
			leds_info.leds[s_led].pwmch0_step = ((float)leds_info.leds[s_led].pwmch0_value1 - (float)leds_info.leds[s_led].pwmch0_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007de0:	496d      	ldr	r1, [pc, #436]	; (8007f98 <leds_setFade+0x5b0>)
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4613      	mov	r3, r2
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	4413      	add	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	440b      	add	r3, r1
 8007dee:	330d      	adds	r3, #13
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007dfc:	4966      	ldr	r1, [pc, #408]	; (8007f98 <leds_setFade+0x5b0>)
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4613      	mov	r3, r2
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	4413      	add	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	440b      	add	r3, r1
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007e1c:	495e      	ldr	r1, [pc, #376]	; (8007f98 <leds_setFade+0x5b0>)
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4613      	mov	r3, r2
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	4413      	add	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	440b      	add	r3, r1
 8007e2a:	3338      	adds	r3, #56	; 0x38
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3a:	4957      	ldr	r1, [pc, #348]	; (8007f98 <leds_setFade+0x5b0>)
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	4413      	add	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	440b      	add	r3, r1
 8007e48:	3310      	adds	r3, #16
 8007e4a:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].pwmch1_step = ((float)leds_info.leds[s_led].pwmch1_value1 - (float)leds_info.leds[s_led].pwmch1_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007e4e:	4952      	ldr	r1, [pc, #328]	; (8007f98 <leds_setFade+0x5b0>)
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4613      	mov	r3, r2
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	4413      	add	r3, r2
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	440b      	add	r3, r1
 8007e5c:	3319      	adds	r3, #25
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e6a:	494b      	ldr	r1, [pc, #300]	; (8007f98 <leds_setFade+0x5b0>)
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	4413      	add	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	440b      	add	r3, r1
 8007e78:	3318      	adds	r3, #24
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	ee07 3a90 	vmov	s15, r3
 8007e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007e8a:	4943      	ldr	r1, [pc, #268]	; (8007f98 <leds_setFade+0x5b0>)
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	4413      	add	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	440b      	add	r3, r1
 8007e98:	3338      	adds	r3, #56	; 0x38
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea8:	493b      	ldr	r1, [pc, #236]	; (8007f98 <leds_setFade+0x5b0>)
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4613      	mov	r3, r2
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	4413      	add	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	440b      	add	r3, r1
 8007eb6:	331c      	adds	r3, #28
 8007eb8:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].pwmch2_step = ((float)leds_info.leds[s_led].pwmch2_value1 - (float)leds_info.leds[s_led].pwmch2_value0) / (float)leds_info.leds[s_led].step_cnt;
 8007ebc:	4936      	ldr	r1, [pc, #216]	; (8007f98 <leds_setFade+0x5b0>)
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	4413      	add	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	440b      	add	r3, r1
 8007eca:	3325      	adds	r3, #37	; 0x25
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ed8:	492f      	ldr	r1, [pc, #188]	; (8007f98 <leds_setFade+0x5b0>)
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4613      	mov	r3, r2
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	4413      	add	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	440b      	add	r3, r1
 8007ee6:	3324      	adds	r3, #36	; 0x24
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	ee07 3a90 	vmov	s15, r3
 8007ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007ef8:	4927      	ldr	r1, [pc, #156]	; (8007f98 <leds_setFade+0x5b0>)
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4613      	mov	r3, r2
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	4413      	add	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	440b      	add	r3, r1
 8007f06:	3338      	adds	r3, #56	; 0x38
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f16:	4920      	ldr	r1, [pc, #128]	; (8007f98 <leds_setFade+0x5b0>)
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	3328      	adds	r3, #40	; 0x28
 8007f26:	edc3 7a00 	vstr	s15, [r3]
			leds_info.leds[s_led].mode = led_fade;
 8007f2a:	491b      	ldr	r1, [pc, #108]	; (8007f98 <leds_setFade+0x5b0>)
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	011b      	lsls	r3, r3, #4
 8007f32:	4413      	add	r3, r2
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	440b      	add	r3, r1
 8007f38:	3302      	adds	r3, #2
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	701a      	strb	r2, [r3, #0]
			leds_info.leds[s_led].timer = LEDS_FADE_STEP_TIME;
 8007f3e:	4916      	ldr	r1, [pc, #88]	; (8007f98 <leds_setFade+0x5b0>)
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4613      	mov	r3, r2
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	4413      	add	r3, r2
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	2214      	movs	r2, #20
 8007f50:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch0_tim, leds_info.leds[s_led].pwmch0_timch, leds_info.leds[s_led].pwmch0_value0);
 8007f52:	4911      	ldr	r1, [pc, #68]	; (8007f98 <leds_setFade+0x5b0>)
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4613      	mov	r3, r2
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	4413      	add	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	440b      	add	r3, r1
 8007f60:	3348      	adds	r3, #72	; 0x48
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d11c      	bne.n	8007fa2 <leds_setFade+0x5ba>
 8007f68:	490b      	ldr	r1, [pc, #44]	; (8007f98 <leds_setFade+0x5b0>)
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	4413      	add	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	440b      	add	r3, r1
 8007f76:	330c      	adds	r3, #12
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b2d8      	uxtb	r0, r3
 8007f7c:	4906      	ldr	r1, [pc, #24]	; (8007f98 <leds_setFade+0x5b0>)
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4613      	mov	r3, r2
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	4413      	add	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	440b      	add	r3, r1
 8007f8a:	3344      	adds	r3, #68	; 0x44
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4602      	mov	r2, r0
 8007f92:	635a      	str	r2, [r3, #52]	; 0x34
 8007f94:	e004      	b.n	8007fa0 <leds_setFade+0x5b8>
 8007f96:	bf00      	nop
 8007f98:	20000a3c 	.word	0x20000a3c
 8007f9c:	cccccccd 	.word	0xcccccccd
 8007fa0:	e059      	b.n	8008056 <leds_setFade+0x66e>
 8007fa2:	49ae      	ldr	r1, [pc, #696]	; (800825c <leds_setFade+0x874>)
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	4413      	add	r3, r2
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	440b      	add	r3, r1
 8007fb0:	3348      	adds	r3, #72	; 0x48
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d116      	bne.n	8007fe6 <leds_setFade+0x5fe>
 8007fb8:	49a8      	ldr	r1, [pc, #672]	; (800825c <leds_setFade+0x874>)
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	4413      	add	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	440b      	add	r3, r1
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b2d8      	uxtb	r0, r3
 8007fcc:	49a3      	ldr	r1, [pc, #652]	; (800825c <leds_setFade+0x874>)
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	4413      	add	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	440b      	add	r3, r1
 8007fda:	3344      	adds	r3, #68	; 0x44
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	6393      	str	r3, [r2, #56]	; 0x38
 8007fe4:	e037      	b.n	8008056 <leds_setFade+0x66e>
 8007fe6:	499d      	ldr	r1, [pc, #628]	; (800825c <leds_setFade+0x874>)
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4613      	mov	r3, r2
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	4413      	add	r3, r2
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3348      	adds	r3, #72	; 0x48
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d116      	bne.n	800802a <leds_setFade+0x642>
 8007ffc:	4997      	ldr	r1, [pc, #604]	; (800825c <leds_setFade+0x874>)
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4613      	mov	r3, r2
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	4413      	add	r3, r2
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	440b      	add	r3, r1
 800800a:	330c      	adds	r3, #12
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b2d8      	uxtb	r0, r3
 8008010:	4992      	ldr	r1, [pc, #584]	; (800825c <leds_setFade+0x874>)
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4613      	mov	r3, r2
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4413      	add	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	440b      	add	r3, r1
 800801e:	3344      	adds	r3, #68	; 0x44
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	4603      	mov	r3, r0
 8008026:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008028:	e015      	b.n	8008056 <leds_setFade+0x66e>
 800802a:	498c      	ldr	r1, [pc, #560]	; (800825c <leds_setFade+0x874>)
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4613      	mov	r3, r2
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	4413      	add	r3, r2
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	440b      	add	r3, r1
 8008038:	330c      	adds	r3, #12
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b2d8      	uxtb	r0, r3
 800803e:	4987      	ldr	r1, [pc, #540]	; (800825c <leds_setFade+0x874>)
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4613      	mov	r3, r2
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	4413      	add	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	440b      	add	r3, r1
 800804c:	3344      	adds	r3, #68	; 0x44
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4603      	mov	r3, r0
 8008054:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch1_tim, leds_info.leds[s_led].pwmch1_timch, leds_info.leds[s_led].pwmch1_value0);
 8008056:	4981      	ldr	r1, [pc, #516]	; (800825c <leds_setFade+0x874>)
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4613      	mov	r3, r2
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	4413      	add	r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	440b      	add	r3, r1
 8008064:	3350      	adds	r3, #80	; 0x50
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d116      	bne.n	800809a <leds_setFade+0x6b2>
 800806c:	497b      	ldr	r1, [pc, #492]	; (800825c <leds_setFade+0x874>)
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4613      	mov	r3, r2
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	4413      	add	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	440b      	add	r3, r1
 800807a:	3318      	adds	r3, #24
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b2d8      	uxtb	r0, r3
 8008080:	4976      	ldr	r1, [pc, #472]	; (800825c <leds_setFade+0x874>)
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4613      	mov	r3, r2
 8008086:	011b      	lsls	r3, r3, #4
 8008088:	4413      	add	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	440b      	add	r3, r1
 800808e:	334c      	adds	r3, #76	; 0x4c
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4602      	mov	r2, r0
 8008096:	635a      	str	r2, [r3, #52]	; 0x34
 8008098:	e059      	b.n	800814e <leds_setFade+0x766>
 800809a:	4970      	ldr	r1, [pc, #448]	; (800825c <leds_setFade+0x874>)
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4613      	mov	r3, r2
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	4413      	add	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	440b      	add	r3, r1
 80080a8:	3350      	adds	r3, #80	; 0x50
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d116      	bne.n	80080de <leds_setFade+0x6f6>
 80080b0:	496a      	ldr	r1, [pc, #424]	; (800825c <leds_setFade+0x874>)
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4613      	mov	r3, r2
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	4413      	add	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	440b      	add	r3, r1
 80080be:	3318      	adds	r3, #24
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b2d8      	uxtb	r0, r3
 80080c4:	4965      	ldr	r1, [pc, #404]	; (800825c <leds_setFade+0x874>)
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4613      	mov	r3, r2
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4413      	add	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	440b      	add	r3, r1
 80080d2:	334c      	adds	r3, #76	; 0x4c
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4603      	mov	r3, r0
 80080da:	6393      	str	r3, [r2, #56]	; 0x38
 80080dc:	e037      	b.n	800814e <leds_setFade+0x766>
 80080de:	495f      	ldr	r1, [pc, #380]	; (800825c <leds_setFade+0x874>)
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4613      	mov	r3, r2
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	4413      	add	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	440b      	add	r3, r1
 80080ec:	3350      	adds	r3, #80	; 0x50
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d116      	bne.n	8008122 <leds_setFade+0x73a>
 80080f4:	4959      	ldr	r1, [pc, #356]	; (800825c <leds_setFade+0x874>)
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4613      	mov	r3, r2
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	4413      	add	r3, r2
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	440b      	add	r3, r1
 8008102:	3318      	adds	r3, #24
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b2d8      	uxtb	r0, r3
 8008108:	4954      	ldr	r1, [pc, #336]	; (800825c <leds_setFade+0x874>)
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4613      	mov	r3, r2
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4413      	add	r3, r2
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	440b      	add	r3, r1
 8008116:	334c      	adds	r3, #76	; 0x4c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4603      	mov	r3, r0
 800811e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008120:	e015      	b.n	800814e <leds_setFade+0x766>
 8008122:	494e      	ldr	r1, [pc, #312]	; (800825c <leds_setFade+0x874>)
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4613      	mov	r3, r2
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	4413      	add	r3, r2
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	440b      	add	r3, r1
 8008130:	3318      	adds	r3, #24
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	b2d8      	uxtb	r0, r3
 8008136:	4949      	ldr	r1, [pc, #292]	; (800825c <leds_setFade+0x874>)
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4613      	mov	r3, r2
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	4413      	add	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	440b      	add	r3, r1
 8008144:	334c      	adds	r3, #76	; 0x4c
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4603      	mov	r3, r0
 800814c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(leds_info.leds[s_led].pwmch2_tim, leds_info.leds[s_led].pwmch2_timch, leds_info.leds[s_led].pwmch2_value0);
 800814e:	4943      	ldr	r1, [pc, #268]	; (800825c <leds_setFade+0x874>)
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4613      	mov	r3, r2
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	4413      	add	r3, r2
 8008158:	00db      	lsls	r3, r3, #3
 800815a:	440b      	add	r3, r1
 800815c:	3358      	adds	r3, #88	; 0x58
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d116      	bne.n	8008192 <leds_setFade+0x7aa>
 8008164:	493d      	ldr	r1, [pc, #244]	; (800825c <leds_setFade+0x874>)
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4613      	mov	r3, r2
 800816a:	011b      	lsls	r3, r3, #4
 800816c:	4413      	add	r3, r2
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	440b      	add	r3, r1
 8008172:	3324      	adds	r3, #36	; 0x24
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b2d8      	uxtb	r0, r3
 8008178:	4938      	ldr	r1, [pc, #224]	; (800825c <leds_setFade+0x874>)
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4613      	mov	r3, r2
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	4413      	add	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	440b      	add	r3, r1
 8008186:	3354      	adds	r3, #84	; 0x54
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4602      	mov	r2, r0
 800818e:	635a      	str	r2, [r3, #52]	; 0x34
 8008190:	e05c      	b.n	800824c <leds_setFade+0x864>
 8008192:	4932      	ldr	r1, [pc, #200]	; (800825c <leds_setFade+0x874>)
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4613      	mov	r3, r2
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	4413      	add	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	440b      	add	r3, r1
 80081a0:	3358      	adds	r3, #88	; 0x58
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d116      	bne.n	80081d6 <leds_setFade+0x7ee>
 80081a8:	492c      	ldr	r1, [pc, #176]	; (800825c <leds_setFade+0x874>)
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4613      	mov	r3, r2
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	4413      	add	r3, r2
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	440b      	add	r3, r1
 80081b6:	3324      	adds	r3, #36	; 0x24
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	b2d8      	uxtb	r0, r3
 80081bc:	4927      	ldr	r1, [pc, #156]	; (800825c <leds_setFade+0x874>)
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4613      	mov	r3, r2
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	4413      	add	r3, r2
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	440b      	add	r3, r1
 80081ca:	3354      	adds	r3, #84	; 0x54
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	4603      	mov	r3, r0
 80081d2:	6393      	str	r3, [r2, #56]	; 0x38
 80081d4:	e03a      	b.n	800824c <leds_setFade+0x864>
 80081d6:	4921      	ldr	r1, [pc, #132]	; (800825c <leds_setFade+0x874>)
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4613      	mov	r3, r2
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	4413      	add	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	440b      	add	r3, r1
 80081e4:	3358      	adds	r3, #88	; 0x58
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d116      	bne.n	800821a <leds_setFade+0x832>
 80081ec:	491b      	ldr	r1, [pc, #108]	; (800825c <leds_setFade+0x874>)
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4613      	mov	r3, r2
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	4413      	add	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	440b      	add	r3, r1
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b2d8      	uxtb	r0, r3
 8008200:	4916      	ldr	r1, [pc, #88]	; (800825c <leds_setFade+0x874>)
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4613      	mov	r3, r2
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	4413      	add	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	440b      	add	r3, r1
 800820e:	3354      	adds	r3, #84	; 0x54
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4603      	mov	r3, r0
 8008216:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008218:	e018      	b.n	800824c <leds_setFade+0x864>
 800821a:	4910      	ldr	r1, [pc, #64]	; (800825c <leds_setFade+0x874>)
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4613      	mov	r3, r2
 8008220:	011b      	lsls	r3, r3, #4
 8008222:	4413      	add	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	440b      	add	r3, r1
 8008228:	3324      	adds	r3, #36	; 0x24
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b2d8      	uxtb	r0, r3
 800822e:	490b      	ldr	r1, [pc, #44]	; (800825c <leds_setFade+0x874>)
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4613      	mov	r3, r2
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	4413      	add	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	440b      	add	r3, r1
 800823c:	3354      	adds	r3, #84	; 0x54
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4603      	mov	r3, r0
 8008244:	6413      	str	r3, [r2, #64]	; 0x40
 8008246:	e001      	b.n	800824c <leds_setFade+0x864>
		}
	}
	else
	{
		return 0;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <leds_setFade+0x866>
	}

	return 1;
 800824c:	2301      	movs	r3, #1
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000a3c 	.word	0x20000a3c

08008260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008264:	f003 fb0e 	bl	800b884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008268:	f000 f814 	bl	8008294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800826c:	f000 f9be 	bl	80085ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8008270:	f000 f8ca 	bl	8008408 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8008274:	f000 f966 	bl	8008544 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008278:	f000 f98e 	bl	8008598 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800827c:	f000 f8f2 	bl	8008464 <MX_TIM3_Init>
  MX_ADC1_Init();
 8008280:	f000 f870 	bl	8008364 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8008284:	f00d f980 	bl	8015588 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  system_Init();
 8008288:	f003 f97c 	bl	800b584 <system_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  system_Task();
 800828c:	f003 f9aa 	bl	800b5e4 <system_Task>
 8008290:	e7fc      	b.n	800828c <main+0x2c>
	...

08008294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b094      	sub	sp, #80	; 0x50
 8008298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800829a:	f107 0320 	add.w	r3, r7, #32
 800829e:	2230      	movs	r2, #48	; 0x30
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f00d fe98 	bl	8015fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	605a      	str	r2, [r3, #4]
 80082b2:	609a      	str	r2, [r3, #8]
 80082b4:	60da      	str	r2, [r3, #12]
 80082b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80082b8:	2300      	movs	r3, #0
 80082ba:	60bb      	str	r3, [r7, #8]
 80082bc:	4b27      	ldr	r3, [pc, #156]	; (800835c <SystemClock_Config+0xc8>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	4a26      	ldr	r2, [pc, #152]	; (800835c <SystemClock_Config+0xc8>)
 80082c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082c6:	6413      	str	r3, [r2, #64]	; 0x40
 80082c8:	4b24      	ldr	r3, [pc, #144]	; (800835c <SystemClock_Config+0xc8>)
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80082d4:	2300      	movs	r3, #0
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	4b21      	ldr	r3, [pc, #132]	; (8008360 <SystemClock_Config+0xcc>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a20      	ldr	r2, [pc, #128]	; (8008360 <SystemClock_Config+0xcc>)
 80082de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	4b1e      	ldr	r3, [pc, #120]	; (8008360 <SystemClock_Config+0xcc>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082fa:	2302      	movs	r3, #2
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80082fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8008304:	230f      	movs	r3, #15
 8008306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8008308:	2390      	movs	r3, #144	; 0x90
 800830a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800830c:	2304      	movs	r3, #4
 800830e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8008310:	2305      	movs	r3, #5
 8008312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008314:	f107 0320 	add.w	r3, r7, #32
 8008318:	4618      	mov	r0, r3
 800831a:	f007 f80f 	bl	800f33c <HAL_RCC_OscConfig>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008324:	f000 fa68 	bl	80087f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008328:	230f      	movs	r3, #15
 800832a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800832c:	2302      	movs	r3, #2
 800832e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800833a:	2300      	movs	r3, #0
 800833c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	2101      	movs	r1, #1
 8008344:	4618      	mov	r0, r3
 8008346:	f007 fa71 	bl	800f82c <HAL_RCC_ClockConfig>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8008350:	f000 fa52 	bl	80087f8 <Error_Handler>
  }
}
 8008354:	bf00      	nop
 8008356:	3750      	adds	r7, #80	; 0x50
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	40023800 	.word	0x40023800
 8008360:	40007000 	.word	0x40007000

08008364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800836a:	463b      	mov	r3, r7
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	605a      	str	r2, [r3, #4]
 8008372:	609a      	str	r2, [r3, #8]
 8008374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008376:	4b21      	ldr	r3, [pc, #132]	; (80083fc <MX_ADC1_Init+0x98>)
 8008378:	4a21      	ldr	r2, [pc, #132]	; (8008400 <MX_ADC1_Init+0x9c>)
 800837a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800837c:	4b1f      	ldr	r3, [pc, #124]	; (80083fc <MX_ADC1_Init+0x98>)
 800837e:	2200      	movs	r2, #0
 8008380:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008382:	4b1e      	ldr	r3, [pc, #120]	; (80083fc <MX_ADC1_Init+0x98>)
 8008384:	2200      	movs	r2, #0
 8008386:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008388:	4b1c      	ldr	r3, [pc, #112]	; (80083fc <MX_ADC1_Init+0x98>)
 800838a:	2200      	movs	r2, #0
 800838c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800838e:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <MX_ADC1_Init+0x98>)
 8008390:	2200      	movs	r2, #0
 8008392:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008394:	4b19      	ldr	r3, [pc, #100]	; (80083fc <MX_ADC1_Init+0x98>)
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800839c:	4b17      	ldr	r3, [pc, #92]	; (80083fc <MX_ADC1_Init+0x98>)
 800839e:	2200      	movs	r2, #0
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80083a2:	4b16      	ldr	r3, [pc, #88]	; (80083fc <MX_ADC1_Init+0x98>)
 80083a4:	4a17      	ldr	r2, [pc, #92]	; (8008404 <MX_ADC1_Init+0xa0>)
 80083a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80083a8:	4b14      	ldr	r3, [pc, #80]	; (80083fc <MX_ADC1_Init+0x98>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <MX_ADC1_Init+0x98>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <MX_ADC1_Init+0x98>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <MX_ADC1_Init+0x98>)
 80083be:	2201      	movs	r2, #1
 80083c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80083c2:	480e      	ldr	r0, [pc, #56]	; (80083fc <MX_ADC1_Init+0x98>)
 80083c4:	f003 fac4 	bl	800b950 <HAL_ADC_Init>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80083ce:	f000 fa13 	bl	80087f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083de:	463b      	mov	r3, r7
 80083e0:	4619      	mov	r1, r3
 80083e2:	4806      	ldr	r0, [pc, #24]	; (80083fc <MX_ADC1_Init+0x98>)
 80083e4:	f003 fce8 	bl	800bdb8 <HAL_ADC_ConfigChannel>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80083ee:	f000 fa03 	bl	80087f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000ad4 	.word	0x20000ad4
 8008400:	40012000 	.word	0x40012000
 8008404:	0f000001 	.word	0x0f000001

08008408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <MX_I2C1_Init+0x50>)
 800840e:	4a13      	ldr	r2, [pc, #76]	; (800845c <MX_I2C1_Init+0x54>)
 8008410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <MX_I2C1_Init+0x50>)
 8008414:	4a12      	ldr	r2, [pc, #72]	; (8008460 <MX_I2C1_Init+0x58>)
 8008416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008418:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <MX_I2C1_Init+0x50>)
 800841a:	2200      	movs	r2, #0
 800841c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800841e:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <MX_I2C1_Init+0x50>)
 8008420:	2200      	movs	r2, #0
 8008422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <MX_I2C1_Init+0x50>)
 8008426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800842a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <MX_I2C1_Init+0x50>)
 800842e:	2200      	movs	r2, #0
 8008430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008432:	4b09      	ldr	r3, [pc, #36]	; (8008458 <MX_I2C1_Init+0x50>)
 8008434:	2200      	movs	r2, #0
 8008436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <MX_I2C1_Init+0x50>)
 800843a:	2200      	movs	r2, #0
 800843c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800843e:	4b06      	ldr	r3, [pc, #24]	; (8008458 <MX_I2C1_Init+0x50>)
 8008440:	2200      	movs	r2, #0
 8008442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008444:	4804      	ldr	r0, [pc, #16]	; (8008458 <MX_I2C1_Init+0x50>)
 8008446:	f004 fd3d 	bl	800cec4 <HAL_I2C_Init>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008450:	f000 f9d2 	bl	80087f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008454:	bf00      	nop
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000b1c 	.word	0x20000b1c
 800845c:	40005400 	.word	0x40005400
 8008460:	000186a0 	.word	0x000186a0

08008464 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08a      	sub	sp, #40	; 0x28
 8008468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800846a:	f107 0320 	add.w	r3, r7, #32
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008474:	1d3b      	adds	r3, r7, #4
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	605a      	str	r2, [r3, #4]
 800847c:	609a      	str	r2, [r3, #8]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	611a      	str	r2, [r3, #16]
 8008482:	615a      	str	r2, [r3, #20]
 8008484:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008486:	4b2d      	ldr	r3, [pc, #180]	; (800853c <MX_TIM3_Init+0xd8>)
 8008488:	4a2d      	ldr	r2, [pc, #180]	; (8008540 <MX_TIM3_Init+0xdc>)
 800848a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 800848c:	4b2b      	ldr	r3, [pc, #172]	; (800853c <MX_TIM3_Init+0xd8>)
 800848e:	2277      	movs	r2, #119	; 0x77
 8008490:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008492:	4b2a      	ldr	r3, [pc, #168]	; (800853c <MX_TIM3_Init+0xd8>)
 8008494:	2200      	movs	r2, #0
 8008496:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8008498:	4b28      	ldr	r3, [pc, #160]	; (800853c <MX_TIM3_Init+0xd8>)
 800849a:	f242 720f 	movw	r2, #9999	; 0x270f
 800849e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084a0:	4b26      	ldr	r3, [pc, #152]	; (800853c <MX_TIM3_Init+0xd8>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084a6:	4b25      	ldr	r3, [pc, #148]	; (800853c <MX_TIM3_Init+0xd8>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80084ac:	4823      	ldr	r0, [pc, #140]	; (800853c <MX_TIM3_Init+0xd8>)
 80084ae:	f007 fc8b 	bl	800fdc8 <HAL_TIM_PWM_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80084b8:	f000 f99e 	bl	80087f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084bc:	2300      	movs	r3, #0
 80084be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084c0:	2300      	movs	r3, #0
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80084c4:	f107 0320 	add.w	r3, r7, #32
 80084c8:	4619      	mov	r1, r3
 80084ca:	481c      	ldr	r0, [pc, #112]	; (800853c <MX_TIM3_Init+0xd8>)
 80084cc:	f008 f9a0 	bl	8010810 <HAL_TIMEx_MasterConfigSynchronization>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80084d6:	f000 f98f 	bl	80087f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084da:	2360      	movs	r3, #96	; 0x60
 80084dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084ea:	1d3b      	adds	r3, r7, #4
 80084ec:	2200      	movs	r2, #0
 80084ee:	4619      	mov	r1, r3
 80084f0:	4812      	ldr	r0, [pc, #72]	; (800853c <MX_TIM3_Init+0xd8>)
 80084f2:	f007 fe71 	bl	80101d8 <HAL_TIM_PWM_ConfigChannel>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80084fc:	f000 f97c 	bl	80087f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	2204      	movs	r2, #4
 8008504:	4619      	mov	r1, r3
 8008506:	480d      	ldr	r0, [pc, #52]	; (800853c <MX_TIM3_Init+0xd8>)
 8008508:	f007 fe66 	bl	80101d8 <HAL_TIM_PWM_ConfigChannel>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8008512:	f000 f971 	bl	80087f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	2208      	movs	r2, #8
 800851a:	4619      	mov	r1, r3
 800851c:	4807      	ldr	r0, [pc, #28]	; (800853c <MX_TIM3_Init+0xd8>)
 800851e:	f007 fe5b 	bl	80101d8 <HAL_TIM_PWM_ConfigChannel>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8008528:	f000 f966 	bl	80087f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800852c:	4803      	ldr	r0, [pc, #12]	; (800853c <MX_TIM3_Init+0xd8>)
 800852e:	f000 fa47 	bl	80089c0 <HAL_TIM_MspPostInit>

}
 8008532:	bf00      	nop
 8008534:	3728      	adds	r7, #40	; 0x28
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000b70 	.word	0x20000b70
 8008540:	40000400 	.word	0x40000400

08008544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008548:	4b11      	ldr	r3, [pc, #68]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 800854a:	4a12      	ldr	r2, [pc, #72]	; (8008594 <MX_USART1_UART_Init+0x50>)
 800854c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800854e:	4b10      	ldr	r3, [pc, #64]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 8008550:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008556:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 8008558:	2200      	movs	r2, #0
 800855a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800855c:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 800855e:	2200      	movs	r2, #0
 8008560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008562:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 8008564:	2200      	movs	r2, #0
 8008566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 800856a:	220c      	movs	r2, #12
 800856c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800856e:	4b08      	ldr	r3, [pc, #32]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 8008570:	2200      	movs	r2, #0
 8008572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 8008576:	2200      	movs	r2, #0
 8008578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800857a:	4805      	ldr	r0, [pc, #20]	; (8008590 <MX_USART1_UART_Init+0x4c>)
 800857c:	f008 f9ca 	bl	8010914 <HAL_UART_Init>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008586:	f000 f937 	bl	80087f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000bb8 	.word	0x20000bb8
 8008594:	40011000 	.word	0x40011000

08008598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800859c:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 800859e:	4a12      	ldr	r2, [pc, #72]	; (80085e8 <MX_USART2_UART_Init+0x50>)
 80085a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80085a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80085aa:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085be:	220c      	movs	r2, #12
 80085c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085c2:	4b08      	ldr	r3, [pc, #32]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085ce:	4805      	ldr	r0, [pc, #20]	; (80085e4 <MX_USART2_UART_Init+0x4c>)
 80085d0:	f008 f9a0 	bl	8010914 <HAL_UART_Init>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80085da:	f000 f90d 	bl	80087f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80085de:	bf00      	nop
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000bfc 	.word	0x20000bfc
 80085e8:	40004400 	.word	0x40004400

080085ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	; 0x28
 80085f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	605a      	str	r2, [r3, #4]
 80085fc:	609a      	str	r2, [r3, #8]
 80085fe:	60da      	str	r2, [r3, #12]
 8008600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	613b      	str	r3, [r7, #16]
 8008606:	4b45      	ldr	r3, [pc, #276]	; (800871c <MX_GPIO_Init+0x130>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	4a44      	ldr	r2, [pc, #272]	; (800871c <MX_GPIO_Init+0x130>)
 800860c:	f043 0304 	orr.w	r3, r3, #4
 8008610:	6313      	str	r3, [r2, #48]	; 0x30
 8008612:	4b42      	ldr	r3, [pc, #264]	; (800871c <MX_GPIO_Init+0x130>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	4b3e      	ldr	r3, [pc, #248]	; (800871c <MX_GPIO_Init+0x130>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	4a3d      	ldr	r2, [pc, #244]	; (800871c <MX_GPIO_Init+0x130>)
 8008628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862c:	6313      	str	r3, [r2, #48]	; 0x30
 800862e:	4b3b      	ldr	r3, [pc, #236]	; (800871c <MX_GPIO_Init+0x130>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800863a:	2300      	movs	r3, #0
 800863c:	60bb      	str	r3, [r7, #8]
 800863e:	4b37      	ldr	r3, [pc, #220]	; (800871c <MX_GPIO_Init+0x130>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	4a36      	ldr	r2, [pc, #216]	; (800871c <MX_GPIO_Init+0x130>)
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	6313      	str	r3, [r2, #48]	; 0x30
 800864a:	4b34      	ldr	r3, [pc, #208]	; (800871c <MX_GPIO_Init+0x130>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	60bb      	str	r3, [r7, #8]
 8008654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	4b30      	ldr	r3, [pc, #192]	; (800871c <MX_GPIO_Init+0x130>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	4a2f      	ldr	r2, [pc, #188]	; (800871c <MX_GPIO_Init+0x130>)
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	6313      	str	r3, [r2, #48]	; 0x30
 8008666:	4b2d      	ldr	r3, [pc, #180]	; (800871c <MX_GPIO_Init+0x130>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	607b      	str	r3, [r7, #4]
 8008670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8008672:	2200      	movs	r2, #0
 8008674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008678:	4829      	ldr	r0, [pc, #164]	; (8008720 <MX_GPIO_Init+0x134>)
 800867a:	f004 fc09 	bl	800ce90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M0_GPIO_Port, MODEM_M0_Pin, GPIO_PIN_RESET);
 800867e:	2200      	movs	r2, #0
 8008680:	2120      	movs	r1, #32
 8008682:	4828      	ldr	r0, [pc, #160]	; (8008724 <MX_GPIO_Init+0x138>)
 8008684:	f004 fc04 	bl	800ce90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8008688:	2200      	movs	r2, #0
 800868a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800868e:	4826      	ldr	r0, [pc, #152]	; (8008728 <MX_GPIO_Init+0x13c>)
 8008690:	f004 fbfe 	bl	800ce90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_M1_GPIO_Port, MODEM_M1_Pin, GPIO_PIN_SET);
 8008694:	2201      	movs	r2, #1
 8008696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800869a:	4822      	ldr	r0, [pc, #136]	; (8008724 <MX_GPIO_Init+0x138>)
 800869c:	f004 fbf8 	bl	800ce90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80086a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086a6:	2301      	movs	r3, #1
 80086a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ae:	2300      	movs	r3, #0
 80086b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	4619      	mov	r1, r3
 80086b8:	4819      	ldr	r0, [pc, #100]	; (8008720 <MX_GPIO_Init+0x134>)
 80086ba:	f004 f969 	bl	800c990 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODEM_M0_Pin MODEM_M1_Pin */
  GPIO_InitStruct.Pin = MODEM_M0_Pin|MODEM_M1_Pin;
 80086be:	f248 0320 	movw	r3, #32800	; 0x8020
 80086c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086c4:	2301      	movs	r3, #1
 80086c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086c8:	2301      	movs	r3, #1
 80086ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086cc:	2300      	movs	r3, #0
 80086ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d0:	f107 0314 	add.w	r3, r7, #20
 80086d4:	4619      	mov	r1, r3
 80086d6:	4813      	ldr	r0, [pc, #76]	; (8008724 <MX_GPIO_Init+0x138>)
 80086d8:	f004 f95a 	bl	800c990 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_AUX_Pin */
  GPIO_InitStruct.Pin = MODEM_AUX_Pin;
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODEM_AUX_GPIO_Port, &GPIO_InitStruct);
 80086e8:	f107 0314 	add.w	r3, r7, #20
 80086ec:	4619      	mov	r1, r3
 80086ee:	480d      	ldr	r0, [pc, #52]	; (8008724 <MX_GPIO_Init+0x138>)
 80086f0:	f004 f94e 	bl	800c990 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODEM_LED_Pin */
  GPIO_InitStruct.Pin = MODEM_LED_Pin;
 80086f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086fa:	2301      	movs	r3, #1
 80086fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008702:	2300      	movs	r3, #0
 8008704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODEM_LED_GPIO_Port, &GPIO_InitStruct);
 8008706:	f107 0314 	add.w	r3, r7, #20
 800870a:	4619      	mov	r1, r3
 800870c:	4806      	ldr	r0, [pc, #24]	; (8008728 <MX_GPIO_Init+0x13c>)
 800870e:	f004 f93f 	bl	800c990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008712:	bf00      	nop
 8008714:	3728      	adds	r7, #40	; 0x28
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40023800 	.word	0x40023800
 8008720:	40020800 	.word	0x40020800
 8008724:	40020000 	.word	0x40020000
 8008728:	40020400 	.word	0x40020400

0800872c <MX_USART1_UART_Init115200>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init115200(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8008730:	4b11      	ldr	r3, [pc, #68]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008732:	4a12      	ldr	r2, [pc, #72]	; (800877c <MX_USART1_UART_Init115200+0x50>)
 8008734:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800873c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800873e:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008740:	2200      	movs	r2, #0
 8008742:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008746:	2200      	movs	r2, #0
 8008748:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 800874c:	2200      	movs	r2, #0
 800874e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008750:	4b09      	ldr	r3, [pc, #36]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008752:	220c      	movs	r2, #12
 8008754:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008758:	2200      	movs	r2, #0
 800875a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800875c:	4b06      	ldr	r3, [pc, #24]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 800875e:	2200      	movs	r2, #0
 8008760:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8008762:	4805      	ldr	r0, [pc, #20]	; (8008778 <MX_USART1_UART_Init115200+0x4c>)
 8008764:	f008 f8d6 	bl	8010914 <HAL_UART_Init>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <MX_USART1_UART_Init115200+0x46>
	{
		Error_Handler();
 800876e:	f000 f843 	bl	80087f8 <Error_Handler>
	}
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000bb8 	.word	0x20000bb8
 800877c:	40011000 	.word	0x40011000

08008780 <HAL_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	system_UART_RxCpltCallback(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f003 f82d 	bl	800b7e8 <system_UART_RxCpltCallback>
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <MX_UARTReInit>:

void MX_UARTReInit()
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <MX_UARTReInit+0x14>)
 800879e:	f008 f906 	bl	80109ae <HAL_UART_DeInit>
	MX_USART1_UART_Init();
 80087a2:	f7ff fecf 	bl	8008544 <MX_USART1_UART_Init>
	return;
 80087a6:	bf00      	nop
}
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000bb8 	.word	0x20000bb8

080087b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	system_ADC_ConvCpltCallback(hadc);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f002 ffdf 	bl	800b77c <system_ADC_ConvCpltCallback>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a07      	ldr	r2, [pc, #28]	; (80087f4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d101      	bne.n	80087de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80087da:	f003 f875 	bl	800b8c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  system_Timer(HAL_GetTick());
 80087de:	f003 f887 	bl	800b8f0 <HAL_GetTick>
 80087e2:	4603      	mov	r3, r0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f002 fe83 	bl	800b4f0 <system_Timer>
  /* USER CODE END Callback 1 */
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	40000800 	.word	0x40000800

080087f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80087fc:	b672      	cpsid	i
}
 80087fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008800:	e7fe      	b.n	8008800 <Error_Handler+0x8>
	...

08008804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800880a:	2300      	movs	r3, #0
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	4b10      	ldr	r3, [pc, #64]	; (8008850 <HAL_MspInit+0x4c>)
 8008810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008812:	4a0f      	ldr	r2, [pc, #60]	; (8008850 <HAL_MspInit+0x4c>)
 8008814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008818:	6453      	str	r3, [r2, #68]	; 0x44
 800881a:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <HAL_MspInit+0x4c>)
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008822:	607b      	str	r3, [r7, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008826:	2300      	movs	r3, #0
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <HAL_MspInit+0x4c>)
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	4a08      	ldr	r2, [pc, #32]	; (8008850 <HAL_MspInit+0x4c>)
 8008830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008834:	6413      	str	r3, [r2, #64]	; 0x40
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <HAL_MspInit+0x4c>)
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40023800 	.word	0x40023800

08008854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08a      	sub	sp, #40	; 0x28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	609a      	str	r2, [r3, #8]
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <HAL_ADC_MspInit+0x8c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d12f      	bne.n	80088d6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008876:	2300      	movs	r3, #0
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <HAL_ADC_MspInit+0x90>)
 800887c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887e:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <HAL_ADC_MspInit+0x90>)
 8008880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008884:	6453      	str	r3, [r2, #68]	; 0x44
 8008886:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <HAL_ADC_MspInit+0x90>)
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888e:	613b      	str	r3, [r7, #16]
 8008890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	4b13      	ldr	r3, [pc, #76]	; (80088e4 <HAL_ADC_MspInit+0x90>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <HAL_ADC_MspInit+0x90>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6313      	str	r3, [r2, #48]	; 0x30
 80088a2:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <HAL_ADC_MspInit+0x90>)
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BATV_SNS_Pin;
 80088ae:	2301      	movs	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088b2:	2303      	movs	r3, #3
 80088b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATV_SNS_GPIO_Port, &GPIO_InitStruct);
 80088ba:	f107 0314 	add.w	r3, r7, #20
 80088be:	4619      	mov	r1, r3
 80088c0:	4809      	ldr	r0, [pc, #36]	; (80088e8 <HAL_ADC_MspInit+0x94>)
 80088c2:	f004 f865 	bl	800c990 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80088c6:	2200      	movs	r2, #0
 80088c8:	2100      	movs	r1, #0
 80088ca:	2012      	movs	r0, #18
 80088cc:	f003 fd88 	bl	800c3e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80088d0:	2012      	movs	r0, #18
 80088d2:	f003 fda1 	bl	800c418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80088d6:	bf00      	nop
 80088d8:	3728      	adds	r7, #40	; 0x28
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40012000 	.word	0x40012000
 80088e4:	40023800 	.word	0x40023800
 80088e8:	40020000 	.word	0x40020000

080088ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08a      	sub	sp, #40	; 0x28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	60da      	str	r2, [r3, #12]
 8008902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a19      	ldr	r2, [pc, #100]	; (8008970 <HAL_I2C_MspInit+0x84>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d12b      	bne.n	8008966 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	4b18      	ldr	r3, [pc, #96]	; (8008974 <HAL_I2C_MspInit+0x88>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	4a17      	ldr	r2, [pc, #92]	; (8008974 <HAL_I2C_MspInit+0x88>)
 8008918:	f043 0302 	orr.w	r3, r3, #2
 800891c:	6313      	str	r3, [r2, #48]	; 0x30
 800891e:	4b15      	ldr	r3, [pc, #84]	; (8008974 <HAL_I2C_MspInit+0x88>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 800892a:	23c0      	movs	r3, #192	; 0xc0
 800892c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800892e:	2312      	movs	r3, #18
 8008930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008932:	2301      	movs	r3, #1
 8008934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008936:	2303      	movs	r3, #3
 8008938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800893a:	2304      	movs	r3, #4
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800893e:	f107 0314 	add.w	r3, r7, #20
 8008942:	4619      	mov	r1, r3
 8008944:	480c      	ldr	r0, [pc, #48]	; (8008978 <HAL_I2C_MspInit+0x8c>)
 8008946:	f004 f823 	bl	800c990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <HAL_I2C_MspInit+0x88>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	4a08      	ldr	r2, [pc, #32]	; (8008974 <HAL_I2C_MspInit+0x88>)
 8008954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008958:	6413      	str	r3, [r2, #64]	; 0x40
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <HAL_I2C_MspInit+0x88>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008966:	bf00      	nop
 8008968:	3728      	adds	r7, #40	; 0x28
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40005400 	.word	0x40005400
 8008974:	40023800 	.word	0x40023800
 8008978:	40020400 	.word	0x40020400

0800897c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a0b      	ldr	r2, [pc, #44]	; (80089b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d10d      	bne.n	80089aa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <HAL_TIM_PWM_MspInit+0x40>)
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	4a09      	ldr	r2, [pc, #36]	; (80089bc <HAL_TIM_PWM_MspInit+0x40>)
 8008998:	f043 0302 	orr.w	r3, r3, #2
 800899c:	6413      	str	r3, [r2, #64]	; 0x40
 800899e:	4b07      	ldr	r3, [pc, #28]	; (80089bc <HAL_TIM_PWM_MspInit+0x40>)
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40000400 	.word	0x40000400
 80089bc:	40023800 	.word	0x40023800

080089c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c8:	f107 030c 	add.w	r3, r7, #12
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <HAL_TIM_MspPostInit+0x68>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d11d      	bne.n	8008a1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <HAL_TIM_MspPostInit+0x6c>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	4a10      	ldr	r2, [pc, #64]	; (8008a2c <HAL_TIM_MspPostInit+0x6c>)
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	6313      	str	r3, [r2, #48]	; 0x30
 80089f2:	4b0e      	ldr	r3, [pc, #56]	; (8008a2c <HAL_TIM_MspPostInit+0x6c>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	60bb      	str	r3, [r7, #8]
 80089fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin|PWM_ROLL_Pin|PWM_PITCH_Pin;
 80089fe:	2331      	movs	r3, #49	; 0x31
 8008a00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a02:	2302      	movs	r3, #2
 8008a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	4619      	mov	r1, r3
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <HAL_TIM_MspPostInit+0x70>)
 8008a1a:	f003 ffb9 	bl	800c990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008a1e:	bf00      	nop
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	40020400 	.word	0x40020400

08008a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	; 0x30
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a3c:	f107 031c 	add.w	r3, r7, #28
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a36      	ldr	r2, [pc, #216]	; (8008b2c <HAL_UART_MspInit+0xf8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d135      	bne.n	8008ac2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008a56:	2300      	movs	r3, #0
 8008a58:	61bb      	str	r3, [r7, #24]
 8008a5a:	4b35      	ldr	r3, [pc, #212]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	4a34      	ldr	r2, [pc, #208]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008a60:	f043 0310 	orr.w	r3, r3, #16
 8008a64:	6453      	str	r3, [r2, #68]	; 0x44
 8008a66:	4b32      	ldr	r3, [pc, #200]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6a:	f003 0310 	and.w	r3, r3, #16
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	4b2e      	ldr	r3, [pc, #184]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	4a2d      	ldr	r2, [pc, #180]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	6313      	str	r3, [r2, #48]	; 0x30
 8008a82:	4b2b      	ldr	r3, [pc, #172]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODEM_TX_Pin|MODEM_RX_Pin;
 8008a8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a94:	2302      	movs	r3, #2
 8008a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008aa0:	2307      	movs	r3, #7
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008aa4:	f107 031c 	add.w	r3, r7, #28
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4822      	ldr	r0, [pc, #136]	; (8008b34 <HAL_UART_MspInit+0x100>)
 8008aac:	f003 ff70 	bl	800c990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	2025      	movs	r0, #37	; 0x25
 8008ab6:	f003 fc93 	bl	800c3e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008aba:	2025      	movs	r0, #37	; 0x25
 8008abc:	f003 fcac 	bl	800c418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008ac0:	e030      	b.n	8008b24 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1c      	ldr	r2, [pc, #112]	; (8008b38 <HAL_UART_MspInit+0x104>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d12b      	bne.n	8008b24 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008acc:	2300      	movs	r3, #0
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	4a16      	ldr	r2, [pc, #88]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ada:	6413      	str	r3, [r2, #64]	; 0x40
 8008adc:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	4a0f      	ldr	r2, [pc, #60]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008af2:	f043 0301 	orr.w	r3, r3, #1
 8008af6:	6313      	str	r3, [r2, #48]	; 0x30
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <HAL_UART_MspInit+0xfc>)
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8008b04:	230c      	movs	r3, #12
 8008b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b10:	2303      	movs	r3, #3
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b14:	2307      	movs	r3, #7
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b18:	f107 031c 	add.w	r3, r7, #28
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4805      	ldr	r0, [pc, #20]	; (8008b34 <HAL_UART_MspInit+0x100>)
 8008b20:	f003 ff36 	bl	800c990 <HAL_GPIO_Init>
}
 8008b24:	bf00      	nop
 8008b26:	3730      	adds	r7, #48	; 0x30
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40011000 	.word	0x40011000
 8008b30:	40023800 	.word	0x40023800
 8008b34:	40020000 	.word	0x40020000
 8008b38:	40004400 	.word	0x40004400

08008b3c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a12      	ldr	r2, [pc, #72]	; (8008b94 <HAL_UART_MspDeInit+0x58>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d10e      	bne.n	8008b6c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <HAL_UART_MspDeInit+0x5c>)
 8008b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b52:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <HAL_UART_MspDeInit+0x5c>)
 8008b54:	f023 0310 	bic.w	r3, r3, #16
 8008b58:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, MODEM_TX_Pin|MODEM_RX_Pin);
 8008b5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b5e:	480f      	ldr	r0, [pc, #60]	; (8008b9c <HAL_UART_MspDeInit+0x60>)
 8008b60:	f004 f89a 	bl	800cc98 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8008b64:	2025      	movs	r0, #37	; 0x25
 8008b66:	f003 fc65 	bl	800c434 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8008b6a:	e00e      	b.n	8008b8a <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0b      	ldr	r2, [pc, #44]	; (8008ba0 <HAL_UART_MspDeInit+0x64>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d109      	bne.n	8008b8a <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8008b76:	4b08      	ldr	r3, [pc, #32]	; (8008b98 <HAL_UART_MspDeInit+0x5c>)
 8008b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7a:	4a07      	ldr	r2, [pc, #28]	; (8008b98 <HAL_UART_MspDeInit+0x5c>)
 8008b7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b80:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GNSS_TX_Pin|GNSS_RX_Pin);
 8008b82:	210c      	movs	r1, #12
 8008b84:	4805      	ldr	r0, [pc, #20]	; (8008b9c <HAL_UART_MspDeInit+0x60>)
 8008b86:	f004 f887 	bl	800cc98 <HAL_GPIO_DeInit>
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	40011000 	.word	0x40011000
 8008b98:	40023800 	.word	0x40023800
 8008b9c:	40020000 	.word	0x40020000
 8008ba0:	40004400 	.word	0x40004400

08008ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08e      	sub	sp, #56	; 0x38
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	4b33      	ldr	r3, [pc, #204]	; (8008c88 <HAL_InitTick+0xe4>)
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	4a32      	ldr	r2, [pc, #200]	; (8008c88 <HAL_InitTick+0xe4>)
 8008bbe:	f043 0304 	orr.w	r3, r3, #4
 8008bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8008bc4:	4b30      	ldr	r3, [pc, #192]	; (8008c88 <HAL_InitTick+0xe4>)
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008bd0:	f107 0210 	add.w	r2, r7, #16
 8008bd4:	f107 0314 	add.w	r3, r7, #20
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f007 f806 	bl	800fbec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008bea:	f006 ffd7 	bl	800fb9c <HAL_RCC_GetPCLK1Freq>
 8008bee:	6378      	str	r0, [r7, #52]	; 0x34
 8008bf0:	e004      	b.n	8008bfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008bf2:	f006 ffd3 	bl	800fb9c <HAL_RCC_GetPCLK1Freq>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	4a23      	ldr	r2, [pc, #140]	; (8008c8c <HAL_InitTick+0xe8>)
 8008c00:	fba2 2303 	umull	r2, r3, r2, r3
 8008c04:	0c9b      	lsrs	r3, r3, #18
 8008c06:	3b01      	subs	r3, #1
 8008c08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8008c0a:	4b21      	ldr	r3, [pc, #132]	; (8008c90 <HAL_InitTick+0xec>)
 8008c0c:	4a21      	ldr	r2, [pc, #132]	; (8008c94 <HAL_InitTick+0xf0>)
 8008c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8008c10:	4b1f      	ldr	r3, [pc, #124]	; (8008c90 <HAL_InitTick+0xec>)
 8008c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008c16:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8008c18:	4a1d      	ldr	r2, [pc, #116]	; (8008c90 <HAL_InitTick+0xec>)
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8008c1e:	4b1c      	ldr	r3, [pc, #112]	; (8008c90 <HAL_InitTick+0xec>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c24:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <HAL_InitTick+0xec>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <HAL_InitTick+0xec>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8008c30:	4817      	ldr	r0, [pc, #92]	; (8008c90 <HAL_InitTick+0xec>)
 8008c32:	f007 f80d 	bl	800fc50 <HAL_TIM_Base_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d11b      	bne.n	8008c7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8008c44:	4812      	ldr	r0, [pc, #72]	; (8008c90 <HAL_InitTick+0xec>)
 8008c46:	f007 f85d 	bl	800fd04 <HAL_TIM_Base_Start_IT>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008c50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d111      	bne.n	8008c7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008c58:	201e      	movs	r0, #30
 8008c5a:	f003 fbdd 	bl	800c418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b0f      	cmp	r3, #15
 8008c62:	d808      	bhi.n	8008c76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8008c64:	2200      	movs	r2, #0
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	201e      	movs	r0, #30
 8008c6a:	f003 fbb9 	bl	800c3e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <HAL_InitTick+0xf4>)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	e002      	b.n	8008c7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3738      	adds	r7, #56	; 0x38
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	40023800 	.word	0x40023800
 8008c8c:	431bde83 	.word	0x431bde83
 8008c90:	20000c40 	.word	0x20000c40
 8008c94:	40000800 	.word	0x40000800
 8008c98:	20000110 	.word	0x20000110

08008c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ca0:	e7fe      	b.n	8008ca0 <NMI_Handler+0x4>

08008ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ca6:	e7fe      	b.n	8008ca6 <HardFault_Handler+0x4>

08008ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008cac:	e7fe      	b.n	8008cac <MemManage_Handler+0x4>

08008cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008cb2:	e7fe      	b.n	8008cb2 <BusFault_Handler+0x4>

08008cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008cb8:	e7fe      	b.n	8008cb8 <UsageFault_Handler+0x4>

08008cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008cbe:	bf00      	nop
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ccc:	bf00      	nop
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008cda:	bf00      	nop
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ce8:	bf00      	nop
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
	...

08008cf4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008cf8:	4802      	ldr	r0, [pc, #8]	; (8008d04 <ADC_IRQHandler+0x10>)
 8008cfa:	f002 ff2b 	bl	800bb54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008cfe:	bf00      	nop
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000ad4 	.word	0x20000ad4

08008d08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008d0c:	4802      	ldr	r0, [pc, #8]	; (8008d18 <TIM4_IRQHandler+0x10>)
 8008d0e:	f007 f95b 	bl	800ffc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008d12:	bf00      	nop
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000c40 	.word	0x20000c40

08008d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008d20:	4802      	ldr	r0, [pc, #8]	; (8008d2c <USART1_IRQHandler+0x10>)
 8008d22:	f008 f849 	bl	8010db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000bb8 	.word	0x20000bb8

08008d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008d34:	4802      	ldr	r0, [pc, #8]	; (8008d40 <OTG_FS_IRQHandler+0x10>)
 8008d36:	f005 f9d4 	bl	800e0e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008d3a:	bf00      	nop
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20002614 	.word	0x20002614

08008d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d48:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <SystemInit+0x20>)
 8008d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4e:	4a05      	ldr	r2, [pc, #20]	; (8008d64 <SystemInit+0x20>)
 8008d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d58:	bf00      	nop
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	e000ed00 	.word	0xe000ed00

08008d68 <modem_Timer>:
uint8_t _modem_led_start = 0;
uint8_t _modem_led_state = 0;


void modem_Timer(uint32_t res)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
 8008d74:	e010      	b.n	8008d98 <modem_Timer+0x30>
	{
		if( modem_info.timer[i] > 0 ){
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	4a0c      	ldr	r2, [pc, #48]	; (8008dac <modem_Timer+0x44>)
 8008d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <modem_Timer+0x2a>
			modem_info.timer[i]--;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	4a09      	ldr	r2, [pc, #36]	; (8008dac <modem_Timer+0x44>)
 8008d86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d8a:	3a01      	subs	r2, #1
 8008d8c:	4907      	ldr	r1, [pc, #28]	; (8008dac <modem_Timer+0x44>)
 8008d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < MODEM_TMR_NUM; i++ )
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	3301      	adds	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d9eb      	bls.n	8008d76 <modem_Timer+0xe>
		}
	}

	return;
 8008d9e:	bf00      	nop
}
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000c88 	.word	0x20000c88

08008db0 <modem_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_InitTask()
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_SET);
 8008db4:	2201      	movs	r2, #1
 8008db6:	f248 0120 	movw	r1, #32800	; 0x8020
 8008dba:	480c      	ldr	r0, [pc, #48]	; (8008dec <modem_InitTask+0x3c>)
 8008dbc:	f004 f868 	bl	800ce90 <HAL_GPIO_WritePin>
	modem_info.ready_flag = 0;
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <modem_InitTask+0x40>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5

	modem_info.timer[MODEM_TX_TMR] = 0;
 8008dc8:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <modem_InitTask+0x40>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]
	modem_info.rx_buf.head = 0;
 8008dce:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <modem_InitTask+0x40>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	81da      	strh	r2, [r3, #14]
	modem_info.rx_buf.tail = 0;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <modem_InitTask+0x40>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	821a      	strh	r2, [r3, #16]
	modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <modem_InitTask+0x40>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	731a      	strb	r2, [r3, #12]
	modem_info.tx_buf_bytes = 0;
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <modem_InitTask+0x40>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return;
 8008de8:	bf00      	nop
}
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40020000 	.word	0x40020000
 8008df0:	20000c88 	.word	0x20000c88

08008df4 <modem_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void modem_Task(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
	return;
#endif //NO_MODEM

	uint8_t set_buf[10];

	if( _modem_cur_state == modem_init_power_up )
 8008dfa:	4b80      	ldr	r3, [pc, #512]	; (8008ffc <modem_Task+0x208>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10f      	bne.n	8008e22 <modem_Task+0x2e>
	{
		if( HAL_GPIO_ReadPin(MODEM_AUX_GPIO_Port, MODEM_AUX_Pin) == GPIO_PIN_SET )
 8008e02:	2140      	movs	r1, #64	; 0x40
 8008e04:	487e      	ldr	r0, [pc, #504]	; (8009000 <modem_Task+0x20c>)
 8008e06:	f004 f82b 	bl	800ce60 <HAL_GPIO_ReadPin>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	f040 80b0 	bne.w	8008f72 <modem_Task+0x17e>
		{
			modem_info.timer[MODEM_STATE_TMR] = 1000;
 8008e12:	4b7c      	ldr	r3, [pc, #496]	; (8009004 <modem_Task+0x210>)
 8008e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e18:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_set_par;
 8008e1a:	4b78      	ldr	r3, [pc, #480]	; (8008ffc <modem_Task+0x208>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	e0a7      	b.n	8008f72 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_set_par )
 8008e22:	4b76      	ldr	r3, [pc, #472]	; (8008ffc <modem_Task+0x208>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d11e      	bne.n	8008e68 <modem_Task+0x74>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8008e2a:	4b76      	ldr	r3, [pc, #472]	; (8009004 <modem_Task+0x210>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 809f 	bne.w	8008f72 <modem_Task+0x17e>
		{
			//Command "Set parameters without saving"
			set_buf[0] = 0xC2;
 8008e34:	23c2      	movs	r3, #194	; 0xc2
 8008e36:	713b      	strb	r3, [r7, #4]
			//Address (Broadcast)
			set_buf[1] = 0xFF;
 8008e38:	23ff      	movs	r3, #255	; 0xff
 8008e3a:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xFF;
 8008e3c:	23ff      	movs	r3, #255	; 0xff
 8008e3e:	71bb      	strb	r3, [r7, #6]
			//Speed (8N1, 115200, RF-19.2k)
			set_buf[3] = 0x3D;
 8008e40:	233d      	movs	r3, #61	; 0x3d
 8008e42:	71fb      	strb	r3, [r7, #7]
			//Channel (868 MHz)
			set_buf[4] = 0x06;
 8008e44:	2306      	movs	r3, #6
 8008e46:	723b      	strb	r3, [r7, #8]
			//Options
			set_buf[5] = 0x44;
 8008e48:	2344      	movs	r3, #68	; 0x44
 8008e4a:	727b      	strb	r3, [r7, #9]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 6, HAL_MAX_DELAY);
 8008e4c:	1d39      	adds	r1, r7, #4
 8008e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e52:	2206      	movs	r2, #6
 8008e54:	486c      	ldr	r0, [pc, #432]	; (8009008 <modem_Task+0x214>)
 8008e56:	f007 fdd9 	bl	8010a0c <HAL_UART_Transmit>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8008e5a:	4b6a      	ldr	r3, [pc, #424]	; (8009004 <modem_Task+0x210>)
 8008e5c:	2264      	movs	r2, #100	; 0x64
 8008e5e:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_read_par;
 8008e60:	4b66      	ldr	r3, [pc, #408]	; (8008ffc <modem_Task+0x208>)
 8008e62:	2202      	movs	r2, #2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e084      	b.n	8008f72 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_read_par )
 8008e68:	4b64      	ldr	r3, [pc, #400]	; (8008ffc <modem_Task+0x208>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d114      	bne.n	8008e9a <modem_Task+0xa6>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 )
 8008e70:	4b64      	ldr	r3, [pc, #400]	; (8009004 <modem_Task+0x210>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d17c      	bne.n	8008f72 <modem_Task+0x17e>
		{
			//Command "Read parameters"
			set_buf[0] = 0xC1;
 8008e78:	23c1      	movs	r3, #193	; 0xc1
 8008e7a:	713b      	strb	r3, [r7, #4]
			set_buf[1] = 0xC1;
 8008e7c:	23c1      	movs	r3, #193	; 0xc1
 8008e7e:	717b      	strb	r3, [r7, #5]
			set_buf[2] = 0xC1;
 8008e80:	23c1      	movs	r3, #193	; 0xc1
 8008e82:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&HAL_MODEM_UART, set_buf, 3, HAL_MAX_DELAY);
 8008e84:	1d39      	adds	r1, r7, #4
 8008e86:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	485e      	ldr	r0, [pc, #376]	; (8009008 <modem_Task+0x214>)
 8008e8e:	f007 fdbd 	bl	8010a0c <HAL_UART_Transmit>
			_modem_cur_state = modem_init_wait_par;
 8008e92:	4b5a      	ldr	r3, [pc, #360]	; (8008ffc <modem_Task+0x208>)
 8008e94:	2203      	movs	r2, #3
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e06b      	b.n	8008f72 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_par )
 8008e9a:	4b58      	ldr	r3, [pc, #352]	; (8008ffc <modem_Task+0x208>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d115      	bne.n	8008ece <modem_Task+0xda>
	{
		if( _modem_par_flag == 1 )
 8008ea2:	4b5a      	ldr	r3, [pc, #360]	; (800900c <modem_Task+0x218>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d163      	bne.n	8008f72 <modem_Task+0x17e>
		{
			_modem_par_flag = 0;
 8008eaa:	4b58      	ldr	r3, [pc, #352]	; (800900c <modem_Task+0x218>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, MODEM_M0_Pin|MODEM_M1_Pin, GPIO_PIN_RESET);
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f248 0120 	movw	r1, #32800	; 0x8020
 8008eb6:	4852      	ldr	r0, [pc, #328]	; (8009000 <modem_Task+0x20c>)
 8008eb8:	f003 ffea 	bl	800ce90 <HAL_GPIO_WritePin>
			system_UARTmodemSet115200();
 8008ebc:	f002 fc12 	bl	800b6e4 <system_UARTmodemSet115200>
			modem_info.timer[MODEM_STATE_TMR] = 100;
 8008ec0:	4b50      	ldr	r3, [pc, #320]	; (8009004 <modem_Task+0x210>)
 8008ec2:	2264      	movs	r2, #100	; 0x64
 8008ec4:	605a      	str	r2, [r3, #4]
			_modem_cur_state = modem_init_wait_rdy;
 8008ec6:	4b4d      	ldr	r3, [pc, #308]	; (8008ffc <modem_Task+0x208>)
 8008ec8:	2204      	movs	r2, #4
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	e051      	b.n	8008f72 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_init_wait_rdy )
 8008ece:	4b4b      	ldr	r3, [pc, #300]	; (8008ffc <modem_Task+0x208>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d107      	bne.n	8008ee6 <modem_Task+0xf2>
	{
		if( modem_info.timer[MODEM_STATE_TMR] == 0 ){
 8008ed6:	4b4b      	ldr	r3, [pc, #300]	; (8009004 <modem_Task+0x210>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d149      	bne.n	8008f72 <modem_Task+0x17e>
			_modem_cur_state = modem_ready;
 8008ede:	4b47      	ldr	r3, [pc, #284]	; (8008ffc <modem_Task+0x208>)
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	e045      	b.n	8008f72 <modem_Task+0x17e>
		}
	}
	else if( _modem_cur_state == modem_ready )
 8008ee6:	4b45      	ldr	r3, [pc, #276]	; (8008ffc <modem_Task+0x208>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b05      	cmp	r3, #5
 8008eec:	d141      	bne.n	8008f72 <modem_Task+0x17e>
	{
		//Transmitting
		if( (modem_info.tx_buf_bytes > 0) && (modem_info.timer[MODEM_TX_TMR] == 0) )
 8008eee:	4b45      	ldr	r3, [pc, #276]	; (8009004 <modem_Task+0x210>)
 8008ef0:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d024      	beq.n	8008f42 <modem_Task+0x14e>
 8008ef8:	4b42      	ldr	r3, [pc, #264]	; (8009004 <modem_Task+0x210>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d120      	bne.n	8008f42 <modem_Task+0x14e>
		{
			modem_info.timer[MODEM_TX_TMR] = MODEM_TX_PERIOD;
 8008f00:	4b40      	ldr	r3, [pc, #256]	; (8009004 <modem_Task+0x210>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
			if( modem_info.tx_buf_bytes > MODEM_MAX_TX_LEN )
 8008f06:	4b3f      	ldr	r3, [pc, #252]	; (8009004 <modem_Task+0x210>)
 8008f08:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008f0c:	2b14      	cmp	r3, #20
 8008f0e:	d90a      	bls.n	8008f26 <modem_Task+0x132>
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, MODEM_MAX_TX_LEN, HAL_MAX_DELAY);
 8008f10:	f04f 33ff 	mov.w	r3, #4294967295
 8008f14:	2214      	movs	r2, #20
 8008f16:	493e      	ldr	r1, [pc, #248]	; (8009010 <modem_Task+0x21c>)
 8008f18:	483b      	ldr	r0, [pc, #236]	; (8009008 <modem_Task+0x214>)
 8008f1a:	f007 fd77 	bl	8010a0c <HAL_UART_Transmit>
				modem_RemTxData(MODEM_MAX_TX_LEN);
 8008f1e:	2014      	movs	r0, #20
 8008f20:	f000 f9da 	bl	80092d8 <modem_RemTxData>
 8008f24:	e00d      	b.n	8008f42 <modem_Task+0x14e>
			}
			else
			{
				HAL_UART_Transmit(&HAL_MODEM_UART, (uint8_t*)modem_info.tx_buf, modem_info.tx_buf_bytes, HAL_MAX_DELAY);
 8008f26:	4b37      	ldr	r3, [pc, #220]	; (8009004 <modem_Task+0x210>)
 8008f28:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	4937      	ldr	r1, [pc, #220]	; (8009010 <modem_Task+0x21c>)
 8008f34:	4834      	ldr	r0, [pc, #208]	; (8009008 <modem_Task+0x214>)
 8008f36:	f007 fd69 	bl	8010a0c <HAL_UART_Transmit>
				modem_info.tx_buf_bytes = 0;
 8008f3a:	4b32      	ldr	r3, [pc, #200]	; (8009004 <modem_Task+0x210>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
			}
		}

		//Receiving
		if( modem_info.rvd_pkt_size != 0 )
 8008f42:	4b30      	ldr	r3, [pc, #192]	; (8009004 <modem_Task+0x210>)
 8008f44:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d012      	beq.n	8008f72 <modem_Task+0x17e>
		{
			_modem_led_start = 1;
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <modem_Task+0x220>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
			system_ModemRxCallback(modem_info.rvd_pkt[0], (uint8_t*)&modem_info.rvd_pkt[1], modem_info.rvd_pkt_size - 1);
 8008f52:	4b2c      	ldr	r3, [pc, #176]	; (8009004 <modem_Task+0x210>)
 8008f54:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008f58:	b2d8      	uxtb	r0, r3
 8008f5a:	4b2a      	ldr	r3, [pc, #168]	; (8009004 <modem_Task+0x210>)
 8008f5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008f60:	3b01      	subs	r3, #1
 8008f62:	461a      	mov	r2, r3
 8008f64:	492c      	ldr	r1, [pc, #176]	; (8009018 <modem_Task+0x224>)
 8008f66:	f002 fbd3 	bl	800b710 <system_ModemRxCallback>
			modem_info.rvd_pkt_size = 0;
 8008f6a:	4b26      	ldr	r3, [pc, #152]	; (8009004 <modem_Task+0x210>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
	}

	//LED
	if( _modem_led_state == 0)
 8008f72:	4b2a      	ldr	r3, [pc, #168]	; (800901c <modem_Task+0x228>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <modem_Task+0x19c>
	{
		if( _modem_led_start == 1 )
 8008f7a:	4b26      	ldr	r3, [pc, #152]	; (8009014 <modem_Task+0x220>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d138      	bne.n	8008ff4 <modem_Task+0x200>
		{
			_modem_led_start = 0;
 8008f82:	4b24      	ldr	r3, [pc, #144]	; (8009014 <modem_Task+0x220>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
			_modem_led_state = 1;
 8008f88:	4b24      	ldr	r3, [pc, #144]	; (800901c <modem_Task+0x228>)
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	701a      	strb	r2, [r3, #0]
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
			_modem_led_state = 0;
		}
	}

	return;
 8008f8e:	e031      	b.n	8008ff4 <modem_Task+0x200>
	else if( _modem_led_state == 1 )
 8008f90:	4b22      	ldr	r3, [pc, #136]	; (800901c <modem_Task+0x228>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d10c      	bne.n	8008fb2 <modem_Task+0x1be>
		HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_SET);
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008f9e:	4820      	ldr	r0, [pc, #128]	; (8009020 <modem_Task+0x22c>)
 8008fa0:	f003 ff76 	bl	800ce90 <HAL_GPIO_WritePin>
		modem_info.timer[MODEM_LED_TMR] = 20;
 8008fa4:	4b17      	ldr	r3, [pc, #92]	; (8009004 <modem_Task+0x210>)
 8008fa6:	2214      	movs	r2, #20
 8008fa8:	609a      	str	r2, [r3, #8]
		_modem_led_state = 2;
 8008faa:	4b1c      	ldr	r3, [pc, #112]	; (800901c <modem_Task+0x228>)
 8008fac:	2202      	movs	r2, #2
 8008fae:	701a      	strb	r2, [r3, #0]
	return;
 8008fb0:	e020      	b.n	8008ff4 <modem_Task+0x200>
	else if( _modem_led_state == 2 )
 8008fb2:	4b1a      	ldr	r3, [pc, #104]	; (800901c <modem_Task+0x228>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d110      	bne.n	8008fdc <modem_Task+0x1e8>
		if( modem_info.timer[MODEM_LED_TMR] == 0 )
 8008fba:	4b12      	ldr	r3, [pc, #72]	; (8009004 <modem_Task+0x210>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d118      	bne.n	8008ff4 <modem_Task+0x200>
			HAL_GPIO_WritePin(MODEM_LED_GPIO_Port, MODEM_LED_Pin, GPIO_PIN_RESET);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fc8:	4815      	ldr	r0, [pc, #84]	; (8009020 <modem_Task+0x22c>)
 8008fca:	f003 ff61 	bl	800ce90 <HAL_GPIO_WritePin>
			modem_info.timer[MODEM_LED_TMR] = 50;
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <modem_Task+0x210>)
 8008fd0:	2232      	movs	r2, #50	; 0x32
 8008fd2:	609a      	str	r2, [r3, #8]
			_modem_led_state = 3;
 8008fd4:	4b11      	ldr	r3, [pc, #68]	; (800901c <modem_Task+0x228>)
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	701a      	strb	r2, [r3, #0]
	return;
 8008fda:	e00b      	b.n	8008ff4 <modem_Task+0x200>
	else if( _modem_led_state == 3 )
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <modem_Task+0x228>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d107      	bne.n	8008ff4 <modem_Task+0x200>
		if( modem_info.timer[MODEM_LED_TMR] == 0 ){
 8008fe4:	4b07      	ldr	r3, [pc, #28]	; (8009004 <modem_Task+0x210>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d103      	bne.n	8008ff4 <modem_Task+0x200>
			_modem_led_state = 0;
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <modem_Task+0x228>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
	return;
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
}
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000e30 	.word	0x20000e30
 8009000:	40020000 	.word	0x40020000
 8009004:	20000c88 	.word	0x20000c88
 8009008:	20000bb8 	.word	0x20000bb8
 800900c:	20000e3f 	.word	0x20000e3f
 8009010:	20000da0 	.word	0x20000da0
 8009014:	20000e40 	.word	0x20000e40
 8009018:	20000d1d 	.word	0x20000d1d
 800901c:	20000e41 	.word	0x20000e41
 8009020:	40020400 	.word	0x40020400

08009024 <modem_RcvData>:

void modem_RcvData(uint8_t data)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	71fb      	strb	r3, [r7, #7]

	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	if( _modem_cur_state != modem_ready )
 800902e:	4b5f      	ldr	r3, [pc, #380]	; (80091ac <modem_RcvData+0x188>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b05      	cmp	r3, #5
 8009034:	d01a      	beq.n	800906c <modem_RcvData+0x48>
	{
		if( _modem_par_flag == 0 )
 8009036:	4b5e      	ldr	r3, [pc, #376]	; (80091b0 <modem_RcvData+0x18c>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 80b1 	bne.w	80091a2 <modem_RcvData+0x17e>
		{
			_modem_par_buf[_modem_par_buf_cnt++] = data;
 8009040:	4b5c      	ldr	r3, [pc, #368]	; (80091b4 <modem_RcvData+0x190>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	b2d1      	uxtb	r1, r2
 8009048:	4a5a      	ldr	r2, [pc, #360]	; (80091b4 <modem_RcvData+0x190>)
 800904a:	7011      	strb	r1, [r2, #0]
 800904c:	4619      	mov	r1, r3
 800904e:	4a5a      	ldr	r2, [pc, #360]	; (80091b8 <modem_RcvData+0x194>)
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	5453      	strb	r3, [r2, r1]
			if( _modem_par_buf_cnt == 6 )
 8009054:	4b57      	ldr	r3, [pc, #348]	; (80091b4 <modem_RcvData+0x190>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b06      	cmp	r3, #6
 800905a:	f040 80a2 	bne.w	80091a2 <modem_RcvData+0x17e>
			{
				_modem_par_buf_cnt = 0;
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <modem_RcvData+0x190>)
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
				_modem_par_flag = 1;
 8009064:	4b52      	ldr	r3, [pc, #328]	; (80091b0 <modem_RcvData+0x18c>)
 8009066:	2201      	movs	r2, #1
 8009068:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return;
 800906a:	e09a      	b.n	80091a2 <modem_RcvData+0x17e>
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 800906c:	4b53      	ldr	r3, [pc, #332]	; (80091bc <modem_RcvData+0x198>)
 800906e:	8a1b      	ldrh	r3, [r3, #16]
 8009070:	b29b      	uxth	r3, r3
 8009072:	3301      	adds	r3, #1
 8009074:	b29b      	uxth	r3, r3
 8009076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800907a:	b29a      	uxth	r2, r3
		modem_info.rx_buf.data[modem_info.rx_buf.tail =
 800907c:	4b4f      	ldr	r3, [pc, #316]	; (80091bc <modem_RcvData+0x198>)
 800907e:	4611      	mov	r1, r2
 8009080:	8219      	strh	r1, [r3, #16]
				(modem_info.rx_buf.tail + 1) & MODEM_BUF_MASK] = data;
 8009082:	4b4e      	ldr	r3, [pc, #312]	; (80091bc <modem_RcvData+0x198>)
 8009084:	4413      	add	r3, r2
 8009086:	79fa      	ldrb	r2, [r7, #7]
 8009088:	751a      	strb	r2, [r3, #20]
		if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_HEADER )
 800908a:	4b4c      	ldr	r3, [pc, #304]	; (80091bc <modem_RcvData+0x198>)
 800908c:	7b1b      	ldrb	r3, [r3, #12]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d12a      	bne.n	80090ea <modem_RcvData+0xc6>
					(modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK);
 8009094:	4b49      	ldr	r3, [pc, #292]	; (80091bc <modem_RcvData+0x198>)
 8009096:	8a1b      	ldrh	r3, [r3, #16]
 8009098:	b29b      	uxth	r3, r3
 800909a:	3b02      	subs	r3, #2
 800909c:	b29b      	uxth	r3, r3
			header = modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 800909e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	4619      	mov	r1, r3
 80090a6:	4846      	ldr	r0, [pc, #280]	; (80091c0 <modem_RcvData+0x19c>)
 80090a8:	f000 f8ce 	bl	8009248 <modem_ringBufRead16b>
 80090ac:	4603      	mov	r3, r0
 80090ae:	817b      	strh	r3, [r7, #10]
			if( header == MODEM_HEADER )
 80090b0:	897b      	ldrh	r3, [r7, #10]
 80090b2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d173      	bne.n	80091a2 <modem_RcvData+0x17e>
				modem_info.rx_buf.head = (modem_info.rx_buf.tail - 2) & MODEM_BUF_MASK;
 80090ba:	4b40      	ldr	r3, [pc, #256]	; (80091bc <modem_RcvData+0x198>)
 80090bc:	8a1b      	ldrh	r3, [r3, #16]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b02      	subs	r3, #2
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	4b3c      	ldr	r3, [pc, #240]	; (80091bc <modem_RcvData+0x198>)
 80090cc:	81da      	strh	r2, [r3, #14]
				rcv_size = data;
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	4b3c      	ldr	r3, [pc, #240]	; (80091c4 <modem_RcvData+0x1a0>)
 80090d4:	801a      	strh	r2, [r3, #0]
				modem_info.rx_buf.data_size  = data - 2;
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	b29b      	uxth	r3, r3
 80090da:	3b02      	subs	r3, #2
 80090dc:	b29a      	uxth	r2, r3
 80090de:	4b37      	ldr	r3, [pc, #220]	; (80091bc <modem_RcvData+0x198>)
 80090e0:	825a      	strh	r2, [r3, #18]
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_DATA;
 80090e2:	4b36      	ldr	r3, [pc, #216]	; (80091bc <modem_RcvData+0x198>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	731a      	strb	r2, [r3, #12]
	return;
 80090e8:	e05b      	b.n	80091a2 <modem_RcvData+0x17e>
		else if( modem_info.rx_buf.state == MDMRINGBUF_WAIT_DATA )
 80090ea:	4b34      	ldr	r3, [pc, #208]	; (80091bc <modem_RcvData+0x198>)
 80090ec:	7b1b      	ldrb	r3, [r3, #12]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d156      	bne.n	80091a2 <modem_RcvData+0x17e>
			if( --rcv_size == 0 )
 80090f4:	4b33      	ldr	r3, [pc, #204]	; (80091c4 <modem_RcvData+0x1a0>)
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	4b31      	ldr	r3, [pc, #196]	; (80091c4 <modem_RcvData+0x1a0>)
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	4b30      	ldr	r3, [pc, #192]	; (80091c4 <modem_RcvData+0x1a0>)
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d14c      	bne.n	80091a2 <modem_RcvData+0x17e>
				modem_info.rx_buf.state = MDMRINGBUF_WAIT_HEADER;
 8009108:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <modem_RcvData+0x198>)
 800910a:	2200      	movs	r2, #0
 800910c:	731a      	strb	r2, [r3, #12]
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800910e:	4b2b      	ldr	r3, [pc, #172]	; (80091bc <modem_RcvData+0x198>)
 8009110:	89db      	ldrh	r3, [r3, #14]
 8009112:	b299      	uxth	r1, r3
						modem_info.rx_buf.data_size + 3, MODEM_BUF_MASK);
 8009114:	4b29      	ldr	r3, [pc, #164]	; (80091bc <modem_RcvData+0x198>)
 8009116:	8a5b      	ldrh	r3, [r3, #18]
 8009118:	b29b      	uxth	r3, r3
				crc = crc16_RingBuf((uint8_t*)modem_info.rx_buf.data, modem_info.rx_buf.head,
 800911a:	3303      	adds	r3, #3
 800911c:	b29a      	uxth	r2, r3
 800911e:	237f      	movs	r3, #127	; 0x7f
 8009120:	4827      	ldr	r0, [pc, #156]	; (80091c0 <modem_RcvData+0x19c>)
 8009122:	f7fa fe8b 	bl	8003e3c <crc16_RingBuf>
 8009126:	4603      	mov	r3, r0
 8009128:	81bb      	strh	r3, [r7, #12]
						(modem_info.rx_buf.tail - 1) & MODEM_BUF_MASK) ){
 800912a:	4b24      	ldr	r3, [pc, #144]	; (80091bc <modem_RcvData+0x198>)
 800912c:	8a1b      	ldrh	r3, [r3, #16]
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29b      	uxth	r3, r3
				if( crc == modem_ringBufRead16b((uint8_t*)modem_info.rx_buf.data,
 8009134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009138:	b29b      	uxth	r3, r3
 800913a:	4619      	mov	r1, r3
 800913c:	4820      	ldr	r0, [pc, #128]	; (80091c0 <modem_RcvData+0x19c>)
 800913e:	f000 f883 	bl	8009248 <modem_ringBufRead16b>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	89bb      	ldrh	r3, [r7, #12]
 8009148:	4293      	cmp	r3, r2
 800914a:	d12a      	bne.n	80091a2 <modem_RcvData+0x17e>
					if( modem_info.rvd_pkt_size == 0 )
 800914c:	4b1b      	ldr	r3, [pc, #108]	; (80091bc <modem_RcvData+0x198>)
 800914e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009152:	2b00      	cmp	r3, #0
 8009154:	d125      	bne.n	80091a2 <modem_RcvData+0x17e>
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8009156:	2300      	movs	r3, #0
 8009158:	81fb      	strh	r3, [r7, #14]
 800915a:	e014      	b.n	8009186 <modem_RcvData+0x162>
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 800915c:	4b17      	ldr	r3, [pc, #92]	; (80091bc <modem_RcvData+0x198>)
 800915e:	89db      	ldrh	r3, [r3, #14]
 8009160:	b29b      	uxth	r3, r3
 8009162:	1cda      	adds	r2, r3, #3
 8009164:	89fb      	ldrh	r3, [r7, #14]
 8009166:	4413      	add	r3, r2
 8009168:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							modem_info.rvd_pkt[i] =
 800916c:	89fb      	ldrh	r3, [r7, #14]
									modem_info.rx_buf.data[(modem_info.rx_buf.head + 3 + i) & MODEM_BUF_MASK];
 800916e:	4913      	ldr	r1, [pc, #76]	; (80091bc <modem_RcvData+0x198>)
 8009170:	440a      	add	r2, r1
 8009172:	7d12      	ldrb	r2, [r2, #20]
 8009174:	b2d1      	uxtb	r1, r2
							modem_info.rvd_pkt[i] =
 8009176:	4a11      	ldr	r2, [pc, #68]	; (80091bc <modem_RcvData+0x198>)
 8009178:	4413      	add	r3, r2
 800917a:	460a      	mov	r2, r1
 800917c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						for( uint16_t i = 0; i < modem_info.rx_buf.data_size; i++ ){
 8009180:	89fb      	ldrh	r3, [r7, #14]
 8009182:	3301      	adds	r3, #1
 8009184:	81fb      	strh	r3, [r7, #14]
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <modem_RcvData+0x198>)
 8009188:	8a5b      	ldrh	r3, [r3, #18]
 800918a:	b29b      	uxth	r3, r3
 800918c:	89fa      	ldrh	r2, [r7, #14]
 800918e:	429a      	cmp	r2, r3
 8009190:	d3e4      	bcc.n	800915c <modem_RcvData+0x138>
						modem_info.rvd_pkt_size = modem_info.rx_buf.data_size;
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <modem_RcvData+0x198>)
 8009194:	8a5b      	ldrh	r3, [r3, #18]
 8009196:	b29b      	uxth	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	4b08      	ldr	r3, [pc, #32]	; (80091bc <modem_RcvData+0x198>)
 800919c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return;
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
}
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000e30 	.word	0x20000e30
 80091b0:	20000e3f 	.word	0x20000e3f
 80091b4:	20000e3e 	.word	0x20000e3e
 80091b8:	20000e34 	.word	0x20000e34
 80091bc:	20000c88 	.word	0x20000c88
 80091c0:	20000c9c 	.word	0x20000c9c
 80091c4:	20000e42 	.word	0x20000e42

080091c8 <modem_TrmData>:

void modem_TrmData(uint8_t channel, uint8_t *data, uint32_t len)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	73fb      	strb	r3, [r7, #15]
	uint16_t u16_tmp;
	uint8_t u8_tmp;
	uint32_t i;

	//Header
	u16_tmp = MODEM_HEADER;
 80091d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80091da:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 80091dc:	f107 0316 	add.w	r3, r7, #22
 80091e0:	2102      	movs	r1, #2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f850 	bl	8009288 <modem_AddTxData>
	//Length (data + channel + crc)
	u8_tmp = (uint8_t)len + 3;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	3303      	adds	r3, #3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 80091f2:	f107 0315 	add.w	r3, r7, #21
 80091f6:	2101      	movs	r1, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 f845 	bl	8009288 <modem_AddTxData>
	//Channel (starts from 1)
	u8_tmp = channel;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	757b      	strb	r3, [r7, #21]
	modem_AddTxData(&u8_tmp, 1);
 8009202:	f107 0315 	add.w	r3, r7, #21
 8009206:	2101      	movs	r1, #1
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f83d 	bl	8009288 <modem_AddTxData>
	//Data
	modem_AddTxData(data, len);
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	68b8      	ldr	r0, [r7, #8]
 8009212:	f000 f839 	bl	8009288 <modem_AddTxData>
	//CRC
	u16_tmp = crc16_calc(modem_info.tx_buf, modem_info.tx_buf_bytes);
 8009216:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <modem_TrmData+0x78>)
 8009218:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800921c:	b29b      	uxth	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	4808      	ldr	r0, [pc, #32]	; (8009244 <modem_TrmData+0x7c>)
 8009222:	f7fa fde1 	bl	8003de8 <crc16_calc>
 8009226:	4603      	mov	r3, r0
 8009228:	82fb      	strh	r3, [r7, #22]
	modem_AddTxData((uint8_t*)&u16_tmp, 2);
 800922a:	f107 0316 	add.w	r3, r7, #22
 800922e:	2102      	movs	r1, #2
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f829 	bl	8009288 <modem_AddTxData>

	return;
 8009236:	bf00      	nop
}
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20000c88 	.word	0x20000c88
 8009244:	20000da0 	.word	0x20000da0

08009248 <modem_ringBufRead16b>:

uint16_t modem_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & MODEM_BUF_MASK] & 0xFF;
 8009254:	887b      	ldrh	r3, [r7, #2]
 8009256:	3301      	adds	r3, #1
 8009258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	4413      	add	r3, r2
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	b29a      	uxth	r2, r3
 800926a:	887b      	ldrh	r3, [r7, #2]
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	440b      	add	r3, r1
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	4413      	add	r3, r2
 8009276:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8009278:	89fb      	ldrh	r3, [r7, #14]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <modem_AddTxData>:
	tmp = (tmp << 8) + buf[pos];
	return tmp;
}

void modem_AddTxData(uint8_t *data, uint32_t len)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
#ifdef NO_MODEM
	return;
#endif //NO_MODEM

	if( len > (MODEM_BUF_SIZE - modem_info.tx_buf_bytes) ){
 8009292:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <modem_AddTxData+0x4c>)
 8009294:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009298:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d814      	bhi.n	80092cc <modem_AddTxData+0x44>
		return;
	}
	memcpy((uint8_t*)&modem_info.tx_buf[modem_info.tx_buf_bytes], data, len);
 80092a2:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <modem_AddTxData+0x4c>)
 80092a4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80092a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80092ac:	4a09      	ldr	r2, [pc, #36]	; (80092d4 <modem_AddTxData+0x4c>)
 80092ae:	4413      	add	r3, r2
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f00c fec1 	bl	801603c <memcpy>
	modem_info.tx_buf_bytes += len;
 80092ba:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <modem_AddTxData+0x4c>)
 80092bc:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	4413      	add	r3, r2
 80092c4:	4a03      	ldr	r2, [pc, #12]	; (80092d4 <modem_AddTxData+0x4c>)
 80092c6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return;
 80092ca:	e000      	b.n	80092ce <modem_AddTxData+0x46>
		return;
 80092cc:	bf00      	nop
}
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000c88 	.word	0x20000c88

080092d8 <modem_RemTxData>:

void modem_RemTxData(uint32_t len)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b0a2      	sub	sp, #136	; 0x88
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
	return;
#endif //NO_MODEM

	uint8_t tmp_buf[MODEM_BUF_SIZE];

	if( (len > modem_info.tx_buf_bytes)
 80092e0:	4b18      	ldr	r3, [pc, #96]	; (8009344 <modem_RemTxData+0x6c>)
 80092e2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d826      	bhi.n	800933a <modem_RemTxData+0x62>
			|| (len == 0) || (modem_info.tx_buf_bytes == 0) ){
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d023      	beq.n	800933a <modem_RemTxData+0x62>
 80092f2:	4b14      	ldr	r3, [pc, #80]	; (8009344 <modem_RemTxData+0x6c>)
 80092f4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01e      	beq.n	800933a <modem_RemTxData+0x62>
		return;
	}
	modem_info.tx_buf_bytes -= len;
 80092fc:	4b11      	ldr	r3, [pc, #68]	; (8009344 <modem_RemTxData+0x6c>)
 80092fe:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	4a0f      	ldr	r2, [pc, #60]	; (8009344 <modem_RemTxData+0x6c>)
 8009308:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	memcpy(tmp_buf, (uint8_t*)&modem_info.tx_buf[len], modem_info.tx_buf_bytes);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8009312:	4a0c      	ldr	r2, [pc, #48]	; (8009344 <modem_RemTxData+0x6c>)
 8009314:	1899      	adds	r1, r3, r2
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <modem_RemTxData+0x6c>)
 8009318:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800931c:	f107 0308 	add.w	r3, r7, #8
 8009320:	4618      	mov	r0, r3
 8009322:	f00c fe8b 	bl	801603c <memcpy>
	memcpy((uint8_t*)modem_info.tx_buf, tmp_buf, modem_info.tx_buf_bytes);
 8009326:	4b07      	ldr	r3, [pc, #28]	; (8009344 <modem_RemTxData+0x6c>)
 8009328:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	4619      	mov	r1, r3
 8009332:	4805      	ldr	r0, [pc, #20]	; (8009348 <modem_RemTxData+0x70>)
 8009334:	f00c fe82 	bl	801603c <memcpy>

	return;
 8009338:	e000      	b.n	800933c <modem_RemTxData+0x64>
		return;
 800933a:	bf00      	nop
}
 800933c:	3788      	adds	r7, #136	; 0x88
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000c88 	.word	0x20000c88
 8009348:	20000da0 	.word	0x20000da0

0800934c <motor_Timer>:
volatile motor_infoTypeDef motor_info;

int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void motor_Timer(uint32_t res)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
 8009358:	e016      	b.n	8009388 <motor_Timer+0x3c>
	{
		if( motor_info.timer[i] > 0 ){
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	4a0f      	ldr	r2, [pc, #60]	; (800939c <motor_Timer+0x50>)
 800935e:	3304      	adds	r3, #4
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <motor_Timer+0x36>
			motor_info.timer[i]--;
 800936a:	7bfa      	ldrb	r2, [r7, #15]
 800936c:	490b      	ldr	r1, [pc, #44]	; (800939c <motor_Timer+0x50>)
 800936e:	1d13      	adds	r3, r2, #4
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	1e59      	subs	r1, r3, #1
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <motor_Timer+0x50>)
 800937a:	1d13      	adds	r3, r2, #4
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4403      	add	r3, r0
 8009380:	6059      	str	r1, [r3, #4]
	for( uint8_t i = 0; i < MOTOR_TMR_NUM; i++ )
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	3301      	adds	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0e5      	beq.n	800935a <motor_Timer+0xe>
		}
	}

	return;
 800938e:	bf00      	nop
}
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000e44 	.word	0x20000e44

080093a0 <motor_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_InitTask()
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	motor_info.motors[MOTOR_MAIN].tim = &htim3;
 80093a6:	4b22      	ldr	r3, [pc, #136]	; (8009430 <motor_InitTask+0x90>)
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <motor_InitTask+0x94>)
 80093aa:	601a      	str	r2, [r3, #0]
	motor_info.motors[MOTOR_MAIN].timch = TIM_CHANNEL_3;
 80093ac:	4b20      	ldr	r3, [pc, #128]	; (8009430 <motor_InitTask+0x90>)
 80093ae:	2208      	movs	r2, #8
 80093b0:	605a      	str	r2, [r3, #4]
	motor_info.motors[MOTOR_MAIN].cur_torq = 0;
 80093b2:	4b1f      	ldr	r3, [pc, #124]	; (8009430 <motor_InitTask+0x90>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	731a      	strb	r2, [r3, #12]
	motor_info.motors[MOTOR_MAIN].min_pwm = 535;
 80093b8:	4b1d      	ldr	r3, [pc, #116]	; (8009430 <motor_InitTask+0x90>)
 80093ba:	f240 2217 	movw	r2, #535	; 0x217
 80093be:	821a      	strh	r2, [r3, #16]
	motor_info.motors[MOTOR_MAIN].idle_pwm = 426;
 80093c0:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <motor_InitTask+0x90>)
 80093c2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80093c6:	81da      	strh	r2, [r3, #14]
	motor_info.motors[MOTOR_MAIN].cur_pwm = motor_info.motors[MOTOR_MAIN].idle_pwm;
 80093c8:	4b19      	ldr	r3, [pc, #100]	; (8009430 <motor_InitTask+0x90>)
 80093ca:	89db      	ldrh	r3, [r3, #14]
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	4b18      	ldr	r3, [pc, #96]	; (8009430 <motor_InitTask+0x90>)
 80093d0:	815a      	strh	r2, [r3, #10]
	motor_info.motors[MOTOR_MAIN].max_pwm = 950;
 80093d2:	4b17      	ldr	r3, [pc, #92]	; (8009430 <motor_InitTask+0x90>)
 80093d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80093d8:	825a      	strh	r2, [r3, #18]
	motor_info.motors[MOTOR_MAIN].enable = 1;
 80093da:	4b15      	ldr	r3, [pc, #84]	; (8009430 <motor_InitTask+0x90>)
 80093dc:	2201      	movs	r2, #1
 80093de:	721a      	strb	r2, [r3, #8]

	//Initialize beginning state
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 80093e0:	2300      	movs	r3, #0
 80093e2:	71fb      	strb	r3, [r7, #7]
 80093e4:	e016      	b.n	8009414 <motor_InitTask+0x74>
	{
		HAL_TIM_PWM_Start(motor_info.motors[i].tim, motor_info.motors[i].timch);
 80093e6:	79fa      	ldrb	r2, [r7, #7]
 80093e8:	4911      	ldr	r1, [pc, #68]	; (8009430 <motor_InitTask+0x90>)
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	79fa      	ldrb	r2, [r7, #7]
 80093f8:	490d      	ldr	r1, [pc, #52]	; (8009430 <motor_InitTask+0x90>)
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	3304      	adds	r3, #4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4619      	mov	r1, r3
 800940a:	f006 fd2d 	bl	800fe68 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < MOTORS_NUM; i++ )
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	3301      	adds	r3, #1
 8009412:	71fb      	strb	r3, [r7, #7]
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0e5      	beq.n	80093e6 <motor_InitTask+0x46>
	}

	motor_setTorque(MOTOR_MAIN, motor_info.motors[MOTOR_MAIN].cur_torq);
 800941a:	4b05      	ldr	r3, [pc, #20]	; (8009430 <motor_InitTask+0x90>)
 800941c:	7b1b      	ldrb	r3, [r3, #12]
 800941e:	b2db      	uxtb	r3, r3
 8009420:	4619      	mov	r1, r3
 8009422:	2000      	movs	r0, #0
 8009424:	f000 f92e 	bl	8009684 <motor_setTorque>

	return;
 8009428:	bf00      	nop
}
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000e44 	.word	0x20000e44
 8009434:	20000b70 	.word	0x20000b70

08009438 <motor_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void motor_Task(void)
{
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	return;
 800943c:	bf00      	nop
}
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
	...

08009448 <motor_setEnable>:

void motor_setEnable(uint8_t motor, uint8_t ena)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	460a      	mov	r2, r1
 8009452:	71fb      	strb	r3, [r7, #7]
 8009454:	4613      	mov	r3, r2
 8009456:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8009458:	79fb      	ldrb	r3, [r7, #7]
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 8109 	bne.w	8009672 <motor_setEnable+0x22a>
		return;
	}

	motor_info.motors[motor].enable = ena;
 8009460:	79fa      	ldrb	r2, [r7, #7]
 8009462:	4987      	ldr	r1, [pc, #540]	; (8009680 <motor_setEnable+0x238>)
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	3308      	adds	r3, #8
 8009470:	79ba      	ldrb	r2, [r7, #6]
 8009472:	701a      	strb	r2, [r3, #0]

	if( motor_info.motors[motor].enable == 1 ){
 8009474:	79fa      	ldrb	r2, [r7, #7]
 8009476:	4982      	ldr	r1, [pc, #520]	; (8009680 <motor_setEnable+0x238>)
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	3308      	adds	r3, #8
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d178      	bne.n	800957e <motor_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800948c:	79fa      	ldrb	r2, [r7, #7]
 800948e:	497c      	ldr	r1, [pc, #496]	; (8009680 <motor_setEnable+0x238>)
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	3304      	adds	r3, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d115      	bne.n	80094ce <motor_setEnable+0x86>
 80094a2:	79fa      	ldrb	r2, [r7, #7]
 80094a4:	4976      	ldr	r1, [pc, #472]	; (8009680 <motor_setEnable+0x238>)
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	440b      	add	r3, r1
 80094b0:	330a      	adds	r3, #10
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b298      	uxth	r0, r3
 80094b6:	79fa      	ldrb	r2, [r7, #7]
 80094b8:	4971      	ldr	r1, [pc, #452]	; (8009680 <motor_setEnable+0x238>)
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	440b      	add	r3, r1
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4602      	mov	r2, r0
 80094ca:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
	}

	return;
 80094cc:	e0d2      	b.n	8009674 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80094ce:	79fa      	ldrb	r2, [r7, #7]
 80094d0:	496b      	ldr	r1, [pc, #428]	; (8009680 <motor_setEnable+0x238>)
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	3304      	adds	r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d115      	bne.n	8009510 <motor_setEnable+0xc8>
 80094e4:	79fa      	ldrb	r2, [r7, #7]
 80094e6:	4966      	ldr	r1, [pc, #408]	; (8009680 <motor_setEnable+0x238>)
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	330a      	adds	r3, #10
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b298      	uxth	r0, r3
 80094f8:	79fa      	ldrb	r2, [r7, #7]
 80094fa:	4961      	ldr	r1, [pc, #388]	; (8009680 <motor_setEnable+0x238>)
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	4603      	mov	r3, r0
 800950c:	6393      	str	r3, [r2, #56]	; 0x38
 800950e:	e0af      	b.n	8009670 <motor_setEnable+0x228>
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	495b      	ldr	r1, [pc, #364]	; (8009680 <motor_setEnable+0x238>)
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	440b      	add	r3, r1
 800951e:	3304      	adds	r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b08      	cmp	r3, #8
 8009524:	d115      	bne.n	8009552 <motor_setEnable+0x10a>
 8009526:	79fa      	ldrb	r2, [r7, #7]
 8009528:	4955      	ldr	r1, [pc, #340]	; (8009680 <motor_setEnable+0x238>)
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	330a      	adds	r3, #10
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b298      	uxth	r0, r3
 800953a:	79fa      	ldrb	r2, [r7, #7]
 800953c:	4950      	ldr	r1, [pc, #320]	; (8009680 <motor_setEnable+0x238>)
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4603      	mov	r3, r0
 800954e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009550:	e08e      	b.n	8009670 <motor_setEnable+0x228>
 8009552:	79fa      	ldrb	r2, [r7, #7]
 8009554:	494a      	ldr	r1, [pc, #296]	; (8009680 <motor_setEnable+0x238>)
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	330a      	adds	r3, #10
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b298      	uxth	r0, r3
 8009566:	79fa      	ldrb	r2, [r7, #7]
 8009568:	4945      	ldr	r1, [pc, #276]	; (8009680 <motor_setEnable+0x238>)
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	4603      	mov	r3, r0
 800957a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800957c:	e07a      	b.n	8009674 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 800957e:	79fa      	ldrb	r2, [r7, #7]
 8009580:	493f      	ldr	r1, [pc, #252]	; (8009680 <motor_setEnable+0x238>)
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3304      	adds	r3, #4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d115      	bne.n	80095c0 <motor_setEnable+0x178>
 8009594:	79fa      	ldrb	r2, [r7, #7]
 8009596:	493a      	ldr	r1, [pc, #232]	; (8009680 <motor_setEnable+0x238>)
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	330e      	adds	r3, #14
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b298      	uxth	r0, r3
 80095a8:	79fa      	ldrb	r2, [r7, #7]
 80095aa:	4935      	ldr	r1, [pc, #212]	; (8009680 <motor_setEnable+0x238>)
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4602      	mov	r2, r0
 80095bc:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 80095be:	e059      	b.n	8009674 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 80095c0:	79fa      	ldrb	r2, [r7, #7]
 80095c2:	492f      	ldr	r1, [pc, #188]	; (8009680 <motor_setEnable+0x238>)
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	3304      	adds	r3, #4
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d115      	bne.n	8009602 <motor_setEnable+0x1ba>
 80095d6:	79fa      	ldrb	r2, [r7, #7]
 80095d8:	4929      	ldr	r1, [pc, #164]	; (8009680 <motor_setEnable+0x238>)
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	330e      	adds	r3, #14
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	b298      	uxth	r0, r3
 80095ea:	79fa      	ldrb	r2, [r7, #7]
 80095ec:	4924      	ldr	r1, [pc, #144]	; (8009680 <motor_setEnable+0x238>)
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	440b      	add	r3, r1
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	4603      	mov	r3, r0
 80095fe:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 8009600:	e038      	b.n	8009674 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8009602:	79fa      	ldrb	r2, [r7, #7]
 8009604:	491e      	ldr	r1, [pc, #120]	; (8009680 <motor_setEnable+0x238>)
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	3304      	adds	r3, #4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b08      	cmp	r3, #8
 8009616:	d115      	bne.n	8009644 <motor_setEnable+0x1fc>
 8009618:	79fa      	ldrb	r2, [r7, #7]
 800961a:	4919      	ldr	r1, [pc, #100]	; (8009680 <motor_setEnable+0x238>)
 800961c:	4613      	mov	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	330e      	adds	r3, #14
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b298      	uxth	r0, r3
 800962c:	79fa      	ldrb	r2, [r7, #7]
 800962e:	4914      	ldr	r1, [pc, #80]	; (8009680 <motor_setEnable+0x238>)
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4603      	mov	r3, r0
 8009640:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8009642:	e017      	b.n	8009674 <motor_setEnable+0x22c>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].idle_pwm);
 8009644:	79fa      	ldrb	r2, [r7, #7]
 8009646:	490e      	ldr	r1, [pc, #56]	; (8009680 <motor_setEnable+0x238>)
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	330e      	adds	r3, #14
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b298      	uxth	r0, r3
 8009658:	79fa      	ldrb	r2, [r7, #7]
 800965a:	4909      	ldr	r1, [pc, #36]	; (8009680 <motor_setEnable+0x238>)
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	4603      	mov	r3, r0
 800966c:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800966e:	e001      	b.n	8009674 <motor_setEnable+0x22c>
 8009670:	e000      	b.n	8009674 <motor_setEnable+0x22c>
		return;
 8009672:	bf00      	nop
}
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	20000e44 	.word	0x20000e44

08009684 <motor_setTorque>:

void motor_setTorque(uint8_t motor, uint8_t torq)
{
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b085      	sub	sp, #20
 8009688:	af02      	add	r7, sp, #8
 800968a:	4603      	mov	r3, r0
 800968c:	460a      	mov	r2, r1
 800968e:	71fb      	strb	r3, [r7, #7]
 8009690:	4613      	mov	r3, r2
 8009692:	71bb      	strb	r3, [r7, #6]
#ifdef NO_MOTOR
	return;
#endif //NO_MOTOR

	if( motor >= MOTORS_NUM ){
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f040 80d9 	bne.w	800984e <motor_setTorque+0x1ca>
		return;
	}

	motor_info.motors[motor].cur_torq = torq;
 800969c:	79fa      	ldrb	r2, [r7, #7]
 800969e:	496f      	ldr	r1, [pc, #444]	; (800985c <motor_setTorque+0x1d8>)
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	330c      	adds	r3, #12
 80096ac:	79ba      	ldrb	r2, [r7, #6]
 80096ae:	701a      	strb	r2, [r3, #0]
	if( torq == 0 ){
 80096b0:	79bb      	ldrb	r3, [r7, #6]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d114      	bne.n	80096e0 <motor_setTorque+0x5c>
		motor_info.motors[motor].cur_pwm = motor_info.motors[motor].idle_pwm;
 80096b6:	79f9      	ldrb	r1, [r7, #7]
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	4868      	ldr	r0, [pc, #416]	; (800985c <motor_setTorque+0x1d8>)
 80096bc:	460b      	mov	r3, r1
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4403      	add	r3, r0
 80096c6:	330e      	adds	r3, #14
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	b298      	uxth	r0, r3
 80096cc:	4963      	ldr	r1, [pc, #396]	; (800985c <motor_setTorque+0x1d8>)
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	330a      	adds	r3, #10
 80096da:	4602      	mov	r2, r0
 80096dc:	801a      	strh	r2, [r3, #0]
 80096de:	e031      	b.n	8009744 <motor_setTorque+0xc0>
	}
	else
	{
		motor_info.motors[motor].cur_pwm =
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 80096e0:	79fa      	ldrb	r2, [r7, #7]
 80096e2:	495e      	ldr	r1, [pc, #376]	; (800985c <motor_setTorque+0x1d8>)
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	330c      	adds	r3, #12
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	4618      	mov	r0, r3
							1, 100,
							(int32_t)motor_info.motors[motor].min_pwm,
 80096f6:	79fa      	ldrb	r2, [r7, #7]
 80096f8:	4958      	ldr	r1, [pc, #352]	; (800985c <motor_setTorque+0x1d8>)
 80096fa:	4613      	mov	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3310      	adds	r3, #16
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 800970a:	461c      	mov	r4, r3
							(int32_t)motor_info.motors[motor].max_pwm);
 800970c:	79fa      	ldrb	r2, [r7, #7]
 800970e:	4953      	ldr	r1, [pc, #332]	; (800985c <motor_setTorque+0x1d8>)
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	3312      	adds	r3, #18
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
				motor_map((int32_t)motor_info.motors[motor].cur_torq,
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4623      	mov	r3, r4
 8009724:	2264      	movs	r2, #100	; 0x64
 8009726:	2101      	movs	r1, #1
 8009728:	f000 f89a 	bl	8009860 <motor_map>
 800972c:	4603      	mov	r3, r0
		motor_info.motors[motor].cur_pwm =
 800972e:	79fa      	ldrb	r2, [r7, #7]
 8009730:	b298      	uxth	r0, r3
 8009732:	494a      	ldr	r1, [pc, #296]	; (800985c <motor_setTorque+0x1d8>)
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	330a      	adds	r3, #10
 8009740:	4602      	mov	r2, r0
 8009742:	801a      	strh	r2, [r3, #0]
	}
	if( motor_info.motors[motor].enable == 1 ){
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	4945      	ldr	r1, [pc, #276]	; (800985c <motor_setTorque+0x1d8>)
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3308      	adds	r3, #8
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	d17a      	bne.n	8009852 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800975c:	79fa      	ldrb	r2, [r7, #7]
 800975e:	493f      	ldr	r1, [pc, #252]	; (800985c <motor_setTorque+0x1d8>)
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	3304      	adds	r3, #4
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d115      	bne.n	800979e <motor_setTorque+0x11a>
 8009772:	79fa      	ldrb	r2, [r7, #7]
 8009774:	4939      	ldr	r1, [pc, #228]	; (800985c <motor_setTorque+0x1d8>)
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	330a      	adds	r3, #10
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	b298      	uxth	r0, r3
 8009786:	79fa      	ldrb	r2, [r7, #7]
 8009788:	4934      	ldr	r1, [pc, #208]	; (800985c <motor_setTorque+0x1d8>)
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4602      	mov	r2, r0
 800979a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 800979c:	e059      	b.n	8009852 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 800979e:	79fa      	ldrb	r2, [r7, #7]
 80097a0:	492e      	ldr	r1, [pc, #184]	; (800985c <motor_setTorque+0x1d8>)
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	3304      	adds	r3, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d115      	bne.n	80097e0 <motor_setTorque+0x15c>
 80097b4:	79fa      	ldrb	r2, [r7, #7]
 80097b6:	4929      	ldr	r1, [pc, #164]	; (800985c <motor_setTorque+0x1d8>)
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	440b      	add	r3, r1
 80097c2:	330a      	adds	r3, #10
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	b298      	uxth	r0, r3
 80097c8:	79fa      	ldrb	r2, [r7, #7]
 80097ca:	4924      	ldr	r1, [pc, #144]	; (800985c <motor_setTorque+0x1d8>)
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	4603      	mov	r3, r0
 80097dc:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 80097de:	e038      	b.n	8009852 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 80097e0:	79fa      	ldrb	r2, [r7, #7]
 80097e2:	491e      	ldr	r1, [pc, #120]	; (800985c <motor_setTorque+0x1d8>)
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	3304      	adds	r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b08      	cmp	r3, #8
 80097f4:	d115      	bne.n	8009822 <motor_setTorque+0x19e>
 80097f6:	79fa      	ldrb	r2, [r7, #7]
 80097f8:	4918      	ldr	r1, [pc, #96]	; (800985c <motor_setTorque+0x1d8>)
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	440b      	add	r3, r1
 8009804:	330a      	adds	r3, #10
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b298      	uxth	r0, r3
 800980a:	79fa      	ldrb	r2, [r7, #7]
 800980c:	4913      	ldr	r1, [pc, #76]	; (800985c <motor_setTorque+0x1d8>)
 800980e:	4613      	mov	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	4603      	mov	r3, r0
 800981e:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 8009820:	e017      	b.n	8009852 <motor_setTorque+0x1ce>
		__HAL_TIM_SET_COMPARE(motor_info.motors[motor].tim, motor_info.motors[motor].timch, motor_info.motors[motor].cur_pwm);
 8009822:	79fa      	ldrb	r2, [r7, #7]
 8009824:	490d      	ldr	r1, [pc, #52]	; (800985c <motor_setTorque+0x1d8>)
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	330a      	adds	r3, #10
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b298      	uxth	r0, r3
 8009836:	79fa      	ldrb	r2, [r7, #7]
 8009838:	4908      	ldr	r1, [pc, #32]	; (800985c <motor_setTorque+0x1d8>)
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4603      	mov	r3, r0
 800984a:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800984c:	e001      	b.n	8009852 <motor_setTorque+0x1ce>
		return;
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <motor_setTorque+0x1d0>
	return;
 8009852:	bf00      	nop
}
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	bd90      	pop	{r4, r7, pc}
 800985a:	bf00      	nop
 800985c:	20000e44 	.word	0x20000e44

08009860 <motor_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t motor_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	69b9      	ldr	r1, [r7, #24]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	1a8a      	subs	r2, r1, r2
 800987a:	fb03 f202 	mul.w	r2, r3, r2
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	1acb      	subs	r3, r1, r3
 8009884:	fb92 f2f3 	sdiv	r2, r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	4413      	add	r3, r2
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <cfg_NodeMotorVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeMotorVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 80098a6:	89fb      	ldrh	r3, [r7, #14]
 80098a8:	2b05      	cmp	r3, #5
 80098aa:	d821      	bhi.n	80098f0 <cfg_NodeMotorVarProp+0x58>
 80098ac:	a201      	add	r2, pc, #4	; (adr r2, 80098b4 <cfg_NodeMotorVarProp+0x1c>)
 80098ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	080098d3 	.word	0x080098d3
 80098bc:	080098d9 	.word	0x080098d9
 80098c0:	080098df 	.word	0x080098df
 80098c4:	080098e5 	.word	0x080098e5
 80098c8:	080098eb 	.word	0x080098eb
	{
		case MOTOR_ENA:				str = "Enable"; break;
 80098cc:	4b2e      	ldr	r3, [pc, #184]	; (8009988 <cfg_NodeMotorVarProp+0xf0>)
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e010      	b.n	80098f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_TORQ:		str = "Current torque"; break;
 80098d2:	4b2e      	ldr	r3, [pc, #184]	; (800998c <cfg_NodeMotorVarProp+0xf4>)
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e00d      	b.n	80098f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_CUR_PWM:			str = "Current PWM"; break;
 80098d8:	4b2d      	ldr	r3, [pc, #180]	; (8009990 <cfg_NodeMotorVarProp+0xf8>)
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e00a      	b.n	80098f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_IDLE_PWM:		str = "Idle PWM"; break;
 80098de:	4b2d      	ldr	r3, [pc, #180]	; (8009994 <cfg_NodeMotorVarProp+0xfc>)
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	e007      	b.n	80098f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MIN_PWM:			str = "Min PWM"; break;
 80098e4:	4b2c      	ldr	r3, [pc, #176]	; (8009998 <cfg_NodeMotorVarProp+0x100>)
 80098e6:	617b      	str	r3, [r7, #20]
 80098e8:	e004      	b.n	80098f4 <cfg_NodeMotorVarProp+0x5c>
		case MOTOR_MAX_PWM:			str = "Max PWM"; break;
 80098ea:	4b2c      	ldr	r3, [pc, #176]	; (800999c <cfg_NodeMotorVarProp+0x104>)
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	e001      	b.n	80098f4 <cfg_NodeMotorVarProp+0x5c>
		default: return CFG_ERROR_VARID;
 80098f0:	2302      	movs	r3, #2
 80098f2:	e042      	b.n	800997a <cfg_NodeMotorVarProp+0xe2>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00f      	beq.n	800991a <cfg_NodeMotorVarProp+0x82>
 80098fa:	e007      	b.n	800990c <cfg_NodeMotorVarProp+0x74>
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	1c53      	adds	r3, r2, #1
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	1c59      	adds	r1, r3, #1
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1f3      	bne.n	80098fc <cfg_NodeMotorVarProp+0x64>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d02b      	beq.n	8009978 <cfg_NodeMotorVarProp+0xe0>
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	2b05      	cmp	r3, #5
 8009924:	d826      	bhi.n	8009974 <cfg_NodeMotorVarProp+0xdc>
 8009926:	a201      	add	r2, pc, #4	; (adr r2, 800992c <cfg_NodeMotorVarProp+0x94>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009945 	.word	0x08009945
 8009930:	0800994d 	.word	0x0800994d
 8009934:	08009955 	.word	0x08009955
 8009938:	0800995d 	.word	0x0800995d
 800993c:	08009965 	.word	0x08009965
 8009940:	0800996d 	.word	0x0800996d
	{
		case MOTOR_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2223      	movs	r2, #35	; 0x23
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	e015      	b.n	8009978 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_TORQ:		*prop = CFG_VAR_TYPE_UINT; break;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	801a      	strh	r2, [r3, #0]
 8009952:	e011      	b.n	8009978 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2212      	movs	r2, #18
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	e00d      	b.n	8009978 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_IDLE_PWM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2222      	movs	r2, #34	; 0x22
 8009960:	801a      	strh	r2, [r3, #0]
 8009962:	e009      	b.n	8009978 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MIN_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2222      	movs	r2, #34	; 0x22
 8009968:	801a      	strh	r2, [r3, #0]
 800996a:	e005      	b.n	8009978 <cfg_NodeMotorVarProp+0xe0>
		case MOTOR_MAX_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2222      	movs	r2, #34	; 0x22
 8009970:	801a      	strh	r2, [r3, #0]
 8009972:	e001      	b.n	8009978 <cfg_NodeMotorVarProp+0xe0>
		default: return CFG_ERROR_VARID;
 8009974:	2302      	movs	r3, #2
 8009976:	e000      	b.n	800997a <cfg_NodeMotorVarProp+0xe2>
	}
	return CFG_ERROR_NONE;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	080168e4 	.word	0x080168e4
 800998c:	080168ec 	.word	0x080168ec
 8009990:	080168fc 	.word	0x080168fc
 8009994:	08016908 	.word	0x08016908
 8009998:	08016914 	.word	0x08016914
 800999c:	0801691c 	.word	0x0801691c

080099a0 <cfg_NodeMotorVarGet>:

uint16_t cfg_NodeMotorVarGet(uint16_t varid, void *value)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d03e      	beq.n	8009a30 <cfg_NodeMotorVarGet+0x90>
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	2b05      	cmp	r3, #5
 80099b6:	d839      	bhi.n	8009a2c <cfg_NodeMotorVarGet+0x8c>
 80099b8:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <cfg_NodeMotorVarGet+0x20>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	080099d9 	.word	0x080099d9
 80099c4:	080099e7 	.word	0x080099e7
 80099c8:	080099f5 	.word	0x080099f5
 80099cc:	08009a03 	.word	0x08009a03
 80099d0:	08009a11 	.word	0x08009a11
 80099d4:	08009a1f 	.word	0x08009a1f
	{
		case MOTOR_ENA: 				*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].enable; break;
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <cfg_NodeMotorVarGet+0xa0>)
 80099da:	7a1b      	ldrb	r3, [r3, #8]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	461a      	mov	r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e024      	b.n	8009a30 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_TORQ: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_torq; break;
 80099e6:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <cfg_NodeMotorVarGet+0xa0>)
 80099e8:	7b1b      	ldrb	r3, [r3, #12]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	e01d      	b.n	8009a30 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_CUR_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].cur_pwm; break;
 80099f4:	4b12      	ldr	r3, [pc, #72]	; (8009a40 <cfg_NodeMotorVarGet+0xa0>)
 80099f6:	895b      	ldrh	r3, [r3, #10]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e016      	b.n	8009a30 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_IDLE_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].idle_pwm; break;
 8009a02:	4b0f      	ldr	r3, [pc, #60]	; (8009a40 <cfg_NodeMotorVarGet+0xa0>)
 8009a04:	89db      	ldrh	r3, [r3, #14]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	461a      	mov	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	e00f      	b.n	8009a30 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MIN_PWM: 			*(uint32_t*)value = (int32_t)motor_info.motors[MOTOR_MAIN].min_pwm; break;
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <cfg_NodeMotorVarGet+0xa0>)
 8009a12:	8a1b      	ldrh	r3, [r3, #16]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	461a      	mov	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	e008      	b.n	8009a30 <cfg_NodeMotorVarGet+0x90>
		case MOTOR_MAX_PWM: 			*(uint32_t*)value = (uint32_t)motor_info.motors[MOTOR_MAIN].max_pwm; break;
 8009a1e:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <cfg_NodeMotorVarGet+0xa0>)
 8009a20:	8a5b      	ldrh	r3, [r3, #18]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	461a      	mov	r2, r3
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e001      	b.n	8009a30 <cfg_NodeMotorVarGet+0x90>
		default: return CFG_ERROR_VARID;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e000      	b.n	8009a32 <cfg_NodeMotorVarGet+0x92>
	}
	return CFG_ERROR_NONE;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000e44 	.word	0x20000e44

08009a44 <cfg_NodeMotorVarSet>:

uint16_t cfg_NodeMotorVarSet(uint16_t varid, void *value)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d037      	beq.n	8009ac6 <cfg_NodeMotorVarSet+0x82>
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	2b05      	cmp	r3, #5
 8009a5a:	d831      	bhi.n	8009ac0 <cfg_NodeMotorVarSet+0x7c>
 8009a5c:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <cfg_NodeMotorVarSet+0x20>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a7d 	.word	0x08009a7d
 8009a68:	08009a8d 	.word	0x08009a8d
 8009a6c:	08009ac5 	.word	0x08009ac5
 8009a70:	08009a9d 	.word	0x08009a9d
 8009a74:	08009aa9 	.word	0x08009aa9
 8009a78:	08009ab5 	.word	0x08009ab5
	{
		case MOTOR_ENA:				motor_setEnable(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	4619      	mov	r1, r3
 8009a84:	2000      	movs	r0, #0
 8009a86:	f7ff fcdf 	bl	8009448 <motor_setEnable>
 8009a8a:	e01c      	b.n	8009ac6 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_TORQ:		motor_setTorque(MOTOR_MAIN, (uint8_t)*(uint32_t*)value); break;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	4619      	mov	r1, r3
 8009a94:	2000      	movs	r0, #0
 8009a96:	f7ff fdf5 	bl	8009684 <motor_setTorque>
 8009a9a:	e014      	b.n	8009ac6 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_CUR_PWM:			break;
		case MOTOR_IDLE_PWM:		motor_info.motors[MOTOR_MAIN].idle_pwm = (uint16_t)*(uint32_t*)value; break;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <cfg_NodeMotorVarSet+0x8c>)
 8009aa4:	81da      	strh	r2, [r3, #14]
 8009aa6:	e00e      	b.n	8009ac6 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MIN_PWM:			motor_info.motors[MOTOR_MAIN].min_pwm = (uint16_t)*(uint32_t*)value; break;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	4b08      	ldr	r3, [pc, #32]	; (8009ad0 <cfg_NodeMotorVarSet+0x8c>)
 8009ab0:	821a      	strh	r2, [r3, #16]
 8009ab2:	e008      	b.n	8009ac6 <cfg_NodeMotorVarSet+0x82>
		case MOTOR_MAX_PWM:			motor_info.motors[MOTOR_MAIN].max_pwm = (uint16_t)*(uint32_t*)value; break;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <cfg_NodeMotorVarSet+0x8c>)
 8009abc:	825a      	strh	r2, [r3, #18]
 8009abe:	e002      	b.n	8009ac6 <cfg_NodeMotorVarSet+0x82>
		default: return CFG_ERROR_VARID;
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e001      	b.n	8009ac8 <cfg_NodeMotorVarSet+0x84>
		case MOTOR_CUR_PWM:			break;
 8009ac4:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20000e44 	.word	0x20000e44

08009ad4 <rc_Timer>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos);
void rc_AddTxData(uint8_t *data, uint32_t len);

void rc_Timer(uint32_t res)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
#ifdef NO_RC
	return;
#endif //NO_RC

	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
 8009ae0:	e010      	b.n	8009b04 <rc_Timer+0x30>
	{
		if( rc_info.timer[i] > 0 ){
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	4a0c      	ldr	r2, [pc, #48]	; (8009b18 <rc_Timer+0x44>)
 8009ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <rc_Timer+0x2a>
			rc_info.timer[i]--;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <rc_Timer+0x44>)
 8009af2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009af6:	3a01      	subs	r2, #1
 8009af8:	4907      	ldr	r1, [pc, #28]	; (8009b18 <rc_Timer+0x44>)
 8009afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < RC_TMR_NUM; i++ )
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	3301      	adds	r3, #1
 8009b02:	73fb      	strb	r3, [r7, #15]
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d9eb      	bls.n	8009ae2 <rc_Timer+0xe>
		}
	}

	return;
 8009b0a:	bf00      	nop
}
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20000e68 	.word	0x20000e68

08009b1c <rc_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_InitTask()
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0
#ifdef NO_RC
	return;
#endif //NO_RC

	rc_info.enable = 1;
 8009b20:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <rc_InitTask+0x4c>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
	rc_info.mode = 0;
 8009b28:	4b0f      	ldr	r3, [pc, #60]	; (8009b68 <rc_InitTask+0x4c>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
	rc_info.rx_pkt_cnt = 0;
 8009b30:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <rc_InitTask+0x4c>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	rc_info.conn_tout = RC_DEF_CONN_TOUT;
 8009b38:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <rc_InitTask+0x4c>)
 8009b3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009b3e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	rc_info.send_tlm = 1;
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <rc_InitTask+0x4c>)
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

	rc_info.rx_buf.head = 0;
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <rc_InitTask+0x4c>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	815a      	strh	r2, [r3, #10]
	rc_info.rx_buf.tail = 0;
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <rc_InitTask+0x4c>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	819a      	strh	r2, [r3, #12]
	rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8009b56:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <rc_InitTask+0x4c>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	721a      	strb	r2, [r3, #8]

	return;
 8009b5c:	bf00      	nop
}
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20000e68 	.word	0x20000e68

08009b6c <rc_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void rc_Task(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0

	uint8_t tmp_u8;
	uint16_t tmp_u16;

	//Receiving
	if( rc_info.rvd_pkt_size != 0 ){
 8009b72:	4b53      	ldr	r3, [pc, #332]	; (8009cc0 <rc_Task+0x154>)
 8009b74:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d047      	beq.n	8009c0c <rc_Task+0xa0>
		rc_info.timer[RC_TMR_CONN] = rc_info.conn_tout;
 8009b7c:	4b50      	ldr	r3, [pc, #320]	; (8009cc0 <rc_Task+0x154>)
 8009b7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009b82:	4a4f      	ldr	r2, [pc, #316]	; (8009cc0 <rc_Task+0x154>)
 8009b84:	6013      	str	r3, [r2, #0]
		if( rc_info.connected == 0 ){
 8009b86:	4b4e      	ldr	r3, [pc, #312]	; (8009cc0 <rc_Task+0x154>)
 8009b88:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d103      	bne.n	8009b9a <rc_Task+0x2e>
			rc_info.connected = 1;
 8009b92:	4b4b      	ldr	r3, [pc, #300]	; (8009cc0 <rc_Task+0x154>)
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		}

		rc_info.axis_l_x = (int8_t)rc_info.rvd_pkt[0];
 8009b9a:	4b49      	ldr	r3, [pc, #292]	; (8009cc0 <rc_Task+0x154>)
 8009b9c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	b25a      	sxtb	r2, r3
 8009ba4:	4b46      	ldr	r3, [pc, #280]	; (8009cc0 <rc_Task+0x154>)
 8009ba6:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		rc_info.axis_l_y = (int8_t)rc_info.rvd_pkt[1];
 8009baa:	4b45      	ldr	r3, [pc, #276]	; (8009cc0 <rc_Task+0x154>)
 8009bac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	b25a      	sxtb	r2, r3
 8009bb4:	4b42      	ldr	r3, [pc, #264]	; (8009cc0 <rc_Task+0x154>)
 8009bb6:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
		rc_info.axis_r_x = (int8_t)rc_info.rvd_pkt[2];
 8009bba:	4b41      	ldr	r3, [pc, #260]	; (8009cc0 <rc_Task+0x154>)
 8009bbc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	b25a      	sxtb	r2, r3
 8009bc4:	4b3e      	ldr	r3, [pc, #248]	; (8009cc0 <rc_Task+0x154>)
 8009bc6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
		rc_info.axis_r_y = (int8_t)rc_info.rvd_pkt[3];
 8009bca:	4b3d      	ldr	r3, [pc, #244]	; (8009cc0 <rc_Task+0x154>)
 8009bcc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	b25a      	sxtb	r2, r3
 8009bd4:	4b3a      	ldr	r3, [pc, #232]	; (8009cc0 <rc_Task+0x154>)
 8009bd6:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
		rc_info.button_l = rc_info.rvd_pkt[4];
 8009bda:	4b39      	ldr	r3, [pc, #228]	; (8009cc0 <rc_Task+0x154>)
 8009bdc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	4b37      	ldr	r3, [pc, #220]	; (8009cc0 <rc_Task+0x154>)
 8009be4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
		rc_info.button_r = rc_info.rvd_pkt[5];
 8009be8:	4b35      	ldr	r3, [pc, #212]	; (8009cc0 <rc_Task+0x154>)
 8009bea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	4b33      	ldr	r3, [pc, #204]	; (8009cc0 <rc_Task+0x154>)
 8009bf2:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125

		rc_info.rx_pkt_cnt += 1;
 8009bf6:	4b32      	ldr	r3, [pc, #200]	; (8009cc0 <rc_Task+0x154>)
 8009bf8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	4a30      	ldr	r2, [pc, #192]	; (8009cc0 <rc_Task+0x154>)
 8009c00:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		rc_info.rvd_pkt_size = 0;
 8009c04:	4b2e      	ldr	r3, [pc, #184]	; (8009cc0 <rc_Task+0x154>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	}

	//Connection tout condition
	if( (rc_info.timer[RC_TMR_CONN] == 0) && (rc_info.connected == 1) ){
 8009c0c:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <rc_Task+0x154>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d109      	bne.n	8009c28 <rc_Task+0xbc>
 8009c14:	4b2a      	ldr	r3, [pc, #168]	; (8009cc0 <rc_Task+0x154>)
 8009c16:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d103      	bne.n	8009c28 <rc_Task+0xbc>
		rc_info.connected = 0;
 8009c20:	4b27      	ldr	r3, [pc, #156]	; (8009cc0 <rc_Task+0x154>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	}

	//Transmitting
	if( (rc_info.timer[RC_TMR_TRM_TLM] == 0)
 8009c28:	4b25      	ldr	r3, [pc, #148]	; (8009cc0 <rc_Task+0x154>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d142      	bne.n	8009cb6 <rc_Task+0x14a>
			&& (rc_info.send_tlm == 1) && (rc_info.connected == 1) )
 8009c30:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <rc_Task+0x154>)
 8009c32:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d13c      	bne.n	8009cb6 <rc_Task+0x14a>
 8009c3c:	4b20      	ldr	r3, [pc, #128]	; (8009cc0 <rc_Task+0x154>)
 8009c3e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d136      	bne.n	8009cb6 <rc_Task+0x14a>
	{
		rc_info.timer[RC_TMR_TRM_TLM] = RC_TLM_SND_PERIOD;
 8009c48:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <rc_Task+0x154>)
 8009c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c4e:	605a      	str	r2, [r3, #4]
		tmp_u16 = RC_HEADER;
 8009c50:	f648 43c8 	movw	r3, #36040	; 0x8cc8
 8009c54:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009c56:	1d3b      	adds	r3, r7, #4
 8009c58:	2102      	movs	r1, #2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 f904 	bl	8009e68 <rc_AddTxData>
		tmp_u8 = 5;
 8009c60:	2305      	movs	r3, #5
 8009c62:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8009c64:	1dfb      	adds	r3, r7, #7
 8009c66:	2101      	movs	r1, #1
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 f8fd 	bl	8009e68 <rc_AddTxData>
		tmp_u8 = autopilot_info.armed_flag;
 8009c6e:	4b15      	ldr	r3, [pc, #84]	; (8009cc4 <rc_Task+0x158>)
 8009c70:	7e5b      	ldrb	r3, [r3, #25]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	71fb      	strb	r3, [r7, #7]
		rc_AddTxData(&tmp_u8, 1);
 8009c76:	1dfb      	adds	r3, r7, #7
 8009c78:	2101      	movs	r1, #1
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f8f4 	bl	8009e68 <rc_AddTxData>
		tmp_u16 = battery_info.battery_volatge;
 8009c80:	4b11      	ldr	r3, [pc, #68]	; (8009cc8 <rc_Task+0x15c>)
 8009c82:	89db      	ldrh	r3, [r3, #14]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009c88:	1d3b      	adds	r3, r7, #4
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 f8eb 	bl	8009e68 <rc_AddTxData>
		tmp_u16 = crc16_calc(_rc_tx_buf, _rc_tx_buf_len);
 8009c92:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <rc_Task+0x160>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	480d      	ldr	r0, [pc, #52]	; (8009cd0 <rc_Task+0x164>)
 8009c9c:	f7fa f8a4 	bl	8003de8 <crc16_calc>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	80bb      	strh	r3, [r7, #4]
		rc_AddTxData((uint8_t*)&tmp_u16, 2);
 8009ca4:	1d3b      	adds	r3, r7, #4
 8009ca6:	2102      	movs	r1, #2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f8dd 	bl	8009e68 <rc_AddTxData>
		//modem_TrmData(SYSTEM_RC_MODEM_CH, _rc_tx_buf, _rc_tx_buf_len);
		_rc_tx_buf_len = 0;
 8009cae:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <rc_Task+0x160>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
	}

	return;
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
}
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000e68 	.word	0x20000e68
 8009cc4:	200002ac 	.word	0x200002ac
 8009cc8:	200003b4 	.word	0x200003b4
 8009ccc:	20001018 	.word	0x20001018
 8009cd0:	20000f98 	.word	0x20000f98

08009cd4 <rc_RcvData>:

void rc_RcvData(uint8_t data)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	71fb      	strb	r3, [r7, #7]
	static uint16_t rcv_size;
	uint16_t header;
	uint16_t crc;

	rc_info.rx_buf.data[rc_info.rx_buf.tail =
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8009cde:	4b4f      	ldr	r3, [pc, #316]	; (8009e1c <rc_RcvData+0x148>)
 8009ce0:	899b      	ldrh	r3, [r3, #12]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cec:	b29a      	uxth	r2, r3
	rc_info.rx_buf.data[rc_info.rx_buf.tail =
 8009cee:	4b4b      	ldr	r3, [pc, #300]	; (8009e1c <rc_RcvData+0x148>)
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	8199      	strh	r1, [r3, #12]
			(rc_info.rx_buf.tail + 1) & RC_BUF_MASK] = data;
 8009cf4:	4b49      	ldr	r3, [pc, #292]	; (8009e1c <rc_RcvData+0x148>)
 8009cf6:	4413      	add	r3, r2
 8009cf8:	79fa      	ldrb	r2, [r7, #7]
 8009cfa:	741a      	strb	r2, [r3, #16]
	//Waiting header
	if( rc_info.rx_buf.state == RCRINGBUF_WAIT_HEADER )
 8009cfc:	4b47      	ldr	r3, [pc, #284]	; (8009e1c <rc_RcvData+0x148>)
 8009cfe:	7a1b      	ldrb	r3, [r3, #8]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d12a      	bne.n	8009d5c <rc_RcvData+0x88>
	{
		//Catch header
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
				(rc_info.rx_buf.tail - 2) & RC_BUF_MASK);
 8009d06:	4b45      	ldr	r3, [pc, #276]	; (8009e1c <rc_RcvData+0x148>)
 8009d08:	899b      	ldrh	r3, [r3, #12]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b02      	subs	r3, #2
 8009d0e:	b29b      	uxth	r3, r3
		header = rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8009d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	4619      	mov	r1, r3
 8009d18:	4841      	ldr	r0, [pc, #260]	; (8009e20 <rc_RcvData+0x14c>)
 8009d1a:	f000 f885 	bl	8009e28 <rc_ringBufRead16b>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	817b      	strh	r3, [r7, #10]
		if( header == RC_HEADER )
 8009d22:	897b      	ldrh	r3, [r7, #10]
 8009d24:	f648 42c8 	movw	r2, #36040	; 0x8cc8
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d173      	bne.n	8009e14 <rc_RcvData+0x140>
		{
			rc_info.rx_buf.head = (rc_info.rx_buf.tail - 2) & RC_BUF_MASK;
 8009d2c:	4b3b      	ldr	r3, [pc, #236]	; (8009e1c <rc_RcvData+0x148>)
 8009d2e:	899b      	ldrh	r3, [r3, #12]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	3b02      	subs	r3, #2
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	4b37      	ldr	r3, [pc, #220]	; (8009e1c <rc_RcvData+0x148>)
 8009d3e:	815a      	strh	r2, [r3, #10]
			rcv_size = data;
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <rc_RcvData+0x150>)
 8009d46:	801a      	strh	r2, [r3, #0]
			rc_info.rx_buf.data_size  = data - 2;
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	3b02      	subs	r3, #2
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	4b32      	ldr	r3, [pc, #200]	; (8009e1c <rc_RcvData+0x148>)
 8009d52:	81da      	strh	r2, [r3, #14]
			rc_info.rx_buf.state = RCRINGBUF_WAIT_DATA;
 8009d54:	4b31      	ldr	r3, [pc, #196]	; (8009e1c <rc_RcvData+0x148>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	721a      	strb	r2, [r3, #8]
		{

		}
	}

	return;
 8009d5a:	e05b      	b.n	8009e14 <rc_RcvData+0x140>
	else if( rc_info.rx_buf.state == RCRINGBUF_WAIT_DATA )
 8009d5c:	4b2f      	ldr	r3, [pc, #188]	; (8009e1c <rc_RcvData+0x148>)
 8009d5e:	7a1b      	ldrb	r3, [r3, #8]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d156      	bne.n	8009e14 <rc_RcvData+0x140>
		if( --rcv_size == 0 )
 8009d66:	4b2f      	ldr	r3, [pc, #188]	; (8009e24 <rc_RcvData+0x150>)
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	4b2d      	ldr	r3, [pc, #180]	; (8009e24 <rc_RcvData+0x150>)
 8009d70:	801a      	strh	r2, [r3, #0]
 8009d72:	4b2c      	ldr	r3, [pc, #176]	; (8009e24 <rc_RcvData+0x150>)
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d14c      	bne.n	8009e14 <rc_RcvData+0x140>
			rc_info.rx_buf.state = RCRINGBUF_WAIT_HEADER;
 8009d7a:	4b28      	ldr	r3, [pc, #160]	; (8009e1c <rc_RcvData+0x148>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	721a      	strb	r2, [r3, #8]
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8009d80:	4b26      	ldr	r3, [pc, #152]	; (8009e1c <rc_RcvData+0x148>)
 8009d82:	895b      	ldrh	r3, [r3, #10]
 8009d84:	b299      	uxth	r1, r3
					rc_info.rx_buf.data_size + 3, RC_BUF_MASK);
 8009d86:	4b25      	ldr	r3, [pc, #148]	; (8009e1c <rc_RcvData+0x148>)
 8009d88:	89db      	ldrh	r3, [r3, #14]
 8009d8a:	b29b      	uxth	r3, r3
			crc = crc16_RingBuf((uint8_t*)rc_info.rx_buf.data, rc_info.rx_buf.head,
 8009d8c:	3303      	adds	r3, #3
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	237f      	movs	r3, #127	; 0x7f
 8009d92:	4823      	ldr	r0, [pc, #140]	; (8009e20 <rc_RcvData+0x14c>)
 8009d94:	f7fa f852 	bl	8003e3c <crc16_RingBuf>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	81bb      	strh	r3, [r7, #12]
					(rc_info.rx_buf.tail - 1) & RC_BUF_MASK) ){
 8009d9c:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <rc_RcvData+0x148>)
 8009d9e:	899b      	ldrh	r3, [r3, #12]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	b29b      	uxth	r3, r3
			if( crc == rc_ringBufRead16b((uint8_t*)rc_info.rx_buf.data,
 8009da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	4619      	mov	r1, r3
 8009dae:	481c      	ldr	r0, [pc, #112]	; (8009e20 <rc_RcvData+0x14c>)
 8009db0:	f000 f83a 	bl	8009e28 <rc_ringBufRead16b>
 8009db4:	4603      	mov	r3, r0
 8009db6:	461a      	mov	r2, r3
 8009db8:	89bb      	ldrh	r3, [r7, #12]
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d12a      	bne.n	8009e14 <rc_RcvData+0x140>
				if( rc_info.rvd_pkt_size == 0 )
 8009dbe:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <rc_RcvData+0x148>)
 8009dc0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d125      	bne.n	8009e14 <rc_RcvData+0x140>
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8009dc8:	2300      	movs	r3, #0
 8009dca:	81fb      	strh	r3, [r7, #14]
 8009dcc:	e014      	b.n	8009df8 <rc_RcvData+0x124>
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8009dce:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <rc_RcvData+0x148>)
 8009dd0:	895b      	ldrh	r3, [r3, #10]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	1cda      	adds	r2, r3, #3
 8009dd6:	89fb      	ldrh	r3, [r7, #14]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
						rc_info.rvd_pkt[i] =
 8009dde:	89fb      	ldrh	r3, [r7, #14]
								rc_info.rx_buf.data[(rc_info.rx_buf.head + 3 + i) & RC_BUF_MASK];
 8009de0:	490e      	ldr	r1, [pc, #56]	; (8009e1c <rc_RcvData+0x148>)
 8009de2:	440a      	add	r2, r1
 8009de4:	7c12      	ldrb	r2, [r2, #16]
 8009de6:	b2d1      	uxtb	r1, r2
						rc_info.rvd_pkt[i] =
 8009de8:	4a0c      	ldr	r2, [pc, #48]	; (8009e1c <rc_RcvData+0x148>)
 8009dea:	4413      	add	r3, r2
 8009dec:	460a      	mov	r2, r1
 8009dee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
					for( uint16_t i = 0; i < rc_info.rx_buf.data_size; i++ ){
 8009df2:	89fb      	ldrh	r3, [r7, #14]
 8009df4:	3301      	adds	r3, #1
 8009df6:	81fb      	strh	r3, [r7, #14]
 8009df8:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <rc_RcvData+0x148>)
 8009dfa:	89db      	ldrh	r3, [r3, #14]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	89fa      	ldrh	r2, [r7, #14]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d3e4      	bcc.n	8009dce <rc_RcvData+0xfa>
					rc_info.rvd_pkt_size = rc_info.rx_buf.data_size;
 8009e04:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <rc_RcvData+0x148>)
 8009e06:	89db      	ldrh	r3, [r3, #14]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <rc_RcvData+0x148>)
 8009e0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	return;
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
}
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20000e68 	.word	0x20000e68
 8009e20:	20000e78 	.word	0x20000e78
 8009e24:	2000101c 	.word	0x2000101c

08009e28 <rc_ringBufRead16b>:

uint16_t rc_ringBufRead16b(uint8_t *buf, uint16_t pos)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = buf[(pos + 1) & RC_BUF_MASK] & 0xFF;
 8009e34:	887b      	ldrh	r3, [r7, #2]
 8009e36:	3301      	adds	r3, #1
 8009e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	4413      	add	r3, r2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp << 8) + buf[pos];
 8009e44:	89fb      	ldrh	r3, [r7, #14]
 8009e46:	021b      	lsls	r3, r3, #8
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	887b      	ldrh	r3, [r7, #2]
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	440b      	add	r3, r1
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	4413      	add	r3, r2
 8009e56:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8009e58:	89fb      	ldrh	r3, [r7, #14]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
	...

08009e68 <rc_AddTxData>:

void rc_AddTxData(uint8_t *data, uint32_t len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]

	if( len > (RC_TX_BUF_SIZE - _rc_tx_buf_len) ){
 8009e72:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <rc_AddTxData+0x40>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d80f      	bhi.n	8009ea0 <rc_AddTxData+0x38>
		return;
	}
	memcpy((uint8_t*)&_rc_tx_buf[_rc_tx_buf_len], data, len);
 8009e80:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <rc_AddTxData+0x40>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a09      	ldr	r2, [pc, #36]	; (8009eac <rc_AddTxData+0x44>)
 8009e86:	4413      	add	r3, r2
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f00c f8d5 	bl	801603c <memcpy>
	_rc_tx_buf_len += len;
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <rc_AddTxData+0x40>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	4413      	add	r3, r2
 8009e9a:	4a03      	ldr	r2, [pc, #12]	; (8009ea8 <rc_AddTxData+0x40>)
 8009e9c:	6013      	str	r3, [r2, #0]

	return;
 8009e9e:	e000      	b.n	8009ea2 <rc_AddTxData+0x3a>
		return;
 8009ea0:	bf00      	nop
}
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20001018 	.word	0x20001018
 8009eac:	20000f98 	.word	0x20000f98

08009eb0 <cfg_NodeRcVarProp>:


/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeRcVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 8009ebe:	89fb      	ldrh	r3, [r7, #14]
 8009ec0:	2b09      	cmp	r3, #9
 8009ec2:	d835      	bhi.n	8009f30 <cfg_NodeRcVarProp+0x80>
 8009ec4:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <cfg_NodeRcVarProp+0x1c>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009ef5 	.word	0x08009ef5
 8009ed0:	08009efb 	.word	0x08009efb
 8009ed4:	08009f01 	.word	0x08009f01
 8009ed8:	08009f07 	.word	0x08009f07
 8009edc:	08009f0d 	.word	0x08009f0d
 8009ee0:	08009f13 	.word	0x08009f13
 8009ee4:	08009f19 	.word	0x08009f19
 8009ee8:	08009f1f 	.word	0x08009f1f
 8009eec:	08009f25 	.word	0x08009f25
 8009ef0:	08009f2b 	.word	0x08009f2b
	{
		case RC_ENA:				str = "Enable"; break;
 8009ef4:	4b40      	ldr	r3, [pc, #256]	; (8009ff8 <cfg_NodeRcVarProp+0x148>)
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e01c      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_MODE:				str = "Mode (0:modem 1:futaba)"; break;
 8009efa:	4b40      	ldr	r3, [pc, #256]	; (8009ffc <cfg_NodeRcVarProp+0x14c>)
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	e019      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_SEND_TLM:			str = "Send telemetry"; break;
 8009f00:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <cfg_NodeRcVarProp+0x150>)
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	e016      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_RX_PKT_CNT:			str = "Received pkt"; break;
 8009f06:	4b3f      	ldr	r3, [pc, #252]	; (800a004 <cfg_NodeRcVarProp+0x154>)
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e013      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_X:			str = "Axis left X"; break;
 8009f0c:	4b3e      	ldr	r3, [pc, #248]	; (800a008 <cfg_NodeRcVarProp+0x158>)
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	e010      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_L_Y:			str = "Axis left Y"; break;
 8009f12:	4b3e      	ldr	r3, [pc, #248]	; (800a00c <cfg_NodeRcVarProp+0x15c>)
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	e00d      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_X:			str = "Axis right X"; break;
 8009f18:	4b3d      	ldr	r3, [pc, #244]	; (800a010 <cfg_NodeRcVarProp+0x160>)
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	e00a      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_AXIS_R_Y:			str = "Axis right Y"; break;
 8009f1e:	4b3d      	ldr	r3, [pc, #244]	; (800a014 <cfg_NodeRcVarProp+0x164>)
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e007      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_L:				str = "Button left"; break;
 8009f24:	4b3c      	ldr	r3, [pc, #240]	; (800a018 <cfg_NodeRcVarProp+0x168>)
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e004      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		case RC_BUT_R:				str = "Button right"; break;
 8009f2a:	4b3c      	ldr	r3, [pc, #240]	; (800a01c <cfg_NodeRcVarProp+0x16c>)
 8009f2c:	617b      	str	r3, [r7, #20]
 8009f2e:	e001      	b.n	8009f34 <cfg_NodeRcVarProp+0x84>
		default: return CFG_ERROR_VARID;
 8009f30:	2302      	movs	r3, #2
 8009f32:	e05a      	b.n	8009fea <cfg_NodeRcVarProp+0x13a>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00f      	beq.n	8009f5a <cfg_NodeRcVarProp+0xaa>
 8009f3a:	e007      	b.n	8009f4c <cfg_NodeRcVarProp+0x9c>
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	1c53      	adds	r3, r2, #1
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	1c59      	adds	r1, r3, #1
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	7812      	ldrb	r2, [r2, #0]
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f3      	bne.n	8009f3c <cfg_NodeRcVarProp+0x8c>
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2200      	movs	r2, #0
 8009f58:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d043      	beq.n	8009fe8 <cfg_NodeRcVarProp+0x138>
 8009f60:	89fb      	ldrh	r3, [r7, #14]
 8009f62:	2b09      	cmp	r3, #9
 8009f64:	d83e      	bhi.n	8009fe4 <cfg_NodeRcVarProp+0x134>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <cfg_NodeRcVarProp+0xbc>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f9d 	.word	0x08009f9d
 8009f74:	08009fa5 	.word	0x08009fa5
 8009f78:	08009fad 	.word	0x08009fad
 8009f7c:	08009fb5 	.word	0x08009fb5
 8009f80:	08009fbd 	.word	0x08009fbd
 8009f84:	08009fc5 	.word	0x08009fc5
 8009f88:	08009fcd 	.word	0x08009fcd
 8009f8c:	08009fd5 	.word	0x08009fd5
 8009f90:	08009fdd 	.word	0x08009fdd
	{
		case RC_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2223      	movs	r2, #35	; 0x23
 8009f98:	801a      	strh	r2, [r3, #0]
 8009f9a:	e025      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_MODE:				*prop = CFG_VAR_TYPE_UINT| CFG_VAR_PROP_CONST; break;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2222      	movs	r2, #34	; 0x22
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	e021      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_SEND_TLM:			*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2223      	movs	r2, #35	; 0x23
 8009fa8:	801a      	strh	r2, [r3, #0]
 8009faa:	e01d      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_RX_PKT_CNT:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2212      	movs	r2, #18
 8009fb0:	801a      	strh	r2, [r3, #0]
 8009fb2:	e019      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2211      	movs	r2, #17
 8009fb8:	801a      	strh	r2, [r3, #0]
 8009fba:	e015      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_L_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2211      	movs	r2, #17
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	e011      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_X:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2211      	movs	r2, #17
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	e00d      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_AXIS_R_Y:			*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2211      	movs	r2, #17
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	e009      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_BUT_L:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2213      	movs	r2, #19
 8009fd8:	801a      	strh	r2, [r3, #0]
 8009fda:	e005      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		case RC_BUT_R:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_READONLY; break;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2213      	movs	r2, #19
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	e001      	b.n	8009fe8 <cfg_NodeRcVarProp+0x138>
		default: return CFG_ERROR_VARID;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e000      	b.n	8009fea <cfg_NodeRcVarProp+0x13a>
	}
	return CFG_ERROR_NONE;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	08016924 	.word	0x08016924
 8009ffc:	0801692c 	.word	0x0801692c
 800a000:	08016944 	.word	0x08016944
 800a004:	08016954 	.word	0x08016954
 800a008:	08016964 	.word	0x08016964
 800a00c:	08016970 	.word	0x08016970
 800a010:	0801697c 	.word	0x0801697c
 800a014:	0801698c 	.word	0x0801698c
 800a018:	0801699c 	.word	0x0801699c
 800a01c:	080169a8 	.word	0x080169a8

0800a020 <cfg_NodeRcVarGet>:

uint16_t cfg_NodeRcVarGet(uint16_t varid, void *value)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d06a      	beq.n	800a108 <cfg_NodeRcVarGet+0xe8>
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	2b09      	cmp	r3, #9
 800a036:	d865      	bhi.n	800a104 <cfg_NodeRcVarGet+0xe4>
 800a038:	a201      	add	r2, pc, #4	; (adr r2, 800a040 <cfg_NodeRcVarGet+0x20>)
 800a03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03e:	bf00      	nop
 800a040:	0800a069 	.word	0x0800a069
 800a044:	0800a079 	.word	0x0800a079
 800a048:	0800a089 	.word	0x0800a089
 800a04c:	0800a099 	.word	0x0800a099
 800a050:	0800a0a5 	.word	0x0800a0a5
 800a054:	0800a0b5 	.word	0x0800a0b5
 800a058:	0800a0c5 	.word	0x0800a0c5
 800a05c:	0800a0d5 	.word	0x0800a0d5
 800a060:	0800a0e5 	.word	0x0800a0e5
 800a064:	0800a0f5 	.word	0x0800a0f5
	{
		case RC_ENA: 				*(uint32_t*)value = (uint32_t)rc_info.enable; break;
 800a068:	4b2b      	ldr	r3, [pc, #172]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a06a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	e047      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_MODE: 				*(uint32_t*)value = (uint32_t)rc_info.mode; break;
 800a078:	4b27      	ldr	r3, [pc, #156]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a07a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	461a      	mov	r2, r3
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	e03f      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_SEND_TLM: 			*(uint32_t*)value = (uint32_t)rc_info.send_tlm; break;
 800a088:	4b23      	ldr	r3, [pc, #140]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a08a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	e037      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_RX_PKT_CNT: 		*(uint32_t*)value = (uint32_t)rc_info.rx_pkt_cnt; break;
 800a098:	4b1f      	ldr	r3, [pc, #124]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a09a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e031      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_x; break;
 800a0a4:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a0a6:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800a0aa:	b25b      	sxtb	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	e029      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_L_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_l_y; break;
 800a0b4:	4b18      	ldr	r3, [pc, #96]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a0b6:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800a0ba:	b25b      	sxtb	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e021      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_X: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_x; break;
 800a0c4:	4b14      	ldr	r3, [pc, #80]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a0c6:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800a0ca:	b25b      	sxtb	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	e019      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_AXIS_R_Y: 			*(uint32_t*)value = (int32_t)rc_info.axis_r_y; break;
 800a0d4:	4b10      	ldr	r3, [pc, #64]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a0d6:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800a0da:	b25b      	sxtb	r3, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	e011      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_L: 				*(uint32_t*)value = (uint32_t)rc_info.button_l; break;
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a0e6:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	e009      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		case RC_BUT_R: 				*(uint32_t*)value = (uint32_t)rc_info.button_r; break;
 800a0f4:	4b08      	ldr	r3, [pc, #32]	; (800a118 <cfg_NodeRcVarGet+0xf8>)
 800a0f6:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	e001      	b.n	800a108 <cfg_NodeRcVarGet+0xe8>
		default: return CFG_ERROR_VARID;
 800a104:	2302      	movs	r3, #2
 800a106:	e000      	b.n	800a10a <cfg_NodeRcVarGet+0xea>
	}
	return CFG_ERROR_NONE;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000e68 	.word	0x20000e68

0800a11c <cfg_NodeRcVarSet>:

uint16_t cfg_NodeRcVarSet(uint16_t varid, void *value)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d032      	beq.n	800a194 <cfg_NodeRcVarSet+0x78>
 800a12e:	88fb      	ldrh	r3, [r7, #6]
 800a130:	2b09      	cmp	r3, #9
 800a132:	d82c      	bhi.n	800a18e <cfg_NodeRcVarSet+0x72>
 800a134:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <cfg_NodeRcVarSet+0x20>)
 800a136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13a:	bf00      	nop
 800a13c:	0800a165 	.word	0x0800a165
 800a140:	0800a173 	.word	0x0800a173
 800a144:	0800a181 	.word	0x0800a181
 800a148:	0800a193 	.word	0x0800a193
 800a14c:	0800a193 	.word	0x0800a193
 800a150:	0800a193 	.word	0x0800a193
 800a154:	0800a193 	.word	0x0800a193
 800a158:	0800a193 	.word	0x0800a193
 800a15c:	0800a193 	.word	0x0800a193
 800a160:	0800a193 	.word	0x0800a193
	{
		case RC_ENA:				rc_info.enable = (uint8_t)*(uint32_t*)value; break;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <cfg_NodeRcVarSet+0x88>)
 800a16c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 800a170:	e010      	b.n	800a194 <cfg_NodeRcVarSet+0x78>
		case RC_MODE:				rc_info.mode = (uint8_t)*(uint32_t*)value; break;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	b2da      	uxtb	r2, r3
 800a178:	4b0a      	ldr	r3, [pc, #40]	; (800a1a4 <cfg_NodeRcVarSet+0x88>)
 800a17a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 800a17e:	e009      	b.n	800a194 <cfg_NodeRcVarSet+0x78>
		case RC_SEND_TLM:			rc_info.send_tlm = (uint8_t)*(uint32_t*)value; break;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	b2da      	uxtb	r2, r3
 800a186:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <cfg_NodeRcVarSet+0x88>)
 800a188:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 800a18c:	e002      	b.n	800a194 <cfg_NodeRcVarSet+0x78>
		case RC_AXIS_L_Y:			break;
		case RC_AXIS_R_X:			break;
		case RC_AXIS_R_Y:			break;
		case RC_BUT_L:				break;
		case RC_BUT_R:				break;
		default: return CFG_ERROR_VARID;
 800a18e:	2302      	movs	r3, #2
 800a190:	e001      	b.n	800a196 <cfg_NodeRcVarSet+0x7a>
		case RC_RX_PKT_CNT:			break;
 800a192:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000e68 	.word	0x20000e68

0800a1a8 <sens_Timer>:
void sens_SetAccelRange(uint8_t range);

volatile sens_infoTypeDef sens_info;

void sens_Timer(uint32_t res)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
#ifdef NO_SENS
	return;
#endif //NO_SENS

	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
 800a1b4:	e010      	b.n	800a1d8 <sens_Timer+0x30>
	{
		if( sens_info.timer[i] > 0 ){
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	4a0c      	ldr	r2, [pc, #48]	; (800a1ec <sens_Timer+0x44>)
 800a1ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d007      	beq.n	800a1d2 <sens_Timer+0x2a>
			sens_info.timer[i]--;
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	4a09      	ldr	r2, [pc, #36]	; (800a1ec <sens_Timer+0x44>)
 800a1c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a1ca:	3a01      	subs	r2, #1
 800a1cc:	4907      	ldr	r1, [pc, #28]	; (800a1ec <sens_Timer+0x44>)
 800a1ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SENS_TMR_NUM; i++ )
 800a1d2:	7bfb      	ldrb	r3, [r7, #15]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	73fb      	strb	r3, [r7, #15]
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0eb      	beq.n	800a1b6 <sens_Timer+0xe>
		}
	}

	return;
 800a1de:	bf00      	nop
}
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20001020 	.word	0x20001020

0800a1f0 <sens_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_InitTask()
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
#ifdef NO_SENS
	return;
#endif //NO_SENS

	//Init state
	sens_info.state = 0;
 800a1f4:	4b06      	ldr	r3, [pc, #24]	; (800a210 <sens_InitTask+0x20>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	711a      	strb	r2, [r3, #4]
	HAL_Delay(1000);
 800a1fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a1fe:	f001 fb83 	bl	800b908 <HAL_Delay>
	sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 800a202:	2180      	movs	r1, #128	; 0x80
 800a204:	206b      	movs	r0, #107	; 0x6b
 800a206:	f000 faaf 	bl	800a768 <sens_WriteByte>

	return;
 800a20a:	bf00      	nop
}
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20001020 	.word	0x20001020

0800a214 <sens_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void sens_Task(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af02      	add	r7, sp, #8
#endif //NO_SENS

	static uint16_t t_cal_step = 0;

	//Reset
	if( sens_info.state == 0 )
 800a21a:	4b5f      	ldr	r3, [pc, #380]	; (800a398 <sens_Task+0x184>)
 800a21c:	791b      	ldrb	r3, [r3, #4]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d116      	bne.n	800a252 <sens_Task+0x3e>
	{
		sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x80);
 800a224:	2180      	movs	r1, #128	; 0x80
 800a226:	206b      	movs	r0, #107	; 0x6b
 800a228:	f000 fa9e 	bl	800a768 <sens_WriteByte>
		sens_info.timer[SENS_TMR_PROC] = 5000;
 800a22c:	4b5a      	ldr	r3, [pc, #360]	; (800a398 <sens_Task+0x184>)
 800a22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a232:	601a      	str	r2, [r3, #0]
		sens_info.state = 1;
 800a234:	4b58      	ldr	r3, [pc, #352]	; (800a398 <sens_Task+0x184>)
 800a236:	2201      	movs	r2, #1
 800a238:	711a      	strb	r2, [r3, #4]
		leds_setBlink(LED_SIM_BLUE, 50, 1000, 0, 0, 1);
 800a23a:	2301      	movs	r3, #1
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	2300      	movs	r3, #0
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a248:	2132      	movs	r1, #50	; 0x32
 800a24a:	2000      	movs	r0, #0
 800a24c:	f7fc ffec 	bl	8007228 <leds_setBlink>
			sens_info.timer[SENS_TMR_PROC] = 1;
			sens_UpdData();
		}
	}

	return;
 800a250:	e09e      	b.n	800a390 <sens_Task+0x17c>
	else if( sens_info.state == 1 )
 800a252:	4b51      	ldr	r3, [pc, #324]	; (800a398 <sens_Task+0x184>)
 800a254:	791b      	ldrb	r3, [r3, #4]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d110      	bne.n	800a27e <sens_Task+0x6a>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a25c:	4b4e      	ldr	r3, [pc, #312]	; (800a398 <sens_Task+0x184>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 8095 	bne.w	800a390 <sens_Task+0x17c>
			sens_WriteByte(SENS_REG_PWR_MGMT_1, 0x00);
 800a266:	2100      	movs	r1, #0
 800a268:	206b      	movs	r0, #107	; 0x6b
 800a26a:	f000 fa7d 	bl	800a768 <sens_WriteByte>
			sens_info.timer[SENS_TMR_PROC] = 1000;
 800a26e:	4b4a      	ldr	r3, [pc, #296]	; (800a398 <sens_Task+0x184>)
 800a270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a274:	601a      	str	r2, [r3, #0]
			sens_info.state = 2;
 800a276:	4b48      	ldr	r3, [pc, #288]	; (800a398 <sens_Task+0x184>)
 800a278:	2202      	movs	r2, #2
 800a27a:	711a      	strb	r2, [r3, #4]
	return;
 800a27c:	e088      	b.n	800a390 <sens_Task+0x17c>
	else if( sens_info.state == 2 )
 800a27e:	4b46      	ldr	r3, [pc, #280]	; (800a398 <sens_Task+0x184>)
 800a280:	791b      	ldrb	r3, [r3, #4]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d129      	bne.n	800a2dc <sens_Task+0xc8>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a288:	4b43      	ldr	r3, [pc, #268]	; (800a398 <sens_Task+0x184>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d17f      	bne.n	800a390 <sens_Task+0x17c>
			sens_SetGyroRange(GYRO_RANGE_250DPS);
 800a290:	2000      	movs	r0, #0
 800a292:	f000 f8c3 	bl	800a41c <sens_SetGyroRange>
			sens_SetAccelRange(ACCEL_RANGE_2G);
 800a296:	2000      	movs	r0, #0
 800a298:	f000 f8d4 	bl	800a444 <sens_SetAccelRange>
			sens_WriteByte(SENS_REG_CONFIG, 0x00);
 800a29c:	2100      	movs	r1, #0
 800a29e:	201a      	movs	r0, #26
 800a2a0:	f000 fa62 	bl	800a768 <sens_WriteByte>
			t_cal_step = SENS_CAL_STEP_NUM;
 800a2a4:	4b3d      	ldr	r3, [pc, #244]	; (800a39c <sens_Task+0x188>)
 800a2a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2aa:	801a      	strh	r2, [r3, #0]
			sens_info.gyro_x_bias = 0.0;
 800a2ac:	4b3a      	ldr	r3, [pc, #232]	; (800a398 <sens_Task+0x184>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	615a      	str	r2, [r3, #20]
			sens_info.gyro_y_bias = 0.0;
 800a2b2:	4b39      	ldr	r3, [pc, #228]	; (800a398 <sens_Task+0x184>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	619a      	str	r2, [r3, #24]
			sens_info.gyro_z_bias = 0.0;
 800a2b8:	4b37      	ldr	r3, [pc, #220]	; (800a398 <sens_Task+0x184>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	61da      	str	r2, [r3, #28]
			sens_info.state = 3;
 800a2be:	4b36      	ldr	r3, [pc, #216]	; (800a398 <sens_Task+0x184>)
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	711a      	strb	r2, [r3, #4]
			leds_setBlink(LED_SIM_BLUE, 50, 500, 0, 0, 1);
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a2d2:	2132      	movs	r1, #50	; 0x32
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	f7fc ffa7 	bl	8007228 <leds_setBlink>
	return;
 800a2da:	e059      	b.n	800a390 <sens_Task+0x17c>
	else if( sens_info.state == 3 )
 800a2dc:	4b2e      	ldr	r3, [pc, #184]	; (800a398 <sens_Task+0x184>)
 800a2de:	791b      	ldrb	r3, [r3, #4]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d145      	bne.n	800a372 <sens_Task+0x15e>
		if( t_cal_step > 0 )
 800a2e6:	4b2d      	ldr	r3, [pc, #180]	; (800a39c <sens_Task+0x188>)
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00f      	beq.n	800a30e <sens_Task+0xfa>
			if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	; (800a398 <sens_Task+0x184>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d14c      	bne.n	800a390 <sens_Task+0x17c>
				sens_CalibrateStep();
 800a2f6:	f000 f855 	bl	800a3a4 <sens_CalibrateStep>
				t_cal_step -= 1;
 800a2fa:	4b28      	ldr	r3, [pc, #160]	; (800a39c <sens_Task+0x188>)
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	b29a      	uxth	r2, r3
 800a302:	4b26      	ldr	r3, [pc, #152]	; (800a39c <sens_Task+0x188>)
 800a304:	801a      	strh	r2, [r3, #0]
				sens_info.timer[SENS_TMR_PROC] = 1;
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <sens_Task+0x184>)
 800a308:	2201      	movs	r2, #1
 800a30a:	601a      	str	r2, [r3, #0]
	return;
 800a30c:	e040      	b.n	800a390 <sens_Task+0x17c>
			sens_info.gyro_x_bias /= SENS_CAL_STEP_NUM;
 800a30e:	4b22      	ldr	r3, [pc, #136]	; (800a398 <sens_Task+0x184>)
 800a310:	695b      	ldr	r3, [r3, #20]
 800a312:	4a23      	ldr	r2, [pc, #140]	; (800a3a0 <sens_Task+0x18c>)
 800a314:	fb82 1203 	smull	r1, r2, r2, r3
 800a318:	1192      	asrs	r2, r2, #6
 800a31a:	17db      	asrs	r3, r3, #31
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	4a1e      	ldr	r2, [pc, #120]	; (800a398 <sens_Task+0x184>)
 800a320:	6153      	str	r3, [r2, #20]
			sens_info.gyro_y_bias /= SENS_CAL_STEP_NUM;
 800a322:	4b1d      	ldr	r3, [pc, #116]	; (800a398 <sens_Task+0x184>)
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	4a1e      	ldr	r2, [pc, #120]	; (800a3a0 <sens_Task+0x18c>)
 800a328:	fb82 1203 	smull	r1, r2, r2, r3
 800a32c:	1192      	asrs	r2, r2, #6
 800a32e:	17db      	asrs	r3, r3, #31
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	4a19      	ldr	r2, [pc, #100]	; (800a398 <sens_Task+0x184>)
 800a334:	6193      	str	r3, [r2, #24]
			sens_info.gyro_z_bias /= SENS_CAL_STEP_NUM;
 800a336:	4b18      	ldr	r3, [pc, #96]	; (800a398 <sens_Task+0x184>)
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	4a19      	ldr	r2, [pc, #100]	; (800a3a0 <sens_Task+0x18c>)
 800a33c:	fb82 1203 	smull	r1, r2, r2, r3
 800a340:	1192      	asrs	r2, r2, #6
 800a342:	17db      	asrs	r3, r3, #31
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	4a14      	ldr	r2, [pc, #80]	; (800a398 <sens_Task+0x184>)
 800a348:	61d3      	str	r3, [r2, #28]
			sens_info.timer[SENS_TMR_PROC] = 1;
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <sens_Task+0x184>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
			sens_SetAccelRange(ACCEL_RANGE_8G);
 800a350:	2010      	movs	r0, #16
 800a352:	f000 f877 	bl	800a444 <sens_SetAccelRange>
			sens_info.state = 4;
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <sens_Task+0x184>)
 800a358:	2204      	movs	r2, #4
 800a35a:	711a      	strb	r2, [r3, #4]
			leds_setBlink(LED_SIM_BLUE, 50, 100, 0, 0, 1);
 800a35c:	2301      	movs	r3, #1
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	2300      	movs	r3, #0
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	2300      	movs	r3, #0
 800a366:	2264      	movs	r2, #100	; 0x64
 800a368:	2132      	movs	r1, #50	; 0x32
 800a36a:	2000      	movs	r0, #0
 800a36c:	f7fc ff5c 	bl	8007228 <leds_setBlink>
	return;
 800a370:	e00e      	b.n	800a390 <sens_Task+0x17c>
	else if( sens_info.state == 4 )
 800a372:	4b09      	ldr	r3, [pc, #36]	; (800a398 <sens_Task+0x184>)
 800a374:	791b      	ldrb	r3, [r3, #4]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d109      	bne.n	800a390 <sens_Task+0x17c>
		if( sens_info.timer[SENS_TMR_PROC] == 0 )
 800a37c:	4b06      	ldr	r3, [pc, #24]	; (800a398 <sens_Task+0x184>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d105      	bne.n	800a390 <sens_Task+0x17c>
			sens_info.timer[SENS_TMR_PROC] = 1;
 800a384:	4b04      	ldr	r3, [pc, #16]	; (800a398 <sens_Task+0x184>)
 800a386:	2201      	movs	r2, #1
 800a388:	601a      	str	r2, [r3, #0]
			sens_UpdData();
 800a38a:	f000 f871 	bl	800a470 <sens_UpdData>
	return;
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
}
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20001020 	.word	0x20001020
 800a39c:	20001074 	.word	0x20001074
 800a3a0:	10624dd3 	.word	0x10624dd3

0800a3a4 <sens_CalibrateStep>:

//
void sens_CalibrateStep()
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
    uint8_t buffer[6];
    int16_t gyroX, gyroY, gyroZ;
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_GYRO_XOUT_H, buffer, 6);
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	2206      	movs	r2, #6
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	2043      	movs	r0, #67	; 0x43
 800a3b2:	f000 f9f7 	bl	800a7a4 <sens_Read>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73fb      	strb	r3, [r7, #15]
	//HAL_I2C_Mem_Read(&hi2c1, SENS_I2C_ADDR, SENS_REG_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
	gyroX = (int16_t)(buffer[0] << 8 | buffer[1]);
 800a3ba:	783b      	ldrb	r3, [r7, #0]
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	b21a      	sxth	r2, r3
 800a3c0:	787b      	ldrb	r3, [r7, #1]
 800a3c2:	b21b      	sxth	r3, r3
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	81bb      	strh	r3, [r7, #12]
	gyroY = (int16_t)(buffer[2] << 8 | buffer[3]);
 800a3c8:	78bb      	ldrb	r3, [r7, #2]
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	b21a      	sxth	r2, r3
 800a3ce:	78fb      	ldrb	r3, [r7, #3]
 800a3d0:	b21b      	sxth	r3, r3
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	817b      	strh	r3, [r7, #10]
	gyroZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 800a3d6:	793b      	ldrb	r3, [r7, #4]
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	b21a      	sxth	r2, r3
 800a3dc:	797b      	ldrb	r3, [r7, #5]
 800a3de:	b21b      	sxth	r3, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	813b      	strh	r3, [r7, #8]

	sens_info.gyro_x_bias += gyroX;
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <sens_CalibrateStep+0x74>)
 800a3e6:	695a      	ldr	r2, [r3, #20]
 800a3e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <sens_CalibrateStep+0x74>)
 800a3f0:	6153      	str	r3, [r2, #20]
	sens_info.gyro_y_bias += gyroY;
 800a3f2:	4b09      	ldr	r3, [pc, #36]	; (800a418 <sens_CalibrateStep+0x74>)
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	4a06      	ldr	r2, [pc, #24]	; (800a418 <sens_CalibrateStep+0x74>)
 800a3fe:	6193      	str	r3, [r2, #24]
	sens_info.gyro_z_bias += gyroZ;
 800a400:	4b05      	ldr	r3, [pc, #20]	; (800a418 <sens_CalibrateStep+0x74>)
 800a402:	69da      	ldr	r2, [r3, #28]
 800a404:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a408:	4413      	add	r3, r2
 800a40a:	4a03      	ldr	r2, [pc, #12]	; (800a418 <sens_CalibrateStep+0x74>)
 800a40c:	61d3      	str	r3, [r2, #28]
}
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20001020 	.word	0x20001020

0800a41c <sens_SetGyroRange>:

//
void sens_SetGyroRange(uint8_t range)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	71fb      	strb	r3, [r7, #7]
	sens_info.gyro_range = range;
 800a426:	4a06      	ldr	r2, [pc, #24]	; (800a440 <sens_SetGyroRange+0x24>)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	7153      	strb	r3, [r2, #5]
	sens_WriteByte(SENS_REG_GYRO_CONFIG, range);
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	4619      	mov	r1, r3
 800a430:	201b      	movs	r0, #27
 800a432:	f000 f999 	bl	800a768 <sens_WriteByte>

    return;
 800a436:	bf00      	nop
}
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20001020 	.word	0x20001020

0800a444 <sens_SetAccelRange>:

//
void sens_SetAccelRange(uint8_t range)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
	sens_info.accel_range = range;
 800a44e:	4a06      	ldr	r2, [pc, #24]	; (800a468 <sens_SetAccelRange+0x24>)
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	f882 3020 	strb.w	r3, [r2, #32]
	sens_WriteByte(SENS_REG_ACCEL_CONFIG, range);
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	4619      	mov	r1, r3
 800a45a:	201c      	movs	r0, #28
 800a45c:	f000 f984 	bl	800a768 <sens_WriteByte>

    return;
 800a460:	bf00      	nop
}
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20001020 	.word	0x20001020
 800a46c:	00000000 	.word	0x00000000

0800a470 <sens_UpdData>:

//
HAL_StatusTypeDef sens_UpdData()
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08a      	sub	sp, #40	; 0x28
 800a474:	af00      	add	r7, sp, #0
    uint8_t buf[14];
    HAL_StatusTypeDef status;

    status = sens_Read(SENS_REG_ACCEL_XOUT_H, buf, 14);
 800a476:	463b      	mov	r3, r7
 800a478:	220e      	movs	r2, #14
 800a47a:	4619      	mov	r1, r3
 800a47c:	203b      	movs	r0, #59	; 0x3b
 800a47e:	f000 f991 	bl	800a7a4 <sens_Read>
 800a482:	4603      	mov	r3, r0
 800a484:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 800a486:	7ffb      	ldrb	r3, [r7, #31]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <sens_UpdData+0x20>
        return status;
 800a48c:	7ffb      	ldrb	r3, [r7, #31]
 800a48e:	e157      	b.n	800a740 <sens_UpdData+0x2d0>
    }

    int16_t raw_accel_x = (int16_t)(buf[0] << 8 | buf[1]);
 800a490:	783b      	ldrb	r3, [r7, #0]
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	b21a      	sxth	r2, r3
 800a496:	787b      	ldrb	r3, [r7, #1]
 800a498:	b21b      	sxth	r3, r3
 800a49a:	4313      	orrs	r3, r2
 800a49c:	83bb      	strh	r3, [r7, #28]
    int16_t raw_accel_y = (int16_t)(buf[2] << 8 | buf[3]);
 800a49e:	78bb      	ldrb	r3, [r7, #2]
 800a4a0:	021b      	lsls	r3, r3, #8
 800a4a2:	b21a      	sxth	r2, r3
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	837b      	strh	r3, [r7, #26]
    int16_t raw_accel_z = (int16_t)(buf[4] << 8 | buf[5]);
 800a4ac:	793b      	ldrb	r3, [r7, #4]
 800a4ae:	021b      	lsls	r3, r3, #8
 800a4b0:	b21a      	sxth	r2, r3
 800a4b2:	797b      	ldrb	r3, [r7, #5]
 800a4b4:	b21b      	sxth	r3, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	833b      	strh	r3, [r7, #24]
    int16_t raw_temp = (int16_t)(buf[6] << 8 | buf[7]);
 800a4ba:	79bb      	ldrb	r3, [r7, #6]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	b21a      	sxth	r2, r3
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	b21b      	sxth	r3, r3
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_x = (int16_t)(buf[8] << 8 | buf[9]);
 800a4c8:	7a3b      	ldrb	r3, [r7, #8]
 800a4ca:	021b      	lsls	r3, r3, #8
 800a4cc:	b21a      	sxth	r2, r3
 800a4ce:	7a7b      	ldrb	r3, [r7, #9]
 800a4d0:	b21b      	sxth	r3, r3
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	82bb      	strh	r3, [r7, #20]
    int16_t raw_gyro_y = (int16_t)(buf[10] << 8 | buf[11]);
 800a4d6:	7abb      	ldrb	r3, [r7, #10]
 800a4d8:	021b      	lsls	r3, r3, #8
 800a4da:	b21a      	sxth	r2, r3
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	b21b      	sxth	r3, r3
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	827b      	strh	r3, [r7, #18]
    int16_t raw_gyro_z = (int16_t)(buf[12] << 8 | buf[13]);
 800a4e4:	7b3b      	ldrb	r3, [r7, #12]
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	b21a      	sxth	r2, r3
 800a4ea:	7b7b      	ldrb	r3, [r7, #13]
 800a4ec:	b21b      	sxth	r3, r3
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	823b      	strh	r3, [r7, #16]

    float gyro_sens;
    float accel_sens;

    switch (sens_info.gyro_range) {
 800a4f2:	4b97      	ldr	r3, [pc, #604]	; (800a750 <sens_UpdData+0x2e0>)
 800a4f4:	795b      	ldrb	r3, [r3, #5]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2b18      	cmp	r3, #24
 800a4fa:	d841      	bhi.n	800a580 <sens_UpdData+0x110>
 800a4fc:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <sens_UpdData+0x94>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a569 	.word	0x0800a569
 800a508:	0800a581 	.word	0x0800a581
 800a50c:	0800a581 	.word	0x0800a581
 800a510:	0800a581 	.word	0x0800a581
 800a514:	0800a581 	.word	0x0800a581
 800a518:	0800a581 	.word	0x0800a581
 800a51c:	0800a581 	.word	0x0800a581
 800a520:	0800a581 	.word	0x0800a581
 800a524:	0800a56f 	.word	0x0800a56f
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	0800a581 	.word	0x0800a581
 800a530:	0800a581 	.word	0x0800a581
 800a534:	0800a581 	.word	0x0800a581
 800a538:	0800a581 	.word	0x0800a581
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a581 	.word	0x0800a581
 800a544:	0800a575 	.word	0x0800a575
 800a548:	0800a581 	.word	0x0800a581
 800a54c:	0800a581 	.word	0x0800a581
 800a550:	0800a581 	.word	0x0800a581
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a57b 	.word	0x0800a57b
        case GYRO_RANGE_250DPS:
            gyro_sens = GYRO_SENS_250DPS;
 800a568:	4b7a      	ldr	r3, [pc, #488]	; (800a754 <sens_UpdData+0x2e4>)
 800a56a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a56c:	e008      	b.n	800a580 <sens_UpdData+0x110>
        case GYRO_RANGE_500DPS:
            gyro_sens = GYRO_SENS_500DPS;
 800a56e:	4b7a      	ldr	r3, [pc, #488]	; (800a758 <sens_UpdData+0x2e8>)
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a572:	e005      	b.n	800a580 <sens_UpdData+0x110>
        case GYRO_RANGE_1000DPS:
            gyro_sens = GYRO_SENS_1000DPS;
 800a574:	4b79      	ldr	r3, [pc, #484]	; (800a75c <sens_UpdData+0x2ec>)
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a578:	e002      	b.n	800a580 <sens_UpdData+0x110>
        case GYRO_RANGE_2000DPS:
            gyro_sens = GYRO_SENS_2000DPS;
 800a57a:	4b79      	ldr	r3, [pc, #484]	; (800a760 <sens_UpdData+0x2f0>)
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a57e:	bf00      	nop
    }
    switch (sens_info.accel_range) {
 800a580:	4b73      	ldr	r3, [pc, #460]	; (800a750 <sens_UpdData+0x2e0>)
 800a582:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b18      	cmp	r3, #24
 800a58a:	d845      	bhi.n	800a618 <sens_UpdData+0x1a8>
 800a58c:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <sens_UpdData+0x124>)
 800a58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a592:	bf00      	nop
 800a594:	0800a5f9 	.word	0x0800a5f9
 800a598:	0800a619 	.word	0x0800a619
 800a59c:	0800a619 	.word	0x0800a619
 800a5a0:	0800a619 	.word	0x0800a619
 800a5a4:	0800a619 	.word	0x0800a619
 800a5a8:	0800a619 	.word	0x0800a619
 800a5ac:	0800a619 	.word	0x0800a619
 800a5b0:	0800a619 	.word	0x0800a619
 800a5b4:	0800a601 	.word	0x0800a601
 800a5b8:	0800a619 	.word	0x0800a619
 800a5bc:	0800a619 	.word	0x0800a619
 800a5c0:	0800a619 	.word	0x0800a619
 800a5c4:	0800a619 	.word	0x0800a619
 800a5c8:	0800a619 	.word	0x0800a619
 800a5cc:	0800a619 	.word	0x0800a619
 800a5d0:	0800a619 	.word	0x0800a619
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a619 	.word	0x0800a619
 800a5dc:	0800a619 	.word	0x0800a619
 800a5e0:	0800a619 	.word	0x0800a619
 800a5e4:	0800a619 	.word	0x0800a619
 800a5e8:	0800a619 	.word	0x0800a619
 800a5ec:	0800a619 	.word	0x0800a619
 800a5f0:	0800a619 	.word	0x0800a619
 800a5f4:	0800a611 	.word	0x0800a611
        case ACCEL_RANGE_2G:
            accel_sens = ACCEL_SENS_2G;
 800a5f8:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 800a5fc:	623b      	str	r3, [r7, #32]
            break;
 800a5fe:	e00b      	b.n	800a618 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_4G:
            accel_sens = ACCEL_SENS_4G;
 800a600:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 800a604:	623b      	str	r3, [r7, #32]
            break;
 800a606:	e007      	b.n	800a618 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_8G:
            accel_sens = ACCEL_SENS_8G;
 800a608:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800a60c:	623b      	str	r3, [r7, #32]
            break;
 800a60e:	e003      	b.n	800a618 <sens_UpdData+0x1a8>
        case ACCEL_RANGE_16G:
            accel_sens = ACCEL_SENS_16G;
 800a610:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800a614:	623b      	str	r3, [r7, #32]
            break;
 800a616:	bf00      	nop
    }

    sens_info.accel_x = (float)raw_accel_x / accel_sens; // g
 800a618:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a61c:	ee07 3a90 	vmov	s15, r3
 800a620:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a624:	ed97 7a08 	vldr	s14, [r7, #32]
 800a628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a62c:	4b48      	ldr	r3, [pc, #288]	; (800a750 <sens_UpdData+0x2e0>)
 800a62e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    sens_info.accel_y = (float)raw_accel_y / accel_sens; // g
 800a632:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a63e:	ed97 7a08 	vldr	s14, [r7, #32]
 800a642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a646:	4b42      	ldr	r3, [pc, #264]	; (800a750 <sens_UpdData+0x2e0>)
 800a648:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    sens_info.accel_z = (float)raw_accel_z / accel_sens; // g
 800a64c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a650:	ee07 3a90 	vmov	s15, r3
 800a654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a658:	ed97 7a08 	vldr	s14, [r7, #32]
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	4b3b      	ldr	r3, [pc, #236]	; (800a750 <sens_UpdData+0x2e0>)
 800a662:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    sens_info.gyro_x = ((float)raw_gyro_x / gyro_sens) - ((float)sens_info.gyro_x_bias  / gyro_sens); // °/s
 800a666:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a66a:	ee07 3a90 	vmov	s15, r3
 800a66e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a67a:	4b35      	ldr	r3, [pc, #212]	; (800a750 <sens_UpdData+0x2e0>)
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a686:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a68a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a68e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a692:	4b2f      	ldr	r3, [pc, #188]	; (800a750 <sens_UpdData+0x2e0>)
 800a694:	edc3 7a02 	vstr	s15, [r3, #8]
    sens_info.gyro_y = ((float)raw_gyro_y / gyro_sens) - ((float)sens_info.gyro_y_bias  / gyro_sens); // °/s
 800a698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a69c:	ee07 3a90 	vmov	s15, r3
 800a6a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ac:	4b28      	ldr	r3, [pc, #160]	; (800a750 <sens_UpdData+0x2e0>)
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a6b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a6bc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a6c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6c4:	4b22      	ldr	r3, [pc, #136]	; (800a750 <sens_UpdData+0x2e0>)
 800a6c6:	edc3 7a03 	vstr	s15, [r3, #12]
    sens_info.gyro_z = ((float)raw_gyro_z / gyro_sens) - ((float)sens_info.gyro_z_bias  / gyro_sens); // °/s
 800a6ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6de:	4b1c      	ldr	r3, [pc, #112]	; (800a750 <sens_UpdData+0x2e0>)
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a6ea:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a6ee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a6f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6f6:	4b16      	ldr	r3, [pc, #88]	; (800a750 <sens_UpdData+0x2e0>)
 800a6f8:	edc3 7a04 	vstr	s15, [r3, #16]
    sens_info.temperature = ((float)raw_temp / 340.0) + 36.53; // °C
 800a6fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a700:	ee07 3a90 	vmov	s15, r3
 800a704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a708:	ee17 0a90 	vmov	r0, s15
 800a70c:	f7f5 fed0 	bl	80004b0 <__aeabi_f2d>
 800a710:	f04f 0200 	mov.w	r2, #0
 800a714:	4b13      	ldr	r3, [pc, #76]	; (800a764 <sens_UpdData+0x2f4>)
 800a716:	f7f6 f84d 	bl	80007b4 <__aeabi_ddiv>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4610      	mov	r0, r2
 800a720:	4619      	mov	r1, r3
 800a722:	a309      	add	r3, pc, #36	; (adr r3, 800a748 <sens_UpdData+0x2d8>)
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f7f5 fd64 	bl	80001f4 <__adddf3>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4610      	mov	r0, r2
 800a732:	4619      	mov	r1, r3
 800a734:	f7f6 f9c4 	bl	8000ac0 <__aeabi_d2f>
 800a738:	4603      	mov	r3, r0
 800a73a:	4a05      	ldr	r2, [pc, #20]	; (800a750 <sens_UpdData+0x2e0>)
 800a73c:	6313      	str	r3, [r2, #48]	; 0x30

    return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3728      	adds	r7, #40	; 0x28
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	0a3d70a4 	.word	0x0a3d70a4
 800a74c:	404243d7 	.word	0x404243d7
 800a750:	20001020 	.word	0x20001020
 800a754:	43030000 	.word	0x43030000
 800a758:	42830000 	.word	0x42830000
 800a75c:	42033333 	.word	0x42033333
 800a760:	41833333 	.word	0x41833333
 800a764:	40754000 	.word	0x40754000

0800a768 <sens_WriteByte>:

void sens_WriteByte(uint8_t reg, uint8_t data)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af04      	add	r7, sp, #16
 800a76e:	4603      	mov	r3, r0
 800a770:	460a      	mov	r2, r1
 800a772:	71fb      	strb	r3, [r7, #7]
 800a774:	4613      	mov	r3, r2
 800a776:	71bb      	strb	r3, [r7, #6]
	volatile HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a780:	9302      	str	r3, [sp, #8]
 800a782:	2301      	movs	r3, #1
 800a784:	9301      	str	r3, [sp, #4]
 800a786:	1dbb      	adds	r3, r7, #6
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	2301      	movs	r3, #1
 800a78c:	21d0      	movs	r1, #208	; 0xd0
 800a78e:	4804      	ldr	r0, [pc, #16]	; (800a7a0 <sens_WriteByte+0x38>)
 800a790:	f002 fcdc 	bl	800d14c <HAL_I2C_Mem_Write>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]

    return;
 800a798:	bf00      	nop
}
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20000b1c 	.word	0x20000b1c

0800a7a4 <sens_Read>:

HAL_StatusTypeDef sens_Read(uint8_t reg, uint8_t* data, uint16_t size)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af04      	add	r7, sp, #16
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&HAL_MEMS_I2C, SENS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 1000);
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	88bb      	ldrh	r3, [r7, #4]
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	21d0      	movs	r1, #208	; 0xd0
 800a7ca:	4807      	ldr	r0, [pc, #28]	; (800a7e8 <sens_Read+0x44>)
 800a7cc:	f002 fdb8 	bl	800d340 <HAL_I2C_Mem_Read>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <sens_Read+0x3a>
		return status;
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	e000      	b.n	800a7e0 <sens_Read+0x3c>
	}

    return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20000b1c 	.word	0x20000b1c

0800a7ec <cfg_NodeSensVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeSensVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800a7fa:	89fb      	ldrh	r3, [r7, #14]
 800a7fc:	2b0c      	cmp	r3, #12
 800a7fe:	d844      	bhi.n	800a88a <cfg_NodeSensVarProp+0x9e>
 800a800:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <cfg_NodeSensVarProp+0x1c>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a83d 	.word	0x0800a83d
 800a80c:	0800a843 	.word	0x0800a843
 800a810:	0800a849 	.word	0x0800a849
 800a814:	0800a84f 	.word	0x0800a84f
 800a818:	0800a855 	.word	0x0800a855
 800a81c:	0800a85b 	.word	0x0800a85b
 800a820:	0800a861 	.word	0x0800a861
 800a824:	0800a867 	.word	0x0800a867
 800a828:	0800a86d 	.word	0x0800a86d
 800a82c:	0800a873 	.word	0x0800a873
 800a830:	0800a879 	.word	0x0800a879
 800a834:	0800a87f 	.word	0x0800a87f
 800a838:	0800a885 	.word	0x0800a885
	{
		case SENS_STATE:		str = "State"; break;
 800a83c:	4b4e      	ldr	r3, [pc, #312]	; (800a978 <cfg_NodeSensVarProp+0x18c>)
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	e025      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_X:		str = "Gyro X"; break;
 800a842:	4b4e      	ldr	r3, [pc, #312]	; (800a97c <cfg_NodeSensVarProp+0x190>)
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	e022      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Y:		str = "Gyro Y"; break;
 800a848:	4b4d      	ldr	r3, [pc, #308]	; (800a980 <cfg_NodeSensVarProp+0x194>)
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e01f      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_GYRO_Z:		str = "Gyro Z"; break;
 800a84e:	4b4d      	ldr	r3, [pc, #308]	; (800a984 <cfg_NodeSensVarProp+0x198>)
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	e01c      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_X:		str = "Accel X"; break;
 800a854:	4b4c      	ldr	r3, [pc, #304]	; (800a988 <cfg_NodeSensVarProp+0x19c>)
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	e019      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Y:		str = "Accel Y"; break;
 800a85a:	4b4c      	ldr	r3, [pc, #304]	; (800a98c <cfg_NodeSensVarProp+0x1a0>)
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e016      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_ACCEL_Z:		str = "Accel Z"; break;
 800a860:	4b4b      	ldr	r3, [pc, #300]	; (800a990 <cfg_NodeSensVarProp+0x1a4>)
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	e013      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_TEMPERATURE:	str = "Temperature"; break;
 800a866:	4b4b      	ldr	r3, [pc, #300]	; (800a994 <cfg_NodeSensVarProp+0x1a8>)
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	e010      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_SAT_NUM:		str = "GNSS sat number"; break;
 800a86c:	4b4a      	ldr	r3, [pc, #296]	; (800a998 <cfg_NodeSensVarProp+0x1ac>)
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	e00d      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_LATITUDE:		str = "GNSS latitude"; break;
 800a872:	4b4a      	ldr	r3, [pc, #296]	; (800a99c <cfg_NodeSensVarProp+0x1b0>)
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e00a      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_LONGITUDE:	str = "GNSS longitude"; break;
 800a878:	4b49      	ldr	r3, [pc, #292]	; (800a9a0 <cfg_NodeSensVarProp+0x1b4>)
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e007      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_ALTTITUDE:	str = "GNSS altitude"; break;
 800a87e:	4b49      	ldr	r3, [pc, #292]	; (800a9a4 <cfg_NodeSensVarProp+0x1b8>)
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	e004      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		case SENS_SPEED:		str = "GNSS speed"; break;
 800a884:	4b48      	ldr	r3, [pc, #288]	; (800a9a8 <cfg_NodeSensVarProp+0x1bc>)
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	e001      	b.n	800a88e <cfg_NodeSensVarProp+0xa2>
		default: return CFG_ERROR_VARID;
 800a88a:	2302      	movs	r3, #2
 800a88c:	e06d      	b.n	800a96a <cfg_NodeSensVarProp+0x17e>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00f      	beq.n	800a8b4 <cfg_NodeSensVarProp+0xc8>
 800a894:	e007      	b.n	800a8a6 <cfg_NodeSensVarProp+0xba>
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	1c53      	adds	r3, r2, #1
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	1c59      	adds	r1, r3, #1
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	701a      	strb	r2, [r3, #0]
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1f3      	bne.n	800a896 <cfg_NodeSensVarProp+0xaa>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d056      	beq.n	800a968 <cfg_NodeSensVarProp+0x17c>
 800a8ba:	89fb      	ldrh	r3, [r7, #14]
 800a8bc:	2b0c      	cmp	r3, #12
 800a8be:	d851      	bhi.n	800a964 <cfg_NodeSensVarProp+0x178>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <cfg_NodeSensVarProp+0xdc>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8fd 	.word	0x0800a8fd
 800a8cc:	0800a905 	.word	0x0800a905
 800a8d0:	0800a90d 	.word	0x0800a90d
 800a8d4:	0800a915 	.word	0x0800a915
 800a8d8:	0800a91d 	.word	0x0800a91d
 800a8dc:	0800a925 	.word	0x0800a925
 800a8e0:	0800a92d 	.word	0x0800a92d
 800a8e4:	0800a935 	.word	0x0800a935
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a945 	.word	0x0800a945
 800a8f0:	0800a94d 	.word	0x0800a94d
 800a8f4:	0800a955 	.word	0x0800a955
 800a8f8:	0800a95d 	.word	0x0800a95d
	{
		case SENS_STATE:		*prop = CFG_VAR_TYPE_UINT; break;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	801a      	strh	r2, [r3, #0]
 800a902:	e031      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2214      	movs	r2, #20
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e02d      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2214      	movs	r2, #20
 800a910:	801a      	strh	r2, [r3, #0]
 800a912:	e029      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_GYRO_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2214      	movs	r2, #20
 800a918:	801a      	strh	r2, [r3, #0]
 800a91a:	e025      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_X:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2214      	movs	r2, #20
 800a920:	801a      	strh	r2, [r3, #0]
 800a922:	e021      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Y:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2214      	movs	r2, #20
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	e01d      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_ACCEL_Z:		*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2214      	movs	r2, #20
 800a930:	801a      	strh	r2, [r3, #0]
 800a932:	e019      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_TEMPERATURE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2214      	movs	r2, #20
 800a938:	801a      	strh	r2, [r3, #0]
 800a93a:	e015      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_SAT_NUM:		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2212      	movs	r2, #18
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	e011      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_LATITUDE:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2211      	movs	r2, #17
 800a948:	801a      	strh	r2, [r3, #0]
 800a94a:	e00d      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_LONGITUDE:	*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2211      	movs	r2, #17
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	e009      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_ALTTITUDE:	*prop = CFG_VAR_TYPE_REAL | CFG_VAR_PROP_READONLY; break;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2214      	movs	r2, #20
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	e005      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		case SENS_SPEED:		*prop = CFG_VAR_TYPE_INT | CFG_VAR_PROP_READONLY; break;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2211      	movs	r2, #17
 800a960:	801a      	strh	r2, [r3, #0]
 800a962:	e001      	b.n	800a968 <cfg_NodeSensVarProp+0x17c>
		default: return CFG_ERROR_VARID;
 800a964:	2302      	movs	r3, #2
 800a966:	e000      	b.n	800a96a <cfg_NodeSensVarProp+0x17e>
	}
	return CFG_ERROR_NONE;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	080169b8 	.word	0x080169b8
 800a97c:	080169c0 	.word	0x080169c0
 800a980:	080169c8 	.word	0x080169c8
 800a984:	080169d0 	.word	0x080169d0
 800a988:	080169d8 	.word	0x080169d8
 800a98c:	080169e0 	.word	0x080169e0
 800a990:	080169e8 	.word	0x080169e8
 800a994:	080169f0 	.word	0x080169f0
 800a998:	080169fc 	.word	0x080169fc
 800a99c:	08016a0c 	.word	0x08016a0c
 800a9a0:	08016a1c 	.word	0x08016a1c
 800a9a4:	08016a2c 	.word	0x08016a2c
 800a9a8:	08016a3c 	.word	0x08016a3c

0800a9ac <cfg_NodeSensVarGet>:

uint16_t cfg_NodeSensVarGet(uint16_t varid, void *value)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d068      	beq.n	800aa90 <cfg_NodeSensVarGet+0xe4>
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	2b0c      	cmp	r3, #12
 800a9c2:	d863      	bhi.n	800aa8c <cfg_NodeSensVarGet+0xe0>
 800a9c4:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <cfg_NodeSensVarGet+0x20>)
 800a9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ca:	bf00      	nop
 800a9cc:	0800aa01 	.word	0x0800aa01
 800a9d0:	0800aa0f 	.word	0x0800aa0f
 800a9d4:	0800aa19 	.word	0x0800aa19
 800a9d8:	0800aa23 	.word	0x0800aa23
 800a9dc:	0800aa2d 	.word	0x0800aa2d
 800a9e0:	0800aa37 	.word	0x0800aa37
 800a9e4:	0800aa41 	.word	0x0800aa41
 800a9e8:	0800aa4b 	.word	0x0800aa4b
 800a9ec:	0800aa55 	.word	0x0800aa55
 800a9f0:	0800aa65 	.word	0x0800aa65
 800a9f4:	0800aa6f 	.word	0x0800aa6f
 800a9f8:	0800aa79 	.word	0x0800aa79
 800a9fc:	0800aa83 	.word	0x0800aa83
	{
		case SENS_STATE:		*(uint32_t*)value = sens_info.state; break;
 800aa00:	4b27      	ldr	r3, [pc, #156]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa02:	791b      	ldrb	r3, [r3, #4]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	461a      	mov	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e040      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_X:		*(float*)value = sens_info.gyro_x; break;
 800aa0e:	4b24      	ldr	r3, [pc, #144]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	e03b      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Y:		*(float*)value = sens_info.gyro_y; break;
 800aa18:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	e036      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_GYRO_Z:		*(float*)value = sens_info.gyro_z; break;
 800aa22:	4b1f      	ldr	r3, [pc, #124]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa24:	691a      	ldr	r2, [r3, #16]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	e031      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_X:		*(float*)value = sens_info.accel_x; break;
 800aa2c:	4b1c      	ldr	r3, [pc, #112]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e02c      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Y:		*(float*)value = sens_info.accel_y; break;
 800aa36:	4b1a      	ldr	r3, [pc, #104]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	e027      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_ACCEL_Z:		*(float*)value = sens_info.accel_z; break;
 800aa40:	4b17      	ldr	r3, [pc, #92]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e022      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_TEMPERATURE:	*(float*)value = sens_info.temperature; break;
 800aa4a:	4b15      	ldr	r3, [pc, #84]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	e01d      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_SAT_NUM:		*(int32_t*)value = sens_info.sat_num; break;
 800aa54:	4b12      	ldr	r3, [pc, #72]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	e015      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_LATITUDE:		*(int32_t*)value = sens_info.latitude; break;
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e010      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_LONGITUDE:	*(int32_t*)value = sens_info.longitude; break;
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	e00b      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_ALTTITUDE:	*(float*)value = sens_info.altitude; break;
 800aa78:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	e006      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		case SENS_SPEED:		*(int32_t*)value = sens_info.speed; break;
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <cfg_NodeSensVarGet+0xf4>)
 800aa84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	e001      	b.n	800aa90 <cfg_NodeSensVarGet+0xe4>
		default: return CFG_ERROR_VARID;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	e000      	b.n	800aa92 <cfg_NodeSensVarGet+0xe6>
	}
	return CFG_ERROR_NONE;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20001020 	.word	0x20001020

0800aaa4 <cfg_NodeSensVarSet>:

uint16_t cfg_NodeSensVarSet(uint16_t varid, void *value)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <cfg_NodeSensVarSet+0x28>
 800aab6:	88fb      	ldrh	r3, [r7, #6]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d105      	bne.n	800aac8 <cfg_NodeSensVarSet+0x24>
	{
		case SENS_STATE:		sens_info.state = (uint8_t)*(uint32_t*)value; break;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	4b06      	ldr	r3, [pc, #24]	; (800aadc <cfg_NodeSensVarSet+0x38>)
 800aac4:	711a      	strb	r2, [r3, #4]
 800aac6:	e001      	b.n	800aacc <cfg_NodeSensVarSet+0x28>
		default: return CFG_ERROR_VARID;
 800aac8:	2302      	movs	r3, #2
 800aaca:	e000      	b.n	800aace <cfg_NodeSensVarSet+0x2a>
	}
	return CFG_ERROR_NONE;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20001020 	.word	0x20001020

0800aae0 <servo_Timer>:

uint16_t servo_angToPWM(uint16_t ang);
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);

void servo_Timer(uint32_t res)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
 800aaec:	e014      	b.n	800ab18 <servo_Timer+0x38>
	{
		if( servo_info.timer[i] > 0 ){
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	4a0e      	ldr	r2, [pc, #56]	; (800ab2c <servo_Timer+0x4c>)
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00a      	beq.n	800ab12 <servo_Timer+0x32>
			servo_info.timer[i]--;
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	490b      	ldr	r1, [pc, #44]	; (800ab2c <servo_Timer+0x4c>)
 800ab00:	f103 020c 	add.w	r2, r3, #12
 800ab04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab08:	3a01      	subs	r2, #1
 800ab0a:	4908      	ldr	r1, [pc, #32]	; (800ab2c <servo_Timer+0x4c>)
 800ab0c:	330c      	adds	r3, #12
 800ab0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < SERVO_TMR_NUM; i++ )
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	3301      	adds	r3, #1
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0e7      	beq.n	800aaee <servo_Timer+0xe>
		}
	}

	return;
 800ab1e:	bf00      	nop
}
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	20001078 	.word	0x20001078

0800ab30 <servo_InitTask>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_InitTask()
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	servo_info.servos[SERVO_ROLL].tim = &htim3;
 800ab36:	4b3d      	ldr	r3, [pc, #244]	; (800ac2c <servo_InitTask+0xfc>)
 800ab38:	4a3d      	ldr	r2, [pc, #244]	; (800ac30 <servo_InitTask+0x100>)
 800ab3a:	601a      	str	r2, [r3, #0]
	servo_info.servos[SERVO_ROLL].timch = TIM_CHANNEL_1;
 800ab3c:	4b3b      	ldr	r3, [pc, #236]	; (800ac2c <servo_InitTask+0xfc>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	605a      	str	r2, [r3, #4]
	servo_info.servos[SERVO_ROLL].cur_ang = 0;
 800ab42:	4b3a      	ldr	r3, [pc, #232]	; (800ac2c <servo_InitTask+0xfc>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	819a      	strh	r2, [r3, #12]
	servo_info.servos[SERVO_ROLL].cur_pwm = 0;
 800ab48:	4b38      	ldr	r3, [pc, #224]	; (800ac2c <servo_InitTask+0xfc>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	815a      	strh	r2, [r3, #10]
	servo_info.servos[SERVO_ROLL].cur_perc = 0;
 800ab4e:	4b37      	ldr	r3, [pc, #220]	; (800ac2c <servo_InitTask+0xfc>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	739a      	strb	r2, [r3, #14]
	servo_info.servos[SERVO_ROLL].min_ang = 50;
 800ab54:	4b35      	ldr	r3, [pc, #212]	; (800ac2c <servo_InitTask+0xfc>)
 800ab56:	2232      	movs	r2, #50	; 0x32
 800ab58:	821a      	strh	r2, [r3, #16]
	servo_info.servos[SERVO_ROLL].center_ang = 105;
 800ab5a:	4b34      	ldr	r3, [pc, #208]	; (800ac2c <servo_InitTask+0xfc>)
 800ab5c:	2269      	movs	r2, #105	; 0x69
 800ab5e:	825a      	strh	r2, [r3, #18]
	servo_info.servos[SERVO_ROLL].max_ang = 145;
 800ab60:	4b32      	ldr	r3, [pc, #200]	; (800ac2c <servo_InitTask+0xfc>)
 800ab62:	2291      	movs	r2, #145	; 0x91
 800ab64:	829a      	strh	r2, [r3, #20]
	servo_info.servos[SERVO_ROLL].enable = 1;
 800ab66:	4b31      	ldr	r3, [pc, #196]	; (800ac2c <servo_InitTask+0xfc>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	721a      	strb	r2, [r3, #8]

	servo_info.servos[SERVO_PITCH].tim = &htim3;
 800ab6c:	4b2f      	ldr	r3, [pc, #188]	; (800ac2c <servo_InitTask+0xfc>)
 800ab6e:	4a30      	ldr	r2, [pc, #192]	; (800ac30 <servo_InitTask+0x100>)
 800ab70:	619a      	str	r2, [r3, #24]
	servo_info.servos[SERVO_PITCH].timch = TIM_CHANNEL_2;
 800ab72:	4b2e      	ldr	r3, [pc, #184]	; (800ac2c <servo_InitTask+0xfc>)
 800ab74:	2204      	movs	r2, #4
 800ab76:	61da      	str	r2, [r3, #28]
	servo_info.servos[SERVO_PITCH].cur_ang = 0;
 800ab78:	4b2c      	ldr	r3, [pc, #176]	; (800ac2c <servo_InitTask+0xfc>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	849a      	strh	r2, [r3, #36]	; 0x24
	servo_info.servos[SERVO_PITCH].cur_pwm = 0;
 800ab7e:	4b2b      	ldr	r3, [pc, #172]	; (800ac2c <servo_InitTask+0xfc>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	845a      	strh	r2, [r3, #34]	; 0x22
	servo_info.servos[SERVO_PITCH].cur_perc = 0;
 800ab84:	4b29      	ldr	r3, [pc, #164]	; (800ac2c <servo_InitTask+0xfc>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	servo_info.servos[SERVO_PITCH].min_ang = 25;
 800ab8c:	4b27      	ldr	r3, [pc, #156]	; (800ac2c <servo_InitTask+0xfc>)
 800ab8e:	2219      	movs	r2, #25
 800ab90:	851a      	strh	r2, [r3, #40]	; 0x28
	servo_info.servos[SERVO_PITCH].center_ang = 90;
 800ab92:	4b26      	ldr	r3, [pc, #152]	; (800ac2c <servo_InitTask+0xfc>)
 800ab94:	225a      	movs	r2, #90	; 0x5a
 800ab96:	855a      	strh	r2, [r3, #42]	; 0x2a
	servo_info.servos[SERVO_PITCH].max_ang = 140;
 800ab98:	4b24      	ldr	r3, [pc, #144]	; (800ac2c <servo_InitTask+0xfc>)
 800ab9a:	228c      	movs	r2, #140	; 0x8c
 800ab9c:	859a      	strh	r2, [r3, #44]	; 0x2c
	servo_info.servos[SERVO_PITCH].enable = 1;
 800ab9e:	4b23      	ldr	r3, [pc, #140]	; (800ac2c <servo_InitTask+0xfc>)
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2020 	strb.w	r2, [r3, #32]

	//Initialize beginning state
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800aba6:	2300      	movs	r3, #0
 800aba8:	71fb      	strb	r3, [r7, #7]
 800abaa:	e02a      	b.n	800ac02 <servo_InitTask+0xd2>
	{
		servo_info.servos[i].cur_pwm = 0;
 800abac:	79fa      	ldrb	r2, [r7, #7]
 800abae:	491f      	ldr	r1, [pc, #124]	; (800ac2c <servo_InitTask+0xfc>)
 800abb0:	4613      	mov	r3, r2
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	4413      	add	r3, r2
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	440b      	add	r3, r1
 800abba:	330a      	adds	r3, #10
 800abbc:	2200      	movs	r2, #0
 800abbe:	801a      	strh	r2, [r3, #0]
		servo_info.servos[i].cur_ang = 0;
 800abc0:	79fa      	ldrb	r2, [r7, #7]
 800abc2:	491a      	ldr	r1, [pc, #104]	; (800ac2c <servo_InitTask+0xfc>)
 800abc4:	4613      	mov	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	4413      	add	r3, r2
 800abca:	00db      	lsls	r3, r3, #3
 800abcc:	440b      	add	r3, r1
 800abce:	330c      	adds	r3, #12
 800abd0:	2200      	movs	r2, #0
 800abd2:	801a      	strh	r2, [r3, #0]
		HAL_TIM_PWM_Start(servo_info.servos[i].tim, servo_info.servos[i].timch);
 800abd4:	79fa      	ldrb	r2, [r7, #7]
 800abd6:	4915      	ldr	r1, [pc, #84]	; (800ac2c <servo_InitTask+0xfc>)
 800abd8:	4613      	mov	r3, r2
 800abda:	005b      	lsls	r3, r3, #1
 800abdc:	4413      	add	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	440b      	add	r3, r1
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	79fa      	ldrb	r2, [r7, #7]
 800abe6:	4911      	ldr	r1, [pc, #68]	; (800ac2c <servo_InitTask+0xfc>)
 800abe8:	4613      	mov	r3, r2
 800abea:	005b      	lsls	r3, r3, #1
 800abec:	4413      	add	r3, r2
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	440b      	add	r3, r1
 800abf2:	3304      	adds	r3, #4
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4619      	mov	r1, r3
 800abf8:	f005 f936 	bl	800fe68 <HAL_TIM_PWM_Start>
	for( uint8_t i = 0; i < SERVOS_NUM; i++ )
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	3301      	adds	r3, #1
 800ac00:	71fb      	strb	r3, [r7, #7]
 800ac02:	79fb      	ldrb	r3, [r7, #7]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d9d1      	bls.n	800abac <servo_InitTask+0x7c>
	}

	servo_setAng(SERVO_ROLL, servo_info.servos[SERVO_ROLL].center_ang);
 800ac08:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <servo_InitTask+0xfc>)
 800ac0a:	8a5b      	ldrh	r3, [r3, #18]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	4619      	mov	r1, r3
 800ac10:	2000      	movs	r0, #0
 800ac12:	f000 f82b 	bl	800ac6c <servo_setAng>
	servo_setAng(SERVO_PITCH, servo_info.servos[SERVO_PITCH].center_ang);
 800ac16:	4b05      	ldr	r3, [pc, #20]	; (800ac2c <servo_InitTask+0xfc>)
 800ac18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	2001      	movs	r0, #1
 800ac20:	f000 f824 	bl	800ac6c <servo_setAng>

	return;
 800ac24:	bf00      	nop
}
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20001078 	.word	0x20001078
 800ac30:	20000b70 	.word	0x20000b70

0800ac34 <servo_Task>:
  * @param  None
  * @retval None
  */
/**********************************************************************/
void servo_Task(void)
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	return;
 800ac38:	bf00      	nop
}
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <servo_angToPWM>:

uint16_t servo_angToPWM(uint16_t ang)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	4603      	mov	r3, r0
 800ac4a:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_val;

	pwm_val = SERVO_0DEG_PWM_VAL + (ang * SERVO_1DEG_PWM_STEP);
 800ac4c:	88fb      	ldrh	r3, [r7, #6]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	0052      	lsls	r2, r2, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	33f5      	adds	r3, #245	; 0xf5
 800ac5a:	81fb      	strh	r3, [r7, #14]

	return pwm_val;
 800ac5c:	89fb      	ldrh	r3, [r7, #14]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
	...

0800ac6c <servo_setAng>:

void servo_setAng(uint8_t servo, uint16_t ang)
{
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	460a      	mov	r2, r1
 800ac76:	71fb      	strb	r3, [r7, #7]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	80bb      	strh	r3, [r7, #4]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	f200 809f 	bhi.w	800adc2 <servo_setAng+0x156>
		return;
	}

	servo_info.servos[servo].cur_ang = ang;
 800ac84:	79fa      	ldrb	r2, [r7, #7]
 800ac86:	4952      	ldr	r1, [pc, #328]	; (800add0 <servo_setAng+0x164>)
 800ac88:	4613      	mov	r3, r2
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	4413      	add	r3, r2
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	440b      	add	r3, r1
 800ac92:	330c      	adds	r3, #12
 800ac94:	88ba      	ldrh	r2, [r7, #4]
 800ac96:	801a      	strh	r2, [r3, #0]
	servo_info.servos[servo].cur_pwm = servo_angToPWM(ang);
 800ac98:	79fc      	ldrb	r4, [r7, #7]
 800ac9a:	88bb      	ldrh	r3, [r7, #4]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff ffd0 	bl	800ac42 <servo_angToPWM>
 800aca2:	4603      	mov	r3, r0
 800aca4:	4619      	mov	r1, r3
 800aca6:	4a4a      	ldr	r2, [pc, #296]	; (800add0 <servo_setAng+0x164>)
 800aca8:	4623      	mov	r3, r4
 800acaa:	005b      	lsls	r3, r3, #1
 800acac:	4423      	add	r3, r4
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	4413      	add	r3, r2
 800acb2:	330a      	adds	r3, #10
 800acb4:	460a      	mov	r2, r1
 800acb6:	801a      	strh	r2, [r3, #0]
	if( servo_info.servos[servo].enable == 1 ){
 800acb8:	79fa      	ldrb	r2, [r7, #7]
 800acba:	4945      	ldr	r1, [pc, #276]	; (800add0 <servo_setAng+0x164>)
 800acbc:	4613      	mov	r3, r2
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	4413      	add	r3, r2
 800acc2:	00db      	lsls	r3, r3, #3
 800acc4:	440b      	add	r3, r1
 800acc6:	3308      	adds	r3, #8
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b01      	cmp	r3, #1
 800acce:	d17a      	bne.n	800adc6 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800acd0:	79fa      	ldrb	r2, [r7, #7]
 800acd2:	493f      	ldr	r1, [pc, #252]	; (800add0 <servo_setAng+0x164>)
 800acd4:	4613      	mov	r3, r2
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	4413      	add	r3, r2
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	440b      	add	r3, r1
 800acde:	3304      	adds	r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d115      	bne.n	800ad12 <servo_setAng+0xa6>
 800ace6:	79fa      	ldrb	r2, [r7, #7]
 800ace8:	4939      	ldr	r1, [pc, #228]	; (800add0 <servo_setAng+0x164>)
 800acea:	4613      	mov	r3, r2
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	4413      	add	r3, r2
 800acf0:	00db      	lsls	r3, r3, #3
 800acf2:	440b      	add	r3, r1
 800acf4:	330a      	adds	r3, #10
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	b298      	uxth	r0, r3
 800acfa:	79fa      	ldrb	r2, [r7, #7]
 800acfc:	4934      	ldr	r1, [pc, #208]	; (800add0 <servo_setAng+0x164>)
 800acfe:	4613      	mov	r3, r2
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	4413      	add	r3, r2
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	440b      	add	r3, r1
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 800ad10:	e059      	b.n	800adc6 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800ad12:	79fa      	ldrb	r2, [r7, #7]
 800ad14:	492e      	ldr	r1, [pc, #184]	; (800add0 <servo_setAng+0x164>)
 800ad16:	4613      	mov	r3, r2
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	440b      	add	r3, r1
 800ad20:	3304      	adds	r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	d115      	bne.n	800ad54 <servo_setAng+0xe8>
 800ad28:	79fa      	ldrb	r2, [r7, #7]
 800ad2a:	4929      	ldr	r1, [pc, #164]	; (800add0 <servo_setAng+0x164>)
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	4413      	add	r3, r2
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	440b      	add	r3, r1
 800ad36:	330a      	adds	r3, #10
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	b298      	uxth	r0, r3
 800ad3c:	79fa      	ldrb	r2, [r7, #7]
 800ad3e:	4924      	ldr	r1, [pc, #144]	; (800add0 <servo_setAng+0x164>)
 800ad40:	4613      	mov	r3, r2
 800ad42:	005b      	lsls	r3, r3, #1
 800ad44:	4413      	add	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	440b      	add	r3, r1
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	4603      	mov	r3, r0
 800ad50:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800ad52:	e038      	b.n	800adc6 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800ad54:	79fa      	ldrb	r2, [r7, #7]
 800ad56:	491e      	ldr	r1, [pc, #120]	; (800add0 <servo_setAng+0x164>)
 800ad58:	4613      	mov	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	4413      	add	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	440b      	add	r3, r1
 800ad62:	3304      	adds	r3, #4
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d115      	bne.n	800ad96 <servo_setAng+0x12a>
 800ad6a:	79fa      	ldrb	r2, [r7, #7]
 800ad6c:	4918      	ldr	r1, [pc, #96]	; (800add0 <servo_setAng+0x164>)
 800ad6e:	4613      	mov	r3, r2
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	440b      	add	r3, r1
 800ad78:	330a      	adds	r3, #10
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	b298      	uxth	r0, r3
 800ad7e:	79fa      	ldrb	r2, [r7, #7]
 800ad80:	4913      	ldr	r1, [pc, #76]	; (800add0 <servo_setAng+0x164>)
 800ad82:	4613      	mov	r3, r2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	4603      	mov	r3, r0
 800ad92:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800ad94:	e017      	b.n	800adc6 <servo_setAng+0x15a>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800ad96:	79fa      	ldrb	r2, [r7, #7]
 800ad98:	490d      	ldr	r1, [pc, #52]	; (800add0 <servo_setAng+0x164>)
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	4413      	add	r3, r2
 800ada0:	00db      	lsls	r3, r3, #3
 800ada2:	440b      	add	r3, r1
 800ada4:	330a      	adds	r3, #10
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	b298      	uxth	r0, r3
 800adaa:	79fa      	ldrb	r2, [r7, #7]
 800adac:	4908      	ldr	r1, [pc, #32]	; (800add0 <servo_setAng+0x164>)
 800adae:	4613      	mov	r3, r2
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	440b      	add	r3, r1
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4603      	mov	r3, r0
 800adbe:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800adc0:	e001      	b.n	800adc6 <servo_setAng+0x15a>
		return;
 800adc2:	bf00      	nop
 800adc4:	e000      	b.n	800adc8 <servo_setAng+0x15c>
	return;
 800adc6:	bf00      	nop
}
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd90      	pop	{r4, r7, pc}
 800adce:	bf00      	nop
 800add0:	20001078 	.word	0x20001078

0800add4 <servo_setPercnet>:

void servo_setPercnet(uint8_t servo, int8_t perc)
{
 800add4:	b590      	push	{r4, r7, lr}
 800add6:	b087      	sub	sp, #28
 800add8:	af02      	add	r7, sp, #8
 800adda:	4603      	mov	r3, r0
 800addc:	460a      	mov	r2, r1
 800adde:	71fb      	strb	r3, [r7, #7]
 800ade0:	4613      	mov	r3, r2
 800ade2:	71bb      	strb	r3, [r7, #6]
	return;
#endif //NO_SERVO

	uint16_t ang_tmp;

	if( servo >= SERVOS_NUM ){
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d854      	bhi.n	800ae94 <servo_setPercnet+0xc0>
		return;
	}

	if( (perc > 100) || (perc < -100) ){
 800adea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800adee:	2b64      	cmp	r3, #100	; 0x64
 800adf0:	dc52      	bgt.n	800ae98 <servo_setPercnet+0xc4>
 800adf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800adf6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800adfa:	db4d      	blt.n	800ae98 <servo_setPercnet+0xc4>
		return;
	}

	if( perc >= 0 )
 800adfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db1f      	blt.n	800ae44 <servo_setPercnet+0x70>
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800ae04:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800ae08:	79fa      	ldrb	r2, [r7, #7]
 800ae0a:	4925      	ldr	r1, [pc, #148]	; (800aea0 <servo_setPercnet+0xcc>)
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	005b      	lsls	r3, r3, #1
 800ae10:	4413      	add	r3, r2
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	440b      	add	r3, r1
 800ae16:	3312      	adds	r3, #18
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800ae1c:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].max_ang);
 800ae1e:	79fa      	ldrb	r2, [r7, #7]
 800ae20:	491f      	ldr	r1, [pc, #124]	; (800aea0 <servo_setPercnet+0xcc>)
 800ae22:	4613      	mov	r3, r2
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	4413      	add	r3, r2
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	440b      	add	r3, r1
 800ae2c:	3314      	adds	r3, #20
 800ae2e:	881b      	ldrh	r3, [r3, #0]
 800ae30:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, 0, 100,
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	4623      	mov	r3, r4
 800ae36:	2264      	movs	r2, #100	; 0x64
 800ae38:	2100      	movs	r1, #0
 800ae3a:	f000 f929 	bl	800b090 <servo_map>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	81fb      	strh	r3, [r7, #14]
 800ae42:	e020      	b.n	800ae86 <servo_setPercnet+0xb2>
	}
	else
	{
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800ae44:	f997 0006 	ldrsb.w	r0, [r7, #6]
										(int32_t)servo_info.servos[servo].center_ang,
 800ae48:	79fa      	ldrb	r2, [r7, #7]
 800ae4a:	4915      	ldr	r1, [pc, #84]	; (800aea0 <servo_setPercnet+0xcc>)
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	4413      	add	r3, r2
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	440b      	add	r3, r1
 800ae56:	3312      	adds	r3, #18
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800ae5c:	461c      	mov	r4, r3
										(int32_t)servo_info.servos[servo].min_ang);
 800ae5e:	79fa      	ldrb	r2, [r7, #7]
 800ae60:	490f      	ldr	r1, [pc, #60]	; (800aea0 <servo_setPercnet+0xcc>)
 800ae62:	4613      	mov	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	440b      	add	r3, r1
 800ae6c:	3310      	adds	r3, #16
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	b29b      	uxth	r3, r3
		ang_tmp = (uint16_t)servo_map((int32_t)perc, -1, -100,
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	4623      	mov	r3, r4
 800ae76:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ae7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ae7e:	f000 f907 	bl	800b090 <servo_map>
 800ae82:	4603      	mov	r3, r0
 800ae84:	81fb      	strh	r3, [r7, #14]
	}

	servo_setAng(servo, ang_tmp);
 800ae86:	89fa      	ldrh	r2, [r7, #14]
 800ae88:	79fb      	ldrb	r3, [r7, #7]
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff feed 	bl	800ac6c <servo_setAng>

	return;
 800ae92:	e002      	b.n	800ae9a <servo_setPercnet+0xc6>
		return;
 800ae94:	bf00      	nop
 800ae96:	e000      	b.n	800ae9a <servo_setPercnet+0xc6>
		return;
 800ae98:	bf00      	nop
}
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}
 800aea0:	20001078 	.word	0x20001078

0800aea4 <servo_setEnable>:

void servo_setEnable(uint8_t servo, uint8_t ena)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	4603      	mov	r3, r0
 800aeac:	460a      	mov	r2, r1
 800aeae:	71fb      	strb	r3, [r7, #7]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	71bb      	strb	r3, [r7, #6]
#ifdef NO_SERVO
	return;
#endif //NO_SERVO

	if( servo >= SERVOS_NUM ){
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	f200 80e1 	bhi.w	800b07e <servo_setEnable+0x1da>
		return;
	}

	servo_info.servos[servo].enable = ena;
 800aebc:	79fa      	ldrb	r2, [r7, #7]
 800aebe:	4973      	ldr	r1, [pc, #460]	; (800b08c <servo_setEnable+0x1e8>)
 800aec0:	4613      	mov	r3, r2
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	4413      	add	r3, r2
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	440b      	add	r3, r1
 800aeca:	3308      	adds	r3, #8
 800aecc:	79ba      	ldrb	r2, [r7, #6]
 800aece:	701a      	strb	r2, [r3, #0]

	if( servo_info.servos[servo].enable == 1 ){
 800aed0:	79fa      	ldrb	r2, [r7, #7]
 800aed2:	496e      	ldr	r1, [pc, #440]	; (800b08c <servo_setEnable+0x1e8>)
 800aed4:	4613      	mov	r3, r2
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	4413      	add	r3, r2
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	440b      	add	r3, r1
 800aede:	3308      	adds	r3, #8
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d178      	bne.n	800afda <servo_setEnable+0x136>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800aee8:	79fa      	ldrb	r2, [r7, #7]
 800aeea:	4968      	ldr	r1, [pc, #416]	; (800b08c <servo_setEnable+0x1e8>)
 800aeec:	4613      	mov	r3, r2
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	4413      	add	r3, r2
 800aef2:	00db      	lsls	r3, r3, #3
 800aef4:	440b      	add	r3, r1
 800aef6:	3304      	adds	r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d115      	bne.n	800af2a <servo_setEnable+0x86>
 800aefe:	79fa      	ldrb	r2, [r7, #7]
 800af00:	4962      	ldr	r1, [pc, #392]	; (800b08c <servo_setEnable+0x1e8>)
 800af02:	4613      	mov	r3, r2
 800af04:	005b      	lsls	r3, r3, #1
 800af06:	4413      	add	r3, r2
 800af08:	00db      	lsls	r3, r3, #3
 800af0a:	440b      	add	r3, r1
 800af0c:	330a      	adds	r3, #10
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b298      	uxth	r0, r3
 800af12:	79fa      	ldrb	r2, [r7, #7]
 800af14:	495d      	ldr	r1, [pc, #372]	; (800b08c <servo_setEnable+0x1e8>)
 800af16:	4613      	mov	r3, r2
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	4413      	add	r3, r2
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	440b      	add	r3, r1
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4602      	mov	r2, r0
 800af26:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
	}

	return;
 800af28:	e0aa      	b.n	800b080 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, servo_info.servos[servo].cur_pwm);
 800af2a:	79fa      	ldrb	r2, [r7, #7]
 800af2c:	4957      	ldr	r1, [pc, #348]	; (800b08c <servo_setEnable+0x1e8>)
 800af2e:	4613      	mov	r3, r2
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	4413      	add	r3, r2
 800af34:	00db      	lsls	r3, r3, #3
 800af36:	440b      	add	r3, r1
 800af38:	3304      	adds	r3, #4
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d115      	bne.n	800af6c <servo_setEnable+0xc8>
 800af40:	79fa      	ldrb	r2, [r7, #7]
 800af42:	4952      	ldr	r1, [pc, #328]	; (800b08c <servo_setEnable+0x1e8>)
 800af44:	4613      	mov	r3, r2
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	4413      	add	r3, r2
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	440b      	add	r3, r1
 800af4e:	330a      	adds	r3, #10
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	b298      	uxth	r0, r3
 800af54:	79fa      	ldrb	r2, [r7, #7]
 800af56:	494d      	ldr	r1, [pc, #308]	; (800b08c <servo_setEnable+0x1e8>)
 800af58:	4613      	mov	r3, r2
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	4413      	add	r3, r2
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	440b      	add	r3, r1
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	4603      	mov	r3, r0
 800af68:	6393      	str	r3, [r2, #56]	; 0x38
 800af6a:	e087      	b.n	800b07c <servo_setEnable+0x1d8>
 800af6c:	79fa      	ldrb	r2, [r7, #7]
 800af6e:	4947      	ldr	r1, [pc, #284]	; (800b08c <servo_setEnable+0x1e8>)
 800af70:	4613      	mov	r3, r2
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	4413      	add	r3, r2
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	440b      	add	r3, r1
 800af7a:	3304      	adds	r3, #4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b08      	cmp	r3, #8
 800af80:	d115      	bne.n	800afae <servo_setEnable+0x10a>
 800af82:	79fa      	ldrb	r2, [r7, #7]
 800af84:	4941      	ldr	r1, [pc, #260]	; (800b08c <servo_setEnable+0x1e8>)
 800af86:	4613      	mov	r3, r2
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	4413      	add	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	440b      	add	r3, r1
 800af90:	330a      	adds	r3, #10
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	b298      	uxth	r0, r3
 800af96:	79fa      	ldrb	r2, [r7, #7]
 800af98:	493c      	ldr	r1, [pc, #240]	; (800b08c <servo_setEnable+0x1e8>)
 800af9a:	4613      	mov	r3, r2
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	4413      	add	r3, r2
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	440b      	add	r3, r1
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	4603      	mov	r3, r0
 800afaa:	63d3      	str	r3, [r2, #60]	; 0x3c
 800afac:	e066      	b.n	800b07c <servo_setEnable+0x1d8>
 800afae:	79fa      	ldrb	r2, [r7, #7]
 800afb0:	4936      	ldr	r1, [pc, #216]	; (800b08c <servo_setEnable+0x1e8>)
 800afb2:	4613      	mov	r3, r2
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	4413      	add	r3, r2
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	440b      	add	r3, r1
 800afbc:	330a      	adds	r3, #10
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b298      	uxth	r0, r3
 800afc2:	79fa      	ldrb	r2, [r7, #7]
 800afc4:	4931      	ldr	r1, [pc, #196]	; (800b08c <servo_setEnable+0x1e8>)
 800afc6:	4613      	mov	r3, r2
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	4413      	add	r3, r2
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	440b      	add	r3, r1
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	4603      	mov	r3, r0
 800afd6:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800afd8:	e052      	b.n	800b080 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800afda:	79fa      	ldrb	r2, [r7, #7]
 800afdc:	492b      	ldr	r1, [pc, #172]	; (800b08c <servo_setEnable+0x1e8>)
 800afde:	4613      	mov	r3, r2
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	440b      	add	r3, r1
 800afe8:	3304      	adds	r3, #4
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10b      	bne.n	800b008 <servo_setEnable+0x164>
 800aff0:	79fa      	ldrb	r2, [r7, #7]
 800aff2:	4926      	ldr	r1, [pc, #152]	; (800b08c <servo_setEnable+0x1e8>)
 800aff4:	4613      	mov	r3, r2
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	4413      	add	r3, r2
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	440b      	add	r3, r1
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	635a      	str	r2, [r3, #52]	; 0x34
	return;
 800b006:	e03b      	b.n	800b080 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b008:	79fa      	ldrb	r2, [r7, #7]
 800b00a:	4920      	ldr	r1, [pc, #128]	; (800b08c <servo_setEnable+0x1e8>)
 800b00c:	4613      	mov	r3, r2
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	4413      	add	r3, r2
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	440b      	add	r3, r1
 800b016:	3304      	adds	r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d10b      	bne.n	800b036 <servo_setEnable+0x192>
 800b01e:	79fa      	ldrb	r2, [r7, #7]
 800b020:	491a      	ldr	r1, [pc, #104]	; (800b08c <servo_setEnable+0x1e8>)
 800b022:	4613      	mov	r3, r2
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	4413      	add	r3, r2
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	440b      	add	r3, r1
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	2300      	movs	r3, #0
 800b032:	6393      	str	r3, [r2, #56]	; 0x38
	return;
 800b034:	e024      	b.n	800b080 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b036:	79fa      	ldrb	r2, [r7, #7]
 800b038:	4914      	ldr	r1, [pc, #80]	; (800b08c <servo_setEnable+0x1e8>)
 800b03a:	4613      	mov	r3, r2
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	4413      	add	r3, r2
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	440b      	add	r3, r1
 800b044:	3304      	adds	r3, #4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b08      	cmp	r3, #8
 800b04a:	d10b      	bne.n	800b064 <servo_setEnable+0x1c0>
 800b04c:	79fa      	ldrb	r2, [r7, #7]
 800b04e:	490f      	ldr	r1, [pc, #60]	; (800b08c <servo_setEnable+0x1e8>)
 800b050:	4613      	mov	r3, r2
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	4413      	add	r3, r2
 800b056:	00db      	lsls	r3, r3, #3
 800b058:	440b      	add	r3, r1
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	63d3      	str	r3, [r2, #60]	; 0x3c
	return;
 800b062:	e00d      	b.n	800b080 <servo_setEnable+0x1dc>
		__HAL_TIM_SET_COMPARE(servo_info.servos[servo].tim, servo_info.servos[servo].timch, 0);
 800b064:	79fa      	ldrb	r2, [r7, #7]
 800b066:	4909      	ldr	r1, [pc, #36]	; (800b08c <servo_setEnable+0x1e8>)
 800b068:	4613      	mov	r3, r2
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	4413      	add	r3, r2
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	440b      	add	r3, r1
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	2300      	movs	r3, #0
 800b078:	6413      	str	r3, [r2, #64]	; 0x40
	return;
 800b07a:	e001      	b.n	800b080 <servo_setEnable+0x1dc>
 800b07c:	e000      	b.n	800b080 <servo_setEnable+0x1dc>
		return;
 800b07e:	bf00      	nop
}
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	20001078 	.word	0x20001078

0800b090 <servo_map>:
  * 	toLow: the lower bound of the value’s target range.
  * 	toHigh: the upper bound of the value’s target range.
  * @retval The mapped value.
  */
int32_t servo_map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	69b9      	ldr	r1, [r7, #24]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	1a8a      	subs	r2, r1, r2
 800b0aa:	fb03 f202 	mul.w	r2, r3, r2
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	1acb      	subs	r3, r1, r3
 800b0b4:	fb92 f2f3 	sdiv	r2, r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	4413      	add	r3, r2
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <cfg_NodeServoVarProp>:

/* Configurator node functions*/
/*************************************************************************/
uint16_t cfg_NodeServoVarProp(uint16_t varid, char *name, uint16_t *prop)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	81fb      	strh	r3, [r7, #14]
	char *str;

	switch( varid )
 800b0d6:	89fb      	ldrh	r3, [r7, #14]
 800b0d8:	2b0d      	cmp	r3, #13
 800b0da:	d849      	bhi.n	800b170 <cfg_NodeServoVarProp+0xa8>
 800b0dc:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <cfg_NodeServoVarProp+0x1c>)
 800b0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e2:	bf00      	nop
 800b0e4:	0800b11d 	.word	0x0800b11d
 800b0e8:	0800b123 	.word	0x0800b123
 800b0ec:	0800b129 	.word	0x0800b129
 800b0f0:	0800b12f 	.word	0x0800b12f
 800b0f4:	0800b135 	.word	0x0800b135
 800b0f8:	0800b13b 	.word	0x0800b13b
 800b0fc:	0800b141 	.word	0x0800b141
 800b100:	0800b147 	.word	0x0800b147
 800b104:	0800b14d 	.word	0x0800b14d
 800b108:	0800b153 	.word	0x0800b153
 800b10c:	0800b159 	.word	0x0800b159
 800b110:	0800b15f 	.word	0x0800b15f
 800b114:	0800b165 	.word	0x0800b165
 800b118:	0800b16b 	.word	0x0800b16b
	{
		case SERVO_ROLL_ENA:				str = "ROLL enable"; break;
 800b11c:	4b52      	ldr	r3, [pc, #328]	; (800b268 <cfg_NodeServoVarProp+0x1a0>)
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e028      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_ANG:			str = "ROLL current angle"; break;
 800b122:	4b52      	ldr	r3, [pc, #328]	; (800b26c <cfg_NodeServoVarProp+0x1a4>)
 800b124:	617b      	str	r3, [r7, #20]
 800b126:	e025      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PWM:			str = "ROLL current PWM"; break;
 800b128:	4b51      	ldr	r3, [pc, #324]	; (800b270 <cfg_NodeServoVarProp+0x1a8>)
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e022      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CUR_PERC:			str = "ROLL current perc"; break;
 800b12e:	4b51      	ldr	r3, [pc, #324]	; (800b274 <cfg_NodeServoVarProp+0x1ac>)
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	e01f      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MIN_ANG:			str = "ROLL min angle"; break;
 800b134:	4b50      	ldr	r3, [pc, #320]	; (800b278 <cfg_NodeServoVarProp+0x1b0>)
 800b136:	617b      	str	r3, [r7, #20]
 800b138:	e01c      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_CENT_ANG:			str = "ROLL center angle"; break;
 800b13a:	4b50      	ldr	r3, [pc, #320]	; (800b27c <cfg_NodeServoVarProp+0x1b4>)
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	e019      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_ROLL_MAX_ANG:			str = "ROLL max angle"; break;
 800b140:	4b4f      	ldr	r3, [pc, #316]	; (800b280 <cfg_NodeServoVarProp+0x1b8>)
 800b142:	617b      	str	r3, [r7, #20]
 800b144:	e016      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_ENA:				str = "PITCH enable"; break;
 800b146:	4b4f      	ldr	r3, [pc, #316]	; (800b284 <cfg_NodeServoVarProp+0x1bc>)
 800b148:	617b      	str	r3, [r7, #20]
 800b14a:	e013      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_ANG:			str = "PITCH current angle"; break;
 800b14c:	4b4e      	ldr	r3, [pc, #312]	; (800b288 <cfg_NodeServoVarProp+0x1c0>)
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e010      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PWM:			str = "PITCH current PWM"; break;
 800b152:	4b4e      	ldr	r3, [pc, #312]	; (800b28c <cfg_NodeServoVarProp+0x1c4>)
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	e00d      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CUR_PERC:			str = "PITCH current perc"; break;
 800b158:	4b4d      	ldr	r3, [pc, #308]	; (800b290 <cfg_NodeServoVarProp+0x1c8>)
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	e00a      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MIN_ANG:			str = "PITCH min angle"; break;
 800b15e:	4b4d      	ldr	r3, [pc, #308]	; (800b294 <cfg_NodeServoVarProp+0x1cc>)
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	e007      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_CENT_ANG:			str = "PITCH center angle"; break;
 800b164:	4b4c      	ldr	r3, [pc, #304]	; (800b298 <cfg_NodeServoVarProp+0x1d0>)
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e004      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		case SERVO_PITCH_MAX_ANG:			str = "PITCH max angle"; break;
 800b16a:	4b4c      	ldr	r3, [pc, #304]	; (800b29c <cfg_NodeServoVarProp+0x1d4>)
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	e001      	b.n	800b174 <cfg_NodeServoVarProp+0xac>
		default: return CFG_ERROR_VARID;
 800b170:	2302      	movs	r3, #2
 800b172:	e072      	b.n	800b25a <cfg_NodeServoVarProp+0x192>
	}
	if( name ) { while( *str ) *name++ = *str++; *name = 0; }
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00f      	beq.n	800b19a <cfg_NodeServoVarProp+0xd2>
 800b17a:	e007      	b.n	800b18c <cfg_NodeServoVarProp+0xc4>
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	1c53      	adds	r3, r2, #1
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	1c59      	adds	r1, r3, #1
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	7812      	ldrb	r2, [r2, #0]
 800b18a:	701a      	strb	r2, [r3, #0]
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1f3      	bne.n	800b17c <cfg_NodeServoVarProp+0xb4>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2200      	movs	r2, #0
 800b198:	701a      	strb	r2, [r3, #0]

	if( prop ) switch( varid )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05b      	beq.n	800b258 <cfg_NodeServoVarProp+0x190>
 800b1a0:	89fb      	ldrh	r3, [r7, #14]
 800b1a2:	2b0d      	cmp	r3, #13
 800b1a4:	d856      	bhi.n	800b254 <cfg_NodeServoVarProp+0x18c>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <cfg_NodeServoVarProp+0xe4>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1e5 	.word	0x0800b1e5
 800b1b0:	0800b1ed 	.word	0x0800b1ed
 800b1b4:	0800b1f5 	.word	0x0800b1f5
 800b1b8:	0800b1fd 	.word	0x0800b1fd
 800b1bc:	0800b205 	.word	0x0800b205
 800b1c0:	0800b20d 	.word	0x0800b20d
 800b1c4:	0800b215 	.word	0x0800b215
 800b1c8:	0800b21d 	.word	0x0800b21d
 800b1cc:	0800b225 	.word	0x0800b225
 800b1d0:	0800b22d 	.word	0x0800b22d
 800b1d4:	0800b235 	.word	0x0800b235
 800b1d8:	0800b23d 	.word	0x0800b23d
 800b1dc:	0800b245 	.word	0x0800b245
 800b1e0:	0800b24d 	.word	0x0800b24d
	{
		case SERVO_ROLL_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2223      	movs	r2, #35	; 0x23
 800b1e8:	801a      	strh	r2, [r3, #0]
 800b1ea:	e035      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	e031      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2212      	movs	r2, #18
 800b1f8:	801a      	strh	r2, [r3, #0]
 800b1fa:	e02d      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	801a      	strh	r2, [r3, #0]
 800b202:	e029      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2222      	movs	r2, #34	; 0x22
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	e025      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2222      	movs	r2, #34	; 0x22
 800b210:	801a      	strh	r2, [r3, #0]
 800b212:	e021      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_ROLL_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2222      	movs	r2, #34	; 0x22
 800b218:	801a      	strh	r2, [r3, #0]
 800b21a:	e01d      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_ENA:				*prop = CFG_VAR_TYPE_BOOL | CFG_VAR_PROP_CONST; break;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2223      	movs	r2, #35	; 0x23
 800b220:	801a      	strh	r2, [r3, #0]
 800b222:	e019      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_ANG:			*prop = CFG_VAR_TYPE_UINT; break;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	801a      	strh	r2, [r3, #0]
 800b22a:	e015      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PWM:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_READONLY; break;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2212      	movs	r2, #18
 800b230:	801a      	strh	r2, [r3, #0]
 800b232:	e011      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CUR_PERC:			*prop = CFG_VAR_TYPE_INT; break;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	e00d      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MIN_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2222      	movs	r2, #34	; 0x22
 800b240:	801a      	strh	r2, [r3, #0]
 800b242:	e009      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_CENT_ANG:			*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2222      	movs	r2, #34	; 0x22
 800b248:	801a      	strh	r2, [r3, #0]
 800b24a:	e005      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		case SERVO_PITCH_MAX_ANG:	  		*prop = CFG_VAR_TYPE_UINT | CFG_VAR_PROP_CONST; break;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2222      	movs	r2, #34	; 0x22
 800b250:	801a      	strh	r2, [r3, #0]
 800b252:	e001      	b.n	800b258 <cfg_NodeServoVarProp+0x190>
		default: return CFG_ERROR_VARID;
 800b254:	2302      	movs	r3, #2
 800b256:	e000      	b.n	800b25a <cfg_NodeServoVarProp+0x192>
	}
	return CFG_ERROR_NONE;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	08016a48 	.word	0x08016a48
 800b26c:	08016a54 	.word	0x08016a54
 800b270:	08016a68 	.word	0x08016a68
 800b274:	08016a7c 	.word	0x08016a7c
 800b278:	08016a90 	.word	0x08016a90
 800b27c:	08016aa0 	.word	0x08016aa0
 800b280:	08016ab4 	.word	0x08016ab4
 800b284:	08016ac4 	.word	0x08016ac4
 800b288:	08016ad4 	.word	0x08016ad4
 800b28c:	08016ae8 	.word	0x08016ae8
 800b290:	08016afc 	.word	0x08016afc
 800b294:	08016b10 	.word	0x08016b10
 800b298:	08016b20 	.word	0x08016b20
 800b29c:	08016b34 	.word	0x08016b34

0800b2a0 <cfg_NodeServoVarGet>:

uint16_t cfg_NodeServoVarGet(uint16_t varid, void *value)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	6039      	str	r1, [r7, #0]
 800b2aa:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 808a 	beq.w	800b3c8 <cfg_NodeServoVarGet+0x128>
 800b2b4:	88fb      	ldrh	r3, [r7, #6]
 800b2b6:	2b0d      	cmp	r3, #13
 800b2b8:	f200 8084 	bhi.w	800b3c4 <cfg_NodeServoVarGet+0x124>
 800b2bc:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <cfg_NodeServoVarGet+0x24>)
 800b2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c2:	bf00      	nop
 800b2c4:	0800b2fd 	.word	0x0800b2fd
 800b2c8:	0800b30b 	.word	0x0800b30b
 800b2cc:	0800b319 	.word	0x0800b319
 800b2d0:	0800b327 	.word	0x0800b327
 800b2d4:	0800b335 	.word	0x0800b335
 800b2d8:	0800b343 	.word	0x0800b343
 800b2dc:	0800b351 	.word	0x0800b351
 800b2e0:	0800b35f 	.word	0x0800b35f
 800b2e4:	0800b36f 	.word	0x0800b36f
 800b2e8:	0800b37d 	.word	0x0800b37d
 800b2ec:	0800b38b 	.word	0x0800b38b
 800b2f0:	0800b39b 	.word	0x0800b39b
 800b2f4:	0800b3a9 	.word	0x0800b3a9
 800b2f8:	0800b3b7 	.word	0x0800b3b7
	{
		case SERVO_ROLL_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].enable; break;
 800b2fc:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b2fe:	7a1b      	ldrb	r3, [r3, #8]
 800b300:	b2db      	uxtb	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	e05e      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_ang; break;
 800b30a:	4b33      	ldr	r3, [pc, #204]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b30c:	899b      	ldrh	r3, [r3, #12]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	e057      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].cur_pwm; break;
 800b318:	4b2f      	ldr	r3, [pc, #188]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b31a:	895b      	ldrh	r3, [r3, #10]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	461a      	mov	r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	e050      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_ROLL].cur_perc; break;
 800b326:	4b2c      	ldr	r3, [pc, #176]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b328:	7b9b      	ldrb	r3, [r3, #14]
 800b32a:	b25b      	sxtb	r3, r3
 800b32c:	461a      	mov	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	e049      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].min_ang; break;
 800b334:	4b28      	ldr	r3, [pc, #160]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b336:	8a1b      	ldrh	r3, [r3, #16]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	461a      	mov	r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	e042      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].center_ang; break;
 800b342:	4b25      	ldr	r3, [pc, #148]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b344:	8a5b      	ldrh	r3, [r3, #18]
 800b346:	b29b      	uxth	r3, r3
 800b348:	461a      	mov	r2, r3
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	e03b      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_ROLL_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_ROLL].max_ang; break;
 800b350:	4b21      	ldr	r3, [pc, #132]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b352:	8a9b      	ldrh	r3, [r3, #20]
 800b354:	b29b      	uxth	r3, r3
 800b356:	461a      	mov	r2, r3
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	e034      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_ENA: 				*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].enable; break;
 800b35e:	4b1e      	ldr	r3, [pc, #120]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b360:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	461a      	mov	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	e02c      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_ang; break;
 800b36e:	4b1a      	ldr	r3, [pc, #104]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b370:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b372:	b29b      	uxth	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e025      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PWM: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].cur_pwm; break;
 800b37c:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b37e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b380:	b29b      	uxth	r3, r3
 800b382:	461a      	mov	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	601a      	str	r2, [r3, #0]
 800b388:	e01e      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CUR_PERC: 			*(uint32_t*)value = (int32_t)servo_info.servos[SERVO_PITCH].cur_perc; break;
 800b38a:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b38c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b390:	b25b      	sxtb	r3, r3
 800b392:	461a      	mov	r2, r3
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	e016      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MIN_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].min_ang; break;
 800b39a:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e00f      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_CENT_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].center_ang; break;
 800b3a8:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b3aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e008      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		case SERVO_PITCH_MAX_ANG: 			*(uint32_t*)value = (uint32_t)servo_info.servos[SERVO_PITCH].max_ang; break;
 800b3b6:	4b08      	ldr	r3, [pc, #32]	; (800b3d8 <cfg_NodeServoVarGet+0x138>)
 800b3b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	461a      	mov	r2, r3
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e001      	b.n	800b3c8 <cfg_NodeServoVarGet+0x128>
		default: return CFG_ERROR_VARID;
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e000      	b.n	800b3ca <cfg_NodeServoVarGet+0x12a>
	}
	return CFG_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	20001078 	.word	0x20001078

0800b3dc <cfg_NodeServoVarSet>:

uint16_t cfg_NodeServoVarSet(uint16_t varid, void *value)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	6039      	str	r1, [r7, #0]
 800b3e6:	80fb      	strh	r3, [r7, #6]
	if( value ) switch( varid )
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d079      	beq.n	800b4e2 <cfg_NodeServoVarSet+0x106>
 800b3ee:	88fb      	ldrh	r3, [r7, #6]
 800b3f0:	2b0d      	cmp	r3, #13
 800b3f2:	d873      	bhi.n	800b4dc <cfg_NodeServoVarSet+0x100>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <cfg_NodeServoVarSet+0x20>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b435 	.word	0x0800b435
 800b400:	0800b445 	.word	0x0800b445
 800b404:	0800b4e1 	.word	0x0800b4e1
 800b408:	0800b455 	.word	0x0800b455
 800b40c:	0800b465 	.word	0x0800b465
 800b410:	0800b471 	.word	0x0800b471
 800b414:	0800b47d 	.word	0x0800b47d
 800b418:	0800b489 	.word	0x0800b489
 800b41c:	0800b499 	.word	0x0800b499
 800b420:	0800b4e1 	.word	0x0800b4e1
 800b424:	0800b4a9 	.word	0x0800b4a9
 800b428:	0800b4b9 	.word	0x0800b4b9
 800b42c:	0800b4c5 	.word	0x0800b4c5
 800b430:	0800b4d1 	.word	0x0800b4d1
	{
		case SERVO_ROLL_ENA:				servo_setEnable(SERVO_ROLL, (uint8_t)*(uint32_t*)value); break;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	4619      	mov	r1, r3
 800b43c:	2000      	movs	r0, #0
 800b43e:	f7ff fd31 	bl	800aea4 <servo_setEnable>
 800b442:	e04e      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_ANG:			servo_setAng(SERVO_ROLL, (uint16_t)*(uint32_t*)value); break;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	4619      	mov	r1, r3
 800b44c:	2000      	movs	r0, #0
 800b44e:	f7ff fc0d 	bl	800ac6c <servo_setAng>
 800b452:	e046      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CUR_PWM:			break;
		case SERVO_ROLL_CUR_PERC:			servo_setPercnet(SERVO_ROLL, (int8_t)*(uint32_t*)value); break;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	b25b      	sxtb	r3, r3
 800b45a:	4619      	mov	r1, r3
 800b45c:	2000      	movs	r0, #0
 800b45e:	f7ff fcb9 	bl	800add4 <servo_setPercnet>
 800b462:	e03e      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MIN_ANG:			servo_info.servos[SERVO_ROLL].min_ang = *(uint32_t*)value; break;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	b29a      	uxth	r2, r3
 800b46a:	4b20      	ldr	r3, [pc, #128]	; (800b4ec <cfg_NodeServoVarSet+0x110>)
 800b46c:	821a      	strh	r2, [r3, #16]
 800b46e:	e038      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_CENT_ANG:			servo_info.servos[SERVO_ROLL].center_ang = *(uint32_t*)value; break;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	b29a      	uxth	r2, r3
 800b476:	4b1d      	ldr	r3, [pc, #116]	; (800b4ec <cfg_NodeServoVarSet+0x110>)
 800b478:	825a      	strh	r2, [r3, #18]
 800b47a:	e032      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_ROLL_MAX_ANG:			servo_info.servos[SERVO_ROLL].max_ang = *(uint32_t*)value; break;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	b29a      	uxth	r2, r3
 800b482:	4b1a      	ldr	r3, [pc, #104]	; (800b4ec <cfg_NodeServoVarSet+0x110>)
 800b484:	829a      	strh	r2, [r3, #20]
 800b486:	e02c      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_ENA:				servo_setEnable(SERVO_PITCH, (uint8_t)*(uint32_t*)value); break;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	4619      	mov	r1, r3
 800b490:	2001      	movs	r0, #1
 800b492:	f7ff fd07 	bl	800aea4 <servo_setEnable>
 800b496:	e024      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_ANG:			servo_setAng(SERVO_PITCH, (uint16_t)*(uint32_t*)value); break;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4619      	mov	r1, r3
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	f7ff fbe3 	bl	800ac6c <servo_setAng>
 800b4a6:	e01c      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CUR_PWM:			break;
		case SERVO_PITCH_CUR_PERC:			servo_setPercnet(SERVO_PITCH, (int8_t)*(uint32_t*)value); break;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	b25b      	sxtb	r3, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	f7ff fc8f 	bl	800add4 <servo_setPercnet>
 800b4b6:	e014      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MIN_ANG:			servo_info.servos[SERVO_PITCH].min_ang = *(uint32_t*)value; break;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <cfg_NodeServoVarSet+0x110>)
 800b4c0:	851a      	strh	r2, [r3, #40]	; 0x28
 800b4c2:	e00e      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_CENT_ANG:			servo_info.servos[SERVO_PITCH].center_ang = *(uint32_t*)value; break;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <cfg_NodeServoVarSet+0x110>)
 800b4cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4ce:	e008      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		case SERVO_PITCH_MAX_ANG:			servo_info.servos[SERVO_PITCH].max_ang = *(uint32_t*)value; break;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <cfg_NodeServoVarSet+0x110>)
 800b4d8:	859a      	strh	r2, [r3, #44]	; 0x2c
 800b4da:	e002      	b.n	800b4e2 <cfg_NodeServoVarSet+0x106>
		default: return CFG_ERROR_VARID;
 800b4dc:	2302      	movs	r3, #2
 800b4de:	e001      	b.n	800b4e4 <cfg_NodeServoVarSet+0x108>
		case SERVO_ROLL_CUR_PWM:			break;
 800b4e0:	bf00      	nop
	}
	return CFG_ERROR_NONE;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20001078 	.word	0x20001078

0800b4f0 <system_Timer>:
  * @brief  called from SysTick_Handler to update local class time
  * @param  res - time pass in mSec
  * @retval None
  */
void system_Timer(uint32_t res)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	system_time_counter += res;
 800b4f8:	4b20      	ldr	r3, [pc, #128]	; (800b57c <system_Timer+0x8c>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4413      	add	r3, r2
 800b500:	4a1e      	ldr	r2, [pc, #120]	; (800b57c <system_Timer+0x8c>)
 800b502:	6013      	str	r3, [r2, #0]
	leds_Timer(res);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7f8 fcfb 	bl	8003f00 <leds_Timer>
	cfg_Timer(res);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7f7 fa04 	bl	8002918 <cfg_Timer>
	modem_Timer(res);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7fd fc29 	bl	8008d68 <modem_Timer>
	servo_Timer(res);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff fae2 	bl	800aae0 <servo_Timer>
	motor_Timer(res);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7fd ff15 	bl	800934c <motor_Timer>
	rc_Timer(res);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7fe fad6 	bl	8009ad4 <rc_Timer>
	battery_Timer(res);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7f6 fdd7 	bl	80020dc <battery_Timer>
	autopilot_Timer(res);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7f5 fc94 	bl	8000e5c <autopilot_Timer>
	sens_Timer(res);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7fe fe37 	bl	800a1a8 <sens_Timer>

	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]
 800b53e:	e014      	b.n	800b56a <system_Timer+0x7a>
	{
		if( system_info.timer[i] != 0 ){
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	4a0f      	ldr	r2, [pc, #60]	; (800b580 <system_Timer+0x90>)
 800b544:	3312      	adds	r3, #18
 800b546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <system_Timer+0x74>
			system_info.timer[i]--;
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	490b      	ldr	r1, [pc, #44]	; (800b580 <system_Timer+0x90>)
 800b552:	f103 0212 	add.w	r2, r3, #18
 800b556:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b55a:	3a01      	subs	r2, #1
 800b55c:	4908      	ldr	r1, [pc, #32]	; (800b580 <system_Timer+0x90>)
 800b55e:	3312      	adds	r3, #18
 800b560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for( uint8_t i = 0; i < sys_tmr_num; i++ )
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	3301      	adds	r3, #1
 800b568:	73fb      	strb	r3, [r7, #15]
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d9e7      	bls.n	800b540 <system_Timer+0x50>
		}
	}
}
 800b570:	bf00      	nop
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20001108 	.word	0x20001108
 800b580:	200010b8 	.word	0x200010b8

0800b584 <system_Init>:
  * @brief  Full system init after power up
  * @param  None
  * @retval None
  */
void system_Init()
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
	system_info.reset_req = 0;
 800b588:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <system_Init+0x50>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	705a      	strb	r2, [r3, #1]
	leds_InitTask();
 800b58e:	f7f8 fcf3 	bl	8003f78 <leds_InitTask>
	modem_InitTask();
 800b592:	f7fd fc0d 	bl	8008db0 <modem_InitTask>
	servo_InitTask();
 800b596:	f7ff facb 	bl	800ab30 <servo_InitTask>
	motor_InitTask();
 800b59a:	f7fd ff01 	bl	80093a0 <motor_InitTask>
	rc_InitTask();
 800b59e:	f7fe fabd 	bl	8009b1c <rc_InitTask>
	sens_InitTask();
 800b5a2:	f7fe fe25 	bl	800a1f0 <sens_InitTask>
	battery_InitTask(10000);
 800b5a6:	f242 7010 	movw	r0, #10000	; 0x2710
 800b5aa:	f7f6 fdb5 	bl	8002118 <battery_InitTask>
	autopilot_InitTask();
 800b5ae:	f7f5 fc79 	bl	8000ea4 <autopilot_InitTask>
	cfg_InitTask();
 800b5b2:	f7f7 f9e7 	bl	8002984 <cfg_InitTask>
	system_info.usb_rx_flag = 0;
 800b5b6:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <system_Init+0x50>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4905      	ldr	r1, [pc, #20]	; (800b5d8 <system_Init+0x54>)
 800b5c2:	4806      	ldr	r0, [pc, #24]	; (800b5dc <system_Init+0x58>)
 800b5c4:	f005 fab4 	bl	8010b30 <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 800b5c8:	4805      	ldr	r0, [pc, #20]	; (800b5e0 <system_Init+0x5c>)
 800b5ca:	f000 fa05 	bl	800b9d8 <HAL_ADC_Start_IT>
	//leds_setBlink(LED_SIM_BLUE, 200, 1000, 0, 0, 1);
}
 800b5ce:	bf00      	nop
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	200010b8 	.word	0x200010b8
 800b5d8:	2000110c 	.word	0x2000110c
 800b5dc:	20000bb8 	.word	0x20000bb8
 800b5e0:	20000ad4 	.word	0x20000ad4

0800b5e4 <system_Task>:
  * @brief  Full system flow, runs in while loop from main.c file
  * @param  None
  * @retval None
  */
void system_Task(void)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
	uint32_t i;

	leds_Task();
 800b5ea:	f7f9 f845 	bl	8004678 <leds_Task>
	cfg_Task();
 800b5ee:	f7f7 fa2f 	bl	8002a50 <cfg_Task>
	modem_Task();
 800b5f2:	f7fd fbff 	bl	8008df4 <modem_Task>
	motor_Task();
 800b5f6:	f7fd ff1f 	bl	8009438 <motor_Task>
	servo_Task();
 800b5fa:	f7ff fb1b 	bl	800ac34 <servo_Task>
	rc_Task();
 800b5fe:	f7fe fab5 	bl	8009b6c <rc_Task>
	sens_Task();
 800b602:	f7fe fe07 	bl	800a214 <sens_Task>
	battery_Task();
 800b606:	f7f6 fda3 	bl	8002150 <battery_Task>
	autopilot_Task();
 800b60a:	f7f5 fce1 	bl	8000fd0 <autopilot_Task>

	//ADC
	if( (system_info.adc_cplt == 1) && (system_info.timer[sys_tmr_adc] == 0) )
 800b60e:	4b30      	ldr	r3, [pc, #192]	; (800b6d0 <system_Task+0xec>)
 800b610:	789b      	ldrb	r3, [r3, #2]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b01      	cmp	r3, #1
 800b616:	d109      	bne.n	800b62c <system_Task+0x48>
 800b618:	4b2d      	ldr	r3, [pc, #180]	; (800b6d0 <system_Task+0xec>)
 800b61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d105      	bne.n	800b62c <system_Task+0x48>
	{
		system_info.adc_cplt = 0;
 800b620:	4b2b      	ldr	r3, [pc, #172]	; (800b6d0 <system_Task+0xec>)
 800b622:	2200      	movs	r2, #0
 800b624:	709a      	strb	r2, [r3, #2]
		 HAL_ADC_Start_IT(&hadc1);
 800b626:	482b      	ldr	r0, [pc, #172]	; (800b6d4 <system_Task+0xf0>)
 800b628:	f000 f9d6 	bl	800b9d8 <HAL_ADC_Start_IT>
	}

	//UART restart
	if( _system_restart_uart == 1 )
 800b62c:	4b2a      	ldr	r3, [pc, #168]	; (800b6d8 <system_Task+0xf4>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	b2db      	uxtb	r3, r3
 800b632:	2b01      	cmp	r3, #1
 800b634:	d10f      	bne.n	800b656 <system_Task+0x72>
	{
		_system_restart_uart = 0;
 800b636:	4b28      	ldr	r3, [pc, #160]	; (800b6d8 <system_Task+0xf4>)
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
		MX_UARTReInit();
 800b63c:	f7fd f8ac 	bl	8008798 <MX_UARTReInit>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800b640:	2201      	movs	r2, #1
 800b642:	4926      	ldr	r1, [pc, #152]	; (800b6dc <system_Task+0xf8>)
 800b644:	4826      	ldr	r0, [pc, #152]	; (800b6e0 <system_Task+0xfc>)
 800b646:	f005 fa73 	bl	8010b30 <HAL_UART_Receive_IT>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <system_Task+0x72>
			_system_restart_uart = 1;
 800b650:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <system_Task+0xf4>)
 800b652:	2201      	movs	r2, #1
 800b654:	701a      	strb	r2, [r3, #0]
			//system_ErrorHandler();
		}
	}

	//USB Rx
	if( system_info.usb_rx_flag == 1 )
 800b656:	4b1e      	ldr	r3, [pc, #120]	; (800b6d0 <system_Task+0xec>)
 800b658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d118      	bne.n	800b694 <system_Task+0xb0>
	{
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 800b662:	2300      	movs	r3, #0
 800b664:	607b      	str	r3, [r7, #4]
 800b666:	e00c      	b.n	800b682 <system_Task+0x9e>
			cfg_RcvData(CFG_IFACE_CH1_USB, system_info.usb_rx_buf[i]);
 800b668:	4a19      	ldr	r2, [pc, #100]	; (800b6d0 <system_Task+0xec>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4413      	add	r3, r2
 800b66e:	3303      	adds	r3, #3
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	4619      	mov	r1, r3
 800b676:	2001      	movs	r0, #1
 800b678:	f7f7 fe02 	bl	8003280 <cfg_RcvData>
		for( i = 0; i < system_info.usb_rx_len; i++ ){
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3301      	adds	r3, #1
 800b680:	607b      	str	r3, [r7, #4]
 800b682:	4b13      	ldr	r3, [pc, #76]	; (800b6d0 <system_Task+0xec>)
 800b684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d3ed      	bcc.n	800b668 <system_Task+0x84>
		}
		system_info.usb_rx_flag = 0;
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <system_Task+0xec>)
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}

	//System reset
	if( system_info.reset_req == 1 )
 800b694:	4b0e      	ldr	r3, [pc, #56]	; (800b6d0 <system_Task+0xec>)
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d106      	bne.n	800b6ac <system_Task+0xc8>
	{
		system_info.reset_req = 2;
 800b69e:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <system_Task+0xec>)
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	705a      	strb	r2, [r3, #1]
		system_info.timer[sys_tmr_reset] = 500;
 800b6a4:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <system_Task+0xec>)
 800b6a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b6aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	if( (system_info.reset_req == 2) && (system_info.timer[sys_tmr_reset] == 0) )
 800b6ac:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <system_Task+0xec>)
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d108      	bne.n	800b6c8 <system_Task+0xe4>
 800b6b6:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <system_Task+0xec>)
 800b6b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d104      	bne.n	800b6c8 <system_Task+0xe4>
	{
		system_info.reset_req = 0;
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <system_Task+0xec>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	705a      	strb	r2, [r3, #1]
		system_Reset();
 800b6c4:	f00b f850 	bl	8016768 <__system_Reset_veneer>
	}
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	200010b8 	.word	0x200010b8
 800b6d4:	20000ad4 	.word	0x20000ad4
 800b6d8:	2000110d 	.word	0x2000110d
 800b6dc:	2000110c 	.word	0x2000110c
 800b6e0:	20000bb8 	.word	0x20000bb8

0800b6e4 <system_UARTmodemSet115200>:

void system_UARTmodemSet115200()
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
	HAL_UART_Abort_IT(&HAL_MODEM_UART);
 800b6e8:	4807      	ldr	r0, [pc, #28]	; (800b708 <system_UARTmodemSet115200+0x24>)
 800b6ea:	f005 fa51 	bl	8010b90 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&HAL_MODEM_UART);
 800b6ee:	4806      	ldr	r0, [pc, #24]	; (800b708 <system_UARTmodemSet115200+0x24>)
 800b6f0:	f005 f95d 	bl	80109ae <HAL_UART_DeInit>
	MX_USART1_UART_Init115200();
 800b6f4:	f7fd f81a 	bl	800872c <MX_USART1_UART_Init115200>
	HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1);
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	4904      	ldr	r1, [pc, #16]	; (800b70c <system_UARTmodemSet115200+0x28>)
 800b6fc:	4802      	ldr	r0, [pc, #8]	; (800b708 <system_UARTmodemSet115200+0x24>)
 800b6fe:	f005 fa17 	bl	8010b30 <HAL_UART_Receive_IT>
	return;
 800b702:	bf00      	nop
}
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20000bb8 	.word	0x20000bb8
 800b70c:	2000110c 	.word	0x2000110c

0800b710 <system_ModemRxCallback>:
void system_ModemRxCallback(uint8_t channel, uint8_t *data, uint32_t len)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	73fb      	strb	r3, [r7, #15]
	uint32_t i;

	if( channel == SYSTEM_CFG_MODEM_CH )
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d112      	bne.n	800b74a <system_ModemRxCallback+0x3a>
	{
		for( i = 0; i < len; i++ ){
 800b724:	2300      	movs	r3, #0
 800b726:	617b      	str	r3, [r7, #20]
 800b728:	e00a      	b.n	800b740 <system_ModemRxCallback+0x30>
			cfg_RcvData(CFG_IFACE_CH0, data[i]);
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	4413      	add	r3, r2
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	4619      	mov	r1, r3
 800b734:	2000      	movs	r0, #0
 800b736:	f7f7 fda3 	bl	8003280 <cfg_RcvData>
		for( i = 0; i < len; i++ ){
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	3301      	adds	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d3f0      	bcc.n	800b72a <system_ModemRxCallback+0x1a>
			rc_RcvData(data[i]);
		}
	}


	return;
 800b748:	e014      	b.n	800b774 <system_ModemRxCallback+0x64>
	else if( channel == SYSTEM_RC_MODEM_CH )
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d111      	bne.n	800b774 <system_ModemRxCallback+0x64>
		for( i = 0; i < len; i++ ){
 800b750:	2300      	movs	r3, #0
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	e009      	b.n	800b76a <system_ModemRxCallback+0x5a>
			rc_RcvData(data[i]);
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	4413      	add	r3, r2
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fab8 	bl	8009cd4 <rc_RcvData>
		for( i = 0; i < len; i++ ){
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	3301      	adds	r3, #1
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d3f1      	bcc.n	800b756 <system_ModemRxCallback+0x46>
	return;
 800b772:	bf00      	nop
 800b774:	bf00      	nop
}
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <system_ADC_ConvCpltCallback>:

void system_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	if( hadc == &hadc1){
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a14      	ldr	r2, [pc, #80]	; (800b7d8 <system_ADC_ConvCpltCallback+0x5c>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d120      	bne.n	800b7ce <system_ADC_ConvCpltCallback+0x52>
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 800b78c:	4812      	ldr	r0, [pc, #72]	; (800b7d8 <system_ADC_ConvCpltCallback+0x5c>)
 800b78e:	f000 faf1 	bl	800bd74 <HAL_ADC_GetValue>
 800b792:	ee07 0a90 	vmov	s15, r0
 800b796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b7dc <system_ADC_ConvCpltCallback+0x60>
 800b79e:	ee67 7a87 	vmul.f32	s15, s15, s14
										((float)3300 / (float)4095) * (float)BATTERY_MEAS_COEF);
 800b7a2:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800b7a6:	ee67 7a87 	vmul.f32	s15, s15, s14
		battery_info.battery_volatge = (uint16_t)((float)HAL_ADC_GetValue(&hadc1) *
 800b7aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ae:	ee17 3a90 	vmov	r3, s15
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <system_ADC_ConvCpltCallback+0x64>)
 800b7b6:	81da      	strh	r2, [r3, #14]
		battery_info.battery_volatge_updated_flag = 1;
 800b7b8:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <system_ADC_ConvCpltCallback+0x64>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	735a      	strb	r2, [r3, #13]
		system_info.adc_cplt = 1;
 800b7be:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <system_ADC_ConvCpltCallback+0x68>)
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	709a      	strb	r2, [r3, #2]
		system_info.timer[sys_tmr_adc] = 1000;
 800b7c4:	4b07      	ldr	r3, [pc, #28]	; (800b7e4 <system_ADC_ConvCpltCallback+0x68>)
 800b7c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7ca:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	return;
 800b7cc:	bf00      	nop
 800b7ce:	bf00      	nop
}
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20000ad4 	.word	0x20000ad4
 800b7dc:	3f4e4ce5 	.word	0x3f4e4ce5
 800b7e0:	200003b4 	.word	0x200003b4
 800b7e4:	200010b8 	.word	0x200010b8

0800b7e8 <system_UART_RxCpltCallback>:
  * @brief RX interrupt from the uart
  * @param None
  * @retval None
  */
void system_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
	if( huart == &HAL_MODEM_UART )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a0c      	ldr	r2, [pc, #48]	; (800b824 <system_UART_RxCpltCallback+0x3c>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d110      	bne.n	800b81a <system_UART_RxCpltCallback+0x32>
	{
		//cfg_RcvData(CFG_IFACE_CH0, cfg_uart_rx_data);
		modem_RcvData(cfg_uart_rx_data);
 800b7f8:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <system_UART_RxCpltCallback+0x40>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fd fc10 	bl	8009024 <modem_RcvData>
		if( HAL_UART_Receive_IT(&HAL_MODEM_UART, (uint8_t*)&cfg_uart_rx_data, 1) != HAL_OK ){
 800b804:	2201      	movs	r2, #1
 800b806:	4908      	ldr	r1, [pc, #32]	; (800b828 <system_UART_RxCpltCallback+0x40>)
 800b808:	4806      	ldr	r0, [pc, #24]	; (800b824 <system_UART_RxCpltCallback+0x3c>)
 800b80a:	f005 f991 	bl	8010b30 <HAL_UART_Receive_IT>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <system_UART_RxCpltCallback+0x32>
			//system_ErrorHandler();
			_system_restart_uart = 1;
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <system_UART_RxCpltCallback+0x44>)
 800b816:	2201      	movs	r2, #1
 800b818:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000bb8 	.word	0x20000bb8
 800b828:	2000110c 	.word	0x2000110c
 800b82c:	2000110d 	.word	0x2000110d

0800b830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b830:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b834:	480d      	ldr	r0, [pc, #52]	; (800b86c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b836:	490e      	ldr	r1, [pc, #56]	; (800b870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b838:	4a0e      	ldr	r2, [pc, #56]	; (800b874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b83a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b83c:	e002      	b.n	800b844 <LoopCopyDataInit>

0800b83e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b83e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b842:	3304      	adds	r3, #4

0800b844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b848:	d3f9      	bcc.n	800b83e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b84a:	4a0b      	ldr	r2, [pc, #44]	; (800b878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b84c:	4c0b      	ldr	r4, [pc, #44]	; (800b87c <LoopFillZerobss+0x26>)
  movs r3, #0
 800b84e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b850:	e001      	b.n	800b856 <LoopFillZerobss>

0800b852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b854:	3204      	adds	r2, #4

0800b856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b858:	d3fb      	bcc.n	800b852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b85a:	f7fd fa73 	bl	8008d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b85e:	f00a fbc9 	bl	8015ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b862:	f7fc fcfd 	bl	8008260 <main>
  bx  lr    
 800b866:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b86c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b870:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800b874:	08017228 	.word	0x08017228
  ldr r2, =_sbss
 800b878:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800b87c:	20002e78 	.word	0x20002e78

0800b880 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b880:	e7fe      	b.n	800b880 <DMA1_Stream0_IRQHandler>
	...

0800b884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b888:	4b0e      	ldr	r3, [pc, #56]	; (800b8c4 <HAL_Init+0x40>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a0d      	ldr	r2, [pc, #52]	; (800b8c4 <HAL_Init+0x40>)
 800b88e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b894:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <HAL_Init+0x40>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a0a      	ldr	r2, [pc, #40]	; (800b8c4 <HAL_Init+0x40>)
 800b89a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b89e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b8a0:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <HAL_Init+0x40>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a07      	ldr	r2, [pc, #28]	; (800b8c4 <HAL_Init+0x40>)
 800b8a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b8ac:	2003      	movs	r0, #3
 800b8ae:	f000 fd8c 	bl	800c3ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b8b2:	200f      	movs	r0, #15
 800b8b4:	f7fd f976 	bl	8008ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b8b8:	f7fc ffa4 	bl	8008804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	40023c00 	.word	0x40023c00

0800b8c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <HAL_IncTick+0x20>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <HAL_IncTick+0x24>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	4a04      	ldr	r2, [pc, #16]	; (800b8ec <HAL_IncTick+0x24>)
 800b8da:	6013      	str	r3, [r2, #0]
}
 800b8dc:	bf00      	nop
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20000114 	.word	0x20000114
 800b8ec:	20001110 	.word	0x20001110

0800b8f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
  return uwTick;
 800b8f4:	4b03      	ldr	r3, [pc, #12]	; (800b904 <HAL_GetTick+0x14>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	20001110 	.word	0x20001110

0800b908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b910:	f7ff ffee 	bl	800b8f0 <HAL_GetTick>
 800b914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b920:	d005      	beq.n	800b92e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <HAL_Delay+0x44>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4413      	add	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b92e:	bf00      	nop
 800b930:	f7ff ffde 	bl	800b8f0 <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d8f7      	bhi.n	800b930 <HAL_Delay+0x28>
  {
  }
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000114 	.word	0x20000114

0800b950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e033      	b.n	800b9ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7fc ff70 	bl	8008854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	f003 0310 	and.w	r3, r3, #16
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d118      	bne.n	800b9c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b992:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b996:	f023 0302 	bic.w	r3, r3, #2
 800b99a:	f043 0202 	orr.w	r2, r3, #2
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fb3a 	bl	800c01c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	f023 0303 	bic.w	r3, r3, #3
 800b9b6:	f043 0201 	orr.w	r2, r3, #1
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	641a      	str	r2, [r3, #64]	; 0x40
 800b9be:	e001      	b.n	800b9c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d101      	bne.n	800b9f2 <HAL_ADC_Start_IT+0x1a>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	e0a1      	b.n	800bb36 <HAL_ADC_Start_IT+0x15e>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d018      	beq.n	800ba3a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f042 0201 	orr.w	r2, r2, #1
 800ba16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ba18:	4b4a      	ldr	r3, [pc, #296]	; (800bb44 <HAL_ADC_Start_IT+0x16c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a4a      	ldr	r2, [pc, #296]	; (800bb48 <HAL_ADC_Start_IT+0x170>)
 800ba1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba22:	0c9a      	lsrs	r2, r3, #18
 800ba24:	4613      	mov	r3, r2
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	4413      	add	r3, r2
 800ba2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800ba2c:	e002      	b.n	800ba34 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1f9      	bne.n	800ba2e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d169      	bne.n	800bb1c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800ba50:	f023 0301 	bic.w	r3, r3, #1
 800ba54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ba72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba86:	d106      	bne.n	800ba96 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8c:	f023 0206 	bic.w	r2, r3, #6
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	645a      	str	r2, [r3, #68]	; 0x44
 800ba94:	e002      	b.n	800ba9c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800baa4:	4b29      	ldr	r3, [pc, #164]	; (800bb4c <HAL_ADC_Start_IT+0x174>)
 800baa6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800bab0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	6812      	ldr	r2, [r2, #0]
 800babc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bac0:	f043 0320 	orr.w	r3, r3, #32
 800bac4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f003 031f 	and.w	r3, r3, #31
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10f      	bne.n	800baf2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d129      	bne.n	800bb34 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689a      	ldr	r2, [r3, #8]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800baee:	609a      	str	r2, [r3, #8]
 800baf0:	e020      	b.n	800bb34 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a16      	ldr	r2, [pc, #88]	; (800bb50 <HAL_ADC_Start_IT+0x178>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d11b      	bne.n	800bb34 <HAL_ADC_Start_IT+0x15c>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d114      	bne.n	800bb34 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689a      	ldr	r2, [r3, #8]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bb18:	609a      	str	r2, [r3, #8]
 800bb1a:	e00b      	b.n	800bb34 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb20:	f043 0210 	orr.w	r2, r3, #16
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2c:	f043 0201 	orr.w	r2, r3, #1
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	2000010c 	.word	0x2000010c
 800bb48:	431bde83 	.word	0x431bde83
 800bb4c:	40012300 	.word	0x40012300
 800bb50:	40012000 	.word	0x40012000

0800bb54 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	617b      	str	r3, [r7, #20]
 800bb60:	2300      	movs	r3, #0
 800bb62:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f003 0302 	and.w	r3, r3, #2
 800bb7a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f003 0320 	and.w	r3, r3, #32
 800bb82:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d049      	beq.n	800bc1e <HAL_ADC_IRQHandler+0xca>
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d046      	beq.n	800bc1e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d105      	bne.n	800bba8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d12b      	bne.n	800bc0e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d127      	bne.n	800bc0e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d006      	beq.n	800bbda <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d119      	bne.n	800bc0e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 0220 	bic.w	r2, r2, #32
 800bbe8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d105      	bne.n	800bc0e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	f043 0201 	orr.w	r2, r3, #1
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fc fdce 	bl	80087b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f06f 0212 	mvn.w	r2, #18
 800bc1c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc2c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d057      	beq.n	800bce4 <HAL_ADC_IRQHandler+0x190>
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d054      	beq.n	800bce4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	f003 0310 	and.w	r3, r3, #16
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d105      	bne.n	800bc52 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d139      	bne.n	800bcd4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d006      	beq.n	800bc7c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d12b      	bne.n	800bcd4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d124      	bne.n	800bcd4 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d11d      	bne.n	800bcd4 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d119      	bne.n	800bcd4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d105      	bne.n	800bcd4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	f043 0201 	orr.w	r2, r3, #1
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fa9d 	bl	800c214 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f06f 020c 	mvn.w	r2, #12
 800bce2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d017      	beq.n	800bd2a <HAL_ADC_IRQHandler+0x1d6>
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d014      	beq.n	800bd2a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f003 0301 	and.w	r3, r3, #1
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d10d      	bne.n	800bd2a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f837 	bl	800bd8e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f06f 0201 	mvn.w	r2, #1
 800bd28:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f003 0320 	and.w	r3, r3, #32
 800bd30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd38:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d015      	beq.n	800bd6c <HAL_ADC_IRQHandler+0x218>
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d012      	beq.n	800bd6c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4a:	f043 0202 	orr.w	r2, r3, #2
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f06f 0220 	mvn.w	r2, #32
 800bd5a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f820 	bl	800bda2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f06f 0220 	mvn.w	r2, #32
 800bd6a:	601a      	str	r2, [r3, #0]
  }
}
 800bd6c:	bf00      	nop
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d101      	bne.n	800bdd4 <HAL_ADC_ConfigChannel+0x1c>
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	e113      	b.n	800bffc <HAL_ADC_ConfigChannel+0x244>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b09      	cmp	r3, #9
 800bde2:	d925      	bls.n	800be30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68d9      	ldr	r1, [r3, #12]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	4413      	add	r3, r2
 800bdf8:	3b1e      	subs	r3, #30
 800bdfa:	2207      	movs	r2, #7
 800bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800be00:	43da      	mvns	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	400a      	ands	r2, r1
 800be08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68d9      	ldr	r1, [r3, #12]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4618      	mov	r0, r3
 800be1c:	4603      	mov	r3, r0
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4403      	add	r3, r0
 800be22:	3b1e      	subs	r3, #30
 800be24:	409a      	lsls	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	60da      	str	r2, [r3, #12]
 800be2e:	e022      	b.n	800be76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6919      	ldr	r1, [r3, #16]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	461a      	mov	r2, r3
 800be3e:	4613      	mov	r3, r2
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4413      	add	r3, r2
 800be44:	2207      	movs	r2, #7
 800be46:	fa02 f303 	lsl.w	r3, r2, r3
 800be4a:	43da      	mvns	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	400a      	ands	r2, r1
 800be52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6919      	ldr	r1, [r3, #16]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	689a      	ldr	r2, [r3, #8]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	b29b      	uxth	r3, r3
 800be64:	4618      	mov	r0, r3
 800be66:	4603      	mov	r3, r0
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4403      	add	r3, r0
 800be6c:	409a      	lsls	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	2b06      	cmp	r3, #6
 800be7c:	d824      	bhi.n	800bec8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	3b05      	subs	r3, #5
 800be90:	221f      	movs	r2, #31
 800be92:	fa02 f303 	lsl.w	r3, r2, r3
 800be96:	43da      	mvns	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	400a      	ands	r2, r1
 800be9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	4618      	mov	r0, r3
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	4613      	mov	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4413      	add	r3, r2
 800beb8:	3b05      	subs	r3, #5
 800beba:	fa00 f203 	lsl.w	r2, r0, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	635a      	str	r2, [r3, #52]	; 0x34
 800bec6:	e04c      	b.n	800bf62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	2b0c      	cmp	r3, #12
 800bece:	d824      	bhi.n	800bf1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	4613      	mov	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	3b23      	subs	r3, #35	; 0x23
 800bee2:	221f      	movs	r2, #31
 800bee4:	fa02 f303 	lsl.w	r3, r2, r3
 800bee8:	43da      	mvns	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	400a      	ands	r2, r1
 800bef0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	b29b      	uxth	r3, r3
 800befe:	4618      	mov	r0, r3
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	3b23      	subs	r3, #35	; 0x23
 800bf0c:	fa00 f203 	lsl.w	r2, r0, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	631a      	str	r2, [r3, #48]	; 0x30
 800bf18:	e023      	b.n	800bf62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	3b41      	subs	r3, #65	; 0x41
 800bf2c:	221f      	movs	r2, #31
 800bf2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf32:	43da      	mvns	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	400a      	ands	r2, r1
 800bf3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	4618      	mov	r0, r3
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	3b41      	subs	r3, #65	; 0x41
 800bf56:	fa00 f203 	lsl.w	r2, r0, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bf62:	4b29      	ldr	r3, [pc, #164]	; (800c008 <HAL_ADC_ConfigChannel+0x250>)
 800bf64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a28      	ldr	r2, [pc, #160]	; (800c00c <HAL_ADC_ConfigChannel+0x254>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d10f      	bne.n	800bf90 <HAL_ADC_ConfigChannel+0x1d8>
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b12      	cmp	r3, #18
 800bf76:	d10b      	bne.n	800bf90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a1d      	ldr	r2, [pc, #116]	; (800c00c <HAL_ADC_ConfigChannel+0x254>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d12b      	bne.n	800bff2 <HAL_ADC_ConfigChannel+0x23a>
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a1c      	ldr	r2, [pc, #112]	; (800c010 <HAL_ADC_ConfigChannel+0x258>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d003      	beq.n	800bfac <HAL_ADC_ConfigChannel+0x1f4>
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b11      	cmp	r3, #17
 800bfaa:	d122      	bne.n	800bff2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a11      	ldr	r2, [pc, #68]	; (800c010 <HAL_ADC_ConfigChannel+0x258>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d111      	bne.n	800bff2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bfce:	4b11      	ldr	r3, [pc, #68]	; (800c014 <HAL_ADC_ConfigChannel+0x25c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a11      	ldr	r2, [pc, #68]	; (800c018 <HAL_ADC_ConfigChannel+0x260>)
 800bfd4:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd8:	0c9a      	lsrs	r2, r3, #18
 800bfda:	4613      	mov	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4413      	add	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bfe4:	e002      	b.n	800bfec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f9      	bne.n	800bfe6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	40012300 	.word	0x40012300
 800c00c:	40012000 	.word	0x40012000
 800c010:	10000012 	.word	0x10000012
 800c014:	2000010c 	.word	0x2000010c
 800c018:	431bde83 	.word	0x431bde83

0800c01c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c024:	4b79      	ldr	r3, [pc, #484]	; (800c20c <ADC_Init+0x1f0>)
 800c026:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	685a      	ldr	r2, [r3, #4]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	431a      	orrs	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6859      	ldr	r1, [r3, #4]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	021a      	lsls	r2, r3, #8
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6859      	ldr	r1, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6899      	ldr	r1, [r3, #8]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68da      	ldr	r2, [r3, #12]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	430a      	orrs	r2, r1
 800c0a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ae:	4a58      	ldr	r2, [pc, #352]	; (800c210 <ADC_Init+0x1f4>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d022      	beq.n	800c0fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c0c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6899      	ldr	r1, [r3, #8]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	689a      	ldr	r2, [r3, #8]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c0e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6899      	ldr	r1, [r3, #8]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	609a      	str	r2, [r3, #8]
 800c0f8:	e00f      	b.n	800c11a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c118:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	689a      	ldr	r2, [r3, #8]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0202 	bic.w	r2, r2, #2
 800c128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6899      	ldr	r1, [r3, #8]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	7e1b      	ldrb	r3, [r3, #24]
 800c134:	005a      	lsls	r2, r3, #1
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d01b      	beq.n	800c180 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c156:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c166:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6859      	ldr	r1, [r3, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	3b01      	subs	r3, #1
 800c174:	035a      	lsls	r2, r3, #13
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	605a      	str	r2, [r3, #4]
 800c17e:	e007      	b.n	800c190 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c18e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c19e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	69db      	ldr	r3, [r3, #28]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	051a      	lsls	r2, r3, #20
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c1c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6899      	ldr	r1, [r3, #8]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1d2:	025a      	lsls	r2, r3, #9
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689a      	ldr	r2, [r3, #8]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6899      	ldr	r1, [r3, #8]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	029a      	lsls	r2, r3, #10
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	609a      	str	r2, [r3, #8]
}
 800c200:	bf00      	nop
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	40012300 	.word	0x40012300
 800c210:	0f000001 	.word	0x0f000001

0800c214 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f003 0307 	and.w	r3, r3, #7
 800c236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <__NVIC_SetPriorityGrouping+0x44>)
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c244:	4013      	ands	r3, r2
 800c246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c25a:	4a04      	ldr	r2, [pc, #16]	; (800c26c <__NVIC_SetPriorityGrouping+0x44>)
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	60d3      	str	r3, [r2, #12]
}
 800c260:	bf00      	nop
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	e000ed00 	.word	0xe000ed00

0800c270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c274:	4b04      	ldr	r3, [pc, #16]	; (800c288 <__NVIC_GetPriorityGrouping+0x18>)
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	0a1b      	lsrs	r3, r3, #8
 800c27a:	f003 0307 	and.w	r3, r3, #7
}
 800c27e:	4618      	mov	r0, r3
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	e000ed00 	.word	0xe000ed00

0800c28c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	db0b      	blt.n	800c2b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	f003 021f 	and.w	r2, r3, #31
 800c2a4:	4907      	ldr	r1, [pc, #28]	; (800c2c4 <__NVIC_EnableIRQ+0x38>)
 800c2a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	2001      	movs	r0, #1
 800c2ae:	fa00 f202 	lsl.w	r2, r0, r2
 800c2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	e000e100 	.word	0xe000e100

0800c2c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	db12      	blt.n	800c300 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c2da:	79fb      	ldrb	r3, [r7, #7]
 800c2dc:	f003 021f 	and.w	r2, r3, #31
 800c2e0:	490a      	ldr	r1, [pc, #40]	; (800c30c <__NVIC_DisableIRQ+0x44>)
 800c2e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2e6:	095b      	lsrs	r3, r3, #5
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	fa00 f202 	lsl.w	r2, r0, r2
 800c2ee:	3320      	adds	r3, #32
 800c2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c2f4:	f3bf 8f4f 	dsb	sy
}
 800c2f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c2fa:	f3bf 8f6f 	isb	sy
}
 800c2fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	e000e100 	.word	0xe000e100

0800c310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c320:	2b00      	cmp	r3, #0
 800c322:	db0a      	blt.n	800c33a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	b2da      	uxtb	r2, r3
 800c328:	490c      	ldr	r1, [pc, #48]	; (800c35c <__NVIC_SetPriority+0x4c>)
 800c32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c32e:	0112      	lsls	r2, r2, #4
 800c330:	b2d2      	uxtb	r2, r2
 800c332:	440b      	add	r3, r1
 800c334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c338:	e00a      	b.n	800c350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4908      	ldr	r1, [pc, #32]	; (800c360 <__NVIC_SetPriority+0x50>)
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	3b04      	subs	r3, #4
 800c348:	0112      	lsls	r2, r2, #4
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	440b      	add	r3, r1
 800c34e:	761a      	strb	r2, [r3, #24]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	e000e100 	.word	0xe000e100
 800c360:	e000ed00 	.word	0xe000ed00

0800c364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c364:	b480      	push	{r7}
 800c366:	b089      	sub	sp, #36	; 0x24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f003 0307 	and.w	r3, r3, #7
 800c376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	f1c3 0307 	rsb	r3, r3, #7
 800c37e:	2b04      	cmp	r3, #4
 800c380:	bf28      	it	cs
 800c382:	2304      	movcs	r3, #4
 800c384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	3304      	adds	r3, #4
 800c38a:	2b06      	cmp	r3, #6
 800c38c:	d902      	bls.n	800c394 <NVIC_EncodePriority+0x30>
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	3b03      	subs	r3, #3
 800c392:	e000      	b.n	800c396 <NVIC_EncodePriority+0x32>
 800c394:	2300      	movs	r3, #0
 800c396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c398:	f04f 32ff 	mov.w	r2, #4294967295
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a2:	43da      	mvns	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3b6:	43d9      	mvns	r1, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c3bc:	4313      	orrs	r3, r2
         );
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3724      	adds	r7, #36	; 0x24
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b082      	sub	sp, #8
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff ff28 	bl	800c228 <__NVIC_SetPriorityGrouping>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c3f2:	f7ff ff3d 	bl	800c270 <__NVIC_GetPriorityGrouping>
 800c3f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	6978      	ldr	r0, [r7, #20]
 800c3fe:	f7ff ffb1 	bl	800c364 <NVIC_EncodePriority>
 800c402:	4602      	mov	r2, r0
 800c404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7ff ff80 	bl	800c310 <__NVIC_SetPriority>
}
 800c410:	bf00      	nop
 800c412:	3718      	adds	r7, #24
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff ff30 	bl	800c28c <__NVIC_EnableIRQ>
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c43e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff ff40 	bl	800c2c8 <__NVIC_DisableIRQ>
}
 800c448:	bf00      	nop
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c45c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c45e:	f7ff fa47 	bl	800b8f0 <HAL_GetTick>
 800c462:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d008      	beq.n	800c482 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2280      	movs	r2, #128	; 0x80
 800c474:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	e052      	b.n	800c528 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f022 0216 	bic.w	r2, r2, #22
 800c490:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	695a      	ldr	r2, [r3, #20]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d103      	bne.n	800c4b2 <HAL_DMA_Abort+0x62>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d007      	beq.n	800c4c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f022 0208 	bic.w	r2, r2, #8
 800c4c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f022 0201 	bic.w	r2, r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c4d2:	e013      	b.n	800c4fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c4d4:	f7ff fa0c 	bl	800b8f0 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	2b05      	cmp	r3, #5
 800c4e0:	d90c      	bls.n	800c4fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2203      	movs	r2, #3
 800c4ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e015      	b.n	800c528 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1e4      	bne.n	800c4d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c50e:	223f      	movs	r2, #63	; 0x3f
 800c510:	409a      	lsls	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	2b02      	cmp	r3, #2
 800c542:	d004      	beq.n	800c54e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2280      	movs	r2, #128	; 0x80
 800c548:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e00c      	b.n	800c568 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2205      	movs	r2, #5
 800c552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f022 0201 	bic.w	r2, r2, #1
 800c564:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c586:	4b23      	ldr	r3, [pc, #140]	; (800c614 <HAL_FLASH_Program+0xa0>)
 800c588:	7e1b      	ldrb	r3, [r3, #24]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d101      	bne.n	800c592 <HAL_FLASH_Program+0x1e>
 800c58e:	2302      	movs	r3, #2
 800c590:	e03b      	b.n	800c60a <HAL_FLASH_Program+0x96>
 800c592:	4b20      	ldr	r3, [pc, #128]	; (800c614 <HAL_FLASH_Program+0xa0>)
 800c594:	2201      	movs	r2, #1
 800c596:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c598:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c59c:	f000 f870 	bl	800c680 <FLASH_WaitForLastOperation>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d12b      	bne.n	800c602 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d105      	bne.n	800c5bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800c5b0:	783b      	ldrb	r3, [r7, #0]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	68b8      	ldr	r0, [r7, #8]
 800c5b6:	f000 f91b 	bl	800c7f0 <FLASH_Program_Byte>
 800c5ba:	e016      	b.n	800c5ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d105      	bne.n	800c5ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800c5c2:	883b      	ldrh	r3, [r7, #0]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	68b8      	ldr	r0, [r7, #8]
 800c5c8:	f000 f8ee 	bl	800c7a8 <FLASH_Program_HalfWord>
 800c5cc:	e00d      	b.n	800c5ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d105      	bne.n	800c5e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	68b8      	ldr	r0, [r7, #8]
 800c5da:	f000 f8c3 	bl	800c764 <FLASH_Program_Word>
 800c5de:	e004      	b.n	800c5ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800c5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5e4:	68b8      	ldr	r0, [r7, #8]
 800c5e6:	f000 f88b 	bl	800c700 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c5ee:	f000 f847 	bl	800c680 <FLASH_WaitForLastOperation>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800c5f6:	4b08      	ldr	r3, [pc, #32]	; (800c618 <HAL_FLASH_Program+0xa4>)
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	4a07      	ldr	r2, [pc, #28]	; (800c618 <HAL_FLASH_Program+0xa4>)
 800c5fc:	f023 0301 	bic.w	r3, r3, #1
 800c600:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c602:	4b04      	ldr	r3, [pc, #16]	; (800c614 <HAL_FLASH_Program+0xa0>)
 800c604:	2200      	movs	r2, #0
 800c606:	761a      	strb	r2, [r3, #24]
  
  return status;
 800c608:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20001114 	.word	0x20001114
 800c618:	40023c00 	.word	0x40023c00

0800c61c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <HAL_FLASH_Unlock+0x38>)
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	da0b      	bge.n	800c646 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c62e:	4b09      	ldr	r3, [pc, #36]	; (800c654 <HAL_FLASH_Unlock+0x38>)
 800c630:	4a09      	ldr	r2, [pc, #36]	; (800c658 <HAL_FLASH_Unlock+0x3c>)
 800c632:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c634:	4b07      	ldr	r3, [pc, #28]	; (800c654 <HAL_FLASH_Unlock+0x38>)
 800c636:	4a09      	ldr	r2, [pc, #36]	; (800c65c <HAL_FLASH_Unlock+0x40>)
 800c638:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800c63a:	4b06      	ldr	r3, [pc, #24]	; (800c654 <HAL_FLASH_Unlock+0x38>)
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	da01      	bge.n	800c646 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c646:	79fb      	ldrb	r3, [r7, #7]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	40023c00 	.word	0x40023c00
 800c658:	45670123 	.word	0x45670123
 800c65c:	cdef89ab 	.word	0xcdef89ab

0800c660 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c660:	b480      	push	{r7}
 800c662:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800c664:	4b05      	ldr	r3, [pc, #20]	; (800c67c <HAL_FLASH_Lock+0x1c>)
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	4a04      	ldr	r2, [pc, #16]	; (800c67c <HAL_FLASH_Lock+0x1c>)
 800c66a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c66e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	40023c00 	.word	0x40023c00

0800c680 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c68c:	4b1a      	ldr	r3, [pc, #104]	; (800c6f8 <FLASH_WaitForLastOperation+0x78>)
 800c68e:	2200      	movs	r2, #0
 800c690:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800c692:	f7ff f92d 	bl	800b8f0 <HAL_GetTick>
 800c696:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c698:	e010      	b.n	800c6bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a0:	d00c      	beq.n	800c6bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <FLASH_WaitForLastOperation+0x38>
 800c6a8:	f7ff f922 	bl	800b8f0 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d201      	bcs.n	800c6bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800c6b8:	2303      	movs	r3, #3
 800c6ba:	e019      	b.n	800c6f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <FLASH_WaitForLastOperation+0x7c>)
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1e8      	bne.n	800c69a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c6c8:	4b0c      	ldr	r3, [pc, #48]	; (800c6fc <FLASH_WaitForLastOperation+0x7c>)
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c6d4:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <FLASH_WaitForLastOperation+0x7c>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800c6da:	4b08      	ldr	r3, [pc, #32]	; (800c6fc <FLASH_WaitForLastOperation+0x7c>)
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800c6e6:	f000 f8a5 	bl	800c834 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e000      	b.n	800c6f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
  
}  
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20001114 	.word	0x20001114
 800c6fc:	40023c00 	.word	0x40023c00

0800c700 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c70c:	4b14      	ldr	r3, [pc, #80]	; (800c760 <FLASH_Program_DoubleWord+0x60>)
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	4a13      	ldr	r2, [pc, #76]	; (800c760 <FLASH_Program_DoubleWord+0x60>)
 800c712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c718:	4b11      	ldr	r3, [pc, #68]	; (800c760 <FLASH_Program_DoubleWord+0x60>)
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	4a10      	ldr	r2, [pc, #64]	; (800c760 <FLASH_Program_DoubleWord+0x60>)
 800c71e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c722:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <FLASH_Program_DoubleWord+0x60>)
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	4a0d      	ldr	r2, [pc, #52]	; (800c760 <FLASH_Program_DoubleWord+0x60>)
 800c72a:	f043 0301 	orr.w	r3, r3, #1
 800c72e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c736:	f3bf 8f6f 	isb	sy
}
 800c73a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c73c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c740:	f04f 0200 	mov.w	r2, #0
 800c744:	f04f 0300 	mov.w	r3, #0
 800c748:	000a      	movs	r2, r1
 800c74a:	2300      	movs	r3, #0
 800c74c:	68f9      	ldr	r1, [r7, #12]
 800c74e:	3104      	adds	r1, #4
 800c750:	4613      	mov	r3, r2
 800c752:	600b      	str	r3, [r1, #0]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	40023c00 	.word	0x40023c00

0800c764 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c76e:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <FLASH_Program_Word+0x40>)
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	4a0c      	ldr	r2, [pc, #48]	; (800c7a4 <FLASH_Program_Word+0x40>)
 800c774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c778:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c77a:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <FLASH_Program_Word+0x40>)
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	4a09      	ldr	r2, [pc, #36]	; (800c7a4 <FLASH_Program_Word+0x40>)
 800c780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c784:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c786:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <FLASH_Program_Word+0x40>)
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	4a06      	ldr	r2, [pc, #24]	; (800c7a4 <FLASH_Program_Word+0x40>)
 800c78c:	f043 0301 	orr.w	r3, r3, #1
 800c790:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	601a      	str	r2, [r3, #0]
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	40023c00 	.word	0x40023c00

0800c7a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c7b4:	4b0d      	ldr	r3, [pc, #52]	; (800c7ec <FLASH_Program_HalfWord+0x44>)
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <FLASH_Program_HalfWord+0x44>)
 800c7ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c7c0:	4b0a      	ldr	r3, [pc, #40]	; (800c7ec <FLASH_Program_HalfWord+0x44>)
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	4a09      	ldr	r2, [pc, #36]	; (800c7ec <FLASH_Program_HalfWord+0x44>)
 800c7c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c7cc:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <FLASH_Program_HalfWord+0x44>)
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	4a06      	ldr	r2, [pc, #24]	; (800c7ec <FLASH_Program_HalfWord+0x44>)
 800c7d2:	f043 0301 	orr.w	r3, r3, #1
 800c7d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	887a      	ldrh	r2, [r7, #2]
 800c7dc:	801a      	strh	r2, [r3, #0]
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	40023c00 	.word	0x40023c00

0800c7f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c7fc:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <FLASH_Program_Byte+0x40>)
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	4a0b      	ldr	r2, [pc, #44]	; (800c830 <FLASH_Program_Byte+0x40>)
 800c802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c806:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c808:	4b09      	ldr	r3, [pc, #36]	; (800c830 <FLASH_Program_Byte+0x40>)
 800c80a:	4a09      	ldr	r2, [pc, #36]	; (800c830 <FLASH_Program_Byte+0x40>)
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <FLASH_Program_Byte+0x40>)
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	4a06      	ldr	r2, [pc, #24]	; (800c830 <FLASH_Program_Byte+0x40>)
 800c816:	f043 0301 	orr.w	r3, r3, #1
 800c81a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	78fa      	ldrb	r2, [r7, #3]
 800c820:	701a      	strb	r2, [r3, #0]
}
 800c822:	bf00      	nop
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	40023c00 	.word	0x40023c00

0800c834 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800c834:	b480      	push	{r7}
 800c836:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c838:	4b2f      	ldr	r3, [pc, #188]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f003 0310 	and.w	r3, r3, #16
 800c840:	2b00      	cmp	r3, #0
 800c842:	d008      	beq.n	800c856 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c844:	4b2d      	ldr	r3, [pc, #180]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c846:	69db      	ldr	r3, [r3, #28]
 800c848:	f043 0310 	orr.w	r3, r3, #16
 800c84c:	4a2b      	ldr	r2, [pc, #172]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c84e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c850:	4b29      	ldr	r3, [pc, #164]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c852:	2210      	movs	r2, #16
 800c854:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c856:	4b28      	ldr	r3, [pc, #160]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	f003 0320 	and.w	r3, r3, #32
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d008      	beq.n	800c874 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c862:	4b26      	ldr	r3, [pc, #152]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	f043 0308 	orr.w	r3, r3, #8
 800c86a:	4a24      	ldr	r2, [pc, #144]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c86c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800c86e:	4b22      	ldr	r3, [pc, #136]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c870:	2220      	movs	r2, #32
 800c872:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c874:	4b20      	ldr	r3, [pc, #128]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d008      	beq.n	800c892 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c880:	4b1e      	ldr	r3, [pc, #120]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c882:	69db      	ldr	r3, [r3, #28]
 800c884:	f043 0304 	orr.w	r3, r3, #4
 800c888:	4a1c      	ldr	r2, [pc, #112]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c88a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800c88c:	4b1a      	ldr	r3, [pc, #104]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c88e:	2240      	movs	r2, #64	; 0x40
 800c890:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800c892:	4b19      	ldr	r3, [pc, #100]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800c89e:	4b17      	ldr	r3, [pc, #92]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	f043 0302 	orr.w	r3, r3, #2
 800c8a6:	4a15      	ldr	r2, [pc, #84]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c8a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800c8aa:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c8ac:	2280      	movs	r2, #128	; 0x80
 800c8ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800c8b0:	4b11      	ldr	r3, [pc, #68]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d009      	beq.n	800c8d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800c8bc:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c8be:	69db      	ldr	r3, [r3, #28]
 800c8c0:	f043 0301 	orr.w	r3, r3, #1
 800c8c4:	4a0d      	ldr	r2, [pc, #52]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c8c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c8ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c8d0:	4b09      	ldr	r3, [pc, #36]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	f003 0302 	and.w	r3, r3, #2
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d008      	beq.n	800c8ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c8dc:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c8de:	69db      	ldr	r3, [r3, #28]
 800c8e0:	f043 0320 	orr.w	r3, r3, #32
 800c8e4:	4a05      	ldr	r2, [pc, #20]	; (800c8fc <FLASH_SetErrorCode+0xc8>)
 800c8e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800c8e8:	4b03      	ldr	r3, [pc, #12]	; (800c8f8 <FLASH_SetErrorCode+0xc4>)
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	60da      	str	r2, [r3, #12]
  }
}
 800c8ee:	bf00      	nop
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	40023c00 	.word	0x40023c00
 800c8fc:	20001114 	.word	0x20001114

0800c900 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c910:	78fb      	ldrb	r3, [r7, #3]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d102      	bne.n	800c91c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800c916:	2300      	movs	r3, #0
 800c918:	60fb      	str	r3, [r7, #12]
 800c91a:	e010      	b.n	800c93e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c91c:	78fb      	ldrb	r3, [r7, #3]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d103      	bne.n	800c92a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c922:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e009      	b.n	800c93e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d103      	bne.n	800c938 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c930:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	e002      	b.n	800c93e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c938:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c93c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c93e:	4b13      	ldr	r3, [pc, #76]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	4a12      	ldr	r2, [pc, #72]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c948:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800c94a:	4b10      	ldr	r3, [pc, #64]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c94c:	691a      	ldr	r2, [r3, #16]
 800c94e:	490f      	ldr	r1, [pc, #60]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	4313      	orrs	r3, r2
 800c954:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c956:	4b0d      	ldr	r3, [pc, #52]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	4a0c      	ldr	r2, [pc, #48]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c95c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c960:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c962:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c964:	691a      	ldr	r2, [r3, #16]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	00db      	lsls	r3, r3, #3
 800c96a:	4313      	orrs	r3, r2
 800c96c:	4a07      	ldr	r2, [pc, #28]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c974:	4b05      	ldr	r3, [pc, #20]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	4a04      	ldr	r2, [pc, #16]	; (800c98c <FLASH_Erase_Sector+0x8c>)
 800c97a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c97e:	6113      	str	r3, [r2, #16]
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	40023c00 	.word	0x40023c00

0800c990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c990:	b480      	push	{r7}
 800c992:	b089      	sub	sp, #36	; 0x24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	61fb      	str	r3, [r7, #28]
 800c9aa:	e159      	b.n	800cc60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4013      	ands	r3, r2
 800c9be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	f040 8148 	bne.w	800cc5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f003 0303 	and.w	r3, r3, #3
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d005      	beq.n	800c9e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d130      	bne.n	800ca44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	2203      	movs	r2, #3
 800c9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f2:	43db      	mvns	r3, r3
 800c9f4:	69ba      	ldr	r2, [r7, #24]
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	005b      	lsls	r3, r3, #1
 800ca02:	fa02 f303 	lsl.w	r3, r2, r3
 800ca06:	69ba      	ldr	r2, [r7, #24]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ca18:	2201      	movs	r2, #1
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca20:	43db      	mvns	r3, r3
 800ca22:	69ba      	ldr	r2, [r7, #24]
 800ca24:	4013      	ands	r3, r2
 800ca26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	091b      	lsrs	r3, r3, #4
 800ca2e:	f003 0201 	and.w	r2, r3, #1
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	fa02 f303 	lsl.w	r3, r2, r3
 800ca38:	69ba      	ldr	r2, [r7, #24]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	69ba      	ldr	r2, [r7, #24]
 800ca42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	f003 0303 	and.w	r3, r3, #3
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d017      	beq.n	800ca80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	2203      	movs	r2, #3
 800ca5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca60:	43db      	mvns	r3, r3
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	4013      	ands	r3, r2
 800ca66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	689a      	ldr	r2, [r3, #8]
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	005b      	lsls	r3, r3, #1
 800ca70:	fa02 f303 	lsl.w	r3, r2, r3
 800ca74:	69ba      	ldr	r2, [r7, #24]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69ba      	ldr	r2, [r7, #24]
 800ca7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f003 0303 	and.w	r3, r3, #3
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d123      	bne.n	800cad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	08da      	lsrs	r2, r3, #3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3208      	adds	r2, #8
 800ca94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	f003 0307 	and.w	r3, r3, #7
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	220f      	movs	r2, #15
 800caa4:	fa02 f303 	lsl.w	r3, r2, r3
 800caa8:	43db      	mvns	r3, r3
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	4013      	ands	r3, r2
 800caae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	691a      	ldr	r2, [r3, #16]
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	fa02 f303 	lsl.w	r3, r2, r3
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	08da      	lsrs	r2, r3, #3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3208      	adds	r2, #8
 800cace:	69b9      	ldr	r1, [r7, #24]
 800cad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	2203      	movs	r2, #3
 800cae0:	fa02 f303 	lsl.w	r3, r2, r3
 800cae4:	43db      	mvns	r3, r3
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	4013      	ands	r3, r2
 800caea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	f003 0203 	and.w	r2, r3, #3
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cafc:	69ba      	ldr	r2, [r7, #24]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	69ba      	ldr	r2, [r7, #24]
 800cb06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 80a2 	beq.w	800cc5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb16:	2300      	movs	r3, #0
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	4b57      	ldr	r3, [pc, #348]	; (800cc78 <HAL_GPIO_Init+0x2e8>)
 800cb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb1e:	4a56      	ldr	r2, [pc, #344]	; (800cc78 <HAL_GPIO_Init+0x2e8>)
 800cb20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cb24:	6453      	str	r3, [r2, #68]	; 0x44
 800cb26:	4b54      	ldr	r3, [pc, #336]	; (800cc78 <HAL_GPIO_Init+0x2e8>)
 800cb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb32:	4a52      	ldr	r2, [pc, #328]	; (800cc7c <HAL_GPIO_Init+0x2ec>)
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	089b      	lsrs	r3, r3, #2
 800cb38:	3302      	adds	r3, #2
 800cb3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f003 0303 	and.w	r3, r3, #3
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	220f      	movs	r2, #15
 800cb4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb4e:	43db      	mvns	r3, r3
 800cb50:	69ba      	ldr	r2, [r7, #24]
 800cb52:	4013      	ands	r3, r2
 800cb54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a49      	ldr	r2, [pc, #292]	; (800cc80 <HAL_GPIO_Init+0x2f0>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d019      	beq.n	800cb92 <HAL_GPIO_Init+0x202>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a48      	ldr	r2, [pc, #288]	; (800cc84 <HAL_GPIO_Init+0x2f4>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d013      	beq.n	800cb8e <HAL_GPIO_Init+0x1fe>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a47      	ldr	r2, [pc, #284]	; (800cc88 <HAL_GPIO_Init+0x2f8>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d00d      	beq.n	800cb8a <HAL_GPIO_Init+0x1fa>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a46      	ldr	r2, [pc, #280]	; (800cc8c <HAL_GPIO_Init+0x2fc>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d007      	beq.n	800cb86 <HAL_GPIO_Init+0x1f6>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a45      	ldr	r2, [pc, #276]	; (800cc90 <HAL_GPIO_Init+0x300>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d101      	bne.n	800cb82 <HAL_GPIO_Init+0x1f2>
 800cb7e:	2304      	movs	r3, #4
 800cb80:	e008      	b.n	800cb94 <HAL_GPIO_Init+0x204>
 800cb82:	2307      	movs	r3, #7
 800cb84:	e006      	b.n	800cb94 <HAL_GPIO_Init+0x204>
 800cb86:	2303      	movs	r3, #3
 800cb88:	e004      	b.n	800cb94 <HAL_GPIO_Init+0x204>
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	e002      	b.n	800cb94 <HAL_GPIO_Init+0x204>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e000      	b.n	800cb94 <HAL_GPIO_Init+0x204>
 800cb92:	2300      	movs	r3, #0
 800cb94:	69fa      	ldr	r2, [r7, #28]
 800cb96:	f002 0203 	and.w	r2, r2, #3
 800cb9a:	0092      	lsls	r2, r2, #2
 800cb9c:	4093      	lsls	r3, r2
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cba4:	4935      	ldr	r1, [pc, #212]	; (800cc7c <HAL_GPIO_Init+0x2ec>)
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	089b      	lsrs	r3, r3, #2
 800cbaa:	3302      	adds	r3, #2
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cbb2:	4b38      	ldr	r3, [pc, #224]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	43db      	mvns	r3, r3
 800cbbc:	69ba      	ldr	r2, [r7, #24]
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cbce:	69ba      	ldr	r2, [r7, #24]
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cbd6:	4a2f      	ldr	r2, [pc, #188]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cbdc:	4b2d      	ldr	r3, [pc, #180]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	43db      	mvns	r3, r3
 800cbe6:	69ba      	ldr	r2, [r7, #24]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cbf8:	69ba      	ldr	r2, [r7, #24]
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cc00:	4a24      	ldr	r2, [pc, #144]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cc06:	4b23      	ldr	r3, [pc, #140]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	43db      	mvns	r3, r3
 800cc10:	69ba      	ldr	r2, [r7, #24]
 800cc12:	4013      	ands	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cc2a:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cc30:	4b18      	ldr	r3, [pc, #96]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	43db      	mvns	r3, r3
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d003      	beq.n	800cc54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cc4c:	69ba      	ldr	r2, [r7, #24]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cc54:	4a0f      	ldr	r2, [pc, #60]	; (800cc94 <HAL_GPIO_Init+0x304>)
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	61fb      	str	r3, [r7, #28]
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	2b0f      	cmp	r3, #15
 800cc64:	f67f aea2 	bls.w	800c9ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cc68:	bf00      	nop
 800cc6a:	bf00      	nop
 800cc6c:	3724      	adds	r7, #36	; 0x24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	40023800 	.word	0x40023800
 800cc7c:	40013800 	.word	0x40013800
 800cc80:	40020000 	.word	0x40020000
 800cc84:	40020400 	.word	0x40020400
 800cc88:	40020800 	.word	0x40020800
 800cc8c:	40020c00 	.word	0x40020c00
 800cc90:	40021000 	.word	0x40021000
 800cc94:	40013c00 	.word	0x40013c00

0800cc98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cca2:	2300      	movs	r3, #0
 800cca4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cca6:	2300      	movs	r3, #0
 800cca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ccae:	2300      	movs	r3, #0
 800ccb0:	617b      	str	r3, [r7, #20]
 800ccb2:	e0bb      	b.n	800ce2c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	f040 80ab 	bne.w	800ce26 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ccd0:	4a5c      	ldr	r2, [pc, #368]	; (800ce44 <HAL_GPIO_DeInit+0x1ac>)
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	089b      	lsrs	r3, r3, #2
 800ccd6:	3302      	adds	r3, #2
 800ccd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f003 0303 	and.w	r3, r3, #3
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	220f      	movs	r2, #15
 800cce8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	4013      	ands	r3, r2
 800ccf0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a54      	ldr	r2, [pc, #336]	; (800ce48 <HAL_GPIO_DeInit+0x1b0>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d019      	beq.n	800cd2e <HAL_GPIO_DeInit+0x96>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a53      	ldr	r2, [pc, #332]	; (800ce4c <HAL_GPIO_DeInit+0x1b4>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d013      	beq.n	800cd2a <HAL_GPIO_DeInit+0x92>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a52      	ldr	r2, [pc, #328]	; (800ce50 <HAL_GPIO_DeInit+0x1b8>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d00d      	beq.n	800cd26 <HAL_GPIO_DeInit+0x8e>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a51      	ldr	r2, [pc, #324]	; (800ce54 <HAL_GPIO_DeInit+0x1bc>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d007      	beq.n	800cd22 <HAL_GPIO_DeInit+0x8a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a50      	ldr	r2, [pc, #320]	; (800ce58 <HAL_GPIO_DeInit+0x1c0>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d101      	bne.n	800cd1e <HAL_GPIO_DeInit+0x86>
 800cd1a:	2304      	movs	r3, #4
 800cd1c:	e008      	b.n	800cd30 <HAL_GPIO_DeInit+0x98>
 800cd1e:	2307      	movs	r3, #7
 800cd20:	e006      	b.n	800cd30 <HAL_GPIO_DeInit+0x98>
 800cd22:	2303      	movs	r3, #3
 800cd24:	e004      	b.n	800cd30 <HAL_GPIO_DeInit+0x98>
 800cd26:	2302      	movs	r3, #2
 800cd28:	e002      	b.n	800cd30 <HAL_GPIO_DeInit+0x98>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <HAL_GPIO_DeInit+0x98>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	f002 0203 	and.w	r2, r2, #3
 800cd36:	0092      	lsls	r2, r2, #2
 800cd38:	4093      	lsls	r3, r2
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d132      	bne.n	800cda6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cd40:	4b46      	ldr	r3, [pc, #280]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	43db      	mvns	r3, r3
 800cd48:	4944      	ldr	r1, [pc, #272]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cd4e:	4b43      	ldr	r3, [pc, #268]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	43db      	mvns	r3, r3
 800cd56:	4941      	ldr	r1, [pc, #260]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd58:	4013      	ands	r3, r2
 800cd5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd5c:	4b3f      	ldr	r3, [pc, #252]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd5e:	68da      	ldr	r2, [r3, #12]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	43db      	mvns	r3, r3
 800cd64:	493d      	ldr	r1, [pc, #244]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd66:	4013      	ands	r3, r2
 800cd68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd6a:	4b3c      	ldr	r3, [pc, #240]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd6c:	689a      	ldr	r2, [r3, #8]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	43db      	mvns	r3, r3
 800cd72:	493a      	ldr	r1, [pc, #232]	; (800ce5c <HAL_GPIO_DeInit+0x1c4>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	220f      	movs	r2, #15
 800cd82:	fa02 f303 	lsl.w	r3, r2, r3
 800cd86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cd88:	4a2e      	ldr	r2, [pc, #184]	; (800ce44 <HAL_GPIO_DeInit+0x1ac>)
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	089b      	lsrs	r3, r3, #2
 800cd8e:	3302      	adds	r3, #2
 800cd90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	43da      	mvns	r2, r3
 800cd98:	482a      	ldr	r0, [pc, #168]	; (800ce44 <HAL_GPIO_DeInit+0x1ac>)
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	089b      	lsrs	r3, r3, #2
 800cd9e:	400a      	ands	r2, r1
 800cda0:	3302      	adds	r3, #2
 800cda2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	2103      	movs	r1, #3
 800cdb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb4:	43db      	mvns	r3, r3
 800cdb6:	401a      	ands	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	08da      	lsrs	r2, r3, #3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3208      	adds	r2, #8
 800cdc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f003 0307 	and.w	r3, r3, #7
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	220f      	movs	r2, #15
 800cdd2:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd6:	43db      	mvns	r3, r3
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	08d2      	lsrs	r2, r2, #3
 800cddc:	4019      	ands	r1, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3208      	adds	r2, #8
 800cde2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68da      	ldr	r2, [r3, #12]
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	005b      	lsls	r3, r3, #1
 800cdee:	2103      	movs	r1, #3
 800cdf0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdf4:	43db      	mvns	r3, r3
 800cdf6:	401a      	ands	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	2101      	movs	r1, #1
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	fa01 f303 	lsl.w	r3, r1, r3
 800ce08:	43db      	mvns	r3, r3
 800ce0a:	401a      	ands	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	2103      	movs	r1, #3
 800ce1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1e:	43db      	mvns	r3, r3
 800ce20:	401a      	ands	r2, r3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	617b      	str	r3, [r7, #20]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2b0f      	cmp	r3, #15
 800ce30:	f67f af40 	bls.w	800ccb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
 800ce38:	371c      	adds	r7, #28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	40013800 	.word	0x40013800
 800ce48:	40020000 	.word	0x40020000
 800ce4c:	40020400 	.word	0x40020400
 800ce50:	40020800 	.word	0x40020800
 800ce54:	40020c00 	.word	0x40020c00
 800ce58:	40021000 	.word	0x40021000
 800ce5c:	40013c00 	.word	0x40013c00

0800ce60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	691a      	ldr	r2, [r3, #16]
 800ce70:	887b      	ldrh	r3, [r7, #2]
 800ce72:	4013      	ands	r3, r2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	73fb      	strb	r3, [r7, #15]
 800ce7c:	e001      	b.n	800ce82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	807b      	strh	r3, [r7, #2]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cea0:	787b      	ldrb	r3, [r7, #1]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cea6:	887a      	ldrh	r2, [r7, #2]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ceac:	e003      	b.n	800ceb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ceae:	887b      	ldrh	r3, [r7, #2]
 800ceb0:	041a      	lsls	r2, r3, #16
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	619a      	str	r2, [r3, #24]
}
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
	...

0800cec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e12b      	b.n	800d12e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d106      	bne.n	800cef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7fb fcfe 	bl	80088ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2224      	movs	r2, #36	; 0x24
 800cef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f022 0201 	bic.w	r2, r2, #1
 800cf06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cf28:	f002 fe38 	bl	800fb9c <HAL_RCC_GetPCLK1Freq>
 800cf2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	4a81      	ldr	r2, [pc, #516]	; (800d138 <HAL_I2C_Init+0x274>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d807      	bhi.n	800cf48 <HAL_I2C_Init+0x84>
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	4a80      	ldr	r2, [pc, #512]	; (800d13c <HAL_I2C_Init+0x278>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	bf94      	ite	ls
 800cf40:	2301      	movls	r3, #1
 800cf42:	2300      	movhi	r3, #0
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	e006      	b.n	800cf56 <HAL_I2C_Init+0x92>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4a7d      	ldr	r2, [pc, #500]	; (800d140 <HAL_I2C_Init+0x27c>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	bf94      	ite	ls
 800cf50:	2301      	movls	r3, #1
 800cf52:	2300      	movhi	r3, #0
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e0e7      	b.n	800d12e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	4a78      	ldr	r2, [pc, #480]	; (800d144 <HAL_I2C_Init+0x280>)
 800cf62:	fba2 2303 	umull	r2, r3, r2, r3
 800cf66:	0c9b      	lsrs	r3, r3, #18
 800cf68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	4a6a      	ldr	r2, [pc, #424]	; (800d138 <HAL_I2C_Init+0x274>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d802      	bhi.n	800cf98 <HAL_I2C_Init+0xd4>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	3301      	adds	r3, #1
 800cf96:	e009      	b.n	800cfac <HAL_I2C_Init+0xe8>
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cf9e:	fb02 f303 	mul.w	r3, r2, r3
 800cfa2:	4a69      	ldr	r2, [pc, #420]	; (800d148 <HAL_I2C_Init+0x284>)
 800cfa4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa8:	099b      	lsrs	r3, r3, #6
 800cfaa:	3301      	adds	r3, #1
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	6812      	ldr	r2, [r2, #0]
 800cfb0:	430b      	orrs	r3, r1
 800cfb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	69db      	ldr	r3, [r3, #28]
 800cfba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cfbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	495c      	ldr	r1, [pc, #368]	; (800d138 <HAL_I2C_Init+0x274>)
 800cfc8:	428b      	cmp	r3, r1
 800cfca:	d819      	bhi.n	800d000 <HAL_I2C_Init+0x13c>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	1e59      	subs	r1, r3, #1
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfda:	1c59      	adds	r1, r3, #1
 800cfdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cfe0:	400b      	ands	r3, r1
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00a      	beq.n	800cffc <HAL_I2C_Init+0x138>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	1e59      	subs	r1, r3, #1
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	fbb1 f3f3 	udiv	r3, r1, r3
 800cff4:	3301      	adds	r3, #1
 800cff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cffa:	e051      	b.n	800d0a0 <HAL_I2C_Init+0x1dc>
 800cffc:	2304      	movs	r3, #4
 800cffe:	e04f      	b.n	800d0a0 <HAL_I2C_Init+0x1dc>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d111      	bne.n	800d02c <HAL_I2C_Init+0x168>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	1e58      	subs	r0, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6859      	ldr	r1, [r3, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	005b      	lsls	r3, r3, #1
 800d014:	440b      	add	r3, r1
 800d016:	fbb0 f3f3 	udiv	r3, r0, r3
 800d01a:	3301      	adds	r3, #1
 800d01c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d020:	2b00      	cmp	r3, #0
 800d022:	bf0c      	ite	eq
 800d024:	2301      	moveq	r3, #1
 800d026:	2300      	movne	r3, #0
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	e012      	b.n	800d052 <HAL_I2C_Init+0x18e>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	1e58      	subs	r0, r3, #1
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6859      	ldr	r1, [r3, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	440b      	add	r3, r1
 800d03a:	0099      	lsls	r1, r3, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d042:	3301      	adds	r3, #1
 800d044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d048:	2b00      	cmp	r3, #0
 800d04a:	bf0c      	ite	eq
 800d04c:	2301      	moveq	r3, #1
 800d04e:	2300      	movne	r3, #0
 800d050:	b2db      	uxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <HAL_I2C_Init+0x196>
 800d056:	2301      	movs	r3, #1
 800d058:	e022      	b.n	800d0a0 <HAL_I2C_Init+0x1dc>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10e      	bne.n	800d080 <HAL_I2C_Init+0x1bc>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	1e58      	subs	r0, r3, #1
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6859      	ldr	r1, [r3, #4]
 800d06a:	460b      	mov	r3, r1
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	440b      	add	r3, r1
 800d070:	fbb0 f3f3 	udiv	r3, r0, r3
 800d074:	3301      	adds	r3, #1
 800d076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d07a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d07e:	e00f      	b.n	800d0a0 <HAL_I2C_Init+0x1dc>
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	1e58      	subs	r0, r3, #1
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6859      	ldr	r1, [r3, #4]
 800d088:	460b      	mov	r3, r1
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	440b      	add	r3, r1
 800d08e:	0099      	lsls	r1, r3, #2
 800d090:	440b      	add	r3, r1
 800d092:	fbb0 f3f3 	udiv	r3, r0, r3
 800d096:	3301      	adds	r3, #1
 800d098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d09c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	6809      	ldr	r1, [r1, #0]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69da      	ldr	r2, [r3, #28]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d0ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	6911      	ldr	r1, [r2, #16]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	68d2      	ldr	r2, [r2, #12]
 800d0da:	4311      	orrs	r1, r2
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	6812      	ldr	r2, [r2, #0]
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	695a      	ldr	r2, [r3, #20]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	431a      	orrs	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	430a      	orrs	r2, r1
 800d0fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f042 0201 	orr.w	r2, r2, #1
 800d10e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2220      	movs	r2, #32
 800d11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	000186a0 	.word	0x000186a0
 800d13c:	001e847f 	.word	0x001e847f
 800d140:	003d08ff 	.word	0x003d08ff
 800d144:	431bde83 	.word	0x431bde83
 800d148:	10624dd3 	.word	0x10624dd3

0800d14c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af02      	add	r7, sp, #8
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	4608      	mov	r0, r1
 800d156:	4611      	mov	r1, r2
 800d158:	461a      	mov	r2, r3
 800d15a:	4603      	mov	r3, r0
 800d15c:	817b      	strh	r3, [r7, #10]
 800d15e:	460b      	mov	r3, r1
 800d160:	813b      	strh	r3, [r7, #8]
 800d162:	4613      	mov	r3, r2
 800d164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d166:	f7fe fbc3 	bl	800b8f0 <HAL_GetTick>
 800d16a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d172:	b2db      	uxtb	r3, r3
 800d174:	2b20      	cmp	r3, #32
 800d176:	f040 80d9 	bne.w	800d32c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	2319      	movs	r3, #25
 800d180:	2201      	movs	r2, #1
 800d182:	496d      	ldr	r1, [pc, #436]	; (800d338 <HAL_I2C_Mem_Write+0x1ec>)
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 fc7f 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d190:	2302      	movs	r3, #2
 800d192:	e0cc      	b.n	800d32e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d101      	bne.n	800d1a2 <HAL_I2C_Mem_Write+0x56>
 800d19e:	2302      	movs	r3, #2
 800d1a0:	e0c5      	b.n	800d32e <HAL_I2C_Mem_Write+0x1e2>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 0301 	and.w	r3, r3, #1
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d007      	beq.n	800d1c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f042 0201 	orr.w	r2, r2, #1
 800d1c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2221      	movs	r2, #33	; 0x21
 800d1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2240      	movs	r2, #64	; 0x40
 800d1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a3a      	ldr	r2, [r7, #32]
 800d1f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4a4d      	ldr	r2, [pc, #308]	; (800d33c <HAL_I2C_Mem_Write+0x1f0>)
 800d208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d20a:	88f8      	ldrh	r0, [r7, #6]
 800d20c:	893a      	ldrh	r2, [r7, #8]
 800d20e:	8979      	ldrh	r1, [r7, #10]
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	9301      	str	r3, [sp, #4]
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	4603      	mov	r3, r0
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 fab6 	bl	800d78c <I2C_RequestMemoryWrite>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d052      	beq.n	800d2cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e081      	b.n	800d32e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 fd00 	bl	800dc34 <I2C_WaitOnTXEFlagUntilTimeout>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00d      	beq.n	800d256 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23e:	2b04      	cmp	r3, #4
 800d240:	d107      	bne.n	800d252 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e06b      	b.n	800d32e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25a:	781a      	ldrb	r2, [r3, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d270:	3b01      	subs	r3, #1
 800d272:	b29a      	uxth	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	3b01      	subs	r3, #1
 800d280:	b29a      	uxth	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	695b      	ldr	r3, [r3, #20]
 800d28c:	f003 0304 	and.w	r3, r3, #4
 800d290:	2b04      	cmp	r3, #4
 800d292:	d11b      	bne.n	800d2cc <HAL_I2C_Mem_Write+0x180>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d017      	beq.n	800d2cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	781a      	ldrb	r2, [r3, #0]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1aa      	bne.n	800d22a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 fcec 	bl	800dcb6 <I2C_WaitOnBTFFlagUntilTimeout>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00d      	beq.n	800d300 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e8:	2b04      	cmp	r3, #4
 800d2ea:	d107      	bne.n	800d2fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e016      	b.n	800d32e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d30e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2220      	movs	r2, #32
 800d314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	e000      	b.n	800d32e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d32c:	2302      	movs	r3, #2
  }
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	00100002 	.word	0x00100002
 800d33c:	ffff0000 	.word	0xffff0000

0800d340 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08c      	sub	sp, #48	; 0x30
 800d344:	af02      	add	r7, sp, #8
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	4608      	mov	r0, r1
 800d34a:	4611      	mov	r1, r2
 800d34c:	461a      	mov	r2, r3
 800d34e:	4603      	mov	r3, r0
 800d350:	817b      	strh	r3, [r7, #10]
 800d352:	460b      	mov	r3, r1
 800d354:	813b      	strh	r3, [r7, #8]
 800d356:	4613      	mov	r3, r2
 800d358:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d35a:	f7fe fac9 	bl	800b8f0 <HAL_GetTick>
 800d35e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2b20      	cmp	r3, #32
 800d36a:	f040 8208 	bne.w	800d77e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	2319      	movs	r3, #25
 800d374:	2201      	movs	r2, #1
 800d376:	497b      	ldr	r1, [pc, #492]	; (800d564 <HAL_I2C_Mem_Read+0x224>)
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	f000 fb85 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d384:	2302      	movs	r3, #2
 800d386:	e1fb      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d101      	bne.n	800d396 <HAL_I2C_Mem_Read+0x56>
 800d392:	2302      	movs	r3, #2
 800d394:	e1f4      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d007      	beq.n	800d3bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f042 0201 	orr.w	r2, r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2222      	movs	r2, #34	; 0x22
 800d3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2240      	movs	r2, #64	; 0x40
 800d3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d3ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	4a5b      	ldr	r2, [pc, #364]	; (800d568 <HAL_I2C_Mem_Read+0x228>)
 800d3fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d3fe:	88f8      	ldrh	r0, [r7, #6]
 800d400:	893a      	ldrh	r2, [r7, #8]
 800d402:	8979      	ldrh	r1, [r7, #10]
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	4603      	mov	r3, r0
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 fa52 	bl	800d8b8 <I2C_RequestMemoryRead>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e1b0      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d422:	2b00      	cmp	r3, #0
 800d424:	d113      	bne.n	800d44e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d426:	2300      	movs	r3, #0
 800d428:	623b      	str	r3, [r7, #32]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	623b      	str	r3, [r7, #32]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	623b      	str	r3, [r7, #32]
 800d43a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	e184      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d452:	2b01      	cmp	r3, #1
 800d454:	d11b      	bne.n	800d48e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d466:	2300      	movs	r3, #0
 800d468:	61fb      	str	r3, [r7, #28]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	61fb      	str	r3, [r7, #28]
 800d47a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	e164      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d492:	2b02      	cmp	r3, #2
 800d494:	d11b      	bne.n	800d4ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	61bb      	str	r3, [r7, #24]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	61bb      	str	r3, [r7, #24]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	61bb      	str	r3, [r7, #24]
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	e144      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	617b      	str	r3, [r7, #20]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	617b      	str	r3, [r7, #20]
 800d4e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d4e4:	e138      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	f200 80f1 	bhi.w	800d6d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d123      	bne.n	800d540 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f000 fc1b 	bl	800dd38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	e139      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	691a      	ldr	r2, [r3, #16]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	b2d2      	uxtb	r2, r2
 800d518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d534:	b29b      	uxth	r3, r3
 800d536:	3b01      	subs	r3, #1
 800d538:	b29a      	uxth	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d53e:	e10b      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d544:	2b02      	cmp	r3, #2
 800d546:	d14e      	bne.n	800d5e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54e:	2200      	movs	r2, #0
 800d550:	4906      	ldr	r1, [pc, #24]	; (800d56c <HAL_I2C_Mem_Read+0x22c>)
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f000 fa98 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d008      	beq.n	800d570 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e10e      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
 800d562:	bf00      	nop
 800d564:	00100002 	.word	0x00100002
 800d568:	ffff0000 	.word	0xffff0000
 800d56c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d57e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691a      	ldr	r2, [r3, #16]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58a:	b2d2      	uxtb	r2, r2
 800d58c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d59c:	3b01      	subs	r3, #1
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	691a      	ldr	r2, [r3, #16]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	b2d2      	uxtb	r2, r2
 800d5be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d5e4:	e0b8      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	4966      	ldr	r1, [pc, #408]	; (800d788 <HAL_I2C_Mem_Read+0x448>)
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f000 fa49 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e0bf      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d60e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	691a      	ldr	r2, [r3, #16]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61a:	b2d2      	uxtb	r2, r2
 800d61c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d62c:	3b01      	subs	r3, #1
 800d62e:	b29a      	uxth	r2, r3
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d638:	b29b      	uxth	r3, r3
 800d63a:	3b01      	subs	r3, #1
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d648:	2200      	movs	r2, #0
 800d64a:	494f      	ldr	r1, [pc, #316]	; (800d788 <HAL_I2C_Mem_Read+0x448>)
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 fa1b 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	e091      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d66a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	691a      	ldr	r2, [r3, #16]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d676:	b2d2      	uxtb	r2, r2
 800d678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	1c5a      	adds	r2, r3, #1
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d688:	3b01      	subs	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d694:	b29b      	uxth	r3, r3
 800d696:	3b01      	subs	r3, #1
 800d698:	b29a      	uxth	r2, r3
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	691a      	ldr	r2, [r3, #16]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a8:	b2d2      	uxtb	r2, r2
 800d6aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d6d0:	e042      	b.n	800d758 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 fb2e 	bl	800dd38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e04c      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	691a      	ldr	r2, [r3, #16]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	b2d2      	uxtb	r2, r2
 800d6f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d702:	3b01      	subs	r3, #1
 800d704:	b29a      	uxth	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d70e:	b29b      	uxth	r3, r3
 800d710:	3b01      	subs	r3, #1
 800d712:	b29a      	uxth	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	f003 0304 	and.w	r3, r3, #4
 800d722:	2b04      	cmp	r3, #4
 800d724:	d118      	bne.n	800d758 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	691a      	ldr	r2, [r3, #16]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	b2d2      	uxtb	r2, r2
 800d732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d742:	3b01      	subs	r3, #1
 800d744:	b29a      	uxth	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74e:	b29b      	uxth	r3, r3
 800d750:	3b01      	subs	r3, #1
 800d752:	b29a      	uxth	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f47f aec2 	bne.w	800d4e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2220      	movs	r2, #32
 800d766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	e000      	b.n	800d780 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d77e:	2302      	movs	r3, #2
  }
}
 800d780:	4618      	mov	r0, r3
 800d782:	3728      	adds	r7, #40	; 0x28
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	00010004 	.word	0x00010004

0800d78c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af02      	add	r7, sp, #8
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	4608      	mov	r0, r1
 800d796:	4611      	mov	r1, r2
 800d798:	461a      	mov	r2, r3
 800d79a:	4603      	mov	r3, r0
 800d79c:	817b      	strh	r3, [r7, #10]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	813b      	strh	r3, [r7, #8]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	6a3b      	ldr	r3, [r7, #32]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f000 f960 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00d      	beq.n	800d7ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7dc:	d103      	bne.n	800d7e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e05f      	b.n	800d8aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d7ea:	897b      	ldrh	r3, [r7, #10]
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d7f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	6a3a      	ldr	r2, [r7, #32]
 800d7fe:	492d      	ldr	r1, [pc, #180]	; (800d8b4 <I2C_RequestMemoryWrite+0x128>)
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 f998 	bl	800db36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e04c      	b.n	800d8aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d810:	2300      	movs	r3, #0
 800d812:	617b      	str	r3, [r7, #20]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	617b      	str	r3, [r7, #20]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	699b      	ldr	r3, [r3, #24]
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d828:	6a39      	ldr	r1, [r7, #32]
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f000 fa02 	bl	800dc34 <I2C_WaitOnTXEFlagUntilTimeout>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00d      	beq.n	800d852 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83a:	2b04      	cmp	r3, #4
 800d83c:	d107      	bne.n	800d84e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d84c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d84e:	2301      	movs	r3, #1
 800d850:	e02b      	b.n	800d8aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d105      	bne.n	800d864 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d858:	893b      	ldrh	r3, [r7, #8]
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	611a      	str	r2, [r3, #16]
 800d862:	e021      	b.n	800d8a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d864:	893b      	ldrh	r3, [r7, #8]
 800d866:	0a1b      	lsrs	r3, r3, #8
 800d868:	b29b      	uxth	r3, r3
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d874:	6a39      	ldr	r1, [r7, #32]
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f000 f9dc 	bl	800dc34 <I2C_WaitOnTXEFlagUntilTimeout>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00d      	beq.n	800d89e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d886:	2b04      	cmp	r3, #4
 800d888:	d107      	bne.n	800d89a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e005      	b.n	800d8aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d89e:	893b      	ldrh	r3, [r7, #8]
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3718      	adds	r7, #24
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	00010002 	.word	0x00010002

0800d8b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af02      	add	r7, sp, #8
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	4608      	mov	r0, r1
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	817b      	strh	r3, [r7, #10]
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	813b      	strh	r3, [r7, #8]
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 f8c2 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00d      	beq.n	800d926 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d918:	d103      	bne.n	800d922 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d920:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d922:	2303      	movs	r3, #3
 800d924:	e0aa      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d926:	897b      	ldrh	r3, [r7, #10]
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	461a      	mov	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d934:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d938:	6a3a      	ldr	r2, [r7, #32]
 800d93a:	4952      	ldr	r1, [pc, #328]	; (800da84 <I2C_RequestMemoryRead+0x1cc>)
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f000 f8fa 	bl	800db36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d948:	2301      	movs	r3, #1
 800d94a:	e097      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d94c:	2300      	movs	r3, #0
 800d94e:	617b      	str	r3, [r7, #20]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	617b      	str	r3, [r7, #20]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d964:	6a39      	ldr	r1, [r7, #32]
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f000 f964 	bl	800dc34 <I2C_WaitOnTXEFlagUntilTimeout>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00d      	beq.n	800d98e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d976:	2b04      	cmp	r3, #4
 800d978:	d107      	bne.n	800d98a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d988:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e076      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d98e:	88fb      	ldrh	r3, [r7, #6]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d105      	bne.n	800d9a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d994:	893b      	ldrh	r3, [r7, #8]
 800d996:	b2da      	uxtb	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	611a      	str	r2, [r3, #16]
 800d99e:	e021      	b.n	800d9e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d9a0:	893b      	ldrh	r3, [r7, #8]
 800d9a2:	0a1b      	lsrs	r3, r3, #8
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9b0:	6a39      	ldr	r1, [r7, #32]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f000 f93e 	bl	800dc34 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00d      	beq.n	800d9da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d107      	bne.n	800d9d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e050      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d9da:	893b      	ldrh	r3, [r7, #8]
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e6:	6a39      	ldr	r1, [r7, #32]
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 f923 	bl	800dc34 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00d      	beq.n	800da10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	d107      	bne.n	800da0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800da0c:	2301      	movs	r3, #1
 800da0e:	e035      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	2200      	movs	r2, #0
 800da28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 f82b 	bl	800da88 <I2C_WaitOnFlagUntilTimeout>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00d      	beq.n	800da54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da46:	d103      	bne.n	800da50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e013      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800da54:	897b      	ldrh	r3, [r7, #10]
 800da56:	b2db      	uxtb	r3, r3
 800da58:	f043 0301 	orr.w	r3, r3, #1
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	6a3a      	ldr	r2, [r7, #32]
 800da68:	4906      	ldr	r1, [pc, #24]	; (800da84 <I2C_RequestMemoryRead+0x1cc>)
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 f863 	bl	800db36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800da76:	2301      	movs	r3, #1
 800da78:	e000      	b.n	800da7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	00010002 	.word	0x00010002

0800da88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	4613      	mov	r3, r2
 800da96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da98:	e025      	b.n	800dae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa0:	d021      	beq.n	800dae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daa2:	f7fd ff25 	bl	800b8f0 <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d302      	bcc.n	800dab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d116      	bne.n	800dae6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2220      	movs	r2, #32
 800dac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad2:	f043 0220 	orr.w	r2, r3, #32
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e023      	b.n	800db2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	0c1b      	lsrs	r3, r3, #16
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b01      	cmp	r3, #1
 800daee:	d10d      	bne.n	800db0c <I2C_WaitOnFlagUntilTimeout+0x84>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	43da      	mvns	r2, r3
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	4013      	ands	r3, r2
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bf0c      	ite	eq
 800db02:	2301      	moveq	r3, #1
 800db04:	2300      	movne	r3, #0
 800db06:	b2db      	uxtb	r3, r3
 800db08:	461a      	mov	r2, r3
 800db0a:	e00c      	b.n	800db26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	43da      	mvns	r2, r3
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	4013      	ands	r3, r2
 800db18:	b29b      	uxth	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	bf0c      	ite	eq
 800db1e:	2301      	moveq	r3, #1
 800db20:	2300      	movne	r3, #0
 800db22:	b2db      	uxtb	r3, r3
 800db24:	461a      	mov	r2, r3
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d0b6      	beq.n	800da9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	60f8      	str	r0, [r7, #12]
 800db3e:	60b9      	str	r1, [r7, #8]
 800db40:	607a      	str	r2, [r7, #4]
 800db42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800db44:	e051      	b.n	800dbea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db54:	d123      	bne.n	800db9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800db6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2220      	movs	r2, #32
 800db7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8a:	f043 0204 	orr.w	r2, r3, #4
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e046      	b.n	800dc2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba4:	d021      	beq.n	800dbea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dba6:	f7fd fea3 	bl	800b8f0 <HAL_GetTick>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d302      	bcc.n	800dbbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d116      	bne.n	800dbea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd6:	f043 0220 	orr.w	r2, r3, #32
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e020      	b.n	800dc2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	0c1b      	lsrs	r3, r3, #16
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d10c      	bne.n	800dc0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	695b      	ldr	r3, [r3, #20]
 800dbfa:	43da      	mvns	r2, r3
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	bf14      	ite	ne
 800dc06:	2301      	movne	r3, #1
 800dc08:	2300      	moveq	r3, #0
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	e00b      	b.n	800dc26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	43da      	mvns	r2, r3
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	4013      	ands	r3, r2
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	bf14      	ite	ne
 800dc20:	2301      	movne	r3, #1
 800dc22:	2300      	moveq	r3, #0
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d18d      	bne.n	800db46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dc40:	e02d      	b.n	800dc9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f000 f8ce 	bl	800dde4 <I2C_IsAcknowledgeFailed>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d001      	beq.n	800dc52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e02d      	b.n	800dcae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc58:	d021      	beq.n	800dc9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc5a:	f7fd fe49 	bl	800b8f0 <HAL_GetTick>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d302      	bcc.n	800dc70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d116      	bne.n	800dc9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2220      	movs	r2, #32
 800dc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8a:	f043 0220 	orr.w	r2, r3, #32
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e007      	b.n	800dcae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	695b      	ldr	r3, [r3, #20]
 800dca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dca8:	2b80      	cmp	r3, #128	; 0x80
 800dcaa:	d1ca      	bne.n	800dc42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
 800dcbe:	60b9      	str	r1, [r7, #8]
 800dcc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dcc2:	e02d      	b.n	800dd20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 f88d 	bl	800dde4 <I2C_IsAcknowledgeFailed>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e02d      	b.n	800dd30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcda:	d021      	beq.n	800dd20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcdc:	f7fd fe08 	bl	800b8f0 <HAL_GetTick>
 800dce0:	4602      	mov	r2, r0
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d302      	bcc.n	800dcf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d116      	bne.n	800dd20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2220      	movs	r2, #32
 800dcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd0c:	f043 0220 	orr.w	r2, r3, #32
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e007      	b.n	800dd30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	f003 0304 	and.w	r3, r3, #4
 800dd2a:	2b04      	cmp	r3, #4
 800dd2c:	d1ca      	bne.n	800dcc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3710      	adds	r7, #16
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dd44:	e042      	b.n	800ddcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	f003 0310 	and.w	r3, r3, #16
 800dd50:	2b10      	cmp	r3, #16
 800dd52:	d119      	bne.n	800dd88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f06f 0210 	mvn.w	r2, #16
 800dd5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2220      	movs	r2, #32
 800dd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
 800dd86:	e029      	b.n	800dddc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd88:	f7fd fdb2 	bl	800b8f0 <HAL_GetTick>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	1ad3      	subs	r3, r2, r3
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d302      	bcc.n	800dd9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d116      	bne.n	800ddcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2220      	movs	r2, #32
 800dda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb8:	f043 0220 	orr.w	r2, r3, #32
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e007      	b.n	800dddc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd6:	2b40      	cmp	r3, #64	; 0x40
 800ddd8:	d1b5      	bne.n	800dd46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddfa:	d11b      	bne.n	800de34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2220      	movs	r2, #32
 800de10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de20:	f043 0204 	orr.w	r2, r3, #4
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800de30:	2301      	movs	r3, #1
 800de32:	e000      	b.n	800de36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800de42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de44:	b08f      	sub	sp, #60	; 0x3c
 800de46:	af0a      	add	r7, sp, #40	; 0x28
 800de48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800de50:	2301      	movs	r3, #1
 800de52:	e10f      	b.n	800e074 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d106      	bne.n	800de74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f007 fda8 	bl	80159c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2203      	movs	r2, #3
 800de78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de84:	2b00      	cmp	r3, #0
 800de86:	d102      	bne.n	800de8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4618      	mov	r0, r3
 800de94:	f004 f877 	bl	8011f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	603b      	str	r3, [r7, #0]
 800de9e:	687e      	ldr	r6, [r7, #4]
 800dea0:	466d      	mov	r5, sp
 800dea2:	f106 0410 	add.w	r4, r6, #16
 800dea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800deaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800deac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800deae:	e894 0003 	ldmia.w	r4, {r0, r1}
 800deb2:	e885 0003 	stmia.w	r5, {r0, r1}
 800deb6:	1d33      	adds	r3, r6, #4
 800deb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800deba:	6838      	ldr	r0, [r7, #0]
 800debc:	f003 ff4e 	bl	8011d5c <USB_CoreInit>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d005      	beq.n	800ded2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2202      	movs	r2, #2
 800deca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800dece:	2301      	movs	r3, #1
 800ded0:	e0d0      	b.n	800e074 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2100      	movs	r1, #0
 800ded8:	4618      	mov	r0, r3
 800deda:	f004 f865 	bl	8011fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dede:	2300      	movs	r3, #0
 800dee0:	73fb      	strb	r3, [r7, #15]
 800dee2:	e04a      	b.n	800df7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dee4:	7bfa      	ldrb	r2, [r7, #15]
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	4613      	mov	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	440b      	add	r3, r1
 800def2:	333d      	adds	r3, #61	; 0x3d
 800def4:	2201      	movs	r2, #1
 800def6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800def8:	7bfa      	ldrb	r2, [r7, #15]
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	4613      	mov	r3, r2
 800defe:	00db      	lsls	r3, r3, #3
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	440b      	add	r3, r1
 800df06:	333c      	adds	r3, #60	; 0x3c
 800df08:	7bfa      	ldrb	r2, [r7, #15]
 800df0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800df0c:	7bfa      	ldrb	r2, [r7, #15]
 800df0e:	7bfb      	ldrb	r3, [r7, #15]
 800df10:	b298      	uxth	r0, r3
 800df12:	6879      	ldr	r1, [r7, #4]
 800df14:	4613      	mov	r3, r2
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	4413      	add	r3, r2
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	440b      	add	r3, r1
 800df1e:	3344      	adds	r3, #68	; 0x44
 800df20:	4602      	mov	r2, r0
 800df22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800df24:	7bfa      	ldrb	r2, [r7, #15]
 800df26:	6879      	ldr	r1, [r7, #4]
 800df28:	4613      	mov	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	4413      	add	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	440b      	add	r3, r1
 800df32:	3340      	adds	r3, #64	; 0x40
 800df34:	2200      	movs	r2, #0
 800df36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800df38:	7bfa      	ldrb	r2, [r7, #15]
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	4613      	mov	r3, r2
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	4413      	add	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	440b      	add	r3, r1
 800df46:	3348      	adds	r3, #72	; 0x48
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800df4c:	7bfa      	ldrb	r2, [r7, #15]
 800df4e:	6879      	ldr	r1, [r7, #4]
 800df50:	4613      	mov	r3, r2
 800df52:	00db      	lsls	r3, r3, #3
 800df54:	4413      	add	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	440b      	add	r3, r1
 800df5a:	334c      	adds	r3, #76	; 0x4c
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800df60:	7bfa      	ldrb	r2, [r7, #15]
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	4613      	mov	r3, r2
 800df66:	00db      	lsls	r3, r3, #3
 800df68:	4413      	add	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	440b      	add	r3, r1
 800df6e:	3354      	adds	r3, #84	; 0x54
 800df70:	2200      	movs	r2, #0
 800df72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	3301      	adds	r3, #1
 800df78:	73fb      	strb	r3, [r7, #15]
 800df7a:	7bfa      	ldrb	r2, [r7, #15]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	429a      	cmp	r2, r3
 800df82:	d3af      	bcc.n	800dee4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df84:	2300      	movs	r3, #0
 800df86:	73fb      	strb	r3, [r7, #15]
 800df88:	e044      	b.n	800e014 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800df8a:	7bfa      	ldrb	r2, [r7, #15]
 800df8c:	6879      	ldr	r1, [r7, #4]
 800df8e:	4613      	mov	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	4413      	add	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	440b      	add	r3, r1
 800df98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800df9c:	2200      	movs	r2, #0
 800df9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dfa0:	7bfa      	ldrb	r2, [r7, #15]
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	4413      	add	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	440b      	add	r3, r1
 800dfae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800dfb2:	7bfa      	ldrb	r2, [r7, #15]
 800dfb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dfb6:	7bfa      	ldrb	r2, [r7, #15]
 800dfb8:	6879      	ldr	r1, [r7, #4]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	4413      	add	r3, r2
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	440b      	add	r3, r1
 800dfc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dfc8:	2200      	movs	r2, #0
 800dfca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dfcc:	7bfa      	ldrb	r2, [r7, #15]
 800dfce:	6879      	ldr	r1, [r7, #4]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	4413      	add	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	440b      	add	r3, r1
 800dfda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dfde:	2200      	movs	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dfe2:	7bfa      	ldrb	r2, [r7, #15]
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	00db      	lsls	r3, r3, #3
 800dfea:	4413      	add	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	440b      	add	r3, r1
 800dff0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dff4:	2200      	movs	r2, #0
 800dff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dff8:	7bfa      	ldrb	r2, [r7, #15]
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	4613      	mov	r3, r2
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	440b      	add	r3, r1
 800e006:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e00a:	2200      	movs	r2, #0
 800e00c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
 800e010:	3301      	adds	r3, #1
 800e012:	73fb      	strb	r3, [r7, #15]
 800e014:	7bfa      	ldrb	r2, [r7, #15]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d3b5      	bcc.n	800df8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	603b      	str	r3, [r7, #0]
 800e024:	687e      	ldr	r6, [r7, #4]
 800e026:	466d      	mov	r5, sp
 800e028:	f106 0410 	add.w	r4, r6, #16
 800e02c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e02e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e034:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e038:	e885 0003 	stmia.w	r5, {r0, r1}
 800e03c:	1d33      	adds	r3, r6, #4
 800e03e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e040:	6838      	ldr	r0, [r7, #0]
 800e042:	f003 fffd 	bl	8012040 <USB_DevInit>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d005      	beq.n	800e058 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2202      	movs	r2, #2
 800e050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e00d      	b.n	800e074 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f005 f94c 	bl	801330a <USB_DevDisconnect>

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e07c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e090:	2b01      	cmp	r3, #1
 800e092:	d101      	bne.n	800e098 <HAL_PCD_Start+0x1c>
 800e094:	2302      	movs	r3, #2
 800e096:	e020      	b.n	800e0da <HAL_PCD_Start+0x5e>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d109      	bne.n	800e0bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d005      	beq.n	800e0bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f003 ff4f 	bl	8011f64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f005 f8fc 	bl	80132c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e0e2:	b590      	push	{r4, r7, lr}
 800e0e4:	b08d      	sub	sp, #52	; 0x34
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f005 f9ba 	bl	8013472 <USB_GetMode>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	f040 848a 	bne.w	800ea1a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f005 f91e 	bl	801334c <USB_ReadInterrupts>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 8480 	beq.w	800ea18 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	0a1b      	lsrs	r3, r3, #8
 800e122:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4618      	mov	r0, r3
 800e132:	f005 f90b 	bl	801334c <USB_ReadInterrupts>
 800e136:	4603      	mov	r3, r0
 800e138:	f003 0302 	and.w	r3, r3, #2
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d107      	bne.n	800e150 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	695a      	ldr	r2, [r3, #20]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f002 0202 	and.w	r2, r2, #2
 800e14e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4618      	mov	r0, r3
 800e156:	f005 f8f9 	bl	801334c <USB_ReadInterrupts>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f003 0310 	and.w	r3, r3, #16
 800e160:	2b10      	cmp	r3, #16
 800e162:	d161      	bne.n	800e228 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	699a      	ldr	r2, [r3, #24]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f022 0210 	bic.w	r2, r2, #16
 800e172:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e174:	6a3b      	ldr	r3, [r7, #32]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	f003 020f 	and.w	r2, r3, #15
 800e180:	4613      	mov	r3, r2
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	4413      	add	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	4413      	add	r3, r2
 800e190:	3304      	adds	r3, #4
 800e192:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e194:	69bb      	ldr	r3, [r7, #24]
 800e196:	0c5b      	lsrs	r3, r3, #17
 800e198:	f003 030f 	and.w	r3, r3, #15
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d124      	bne.n	800e1ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e1a0:	69ba      	ldr	r2, [r7, #24]
 800e1a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d035      	beq.n	800e218 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	091b      	lsrs	r3, r3, #4
 800e1b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e1b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6a38      	ldr	r0, [r7, #32]
 800e1c0:	f004 ff30 	bl	8013024 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	691a      	ldr	r2, [r3, #16]
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	091b      	lsrs	r3, r3, #4
 800e1cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1d0:	441a      	add	r2, r3
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	6a1a      	ldr	r2, [r3, #32]
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	091b      	lsrs	r3, r3, #4
 800e1de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1e2:	441a      	add	r2, r3
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	621a      	str	r2, [r3, #32]
 800e1e8:	e016      	b.n	800e218 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	0c5b      	lsrs	r3, r3, #17
 800e1ee:	f003 030f 	and.w	r3, r3, #15
 800e1f2:	2b06      	cmp	r3, #6
 800e1f4:	d110      	bne.n	800e218 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e1fc:	2208      	movs	r2, #8
 800e1fe:	4619      	mov	r1, r3
 800e200:	6a38      	ldr	r0, [r7, #32]
 800e202:	f004 ff0f 	bl	8013024 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6a1a      	ldr	r2, [r3, #32]
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	091b      	lsrs	r3, r3, #4
 800e20e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e212:	441a      	add	r2, r3
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	699a      	ldr	r2, [r3, #24]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0210 	orr.w	r2, r2, #16
 800e226:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f005 f88d 	bl	801334c <USB_ReadInterrupts>
 800e232:	4603      	mov	r3, r0
 800e234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e238:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e23c:	f040 80a7 	bne.w	800e38e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e240:	2300      	movs	r3, #0
 800e242:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	f005 f892 	bl	8013372 <USB_ReadDevAllOutEpInterrupt>
 800e24e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e250:	e099      	b.n	800e386 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	f003 0301 	and.w	r3, r3, #1
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 808e 	beq.w	800e37a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e264:	b2d2      	uxtb	r2, r2
 800e266:	4611      	mov	r1, r2
 800e268:	4618      	mov	r0, r3
 800e26a:	f005 f8b6 	bl	80133da <USB_ReadDevOutEPInterrupt>
 800e26e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	f003 0301 	and.w	r3, r3, #1
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00c      	beq.n	800e294 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	015a      	lsls	r2, r3, #5
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	4413      	add	r3, r2
 800e282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e286:	461a      	mov	r2, r3
 800e288:	2301      	movs	r3, #1
 800e28a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e28c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fec2 	bl	800f018 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00c      	beq.n	800e2b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	015a      	lsls	r2, r3, #5
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	2308      	movs	r3, #8
 800e2ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 ff98 	bl	800f1e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f003 0310 	and.w	r3, r3, #16
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d008      	beq.n	800e2d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c4:	015a      	lsls	r2, r3, #5
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	2310      	movs	r3, #16
 800e2d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f003 0302 	and.w	r3, r3, #2
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d030      	beq.n	800e340 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	695b      	ldr	r3, [r3, #20]
 800e2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2e6:	2b80      	cmp	r3, #128	; 0x80
 800e2e8:	d109      	bne.n	800e2fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	69fa      	ldr	r2, [r7, #28]
 800e2f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e2fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e300:	4613      	mov	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	4413      	add	r3, r2
 800e310:	3304      	adds	r3, #4
 800e312:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	78db      	ldrb	r3, [r3, #3]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d108      	bne.n	800e32e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	2200      	movs	r2, #0
 800e320:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	b2db      	uxtb	r3, r3
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f007 fc47 	bl	8015bbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	4413      	add	r3, r2
 800e336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e33a:	461a      	mov	r2, r3
 800e33c:	2302      	movs	r3, #2
 800e33e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f003 0320 	and.w	r3, r3, #32
 800e346:	2b00      	cmp	r3, #0
 800e348:	d008      	beq.n	800e35c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	015a      	lsls	r2, r3, #5
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	4413      	add	r3, r2
 800e352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e356:	461a      	mov	r2, r3
 800e358:	2320      	movs	r3, #32
 800e35a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	015a      	lsls	r2, r3, #5
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	4413      	add	r3, r2
 800e36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e372:	461a      	mov	r2, r3
 800e374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e378:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37c:	3301      	adds	r3, #1
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	085b      	lsrs	r3, r3, #1
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f47f af62 	bne.w	800e252 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4618      	mov	r0, r3
 800e394:	f004 ffda 	bl	801334c <USB_ReadInterrupts>
 800e398:	4603      	mov	r3, r0
 800e39a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e39e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e3a2:	f040 80db 	bne.w	800e55c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f004 fffb 	bl	80133a6 <USB_ReadDevAllInEpInterrupt>
 800e3b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e3b6:	e0cd      	b.n	800e554 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f000 80c2 	beq.w	800e548 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ca:	b2d2      	uxtb	r2, r2
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f005 f821 	bl	8013416 <USB_ReadDevInEPInterrupt>
 800e3d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d057      	beq.n	800e490 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	f003 030f 	and.w	r3, r3, #15
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	43db      	mvns	r3, r3
 800e3fa:	69f9      	ldr	r1, [r7, #28]
 800e3fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e400:	4013      	ands	r3, r2
 800e402:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	015a      	lsls	r2, r3, #5
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	4413      	add	r3, r2
 800e40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e410:	461a      	mov	r2, r3
 800e412:	2301      	movs	r3, #1
 800e414:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d132      	bne.n	800e484 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e422:	4613      	mov	r3, r2
 800e424:	00db      	lsls	r3, r3, #3
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	440b      	add	r3, r1
 800e42c:	334c      	adds	r3, #76	; 0x4c
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e434:	4613      	mov	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4403      	add	r3, r0
 800e43e:	3348      	adds	r3, #72	; 0x48
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4419      	add	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e448:	4613      	mov	r3, r2
 800e44a:	00db      	lsls	r3, r3, #3
 800e44c:	4413      	add	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4403      	add	r3, r0
 800e452:	334c      	adds	r3, #76	; 0x4c
 800e454:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d113      	bne.n	800e484 <HAL_PCD_IRQHandler+0x3a2>
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e460:	4613      	mov	r3, r2
 800e462:	00db      	lsls	r3, r3, #3
 800e464:	4413      	add	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	440b      	add	r3, r1
 800e46a:	3354      	adds	r3, #84	; 0x54
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d108      	bne.n	800e484 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6818      	ldr	r0, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e47c:	461a      	mov	r2, r3
 800e47e:	2101      	movs	r1, #1
 800e480:	f005 f828 	bl	80134d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	b2db      	uxtb	r3, r3
 800e488:	4619      	mov	r1, r3
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f007 fb1b 	bl	8015ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	f003 0308 	and.w	r3, r3, #8
 800e496:	2b00      	cmp	r3, #0
 800e498:	d008      	beq.n	800e4ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	015a      	lsls	r2, r3, #5
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	2308      	movs	r3, #8
 800e4aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	f003 0310 	and.w	r3, r3, #16
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d008      	beq.n	800e4c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	015a      	lsls	r2, r3, #5
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	4413      	add	r3, r2
 800e4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	2310      	movs	r3, #16
 800e4c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d008      	beq.n	800e4e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	015a      	lsls	r2, r3, #5
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	4413      	add	r3, r2
 800e4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4de:	461a      	mov	r2, r3
 800e4e0:	2340      	movs	r3, #64	; 0x40
 800e4e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	f003 0302 	and.w	r3, r3, #2
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d023      	beq.n	800e536 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4f0:	6a38      	ldr	r0, [r7, #32]
 800e4f2:	f003 ff09 	bl	8012308 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	4413      	add	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	3338      	adds	r3, #56	; 0x38
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	4413      	add	r3, r2
 800e506:	3304      	adds	r3, #4
 800e508:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	78db      	ldrb	r3, [r3, #3]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d108      	bne.n	800e524 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2200      	movs	r2, #0
 800e516:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	4619      	mov	r1, r3
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f007 fb5e 	bl	8015be0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	015a      	lsls	r2, r3, #5
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	4413      	add	r3, r2
 800e52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e530:	461a      	mov	r2, r3
 800e532:	2302      	movs	r3, #2
 800e534:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d003      	beq.n	800e548 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 fcdb 	bl	800eefe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	3301      	adds	r3, #1
 800e54c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	085b      	lsrs	r3, r3, #1
 800e552:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	2b00      	cmp	r3, #0
 800e558:	f47f af2e 	bne.w	800e3b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4618      	mov	r0, r3
 800e562:	f004 fef3 	bl	801334c <USB_ReadInterrupts>
 800e566:	4603      	mov	r3, r0
 800e568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e56c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e570:	d122      	bne.n	800e5b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	69fa      	ldr	r2, [r7, #28]
 800e57c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e580:	f023 0301 	bic.w	r3, r3, #1
 800e584:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d108      	bne.n	800e5a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e598:	2100      	movs	r1, #0
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fec2 	bl	800f324 <HAL_PCDEx_LPM_Callback>
 800e5a0:	e002      	b.n	800e5a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f007 fafc 	bl	8015ba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	695a      	ldr	r2, [r3, #20]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e5b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f004 fec5 	bl	801334c <USB_ReadInterrupts>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5cc:	d112      	bne.n	800e5f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d102      	bne.n	800e5e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f007 fab8 	bl	8015b54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	695a      	ldr	r2, [r3, #20]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e5f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f004 fea7 	bl	801334c <USB_ReadInterrupts>
 800e5fe:	4603      	mov	r3, r0
 800e600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e608:	f040 80b7 	bne.w	800e77a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	69fa      	ldr	r2, [r7, #28]
 800e616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e61a:	f023 0301 	bic.w	r3, r3, #1
 800e61e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2110      	movs	r1, #16
 800e626:	4618      	mov	r0, r3
 800e628:	f003 fe6e 	bl	8012308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e62c:	2300      	movs	r3, #0
 800e62e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e630:	e046      	b.n	800e6c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	015a      	lsls	r2, r3, #5
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	4413      	add	r3, r2
 800e63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63e:	461a      	mov	r2, r3
 800e640:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e644:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	015a      	lsls	r2, r3, #5
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	4413      	add	r3, r2
 800e64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e656:	0151      	lsls	r1, r2, #5
 800e658:	69fa      	ldr	r2, [r7, #28]
 800e65a:	440a      	add	r2, r1
 800e65c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e660:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e664:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e668:	015a      	lsls	r2, r3, #5
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	4413      	add	r3, r2
 800e66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e672:	461a      	mov	r2, r3
 800e674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e678:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	015a      	lsls	r2, r3, #5
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	4413      	add	r3, r2
 800e682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e68a:	0151      	lsls	r1, r2, #5
 800e68c:	69fa      	ldr	r2, [r7, #28]
 800e68e:	440a      	add	r2, r1
 800e690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e698:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69c:	015a      	lsls	r2, r3, #5
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6aa:	0151      	lsls	r1, r2, #5
 800e6ac:	69fa      	ldr	r2, [r7, #28]
 800e6ae:	440a      	add	r2, r1
 800e6b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e6b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	3301      	adds	r3, #1
 800e6be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d3b3      	bcc.n	800e632 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d0:	69db      	ldr	r3, [r3, #28]
 800e6d2:	69fa      	ldr	r2, [r7, #28]
 800e6d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e6dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d016      	beq.n	800e714 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6f0:	69fa      	ldr	r2, [r7, #28]
 800e6f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6f6:	f043 030b 	orr.w	r3, r3, #11
 800e6fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e70c:	f043 030b 	orr.w	r3, r3, #11
 800e710:	6453      	str	r3, [r2, #68]	; 0x44
 800e712:	e015      	b.n	800e740 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	69fa      	ldr	r2, [r7, #28]
 800e71e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e726:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800e72a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	69fa      	ldr	r2, [r7, #28]
 800e736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e73a:	f043 030b 	orr.w	r3, r3, #11
 800e73e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	69fa      	ldr	r2, [r7, #28]
 800e74a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e74e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e752:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6818      	ldr	r0, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800e764:	461a      	mov	r2, r3
 800e766:	f004 feb5 	bl	80134d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	695a      	ldr	r2, [r3, #20]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 fde4 	bl	801334c <USB_ReadInterrupts>
 800e784:	4603      	mov	r3, r0
 800e786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e78a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e78e:	d124      	bne.n	800e7da <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	f004 fe7a 	bl	801348e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f003 fe2f 	bl	8012402 <USB_GetDevSpeed>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681c      	ldr	r4, [r3, #0]
 800e7b0:	f001 f9e8 	bl	800fb84 <HAL_RCC_GetHCLKFreq>
 800e7b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	461a      	mov	r2, r3
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f003 fb2e 	bl	8011e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f007 f9a6 	bl	8015b16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	695a      	ldr	r2, [r3, #20]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e7d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f004 fdb4 	bl	801334c <USB_ReadInterrupts>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	f003 0308 	and.w	r3, r3, #8
 800e7ea:	2b08      	cmp	r3, #8
 800e7ec:	d10a      	bne.n	800e804 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f007 f983 	bl	8015afa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	695a      	ldr	r2, [r3, #20]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f002 0208 	and.w	r2, r2, #8
 800e802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4618      	mov	r0, r3
 800e80a:	f004 fd9f 	bl	801334c <USB_ReadInterrupts>
 800e80e:	4603      	mov	r3, r0
 800e810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e814:	2b80      	cmp	r3, #128	; 0x80
 800e816:	d122      	bne.n	800e85e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e818:	6a3b      	ldr	r3, [r7, #32]
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e820:	6a3b      	ldr	r3, [r7, #32]
 800e822:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e824:	2301      	movs	r3, #1
 800e826:	627b      	str	r3, [r7, #36]	; 0x24
 800e828:	e014      	b.n	800e854 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e82a:	6879      	ldr	r1, [r7, #4]
 800e82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e82e:	4613      	mov	r3, r2
 800e830:	00db      	lsls	r3, r3, #3
 800e832:	4413      	add	r3, r2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	440b      	add	r3, r1
 800e838:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d105      	bne.n	800e84e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	b2db      	uxtb	r3, r3
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fb27 	bl	800ee9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	3301      	adds	r3, #1
 800e852:	627b      	str	r3, [r7, #36]	; 0x24
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d3e5      	bcc.n	800e82a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4618      	mov	r0, r3
 800e864:	f004 fd72 	bl	801334c <USB_ReadInterrupts>
 800e868:	4603      	mov	r3, r0
 800e86a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e86e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e872:	d13b      	bne.n	800e8ec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e874:	2301      	movs	r3, #1
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
 800e878:	e02b      	b.n	800e8d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	015a      	lsls	r2, r3, #5
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	4413      	add	r3, r2
 800e882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e88a:	6879      	ldr	r1, [r7, #4]
 800e88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e88e:	4613      	mov	r3, r2
 800e890:	00db      	lsls	r3, r3, #3
 800e892:	4413      	add	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	440b      	add	r3, r1
 800e898:	3340      	adds	r3, #64	; 0x40
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d115      	bne.n	800e8cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e8a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	da12      	bge.n	800e8cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	00db      	lsls	r3, r3, #3
 800e8ae:	4413      	add	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	440b      	add	r3, r1
 800e8b4:	333f      	adds	r3, #63	; 0x3f
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fae8 	bl	800ee9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d3ce      	bcc.n	800e87a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	695a      	ldr	r2, [r3, #20]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e8ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f004 fd2b 	bl	801334c <USB_ReadInterrupts>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e900:	d155      	bne.n	800e9ae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e902:	2301      	movs	r3, #1
 800e904:	627b      	str	r3, [r7, #36]	; 0x24
 800e906:	e045      	b.n	800e994 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90a:	015a      	lsls	r2, r3, #5
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	4413      	add	r3, r2
 800e910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e918:	6879      	ldr	r1, [r7, #4]
 800e91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e91c:	4613      	mov	r3, r2
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	4413      	add	r3, r2
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	440b      	add	r3, r1
 800e926:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d12e      	bne.n	800e98e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e930:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e932:	2b00      	cmp	r3, #0
 800e934:	da2b      	bge.n	800e98e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e942:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e946:	429a      	cmp	r2, r3
 800e948:	d121      	bne.n	800e98e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e94e:	4613      	mov	r3, r2
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	440b      	add	r3, r1
 800e958:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e95c:	2201      	movs	r2, #1
 800e95e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e960:	6a3b      	ldr	r3, [r7, #32]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10a      	bne.n	800e98e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e98a:	6053      	str	r3, [r2, #4]
            break;
 800e98c:	e007      	b.n	800e99e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	3301      	adds	r3, #1
 800e992:	627b      	str	r3, [r7, #36]	; 0x24
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d3b4      	bcc.n	800e908 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	695a      	ldr	r2, [r3, #20]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e9ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f004 fcca 	bl	801334c <USB_ReadInterrupts>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9c2:	d10a      	bne.n	800e9da <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f007 f91d 	bl	8015c04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	695a      	ldr	r2, [r3, #20]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e9d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f004 fcb4 	bl	801334c <USB_ReadInterrupts>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	f003 0304 	and.w	r3, r3, #4
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	d115      	bne.n	800ea1a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	f003 0304 	and.w	r3, r3, #4
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f007 f90d 	bl	8015c20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6859      	ldr	r1, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	69ba      	ldr	r2, [r7, #24]
 800ea12:	430a      	orrs	r2, r1
 800ea14:	605a      	str	r2, [r3, #4]
 800ea16:	e000      	b.n	800ea1a <HAL_PCD_IRQHandler+0x938>
      return;
 800ea18:	bf00      	nop
    }
  }
}
 800ea1a:	3734      	adds	r7, #52	; 0x34
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}

0800ea20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d101      	bne.n	800ea3a <HAL_PCD_SetAddress+0x1a>
 800ea36:	2302      	movs	r3, #2
 800ea38:	e013      	b.n	800ea62 <HAL_PCD_SetAddress+0x42>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	78fa      	ldrb	r2, [r7, #3]
 800ea46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	78fa      	ldrb	r2, [r7, #3]
 800ea50:	4611      	mov	r1, r2
 800ea52:	4618      	mov	r0, r3
 800ea54:	f004 fc12 	bl	801327c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	4608      	mov	r0, r1
 800ea74:	4611      	mov	r1, r2
 800ea76:	461a      	mov	r2, r3
 800ea78:	4603      	mov	r3, r0
 800ea7a:	70fb      	strb	r3, [r7, #3]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	803b      	strh	r3, [r7, #0]
 800ea80:	4613      	mov	r3, r2
 800ea82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ea88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	da0f      	bge.n	800eab0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea90:	78fb      	ldrb	r3, [r7, #3]
 800ea92:	f003 020f 	and.w	r2, r3, #15
 800ea96:	4613      	mov	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	4413      	add	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	3338      	adds	r3, #56	; 0x38
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	705a      	strb	r2, [r3, #1]
 800eaae:	e00f      	b.n	800ead0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	f003 020f 	and.w	r2, r3, #15
 800eab6:	4613      	mov	r3, r2
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	4413      	add	r3, r2
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	4413      	add	r3, r2
 800eac6:	3304      	adds	r3, #4
 800eac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ead0:	78fb      	ldrb	r3, [r7, #3]
 800ead2:	f003 030f 	and.w	r3, r3, #15
 800ead6:	b2da      	uxtb	r2, r3
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800eadc:	883a      	ldrh	r2, [r7, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	78ba      	ldrb	r2, [r7, #2]
 800eae6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	785b      	ldrb	r3, [r3, #1]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d004      	beq.n	800eafa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800eafa:	78bb      	ldrb	r3, [r7, #2]
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d102      	bne.n	800eb06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2200      	movs	r2, #0
 800eb04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d101      	bne.n	800eb14 <HAL_PCD_EP_Open+0xaa>
 800eb10:	2302      	movs	r3, #2
 800eb12:	e00e      	b.n	800eb32 <HAL_PCD_EP_Open+0xc8>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	68f9      	ldr	r1, [r7, #12]
 800eb22:	4618      	mov	r0, r3
 800eb24:	f003 fc92 	bl	801244c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800eb30:	7afb      	ldrb	r3, [r7, #11]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b084      	sub	sp, #16
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800eb46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	da0f      	bge.n	800eb6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eb4e:	78fb      	ldrb	r3, [r7, #3]
 800eb50:	f003 020f 	and.w	r2, r3, #15
 800eb54:	4613      	mov	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	4413      	add	r3, r2
 800eb5a:	009b      	lsls	r3, r3, #2
 800eb5c:	3338      	adds	r3, #56	; 0x38
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	4413      	add	r3, r2
 800eb62:	3304      	adds	r3, #4
 800eb64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	705a      	strb	r2, [r3, #1]
 800eb6c:	e00f      	b.n	800eb8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb6e:	78fb      	ldrb	r3, [r7, #3]
 800eb70:	f003 020f 	and.w	r2, r3, #15
 800eb74:	4613      	mov	r3, r2
 800eb76:	00db      	lsls	r3, r3, #3
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	4413      	add	r3, r2
 800eb84:	3304      	adds	r3, #4
 800eb86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800eb8e:	78fb      	ldrb	r3, [r7, #3]
 800eb90:	f003 030f 	and.w	r3, r3, #15
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d101      	bne.n	800eba8 <HAL_PCD_EP_Close+0x6e>
 800eba4:	2302      	movs	r3, #2
 800eba6:	e00e      	b.n	800ebc6 <HAL_PCD_EP_Close+0x8c>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68f9      	ldr	r1, [r7, #12]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f003 fcd0 	bl	801255c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b086      	sub	sp, #24
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	60f8      	str	r0, [r7, #12]
 800ebd6:	607a      	str	r2, [r7, #4]
 800ebd8:	603b      	str	r3, [r7, #0]
 800ebda:	460b      	mov	r3, r1
 800ebdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ebde:	7afb      	ldrb	r3, [r7, #11]
 800ebe0:	f003 020f 	and.w	r2, r3, #15
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	4413      	add	r3, r2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	3304      	adds	r3, #4
 800ebf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	2200      	movs	r2, #0
 800ec08:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ec10:	7afb      	ldrb	r3, [r7, #11]
 800ec12:	f003 030f 	and.w	r3, r3, #15
 800ec16:	b2da      	uxtb	r2, r3
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d102      	bne.n	800ec2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ec2a:	7afb      	ldrb	r3, [r7, #11]
 800ec2c:	f003 030f 	and.w	r3, r3, #15
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d109      	bne.n	800ec48 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6818      	ldr	r0, [r3, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	461a      	mov	r2, r3
 800ec40:	6979      	ldr	r1, [r7, #20]
 800ec42:	f003 ffaf 	bl	8012ba4 <USB_EP0StartXfer>
 800ec46:	e008      	b.n	800ec5a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6818      	ldr	r0, [r3, #0]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	461a      	mov	r2, r3
 800ec54:	6979      	ldr	r1, [r7, #20]
 800ec56:	f003 fd5d 	bl	8012714 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3718      	adds	r7, #24
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ec70:	78fb      	ldrb	r3, [r7, #3]
 800ec72:	f003 020f 	and.w	r2, r3, #15
 800ec76:	6879      	ldr	r1, [r7, #4]
 800ec78:	4613      	mov	r3, r2
 800ec7a:	00db      	lsls	r3, r3, #3
 800ec7c:	4413      	add	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	440b      	add	r3, r1
 800ec82:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ec86:	681b      	ldr	r3, [r3, #0]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	607a      	str	r2, [r7, #4]
 800ec9e:	603b      	str	r3, [r7, #0]
 800eca0:	460b      	mov	r3, r1
 800eca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eca4:	7afb      	ldrb	r3, [r7, #11]
 800eca6:	f003 020f 	and.w	r2, r3, #15
 800ecaa:	4613      	mov	r3, r2
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	4413      	add	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	3338      	adds	r3, #56	; 0x38
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	3304      	adds	r3, #4
 800ecba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	683a      	ldr	r2, [r7, #0]
 800ecc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2200      	movs	r2, #0
 800eccc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ecd4:	7afb      	ldrb	r3, [r7, #11]
 800ecd6:	f003 030f 	and.w	r3, r3, #15
 800ecda:	b2da      	uxtb	r2, r3
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d102      	bne.n	800ecee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ecee:	7afb      	ldrb	r3, [r7, #11]
 800ecf0:	f003 030f 	and.w	r3, r3, #15
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d109      	bne.n	800ed0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6818      	ldr	r0, [r3, #0]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	461a      	mov	r2, r3
 800ed04:	6979      	ldr	r1, [r7, #20]
 800ed06:	f003 ff4d 	bl	8012ba4 <USB_EP0StartXfer>
 800ed0a:	e008      	b.n	800ed1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	691b      	ldr	r3, [r3, #16]
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	461a      	mov	r2, r3
 800ed18:	6979      	ldr	r1, [r7, #20]
 800ed1a:	f003 fcfb 	bl	8012714 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	460b      	mov	r3, r1
 800ed32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ed34:	78fb      	ldrb	r3, [r7, #3]
 800ed36:	f003 020f 	and.w	r2, r3, #15
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d901      	bls.n	800ed46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ed42:	2301      	movs	r3, #1
 800ed44:	e050      	b.n	800ede8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ed46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	da0f      	bge.n	800ed6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed4e:	78fb      	ldrb	r3, [r7, #3]
 800ed50:	f003 020f 	and.w	r2, r3, #15
 800ed54:	4613      	mov	r3, r2
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	4413      	add	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	3338      	adds	r3, #56	; 0x38
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	4413      	add	r3, r2
 800ed62:	3304      	adds	r3, #4
 800ed64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	705a      	strb	r2, [r3, #1]
 800ed6c:	e00d      	b.n	800ed8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ed6e:	78fa      	ldrb	r2, [r7, #3]
 800ed70:	4613      	mov	r3, r2
 800ed72:	00db      	lsls	r3, r3, #3
 800ed74:	4413      	add	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	4413      	add	r3, r2
 800ed80:	3304      	adds	r3, #4
 800ed82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ed90:	78fb      	ldrb	r3, [r7, #3]
 800ed92:	f003 030f 	and.w	r3, r3, #15
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d101      	bne.n	800edaa <HAL_PCD_EP_SetStall+0x82>
 800eda6:	2302      	movs	r3, #2
 800eda8:	e01e      	b.n	800ede8 <HAL_PCD_EP_SetStall+0xc0>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2201      	movs	r2, #1
 800edae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68f9      	ldr	r1, [r7, #12]
 800edb8:	4618      	mov	r0, r3
 800edba:	f004 f98b 	bl	80130d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800edbe:	78fb      	ldrb	r3, [r7, #3]
 800edc0:	f003 030f 	and.w	r3, r3, #15
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10a      	bne.n	800edde <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6818      	ldr	r0, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	b2d9      	uxtb	r1, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800edd8:	461a      	mov	r2, r3
 800edda:	f004 fb7b 	bl	80134d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800edfc:	78fb      	ldrb	r3, [r7, #3]
 800edfe:	f003 020f 	and.w	r2, r3, #15
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d901      	bls.n	800ee0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e042      	b.n	800ee94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ee0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	da0f      	bge.n	800ee36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ee16:	78fb      	ldrb	r3, [r7, #3]
 800ee18:	f003 020f 	and.w	r2, r3, #15
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	00db      	lsls	r3, r3, #3
 800ee20:	4413      	add	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	3338      	adds	r3, #56	; 0x38
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	4413      	add	r3, r2
 800ee2a:	3304      	adds	r3, #4
 800ee2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	705a      	strb	r2, [r3, #1]
 800ee34:	e00f      	b.n	800ee56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ee36:	78fb      	ldrb	r3, [r7, #3]
 800ee38:	f003 020f 	and.w	r2, r3, #15
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	00db      	lsls	r3, r3, #3
 800ee40:	4413      	add	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	f003 030f 	and.w	r3, r3, #15
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d101      	bne.n	800ee76 <HAL_PCD_EP_ClrStall+0x86>
 800ee72:	2302      	movs	r3, #2
 800ee74:	e00e      	b.n	800ee94 <HAL_PCD_EP_ClrStall+0xa4>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	68f9      	ldr	r1, [r7, #12]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f004 f993 	bl	80131b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800eea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	da0c      	bge.n	800eeca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eeb0:	78fb      	ldrb	r3, [r7, #3]
 800eeb2:	f003 020f 	and.w	r2, r3, #15
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	00db      	lsls	r3, r3, #3
 800eeba:	4413      	add	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	3338      	adds	r3, #56	; 0x38
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4413      	add	r3, r2
 800eec4:	3304      	adds	r3, #4
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	e00c      	b.n	800eee4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eeca:	78fb      	ldrb	r3, [r7, #3]
 800eecc:	f003 020f 	and.w	r2, r3, #15
 800eed0:	4613      	mov	r3, r2
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	4413      	add	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	4413      	add	r3, r2
 800eee0:	3304      	adds	r3, #4
 800eee2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	68f9      	ldr	r1, [r7, #12]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f003 ffb2 	bl	8012e54 <USB_EPStopXfer>
 800eef0:	4603      	mov	r3, r0
 800eef2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800eef4:	7afb      	ldrb	r3, [r7, #11]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b08a      	sub	sp, #40	; 0x28
 800ef02:	af02      	add	r7, sp, #8
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ef12:	683a      	ldr	r2, [r7, #0]
 800ef14:	4613      	mov	r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	4413      	add	r3, r2
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	3338      	adds	r3, #56	; 0x38
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	4413      	add	r3, r2
 800ef22:	3304      	adds	r3, #4
 800ef24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6a1a      	ldr	r2, [r3, #32]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	699b      	ldr	r3, [r3, #24]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d901      	bls.n	800ef36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e06c      	b.n	800f010 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	699a      	ldr	r2, [r3, #24]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	1ad3      	subs	r3, r2, r3
 800ef40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	69fa      	ldr	r2, [r7, #28]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d902      	bls.n	800ef52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	3303      	adds	r3, #3
 800ef56:	089b      	lsrs	r3, r3, #2
 800ef58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ef5a:	e02b      	b.n	800efb4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	699a      	ldr	r2, [r3, #24]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6a1b      	ldr	r3, [r3, #32]
 800ef64:	1ad3      	subs	r3, r2, r3
 800ef66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	69fa      	ldr	r2, [r7, #28]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d902      	bls.n	800ef78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	3303      	adds	r3, #3
 800ef7c:	089b      	lsrs	r3, r3, #2
 800ef7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6919      	ldr	r1, [r3, #16]
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4603      	mov	r3, r0
 800ef96:	6978      	ldr	r0, [r7, #20]
 800ef98:	f004 f806 	bl	8012fa8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	691a      	ldr	r2, [r3, #16]
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	441a      	add	r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6a1a      	ldr	r2, [r3, #32]
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	441a      	add	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	015a      	lsls	r2, r3, #5
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	4413      	add	r3, r2
 800efbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d809      	bhi.n	800efde <PCD_WriteEmptyTxFifo+0xe0>
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6a1a      	ldr	r2, [r3, #32]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d203      	bcs.n	800efde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	699b      	ldr	r3, [r3, #24]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1be      	bne.n	800ef5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	699a      	ldr	r2, [r3, #24]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	6a1b      	ldr	r3, [r3, #32]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d811      	bhi.n	800f00e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	f003 030f 	and.w	r3, r3, #15
 800eff0:	2201      	movs	r2, #1
 800eff2:	fa02 f303 	lsl.w	r3, r2, r3
 800eff6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800effe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	43db      	mvns	r3, r3
 800f004:	6939      	ldr	r1, [r7, #16]
 800f006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f00a:	4013      	ands	r3, r2
 800f00c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3720      	adds	r7, #32
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b088      	sub	sp, #32
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	333c      	adds	r3, #60	; 0x3c
 800f030:	3304      	adds	r3, #4
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d17b      	bne.n	800f146 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b00      	cmp	r3, #0
 800f056:	d015      	beq.n	800f084 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	4a61      	ldr	r2, [pc, #388]	; (800f1e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	f240 80b9 	bls.w	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 80b3 	beq.w	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	015a      	lsls	r2, r3, #5
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	4413      	add	r3, r2
 800f076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f07a:	461a      	mov	r2, r3
 800f07c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f080:	6093      	str	r3, [r2, #8]
 800f082:	e0a7      	b.n	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f003 0320 	and.w	r3, r3, #32
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d009      	beq.n	800f0a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	015a      	lsls	r2, r3, #5
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	4413      	add	r3, r2
 800f096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f09a:	461a      	mov	r2, r3
 800f09c:	2320      	movs	r3, #32
 800f09e:	6093      	str	r3, [r2, #8]
 800f0a0:	e098      	b.n	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f040 8093 	bne.w	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	4a4b      	ldr	r2, [pc, #300]	; (800f1e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d90f      	bls.n	800f0d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00a      	beq.n	800f0d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	015a      	lsls	r2, r3, #5
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0d2:	6093      	str	r3, [r2, #8]
 800f0d4:	e07e      	b.n	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	4613      	mov	r3, r2
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	4413      	add	r3, r2
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	4413      	add	r3, r2
 800f0e8:	3304      	adds	r3, #4
 800f0ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	69da      	ldr	r2, [r3, #28]
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	0159      	lsls	r1, r3, #5
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	440b      	add	r3, r1
 800f0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0fc:	691b      	ldr	r3, [r3, #16]
 800f0fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f102:	1ad2      	subs	r2, r2, r3
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d114      	bne.n	800f138 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d109      	bne.n	800f12a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f120:	461a      	mov	r2, r3
 800f122:	2101      	movs	r1, #1
 800f124:	f004 f9d6 	bl	80134d4 <USB_EP0_OutStart>
 800f128:	e006      	b.n	800f138 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	691a      	ldr	r2, [r3, #16]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	6a1b      	ldr	r3, [r3, #32]
 800f132:	441a      	add	r2, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	4619      	mov	r1, r3
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f006 fca6 	bl	8015a90 <HAL_PCD_DataOutStageCallback>
 800f144:	e046      	b.n	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	4a26      	ldr	r2, [pc, #152]	; (800f1e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d124      	bne.n	800f198 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00a      	beq.n	800f16e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	015a      	lsls	r2, r3, #5
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	4413      	add	r3, r2
 800f160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f164:	461a      	mov	r2, r3
 800f166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f16a:	6093      	str	r3, [r2, #8]
 800f16c:	e032      	b.n	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	f003 0320 	and.w	r3, r3, #32
 800f174:	2b00      	cmp	r3, #0
 800f176:	d008      	beq.n	800f18a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	015a      	lsls	r2, r3, #5
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	4413      	add	r3, r2
 800f180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f184:	461a      	mov	r2, r3
 800f186:	2320      	movs	r3, #32
 800f188:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f006 fc7d 	bl	8015a90 <HAL_PCD_DataOutStageCallback>
 800f196:	e01d      	b.n	800f1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d114      	bne.n	800f1c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	4413      	add	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	440b      	add	r3, r1
 800f1ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d108      	bne.n	800f1c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	f004 f986 	bl	80134d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f006 fc5e 	bl	8015a90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3720      	adds	r7, #32
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	4f54300a 	.word	0x4f54300a
 800f1e4:	4f54310a 	.word	0x4f54310a

0800f1e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	333c      	adds	r3, #60	; 0x3c
 800f200:	3304      	adds	r3, #4
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	015a      	lsls	r2, r3, #5
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	4413      	add	r3, r2
 800f20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	4a15      	ldr	r2, [pc, #84]	; (800f270 <PCD_EP_OutSetupPacket_int+0x88>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d90e      	bls.n	800f23c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f224:	2b00      	cmp	r3, #0
 800f226:	d009      	beq.n	800f23c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	015a      	lsls	r2, r3, #5
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	4413      	add	r3, r2
 800f230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f234:	461a      	mov	r2, r3
 800f236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f23a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f006 fc15 	bl	8015a6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	4a0a      	ldr	r2, [pc, #40]	; (800f270 <PCD_EP_OutSetupPacket_int+0x88>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d90c      	bls.n	800f264 <PCD_EP_OutSetupPacket_int+0x7c>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d108      	bne.n	800f264 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6818      	ldr	r0, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f25c:	461a      	mov	r2, r3
 800f25e:	2101      	movs	r1, #1
 800f260:	f004 f938 	bl	80134d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3718      	adds	r7, #24
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	4f54300a 	.word	0x4f54300a

0800f274 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	460b      	mov	r3, r1
 800f27e:	70fb      	strb	r3, [r7, #3]
 800f280:	4613      	mov	r3, r2
 800f282:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f28c:	78fb      	ldrb	r3, [r7, #3]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d107      	bne.n	800f2a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f292:	883b      	ldrh	r3, [r7, #0]
 800f294:	0419      	lsls	r1, r3, #16
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68ba      	ldr	r2, [r7, #8]
 800f29c:	430a      	orrs	r2, r1
 800f29e:	629a      	str	r2, [r3, #40]	; 0x28
 800f2a0:	e028      	b.n	800f2f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a8:	0c1b      	lsrs	r3, r3, #16
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	73fb      	strb	r3, [r7, #15]
 800f2b4:	e00d      	b.n	800f2d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	3340      	adds	r3, #64	; 0x40
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	4413      	add	r3, r2
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	0c1b      	lsrs	r3, r3, #16
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f2cc:	7bfb      	ldrb	r3, [r7, #15]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	73fb      	strb	r3, [r7, #15]
 800f2d2:	7bfa      	ldrb	r2, [r7, #15]
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d3ec      	bcc.n	800f2b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f2dc:	883b      	ldrh	r3, [r7, #0]
 800f2de:	0418      	lsls	r0, r3, #16
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6819      	ldr	r1, [r3, #0]
 800f2e4:	78fb      	ldrb	r3, [r7, #3]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	4302      	orrs	r2, r0
 800f2ec:	3340      	adds	r3, #64	; 0x40
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	440b      	add	r3, r1
 800f2f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f2f4:	2300      	movs	r3, #0
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr

0800f302 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f302:	b480      	push	{r7}
 800f304:	b083      	sub	sp, #12
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	460b      	mov	r3, r1
 800f30c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	887a      	ldrh	r2, [r7, #2]
 800f314:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	460b      	mov	r3, r1
 800f32e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b086      	sub	sp, #24
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e267      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d075      	beq.n	800f446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f35a:	4b88      	ldr	r3, [pc, #544]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	f003 030c 	and.w	r3, r3, #12
 800f362:	2b04      	cmp	r3, #4
 800f364:	d00c      	beq.n	800f380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f366:	4b85      	ldr	r3, [pc, #532]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f36e:	2b08      	cmp	r3, #8
 800f370:	d112      	bne.n	800f398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f372:	4b82      	ldr	r3, [pc, #520]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f37a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f37e:	d10b      	bne.n	800f398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f380:	4b7e      	ldr	r3, [pc, #504]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d05b      	beq.n	800f444 <HAL_RCC_OscConfig+0x108>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d157      	bne.n	800f444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f394:	2301      	movs	r3, #1
 800f396:	e242      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3a0:	d106      	bne.n	800f3b0 <HAL_RCC_OscConfig+0x74>
 800f3a2:	4b76      	ldr	r3, [pc, #472]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a75      	ldr	r2, [pc, #468]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3ac:	6013      	str	r3, [r2, #0]
 800f3ae:	e01d      	b.n	800f3ec <HAL_RCC_OscConfig+0xb0>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3b8:	d10c      	bne.n	800f3d4 <HAL_RCC_OscConfig+0x98>
 800f3ba:	4b70      	ldr	r3, [pc, #448]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4a6f      	ldr	r2, [pc, #444]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	4b6d      	ldr	r3, [pc, #436]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a6c      	ldr	r2, [pc, #432]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3d0:	6013      	str	r3, [r2, #0]
 800f3d2:	e00b      	b.n	800f3ec <HAL_RCC_OscConfig+0xb0>
 800f3d4:	4b69      	ldr	r3, [pc, #420]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a68      	ldr	r2, [pc, #416]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3de:	6013      	str	r3, [r2, #0]
 800f3e0:	4b66      	ldr	r3, [pc, #408]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	4a65      	ldr	r2, [pc, #404]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f3e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f3ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d013      	beq.n	800f41c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f3f4:	f7fc fa7c 	bl	800b8f0 <HAL_GetTick>
 800f3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3fa:	e008      	b.n	800f40e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f3fc:	f7fc fa78 	bl	800b8f0 <HAL_GetTick>
 800f400:	4602      	mov	r2, r0
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	2b64      	cmp	r3, #100	; 0x64
 800f408:	d901      	bls.n	800f40e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f40a:	2303      	movs	r3, #3
 800f40c:	e207      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f40e:	4b5b      	ldr	r3, [pc, #364]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f416:	2b00      	cmp	r3, #0
 800f418:	d0f0      	beq.n	800f3fc <HAL_RCC_OscConfig+0xc0>
 800f41a:	e014      	b.n	800f446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f41c:	f7fc fa68 	bl	800b8f0 <HAL_GetTick>
 800f420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f422:	e008      	b.n	800f436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f424:	f7fc fa64 	bl	800b8f0 <HAL_GetTick>
 800f428:	4602      	mov	r2, r0
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	1ad3      	subs	r3, r2, r3
 800f42e:	2b64      	cmp	r3, #100	; 0x64
 800f430:	d901      	bls.n	800f436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f432:	2303      	movs	r3, #3
 800f434:	e1f3      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f436:	4b51      	ldr	r3, [pc, #324]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f0      	bne.n	800f424 <HAL_RCC_OscConfig+0xe8>
 800f442:	e000      	b.n	800f446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0302 	and.w	r3, r3, #2
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d063      	beq.n	800f51a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f452:	4b4a      	ldr	r3, [pc, #296]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	f003 030c 	and.w	r3, r3, #12
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00b      	beq.n	800f476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f45e:	4b47      	ldr	r3, [pc, #284]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f466:	2b08      	cmp	r3, #8
 800f468:	d11c      	bne.n	800f4a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f46a:	4b44      	ldr	r3, [pc, #272]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f472:	2b00      	cmp	r3, #0
 800f474:	d116      	bne.n	800f4a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f476:	4b41      	ldr	r3, [pc, #260]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f003 0302 	and.w	r3, r3, #2
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d005      	beq.n	800f48e <HAL_RCC_OscConfig+0x152>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	2b01      	cmp	r3, #1
 800f488:	d001      	beq.n	800f48e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e1c7      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f48e:	4b3b      	ldr	r3, [pc, #236]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	4937      	ldr	r1, [pc, #220]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f4a2:	e03a      	b.n	800f51a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d020      	beq.n	800f4ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f4ac:	4b34      	ldr	r3, [pc, #208]	; (800f580 <HAL_RCC_OscConfig+0x244>)
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4b2:	f7fc fa1d 	bl	800b8f0 <HAL_GetTick>
 800f4b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f4b8:	e008      	b.n	800f4cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f4ba:	f7fc fa19 	bl	800b8f0 <HAL_GetTick>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	2b02      	cmp	r3, #2
 800f4c6:	d901      	bls.n	800f4cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f4c8:	2303      	movs	r3, #3
 800f4ca:	e1a8      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f4cc:	4b2b      	ldr	r3, [pc, #172]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f003 0302 	and.w	r3, r3, #2
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d0f0      	beq.n	800f4ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4d8:	4b28      	ldr	r3, [pc, #160]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	691b      	ldr	r3, [r3, #16]
 800f4e4:	00db      	lsls	r3, r3, #3
 800f4e6:	4925      	ldr	r1, [pc, #148]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	600b      	str	r3, [r1, #0]
 800f4ec:	e015      	b.n	800f51a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f4ee:	4b24      	ldr	r3, [pc, #144]	; (800f580 <HAL_RCC_OscConfig+0x244>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4f4:	f7fc f9fc 	bl	800b8f0 <HAL_GetTick>
 800f4f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f4fa:	e008      	b.n	800f50e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f4fc:	f7fc f9f8 	bl	800b8f0 <HAL_GetTick>
 800f500:	4602      	mov	r2, r0
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	2b02      	cmp	r3, #2
 800f508:	d901      	bls.n	800f50e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f50a:	2303      	movs	r3, #3
 800f50c:	e187      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f50e:	4b1b      	ldr	r3, [pc, #108]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f003 0302 	and.w	r3, r3, #2
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1f0      	bne.n	800f4fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 0308 	and.w	r3, r3, #8
 800f522:	2b00      	cmp	r3, #0
 800f524:	d036      	beq.n	800f594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d016      	beq.n	800f55c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f52e:	4b15      	ldr	r3, [pc, #84]	; (800f584 <HAL_RCC_OscConfig+0x248>)
 800f530:	2201      	movs	r2, #1
 800f532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f534:	f7fc f9dc 	bl	800b8f0 <HAL_GetTick>
 800f538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f53a:	e008      	b.n	800f54e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f53c:	f7fc f9d8 	bl	800b8f0 <HAL_GetTick>
 800f540:	4602      	mov	r2, r0
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	2b02      	cmp	r3, #2
 800f548:	d901      	bls.n	800f54e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f54a:	2303      	movs	r3, #3
 800f54c:	e167      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f54e:	4b0b      	ldr	r3, [pc, #44]	; (800f57c <HAL_RCC_OscConfig+0x240>)
 800f550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f552:	f003 0302 	and.w	r3, r3, #2
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0f0      	beq.n	800f53c <HAL_RCC_OscConfig+0x200>
 800f55a:	e01b      	b.n	800f594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f55c:	4b09      	ldr	r3, [pc, #36]	; (800f584 <HAL_RCC_OscConfig+0x248>)
 800f55e:	2200      	movs	r2, #0
 800f560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f562:	f7fc f9c5 	bl	800b8f0 <HAL_GetTick>
 800f566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f568:	e00e      	b.n	800f588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f56a:	f7fc f9c1 	bl	800b8f0 <HAL_GetTick>
 800f56e:	4602      	mov	r2, r0
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	2b02      	cmp	r3, #2
 800f576:	d907      	bls.n	800f588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f578:	2303      	movs	r3, #3
 800f57a:	e150      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
 800f57c:	40023800 	.word	0x40023800
 800f580:	42470000 	.word	0x42470000
 800f584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f588:	4b88      	ldr	r3, [pc, #544]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f58a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f58c:	f003 0302 	and.w	r3, r3, #2
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1ea      	bne.n	800f56a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f003 0304 	and.w	r3, r3, #4
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f000 8097 	beq.w	800f6d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f5a6:	4b81      	ldr	r3, [pc, #516]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10f      	bne.n	800f5d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	60bb      	str	r3, [r7, #8]
 800f5b6:	4b7d      	ldr	r3, [pc, #500]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ba:	4a7c      	ldr	r2, [pc, #496]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f5bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f5c0:	6413      	str	r3, [r2, #64]	; 0x40
 800f5c2:	4b7a      	ldr	r3, [pc, #488]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5ca:	60bb      	str	r3, [r7, #8]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f5d2:	4b77      	ldr	r3, [pc, #476]	; (800f7b0 <HAL_RCC_OscConfig+0x474>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d118      	bne.n	800f610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f5de:	4b74      	ldr	r3, [pc, #464]	; (800f7b0 <HAL_RCC_OscConfig+0x474>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a73      	ldr	r2, [pc, #460]	; (800f7b0 <HAL_RCC_OscConfig+0x474>)
 800f5e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f5ea:	f7fc f981 	bl	800b8f0 <HAL_GetTick>
 800f5ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f5f0:	e008      	b.n	800f604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f5f2:	f7fc f97d 	bl	800b8f0 <HAL_GetTick>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	d901      	bls.n	800f604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f600:	2303      	movs	r3, #3
 800f602:	e10c      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f604:	4b6a      	ldr	r3, [pc, #424]	; (800f7b0 <HAL_RCC_OscConfig+0x474>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d0f0      	beq.n	800f5f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d106      	bne.n	800f626 <HAL_RCC_OscConfig+0x2ea>
 800f618:	4b64      	ldr	r3, [pc, #400]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f61c:	4a63      	ldr	r2, [pc, #396]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f61e:	f043 0301 	orr.w	r3, r3, #1
 800f622:	6713      	str	r3, [r2, #112]	; 0x70
 800f624:	e01c      	b.n	800f660 <HAL_RCC_OscConfig+0x324>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	2b05      	cmp	r3, #5
 800f62c:	d10c      	bne.n	800f648 <HAL_RCC_OscConfig+0x30c>
 800f62e:	4b5f      	ldr	r3, [pc, #380]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f632:	4a5e      	ldr	r2, [pc, #376]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f634:	f043 0304 	orr.w	r3, r3, #4
 800f638:	6713      	str	r3, [r2, #112]	; 0x70
 800f63a:	4b5c      	ldr	r3, [pc, #368]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f63e:	4a5b      	ldr	r2, [pc, #364]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f640:	f043 0301 	orr.w	r3, r3, #1
 800f644:	6713      	str	r3, [r2, #112]	; 0x70
 800f646:	e00b      	b.n	800f660 <HAL_RCC_OscConfig+0x324>
 800f648:	4b58      	ldr	r3, [pc, #352]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f64c:	4a57      	ldr	r2, [pc, #348]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f64e:	f023 0301 	bic.w	r3, r3, #1
 800f652:	6713      	str	r3, [r2, #112]	; 0x70
 800f654:	4b55      	ldr	r3, [pc, #340]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f658:	4a54      	ldr	r2, [pc, #336]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f65a:	f023 0304 	bic.w	r3, r3, #4
 800f65e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d015      	beq.n	800f694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f668:	f7fc f942 	bl	800b8f0 <HAL_GetTick>
 800f66c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f66e:	e00a      	b.n	800f686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f670:	f7fc f93e 	bl	800b8f0 <HAL_GetTick>
 800f674:	4602      	mov	r2, r0
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f67e:	4293      	cmp	r3, r2
 800f680:	d901      	bls.n	800f686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f682:	2303      	movs	r3, #3
 800f684:	e0cb      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f686:	4b49      	ldr	r3, [pc, #292]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f68a:	f003 0302 	and.w	r3, r3, #2
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d0ee      	beq.n	800f670 <HAL_RCC_OscConfig+0x334>
 800f692:	e014      	b.n	800f6be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f694:	f7fc f92c 	bl	800b8f0 <HAL_GetTick>
 800f698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f69a:	e00a      	b.n	800f6b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f69c:	f7fc f928 	bl	800b8f0 <HAL_GetTick>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d901      	bls.n	800f6b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f6ae:	2303      	movs	r3, #3
 800f6b0:	e0b5      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f6b2:	4b3e      	ldr	r3, [pc, #248]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6b6:	f003 0302 	and.w	r3, r3, #2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1ee      	bne.n	800f69c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d105      	bne.n	800f6d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f6c4:	4b39      	ldr	r3, [pc, #228]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c8:	4a38      	ldr	r2, [pc, #224]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f6ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	699b      	ldr	r3, [r3, #24]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f000 80a1 	beq.w	800f81c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f6da:	4b34      	ldr	r3, [pc, #208]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	f003 030c 	and.w	r3, r3, #12
 800f6e2:	2b08      	cmp	r3, #8
 800f6e4:	d05c      	beq.n	800f7a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	699b      	ldr	r3, [r3, #24]
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d141      	bne.n	800f772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f6ee:	4b31      	ldr	r3, [pc, #196]	; (800f7b4 <HAL_RCC_OscConfig+0x478>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6f4:	f7fc f8fc 	bl	800b8f0 <HAL_GetTick>
 800f6f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f6fa:	e008      	b.n	800f70e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f6fc:	f7fc f8f8 	bl	800b8f0 <HAL_GetTick>
 800f700:	4602      	mov	r2, r0
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	2b02      	cmp	r3, #2
 800f708:	d901      	bls.n	800f70e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f70a:	2303      	movs	r3, #3
 800f70c:	e087      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f70e:	4b27      	ldr	r3, [pc, #156]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1f0      	bne.n	800f6fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	69da      	ldr	r2, [r3, #28]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a1b      	ldr	r3, [r3, #32]
 800f722:	431a      	orrs	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f728:	019b      	lsls	r3, r3, #6
 800f72a:	431a      	orrs	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f730:	085b      	lsrs	r3, r3, #1
 800f732:	3b01      	subs	r3, #1
 800f734:	041b      	lsls	r3, r3, #16
 800f736:	431a      	orrs	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	061b      	lsls	r3, r3, #24
 800f73e:	491b      	ldr	r1, [pc, #108]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f740:	4313      	orrs	r3, r2
 800f742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f744:	4b1b      	ldr	r3, [pc, #108]	; (800f7b4 <HAL_RCC_OscConfig+0x478>)
 800f746:	2201      	movs	r2, #1
 800f748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f74a:	f7fc f8d1 	bl	800b8f0 <HAL_GetTick>
 800f74e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f750:	e008      	b.n	800f764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f752:	f7fc f8cd 	bl	800b8f0 <HAL_GetTick>
 800f756:	4602      	mov	r2, r0
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d901      	bls.n	800f764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f760:	2303      	movs	r3, #3
 800f762:	e05c      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f764:	4b11      	ldr	r3, [pc, #68]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0f0      	beq.n	800f752 <HAL_RCC_OscConfig+0x416>
 800f770:	e054      	b.n	800f81c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f772:	4b10      	ldr	r3, [pc, #64]	; (800f7b4 <HAL_RCC_OscConfig+0x478>)
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f778:	f7fc f8ba 	bl	800b8f0 <HAL_GetTick>
 800f77c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f77e:	e008      	b.n	800f792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f780:	f7fc f8b6 	bl	800b8f0 <HAL_GetTick>
 800f784:	4602      	mov	r2, r0
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	2b02      	cmp	r3, #2
 800f78c:	d901      	bls.n	800f792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f78e:	2303      	movs	r3, #3
 800f790:	e045      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f792:	4b06      	ldr	r3, [pc, #24]	; (800f7ac <HAL_RCC_OscConfig+0x470>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1f0      	bne.n	800f780 <HAL_RCC_OscConfig+0x444>
 800f79e:	e03d      	b.n	800f81c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	699b      	ldr	r3, [r3, #24]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d107      	bne.n	800f7b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e038      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
 800f7ac:	40023800 	.word	0x40023800
 800f7b0:	40007000 	.word	0x40007000
 800f7b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f7b8:	4b1b      	ldr	r3, [pc, #108]	; (800f828 <HAL_RCC_OscConfig+0x4ec>)
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	699b      	ldr	r3, [r3, #24]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d028      	beq.n	800f818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d121      	bne.n	800f818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d11a      	bne.n	800f818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f7e2:	68fa      	ldr	r2, [r7, #12]
 800f7e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f7e8:	4013      	ands	r3, r2
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f7ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d111      	bne.n	800f818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fe:	085b      	lsrs	r3, r3, #1
 800f800:	3b01      	subs	r3, #1
 800f802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f804:	429a      	cmp	r2, r3
 800f806:	d107      	bne.n	800f818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f814:	429a      	cmp	r2, r3
 800f816:	d001      	beq.n	800f81c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f818:	2301      	movs	r3, #1
 800f81a:	e000      	b.n	800f81e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	40023800 	.word	0x40023800

0800f82c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f83c:	2301      	movs	r3, #1
 800f83e:	e0cc      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f840:	4b68      	ldr	r3, [pc, #416]	; (800f9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f003 0307 	and.w	r3, r3, #7
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d90c      	bls.n	800f868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f84e:	4b65      	ldr	r3, [pc, #404]	; (800f9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f850:	683a      	ldr	r2, [r7, #0]
 800f852:	b2d2      	uxtb	r2, r2
 800f854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f856:	4b63      	ldr	r3, [pc, #396]	; (800f9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f003 0307 	and.w	r3, r3, #7
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	d001      	beq.n	800f868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f864:	2301      	movs	r3, #1
 800f866:	e0b8      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f003 0302 	and.w	r3, r3, #2
 800f870:	2b00      	cmp	r3, #0
 800f872:	d020      	beq.n	800f8b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f003 0304 	and.w	r3, r3, #4
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d005      	beq.n	800f88c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f880:	4b59      	ldr	r3, [pc, #356]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	4a58      	ldr	r2, [pc, #352]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f88a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f003 0308 	and.w	r3, r3, #8
 800f894:	2b00      	cmp	r3, #0
 800f896:	d005      	beq.n	800f8a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f898:	4b53      	ldr	r3, [pc, #332]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	4a52      	ldr	r2, [pc, #328]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f89e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f8a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f8a4:	4b50      	ldr	r3, [pc, #320]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	494d      	ldr	r1, [pc, #308]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f003 0301 	and.w	r3, r3, #1
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d044      	beq.n	800f94c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d107      	bne.n	800f8da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f8ca:	4b47      	ldr	r3, [pc, #284]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d119      	bne.n	800f90a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e07f      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d003      	beq.n	800f8ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d107      	bne.n	800f8fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f8ea:	4b3f      	ldr	r3, [pc, #252]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d109      	bne.n	800f90a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e06f      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f8fa:	4b3b      	ldr	r3, [pc, #236]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f003 0302 	and.w	r3, r3, #2
 800f902:	2b00      	cmp	r3, #0
 800f904:	d101      	bne.n	800f90a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f906:	2301      	movs	r3, #1
 800f908:	e067      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f90a:	4b37      	ldr	r3, [pc, #220]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	f023 0203 	bic.w	r2, r3, #3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	4934      	ldr	r1, [pc, #208]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f918:	4313      	orrs	r3, r2
 800f91a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f91c:	f7fb ffe8 	bl	800b8f0 <HAL_GetTick>
 800f920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f922:	e00a      	b.n	800f93a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f924:	f7fb ffe4 	bl	800b8f0 <HAL_GetTick>
 800f928:	4602      	mov	r2, r0
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	1ad3      	subs	r3, r2, r3
 800f92e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f932:	4293      	cmp	r3, r2
 800f934:	d901      	bls.n	800f93a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f936:	2303      	movs	r3, #3
 800f938:	e04f      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f93a:	4b2b      	ldr	r3, [pc, #172]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	f003 020c 	and.w	r2, r3, #12
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	429a      	cmp	r2, r3
 800f94a:	d1eb      	bne.n	800f924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f94c:	4b25      	ldr	r3, [pc, #148]	; (800f9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f003 0307 	and.w	r3, r3, #7
 800f954:	683a      	ldr	r2, [r7, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d20c      	bcs.n	800f974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f95a:	4b22      	ldr	r3, [pc, #136]	; (800f9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	b2d2      	uxtb	r2, r2
 800f960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f962:	4b20      	ldr	r3, [pc, #128]	; (800f9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f003 0307 	and.w	r3, r3, #7
 800f96a:	683a      	ldr	r2, [r7, #0]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d001      	beq.n	800f974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f970:	2301      	movs	r3, #1
 800f972:	e032      	b.n	800f9da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f003 0304 	and.w	r3, r3, #4
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d008      	beq.n	800f992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f980:	4b19      	ldr	r3, [pc, #100]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	4916      	ldr	r1, [pc, #88]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f98e:	4313      	orrs	r3, r2
 800f990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f003 0308 	and.w	r3, r3, #8
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d009      	beq.n	800f9b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f99e:	4b12      	ldr	r3, [pc, #72]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	691b      	ldr	r3, [r3, #16]
 800f9aa:	00db      	lsls	r3, r3, #3
 800f9ac:	490e      	ldr	r1, [pc, #56]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f9b2:	f000 f821 	bl	800f9f8 <HAL_RCC_GetSysClockFreq>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	091b      	lsrs	r3, r3, #4
 800f9be:	f003 030f 	and.w	r3, r3, #15
 800f9c2:	490a      	ldr	r1, [pc, #40]	; (800f9ec <HAL_RCC_ClockConfig+0x1c0>)
 800f9c4:	5ccb      	ldrb	r3, [r1, r3]
 800f9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ca:	4a09      	ldr	r2, [pc, #36]	; (800f9f0 <HAL_RCC_ClockConfig+0x1c4>)
 800f9cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f9ce:	4b09      	ldr	r3, [pc, #36]	; (800f9f4 <HAL_RCC_ClockConfig+0x1c8>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7f9 f8e6 	bl	8008ba4 <HAL_InitTick>

  return HAL_OK;
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	40023c00 	.word	0x40023c00
 800f9e8:	40023800 	.word	0x40023800
 800f9ec:	0801718c 	.word	0x0801718c
 800f9f0:	2000010c 	.word	0x2000010c
 800f9f4:	20000110 	.word	0x20000110

0800f9f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f9fc:	b090      	sub	sp, #64	; 0x40
 800f9fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fa00:	2300      	movs	r3, #0
 800fa02:	637b      	str	r3, [r7, #52]	; 0x34
 800fa04:	2300      	movs	r3, #0
 800fa06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa08:	2300      	movs	r3, #0
 800fa0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa10:	4b59      	ldr	r3, [pc, #356]	; (800fb78 <HAL_RCC_GetSysClockFreq+0x180>)
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	f003 030c 	and.w	r3, r3, #12
 800fa18:	2b08      	cmp	r3, #8
 800fa1a:	d00d      	beq.n	800fa38 <HAL_RCC_GetSysClockFreq+0x40>
 800fa1c:	2b08      	cmp	r3, #8
 800fa1e:	f200 80a1 	bhi.w	800fb64 <HAL_RCC_GetSysClockFreq+0x16c>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <HAL_RCC_GetSysClockFreq+0x34>
 800fa26:	2b04      	cmp	r3, #4
 800fa28:	d003      	beq.n	800fa32 <HAL_RCC_GetSysClockFreq+0x3a>
 800fa2a:	e09b      	b.n	800fb64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fa2c:	4b53      	ldr	r3, [pc, #332]	; (800fb7c <HAL_RCC_GetSysClockFreq+0x184>)
 800fa2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800fa30:	e09b      	b.n	800fb6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fa32:	4b53      	ldr	r3, [pc, #332]	; (800fb80 <HAL_RCC_GetSysClockFreq+0x188>)
 800fa34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fa36:	e098      	b.n	800fb6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fa38:	4b4f      	ldr	r3, [pc, #316]	; (800fb78 <HAL_RCC_GetSysClockFreq+0x180>)
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fa42:	4b4d      	ldr	r3, [pc, #308]	; (800fb78 <HAL_RCC_GetSysClockFreq+0x180>)
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d028      	beq.n	800faa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fa4e:	4b4a      	ldr	r3, [pc, #296]	; (800fb78 <HAL_RCC_GetSysClockFreq+0x180>)
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	099b      	lsrs	r3, r3, #6
 800fa54:	2200      	movs	r2, #0
 800fa56:	623b      	str	r3, [r7, #32]
 800fa58:	627a      	str	r2, [r7, #36]	; 0x24
 800fa5a:	6a3b      	ldr	r3, [r7, #32]
 800fa5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fa60:	2100      	movs	r1, #0
 800fa62:	4b47      	ldr	r3, [pc, #284]	; (800fb80 <HAL_RCC_GetSysClockFreq+0x188>)
 800fa64:	fb03 f201 	mul.w	r2, r3, r1
 800fa68:	2300      	movs	r3, #0
 800fa6a:	fb00 f303 	mul.w	r3, r0, r3
 800fa6e:	4413      	add	r3, r2
 800fa70:	4a43      	ldr	r2, [pc, #268]	; (800fb80 <HAL_RCC_GetSysClockFreq+0x188>)
 800fa72:	fba0 1202 	umull	r1, r2, r0, r2
 800fa76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa78:	460a      	mov	r2, r1
 800fa7a:	62ba      	str	r2, [r7, #40]	; 0x28
 800fa7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa7e:	4413      	add	r3, r2
 800fa80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa84:	2200      	movs	r2, #0
 800fa86:	61bb      	str	r3, [r7, #24]
 800fa88:	61fa      	str	r2, [r7, #28]
 800fa8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fa8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fa92:	f7f1 f865 	bl	8000b60 <__aeabi_uldivmod>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa9e:	e053      	b.n	800fb48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800faa0:	4b35      	ldr	r3, [pc, #212]	; (800fb78 <HAL_RCC_GetSysClockFreq+0x180>)
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	099b      	lsrs	r3, r3, #6
 800faa6:	2200      	movs	r2, #0
 800faa8:	613b      	str	r3, [r7, #16]
 800faaa:	617a      	str	r2, [r7, #20]
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800fab2:	f04f 0b00 	mov.w	fp, #0
 800fab6:	4652      	mov	r2, sl
 800fab8:	465b      	mov	r3, fp
 800faba:	f04f 0000 	mov.w	r0, #0
 800fabe:	f04f 0100 	mov.w	r1, #0
 800fac2:	0159      	lsls	r1, r3, #5
 800fac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800fac8:	0150      	lsls	r0, r2, #5
 800faca:	4602      	mov	r2, r0
 800facc:	460b      	mov	r3, r1
 800face:	ebb2 080a 	subs.w	r8, r2, sl
 800fad2:	eb63 090b 	sbc.w	r9, r3, fp
 800fad6:	f04f 0200 	mov.w	r2, #0
 800fada:	f04f 0300 	mov.w	r3, #0
 800fade:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800fae2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800fae6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800faea:	ebb2 0408 	subs.w	r4, r2, r8
 800faee:	eb63 0509 	sbc.w	r5, r3, r9
 800faf2:	f04f 0200 	mov.w	r2, #0
 800faf6:	f04f 0300 	mov.w	r3, #0
 800fafa:	00eb      	lsls	r3, r5, #3
 800fafc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800fb00:	00e2      	lsls	r2, r4, #3
 800fb02:	4614      	mov	r4, r2
 800fb04:	461d      	mov	r5, r3
 800fb06:	eb14 030a 	adds.w	r3, r4, sl
 800fb0a:	603b      	str	r3, [r7, #0]
 800fb0c:	eb45 030b 	adc.w	r3, r5, fp
 800fb10:	607b      	str	r3, [r7, #4]
 800fb12:	f04f 0200 	mov.w	r2, #0
 800fb16:	f04f 0300 	mov.w	r3, #0
 800fb1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fb1e:	4629      	mov	r1, r5
 800fb20:	028b      	lsls	r3, r1, #10
 800fb22:	4621      	mov	r1, r4
 800fb24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800fb28:	4621      	mov	r1, r4
 800fb2a:	028a      	lsls	r2, r1, #10
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	4619      	mov	r1, r3
 800fb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb32:	2200      	movs	r2, #0
 800fb34:	60bb      	str	r3, [r7, #8]
 800fb36:	60fa      	str	r2, [r7, #12]
 800fb38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb3c:	f7f1 f810 	bl	8000b60 <__aeabi_uldivmod>
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	4613      	mov	r3, r2
 800fb46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800fb48:	4b0b      	ldr	r3, [pc, #44]	; (800fb78 <HAL_RCC_GetSysClockFreq+0x180>)
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	0c1b      	lsrs	r3, r3, #16
 800fb4e:	f003 0303 	and.w	r3, r3, #3
 800fb52:	3301      	adds	r3, #1
 800fb54:	005b      	lsls	r3, r3, #1
 800fb56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800fb58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fb62:	e002      	b.n	800fb6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800fb64:	4b05      	ldr	r3, [pc, #20]	; (800fb7c <HAL_RCC_GetSysClockFreq+0x184>)
 800fb66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fb68:	bf00      	nop
    }
  }
  return sysclockfreq;
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3740      	adds	r7, #64	; 0x40
 800fb70:	46bd      	mov	sp, r7
 800fb72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb76:	bf00      	nop
 800fb78:	40023800 	.word	0x40023800
 800fb7c:	00f42400 	.word	0x00f42400
 800fb80:	017d7840 	.word	0x017d7840

0800fb84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fb84:	b480      	push	{r7}
 800fb86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fb88:	4b03      	ldr	r3, [pc, #12]	; (800fb98 <HAL_RCC_GetHCLKFreq+0x14>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	2000010c 	.word	0x2000010c

0800fb9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800fba0:	f7ff fff0 	bl	800fb84 <HAL_RCC_GetHCLKFreq>
 800fba4:	4602      	mov	r2, r0
 800fba6:	4b05      	ldr	r3, [pc, #20]	; (800fbbc <HAL_RCC_GetPCLK1Freq+0x20>)
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	0a9b      	lsrs	r3, r3, #10
 800fbac:	f003 0307 	and.w	r3, r3, #7
 800fbb0:	4903      	ldr	r1, [pc, #12]	; (800fbc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fbb2:	5ccb      	ldrb	r3, [r1, r3]
 800fbb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	40023800 	.word	0x40023800
 800fbc0:	0801719c 	.word	0x0801719c

0800fbc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800fbc8:	f7ff ffdc 	bl	800fb84 <HAL_RCC_GetHCLKFreq>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	0b5b      	lsrs	r3, r3, #13
 800fbd4:	f003 0307 	and.w	r3, r3, #7
 800fbd8:	4903      	ldr	r1, [pc, #12]	; (800fbe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fbda:	5ccb      	ldrb	r3, [r1, r3]
 800fbdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	40023800 	.word	0x40023800
 800fbe8:	0801719c 	.word	0x0801719c

0800fbec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	220f      	movs	r2, #15
 800fbfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800fbfc:	4b12      	ldr	r3, [pc, #72]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fbfe:	689b      	ldr	r3, [r3, #8]
 800fc00:	f003 0203 	and.w	r2, r3, #3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800fc08:	4b0f      	ldr	r3, [pc, #60]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800fc14:	4b0c      	ldr	r3, [pc, #48]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <HAL_RCC_GetClockConfig+0x5c>)
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	08db      	lsrs	r3, r3, #3
 800fc26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800fc2e:	4b07      	ldr	r3, [pc, #28]	; (800fc4c <HAL_RCC_GetClockConfig+0x60>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f003 0207 	and.w	r2, r3, #7
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	601a      	str	r2, [r3, #0]
}
 800fc3a:	bf00      	nop
 800fc3c:	370c      	adds	r7, #12
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	40023800 	.word	0x40023800
 800fc4c:	40023c00 	.word	0x40023c00

0800fc50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e041      	b.n	800fce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f839 	bl	800fcee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2202      	movs	r2, #2
 800fc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	3304      	adds	r3, #4
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4610      	mov	r0, r2
 800fc90:	f000 fb8c 	bl	80103ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2201      	movs	r2, #1
 800fc98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2201      	movs	r2, #1
 800fcb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fce4:	2300      	movs	r3, #0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b083      	sub	sp, #12
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fcf6:	bf00      	nop
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
	...

0800fd04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d001      	beq.n	800fd1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e044      	b.n	800fda6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2202      	movs	r2, #2
 800fd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	68da      	ldr	r2, [r3, #12]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f042 0201 	orr.w	r2, r2, #1
 800fd32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a1e      	ldr	r2, [pc, #120]	; (800fdb4 <HAL_TIM_Base_Start_IT+0xb0>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d018      	beq.n	800fd70 <HAL_TIM_Base_Start_IT+0x6c>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd46:	d013      	beq.n	800fd70 <HAL_TIM_Base_Start_IT+0x6c>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a1a      	ldr	r2, [pc, #104]	; (800fdb8 <HAL_TIM_Base_Start_IT+0xb4>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d00e      	beq.n	800fd70 <HAL_TIM_Base_Start_IT+0x6c>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a19      	ldr	r2, [pc, #100]	; (800fdbc <HAL_TIM_Base_Start_IT+0xb8>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d009      	beq.n	800fd70 <HAL_TIM_Base_Start_IT+0x6c>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a17      	ldr	r2, [pc, #92]	; (800fdc0 <HAL_TIM_Base_Start_IT+0xbc>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d004      	beq.n	800fd70 <HAL_TIM_Base_Start_IT+0x6c>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4a16      	ldr	r2, [pc, #88]	; (800fdc4 <HAL_TIM_Base_Start_IT+0xc0>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d111      	bne.n	800fd94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	689b      	ldr	r3, [r3, #8]
 800fd76:	f003 0307 	and.w	r3, r3, #7
 800fd7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2b06      	cmp	r3, #6
 800fd80:	d010      	beq.n	800fda4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f042 0201 	orr.w	r2, r2, #1
 800fd90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd92:	e007      	b.n	800fda4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f042 0201 	orr.w	r2, r2, #1
 800fda2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3714      	adds	r7, #20
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	40010000 	.word	0x40010000
 800fdb8:	40000400 	.word	0x40000400
 800fdbc:	40000800 	.word	0x40000800
 800fdc0:	40000c00 	.word	0x40000c00
 800fdc4:	40014000 	.word	0x40014000

0800fdc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d101      	bne.n	800fdda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e041      	b.n	800fe5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d106      	bne.n	800fdf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7f8 fdc4 	bl	800897c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2202      	movs	r2, #2
 800fdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	3304      	adds	r3, #4
 800fe04:	4619      	mov	r1, r3
 800fe06:	4610      	mov	r0, r2
 800fe08:	f000 fad0 	bl	80103ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d109      	bne.n	800fe8c <HAL_TIM_PWM_Start+0x24>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	bf14      	ite	ne
 800fe84:	2301      	movne	r3, #1
 800fe86:	2300      	moveq	r3, #0
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	e022      	b.n	800fed2 <HAL_TIM_PWM_Start+0x6a>
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	2b04      	cmp	r3, #4
 800fe90:	d109      	bne.n	800fea6 <HAL_TIM_PWM_Start+0x3e>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	bf14      	ite	ne
 800fe9e:	2301      	movne	r3, #1
 800fea0:	2300      	moveq	r3, #0
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	e015      	b.n	800fed2 <HAL_TIM_PWM_Start+0x6a>
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	2b08      	cmp	r3, #8
 800feaa:	d109      	bne.n	800fec0 <HAL_TIM_PWM_Start+0x58>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	bf14      	ite	ne
 800feb8:	2301      	movne	r3, #1
 800feba:	2300      	moveq	r3, #0
 800febc:	b2db      	uxtb	r3, r3
 800febe:	e008      	b.n	800fed2 <HAL_TIM_PWM_Start+0x6a>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2b01      	cmp	r3, #1
 800feca:	bf14      	ite	ne
 800fecc:	2301      	movne	r3, #1
 800fece:	2300      	moveq	r3, #0
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800fed6:	2301      	movs	r3, #1
 800fed8:	e068      	b.n	800ffac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d104      	bne.n	800feea <HAL_TIM_PWM_Start+0x82>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2202      	movs	r2, #2
 800fee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fee8:	e013      	b.n	800ff12 <HAL_TIM_PWM_Start+0xaa>
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	2b04      	cmp	r3, #4
 800feee:	d104      	bne.n	800fefa <HAL_TIM_PWM_Start+0x92>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2202      	movs	r2, #2
 800fef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fef8:	e00b      	b.n	800ff12 <HAL_TIM_PWM_Start+0xaa>
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	2b08      	cmp	r3, #8
 800fefe:	d104      	bne.n	800ff0a <HAL_TIM_PWM_Start+0xa2>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2202      	movs	r2, #2
 800ff04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff08:	e003      	b.n	800ff12 <HAL_TIM_PWM_Start+0xaa>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2202      	movs	r2, #2
 800ff0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2201      	movs	r2, #1
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 fc52 	bl	80107c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a23      	ldr	r2, [pc, #140]	; (800ffb4 <HAL_TIM_PWM_Start+0x14c>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d107      	bne.n	800ff3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4a1d      	ldr	r2, [pc, #116]	; (800ffb4 <HAL_TIM_PWM_Start+0x14c>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d018      	beq.n	800ff76 <HAL_TIM_PWM_Start+0x10e>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff4c:	d013      	beq.n	800ff76 <HAL_TIM_PWM_Start+0x10e>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a19      	ldr	r2, [pc, #100]	; (800ffb8 <HAL_TIM_PWM_Start+0x150>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d00e      	beq.n	800ff76 <HAL_TIM_PWM_Start+0x10e>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a17      	ldr	r2, [pc, #92]	; (800ffbc <HAL_TIM_PWM_Start+0x154>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d009      	beq.n	800ff76 <HAL_TIM_PWM_Start+0x10e>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a16      	ldr	r2, [pc, #88]	; (800ffc0 <HAL_TIM_PWM_Start+0x158>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d004      	beq.n	800ff76 <HAL_TIM_PWM_Start+0x10e>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a14      	ldr	r2, [pc, #80]	; (800ffc4 <HAL_TIM_PWM_Start+0x15c>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d111      	bne.n	800ff9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	f003 0307 	and.w	r3, r3, #7
 800ff80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b06      	cmp	r3, #6
 800ff86:	d010      	beq.n	800ffaa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f042 0201 	orr.w	r2, r2, #1
 800ff96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff98:	e007      	b.n	800ffaa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f042 0201 	orr.w	r2, r2, #1
 800ffa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ffaa:	2300      	movs	r3, #0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3710      	adds	r7, #16
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	40010000 	.word	0x40010000
 800ffb8:	40000400 	.word	0x40000400
 800ffbc:	40000800 	.word	0x40000800
 800ffc0:	40000c00 	.word	0x40000c00
 800ffc4:	40014000 	.word	0x40014000

0800ffc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	f003 0302 	and.w	r3, r3, #2
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d122      	bne.n	8010024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	f003 0302 	and.w	r3, r3, #2
 800ffe8:	2b02      	cmp	r3, #2
 800ffea:	d11b      	bne.n	8010024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f06f 0202 	mvn.w	r2, #2
 800fff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2201      	movs	r2, #1
 800fffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	699b      	ldr	r3, [r3, #24]
 8010002:	f003 0303 	and.w	r3, r3, #3
 8010006:	2b00      	cmp	r3, #0
 8010008:	d003      	beq.n	8010012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f9b0 	bl	8010370 <HAL_TIM_IC_CaptureCallback>
 8010010:	e005      	b.n	801001e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f9a2 	bl	801035c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f9b3 	bl	8010384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	f003 0304 	and.w	r3, r3, #4
 801002e:	2b04      	cmp	r3, #4
 8010030:	d122      	bne.n	8010078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	f003 0304 	and.w	r3, r3, #4
 801003c:	2b04      	cmp	r3, #4
 801003e:	d11b      	bne.n	8010078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f06f 0204 	mvn.w	r2, #4
 8010048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2202      	movs	r2, #2
 801004e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	699b      	ldr	r3, [r3, #24]
 8010056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f986 	bl	8010370 <HAL_TIM_IC_CaptureCallback>
 8010064:	e005      	b.n	8010072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 f978 	bl	801035c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f000 f989 	bl	8010384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	f003 0308 	and.w	r3, r3, #8
 8010082:	2b08      	cmp	r3, #8
 8010084:	d122      	bne.n	80100cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	f003 0308 	and.w	r3, r3, #8
 8010090:	2b08      	cmp	r3, #8
 8010092:	d11b      	bne.n	80100cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f06f 0208 	mvn.w	r2, #8
 801009c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2204      	movs	r2, #4
 80100a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	f003 0303 	and.w	r3, r3, #3
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f95c 	bl	8010370 <HAL_TIM_IC_CaptureCallback>
 80100b8:	e005      	b.n	80100c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 f94e 	bl	801035c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 f95f 	bl	8010384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	f003 0310 	and.w	r3, r3, #16
 80100d6:	2b10      	cmp	r3, #16
 80100d8:	d122      	bne.n	8010120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	f003 0310 	and.w	r3, r3, #16
 80100e4:	2b10      	cmp	r3, #16
 80100e6:	d11b      	bne.n	8010120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f06f 0210 	mvn.w	r2, #16
 80100f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2208      	movs	r2, #8
 80100f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	69db      	ldr	r3, [r3, #28]
 80100fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010102:	2b00      	cmp	r3, #0
 8010104:	d003      	beq.n	801010e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 f932 	bl	8010370 <HAL_TIM_IC_CaptureCallback>
 801010c:	e005      	b.n	801011a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 f924 	bl	801035c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 f935 	bl	8010384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	f003 0301 	and.w	r3, r3, #1
 801012a:	2b01      	cmp	r3, #1
 801012c:	d10e      	bne.n	801014c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	f003 0301 	and.w	r3, r3, #1
 8010138:	2b01      	cmp	r3, #1
 801013a:	d107      	bne.n	801014c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f06f 0201 	mvn.w	r2, #1
 8010144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7f8 fb3e 	bl	80087c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010156:	2b80      	cmp	r3, #128	; 0x80
 8010158:	d10e      	bne.n	8010178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010164:	2b80      	cmp	r3, #128	; 0x80
 8010166:	d107      	bne.n	8010178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 fbc4 	bl	8010900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010182:	2b40      	cmp	r3, #64	; 0x40
 8010184:	d10e      	bne.n	80101a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010190:	2b40      	cmp	r3, #64	; 0x40
 8010192:	d107      	bne.n	80101a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801019c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 f8fa 	bl	8010398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f003 0320 	and.w	r3, r3, #32
 80101ae:	2b20      	cmp	r3, #32
 80101b0:	d10e      	bne.n	80101d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	f003 0320 	and.w	r3, r3, #32
 80101bc:	2b20      	cmp	r3, #32
 80101be:	d107      	bne.n	80101d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f06f 0220 	mvn.w	r2, #32
 80101c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 fb8e 	bl	80108ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d101      	bne.n	80101f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80101f2:	2302      	movs	r3, #2
 80101f4:	e0ae      	b.n	8010354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b0c      	cmp	r3, #12
 8010202:	f200 809f 	bhi.w	8010344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010206:	a201      	add	r2, pc, #4	; (adr r2, 801020c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801020c:	08010241 	.word	0x08010241
 8010210:	08010345 	.word	0x08010345
 8010214:	08010345 	.word	0x08010345
 8010218:	08010345 	.word	0x08010345
 801021c:	08010281 	.word	0x08010281
 8010220:	08010345 	.word	0x08010345
 8010224:	08010345 	.word	0x08010345
 8010228:	08010345 	.word	0x08010345
 801022c:	080102c3 	.word	0x080102c3
 8010230:	08010345 	.word	0x08010345
 8010234:	08010345 	.word	0x08010345
 8010238:	08010345 	.word	0x08010345
 801023c:	08010303 	.word	0x08010303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	68b9      	ldr	r1, [r7, #8]
 8010246:	4618      	mov	r0, r3
 8010248:	f000 f930 	bl	80104ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	699a      	ldr	r2, [r3, #24]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f042 0208 	orr.w	r2, r2, #8
 801025a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	699a      	ldr	r2, [r3, #24]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f022 0204 	bic.w	r2, r2, #4
 801026a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	6999      	ldr	r1, [r3, #24]
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	691a      	ldr	r2, [r3, #16]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	430a      	orrs	r2, r1
 801027c:	619a      	str	r2, [r3, #24]
      break;
 801027e:	e064      	b.n	801034a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	68b9      	ldr	r1, [r7, #8]
 8010286:	4618      	mov	r0, r3
 8010288:	f000 f976 	bl	8010578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	699a      	ldr	r2, [r3, #24]
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801029a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	699a      	ldr	r2, [r3, #24]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80102aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	6999      	ldr	r1, [r3, #24]
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	691b      	ldr	r3, [r3, #16]
 80102b6:	021a      	lsls	r2, r3, #8
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	430a      	orrs	r2, r1
 80102be:	619a      	str	r2, [r3, #24]
      break;
 80102c0:	e043      	b.n	801034a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	68b9      	ldr	r1, [r7, #8]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f000 f9c1 	bl	8010650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	69da      	ldr	r2, [r3, #28]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f042 0208 	orr.w	r2, r2, #8
 80102dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	69da      	ldr	r2, [r3, #28]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f022 0204 	bic.w	r2, r2, #4
 80102ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	69d9      	ldr	r1, [r3, #28]
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	691a      	ldr	r2, [r3, #16]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	430a      	orrs	r2, r1
 80102fe:	61da      	str	r2, [r3, #28]
      break;
 8010300:	e023      	b.n	801034a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	68b9      	ldr	r1, [r7, #8]
 8010308:	4618      	mov	r0, r3
 801030a:	f000 fa0b 	bl	8010724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	69da      	ldr	r2, [r3, #28]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801031c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	69da      	ldr	r2, [r3, #28]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801032c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	69d9      	ldr	r1, [r3, #28]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	021a      	lsls	r2, r3, #8
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	430a      	orrs	r2, r1
 8010340:	61da      	str	r2, [r3, #28]
      break;
 8010342:	e002      	b.n	801034a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	75fb      	strb	r3, [r7, #23]
      break;
 8010348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2200      	movs	r2, #0
 801034e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010352:	7dfb      	ldrb	r3, [r7, #23]
}
 8010354:	4618      	mov	r0, r3
 8010356:	3718      	adds	r7, #24
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010364:	bf00      	nop
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010378:	bf00      	nop
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801038c:	bf00      	nop
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010398:	b480      	push	{r7}
 801039a:	b083      	sub	sp, #12
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80103a0:	bf00      	nop
 80103a2:	370c      	adds	r7, #12
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a34      	ldr	r2, [pc, #208]	; (8010490 <TIM_Base_SetConfig+0xe4>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d00f      	beq.n	80103e4 <TIM_Base_SetConfig+0x38>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103ca:	d00b      	beq.n	80103e4 <TIM_Base_SetConfig+0x38>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a31      	ldr	r2, [pc, #196]	; (8010494 <TIM_Base_SetConfig+0xe8>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d007      	beq.n	80103e4 <TIM_Base_SetConfig+0x38>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a30      	ldr	r2, [pc, #192]	; (8010498 <TIM_Base_SetConfig+0xec>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d003      	beq.n	80103e4 <TIM_Base_SetConfig+0x38>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a2f      	ldr	r2, [pc, #188]	; (801049c <TIM_Base_SetConfig+0xf0>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d108      	bne.n	80103f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4a25      	ldr	r2, [pc, #148]	; (8010490 <TIM_Base_SetConfig+0xe4>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d01b      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010404:	d017      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a22      	ldr	r2, [pc, #136]	; (8010494 <TIM_Base_SetConfig+0xe8>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d013      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a21      	ldr	r2, [pc, #132]	; (8010498 <TIM_Base_SetConfig+0xec>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d00f      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a20      	ldr	r2, [pc, #128]	; (801049c <TIM_Base_SetConfig+0xf0>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d00b      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4a1f      	ldr	r2, [pc, #124]	; (80104a0 <TIM_Base_SetConfig+0xf4>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d007      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4a1e      	ldr	r2, [pc, #120]	; (80104a4 <TIM_Base_SetConfig+0xf8>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d003      	beq.n	8010436 <TIM_Base_SetConfig+0x8a>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4a1d      	ldr	r2, [pc, #116]	; (80104a8 <TIM_Base_SetConfig+0xfc>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d108      	bne.n	8010448 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801043c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	4313      	orrs	r3, r2
 8010446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	695b      	ldr	r3, [r3, #20]
 8010452:	4313      	orrs	r3, r2
 8010454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	689a      	ldr	r2, [r3, #8]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	4a08      	ldr	r2, [pc, #32]	; (8010490 <TIM_Base_SetConfig+0xe4>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d103      	bne.n	801047c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	691a      	ldr	r2, [r3, #16]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2201      	movs	r2, #1
 8010480:	615a      	str	r2, [r3, #20]
}
 8010482:	bf00      	nop
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	40010000 	.word	0x40010000
 8010494:	40000400 	.word	0x40000400
 8010498:	40000800 	.word	0x40000800
 801049c:	40000c00 	.word	0x40000c00
 80104a0:	40014000 	.word	0x40014000
 80104a4:	40014400 	.word	0x40014400
 80104a8:	40014800 	.word	0x40014800

080104ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b087      	sub	sp, #28
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a1b      	ldr	r3, [r3, #32]
 80104ba:	f023 0201 	bic.w	r2, r3, #1
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f023 0303 	bic.w	r3, r3, #3
 80104e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	f023 0302 	bic.w	r3, r3, #2
 80104f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	697a      	ldr	r2, [r7, #20]
 80104fc:	4313      	orrs	r3, r2
 80104fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4a1c      	ldr	r2, [pc, #112]	; (8010574 <TIM_OC1_SetConfig+0xc8>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d10c      	bne.n	8010522 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	f023 0308 	bic.w	r3, r3, #8
 801050e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	697a      	ldr	r2, [r7, #20]
 8010516:	4313      	orrs	r3, r2
 8010518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f023 0304 	bic.w	r3, r3, #4
 8010520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a13      	ldr	r2, [pc, #76]	; (8010574 <TIM_OC1_SetConfig+0xc8>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d111      	bne.n	801054e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	695b      	ldr	r3, [r3, #20]
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	4313      	orrs	r3, r2
 8010542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	4313      	orrs	r3, r2
 801054c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	685a      	ldr	r2, [r3, #4]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	621a      	str	r2, [r3, #32]
}
 8010568:	bf00      	nop
 801056a:	371c      	adds	r7, #28
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr
 8010574:	40010000 	.word	0x40010000

08010578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010578:	b480      	push	{r7}
 801057a:	b087      	sub	sp, #28
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	f023 0210 	bic.w	r2, r3, #16
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a1b      	ldr	r3, [r3, #32]
 8010592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	699b      	ldr	r3, [r3, #24]
 801059e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	021b      	lsls	r3, r3, #8
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	4313      	orrs	r3, r2
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	f023 0320 	bic.w	r3, r3, #32
 80105c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	689b      	ldr	r3, [r3, #8]
 80105c8:	011b      	lsls	r3, r3, #4
 80105ca:	697a      	ldr	r2, [r7, #20]
 80105cc:	4313      	orrs	r3, r2
 80105ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a1e      	ldr	r2, [pc, #120]	; (801064c <TIM_OC2_SetConfig+0xd4>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d10d      	bne.n	80105f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	011b      	lsls	r3, r3, #4
 80105e6:	697a      	ldr	r2, [r7, #20]
 80105e8:	4313      	orrs	r3, r2
 80105ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a15      	ldr	r2, [pc, #84]	; (801064c <TIM_OC2_SetConfig+0xd4>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d113      	bne.n	8010624 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801060a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	695b      	ldr	r3, [r3, #20]
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	693a      	ldr	r2, [r7, #16]
 8010614:	4313      	orrs	r3, r2
 8010616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	699b      	ldr	r3, [r3, #24]
 801061c:	009b      	lsls	r3, r3, #2
 801061e:	693a      	ldr	r2, [r7, #16]
 8010620:	4313      	orrs	r3, r2
 8010622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	693a      	ldr	r2, [r7, #16]
 8010628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	697a      	ldr	r2, [r7, #20]
 801063c:	621a      	str	r2, [r3, #32]
}
 801063e:	bf00      	nop
 8010640:	371c      	adds	r7, #28
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	40010000 	.word	0x40010000

08010650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010650:	b480      	push	{r7}
 8010652:	b087      	sub	sp, #28
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a1b      	ldr	r3, [r3, #32]
 801065e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6a1b      	ldr	r3, [r3, #32]
 801066a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	69db      	ldr	r3, [r3, #28]
 8010676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801067e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f023 0303 	bic.w	r3, r3, #3
 8010686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	4313      	orrs	r3, r2
 8010690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	021b      	lsls	r3, r3, #8
 80106a0:	697a      	ldr	r2, [r7, #20]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a1d      	ldr	r2, [pc, #116]	; (8010720 <TIM_OC3_SetConfig+0xd0>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d10d      	bne.n	80106ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	4313      	orrs	r3, r2
 80106c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a14      	ldr	r2, [pc, #80]	; (8010720 <TIM_OC3_SetConfig+0xd0>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d113      	bne.n	80106fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	695b      	ldr	r3, [r3, #20]
 80106e6:	011b      	lsls	r3, r3, #4
 80106e8:	693a      	ldr	r2, [r7, #16]
 80106ea:	4313      	orrs	r3, r2
 80106ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	699b      	ldr	r3, [r3, #24]
 80106f2:	011b      	lsls	r3, r3, #4
 80106f4:	693a      	ldr	r2, [r7, #16]
 80106f6:	4313      	orrs	r3, r2
 80106f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	685a      	ldr	r2, [r3, #4]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	621a      	str	r2, [r3, #32]
}
 8010714:	bf00      	nop
 8010716:	371c      	adds	r7, #28
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	40010000 	.word	0x40010000

08010724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010724:	b480      	push	{r7}
 8010726:	b087      	sub	sp, #28
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a1b      	ldr	r3, [r3, #32]
 8010732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6a1b      	ldr	r3, [r3, #32]
 801073e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	69db      	ldr	r3, [r3, #28]
 801074a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801075a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	021b      	lsls	r3, r3, #8
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	4313      	orrs	r3, r2
 8010766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801076e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	031b      	lsls	r3, r3, #12
 8010776:	693a      	ldr	r2, [r7, #16]
 8010778:	4313      	orrs	r3, r2
 801077a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	4a10      	ldr	r2, [pc, #64]	; (80107c0 <TIM_OC4_SetConfig+0x9c>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d109      	bne.n	8010798 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801078a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	019b      	lsls	r3, r3, #6
 8010792:	697a      	ldr	r2, [r7, #20]
 8010794:	4313      	orrs	r3, r2
 8010796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	697a      	ldr	r2, [r7, #20]
 801079c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	685a      	ldr	r2, [r3, #4]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	693a      	ldr	r2, [r7, #16]
 80107b0:	621a      	str	r2, [r3, #32]
}
 80107b2:	bf00      	nop
 80107b4:	371c      	adds	r7, #28
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	40010000 	.word	0x40010000

080107c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b087      	sub	sp, #28
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	f003 031f 	and.w	r3, r3, #31
 80107d6:	2201      	movs	r2, #1
 80107d8:	fa02 f303 	lsl.w	r3, r2, r3
 80107dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6a1a      	ldr	r2, [r3, #32]
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	43db      	mvns	r3, r3
 80107e6:	401a      	ands	r2, r3
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6a1a      	ldr	r2, [r3, #32]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	f003 031f 	and.w	r3, r3, #31
 80107f6:	6879      	ldr	r1, [r7, #4]
 80107f8:	fa01 f303 	lsl.w	r3, r1, r3
 80107fc:	431a      	orrs	r2, r3
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	621a      	str	r2, [r3, #32]
}
 8010802:	bf00      	nop
 8010804:	371c      	adds	r7, #28
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr
	...

08010810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010820:	2b01      	cmp	r3, #1
 8010822:	d101      	bne.n	8010828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010824:	2302      	movs	r3, #2
 8010826:	e050      	b.n	80108ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2202      	movs	r2, #2
 8010834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	689b      	ldr	r3, [r3, #8]
 8010846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801084e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	4313      	orrs	r3, r2
 8010858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a1c      	ldr	r2, [pc, #112]	; (80108d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d018      	beq.n	801089e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010874:	d013      	beq.n	801089e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4a18      	ldr	r2, [pc, #96]	; (80108dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801087c:	4293      	cmp	r3, r2
 801087e:	d00e      	beq.n	801089e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a16      	ldr	r2, [pc, #88]	; (80108e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d009      	beq.n	801089e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a15      	ldr	r2, [pc, #84]	; (80108e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d004      	beq.n	801089e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a13      	ldr	r2, [pc, #76]	; (80108e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d10c      	bne.n	80108b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	4313      	orrs	r3, r2
 80108ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2201      	movs	r2, #1
 80108bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	40010000 	.word	0x40010000
 80108dc:	40000400 	.word	0x40000400
 80108e0:	40000800 	.word	0x40000800
 80108e4:	40000c00 	.word	0x40000c00
 80108e8:	40014000 	.word	0x40014000

080108ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80108f4:	bf00      	nop
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010908:	bf00      	nop
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010922:	2301      	movs	r3, #1
 8010924:	e03f      	b.n	80109a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801092c:	b2db      	uxtb	r3, r3
 801092e:	2b00      	cmp	r3, #0
 8010930:	d106      	bne.n	8010940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2200      	movs	r2, #0
 8010936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7f8 f87a 	bl	8008a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2224      	movs	r2, #36	; 0x24
 8010944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68da      	ldr	r2, [r3, #12]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 ff8b 	bl	8011874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	691a      	ldr	r2, [r3, #16]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801096c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	695a      	ldr	r2, [r3, #20]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801097c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	68da      	ldr	r2, [r3, #12]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801098c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2220      	movs	r2, #32
 8010998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2220      	movs	r2, #32
 80109a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80109a4:	2300      	movs	r3, #0
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}

080109ae <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b082      	sub	sp, #8
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d101      	bne.n	80109c0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80109bc:	2301      	movs	r3, #1
 80109be:	e021      	b.n	8010a04 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2224      	movs	r2, #36	; 0x24
 80109c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68da      	ldr	r2, [r3, #12]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80109d6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7f8 f8af 	bl	8008b3c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b08a      	sub	sp, #40	; 0x28
 8010a10:	af02      	add	r7, sp, #8
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	2b20      	cmp	r3, #32
 8010a2a:	d17c      	bne.n	8010b26 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d002      	beq.n	8010a38 <HAL_UART_Transmit+0x2c>
 8010a32:	88fb      	ldrh	r3, [r7, #6]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d101      	bne.n	8010a3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e075      	b.n	8010b28 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d101      	bne.n	8010a4a <HAL_UART_Transmit+0x3e>
 8010a46:	2302      	movs	r3, #2
 8010a48:	e06e      	b.n	8010b28 <HAL_UART_Transmit+0x11c>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2200      	movs	r2, #0
 8010a56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2221      	movs	r2, #33	; 0x21
 8010a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010a60:	f7fa ff46 	bl	800b8f0 <HAL_GetTick>
 8010a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	88fa      	ldrh	r2, [r7, #6]
 8010a6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	88fa      	ldrh	r2, [r7, #6]
 8010a70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a7a:	d108      	bne.n	8010a8e <HAL_UART_Transmit+0x82>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d104      	bne.n	8010a8e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010a84:	2300      	movs	r3, #0
 8010a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	61bb      	str	r3, [r7, #24]
 8010a8c:	e003      	b.n	8010a96 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010a92:	2300      	movs	r3, #0
 8010a94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010a9e:	e02a      	b.n	8010af6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	2180      	movs	r1, #128	; 0x80
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f000 fc3c 	bl	8011328 <UART_WaitOnFlagUntilTimeout>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010ab6:	2303      	movs	r3, #3
 8010ab8:	e036      	b.n	8010b28 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d10b      	bne.n	8010ad8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	881b      	ldrh	r3, [r3, #0]
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010ace:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	61bb      	str	r3, [r7, #24]
 8010ad6:	e007      	b.n	8010ae8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	781a      	ldrb	r2, [r3, #0]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d1cf      	bne.n	8010aa0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	9300      	str	r3, [sp, #0]
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	2200      	movs	r2, #0
 8010b08:	2140      	movs	r1, #64	; 0x40
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f000 fc0c 	bl	8011328 <UART_WaitOnFlagUntilTimeout>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d001      	beq.n	8010b1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010b16:	2303      	movs	r3, #3
 8010b18:	e006      	b.n	8010b28 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2220      	movs	r2, #32
 8010b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010b22:	2300      	movs	r3, #0
 8010b24:	e000      	b.n	8010b28 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010b26:	2302      	movs	r3, #2
  }
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3720      	adds	r7, #32
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	2b20      	cmp	r3, #32
 8010b48:	d11d      	bne.n	8010b86 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <HAL_UART_Receive_IT+0x26>
 8010b50:	88fb      	ldrh	r3, [r7, #6]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	e016      	b.n	8010b88 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d101      	bne.n	8010b68 <HAL_UART_Receive_IT+0x38>
 8010b64:	2302      	movs	r3, #2
 8010b66:	e00f      	b.n	8010b88 <HAL_UART_Receive_IT+0x58>
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010b76:	88fb      	ldrh	r3, [r7, #6]
 8010b78:	461a      	mov	r2, r3
 8010b7a:	68b9      	ldr	r1, [r7, #8]
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f000 fc41 	bl	8011404 <UART_Start_Receive_IT>
 8010b82:	4603      	mov	r3, r0
 8010b84:	e000      	b.n	8010b88 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010b86:	2302      	movs	r3, #2
  }
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b0a2      	sub	sp, #136	; 0x88
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	330c      	adds	r3, #12
 8010ba4:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ba8:	e853 3f00 	ldrex	r3, [r3]
 8010bac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bb0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8010bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	330c      	adds	r3, #12
 8010bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010bc4:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010bc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010bca:	e841 2300 	strex	r3, r2, [r1]
 8010bce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1e3      	bne.n	8010b9e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	3314      	adds	r3, #20
 8010bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be0:	e853 3f00 	ldrex	r3, [r3]
 8010be4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010be8:	f023 0301 	bic.w	r3, r3, #1
 8010bec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	3314      	adds	r3, #20
 8010bf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010bf6:	65ba      	str	r2, [r7, #88]	; 0x58
 8010bf8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010bfe:	e841 2300 	strex	r3, r2, [r1]
 8010c02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1e5      	bne.n	8010bd6 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d119      	bne.n	8010c46 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	330c      	adds	r3, #12
 8010c18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1c:	e853 3f00 	ldrex	r3, [r3]
 8010c20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c24:	f023 0310 	bic.w	r3, r3, #16
 8010c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	330c      	adds	r3, #12
 8010c30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010c32:	647a      	str	r2, [r7, #68]	; 0x44
 8010c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c3a:	e841 2300 	strex	r3, r2, [r1]
 8010c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1e5      	bne.n	8010c12 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00f      	beq.n	8010c6e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	695b      	ldr	r3, [r3, #20]
 8010c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c58:	2b80      	cmp	r3, #128	; 0x80
 8010c5a:	d104      	bne.n	8010c66 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c60:	4a53      	ldr	r2, [pc, #332]	; (8010db0 <HAL_UART_Abort_IT+0x220>)
 8010c62:	651a      	str	r2, [r3, #80]	; 0x50
 8010c64:	e003      	b.n	8010c6e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00f      	beq.n	8010c96 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	695b      	ldr	r3, [r3, #20]
 8010c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c80:	2b40      	cmp	r3, #64	; 0x40
 8010c82:	d104      	bne.n	8010c8e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c88:	4a4a      	ldr	r2, [pc, #296]	; (8010db4 <HAL_UART_Abort_IT+0x224>)
 8010c8a:	651a      	str	r2, [r3, #80]	; 0x50
 8010c8c:	e003      	b.n	8010c96 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c92:	2200      	movs	r2, #0
 8010c94:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	695b      	ldr	r3, [r3, #20]
 8010c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ca0:	2b80      	cmp	r3, #128	; 0x80
 8010ca2:	d12d      	bne.n	8010d00 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3314      	adds	r3, #20
 8010caa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	e853 3f00 	ldrex	r3, [r3]
 8010cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8010cb4:	6a3b      	ldr	r3, [r7, #32]
 8010cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cba:	677b      	str	r3, [r7, #116]	; 0x74
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	3314      	adds	r3, #20
 8010cc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010cc4:	633a      	str	r2, [r7, #48]	; 0x30
 8010cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ccc:	e841 2300 	strex	r3, r2, [r1]
 8010cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d1e5      	bne.n	8010ca4 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d00f      	beq.n	8010d00 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fb fc23 	bl	800c530 <HAL_DMA_Abort_IT>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d004      	beq.n	8010cfa <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8010cf8:	e002      	b.n	8010d00 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d0a:	2b40      	cmp	r3, #64	; 0x40
 8010d0c:	d130      	bne.n	8010d70 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	3314      	adds	r3, #20
 8010d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	e853 3f00 	ldrex	r3, [r3]
 8010d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d24:	673b      	str	r3, [r7, #112]	; 0x70
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	3314      	adds	r3, #20
 8010d2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010d2e:	61fa      	str	r2, [r7, #28]
 8010d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d32:	69b9      	ldr	r1, [r7, #24]
 8010d34:	69fa      	ldr	r2, [r7, #28]
 8010d36:	e841 2300 	strex	r3, r2, [r1]
 8010d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1e5      	bne.n	8010d0e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d012      	beq.n	8010d70 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fb fbee 	bl	800c530 <HAL_DMA_Abort_IT>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d007      	beq.n	8010d6a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5e:	2200      	movs	r2, #0
 8010d60:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8010d62:	2301      	movs	r3, #1
 8010d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010d68:	e002      	b.n	8010d70 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8010d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d116      	bne.n	8010da6 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2220      	movs	r2, #32
 8010d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2220      	movs	r2, #32
 8010d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 faab 	bl	80112fc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3788      	adds	r7, #136	; 0x88
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	0801156f 	.word	0x0801156f
 8010db4:	080115cf 	.word	0x080115cf

08010db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b0ba      	sub	sp, #232	; 0xe8
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	695b      	ldr	r3, [r3, #20]
 8010dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010de4:	2300      	movs	r3, #0
 8010de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dee:	f003 030f 	and.w	r3, r3, #15
 8010df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d10f      	bne.n	8010e1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e02:	f003 0320 	and.w	r3, r3, #32
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d009      	beq.n	8010e1e <HAL_UART_IRQHandler+0x66>
 8010e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e0e:	f003 0320 	and.w	r3, r3, #32
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d003      	beq.n	8010e1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f000 fc71 	bl	80116fe <UART_Receive_IT>
      return;
 8010e1c:	e256      	b.n	80112cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f000 80de 	beq.w	8010fe4 <HAL_UART_IRQHandler+0x22c>
 8010e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e2c:	f003 0301 	and.w	r3, r3, #1
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d106      	bne.n	8010e42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f000 80d1 	beq.w	8010fe4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e46:	f003 0301 	and.w	r3, r3, #1
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00b      	beq.n	8010e66 <HAL_UART_IRQHandler+0xae>
 8010e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d005      	beq.n	8010e66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5e:	f043 0201 	orr.w	r2, r3, #1
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e6a:	f003 0304 	and.w	r3, r3, #4
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d00b      	beq.n	8010e8a <HAL_UART_IRQHandler+0xd2>
 8010e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d005      	beq.n	8010e8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e82:	f043 0202 	orr.w	r2, r3, #2
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e8e:	f003 0302 	and.w	r3, r3, #2
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00b      	beq.n	8010eae <HAL_UART_IRQHandler+0xf6>
 8010e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e9a:	f003 0301 	and.w	r3, r3, #1
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d005      	beq.n	8010eae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea6:	f043 0204 	orr.w	r2, r3, #4
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eb2:	f003 0308 	and.w	r3, r3, #8
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d011      	beq.n	8010ede <HAL_UART_IRQHandler+0x126>
 8010eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ebe:	f003 0320 	and.w	r3, r3, #32
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d105      	bne.n	8010ed2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eca:	f003 0301 	and.w	r3, r3, #1
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d005      	beq.n	8010ede <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed6:	f043 0208 	orr.w	r2, r3, #8
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f000 81ed 	beq.w	80112c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eec:	f003 0320 	and.w	r3, r3, #32
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d008      	beq.n	8010f06 <HAL_UART_IRQHandler+0x14e>
 8010ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ef8:	f003 0320 	and.w	r3, r3, #32
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f000 fbfc 	bl	80116fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	695b      	ldr	r3, [r3, #20]
 8010f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f10:	2b40      	cmp	r3, #64	; 0x40
 8010f12:	bf0c      	ite	eq
 8010f14:	2301      	moveq	r3, #1
 8010f16:	2300      	movne	r3, #0
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f22:	f003 0308 	and.w	r3, r3, #8
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d103      	bne.n	8010f32 <HAL_UART_IRQHandler+0x17a>
 8010f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d04f      	beq.n	8010fd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 faa4 	bl	8011480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	695b      	ldr	r3, [r3, #20]
 8010f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f42:	2b40      	cmp	r3, #64	; 0x40
 8010f44:	d141      	bne.n	8010fca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	3314      	adds	r3, #20
 8010f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f54:	e853 3f00 	ldrex	r3, [r3]
 8010f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	3314      	adds	r3, #20
 8010f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010f72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010f82:	e841 2300 	strex	r3, r2, [r1]
 8010f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1d9      	bne.n	8010f46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d013      	beq.n	8010fc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f9e:	4a7d      	ldr	r2, [pc, #500]	; (8011194 <HAL_UART_IRQHandler+0x3dc>)
 8010fa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fb fac2 	bl	800c530 <HAL_DMA_Abort_IT>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d016      	beq.n	8010fe0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fc0:	e00e      	b.n	8010fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 f990 	bl	80112e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fc8:	e00a      	b.n	8010fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 f98c 	bl	80112e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fd0:	e006      	b.n	8010fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f988 	bl	80112e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010fde:	e170      	b.n	80112c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fe0:	bf00      	nop
    return;
 8010fe2:	e16e      	b.n	80112c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	f040 814a 	bne.w	8011282 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ff2:	f003 0310 	and.w	r3, r3, #16
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f000 8143 	beq.w	8011282 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011000:	f003 0310 	and.w	r3, r3, #16
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 813c 	beq.w	8011282 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801100a:	2300      	movs	r3, #0
 801100c:	60bb      	str	r3, [r7, #8]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	60bb      	str	r3, [r7, #8]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	60bb      	str	r3, [r7, #8]
 801101e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	695b      	ldr	r3, [r3, #20]
 8011026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801102a:	2b40      	cmp	r3, #64	; 0x40
 801102c:	f040 80b4 	bne.w	8011198 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801103c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011040:	2b00      	cmp	r3, #0
 8011042:	f000 8140 	beq.w	80112c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801104a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801104e:	429a      	cmp	r2, r3
 8011050:	f080 8139 	bcs.w	80112c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801105a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011060:	69db      	ldr	r3, [r3, #28]
 8011062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011066:	f000 8088 	beq.w	801117a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	330c      	adds	r3, #12
 8011070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011078:	e853 3f00 	ldrex	r3, [r3]
 801107c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	330c      	adds	r3, #12
 8011092:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801109a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80110a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80110ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1d9      	bne.n	801106a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	3314      	adds	r3, #20
 80110bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80110c0:	e853 3f00 	ldrex	r3, [r3]
 80110c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80110c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110c8:	f023 0301 	bic.w	r3, r3, #1
 80110cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	3314      	adds	r3, #20
 80110d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80110da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80110de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80110e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80110e6:	e841 2300 	strex	r3, r2, [r1]
 80110ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80110ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d1e1      	bne.n	80110b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	3314      	adds	r3, #20
 80110f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110fc:	e853 3f00 	ldrex	r3, [r3]
 8011100:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	3314      	adds	r3, #20
 8011112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011116:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011118:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801111a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801111c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801111e:	e841 2300 	strex	r3, r2, [r1]
 8011122:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1e3      	bne.n	80110f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2220      	movs	r2, #32
 801112e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	330c      	adds	r3, #12
 801113e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011142:	e853 3f00 	ldrex	r3, [r3]
 8011146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801114a:	f023 0310 	bic.w	r3, r3, #16
 801114e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	330c      	adds	r3, #12
 8011158:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801115c:	65ba      	str	r2, [r7, #88]	; 0x58
 801115e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011164:	e841 2300 	strex	r3, r2, [r1]
 8011168:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801116a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1e3      	bne.n	8011138 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011174:	4618      	mov	r0, r3
 8011176:	f7fb f96b 	bl	800c450 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011182:	b29b      	uxth	r3, r3
 8011184:	1ad3      	subs	r3, r2, r3
 8011186:	b29b      	uxth	r3, r3
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 f8c0 	bl	8011310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011190:	e099      	b.n	80112c6 <HAL_UART_IRQHandler+0x50e>
 8011192:	bf00      	nop
 8011194:	08011547 	.word	0x08011547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f000 808b 	beq.w	80112ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80111b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 8086 	beq.w	80112ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	330c      	adds	r3, #12
 80111c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	e853 3f00 	ldrex	r3, [r3]
 80111cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80111ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80111d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	330c      	adds	r3, #12
 80111de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80111e2:	647a      	str	r2, [r7, #68]	; 0x44
 80111e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80111e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111ea:	e841 2300 	strex	r3, r2, [r1]
 80111ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80111f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1e3      	bne.n	80111be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	3314      	adds	r3, #20
 80111fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011200:	e853 3f00 	ldrex	r3, [r3]
 8011204:	623b      	str	r3, [r7, #32]
   return(result);
 8011206:	6a3b      	ldr	r3, [r7, #32]
 8011208:	f023 0301 	bic.w	r3, r3, #1
 801120c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	3314      	adds	r3, #20
 8011216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801121a:	633a      	str	r2, [r7, #48]	; 0x30
 801121c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801121e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011222:	e841 2300 	strex	r3, r2, [r1]
 8011226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122a:	2b00      	cmp	r3, #0
 801122c:	d1e3      	bne.n	80111f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2220      	movs	r2, #32
 8011232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2200      	movs	r2, #0
 801123a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	330c      	adds	r3, #12
 8011242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	e853 3f00 	ldrex	r3, [r3]
 801124a:	60fb      	str	r3, [r7, #12]
   return(result);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f023 0310 	bic.w	r3, r3, #16
 8011252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	330c      	adds	r3, #12
 801125c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011260:	61fa      	str	r2, [r7, #28]
 8011262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011264:	69b9      	ldr	r1, [r7, #24]
 8011266:	69fa      	ldr	r2, [r7, #28]
 8011268:	e841 2300 	strex	r3, r2, [r1]
 801126c:	617b      	str	r3, [r7, #20]
   return(result);
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1e3      	bne.n	801123c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011278:	4619      	mov	r1, r3
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 f848 	bl	8011310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011280:	e023      	b.n	80112ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801128a:	2b00      	cmp	r3, #0
 801128c:	d009      	beq.n	80112a2 <HAL_UART_IRQHandler+0x4ea>
 801128e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011296:	2b00      	cmp	r3, #0
 8011298:	d003      	beq.n	80112a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f9c7 	bl	801162e <UART_Transmit_IT>
    return;
 80112a0:	e014      	b.n	80112cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80112a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00e      	beq.n	80112cc <HAL_UART_IRQHandler+0x514>
 80112ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d008      	beq.n	80112cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 fa07 	bl	80116ce <UART_EndTransmit_IT>
    return;
 80112c0:	e004      	b.n	80112cc <HAL_UART_IRQHandler+0x514>
    return;
 80112c2:	bf00      	nop
 80112c4:	e002      	b.n	80112cc <HAL_UART_IRQHandler+0x514>
      return;
 80112c6:	bf00      	nop
 80112c8:	e000      	b.n	80112cc <HAL_UART_IRQHandler+0x514>
      return;
 80112ca:	bf00      	nop
  }
}
 80112cc:	37e8      	adds	r7, #232	; 0xe8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop

080112d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b083      	sub	sp, #12
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011304:	bf00      	nop
 8011306:	370c      	adds	r7, #12
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	460b      	mov	r3, r1
 801131a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801131c:	bf00      	nop
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b090      	sub	sp, #64	; 0x40
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	603b      	str	r3, [r7, #0]
 8011334:	4613      	mov	r3, r2
 8011336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011338:	e050      	b.n	80113dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801133a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011340:	d04c      	beq.n	80113dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011344:	2b00      	cmp	r3, #0
 8011346:	d007      	beq.n	8011358 <UART_WaitOnFlagUntilTimeout+0x30>
 8011348:	f7fa fad2 	bl	800b8f0 <HAL_GetTick>
 801134c:	4602      	mov	r2, r0
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011354:	429a      	cmp	r2, r3
 8011356:	d241      	bcs.n	80113dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	330c      	adds	r3, #12
 801135e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011362:	e853 3f00 	ldrex	r3, [r3]
 8011366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801136e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	330c      	adds	r3, #12
 8011376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011378:	637a      	str	r2, [r7, #52]	; 0x34
 801137a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801137c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801137e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011380:	e841 2300 	strex	r3, r2, [r1]
 8011384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1e5      	bne.n	8011358 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	3314      	adds	r3, #20
 8011392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	e853 3f00 	ldrex	r3, [r3]
 801139a:	613b      	str	r3, [r7, #16]
   return(result);
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	f023 0301 	bic.w	r3, r3, #1
 80113a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	3314      	adds	r3, #20
 80113aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113ac:	623a      	str	r2, [r7, #32]
 80113ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b0:	69f9      	ldr	r1, [r7, #28]
 80113b2:	6a3a      	ldr	r2, [r7, #32]
 80113b4:	e841 2300 	strex	r3, r2, [r1]
 80113b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1e5      	bne.n	801138c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2220      	movs	r2, #32
 80113c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2220      	movs	r2, #32
 80113cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80113d8:	2303      	movs	r3, #3
 80113da:	e00f      	b.n	80113fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	4013      	ands	r3, r2
 80113e6:	68ba      	ldr	r2, [r7, #8]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	bf0c      	ite	eq
 80113ec:	2301      	moveq	r3, #1
 80113ee:	2300      	movne	r3, #0
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	461a      	mov	r2, r3
 80113f4:	79fb      	ldrb	r3, [r7, #7]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d09f      	beq.n	801133a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3740      	adds	r7, #64	; 0x40
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	4613      	mov	r3, r2
 8011410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	68ba      	ldr	r2, [r7, #8]
 8011416:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	88fa      	ldrh	r2, [r7, #6]
 801141c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	88fa      	ldrh	r2, [r7, #6]
 8011422:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2200      	movs	r2, #0
 8011428:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2222      	movs	r2, #34	; 0x22
 801142e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2200      	movs	r2, #0
 8011436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	691b      	ldr	r3, [r3, #16]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d007      	beq.n	8011452 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68da      	ldr	r2, [r3, #12]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011450:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	695a      	ldr	r2, [r3, #20]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f042 0201 	orr.w	r2, r2, #1
 8011460:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	68da      	ldr	r2, [r3, #12]
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f042 0220 	orr.w	r2, r2, #32
 8011470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3714      	adds	r7, #20
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011480:	b480      	push	{r7}
 8011482:	b095      	sub	sp, #84	; 0x54
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	330c      	adds	r3, #12
 801148e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011492:	e853 3f00 	ldrex	r3, [r3]
 8011496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801149e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	330c      	adds	r3, #12
 80114a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114a8:	643a      	str	r2, [r7, #64]	; 0x40
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80114b0:	e841 2300 	strex	r3, r2, [r1]
 80114b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d1e5      	bne.n	8011488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3314      	adds	r3, #20
 80114c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114c4:	6a3b      	ldr	r3, [r7, #32]
 80114c6:	e853 3f00 	ldrex	r3, [r3]
 80114ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	f023 0301 	bic.w	r3, r3, #1
 80114d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	3314      	adds	r3, #20
 80114da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80114de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114e4:	e841 2300 	strex	r3, r2, [r1]
 80114e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d1e5      	bne.n	80114bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d119      	bne.n	801152c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	330c      	adds	r3, #12
 80114fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	e853 3f00 	ldrex	r3, [r3]
 8011506:	60bb      	str	r3, [r7, #8]
   return(result);
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	f023 0310 	bic.w	r3, r3, #16
 801150e:	647b      	str	r3, [r7, #68]	; 0x44
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	330c      	adds	r3, #12
 8011516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011518:	61ba      	str	r2, [r7, #24]
 801151a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151c:	6979      	ldr	r1, [r7, #20]
 801151e:	69ba      	ldr	r2, [r7, #24]
 8011520:	e841 2300 	strex	r3, r2, [r1]
 8011524:	613b      	str	r3, [r7, #16]
   return(result);
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1e5      	bne.n	80114f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2220      	movs	r2, #32
 8011530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	631a      	str	r2, [r3, #48]	; 0x30
}
 801153a:	bf00      	nop
 801153c:	3754      	adds	r7, #84	; 0x54
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011546:	b580      	push	{r7, lr}
 8011548:	b084      	sub	sp, #16
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2200      	movs	r2, #0
 8011558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2200      	movs	r2, #0
 801155e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f7ff fec1 	bl	80112e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011566:	bf00      	nop
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b084      	sub	sp, #16
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801157a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011580:	2200      	movs	r2, #0
 8011582:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011588:	2b00      	cmp	r3, #0
 801158a:	d004      	beq.n	8011596 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011592:	2b00      	cmp	r3, #0
 8011594:	d117      	bne.n	80115c6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2200      	movs	r2, #0
 801159a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2200      	movs	r2, #0
 80115a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2200      	movs	r2, #0
 80115a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2220      	movs	r2, #32
 80115ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2220      	movs	r2, #32
 80115b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2200      	movs	r2, #0
 80115bc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f7ff fe9c 	bl	80112fc <HAL_UART_AbortCpltCallback>
 80115c4:	e000      	b.n	80115c8 <UART_DMATxAbortCallback+0x5a>
      return;
 80115c6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b084      	sub	sp, #16
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115da:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115e0:	2200      	movs	r2, #0
 80115e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d004      	beq.n	80115f6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d117      	bne.n	8011626 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2200      	movs	r2, #0
 80115fa:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2200      	movs	r2, #0
 8011600:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2220      	movs	r2, #32
 801160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2220      	movs	r2, #32
 8011614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2200      	movs	r2, #0
 801161c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7ff fe6c 	bl	80112fc <HAL_UART_AbortCpltCallback>
 8011624:	e000      	b.n	8011628 <UART_DMARxAbortCallback+0x5a>
      return;
 8011626:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011628:	3710      	adds	r7, #16
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801162e:	b480      	push	{r7}
 8011630:	b085      	sub	sp, #20
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2b21      	cmp	r3, #33	; 0x21
 8011640:	d13e      	bne.n	80116c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801164a:	d114      	bne.n	8011676 <UART_Transmit_IT+0x48>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	691b      	ldr	r3, [r3, #16]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d110      	bne.n	8011676 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a1b      	ldr	r3, [r3, #32]
 8011658:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	461a      	mov	r2, r3
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011668:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6a1b      	ldr	r3, [r3, #32]
 801166e:	1c9a      	adds	r2, r3, #2
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	621a      	str	r2, [r3, #32]
 8011674:	e008      	b.n	8011688 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6a1b      	ldr	r3, [r3, #32]
 801167a:	1c59      	adds	r1, r3, #1
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	6211      	str	r1, [r2, #32]
 8011680:	781a      	ldrb	r2, [r3, #0]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801168c:	b29b      	uxth	r3, r3
 801168e:	3b01      	subs	r3, #1
 8011690:	b29b      	uxth	r3, r3
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	4619      	mov	r1, r3
 8011696:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011698:	2b00      	cmp	r3, #0
 801169a:	d10f      	bne.n	80116bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68da      	ldr	r2, [r3, #12]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80116aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	68da      	ldr	r2, [r3, #12]
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80116bc:	2300      	movs	r3, #0
 80116be:	e000      	b.n	80116c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80116c0:	2302      	movs	r3, #2
  }
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3714      	adds	r7, #20
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b082      	sub	sp, #8
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68da      	ldr	r2, [r3, #12]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2220      	movs	r2, #32
 80116ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7ff fdf0 	bl	80112d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b08c      	sub	sp, #48	; 0x30
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b22      	cmp	r3, #34	; 0x22
 8011710:	f040 80ab 	bne.w	801186a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	689b      	ldr	r3, [r3, #8]
 8011718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801171c:	d117      	bne.n	801174e <UART_Receive_IT+0x50>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d113      	bne.n	801174e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011726:	2300      	movs	r3, #0
 8011728:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801172e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	b29b      	uxth	r3, r3
 8011738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801173c:	b29a      	uxth	r2, r3
 801173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011746:	1c9a      	adds	r2, r3, #2
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	629a      	str	r2, [r3, #40]	; 0x28
 801174c:	e026      	b.n	801179c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011752:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011754:	2300      	movs	r3, #0
 8011756:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011760:	d007      	beq.n	8011772 <UART_Receive_IT+0x74>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	689b      	ldr	r3, [r3, #8]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d10a      	bne.n	8011780 <UART_Receive_IT+0x82>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d106      	bne.n	8011780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	b2da      	uxtb	r2, r3
 801177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177c:	701a      	strb	r2, [r3, #0]
 801177e:	e008      	b.n	8011792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	b2db      	uxtb	r3, r3
 8011788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801178c:	b2da      	uxtb	r2, r3
 801178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011796:	1c5a      	adds	r2, r3, #1
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	3b01      	subs	r3, #1
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	4619      	mov	r1, r3
 80117aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d15a      	bne.n	8011866 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	68da      	ldr	r2, [r3, #12]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f022 0220 	bic.w	r2, r2, #32
 80117be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	68da      	ldr	r2, [r3, #12]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80117ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	695a      	ldr	r2, [r3, #20]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f022 0201 	bic.w	r2, r2, #1
 80117de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2220      	movs	r2, #32
 80117e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d135      	bne.n	801185c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	330c      	adds	r3, #12
 80117fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	e853 3f00 	ldrex	r3, [r3]
 8011804:	613b      	str	r3, [r7, #16]
   return(result);
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	f023 0310 	bic.w	r3, r3, #16
 801180c:	627b      	str	r3, [r7, #36]	; 0x24
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	330c      	adds	r3, #12
 8011814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011816:	623a      	str	r2, [r7, #32]
 8011818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801181a:	69f9      	ldr	r1, [r7, #28]
 801181c:	6a3a      	ldr	r2, [r7, #32]
 801181e:	e841 2300 	strex	r3, r2, [r1]
 8011822:	61bb      	str	r3, [r7, #24]
   return(result);
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d1e5      	bne.n	80117f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	f003 0310 	and.w	r3, r3, #16
 8011834:	2b10      	cmp	r3, #16
 8011836:	d10a      	bne.n	801184e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011838:	2300      	movs	r3, #0
 801183a:	60fb      	str	r3, [r7, #12]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	60fb      	str	r3, [r7, #12]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011852:	4619      	mov	r1, r3
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff fd5b 	bl	8011310 <HAL_UARTEx_RxEventCallback>
 801185a:	e002      	b.n	8011862 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7f6 ff8f 	bl	8008780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011862:	2300      	movs	r3, #0
 8011864:	e002      	b.n	801186c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011866:	2300      	movs	r3, #0
 8011868:	e000      	b.n	801186c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801186a:	2302      	movs	r3, #2
  }
}
 801186c:	4618      	mov	r0, r3
 801186e:	3730      	adds	r7, #48	; 0x30
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011878:	b0c0      	sub	sp, #256	; 0x100
 801187a:	af00      	add	r7, sp, #0
 801187c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	691b      	ldr	r3, [r3, #16]
 8011888:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801188c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011890:	68d9      	ldr	r1, [r3, #12]
 8011892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	ea40 0301 	orr.w	r3, r0, r1
 801189c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801189e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118a2:	689a      	ldr	r2, [r3, #8]
 80118a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118a8:	691b      	ldr	r3, [r3, #16]
 80118aa:	431a      	orrs	r2, r3
 80118ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118b0:	695b      	ldr	r3, [r3, #20]
 80118b2:	431a      	orrs	r2, r3
 80118b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118b8:	69db      	ldr	r3, [r3, #28]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80118c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80118cc:	f021 010c 	bic.w	r1, r1, #12
 80118d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80118da:	430b      	orrs	r3, r1
 80118dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80118de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	695b      	ldr	r3, [r3, #20]
 80118e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80118ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118ee:	6999      	ldr	r1, [r3, #24]
 80118f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	ea40 0301 	orr.w	r3, r0, r1
 80118fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80118fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	4b8f      	ldr	r3, [pc, #572]	; (8011b40 <UART_SetConfig+0x2cc>)
 8011904:	429a      	cmp	r2, r3
 8011906:	d005      	beq.n	8011914 <UART_SetConfig+0xa0>
 8011908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	4b8d      	ldr	r3, [pc, #564]	; (8011b44 <UART_SetConfig+0x2d0>)
 8011910:	429a      	cmp	r2, r3
 8011912:	d104      	bne.n	801191e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011914:	f7fe f956 	bl	800fbc4 <HAL_RCC_GetPCLK2Freq>
 8011918:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801191c:	e003      	b.n	8011926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801191e:	f7fe f93d 	bl	800fb9c <HAL_RCC_GetPCLK1Freq>
 8011922:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801192a:	69db      	ldr	r3, [r3, #28]
 801192c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011930:	f040 810c 	bne.w	8011b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011938:	2200      	movs	r2, #0
 801193a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801193e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8011946:	4622      	mov	r2, r4
 8011948:	462b      	mov	r3, r5
 801194a:	1891      	adds	r1, r2, r2
 801194c:	65b9      	str	r1, [r7, #88]	; 0x58
 801194e:	415b      	adcs	r3, r3
 8011950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011956:	4621      	mov	r1, r4
 8011958:	eb12 0801 	adds.w	r8, r2, r1
 801195c:	4629      	mov	r1, r5
 801195e:	eb43 0901 	adc.w	r9, r3, r1
 8011962:	f04f 0200 	mov.w	r2, #0
 8011966:	f04f 0300 	mov.w	r3, #0
 801196a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801196e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011976:	4690      	mov	r8, r2
 8011978:	4699      	mov	r9, r3
 801197a:	4623      	mov	r3, r4
 801197c:	eb18 0303 	adds.w	r3, r8, r3
 8011980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011984:	462b      	mov	r3, r5
 8011986:	eb49 0303 	adc.w	r3, r9, r3
 801198a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801198e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011992:	685b      	ldr	r3, [r3, #4]
 8011994:	2200      	movs	r2, #0
 8011996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801199a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801199e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80119a2:	460b      	mov	r3, r1
 80119a4:	18db      	adds	r3, r3, r3
 80119a6:	653b      	str	r3, [r7, #80]	; 0x50
 80119a8:	4613      	mov	r3, r2
 80119aa:	eb42 0303 	adc.w	r3, r2, r3
 80119ae:	657b      	str	r3, [r7, #84]	; 0x54
 80119b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80119b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80119b8:	f7ef f8d2 	bl	8000b60 <__aeabi_uldivmod>
 80119bc:	4602      	mov	r2, r0
 80119be:	460b      	mov	r3, r1
 80119c0:	4b61      	ldr	r3, [pc, #388]	; (8011b48 <UART_SetConfig+0x2d4>)
 80119c2:	fba3 2302 	umull	r2, r3, r3, r2
 80119c6:	095b      	lsrs	r3, r3, #5
 80119c8:	011c      	lsls	r4, r3, #4
 80119ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80119ce:	2200      	movs	r2, #0
 80119d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80119d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80119d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80119dc:	4642      	mov	r2, r8
 80119de:	464b      	mov	r3, r9
 80119e0:	1891      	adds	r1, r2, r2
 80119e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80119e4:	415b      	adcs	r3, r3
 80119e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80119ec:	4641      	mov	r1, r8
 80119ee:	eb12 0a01 	adds.w	sl, r2, r1
 80119f2:	4649      	mov	r1, r9
 80119f4:	eb43 0b01 	adc.w	fp, r3, r1
 80119f8:	f04f 0200 	mov.w	r2, #0
 80119fc:	f04f 0300 	mov.w	r3, #0
 8011a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a0c:	4692      	mov	sl, r2
 8011a0e:	469b      	mov	fp, r3
 8011a10:	4643      	mov	r3, r8
 8011a12:	eb1a 0303 	adds.w	r3, sl, r3
 8011a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011a1a:	464b      	mov	r3, r9
 8011a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8011a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011a30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011a38:	460b      	mov	r3, r1
 8011a3a:	18db      	adds	r3, r3, r3
 8011a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8011a3e:	4613      	mov	r3, r2
 8011a40:	eb42 0303 	adc.w	r3, r2, r3
 8011a44:	647b      	str	r3, [r7, #68]	; 0x44
 8011a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011a4e:	f7ef f887 	bl	8000b60 <__aeabi_uldivmod>
 8011a52:	4602      	mov	r2, r0
 8011a54:	460b      	mov	r3, r1
 8011a56:	4611      	mov	r1, r2
 8011a58:	4b3b      	ldr	r3, [pc, #236]	; (8011b48 <UART_SetConfig+0x2d4>)
 8011a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8011a5e:	095b      	lsrs	r3, r3, #5
 8011a60:	2264      	movs	r2, #100	; 0x64
 8011a62:	fb02 f303 	mul.w	r3, r2, r3
 8011a66:	1acb      	subs	r3, r1, r3
 8011a68:	00db      	lsls	r3, r3, #3
 8011a6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011a6e:	4b36      	ldr	r3, [pc, #216]	; (8011b48 <UART_SetConfig+0x2d4>)
 8011a70:	fba3 2302 	umull	r2, r3, r3, r2
 8011a74:	095b      	lsrs	r3, r3, #5
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011a7c:	441c      	add	r4, r3
 8011a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a82:	2200      	movs	r2, #0
 8011a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011a88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011a90:	4642      	mov	r2, r8
 8011a92:	464b      	mov	r3, r9
 8011a94:	1891      	adds	r1, r2, r2
 8011a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8011a98:	415b      	adcs	r3, r3
 8011a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011aa0:	4641      	mov	r1, r8
 8011aa2:	1851      	adds	r1, r2, r1
 8011aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8011aa6:	4649      	mov	r1, r9
 8011aa8:	414b      	adcs	r3, r1
 8011aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8011aac:	f04f 0200 	mov.w	r2, #0
 8011ab0:	f04f 0300 	mov.w	r3, #0
 8011ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8011ab8:	4659      	mov	r1, fp
 8011aba:	00cb      	lsls	r3, r1, #3
 8011abc:	4651      	mov	r1, sl
 8011abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011ac2:	4651      	mov	r1, sl
 8011ac4:	00ca      	lsls	r2, r1, #3
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	4619      	mov	r1, r3
 8011aca:	4603      	mov	r3, r0
 8011acc:	4642      	mov	r2, r8
 8011ace:	189b      	adds	r3, r3, r2
 8011ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011ad4:	464b      	mov	r3, r9
 8011ad6:	460a      	mov	r2, r1
 8011ad8:	eb42 0303 	adc.w	r3, r2, r3
 8011adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011aec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8011af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8011af4:	460b      	mov	r3, r1
 8011af6:	18db      	adds	r3, r3, r3
 8011af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8011afa:	4613      	mov	r3, r2
 8011afc:	eb42 0303 	adc.w	r3, r2, r3
 8011b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8011b0a:	f7ef f829 	bl	8000b60 <__aeabi_uldivmod>
 8011b0e:	4602      	mov	r2, r0
 8011b10:	460b      	mov	r3, r1
 8011b12:	4b0d      	ldr	r3, [pc, #52]	; (8011b48 <UART_SetConfig+0x2d4>)
 8011b14:	fba3 1302 	umull	r1, r3, r3, r2
 8011b18:	095b      	lsrs	r3, r3, #5
 8011b1a:	2164      	movs	r1, #100	; 0x64
 8011b1c:	fb01 f303 	mul.w	r3, r1, r3
 8011b20:	1ad3      	subs	r3, r2, r3
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	3332      	adds	r3, #50	; 0x32
 8011b26:	4a08      	ldr	r2, [pc, #32]	; (8011b48 <UART_SetConfig+0x2d4>)
 8011b28:	fba2 2303 	umull	r2, r3, r2, r3
 8011b2c:	095b      	lsrs	r3, r3, #5
 8011b2e:	f003 0207 	and.w	r2, r3, #7
 8011b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4422      	add	r2, r4
 8011b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011b3c:	e106      	b.n	8011d4c <UART_SetConfig+0x4d8>
 8011b3e:	bf00      	nop
 8011b40:	40011000 	.word	0x40011000
 8011b44:	40011400 	.word	0x40011400
 8011b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b50:	2200      	movs	r2, #0
 8011b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011b56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011b5e:	4642      	mov	r2, r8
 8011b60:	464b      	mov	r3, r9
 8011b62:	1891      	adds	r1, r2, r2
 8011b64:	6239      	str	r1, [r7, #32]
 8011b66:	415b      	adcs	r3, r3
 8011b68:	627b      	str	r3, [r7, #36]	; 0x24
 8011b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011b6e:	4641      	mov	r1, r8
 8011b70:	1854      	adds	r4, r2, r1
 8011b72:	4649      	mov	r1, r9
 8011b74:	eb43 0501 	adc.w	r5, r3, r1
 8011b78:	f04f 0200 	mov.w	r2, #0
 8011b7c:	f04f 0300 	mov.w	r3, #0
 8011b80:	00eb      	lsls	r3, r5, #3
 8011b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011b86:	00e2      	lsls	r2, r4, #3
 8011b88:	4614      	mov	r4, r2
 8011b8a:	461d      	mov	r5, r3
 8011b8c:	4643      	mov	r3, r8
 8011b8e:	18e3      	adds	r3, r4, r3
 8011b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011b94:	464b      	mov	r3, r9
 8011b96:	eb45 0303 	adc.w	r3, r5, r3
 8011b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011bae:	f04f 0200 	mov.w	r2, #0
 8011bb2:	f04f 0300 	mov.w	r3, #0
 8011bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8011bba:	4629      	mov	r1, r5
 8011bbc:	008b      	lsls	r3, r1, #2
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	008a      	lsls	r2, r1, #2
 8011bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011bcc:	f7ee ffc8 	bl	8000b60 <__aeabi_uldivmod>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	4b60      	ldr	r3, [pc, #384]	; (8011d58 <UART_SetConfig+0x4e4>)
 8011bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8011bda:	095b      	lsrs	r3, r3, #5
 8011bdc:	011c      	lsls	r4, r3, #4
 8011bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011be2:	2200      	movs	r2, #0
 8011be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011be8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8011bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8011bf0:	4642      	mov	r2, r8
 8011bf2:	464b      	mov	r3, r9
 8011bf4:	1891      	adds	r1, r2, r2
 8011bf6:	61b9      	str	r1, [r7, #24]
 8011bf8:	415b      	adcs	r3, r3
 8011bfa:	61fb      	str	r3, [r7, #28]
 8011bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011c00:	4641      	mov	r1, r8
 8011c02:	1851      	adds	r1, r2, r1
 8011c04:	6139      	str	r1, [r7, #16]
 8011c06:	4649      	mov	r1, r9
 8011c08:	414b      	adcs	r3, r1
 8011c0a:	617b      	str	r3, [r7, #20]
 8011c0c:	f04f 0200 	mov.w	r2, #0
 8011c10:	f04f 0300 	mov.w	r3, #0
 8011c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011c18:	4659      	mov	r1, fp
 8011c1a:	00cb      	lsls	r3, r1, #3
 8011c1c:	4651      	mov	r1, sl
 8011c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011c22:	4651      	mov	r1, sl
 8011c24:	00ca      	lsls	r2, r1, #3
 8011c26:	4610      	mov	r0, r2
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	4642      	mov	r2, r8
 8011c2e:	189b      	adds	r3, r3, r2
 8011c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c34:	464b      	mov	r3, r9
 8011c36:	460a      	mov	r2, r1
 8011c38:	eb42 0303 	adc.w	r3, r2, r3
 8011c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	2200      	movs	r2, #0
 8011c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8011c4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011c4c:	f04f 0200 	mov.w	r2, #0
 8011c50:	f04f 0300 	mov.w	r3, #0
 8011c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011c58:	4649      	mov	r1, r9
 8011c5a:	008b      	lsls	r3, r1, #2
 8011c5c:	4641      	mov	r1, r8
 8011c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011c62:	4641      	mov	r1, r8
 8011c64:	008a      	lsls	r2, r1, #2
 8011c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011c6a:	f7ee ff79 	bl	8000b60 <__aeabi_uldivmod>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	460b      	mov	r3, r1
 8011c72:	4611      	mov	r1, r2
 8011c74:	4b38      	ldr	r3, [pc, #224]	; (8011d58 <UART_SetConfig+0x4e4>)
 8011c76:	fba3 2301 	umull	r2, r3, r3, r1
 8011c7a:	095b      	lsrs	r3, r3, #5
 8011c7c:	2264      	movs	r2, #100	; 0x64
 8011c7e:	fb02 f303 	mul.w	r3, r2, r3
 8011c82:	1acb      	subs	r3, r1, r3
 8011c84:	011b      	lsls	r3, r3, #4
 8011c86:	3332      	adds	r3, #50	; 0x32
 8011c88:	4a33      	ldr	r2, [pc, #204]	; (8011d58 <UART_SetConfig+0x4e4>)
 8011c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8011c8e:	095b      	lsrs	r3, r3, #5
 8011c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c94:	441c      	add	r4, r3
 8011c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	673b      	str	r3, [r7, #112]	; 0x70
 8011c9e:	677a      	str	r2, [r7, #116]	; 0x74
 8011ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011ca4:	4642      	mov	r2, r8
 8011ca6:	464b      	mov	r3, r9
 8011ca8:	1891      	adds	r1, r2, r2
 8011caa:	60b9      	str	r1, [r7, #8]
 8011cac:	415b      	adcs	r3, r3
 8011cae:	60fb      	str	r3, [r7, #12]
 8011cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011cb4:	4641      	mov	r1, r8
 8011cb6:	1851      	adds	r1, r2, r1
 8011cb8:	6039      	str	r1, [r7, #0]
 8011cba:	4649      	mov	r1, r9
 8011cbc:	414b      	adcs	r3, r1
 8011cbe:	607b      	str	r3, [r7, #4]
 8011cc0:	f04f 0200 	mov.w	r2, #0
 8011cc4:	f04f 0300 	mov.w	r3, #0
 8011cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011ccc:	4659      	mov	r1, fp
 8011cce:	00cb      	lsls	r3, r1, #3
 8011cd0:	4651      	mov	r1, sl
 8011cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011cd6:	4651      	mov	r1, sl
 8011cd8:	00ca      	lsls	r2, r1, #3
 8011cda:	4610      	mov	r0, r2
 8011cdc:	4619      	mov	r1, r3
 8011cde:	4603      	mov	r3, r0
 8011ce0:	4642      	mov	r2, r8
 8011ce2:	189b      	adds	r3, r3, r2
 8011ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ce6:	464b      	mov	r3, r9
 8011ce8:	460a      	mov	r2, r1
 8011cea:	eb42 0303 	adc.w	r3, r2, r3
 8011cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8011cfa:	667a      	str	r2, [r7, #100]	; 0x64
 8011cfc:	f04f 0200 	mov.w	r2, #0
 8011d00:	f04f 0300 	mov.w	r3, #0
 8011d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8011d08:	4649      	mov	r1, r9
 8011d0a:	008b      	lsls	r3, r1, #2
 8011d0c:	4641      	mov	r1, r8
 8011d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011d12:	4641      	mov	r1, r8
 8011d14:	008a      	lsls	r2, r1, #2
 8011d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011d1a:	f7ee ff21 	bl	8000b60 <__aeabi_uldivmod>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	460b      	mov	r3, r1
 8011d22:	4b0d      	ldr	r3, [pc, #52]	; (8011d58 <UART_SetConfig+0x4e4>)
 8011d24:	fba3 1302 	umull	r1, r3, r3, r2
 8011d28:	095b      	lsrs	r3, r3, #5
 8011d2a:	2164      	movs	r1, #100	; 0x64
 8011d2c:	fb01 f303 	mul.w	r3, r1, r3
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	011b      	lsls	r3, r3, #4
 8011d34:	3332      	adds	r3, #50	; 0x32
 8011d36:	4a08      	ldr	r2, [pc, #32]	; (8011d58 <UART_SetConfig+0x4e4>)
 8011d38:	fba2 2303 	umull	r2, r3, r2, r3
 8011d3c:	095b      	lsrs	r3, r3, #5
 8011d3e:	f003 020f 	and.w	r2, r3, #15
 8011d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4422      	add	r2, r4
 8011d4a:	609a      	str	r2, [r3, #8]
}
 8011d4c:	bf00      	nop
 8011d4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011d52:	46bd      	mov	sp, r7
 8011d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d58:	51eb851f 	.word	0x51eb851f

08011d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011d5c:	b084      	sub	sp, #16
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b084      	sub	sp, #16
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	f107 001c 	add.w	r0, r7, #28
 8011d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d122      	bne.n	8011dba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d105      	bne.n	8011dae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f001 fbee 	bl	8013590 <USB_CoreReset>
 8011db4:	4603      	mov	r3, r0
 8011db6:	73fb      	strb	r3, [r7, #15]
 8011db8:	e01a      	b.n	8011df0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f001 fbe2 	bl	8013590 <USB_CoreReset>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d106      	bne.n	8011de4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	639a      	str	r2, [r3, #56]	; 0x38
 8011de2:	e005      	b.n	8011df0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011de8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d10b      	bne.n	8011e0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	689b      	ldr	r3, [r3, #8]
 8011dfa:	f043 0206 	orr.w	r2, r3, #6
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	f043 0220 	orr.w	r2, r3, #32
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e1a:	b004      	add	sp, #16
 8011e1c:	4770      	bx	lr
	...

08011e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b087      	sub	sp, #28
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011e2e:	79fb      	ldrb	r3, [r7, #7]
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d165      	bne.n	8011f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	4a41      	ldr	r2, [pc, #260]	; (8011f3c <USB_SetTurnaroundTime+0x11c>)
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	d906      	bls.n	8011e4a <USB_SetTurnaroundTime+0x2a>
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	4a40      	ldr	r2, [pc, #256]	; (8011f40 <USB_SetTurnaroundTime+0x120>)
 8011e40:	4293      	cmp	r3, r2
 8011e42:	d202      	bcs.n	8011e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011e44:	230f      	movs	r3, #15
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	e062      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	4a3c      	ldr	r2, [pc, #240]	; (8011f40 <USB_SetTurnaroundTime+0x120>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d306      	bcc.n	8011e60 <USB_SetTurnaroundTime+0x40>
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	4a3b      	ldr	r2, [pc, #236]	; (8011f44 <USB_SetTurnaroundTime+0x124>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d202      	bcs.n	8011e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011e5a:	230e      	movs	r3, #14
 8011e5c:	617b      	str	r3, [r7, #20]
 8011e5e:	e057      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	4a38      	ldr	r2, [pc, #224]	; (8011f44 <USB_SetTurnaroundTime+0x124>)
 8011e64:	4293      	cmp	r3, r2
 8011e66:	d306      	bcc.n	8011e76 <USB_SetTurnaroundTime+0x56>
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	4a37      	ldr	r2, [pc, #220]	; (8011f48 <USB_SetTurnaroundTime+0x128>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d202      	bcs.n	8011e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011e70:	230d      	movs	r3, #13
 8011e72:	617b      	str	r3, [r7, #20]
 8011e74:	e04c      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	4a33      	ldr	r2, [pc, #204]	; (8011f48 <USB_SetTurnaroundTime+0x128>)
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	d306      	bcc.n	8011e8c <USB_SetTurnaroundTime+0x6c>
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	4a32      	ldr	r2, [pc, #200]	; (8011f4c <USB_SetTurnaroundTime+0x12c>)
 8011e82:	4293      	cmp	r3, r2
 8011e84:	d802      	bhi.n	8011e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011e86:	230c      	movs	r3, #12
 8011e88:	617b      	str	r3, [r7, #20]
 8011e8a:	e041      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	4a2f      	ldr	r2, [pc, #188]	; (8011f4c <USB_SetTurnaroundTime+0x12c>)
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d906      	bls.n	8011ea2 <USB_SetTurnaroundTime+0x82>
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	4a2e      	ldr	r2, [pc, #184]	; (8011f50 <USB_SetTurnaroundTime+0x130>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d802      	bhi.n	8011ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011e9c:	230b      	movs	r3, #11
 8011e9e:	617b      	str	r3, [r7, #20]
 8011ea0:	e036      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	4a2a      	ldr	r2, [pc, #168]	; (8011f50 <USB_SetTurnaroundTime+0x130>)
 8011ea6:	4293      	cmp	r3, r2
 8011ea8:	d906      	bls.n	8011eb8 <USB_SetTurnaroundTime+0x98>
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	4a29      	ldr	r2, [pc, #164]	; (8011f54 <USB_SetTurnaroundTime+0x134>)
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d802      	bhi.n	8011eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011eb2:	230a      	movs	r3, #10
 8011eb4:	617b      	str	r3, [r7, #20]
 8011eb6:	e02b      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	4a26      	ldr	r2, [pc, #152]	; (8011f54 <USB_SetTurnaroundTime+0x134>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d906      	bls.n	8011ece <USB_SetTurnaroundTime+0xae>
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	4a25      	ldr	r2, [pc, #148]	; (8011f58 <USB_SetTurnaroundTime+0x138>)
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d202      	bcs.n	8011ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011ec8:	2309      	movs	r3, #9
 8011eca:	617b      	str	r3, [r7, #20]
 8011ecc:	e020      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	4a21      	ldr	r2, [pc, #132]	; (8011f58 <USB_SetTurnaroundTime+0x138>)
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	d306      	bcc.n	8011ee4 <USB_SetTurnaroundTime+0xc4>
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	4a20      	ldr	r2, [pc, #128]	; (8011f5c <USB_SetTurnaroundTime+0x13c>)
 8011eda:	4293      	cmp	r3, r2
 8011edc:	d802      	bhi.n	8011ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011ede:	2308      	movs	r3, #8
 8011ee0:	617b      	str	r3, [r7, #20]
 8011ee2:	e015      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	4a1d      	ldr	r2, [pc, #116]	; (8011f5c <USB_SetTurnaroundTime+0x13c>)
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d906      	bls.n	8011efa <USB_SetTurnaroundTime+0xda>
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	4a1c      	ldr	r2, [pc, #112]	; (8011f60 <USB_SetTurnaroundTime+0x140>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d202      	bcs.n	8011efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011ef4:	2307      	movs	r3, #7
 8011ef6:	617b      	str	r3, [r7, #20]
 8011ef8:	e00a      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011efa:	2306      	movs	r3, #6
 8011efc:	617b      	str	r3, [r7, #20]
 8011efe:	e007      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011f00:	79fb      	ldrb	r3, [r7, #7]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d102      	bne.n	8011f0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011f06:	2309      	movs	r3, #9
 8011f08:	617b      	str	r3, [r7, #20]
 8011f0a:	e001      	b.n	8011f10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011f0c:	2309      	movs	r3, #9
 8011f0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	68da      	ldr	r2, [r3, #12]
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	029b      	lsls	r3, r3, #10
 8011f24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011f28:	431a      	orrs	r2, r3
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	371c      	adds	r7, #28
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr
 8011f3c:	00d8acbf 	.word	0x00d8acbf
 8011f40:	00e4e1c0 	.word	0x00e4e1c0
 8011f44:	00f42400 	.word	0x00f42400
 8011f48:	01067380 	.word	0x01067380
 8011f4c:	011a499f 	.word	0x011a499f
 8011f50:	01312cff 	.word	0x01312cff
 8011f54:	014ca43f 	.word	0x014ca43f
 8011f58:	016e3600 	.word	0x016e3600
 8011f5c:	01a6ab1f 	.word	0x01a6ab1f
 8011f60:	01e84800 	.word	0x01e84800

08011f64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	689b      	ldr	r3, [r3, #8]
 8011f70:	f043 0201 	orr.w	r2, r3, #1
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011f78:	2300      	movs	r3, #0
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	370c      	adds	r7, #12
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011f86:	b480      	push	{r7}
 8011f88:	b083      	sub	sp, #12
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	f023 0201 	bic.w	r2, r3, #1
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011f9a:	2300      	movs	r3, #0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr

08011fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011fc4:	78fb      	ldrb	r3, [r7, #3]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d115      	bne.n	8011ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	68db      	ldr	r3, [r3, #12]
 8011fce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011fd6:	2001      	movs	r0, #1
 8011fd8:	f7f9 fc96 	bl	800b908 <HAL_Delay>
      ms++;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f001 fa45 	bl	8013472 <USB_GetMode>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d01e      	beq.n	801202c <USB_SetCurrentMode+0x84>
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b31      	cmp	r3, #49	; 0x31
 8011ff2:	d9f0      	bls.n	8011fd6 <USB_SetCurrentMode+0x2e>
 8011ff4:	e01a      	b.n	801202c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011ff6:	78fb      	ldrb	r3, [r7, #3]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d115      	bne.n	8012028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012008:	2001      	movs	r0, #1
 801200a:	f7f9 fc7d 	bl	800b908 <HAL_Delay>
      ms++;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	3301      	adds	r3, #1
 8012012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f001 fa2c 	bl	8013472 <USB_GetMode>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d005      	beq.n	801202c <USB_SetCurrentMode+0x84>
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	2b31      	cmp	r3, #49	; 0x31
 8012024:	d9f0      	bls.n	8012008 <USB_SetCurrentMode+0x60>
 8012026:	e001      	b.n	801202c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012028:	2301      	movs	r3, #1
 801202a:	e005      	b.n	8012038 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b32      	cmp	r3, #50	; 0x32
 8012030:	d101      	bne.n	8012036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012032:	2301      	movs	r3, #1
 8012034:	e000      	b.n	8012038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012036:	2300      	movs	r3, #0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012040:	b084      	sub	sp, #16
 8012042:	b580      	push	{r7, lr}
 8012044:	b086      	sub	sp, #24
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
 801204a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801204e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801205a:	2300      	movs	r3, #0
 801205c:	613b      	str	r3, [r7, #16]
 801205e:	e009      	b.n	8012074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	3340      	adds	r3, #64	; 0x40
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	4413      	add	r3, r2
 801206a:	2200      	movs	r2, #0
 801206c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	3301      	adds	r3, #1
 8012072:	613b      	str	r3, [r7, #16]
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	2b0e      	cmp	r3, #14
 8012078:	d9f2      	bls.n	8012060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801207c:	2b00      	cmp	r3, #0
 801207e:	d11c      	bne.n	80120ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	68fa      	ldr	r2, [r7, #12]
 801208a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801208e:	f043 0302 	orr.w	r3, r3, #2
 8012092:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	639a      	str	r2, [r3, #56]	; 0x38
 80120b8:	e00b      	b.n	80120d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80120d8:	461a      	mov	r2, r3
 80120da:	2300      	movs	r3, #0
 80120dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120e4:	4619      	mov	r1, r3
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120ec:	461a      	mov	r2, r3
 80120ee:	680b      	ldr	r3, [r1, #0]
 80120f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80120f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d10c      	bne.n	8012112 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d104      	bne.n	8012108 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80120fe:	2100      	movs	r1, #0
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 f965 	bl	80123d0 <USB_SetDevSpeed>
 8012106:	e008      	b.n	801211a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012108:	2101      	movs	r1, #1
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 f960 	bl	80123d0 <USB_SetDevSpeed>
 8012110:	e003      	b.n	801211a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012112:	2103      	movs	r1, #3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 f95b 	bl	80123d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801211a:	2110      	movs	r1, #16
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 f8f3 	bl	8012308 <USB_FlushTxFifo>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8012128:	2301      	movs	r3, #1
 801212a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 f91f 	bl	8012370 <USB_FlushRxFifo>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d001      	beq.n	801213c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8012138:	2301      	movs	r3, #1
 801213a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012142:	461a      	mov	r2, r3
 8012144:	2300      	movs	r3, #0
 8012146:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801214e:	461a      	mov	r2, r3
 8012150:	2300      	movs	r3, #0
 8012152:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801215a:	461a      	mov	r2, r3
 801215c:	2300      	movs	r3, #0
 801215e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012160:	2300      	movs	r3, #0
 8012162:	613b      	str	r3, [r7, #16]
 8012164:	e043      	b.n	80121ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	015a      	lsls	r2, r3, #5
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	4413      	add	r3, r2
 801216e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801217c:	d118      	bne.n	80121b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d10a      	bne.n	801219a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	015a      	lsls	r2, r3, #5
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	4413      	add	r3, r2
 801218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012190:	461a      	mov	r2, r3
 8012192:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012196:	6013      	str	r3, [r2, #0]
 8012198:	e013      	b.n	80121c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	015a      	lsls	r2, r3, #5
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	4413      	add	r3, r2
 80121a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121a6:	461a      	mov	r2, r3
 80121a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80121ac:	6013      	str	r3, [r2, #0]
 80121ae:	e008      	b.n	80121c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	015a      	lsls	r2, r3, #5
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4413      	add	r3, r2
 80121b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121bc:	461a      	mov	r2, r3
 80121be:	2300      	movs	r3, #0
 80121c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	015a      	lsls	r2, r3, #5
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	4413      	add	r3, r2
 80121ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121ce:	461a      	mov	r2, r3
 80121d0:	2300      	movs	r3, #0
 80121d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	015a      	lsls	r2, r3, #5
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	4413      	add	r3, r2
 80121dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121e0:	461a      	mov	r2, r3
 80121e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80121e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	3301      	adds	r3, #1
 80121ec:	613b      	str	r3, [r7, #16]
 80121ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f0:	693a      	ldr	r2, [r7, #16]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d3b7      	bcc.n	8012166 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80121f6:	2300      	movs	r3, #0
 80121f8:	613b      	str	r3, [r7, #16]
 80121fa:	e043      	b.n	8012284 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	015a      	lsls	r2, r3, #5
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	4413      	add	r3, r2
 8012204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012212:	d118      	bne.n	8012246 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d10a      	bne.n	8012230 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	015a      	lsls	r2, r3, #5
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	4413      	add	r3, r2
 8012222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012226:	461a      	mov	r2, r3
 8012228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801222c:	6013      	str	r3, [r2, #0]
 801222e:	e013      	b.n	8012258 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	4413      	add	r3, r2
 8012238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801223c:	461a      	mov	r2, r3
 801223e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012242:	6013      	str	r3, [r2, #0]
 8012244:	e008      	b.n	8012258 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	015a      	lsls	r2, r3, #5
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	4413      	add	r3, r2
 801224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012252:	461a      	mov	r2, r3
 8012254:	2300      	movs	r3, #0
 8012256:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	015a      	lsls	r2, r3, #5
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	4413      	add	r3, r2
 8012260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012264:	461a      	mov	r2, r3
 8012266:	2300      	movs	r3, #0
 8012268:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	015a      	lsls	r2, r3, #5
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	4413      	add	r3, r2
 8012272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012276:	461a      	mov	r2, r3
 8012278:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801227c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	3301      	adds	r3, #1
 8012282:	613b      	str	r3, [r7, #16]
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	693a      	ldr	r2, [r7, #16]
 8012288:	429a      	cmp	r2, r3
 801228a:	d3b7      	bcc.n	80121fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012292:	691b      	ldr	r3, [r3, #16]
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801229a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801229e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80122ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d105      	bne.n	80122c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	699b      	ldr	r3, [r3, #24]
 80122b8:	f043 0210 	orr.w	r2, r3, #16
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	699a      	ldr	r2, [r3, #24]
 80122c4:	4b0f      	ldr	r3, [pc, #60]	; (8012304 <USB_DevInit+0x2c4>)
 80122c6:	4313      	orrs	r3, r2
 80122c8:	687a      	ldr	r2, [r7, #4]
 80122ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80122cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d005      	beq.n	80122de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	699b      	ldr	r3, [r3, #24]
 80122d6:	f043 0208 	orr.w	r2, r3, #8
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80122de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d107      	bne.n	80122f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	699b      	ldr	r3, [r3, #24]
 80122e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80122ec:	f043 0304 	orr.w	r3, r3, #4
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80122f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3718      	adds	r7, #24
 80122fa:	46bd      	mov	sp, r7
 80122fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012300:	b004      	add	sp, #16
 8012302:	4770      	bx	lr
 8012304:	803c3800 	.word	0x803c3800

08012308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012312:	2300      	movs	r3, #0
 8012314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	3301      	adds	r3, #1
 801231a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	4a13      	ldr	r2, [pc, #76]	; (801236c <USB_FlushTxFifo+0x64>)
 8012320:	4293      	cmp	r3, r2
 8012322:	d901      	bls.n	8012328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012324:	2303      	movs	r3, #3
 8012326:	e01b      	b.n	8012360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	691b      	ldr	r3, [r3, #16]
 801232c:	2b00      	cmp	r3, #0
 801232e:	daf2      	bge.n	8012316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012330:	2300      	movs	r3, #0
 8012332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	019b      	lsls	r3, r3, #6
 8012338:	f043 0220 	orr.w	r2, r3, #32
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	3301      	adds	r3, #1
 8012344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	4a08      	ldr	r2, [pc, #32]	; (801236c <USB_FlushTxFifo+0x64>)
 801234a:	4293      	cmp	r3, r2
 801234c:	d901      	bls.n	8012352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801234e:	2303      	movs	r3, #3
 8012350:	e006      	b.n	8012360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	691b      	ldr	r3, [r3, #16]
 8012356:	f003 0320 	and.w	r3, r3, #32
 801235a:	2b20      	cmp	r3, #32
 801235c:	d0f0      	beq.n	8012340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801235e:	2300      	movs	r3, #0
}
 8012360:	4618      	mov	r0, r3
 8012362:	3714      	adds	r7, #20
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr
 801236c:	00030d40 	.word	0x00030d40

08012370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012370:	b480      	push	{r7}
 8012372:	b085      	sub	sp, #20
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012378:	2300      	movs	r3, #0
 801237a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3301      	adds	r3, #1
 8012380:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	4a11      	ldr	r2, [pc, #68]	; (80123cc <USB_FlushRxFifo+0x5c>)
 8012386:	4293      	cmp	r3, r2
 8012388:	d901      	bls.n	801238e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801238a:	2303      	movs	r3, #3
 801238c:	e018      	b.n	80123c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	daf2      	bge.n	801237c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012396:	2300      	movs	r3, #0
 8012398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2210      	movs	r2, #16
 801239e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	3301      	adds	r3, #1
 80123a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	4a08      	ldr	r2, [pc, #32]	; (80123cc <USB_FlushRxFifo+0x5c>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d901      	bls.n	80123b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80123ae:	2303      	movs	r3, #3
 80123b0:	e006      	b.n	80123c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	691b      	ldr	r3, [r3, #16]
 80123b6:	f003 0310 	and.w	r3, r3, #16
 80123ba:	2b10      	cmp	r3, #16
 80123bc:	d0f0      	beq.n	80123a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80123be:	2300      	movs	r3, #0
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3714      	adds	r7, #20
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr
 80123cc:	00030d40 	.word	0x00030d40

080123d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b085      	sub	sp, #20
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	78fb      	ldrb	r3, [r7, #3]
 80123ea:	68f9      	ldr	r1, [r7, #12]
 80123ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123f0:	4313      	orrs	r3, r2
 80123f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3714      	adds	r7, #20
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr

08012402 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012402:	b480      	push	{r7}
 8012404:	b087      	sub	sp, #28
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	f003 0306 	and.w	r3, r3, #6
 801241a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d102      	bne.n	8012428 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012422:	2300      	movs	r3, #0
 8012424:	75fb      	strb	r3, [r7, #23]
 8012426:	e00a      	b.n	801243e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2b02      	cmp	r3, #2
 801242c:	d002      	beq.n	8012434 <USB_GetDevSpeed+0x32>
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	2b06      	cmp	r3, #6
 8012432:	d102      	bne.n	801243a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012434:	2302      	movs	r3, #2
 8012436:	75fb      	strb	r3, [r7, #23]
 8012438:	e001      	b.n	801243e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801243a:	230f      	movs	r3, #15
 801243c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801243e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012440:	4618      	mov	r0, r3
 8012442:	371c      	adds	r7, #28
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801244c:	b480      	push	{r7}
 801244e:	b085      	sub	sp, #20
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	785b      	ldrb	r3, [r3, #1]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d13a      	bne.n	80124de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801246e:	69da      	ldr	r2, [r3, #28]
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	f003 030f 	and.w	r3, r3, #15
 8012478:	2101      	movs	r1, #1
 801247a:	fa01 f303 	lsl.w	r3, r1, r3
 801247e:	b29b      	uxth	r3, r3
 8012480:	68f9      	ldr	r1, [r7, #12]
 8012482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012486:	4313      	orrs	r3, r2
 8012488:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	015a      	lsls	r2, r3, #5
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	4413      	add	r3, r2
 8012492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801249c:	2b00      	cmp	r3, #0
 801249e:	d155      	bne.n	801254c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	791b      	ldrb	r3, [r3, #4]
 80124ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80124bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	059b      	lsls	r3, r3, #22
 80124c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80124c4:	4313      	orrs	r3, r2
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	0151      	lsls	r1, r2, #5
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	440a      	add	r2, r1
 80124ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80124da:	6013      	str	r3, [r2, #0]
 80124dc:	e036      	b.n	801254c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124e4:	69da      	ldr	r2, [r3, #28]
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	f003 030f 	and.w	r3, r3, #15
 80124ee:	2101      	movs	r1, #1
 80124f0:	fa01 f303 	lsl.w	r3, r1, r3
 80124f4:	041b      	lsls	r3, r3, #16
 80124f6:	68f9      	ldr	r1, [r7, #12]
 80124f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124fc:	4313      	orrs	r3, r2
 80124fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	015a      	lsls	r2, r3, #5
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	4413      	add	r3, r2
 8012508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012512:	2b00      	cmp	r3, #0
 8012514:	d11a      	bne.n	801254c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	015a      	lsls	r2, r3, #5
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	4413      	add	r3, r2
 801251e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012522:	681a      	ldr	r2, [r3, #0]
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	68db      	ldr	r3, [r3, #12]
 8012528:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	791b      	ldrb	r3, [r3, #4]
 8012530:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012532:	430b      	orrs	r3, r1
 8012534:	4313      	orrs	r3, r2
 8012536:	68ba      	ldr	r2, [r7, #8]
 8012538:	0151      	lsls	r1, r2, #5
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	440a      	add	r2, r1
 801253e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801254a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801254c:	2300      	movs	r3, #0
}
 801254e:	4618      	mov	r0, r3
 8012550:	3714      	adds	r7, #20
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
	...

0801255c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801255c:	b480      	push	{r7}
 801255e:	b085      	sub	sp, #20
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	785b      	ldrb	r3, [r3, #1]
 8012574:	2b01      	cmp	r3, #1
 8012576:	d161      	bne.n	801263c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	015a      	lsls	r2, r3, #5
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	4413      	add	r3, r2
 8012580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801258a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801258e:	d11f      	bne.n	80125d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	015a      	lsls	r2, r3, #5
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	4413      	add	r3, r2
 8012598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	68ba      	ldr	r2, [r7, #8]
 80125a0:	0151      	lsls	r1, r2, #5
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	440a      	add	r2, r1
 80125a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80125ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	015a      	lsls	r2, r3, #5
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	4413      	add	r3, r2
 80125b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	68ba      	ldr	r2, [r7, #8]
 80125c0:	0151      	lsls	r1, r2, #5
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	440a      	add	r2, r1
 80125c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80125ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	f003 030f 	and.w	r3, r3, #15
 80125e0:	2101      	movs	r1, #1
 80125e2:	fa01 f303 	lsl.w	r3, r1, r3
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	43db      	mvns	r3, r3
 80125ea:	68f9      	ldr	r1, [r7, #12]
 80125ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125f0:	4013      	ands	r3, r2
 80125f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125fa:	69da      	ldr	r2, [r3, #28]
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	f003 030f 	and.w	r3, r3, #15
 8012604:	2101      	movs	r1, #1
 8012606:	fa01 f303 	lsl.w	r3, r1, r3
 801260a:	b29b      	uxth	r3, r3
 801260c:	43db      	mvns	r3, r3
 801260e:	68f9      	ldr	r1, [r7, #12]
 8012610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012614:	4013      	ands	r3, r2
 8012616:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	015a      	lsls	r2, r3, #5
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	4413      	add	r3, r2
 8012620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	0159      	lsls	r1, r3, #5
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	440b      	add	r3, r1
 801262e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012632:	4619      	mov	r1, r3
 8012634:	4b35      	ldr	r3, [pc, #212]	; (801270c <USB_DeactivateEndpoint+0x1b0>)
 8012636:	4013      	ands	r3, r2
 8012638:	600b      	str	r3, [r1, #0]
 801263a:	e060      	b.n	80126fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	015a      	lsls	r2, r3, #5
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	4413      	add	r3, r2
 8012644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801264e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012652:	d11f      	bne.n	8012694 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	015a      	lsls	r2, r3, #5
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	4413      	add	r3, r2
 801265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	68ba      	ldr	r2, [r7, #8]
 8012664:	0151      	lsls	r1, r2, #5
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	440a      	add	r2, r1
 801266a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801266e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012672:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	015a      	lsls	r2, r3, #5
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	4413      	add	r3, r2
 801267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	68ba      	ldr	r2, [r7, #8]
 8012684:	0151      	lsls	r1, r2, #5
 8012686:	68fa      	ldr	r2, [r7, #12]
 8012688:	440a      	add	r2, r1
 801268a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801268e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801269a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	f003 030f 	and.w	r3, r3, #15
 80126a4:	2101      	movs	r1, #1
 80126a6:	fa01 f303 	lsl.w	r3, r1, r3
 80126aa:	041b      	lsls	r3, r3, #16
 80126ac:	43db      	mvns	r3, r3
 80126ae:	68f9      	ldr	r1, [r7, #12]
 80126b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80126b4:	4013      	ands	r3, r2
 80126b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126be:	69da      	ldr	r2, [r3, #28]
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	f003 030f 	and.w	r3, r3, #15
 80126c8:	2101      	movs	r1, #1
 80126ca:	fa01 f303 	lsl.w	r3, r1, r3
 80126ce:	041b      	lsls	r3, r3, #16
 80126d0:	43db      	mvns	r3, r3
 80126d2:	68f9      	ldr	r1, [r7, #12]
 80126d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80126d8:	4013      	ands	r3, r2
 80126da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	015a      	lsls	r2, r3, #5
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	4413      	add	r3, r2
 80126e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	0159      	lsls	r1, r3, #5
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	440b      	add	r3, r1
 80126f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126f6:	4619      	mov	r1, r3
 80126f8:	4b05      	ldr	r3, [pc, #20]	; (8012710 <USB_DeactivateEndpoint+0x1b4>)
 80126fa:	4013      	ands	r3, r2
 80126fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80126fe:	2300      	movs	r3, #0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3714      	adds	r7, #20
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	ec337800 	.word	0xec337800
 8012710:	eff37800 	.word	0xeff37800

08012714 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b08a      	sub	sp, #40	; 0x28
 8012718:	af02      	add	r7, sp, #8
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	4613      	mov	r3, r2
 8012720:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	785b      	ldrb	r3, [r3, #1]
 8012730:	2b01      	cmp	r3, #1
 8012732:	f040 815c 	bne.w	80129ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	699b      	ldr	r3, [r3, #24]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d132      	bne.n	80127a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	015a      	lsls	r2, r3, #5
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	4413      	add	r3, r2
 8012746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801274a:	691b      	ldr	r3, [r3, #16]
 801274c:	69ba      	ldr	r2, [r7, #24]
 801274e:	0151      	lsls	r1, r2, #5
 8012750:	69fa      	ldr	r2, [r7, #28]
 8012752:	440a      	add	r2, r1
 8012754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801275c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012760:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	015a      	lsls	r2, r3, #5
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	4413      	add	r3, r2
 801276a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801276e:	691b      	ldr	r3, [r3, #16]
 8012770:	69ba      	ldr	r2, [r7, #24]
 8012772:	0151      	lsls	r1, r2, #5
 8012774:	69fa      	ldr	r2, [r7, #28]
 8012776:	440a      	add	r2, r1
 8012778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801277c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012780:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	015a      	lsls	r2, r3, #5
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	4413      	add	r3, r2
 801278a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801278e:	691b      	ldr	r3, [r3, #16]
 8012790:	69ba      	ldr	r2, [r7, #24]
 8012792:	0151      	lsls	r1, r2, #5
 8012794:	69fa      	ldr	r2, [r7, #28]
 8012796:	440a      	add	r2, r1
 8012798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801279c:	0cdb      	lsrs	r3, r3, #19
 801279e:	04db      	lsls	r3, r3, #19
 80127a0:	6113      	str	r3, [r2, #16]
 80127a2:	e074      	b.n	801288e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	015a      	lsls	r2, r3, #5
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	4413      	add	r3, r2
 80127ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127b0:	691b      	ldr	r3, [r3, #16]
 80127b2:	69ba      	ldr	r2, [r7, #24]
 80127b4:	0151      	lsls	r1, r2, #5
 80127b6:	69fa      	ldr	r2, [r7, #28]
 80127b8:	440a      	add	r2, r1
 80127ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127be:	0cdb      	lsrs	r3, r3, #19
 80127c0:	04db      	lsls	r3, r3, #19
 80127c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	015a      	lsls	r2, r3, #5
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	4413      	add	r3, r2
 80127cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127d0:	691b      	ldr	r3, [r3, #16]
 80127d2:	69ba      	ldr	r2, [r7, #24]
 80127d4:	0151      	lsls	r1, r2, #5
 80127d6:	69fa      	ldr	r2, [r7, #28]
 80127d8:	440a      	add	r2, r1
 80127da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80127e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80127e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80127e8:	69bb      	ldr	r3, [r7, #24]
 80127ea:	015a      	lsls	r2, r3, #5
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	4413      	add	r3, r2
 80127f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	6999      	ldr	r1, [r3, #24]
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	440b      	add	r3, r1
 8012800:	1e59      	subs	r1, r3, #1
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	fbb1 f3f3 	udiv	r3, r1, r3
 801280a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801280c:	4b9d      	ldr	r3, [pc, #628]	; (8012a84 <USB_EPStartXfer+0x370>)
 801280e:	400b      	ands	r3, r1
 8012810:	69b9      	ldr	r1, [r7, #24]
 8012812:	0148      	lsls	r0, r1, #5
 8012814:	69f9      	ldr	r1, [r7, #28]
 8012816:	4401      	add	r1, r0
 8012818:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801281c:	4313      	orrs	r3, r2
 801281e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	015a      	lsls	r2, r3, #5
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	4413      	add	r3, r2
 8012828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801282c:	691a      	ldr	r2, [r3, #16]
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	699b      	ldr	r3, [r3, #24]
 8012832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012836:	69b9      	ldr	r1, [r7, #24]
 8012838:	0148      	lsls	r0, r1, #5
 801283a:	69f9      	ldr	r1, [r7, #28]
 801283c:	4401      	add	r1, r0
 801283e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012842:	4313      	orrs	r3, r2
 8012844:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	791b      	ldrb	r3, [r3, #4]
 801284a:	2b01      	cmp	r3, #1
 801284c:	d11f      	bne.n	801288e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	015a      	lsls	r2, r3, #5
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	4413      	add	r3, r2
 8012856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	69ba      	ldr	r2, [r7, #24]
 801285e:	0151      	lsls	r1, r2, #5
 8012860:	69fa      	ldr	r2, [r7, #28]
 8012862:	440a      	add	r2, r1
 8012864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012868:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801286c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	015a      	lsls	r2, r3, #5
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	4413      	add	r3, r2
 8012876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801287a:	691b      	ldr	r3, [r3, #16]
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	0151      	lsls	r1, r2, #5
 8012880:	69fa      	ldr	r2, [r7, #28]
 8012882:	440a      	add	r2, r1
 8012884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801288c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801288e:	79fb      	ldrb	r3, [r7, #7]
 8012890:	2b01      	cmp	r3, #1
 8012892:	d14b      	bne.n	801292c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	695b      	ldr	r3, [r3, #20]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d009      	beq.n	80128b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801289c:	69bb      	ldr	r3, [r7, #24]
 801289e:	015a      	lsls	r2, r3, #5
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	4413      	add	r3, r2
 80128a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128a8:	461a      	mov	r2, r3
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	695b      	ldr	r3, [r3, #20]
 80128ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	791b      	ldrb	r3, [r3, #4]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d128      	bne.n	801290a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d110      	bne.n	80128ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	015a      	lsls	r2, r3, #5
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	4413      	add	r3, r2
 80128d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	69ba      	ldr	r2, [r7, #24]
 80128d8:	0151      	lsls	r1, r2, #5
 80128da:	69fa      	ldr	r2, [r7, #28]
 80128dc:	440a      	add	r2, r1
 80128de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80128e6:	6013      	str	r3, [r2, #0]
 80128e8:	e00f      	b.n	801290a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	015a      	lsls	r2, r3, #5
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	4413      	add	r3, r2
 80128f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	69ba      	ldr	r2, [r7, #24]
 80128fa:	0151      	lsls	r1, r2, #5
 80128fc:	69fa      	ldr	r2, [r7, #28]
 80128fe:	440a      	add	r2, r1
 8012900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012908:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	015a      	lsls	r2, r3, #5
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	4413      	add	r3, r2
 8012912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	69ba      	ldr	r2, [r7, #24]
 801291a:	0151      	lsls	r1, r2, #5
 801291c:	69fa      	ldr	r2, [r7, #28]
 801291e:	440a      	add	r2, r1
 8012920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012928:	6013      	str	r3, [r2, #0]
 801292a:	e133      	b.n	8012b94 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	015a      	lsls	r2, r3, #5
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	4413      	add	r3, r2
 8012934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	69ba      	ldr	r2, [r7, #24]
 801293c:	0151      	lsls	r1, r2, #5
 801293e:	69fa      	ldr	r2, [r7, #28]
 8012940:	440a      	add	r2, r1
 8012942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801294a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	791b      	ldrb	r3, [r3, #4]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d015      	beq.n	8012980 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	699b      	ldr	r3, [r3, #24]
 8012958:	2b00      	cmp	r3, #0
 801295a:	f000 811b 	beq.w	8012b94 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801295e:	69fb      	ldr	r3, [r7, #28]
 8012960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	f003 030f 	and.w	r3, r3, #15
 801296e:	2101      	movs	r1, #1
 8012970:	fa01 f303 	lsl.w	r3, r1, r3
 8012974:	69f9      	ldr	r1, [r7, #28]
 8012976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801297a:	4313      	orrs	r3, r2
 801297c:	634b      	str	r3, [r1, #52]	; 0x34
 801297e:	e109      	b.n	8012b94 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801298c:	2b00      	cmp	r3, #0
 801298e:	d110      	bne.n	80129b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012990:	69bb      	ldr	r3, [r7, #24]
 8012992:	015a      	lsls	r2, r3, #5
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	4413      	add	r3, r2
 8012998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	69ba      	ldr	r2, [r7, #24]
 80129a0:	0151      	lsls	r1, r2, #5
 80129a2:	69fa      	ldr	r2, [r7, #28]
 80129a4:	440a      	add	r2, r1
 80129a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80129ae:	6013      	str	r3, [r2, #0]
 80129b0:	e00f      	b.n	80129d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80129b2:	69bb      	ldr	r3, [r7, #24]
 80129b4:	015a      	lsls	r2, r3, #5
 80129b6:	69fb      	ldr	r3, [r7, #28]
 80129b8:	4413      	add	r3, r2
 80129ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	69ba      	ldr	r2, [r7, #24]
 80129c2:	0151      	lsls	r1, r2, #5
 80129c4:	69fa      	ldr	r2, [r7, #28]
 80129c6:	440a      	add	r2, r1
 80129c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	6919      	ldr	r1, [r3, #16]
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	781a      	ldrb	r2, [r3, #0]
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	699b      	ldr	r3, [r3, #24]
 80129de:	b298      	uxth	r0, r3
 80129e0:	79fb      	ldrb	r3, [r7, #7]
 80129e2:	9300      	str	r3, [sp, #0]
 80129e4:	4603      	mov	r3, r0
 80129e6:	68f8      	ldr	r0, [r7, #12]
 80129e8:	f000 fade 	bl	8012fa8 <USB_WritePacket>
 80129ec:	e0d2      	b.n	8012b94 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80129ee:	69bb      	ldr	r3, [r7, #24]
 80129f0:	015a      	lsls	r2, r3, #5
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	4413      	add	r3, r2
 80129f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129fa:	691b      	ldr	r3, [r3, #16]
 80129fc:	69ba      	ldr	r2, [r7, #24]
 80129fe:	0151      	lsls	r1, r2, #5
 8012a00:	69fa      	ldr	r2, [r7, #28]
 8012a02:	440a      	add	r2, r1
 8012a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a08:	0cdb      	lsrs	r3, r3, #19
 8012a0a:	04db      	lsls	r3, r3, #19
 8012a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	015a      	lsls	r2, r3, #5
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	4413      	add	r3, r2
 8012a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a1a:	691b      	ldr	r3, [r3, #16]
 8012a1c:	69ba      	ldr	r2, [r7, #24]
 8012a1e:	0151      	lsls	r1, r2, #5
 8012a20:	69fa      	ldr	r2, [r7, #28]
 8012a22:	440a      	add	r2, r1
 8012a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012a30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	699b      	ldr	r3, [r3, #24]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d126      	bne.n	8012a88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	015a      	lsls	r2, r3, #5
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	4413      	add	r3, r2
 8012a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a46:	691a      	ldr	r2, [r3, #16]
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a50:	69b9      	ldr	r1, [r7, #24]
 8012a52:	0148      	lsls	r0, r1, #5
 8012a54:	69f9      	ldr	r1, [r7, #28]
 8012a56:	4401      	add	r1, r0
 8012a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	015a      	lsls	r2, r3, #5
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	4413      	add	r3, r2
 8012a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a6c:	691b      	ldr	r3, [r3, #16]
 8012a6e:	69ba      	ldr	r2, [r7, #24]
 8012a70:	0151      	lsls	r1, r2, #5
 8012a72:	69fa      	ldr	r2, [r7, #28]
 8012a74:	440a      	add	r2, r1
 8012a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a7e:	6113      	str	r3, [r2, #16]
 8012a80:	e03a      	b.n	8012af8 <USB_EPStartXfer+0x3e4>
 8012a82:	bf00      	nop
 8012a84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	699a      	ldr	r2, [r3, #24]
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	4413      	add	r3, r2
 8012a92:	1e5a      	subs	r2, r3, #1
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a9c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	8afa      	ldrh	r2, [r7, #22]
 8012aa4:	fb03 f202 	mul.w	r2, r3, r2
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	015a      	lsls	r2, r3, #5
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ab8:	691a      	ldr	r2, [r3, #16]
 8012aba:	8afb      	ldrh	r3, [r7, #22]
 8012abc:	04d9      	lsls	r1, r3, #19
 8012abe:	4b38      	ldr	r3, [pc, #224]	; (8012ba0 <USB_EPStartXfer+0x48c>)
 8012ac0:	400b      	ands	r3, r1
 8012ac2:	69b9      	ldr	r1, [r7, #24]
 8012ac4:	0148      	lsls	r0, r1, #5
 8012ac6:	69f9      	ldr	r1, [r7, #28]
 8012ac8:	4401      	add	r1, r0
 8012aca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012ad2:	69bb      	ldr	r3, [r7, #24]
 8012ad4:	015a      	lsls	r2, r3, #5
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	4413      	add	r3, r2
 8012ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ade:	691a      	ldr	r2, [r3, #16]
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	69db      	ldr	r3, [r3, #28]
 8012ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ae8:	69b9      	ldr	r1, [r7, #24]
 8012aea:	0148      	lsls	r0, r1, #5
 8012aec:	69f9      	ldr	r1, [r7, #28]
 8012aee:	4401      	add	r1, r0
 8012af0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012af4:	4313      	orrs	r3, r2
 8012af6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012af8:	79fb      	ldrb	r3, [r7, #7]
 8012afa:	2b01      	cmp	r3, #1
 8012afc:	d10d      	bne.n	8012b1a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	691b      	ldr	r3, [r3, #16]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d009      	beq.n	8012b1a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	6919      	ldr	r1, [r3, #16]
 8012b0a:	69bb      	ldr	r3, [r7, #24]
 8012b0c:	015a      	lsls	r2, r3, #5
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	4413      	add	r3, r2
 8012b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b16:	460a      	mov	r2, r1
 8012b18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	791b      	ldrb	r3, [r3, #4]
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	d128      	bne.n	8012b74 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b28:	689b      	ldr	r3, [r3, #8]
 8012b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d110      	bne.n	8012b54 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	015a      	lsls	r2, r3, #5
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	4413      	add	r3, r2
 8012b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	69ba      	ldr	r2, [r7, #24]
 8012b42:	0151      	lsls	r1, r2, #5
 8012b44:	69fa      	ldr	r2, [r7, #28]
 8012b46:	440a      	add	r2, r1
 8012b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012b50:	6013      	str	r3, [r2, #0]
 8012b52:	e00f      	b.n	8012b74 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	015a      	lsls	r2, r3, #5
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	69ba      	ldr	r2, [r7, #24]
 8012b64:	0151      	lsls	r1, r2, #5
 8012b66:	69fa      	ldr	r2, [r7, #28]
 8012b68:	440a      	add	r2, r1
 8012b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	015a      	lsls	r2, r3, #5
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	69ba      	ldr	r2, [r7, #24]
 8012b84:	0151      	lsls	r1, r2, #5
 8012b86:	69fa      	ldr	r2, [r7, #28]
 8012b88:	440a      	add	r2, r1
 8012b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012b94:	2300      	movs	r3, #0
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3720      	adds	r7, #32
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	1ff80000 	.word	0x1ff80000

08012ba4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	785b      	ldrb	r3, [r3, #1]
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	f040 80ce 	bne.w	8012d62 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	699b      	ldr	r3, [r3, #24]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d132      	bne.n	8012c34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	015a      	lsls	r2, r3, #5
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	693a      	ldr	r2, [r7, #16]
 8012bde:	0151      	lsls	r1, r2, #5
 8012be0:	697a      	ldr	r2, [r7, #20]
 8012be2:	440a      	add	r2, r1
 8012be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012be8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012bec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	015a      	lsls	r2, r3, #5
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	4413      	add	r3, r2
 8012bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	693a      	ldr	r2, [r7, #16]
 8012c02:	0151      	lsls	r1, r2, #5
 8012c04:	697a      	ldr	r2, [r7, #20]
 8012c06:	440a      	add	r2, r1
 8012c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	015a      	lsls	r2, r3, #5
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	4413      	add	r3, r2
 8012c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c1e:	691b      	ldr	r3, [r3, #16]
 8012c20:	693a      	ldr	r2, [r7, #16]
 8012c22:	0151      	lsls	r1, r2, #5
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	440a      	add	r2, r1
 8012c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c2c:	0cdb      	lsrs	r3, r3, #19
 8012c2e:	04db      	lsls	r3, r3, #19
 8012c30:	6113      	str	r3, [r2, #16]
 8012c32:	e04e      	b.n	8012cd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	015a      	lsls	r2, r3, #5
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c40:	691b      	ldr	r3, [r3, #16]
 8012c42:	693a      	ldr	r2, [r7, #16]
 8012c44:	0151      	lsls	r1, r2, #5
 8012c46:	697a      	ldr	r2, [r7, #20]
 8012c48:	440a      	add	r2, r1
 8012c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c4e:	0cdb      	lsrs	r3, r3, #19
 8012c50:	04db      	lsls	r3, r3, #19
 8012c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	015a      	lsls	r2, r3, #5
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c60:	691b      	ldr	r3, [r3, #16]
 8012c62:	693a      	ldr	r2, [r7, #16]
 8012c64:	0151      	lsls	r1, r2, #5
 8012c66:	697a      	ldr	r2, [r7, #20]
 8012c68:	440a      	add	r2, r1
 8012c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012c72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012c76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	699a      	ldr	r2, [r3, #24]
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d903      	bls.n	8012c8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	68da      	ldr	r2, [r3, #12]
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	015a      	lsls	r2, r3, #5
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	4413      	add	r3, r2
 8012c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c98:	691b      	ldr	r3, [r3, #16]
 8012c9a:	693a      	ldr	r2, [r7, #16]
 8012c9c:	0151      	lsls	r1, r2, #5
 8012c9e:	697a      	ldr	r2, [r7, #20]
 8012ca0:	440a      	add	r2, r1
 8012ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012cac:	693b      	ldr	r3, [r7, #16]
 8012cae:	015a      	lsls	r2, r3, #5
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	4413      	add	r3, r2
 8012cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cb8:	691a      	ldr	r2, [r3, #16]
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	699b      	ldr	r3, [r3, #24]
 8012cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012cc2:	6939      	ldr	r1, [r7, #16]
 8012cc4:	0148      	lsls	r0, r1, #5
 8012cc6:	6979      	ldr	r1, [r7, #20]
 8012cc8:	4401      	add	r1, r0
 8012cca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012cd2:	79fb      	ldrb	r3, [r7, #7]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d11e      	bne.n	8012d16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	695b      	ldr	r3, [r3, #20]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d009      	beq.n	8012cf4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	015a      	lsls	r2, r3, #5
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	4413      	add	r3, r2
 8012ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cec:	461a      	mov	r2, r3
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	695b      	ldr	r3, [r3, #20]
 8012cf2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	015a      	lsls	r2, r3, #5
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	4413      	add	r3, r2
 8012cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	693a      	ldr	r2, [r7, #16]
 8012d04:	0151      	lsls	r1, r2, #5
 8012d06:	697a      	ldr	r2, [r7, #20]
 8012d08:	440a      	add	r2, r1
 8012d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d12:	6013      	str	r3, [r2, #0]
 8012d14:	e097      	b.n	8012e46 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	015a      	lsls	r2, r3, #5
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	693a      	ldr	r2, [r7, #16]
 8012d26:	0151      	lsls	r1, r2, #5
 8012d28:	697a      	ldr	r2, [r7, #20]
 8012d2a:	440a      	add	r2, r1
 8012d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	699b      	ldr	r3, [r3, #24]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	f000 8083 	beq.w	8012e46 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d48:	68bb      	ldr	r3, [r7, #8]
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	f003 030f 	and.w	r3, r3, #15
 8012d50:	2101      	movs	r1, #1
 8012d52:	fa01 f303 	lsl.w	r3, r1, r3
 8012d56:	6979      	ldr	r1, [r7, #20]
 8012d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	634b      	str	r3, [r1, #52]	; 0x34
 8012d60:	e071      	b.n	8012e46 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	015a      	lsls	r2, r3, #5
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	4413      	add	r3, r2
 8012d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d6e:	691b      	ldr	r3, [r3, #16]
 8012d70:	693a      	ldr	r2, [r7, #16]
 8012d72:	0151      	lsls	r1, r2, #5
 8012d74:	697a      	ldr	r2, [r7, #20]
 8012d76:	440a      	add	r2, r1
 8012d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d7c:	0cdb      	lsrs	r3, r3, #19
 8012d7e:	04db      	lsls	r3, r3, #19
 8012d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	015a      	lsls	r2, r3, #5
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	4413      	add	r3, r2
 8012d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d8e:	691b      	ldr	r3, [r3, #16]
 8012d90:	693a      	ldr	r2, [r7, #16]
 8012d92:	0151      	lsls	r1, r2, #5
 8012d94:	697a      	ldr	r2, [r7, #20]
 8012d96:	440a      	add	r2, r1
 8012d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012da0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012da4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	699b      	ldr	r3, [r3, #24]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d003      	beq.n	8012db6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	68da      	ldr	r2, [r3, #12]
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	68da      	ldr	r2, [r3, #12]
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	015a      	lsls	r2, r3, #5
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dca:	691b      	ldr	r3, [r3, #16]
 8012dcc:	693a      	ldr	r2, [r7, #16]
 8012dce:	0151      	lsls	r1, r2, #5
 8012dd0:	697a      	ldr	r2, [r7, #20]
 8012dd2:	440a      	add	r2, r1
 8012dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	015a      	lsls	r2, r3, #5
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	4413      	add	r3, r2
 8012de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dea:	691a      	ldr	r2, [r3, #16]
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	69db      	ldr	r3, [r3, #28]
 8012df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012df4:	6939      	ldr	r1, [r7, #16]
 8012df6:	0148      	lsls	r0, r1, #5
 8012df8:	6979      	ldr	r1, [r7, #20]
 8012dfa:	4401      	add	r1, r0
 8012dfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012e00:	4313      	orrs	r3, r2
 8012e02:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012e04:	79fb      	ldrb	r3, [r7, #7]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d10d      	bne.n	8012e26 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	691b      	ldr	r3, [r3, #16]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d009      	beq.n	8012e26 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	6919      	ldr	r1, [r3, #16]
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	015a      	lsls	r2, r3, #5
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e22:	460a      	mov	r2, r1
 8012e24:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	015a      	lsls	r2, r3, #5
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	693a      	ldr	r2, [r7, #16]
 8012e36:	0151      	lsls	r1, r2, #5
 8012e38:	697a      	ldr	r2, [r7, #20]
 8012e3a:	440a      	add	r2, r1
 8012e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012e44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012e46:	2300      	movs	r3, #0
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	371c      	adds	r7, #28
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b087      	sub	sp, #28
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012e62:	2300      	movs	r3, #0
 8012e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	785b      	ldrb	r3, [r3, #1]
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	d14a      	bne.n	8012f08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	015a      	lsls	r2, r3, #5
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	4413      	add	r3, r2
 8012e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e8a:	f040 8086 	bne.w	8012f9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	015a      	lsls	r2, r3, #5
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	4413      	add	r3, r2
 8012e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	7812      	ldrb	r2, [r2, #0]
 8012ea2:	0151      	lsls	r1, r2, #5
 8012ea4:	693a      	ldr	r2, [r7, #16]
 8012ea6:	440a      	add	r2, r1
 8012ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012eac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012eb0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	015a      	lsls	r2, r3, #5
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	4413      	add	r3, r2
 8012ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	7812      	ldrb	r2, [r2, #0]
 8012ec6:	0151      	lsls	r1, r2, #5
 8012ec8:	693a      	ldr	r2, [r7, #16]
 8012eca:	440a      	add	r2, r1
 8012ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ed4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f242 7210 	movw	r2, #10000	; 0x2710
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d902      	bls.n	8012eec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8012eea:	e056      	b.n	8012f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	015a      	lsls	r2, r3, #5
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f04:	d0e7      	beq.n	8012ed6 <USB_EPStopXfer+0x82>
 8012f06:	e048      	b.n	8012f9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	015a      	lsls	r2, r3, #5
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	4413      	add	r3, r2
 8012f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f20:	d13b      	bne.n	8012f9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	015a      	lsls	r2, r3, #5
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	683a      	ldr	r2, [r7, #0]
 8012f34:	7812      	ldrb	r2, [r2, #0]
 8012f36:	0151      	lsls	r1, r2, #5
 8012f38:	693a      	ldr	r2, [r7, #16]
 8012f3a:	440a      	add	r2, r1
 8012f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	015a      	lsls	r2, r3, #5
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	4413      	add	r3, r2
 8012f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	683a      	ldr	r2, [r7, #0]
 8012f58:	7812      	ldrb	r2, [r2, #0]
 8012f5a:	0151      	lsls	r1, r2, #5
 8012f5c:	693a      	ldr	r2, [r7, #16]
 8012f5e:	440a      	add	r2, r1
 8012f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	f242 7210 	movw	r2, #10000	; 0x2710
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d902      	bls.n	8012f80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8012f7e:	e00c      	b.n	8012f9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	015a      	lsls	r2, r3, #5
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	4413      	add	r3, r2
 8012f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f98:	d0e7      	beq.n	8012f6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	371c      	adds	r7, #28
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b089      	sub	sp, #36	; 0x24
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	60f8      	str	r0, [r7, #12]
 8012fb0:	60b9      	str	r1, [r7, #8]
 8012fb2:	4611      	mov	r1, r2
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	71fb      	strb	r3, [r7, #7]
 8012fba:	4613      	mov	r3, r2
 8012fbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d123      	bne.n	8013016 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012fce:	88bb      	ldrh	r3, [r7, #4]
 8012fd0:	3303      	adds	r3, #3
 8012fd2:	089b      	lsrs	r3, r3, #2
 8012fd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	61bb      	str	r3, [r7, #24]
 8012fda:	e018      	b.n	801300e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012fdc:	79fb      	ldrb	r3, [r7, #7]
 8012fde:	031a      	lsls	r2, r3, #12
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fe8:	461a      	mov	r2, r3
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	3301      	adds	r3, #1
 8013000:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013002:	69fb      	ldr	r3, [r7, #28]
 8013004:	3301      	adds	r3, #1
 8013006:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	3301      	adds	r3, #1
 801300c:	61bb      	str	r3, [r7, #24]
 801300e:	69ba      	ldr	r2, [r7, #24]
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	429a      	cmp	r2, r3
 8013014:	d3e2      	bcc.n	8012fdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3724      	adds	r7, #36	; 0x24
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013024:	b480      	push	{r7}
 8013026:	b08b      	sub	sp, #44	; 0x2c
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	4613      	mov	r3, r2
 8013030:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801303a:	88fb      	ldrh	r3, [r7, #6]
 801303c:	089b      	lsrs	r3, r3, #2
 801303e:	b29b      	uxth	r3, r3
 8013040:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013042:	88fb      	ldrh	r3, [r7, #6]
 8013044:	f003 0303 	and.w	r3, r3, #3
 8013048:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801304a:	2300      	movs	r3, #0
 801304c:	623b      	str	r3, [r7, #32]
 801304e:	e014      	b.n	801307a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013050:	69bb      	ldr	r3, [r7, #24]
 8013052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013056:	681a      	ldr	r2, [r3, #0]
 8013058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305a:	601a      	str	r2, [r3, #0]
    pDest++;
 801305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305e:	3301      	adds	r3, #1
 8013060:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013064:	3301      	adds	r3, #1
 8013066:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306a:	3301      	adds	r3, #1
 801306c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013070:	3301      	adds	r3, #1
 8013072:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013074:	6a3b      	ldr	r3, [r7, #32]
 8013076:	3301      	adds	r3, #1
 8013078:	623b      	str	r3, [r7, #32]
 801307a:	6a3a      	ldr	r2, [r7, #32]
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	429a      	cmp	r2, r3
 8013080:	d3e6      	bcc.n	8013050 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013082:	8bfb      	ldrh	r3, [r7, #30]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d01e      	beq.n	80130c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013088:	2300      	movs	r3, #0
 801308a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013092:	461a      	mov	r2, r3
 8013094:	f107 0310 	add.w	r3, r7, #16
 8013098:	6812      	ldr	r2, [r2, #0]
 801309a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801309c:	693a      	ldr	r2, [r7, #16]
 801309e:	6a3b      	ldr	r3, [r7, #32]
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	00db      	lsls	r3, r3, #3
 80130a4:	fa22 f303 	lsr.w	r3, r2, r3
 80130a8:	b2da      	uxtb	r2, r3
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	701a      	strb	r2, [r3, #0]
      i++;
 80130ae:	6a3b      	ldr	r3, [r7, #32]
 80130b0:	3301      	adds	r3, #1
 80130b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80130b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b6:	3301      	adds	r3, #1
 80130b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80130ba:	8bfb      	ldrh	r3, [r7, #30]
 80130bc:	3b01      	subs	r3, #1
 80130be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80130c0:	8bfb      	ldrh	r3, [r7, #30]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d1ea      	bne.n	801309c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80130c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	372c      	adds	r7, #44	; 0x2c
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr

080130d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	785b      	ldrb	r3, [r3, #1]
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d12c      	bne.n	801314a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	015a      	lsls	r2, r3, #5
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	4413      	add	r3, r2
 80130f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	db12      	blt.n	8013128 <USB_EPSetStall+0x54>
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d00f      	beq.n	8013128 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	015a      	lsls	r2, r3, #5
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	4413      	add	r3, r2
 8013110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	68ba      	ldr	r2, [r7, #8]
 8013118:	0151      	lsls	r1, r2, #5
 801311a:	68fa      	ldr	r2, [r7, #12]
 801311c:	440a      	add	r2, r1
 801311e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013126:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	015a      	lsls	r2, r3, #5
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	4413      	add	r3, r2
 8013130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	0151      	lsls	r1, r2, #5
 801313a:	68fa      	ldr	r2, [r7, #12]
 801313c:	440a      	add	r2, r1
 801313e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013146:	6013      	str	r3, [r2, #0]
 8013148:	e02b      	b.n	80131a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	015a      	lsls	r2, r3, #5
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	4413      	add	r3, r2
 8013152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	db12      	blt.n	8013182 <USB_EPSetStall+0xae>
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d00f      	beq.n	8013182 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	015a      	lsls	r2, r3, #5
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	4413      	add	r3, r2
 801316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	68ba      	ldr	r2, [r7, #8]
 8013172:	0151      	lsls	r1, r2, #5
 8013174:	68fa      	ldr	r2, [r7, #12]
 8013176:	440a      	add	r2, r1
 8013178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801317c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013180:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	015a      	lsls	r2, r3, #5
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	4413      	add	r3, r2
 801318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	68ba      	ldr	r2, [r7, #8]
 8013192:	0151      	lsls	r1, r2, #5
 8013194:	68fa      	ldr	r2, [r7, #12]
 8013196:	440a      	add	r2, r1
 8013198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801319c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80131a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3714      	adds	r7, #20
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b085      	sub	sp, #20
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	785b      	ldrb	r3, [r3, #1]
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d128      	bne.n	801321e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	015a      	lsls	r2, r3, #5
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	4413      	add	r3, r2
 80131d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	0151      	lsls	r1, r2, #5
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	440a      	add	r2, r1
 80131e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80131ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	791b      	ldrb	r3, [r3, #4]
 80131f0:	2b03      	cmp	r3, #3
 80131f2:	d003      	beq.n	80131fc <USB_EPClearStall+0x4c>
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	791b      	ldrb	r3, [r3, #4]
 80131f8:	2b02      	cmp	r3, #2
 80131fa:	d138      	bne.n	801326e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	015a      	lsls	r2, r3, #5
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	4413      	add	r3, r2
 8013204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	68ba      	ldr	r2, [r7, #8]
 801320c:	0151      	lsls	r1, r2, #5
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	440a      	add	r2, r1
 8013212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801321a:	6013      	str	r3, [r2, #0]
 801321c:	e027      	b.n	801326e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	015a      	lsls	r2, r3, #5
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	4413      	add	r3, r2
 8013226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	68ba      	ldr	r2, [r7, #8]
 801322e:	0151      	lsls	r1, r2, #5
 8013230:	68fa      	ldr	r2, [r7, #12]
 8013232:	440a      	add	r2, r1
 8013234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013238:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801323c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	791b      	ldrb	r3, [r3, #4]
 8013242:	2b03      	cmp	r3, #3
 8013244:	d003      	beq.n	801324e <USB_EPClearStall+0x9e>
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	791b      	ldrb	r3, [r3, #4]
 801324a:	2b02      	cmp	r3, #2
 801324c:	d10f      	bne.n	801326e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	015a      	lsls	r2, r3, #5
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	4413      	add	r3, r2
 8013256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	68ba      	ldr	r2, [r7, #8]
 801325e:	0151      	lsls	r1, r2, #5
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	440a      	add	r2, r1
 8013264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801326c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801326e:	2300      	movs	r3, #0
}
 8013270:	4618      	mov	r0, r3
 8013272:	3714      	adds	r7, #20
 8013274:	46bd      	mov	sp, r7
 8013276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327a:	4770      	bx	lr

0801327c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801329a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801329e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	78fb      	ldrb	r3, [r7, #3]
 80132aa:	011b      	lsls	r3, r3, #4
 80132ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80132b0:	68f9      	ldr	r1, [r7, #12]
 80132b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132b6:	4313      	orrs	r3, r2
 80132b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80132ba:	2300      	movs	r3, #0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3714      	adds	r7, #20
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr

080132c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b085      	sub	sp, #20
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80132e2:	f023 0303 	bic.w	r3, r3, #3
 80132e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80132f6:	f023 0302 	bic.w	r3, r3, #2
 80132fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80132fc:	2300      	movs	r3, #0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3714      	adds	r7, #20
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr

0801330a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801330a:	b480      	push	{r7}
 801330c:	b085      	sub	sp, #20
 801330e:	af00      	add	r7, sp, #0
 8013310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	68fa      	ldr	r2, [r7, #12]
 8013320:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013324:	f023 0303 	bic.w	r3, r3, #3
 8013328:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013338:	f043 0302 	orr.w	r3, r3, #2
 801333c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801333e:	2300      	movs	r3, #0
}
 8013340:	4618      	mov	r0, r3
 8013342:	3714      	adds	r7, #20
 8013344:	46bd      	mov	sp, r7
 8013346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334a:	4770      	bx	lr

0801334c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801334c:	b480      	push	{r7}
 801334e:	b085      	sub	sp, #20
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	695b      	ldr	r3, [r3, #20]
 8013358:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	699b      	ldr	r3, [r3, #24]
 801335e:	68fa      	ldr	r2, [r7, #12]
 8013360:	4013      	ands	r3, r2
 8013362:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013364:	68fb      	ldr	r3, [r7, #12]
}
 8013366:	4618      	mov	r0, r3
 8013368:	3714      	adds	r7, #20
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr

08013372 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013372:	b480      	push	{r7}
 8013374:	b085      	sub	sp, #20
 8013376:	af00      	add	r7, sp, #0
 8013378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013384:	699b      	ldr	r3, [r3, #24]
 8013386:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801338e:	69db      	ldr	r3, [r3, #28]
 8013390:	68ba      	ldr	r2, [r7, #8]
 8013392:	4013      	ands	r3, r2
 8013394:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	0c1b      	lsrs	r3, r3, #16
}
 801339a:	4618      	mov	r0, r3
 801339c:	3714      	adds	r7, #20
 801339e:	46bd      	mov	sp, r7
 80133a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a4:	4770      	bx	lr

080133a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80133a6:	b480      	push	{r7}
 80133a8:	b085      	sub	sp, #20
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133b8:	699b      	ldr	r3, [r3, #24]
 80133ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133c2:	69db      	ldr	r3, [r3, #28]
 80133c4:	68ba      	ldr	r2, [r7, #8]
 80133c6:	4013      	ands	r3, r2
 80133c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	b29b      	uxth	r3, r3
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3714      	adds	r7, #20
 80133d2:	46bd      	mov	sp, r7
 80133d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d8:	4770      	bx	lr

080133da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80133da:	b480      	push	{r7}
 80133dc:	b085      	sub	sp, #20
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	460b      	mov	r3, r1
 80133e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80133ea:	78fb      	ldrb	r3, [r7, #3]
 80133ec:	015a      	lsls	r2, r3, #5
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	4413      	add	r3, r2
 80133f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133f6:	689b      	ldr	r3, [r3, #8]
 80133f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	68ba      	ldr	r2, [r7, #8]
 8013404:	4013      	ands	r3, r2
 8013406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013408:	68bb      	ldr	r3, [r7, #8]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3714      	adds	r7, #20
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr

08013416 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013416:	b480      	push	{r7}
 8013418:	b087      	sub	sp, #28
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
 801341e:	460b      	mov	r3, r1
 8013420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801342c:	691b      	ldr	r3, [r3, #16]
 801342e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013438:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801343a:	78fb      	ldrb	r3, [r7, #3]
 801343c:	f003 030f 	and.w	r3, r3, #15
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	fa22 f303 	lsr.w	r3, r2, r3
 8013446:	01db      	lsls	r3, r3, #7
 8013448:	b2db      	uxtb	r3, r3
 801344a:	693a      	ldr	r2, [r7, #16]
 801344c:	4313      	orrs	r3, r2
 801344e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013450:	78fb      	ldrb	r3, [r7, #3]
 8013452:	015a      	lsls	r2, r3, #5
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	4413      	add	r3, r2
 8013458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801345c:	689b      	ldr	r3, [r3, #8]
 801345e:	693a      	ldr	r2, [r7, #16]
 8013460:	4013      	ands	r3, r2
 8013462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013464:	68bb      	ldr	r3, [r7, #8]
}
 8013466:	4618      	mov	r0, r3
 8013468:	371c      	adds	r7, #28
 801346a:	46bd      	mov	sp, r7
 801346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013470:	4770      	bx	lr

08013472 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013472:	b480      	push	{r7}
 8013474:	b083      	sub	sp, #12
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	695b      	ldr	r3, [r3, #20]
 801347e:	f003 0301 	and.w	r3, r3, #1
}
 8013482:	4618      	mov	r0, r3
 8013484:	370c      	adds	r7, #12
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr

0801348e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801348e:	b480      	push	{r7}
 8013490:	b085      	sub	sp, #20
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80134ac:	f023 0307 	bic.w	r3, r3, #7
 80134b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80134c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80134c6:	2300      	movs	r3, #0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3714      	adds	r7, #20
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b087      	sub	sp, #28
 80134d8:	af00      	add	r7, sp, #0
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	460b      	mov	r3, r1
 80134de:	607a      	str	r2, [r7, #4]
 80134e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	333c      	adds	r3, #60	; 0x3c
 80134ea:	3304      	adds	r3, #4
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	4a26      	ldr	r2, [pc, #152]	; (801358c <USB_EP0_OutStart+0xb8>)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d90a      	bls.n	801350e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013508:	d101      	bne.n	801350e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801350a:	2300      	movs	r3, #0
 801350c:	e037      	b.n	801357e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013514:	461a      	mov	r2, r3
 8013516:	2300      	movs	r3, #0
 8013518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013520:	691b      	ldr	r3, [r3, #16]
 8013522:	697a      	ldr	r2, [r7, #20]
 8013524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801352c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013534:	691b      	ldr	r3, [r3, #16]
 8013536:	697a      	ldr	r2, [r7, #20]
 8013538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801353c:	f043 0318 	orr.w	r3, r3, #24
 8013540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013548:	691b      	ldr	r3, [r3, #16]
 801354a:	697a      	ldr	r2, [r7, #20]
 801354c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013550:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013554:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013556:	7afb      	ldrb	r3, [r7, #11]
 8013558:	2b01      	cmp	r3, #1
 801355a:	d10f      	bne.n	801357c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013562:	461a      	mov	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	697a      	ldr	r2, [r7, #20]
 8013572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013576:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801357a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801357c:	2300      	movs	r3, #0
}
 801357e:	4618      	mov	r0, r3
 8013580:	371c      	adds	r7, #28
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	4f54300a 	.word	0x4f54300a

08013590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013590:	b480      	push	{r7}
 8013592:	b085      	sub	sp, #20
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013598:	2300      	movs	r3, #0
 801359a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	3301      	adds	r3, #1
 80135a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	4a13      	ldr	r2, [pc, #76]	; (80135f4 <USB_CoreReset+0x64>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d901      	bls.n	80135ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80135aa:	2303      	movs	r3, #3
 80135ac:	e01b      	b.n	80135e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	691b      	ldr	r3, [r3, #16]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	daf2      	bge.n	801359c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80135b6:	2300      	movs	r3, #0
 80135b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	691b      	ldr	r3, [r3, #16]
 80135be:	f043 0201 	orr.w	r2, r3, #1
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	3301      	adds	r3, #1
 80135ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	4a09      	ldr	r2, [pc, #36]	; (80135f4 <USB_CoreReset+0x64>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d901      	bls.n	80135d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80135d4:	2303      	movs	r3, #3
 80135d6:	e006      	b.n	80135e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	691b      	ldr	r3, [r3, #16]
 80135dc:	f003 0301 	and.w	r3, r3, #1
 80135e0:	2b01      	cmp	r3, #1
 80135e2:	d0f0      	beq.n	80135c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80135e4:	2300      	movs	r3, #0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3714      	adds	r7, #20
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop
 80135f4:	00030d40 	.word	0x00030d40

080135f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	460b      	mov	r3, r1
 8013602:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013604:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013608:	f002 fca2 	bl	8015f50 <USBD_static_malloc>
 801360c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d109      	bne.n	8013628 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	32b0      	adds	r2, #176	; 0xb0
 801361e:	2100      	movs	r1, #0
 8013620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013624:	2302      	movs	r3, #2
 8013626:	e0d4      	b.n	80137d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013628:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801362c:	2100      	movs	r1, #0
 801362e:	68f8      	ldr	r0, [r7, #12]
 8013630:	f002 fcd2 	bl	8015fd8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	32b0      	adds	r2, #176	; 0xb0
 801363e:	68f9      	ldr	r1, [r7, #12]
 8013640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	32b0      	adds	r2, #176	; 0xb0
 801364e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	7c1b      	ldrb	r3, [r3, #16]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d138      	bne.n	80136d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013660:	4b5e      	ldr	r3, [pc, #376]	; (80137dc <USBD_CDC_Init+0x1e4>)
 8013662:	7819      	ldrb	r1, [r3, #0]
 8013664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013668:	2202      	movs	r2, #2
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f002 fb4d 	bl	8015d0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013670:	4b5a      	ldr	r3, [pc, #360]	; (80137dc <USBD_CDC_Init+0x1e4>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	f003 020f 	and.w	r2, r3, #15
 8013678:	6879      	ldr	r1, [r7, #4]
 801367a:	4613      	mov	r3, r2
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	4413      	add	r3, r2
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	440b      	add	r3, r1
 8013684:	3324      	adds	r3, #36	; 0x24
 8013686:	2201      	movs	r2, #1
 8013688:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801368a:	4b55      	ldr	r3, [pc, #340]	; (80137e0 <USBD_CDC_Init+0x1e8>)
 801368c:	7819      	ldrb	r1, [r3, #0]
 801368e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013692:	2202      	movs	r2, #2
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f002 fb38 	bl	8015d0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801369a:	4b51      	ldr	r3, [pc, #324]	; (80137e0 <USBD_CDC_Init+0x1e8>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	f003 020f 	and.w	r2, r3, #15
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	440b      	add	r3, r1
 80136ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80136b2:	2201      	movs	r2, #1
 80136b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80136b6:	4b4b      	ldr	r3, [pc, #300]	; (80137e4 <USBD_CDC_Init+0x1ec>)
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	f003 020f 	and.w	r2, r3, #15
 80136be:	6879      	ldr	r1, [r7, #4]
 80136c0:	4613      	mov	r3, r2
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	4413      	add	r3, r2
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	440b      	add	r3, r1
 80136ca:	3326      	adds	r3, #38	; 0x26
 80136cc:	2210      	movs	r2, #16
 80136ce:	801a      	strh	r2, [r3, #0]
 80136d0:	e035      	b.n	801373e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80136d2:	4b42      	ldr	r3, [pc, #264]	; (80137dc <USBD_CDC_Init+0x1e4>)
 80136d4:	7819      	ldrb	r1, [r3, #0]
 80136d6:	2340      	movs	r3, #64	; 0x40
 80136d8:	2202      	movs	r2, #2
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f002 fb15 	bl	8015d0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80136e0:	4b3e      	ldr	r3, [pc, #248]	; (80137dc <USBD_CDC_Init+0x1e4>)
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	f003 020f 	and.w	r2, r3, #15
 80136e8:	6879      	ldr	r1, [r7, #4]
 80136ea:	4613      	mov	r3, r2
 80136ec:	009b      	lsls	r3, r3, #2
 80136ee:	4413      	add	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	440b      	add	r3, r1
 80136f4:	3324      	adds	r3, #36	; 0x24
 80136f6:	2201      	movs	r2, #1
 80136f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80136fa:	4b39      	ldr	r3, [pc, #228]	; (80137e0 <USBD_CDC_Init+0x1e8>)
 80136fc:	7819      	ldrb	r1, [r3, #0]
 80136fe:	2340      	movs	r3, #64	; 0x40
 8013700:	2202      	movs	r2, #2
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f002 fb01 	bl	8015d0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013708:	4b35      	ldr	r3, [pc, #212]	; (80137e0 <USBD_CDC_Init+0x1e8>)
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	f003 020f 	and.w	r2, r3, #15
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	4613      	mov	r3, r2
 8013714:	009b      	lsls	r3, r3, #2
 8013716:	4413      	add	r3, r2
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	440b      	add	r3, r1
 801371c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013720:	2201      	movs	r2, #1
 8013722:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013724:	4b2f      	ldr	r3, [pc, #188]	; (80137e4 <USBD_CDC_Init+0x1ec>)
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	f003 020f 	and.w	r2, r3, #15
 801372c:	6879      	ldr	r1, [r7, #4]
 801372e:	4613      	mov	r3, r2
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	4413      	add	r3, r2
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	440b      	add	r3, r1
 8013738:	3326      	adds	r3, #38	; 0x26
 801373a:	2210      	movs	r2, #16
 801373c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801373e:	4b29      	ldr	r3, [pc, #164]	; (80137e4 <USBD_CDC_Init+0x1ec>)
 8013740:	7819      	ldrb	r1, [r3, #0]
 8013742:	2308      	movs	r3, #8
 8013744:	2203      	movs	r2, #3
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f002 fadf 	bl	8015d0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801374c:	4b25      	ldr	r3, [pc, #148]	; (80137e4 <USBD_CDC_Init+0x1ec>)
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	f003 020f 	and.w	r2, r3, #15
 8013754:	6879      	ldr	r1, [r7, #4]
 8013756:	4613      	mov	r3, r2
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	4413      	add	r3, r2
 801375c:	009b      	lsls	r3, r3, #2
 801375e:	440b      	add	r3, r1
 8013760:	3324      	adds	r3, #36	; 0x24
 8013762:	2201      	movs	r2, #1
 8013764:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2200      	movs	r2, #0
 801376a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	33b0      	adds	r3, #176	; 0xb0
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4413      	add	r3, r2
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2200      	movs	r2, #0
 8013786:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2200      	movs	r2, #0
 801378e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013798:	2b00      	cmp	r3, #0
 801379a:	d101      	bne.n	80137a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801379c:	2302      	movs	r3, #2
 801379e:	e018      	b.n	80137d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	7c1b      	ldrb	r3, [r3, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10a      	bne.n	80137be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137a8:	4b0d      	ldr	r3, [pc, #52]	; (80137e0 <USBD_CDC_Init+0x1e8>)
 80137aa:	7819      	ldrb	r1, [r3, #0]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f002 fb96 	bl	8015ee8 <USBD_LL_PrepareReceive>
 80137bc:	e008      	b.n	80137d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137be:	4b08      	ldr	r3, [pc, #32]	; (80137e0 <USBD_CDC_Init+0x1e8>)
 80137c0:	7819      	ldrb	r1, [r3, #0]
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137c8:	2340      	movs	r3, #64	; 0x40
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f002 fb8c 	bl	8015ee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}
 80137da:	bf00      	nop
 80137dc:	2000019f 	.word	0x2000019f
 80137e0:	200001a0 	.word	0x200001a0
 80137e4:	200001a1 	.word	0x200001a1

080137e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	460b      	mov	r3, r1
 80137f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80137f4:	4b3a      	ldr	r3, [pc, #232]	; (80138e0 <USBD_CDC_DeInit+0xf8>)
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	4619      	mov	r1, r3
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f002 faab 	bl	8015d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013800:	4b37      	ldr	r3, [pc, #220]	; (80138e0 <USBD_CDC_DeInit+0xf8>)
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	f003 020f 	and.w	r2, r3, #15
 8013808:	6879      	ldr	r1, [r7, #4]
 801380a:	4613      	mov	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	4413      	add	r3, r2
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	440b      	add	r3, r1
 8013814:	3324      	adds	r3, #36	; 0x24
 8013816:	2200      	movs	r2, #0
 8013818:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801381a:	4b32      	ldr	r3, [pc, #200]	; (80138e4 <USBD_CDC_DeInit+0xfc>)
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	4619      	mov	r1, r3
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f002 fa98 	bl	8015d56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013826:	4b2f      	ldr	r3, [pc, #188]	; (80138e4 <USBD_CDC_DeInit+0xfc>)
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	f003 020f 	and.w	r2, r3, #15
 801382e:	6879      	ldr	r1, [r7, #4]
 8013830:	4613      	mov	r3, r2
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4413      	add	r3, r2
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	440b      	add	r3, r1
 801383a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801383e:	2200      	movs	r2, #0
 8013840:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013842:	4b29      	ldr	r3, [pc, #164]	; (80138e8 <USBD_CDC_DeInit+0x100>)
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	4619      	mov	r1, r3
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f002 fa84 	bl	8015d56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801384e:	4b26      	ldr	r3, [pc, #152]	; (80138e8 <USBD_CDC_DeInit+0x100>)
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	f003 020f 	and.w	r2, r3, #15
 8013856:	6879      	ldr	r1, [r7, #4]
 8013858:	4613      	mov	r3, r2
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	4413      	add	r3, r2
 801385e:	009b      	lsls	r3, r3, #2
 8013860:	440b      	add	r3, r1
 8013862:	3324      	adds	r3, #36	; 0x24
 8013864:	2200      	movs	r2, #0
 8013866:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013868:	4b1f      	ldr	r3, [pc, #124]	; (80138e8 <USBD_CDC_DeInit+0x100>)
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	f003 020f 	and.w	r2, r3, #15
 8013870:	6879      	ldr	r1, [r7, #4]
 8013872:	4613      	mov	r3, r2
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	4413      	add	r3, r2
 8013878:	009b      	lsls	r3, r3, #2
 801387a:	440b      	add	r3, r1
 801387c:	3326      	adds	r3, #38	; 0x26
 801387e:	2200      	movs	r2, #0
 8013880:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	32b0      	adds	r2, #176	; 0xb0
 801388c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d01f      	beq.n	80138d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	33b0      	adds	r3, #176	; 0xb0
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	4413      	add	r3, r2
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	32b0      	adds	r2, #176	; 0xb0
 80138b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138b6:	4618      	mov	r0, r3
 80138b8:	f002 fb58 	bl	8015f6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	32b0      	adds	r2, #176	; 0xb0
 80138c6:	2100      	movs	r1, #0
 80138c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2200      	movs	r2, #0
 80138d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80138d4:	2300      	movs	r3, #0
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3708      	adds	r7, #8
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	2000019f 	.word	0x2000019f
 80138e4:	200001a0 	.word	0x200001a0
 80138e8:	200001a1 	.word	0x200001a1

080138ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b086      	sub	sp, #24
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	32b0      	adds	r2, #176	; 0xb0
 8013900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013904:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013906:	2300      	movs	r3, #0
 8013908:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801390a:	2300      	movs	r3, #0
 801390c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801390e:	2300      	movs	r3, #0
 8013910:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d101      	bne.n	801391c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013918:	2303      	movs	r3, #3
 801391a:	e0bf      	b.n	8013a9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013924:	2b00      	cmp	r3, #0
 8013926:	d050      	beq.n	80139ca <USBD_CDC_Setup+0xde>
 8013928:	2b20      	cmp	r3, #32
 801392a:	f040 80af 	bne.w	8013a8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	88db      	ldrh	r3, [r3, #6]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d03a      	beq.n	80139ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	781b      	ldrb	r3, [r3, #0]
 801393a:	b25b      	sxtb	r3, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	da1b      	bge.n	8013978 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	33b0      	adds	r3, #176	; 0xb0
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	4413      	add	r3, r2
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	689b      	ldr	r3, [r3, #8]
 8013952:	683a      	ldr	r2, [r7, #0]
 8013954:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013956:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	88d2      	ldrh	r2, [r2, #6]
 801395c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	88db      	ldrh	r3, [r3, #6]
 8013962:	2b07      	cmp	r3, #7
 8013964:	bf28      	it	cs
 8013966:	2307      	movcs	r3, #7
 8013968:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	89fa      	ldrh	r2, [r7, #14]
 801396e:	4619      	mov	r1, r3
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f001 fd89 	bl	8015488 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013976:	e090      	b.n	8013a9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	785a      	ldrb	r2, [r3, #1]
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	88db      	ldrh	r3, [r3, #6]
 8013986:	2b3f      	cmp	r3, #63	; 0x3f
 8013988:	d803      	bhi.n	8013992 <USBD_CDC_Setup+0xa6>
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	88db      	ldrh	r3, [r3, #6]
 801398e:	b2da      	uxtb	r2, r3
 8013990:	e000      	b.n	8013994 <USBD_CDC_Setup+0xa8>
 8013992:	2240      	movs	r2, #64	; 0x40
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801399a:	6939      	ldr	r1, [r7, #16]
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80139a2:	461a      	mov	r2, r3
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f001 fd9b 	bl	80154e0 <USBD_CtlPrepareRx>
      break;
 80139aa:	e076      	b.n	8013a9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139b2:	687a      	ldr	r2, [r7, #4]
 80139b4:	33b0      	adds	r3, #176	; 0xb0
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	4413      	add	r3, r2
 80139ba:	685b      	ldr	r3, [r3, #4]
 80139bc:	689b      	ldr	r3, [r3, #8]
 80139be:	683a      	ldr	r2, [r7, #0]
 80139c0:	7850      	ldrb	r0, [r2, #1]
 80139c2:	2200      	movs	r2, #0
 80139c4:	6839      	ldr	r1, [r7, #0]
 80139c6:	4798      	blx	r3
      break;
 80139c8:	e067      	b.n	8013a9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	785b      	ldrb	r3, [r3, #1]
 80139ce:	2b0b      	cmp	r3, #11
 80139d0:	d851      	bhi.n	8013a76 <USBD_CDC_Setup+0x18a>
 80139d2:	a201      	add	r2, pc, #4	; (adr r2, 80139d8 <USBD_CDC_Setup+0xec>)
 80139d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139d8:	08013a09 	.word	0x08013a09
 80139dc:	08013a85 	.word	0x08013a85
 80139e0:	08013a77 	.word	0x08013a77
 80139e4:	08013a77 	.word	0x08013a77
 80139e8:	08013a77 	.word	0x08013a77
 80139ec:	08013a77 	.word	0x08013a77
 80139f0:	08013a77 	.word	0x08013a77
 80139f4:	08013a77 	.word	0x08013a77
 80139f8:	08013a77 	.word	0x08013a77
 80139fc:	08013a77 	.word	0x08013a77
 8013a00:	08013a33 	.word	0x08013a33
 8013a04:	08013a5d 	.word	0x08013a5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	2b03      	cmp	r3, #3
 8013a12:	d107      	bne.n	8013a24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013a14:	f107 030a 	add.w	r3, r7, #10
 8013a18:	2202      	movs	r2, #2
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f001 fd33 	bl	8015488 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013a22:	e032      	b.n	8013a8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013a24:	6839      	ldr	r1, [r7, #0]
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f001 fcbd 	bl	80153a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a2c:	2303      	movs	r3, #3
 8013a2e:	75fb      	strb	r3, [r7, #23]
          break;
 8013a30:	e02b      	b.n	8013a8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	d107      	bne.n	8013a4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013a3e:	f107 030d 	add.w	r3, r7, #13
 8013a42:	2201      	movs	r2, #1
 8013a44:	4619      	mov	r1, r3
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f001 fd1e 	bl	8015488 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013a4c:	e01d      	b.n	8013a8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013a4e:	6839      	ldr	r1, [r7, #0]
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f001 fca8 	bl	80153a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a56:	2303      	movs	r3, #3
 8013a58:	75fb      	strb	r3, [r7, #23]
          break;
 8013a5a:	e016      	b.n	8013a8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	2b03      	cmp	r3, #3
 8013a66:	d00f      	beq.n	8013a88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013a68:	6839      	ldr	r1, [r7, #0]
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f001 fc9b 	bl	80153a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a70:	2303      	movs	r3, #3
 8013a72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013a74:	e008      	b.n	8013a88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013a76:	6839      	ldr	r1, [r7, #0]
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f001 fc94 	bl	80153a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	75fb      	strb	r3, [r7, #23]
          break;
 8013a82:	e002      	b.n	8013a8a <USBD_CDC_Setup+0x19e>
          break;
 8013a84:	bf00      	nop
 8013a86:	e008      	b.n	8013a9a <USBD_CDC_Setup+0x1ae>
          break;
 8013a88:	bf00      	nop
      }
      break;
 8013a8a:	e006      	b.n	8013a9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f001 fc89 	bl	80153a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8013a94:	2303      	movs	r3, #3
 8013a96:	75fb      	strb	r3, [r7, #23]
      break;
 8013a98:	bf00      	nop
  }

  return (uint8_t)ret;
 8013a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3718      	adds	r7, #24
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	460b      	mov	r3, r1
 8013aae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013ab6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	32b0      	adds	r2, #176	; 0xb0
 8013ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013aca:	2303      	movs	r3, #3
 8013acc:	e065      	b.n	8013b9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	32b0      	adds	r2, #176	; 0xb0
 8013ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013adc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013ade:	78fb      	ldrb	r3, [r7, #3]
 8013ae0:	f003 020f 	and.w	r2, r3, #15
 8013ae4:	6879      	ldr	r1, [r7, #4]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	009b      	lsls	r3, r3, #2
 8013aea:	4413      	add	r3, r2
 8013aec:	009b      	lsls	r3, r3, #2
 8013aee:	440b      	add	r3, r1
 8013af0:	3318      	adds	r3, #24
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d02f      	beq.n	8013b58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013af8:	78fb      	ldrb	r3, [r7, #3]
 8013afa:	f003 020f 	and.w	r2, r3, #15
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	4613      	mov	r3, r2
 8013b02:	009b      	lsls	r3, r3, #2
 8013b04:	4413      	add	r3, r2
 8013b06:	009b      	lsls	r3, r3, #2
 8013b08:	440b      	add	r3, r1
 8013b0a:	3318      	adds	r3, #24
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	78fb      	ldrb	r3, [r7, #3]
 8013b10:	f003 010f 	and.w	r1, r3, #15
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	460b      	mov	r3, r1
 8013b18:	00db      	lsls	r3, r3, #3
 8013b1a:	440b      	add	r3, r1
 8013b1c:	009b      	lsls	r3, r3, #2
 8013b1e:	4403      	add	r3, r0
 8013b20:	3348      	adds	r3, #72	; 0x48
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	fbb2 f1f3 	udiv	r1, r2, r3
 8013b28:	fb01 f303 	mul.w	r3, r1, r3
 8013b2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d112      	bne.n	8013b58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013b32:	78fb      	ldrb	r3, [r7, #3]
 8013b34:	f003 020f 	and.w	r2, r3, #15
 8013b38:	6879      	ldr	r1, [r7, #4]
 8013b3a:	4613      	mov	r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	4413      	add	r3, r2
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	440b      	add	r3, r1
 8013b44:	3318      	adds	r3, #24
 8013b46:	2200      	movs	r2, #0
 8013b48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013b4a:	78f9      	ldrb	r1, [r7, #3]
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	2200      	movs	r2, #0
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f002 f9a8 	bl	8015ea6 <USBD_LL_Transmit>
 8013b56:	e01f      	b.n	8013b98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	33b0      	adds	r3, #176	; 0xb0
 8013b6a:	009b      	lsls	r3, r3, #2
 8013b6c:	4413      	add	r3, r2
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	691b      	ldr	r3, [r3, #16]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d010      	beq.n	8013b98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	33b0      	adds	r3, #176	; 0xb0
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	4413      	add	r3, r2
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	691b      	ldr	r3, [r3, #16]
 8013b88:	68ba      	ldr	r2, [r7, #8]
 8013b8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013b94:	78fa      	ldrb	r2, [r7, #3]
 8013b96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b084      	sub	sp, #16
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	460b      	mov	r3, r1
 8013bac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	32b0      	adds	r2, #176	; 0xb0
 8013bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	32b0      	adds	r2, #176	; 0xb0
 8013bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d101      	bne.n	8013bd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013bd0:	2303      	movs	r3, #3
 8013bd2:	e01a      	b.n	8013c0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013bd4:	78fb      	ldrb	r3, [r7, #3]
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f002 f9a6 	bl	8015f2a <USBD_LL_GetRxDataSize>
 8013bde:	4602      	mov	r2, r0
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	33b0      	adds	r3, #176	; 0xb0
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	4413      	add	r3, r2
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013c04:	4611      	mov	r1, r2
 8013c06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013c08:	2300      	movs	r3, #0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3710      	adds	r7, #16
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}

08013c12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b084      	sub	sp, #16
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	32b0      	adds	r2, #176	; 0xb0
 8013c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d101      	bne.n	8013c34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013c30:	2303      	movs	r3, #3
 8013c32:	e025      	b.n	8013c80 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	33b0      	adds	r3, #176	; 0xb0
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	4413      	add	r3, r2
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d01a      	beq.n	8013c7e <USBD_CDC_EP0_RxReady+0x6c>
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013c4e:	2bff      	cmp	r3, #255	; 0xff
 8013c50:	d015      	beq.n	8013c7e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	33b0      	adds	r3, #176	; 0xb0
 8013c5c:	009b      	lsls	r3, r3, #2
 8013c5e:	4413      	add	r3, r2
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013c6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013c6c:	68fa      	ldr	r2, [r7, #12]
 8013c6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013c72:	b292      	uxth	r2, r2
 8013c74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	22ff      	movs	r2, #255	; 0xff
 8013c7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013c7e:	2300      	movs	r3, #0
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	3710      	adds	r7, #16
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}

08013c88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b086      	sub	sp, #24
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013c90:	2182      	movs	r1, #130	; 0x82
 8013c92:	4818      	ldr	r0, [pc, #96]	; (8013cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013c94:	f000 fd4f 	bl	8014736 <USBD_GetEpDesc>
 8013c98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013c9a:	2101      	movs	r1, #1
 8013c9c:	4815      	ldr	r0, [pc, #84]	; (8013cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013c9e:	f000 fd4a 	bl	8014736 <USBD_GetEpDesc>
 8013ca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013ca4:	2181      	movs	r1, #129	; 0x81
 8013ca6:	4813      	ldr	r0, [pc, #76]	; (8013cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013ca8:	f000 fd45 	bl	8014736 <USBD_GetEpDesc>
 8013cac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d002      	beq.n	8013cba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	2210      	movs	r2, #16
 8013cb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d006      	beq.n	8013cce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013cc8:	711a      	strb	r2, [r3, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d006      	beq.n	8013ce2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013cdc:	711a      	strb	r2, [r3, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2243      	movs	r2, #67	; 0x43
 8013ce6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013ce8:	4b02      	ldr	r3, [pc, #8]	; (8013cf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3718      	adds	r7, #24
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	2000015c 	.word	0x2000015c

08013cf8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b086      	sub	sp, #24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013d00:	2182      	movs	r1, #130	; 0x82
 8013d02:	4818      	ldr	r0, [pc, #96]	; (8013d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013d04:	f000 fd17 	bl	8014736 <USBD_GetEpDesc>
 8013d08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013d0a:	2101      	movs	r1, #1
 8013d0c:	4815      	ldr	r0, [pc, #84]	; (8013d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013d0e:	f000 fd12 	bl	8014736 <USBD_GetEpDesc>
 8013d12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013d14:	2181      	movs	r1, #129	; 0x81
 8013d16:	4813      	ldr	r0, [pc, #76]	; (8013d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013d18:	f000 fd0d 	bl	8014736 <USBD_GetEpDesc>
 8013d1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d002      	beq.n	8013d2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	2210      	movs	r2, #16
 8013d28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d006      	beq.n	8013d3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	2200      	movs	r2, #0
 8013d34:	711a      	strb	r2, [r3, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	f042 0202 	orr.w	r2, r2, #2
 8013d3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d006      	beq.n	8013d52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2200      	movs	r2, #0
 8013d48:	711a      	strb	r2, [r3, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f042 0202 	orr.w	r2, r2, #2
 8013d50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2243      	movs	r2, #67	; 0x43
 8013d56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013d58:	4b02      	ldr	r3, [pc, #8]	; (8013d64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3718      	adds	r7, #24
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	2000015c 	.word	0x2000015c

08013d68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b086      	sub	sp, #24
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013d70:	2182      	movs	r1, #130	; 0x82
 8013d72:	4818      	ldr	r0, [pc, #96]	; (8013dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013d74:	f000 fcdf 	bl	8014736 <USBD_GetEpDesc>
 8013d78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013d7a:	2101      	movs	r1, #1
 8013d7c:	4815      	ldr	r0, [pc, #84]	; (8013dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013d7e:	f000 fcda 	bl	8014736 <USBD_GetEpDesc>
 8013d82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013d84:	2181      	movs	r1, #129	; 0x81
 8013d86:	4813      	ldr	r0, [pc, #76]	; (8013dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013d88:	f000 fcd5 	bl	8014736 <USBD_GetEpDesc>
 8013d8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d002      	beq.n	8013d9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	2210      	movs	r2, #16
 8013d98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d006      	beq.n	8013dae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013da8:	711a      	strb	r2, [r3, #4]
 8013daa:	2200      	movs	r2, #0
 8013dac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d006      	beq.n	8013dc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	2200      	movs	r2, #0
 8013db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013dbc:	711a      	strb	r2, [r3, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2243      	movs	r2, #67	; 0x43
 8013dc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013dc8:	4b02      	ldr	r3, [pc, #8]	; (8013dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3718      	adds	r7, #24
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	2000015c 	.word	0x2000015c

08013dd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	220a      	movs	r2, #10
 8013de4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013de6:	4b03      	ldr	r3, [pc, #12]	; (8013df4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr
 8013df4:	20000118 	.word	0x20000118

08013df8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d101      	bne.n	8013e0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013e08:	2303      	movs	r3, #3
 8013e0a:	e009      	b.n	8013e20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	33b0      	adds	r3, #176	; 0xb0
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	4413      	add	r3, r2
 8013e1a:	683a      	ldr	r2, [r7, #0]
 8013e1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013e1e:	2300      	movs	r3, #0
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	370c      	adds	r7, #12
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr

08013e2c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b087      	sub	sp, #28
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	60f8      	str	r0, [r7, #12]
 8013e34:	60b9      	str	r1, [r7, #8]
 8013e36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	32b0      	adds	r2, #176	; 0xb0
 8013e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e46:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d101      	bne.n	8013e52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013e4e:	2303      	movs	r3, #3
 8013e50:	e008      	b.n	8013e64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013e62:	2300      	movs	r3, #0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	371c      	adds	r7, #28
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013e70:	b480      	push	{r7}
 8013e72:	b085      	sub	sp, #20
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	32b0      	adds	r2, #176	; 0xb0
 8013e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d101      	bne.n	8013e94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013e90:	2303      	movs	r3, #3
 8013e92:	e004      	b.n	8013e9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	683a      	ldr	r2, [r7, #0]
 8013e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013e9c:	2300      	movs	r3, #0
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3714      	adds	r7, #20
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr
	...

08013eac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	32b0      	adds	r2, #176	; 0xb0
 8013ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	32b0      	adds	r2, #176	; 0xb0
 8013ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d101      	bne.n	8013ede <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013eda:	2303      	movs	r3, #3
 8013edc:	e025      	b.n	8013f2a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d11f      	bne.n	8013f28 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	2201      	movs	r2, #1
 8013eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013ef0:	4b10      	ldr	r3, [pc, #64]	; (8013f34 <USBD_CDC_TransmitPacket+0x88>)
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	f003 020f 	and.w	r2, r3, #15
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	4613      	mov	r3, r2
 8013f02:	009b      	lsls	r3, r3, #2
 8013f04:	4413      	add	r3, r2
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	4403      	add	r3, r0
 8013f0a:	3318      	adds	r3, #24
 8013f0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013f0e:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <USBD_CDC_TransmitPacket+0x88>)
 8013f10:	7819      	ldrb	r1, [r3, #0]
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	f001 ffc1 	bl	8015ea6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013f24:	2300      	movs	r3, #0
 8013f26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3710      	adds	r7, #16
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	2000019f 	.word	0x2000019f

08013f38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	32b0      	adds	r2, #176	; 0xb0
 8013f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	32b0      	adds	r2, #176	; 0xb0
 8013f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d101      	bne.n	8013f66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013f62:	2303      	movs	r3, #3
 8013f64:	e018      	b.n	8013f98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	7c1b      	ldrb	r3, [r3, #16]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10a      	bne.n	8013f84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013f6e:	4b0c      	ldr	r3, [pc, #48]	; (8013fa0 <USBD_CDC_ReceivePacket+0x68>)
 8013f70:	7819      	ldrb	r1, [r3, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f001 ffb3 	bl	8015ee8 <USBD_LL_PrepareReceive>
 8013f82:	e008      	b.n	8013f96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013f84:	4b06      	ldr	r3, [pc, #24]	; (8013fa0 <USBD_CDC_ReceivePacket+0x68>)
 8013f86:	7819      	ldrb	r1, [r3, #0]
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f8e:	2340      	movs	r3, #64	; 0x40
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f001 ffa9 	bl	8015ee8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013f96:	2300      	movs	r3, #0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	200001a0 	.word	0x200001a0

08013fa4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b086      	sub	sp, #24
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	60b9      	str	r1, [r7, #8]
 8013fae:	4613      	mov	r3, r2
 8013fb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d101      	bne.n	8013fbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013fb8:	2303      	movs	r3, #3
 8013fba:	e01f      	b.n	8013ffc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d003      	beq.n	8013fe2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	68ba      	ldr	r2, [r7, #8]
 8013fde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	79fa      	ldrb	r2, [r7, #7]
 8013fee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f001 fe23 	bl	8015c3c <USBD_LL_Init>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3718      	adds	r7, #24
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801400e:	2300      	movs	r3, #0
 8014010:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d101      	bne.n	801401c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014018:	2303      	movs	r3, #3
 801401a:	e025      	b.n	8014068 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	683a      	ldr	r2, [r7, #0]
 8014020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	32ae      	adds	r2, #174	; 0xae
 801402e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00f      	beq.n	8014058 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	32ae      	adds	r2, #174	; 0xae
 8014042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014048:	f107 020e 	add.w	r2, r7, #14
 801404c:	4610      	mov	r0, r2
 801404e:	4798      	blx	r3
 8014050:	4602      	mov	r2, r0
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801405e:	1c5a      	adds	r2, r3, #1
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014066:	2300      	movs	r3, #0
}
 8014068:	4618      	mov	r0, r3
 801406a:	3710      	adds	r7, #16
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f001 fe2b 	bl	8015cd4 <USBD_LL_Start>
 801407e:	4603      	mov	r3, r0
}
 8014080:	4618      	mov	r0, r3
 8014082:	3708      	adds	r7, #8
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}

08014088 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014088:	b480      	push	{r7}
 801408a:	b083      	sub	sp, #12
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014090:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014092:	4618      	mov	r0, r3
 8014094:	370c      	adds	r7, #12
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr

0801409e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801409e:	b580      	push	{r7, lr}
 80140a0:	b084      	sub	sp, #16
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
 80140a6:	460b      	mov	r3, r1
 80140a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80140aa:	2300      	movs	r3, #0
 80140ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d009      	beq.n	80140cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	78fa      	ldrb	r2, [r7, #3]
 80140c2:	4611      	mov	r1, r2
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	4798      	blx	r3
 80140c8:	4603      	mov	r3, r0
 80140ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80140cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3710      	adds	r7, #16
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80140d6:	b580      	push	{r7, lr}
 80140d8:	b084      	sub	sp, #16
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
 80140de:	460b      	mov	r3, r1
 80140e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80140e2:	2300      	movs	r3, #0
 80140e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	78fa      	ldrb	r2, [r7, #3]
 80140f0:	4611      	mov	r1, r2
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	4798      	blx	r3
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d001      	beq.n	8014100 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80140fc:	2303      	movs	r3, #3
 80140fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014100:	7bfb      	ldrb	r3, [r7, #15]
}
 8014102:	4618      	mov	r0, r3
 8014104:	3710      	adds	r7, #16
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801410a:	b580      	push	{r7, lr}
 801410c:	b084      	sub	sp, #16
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
 8014112:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801411a:	6839      	ldr	r1, [r7, #0]
 801411c:	4618      	mov	r0, r3
 801411e:	f001 f908 	bl	8015332 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2201      	movs	r2, #1
 8014126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014130:	461a      	mov	r2, r3
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801413e:	f003 031f 	and.w	r3, r3, #31
 8014142:	2b02      	cmp	r3, #2
 8014144:	d01a      	beq.n	801417c <USBD_LL_SetupStage+0x72>
 8014146:	2b02      	cmp	r3, #2
 8014148:	d822      	bhi.n	8014190 <USBD_LL_SetupStage+0x86>
 801414a:	2b00      	cmp	r3, #0
 801414c:	d002      	beq.n	8014154 <USBD_LL_SetupStage+0x4a>
 801414e:	2b01      	cmp	r3, #1
 8014150:	d00a      	beq.n	8014168 <USBD_LL_SetupStage+0x5e>
 8014152:	e01d      	b.n	8014190 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801415a:	4619      	mov	r1, r3
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 fb5f 	bl	8014820 <USBD_StdDevReq>
 8014162:	4603      	mov	r3, r0
 8014164:	73fb      	strb	r3, [r7, #15]
      break;
 8014166:	e020      	b.n	80141aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801416e:	4619      	mov	r1, r3
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 fbc7 	bl	8014904 <USBD_StdItfReq>
 8014176:	4603      	mov	r3, r0
 8014178:	73fb      	strb	r3, [r7, #15]
      break;
 801417a:	e016      	b.n	80141aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014182:	4619      	mov	r1, r3
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f000 fc29 	bl	80149dc <USBD_StdEPReq>
 801418a:	4603      	mov	r3, r0
 801418c:	73fb      	strb	r3, [r7, #15]
      break;
 801418e:	e00c      	b.n	80141aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801419a:	b2db      	uxtb	r3, r3
 801419c:	4619      	mov	r1, r3
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f001 fdf8 	bl	8015d94 <USBD_LL_StallEP>
 80141a4:	4603      	mov	r3, r0
 80141a6:	73fb      	strb	r3, [r7, #15]
      break;
 80141a8:	bf00      	nop
  }

  return ret;
 80141aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	3710      	adds	r7, #16
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}

080141b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b086      	sub	sp, #24
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	460b      	mov	r3, r1
 80141be:	607a      	str	r2, [r7, #4]
 80141c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80141c2:	2300      	movs	r3, #0
 80141c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80141c6:	7afb      	ldrb	r3, [r7, #11]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d16e      	bne.n	80142aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80141d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80141da:	2b03      	cmp	r3, #3
 80141dc:	f040 8098 	bne.w	8014310 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	689a      	ldr	r2, [r3, #8]
 80141e4:	693b      	ldr	r3, [r7, #16]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d913      	bls.n	8014214 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	689a      	ldr	r2, [r3, #8]
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	68db      	ldr	r3, [r3, #12]
 80141f4:	1ad2      	subs	r2, r2, r3
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	68da      	ldr	r2, [r3, #12]
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	689b      	ldr	r3, [r3, #8]
 8014202:	4293      	cmp	r3, r2
 8014204:	bf28      	it	cs
 8014206:	4613      	movcs	r3, r2
 8014208:	461a      	mov	r2, r3
 801420a:	6879      	ldr	r1, [r7, #4]
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f001 f984 	bl	801551a <USBD_CtlContinueRx>
 8014212:	e07d      	b.n	8014310 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801421a:	f003 031f 	and.w	r3, r3, #31
 801421e:	2b02      	cmp	r3, #2
 8014220:	d014      	beq.n	801424c <USBD_LL_DataOutStage+0x98>
 8014222:	2b02      	cmp	r3, #2
 8014224:	d81d      	bhi.n	8014262 <USBD_LL_DataOutStage+0xae>
 8014226:	2b00      	cmp	r3, #0
 8014228:	d002      	beq.n	8014230 <USBD_LL_DataOutStage+0x7c>
 801422a:	2b01      	cmp	r3, #1
 801422c:	d003      	beq.n	8014236 <USBD_LL_DataOutStage+0x82>
 801422e:	e018      	b.n	8014262 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014230:	2300      	movs	r3, #0
 8014232:	75bb      	strb	r3, [r7, #22]
            break;
 8014234:	e018      	b.n	8014268 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801423c:	b2db      	uxtb	r3, r3
 801423e:	4619      	mov	r1, r3
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	f000 fa5e 	bl	8014702 <USBD_CoreFindIF>
 8014246:	4603      	mov	r3, r0
 8014248:	75bb      	strb	r3, [r7, #22]
            break;
 801424a:	e00d      	b.n	8014268 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014252:	b2db      	uxtb	r3, r3
 8014254:	4619      	mov	r1, r3
 8014256:	68f8      	ldr	r0, [r7, #12]
 8014258:	f000 fa60 	bl	801471c <USBD_CoreFindEP>
 801425c:	4603      	mov	r3, r0
 801425e:	75bb      	strb	r3, [r7, #22]
            break;
 8014260:	e002      	b.n	8014268 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014262:	2300      	movs	r3, #0
 8014264:	75bb      	strb	r3, [r7, #22]
            break;
 8014266:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014268:	7dbb      	ldrb	r3, [r7, #22]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d119      	bne.n	80142a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014274:	b2db      	uxtb	r3, r3
 8014276:	2b03      	cmp	r3, #3
 8014278:	d113      	bne.n	80142a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801427a:	7dba      	ldrb	r2, [r7, #22]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	32ae      	adds	r2, #174	; 0xae
 8014280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014284:	691b      	ldr	r3, [r3, #16]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d00b      	beq.n	80142a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801428a:	7dba      	ldrb	r2, [r7, #22]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014292:	7dba      	ldrb	r2, [r7, #22]
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	32ae      	adds	r2, #174	; 0xae
 8014298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801429c:	691b      	ldr	r3, [r3, #16]
 801429e:	68f8      	ldr	r0, [r7, #12]
 80142a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80142a2:	68f8      	ldr	r0, [r7, #12]
 80142a4:	f001 f94a 	bl	801553c <USBD_CtlSendStatus>
 80142a8:	e032      	b.n	8014310 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80142aa:	7afb      	ldrb	r3, [r7, #11]
 80142ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	4619      	mov	r1, r3
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f000 fa31 	bl	801471c <USBD_CoreFindEP>
 80142ba:	4603      	mov	r3, r0
 80142bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80142be:	7dbb      	ldrb	r3, [r7, #22]
 80142c0:	2bff      	cmp	r3, #255	; 0xff
 80142c2:	d025      	beq.n	8014310 <USBD_LL_DataOutStage+0x15c>
 80142c4:	7dbb      	ldrb	r3, [r7, #22]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d122      	bne.n	8014310 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142d0:	b2db      	uxtb	r3, r3
 80142d2:	2b03      	cmp	r3, #3
 80142d4:	d117      	bne.n	8014306 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80142d6:	7dba      	ldrb	r2, [r7, #22]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	32ae      	adds	r2, #174	; 0xae
 80142dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142e0:	699b      	ldr	r3, [r3, #24]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d00f      	beq.n	8014306 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80142e6:	7dba      	ldrb	r2, [r7, #22]
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80142ee:	7dba      	ldrb	r2, [r7, #22]
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	32ae      	adds	r2, #174	; 0xae
 80142f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142f8:	699b      	ldr	r3, [r3, #24]
 80142fa:	7afa      	ldrb	r2, [r7, #11]
 80142fc:	4611      	mov	r1, r2
 80142fe:	68f8      	ldr	r0, [r7, #12]
 8014300:	4798      	blx	r3
 8014302:	4603      	mov	r3, r0
 8014304:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014306:	7dfb      	ldrb	r3, [r7, #23]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d001      	beq.n	8014310 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801430c:	7dfb      	ldrb	r3, [r7, #23]
 801430e:	e000      	b.n	8014312 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014310:	2300      	movs	r3, #0
}
 8014312:	4618      	mov	r0, r3
 8014314:	3718      	adds	r7, #24
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b086      	sub	sp, #24
 801431e:	af00      	add	r7, sp, #0
 8014320:	60f8      	str	r0, [r7, #12]
 8014322:	460b      	mov	r3, r1
 8014324:	607a      	str	r2, [r7, #4]
 8014326:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014328:	7afb      	ldrb	r3, [r7, #11]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d16f      	bne.n	801440e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	3314      	adds	r3, #20
 8014332:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801433a:	2b02      	cmp	r3, #2
 801433c:	d15a      	bne.n	80143f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	689a      	ldr	r2, [r3, #8]
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	68db      	ldr	r3, [r3, #12]
 8014346:	429a      	cmp	r2, r3
 8014348:	d914      	bls.n	8014374 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	689a      	ldr	r2, [r3, #8]
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	68db      	ldr	r3, [r3, #12]
 8014352:	1ad2      	subs	r2, r2, r3
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	689b      	ldr	r3, [r3, #8]
 801435c:	461a      	mov	r2, r3
 801435e:	6879      	ldr	r1, [r7, #4]
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	f001 f8ac 	bl	80154be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014366:	2300      	movs	r3, #0
 8014368:	2200      	movs	r2, #0
 801436a:	2100      	movs	r1, #0
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f001 fdbb 	bl	8015ee8 <USBD_LL_PrepareReceive>
 8014372:	e03f      	b.n	80143f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	68da      	ldr	r2, [r3, #12]
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	689b      	ldr	r3, [r3, #8]
 801437c:	429a      	cmp	r2, r3
 801437e:	d11c      	bne.n	80143ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	685a      	ldr	r2, [r3, #4]
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014388:	429a      	cmp	r2, r3
 801438a:	d316      	bcc.n	80143ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	685a      	ldr	r2, [r3, #4]
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014396:	429a      	cmp	r2, r3
 8014398:	d20f      	bcs.n	80143ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801439a:	2200      	movs	r2, #0
 801439c:	2100      	movs	r1, #0
 801439e:	68f8      	ldr	r0, [r7, #12]
 80143a0:	f001 f88d 	bl	80154be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2200      	movs	r2, #0
 80143a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143ac:	2300      	movs	r3, #0
 80143ae:	2200      	movs	r2, #0
 80143b0:	2100      	movs	r1, #0
 80143b2:	68f8      	ldr	r0, [r7, #12]
 80143b4:	f001 fd98 	bl	8015ee8 <USBD_LL_PrepareReceive>
 80143b8:	e01c      	b.n	80143f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	2b03      	cmp	r3, #3
 80143c4:	d10f      	bne.n	80143e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d009      	beq.n	80143e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	2200      	movs	r2, #0
 80143d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143e0:	68db      	ldr	r3, [r3, #12]
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80143e6:	2180      	movs	r1, #128	; 0x80
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f001 fcd3 	bl	8015d94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f001 f8b7 	bl	8015562 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d03a      	beq.n	8014474 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80143fe:	68f8      	ldr	r0, [r7, #12]
 8014400:	f7ff fe42 	bl	8014088 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2200      	movs	r2, #0
 8014408:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801440c:	e032      	b.n	8014474 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801440e:	7afb      	ldrb	r3, [r7, #11]
 8014410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014414:	b2db      	uxtb	r3, r3
 8014416:	4619      	mov	r1, r3
 8014418:	68f8      	ldr	r0, [r7, #12]
 801441a:	f000 f97f 	bl	801471c <USBD_CoreFindEP>
 801441e:	4603      	mov	r3, r0
 8014420:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014422:	7dfb      	ldrb	r3, [r7, #23]
 8014424:	2bff      	cmp	r3, #255	; 0xff
 8014426:	d025      	beq.n	8014474 <USBD_LL_DataInStage+0x15a>
 8014428:	7dfb      	ldrb	r3, [r7, #23]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d122      	bne.n	8014474 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014434:	b2db      	uxtb	r3, r3
 8014436:	2b03      	cmp	r3, #3
 8014438:	d11c      	bne.n	8014474 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801443a:	7dfa      	ldrb	r2, [r7, #23]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	32ae      	adds	r2, #174	; 0xae
 8014440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014444:	695b      	ldr	r3, [r3, #20]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d014      	beq.n	8014474 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801444a:	7dfa      	ldrb	r2, [r7, #23]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014452:	7dfa      	ldrb	r2, [r7, #23]
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	32ae      	adds	r2, #174	; 0xae
 8014458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801445c:	695b      	ldr	r3, [r3, #20]
 801445e:	7afa      	ldrb	r2, [r7, #11]
 8014460:	4611      	mov	r1, r2
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	4798      	blx	r3
 8014466:	4603      	mov	r3, r0
 8014468:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801446a:	7dbb      	ldrb	r3, [r7, #22]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d001      	beq.n	8014474 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014470:	7dbb      	ldrb	r3, [r7, #22]
 8014472:	e000      	b.n	8014476 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3718      	adds	r7, #24
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}

0801447e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801447e:	b580      	push	{r7, lr}
 8014480:	b084      	sub	sp, #16
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014486:	2300      	movs	r3, #0
 8014488:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2201      	movs	r2, #1
 801448e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2200      	movs	r2, #0
 8014496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2200      	movs	r2, #0
 801449e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2200      	movs	r2, #0
 80144a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d014      	beq.n	80144e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00e      	beq.n	80144e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	6852      	ldr	r2, [r2, #4]
 80144d2:	b2d2      	uxtb	r2, r2
 80144d4:	4611      	mov	r1, r2
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	4798      	blx	r3
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d001      	beq.n	80144e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80144e0:	2303      	movs	r3, #3
 80144e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80144e4:	2340      	movs	r3, #64	; 0x40
 80144e6:	2200      	movs	r2, #0
 80144e8:	2100      	movs	r1, #0
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f001 fc0d 	bl	8015d0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2201      	movs	r2, #1
 80144f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2240      	movs	r2, #64	; 0x40
 80144fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014500:	2340      	movs	r3, #64	; 0x40
 8014502:	2200      	movs	r2, #0
 8014504:	2180      	movs	r1, #128	; 0x80
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f001 fbff 	bl	8015d0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2201      	movs	r2, #1
 8014510:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2240      	movs	r2, #64	; 0x40
 8014516:	621a      	str	r2, [r3, #32]

  return ret;
 8014518:	7bfb      	ldrb	r3, [r7, #15]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3710      	adds	r7, #16
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}

08014522 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014522:	b480      	push	{r7}
 8014524:	b083      	sub	sp, #12
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
 801452a:	460b      	mov	r3, r1
 801452c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	78fa      	ldrb	r2, [r7, #3]
 8014532:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014534:	2300      	movs	r3, #0
}
 8014536:	4618      	mov	r0, r3
 8014538:	370c      	adds	r7, #12
 801453a:	46bd      	mov	sp, r7
 801453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014540:	4770      	bx	lr

08014542 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014542:	b480      	push	{r7}
 8014544:	b083      	sub	sp, #12
 8014546:	af00      	add	r7, sp, #0
 8014548:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014550:	b2da      	uxtb	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2204      	movs	r2, #4
 801455c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014560:	2300      	movs	r3, #0
}
 8014562:	4618      	mov	r0, r3
 8014564:	370c      	adds	r7, #12
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr

0801456e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801456e:	b480      	push	{r7}
 8014570:	b083      	sub	sp, #12
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801457c:	b2db      	uxtb	r3, r3
 801457e:	2b04      	cmp	r3, #4
 8014580:	d106      	bne.n	8014590 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014588:	b2da      	uxtb	r2, r3
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014590:	2300      	movs	r3, #0
}
 8014592:	4618      	mov	r0, r3
 8014594:	370c      	adds	r7, #12
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr

0801459e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145ac:	b2db      	uxtb	r3, r3
 80145ae:	2b03      	cmp	r3, #3
 80145b0:	d110      	bne.n	80145d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d00b      	beq.n	80145d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145c2:	69db      	ldr	r3, [r3, #28]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d005      	beq.n	80145d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145ce:	69db      	ldr	r3, [r3, #28]
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80145d4:	2300      	movs	r3, #0
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3708      	adds	r7, #8
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}

080145de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80145de:	b580      	push	{r7, lr}
 80145e0:	b082      	sub	sp, #8
 80145e2:	af00      	add	r7, sp, #0
 80145e4:	6078      	str	r0, [r7, #4]
 80145e6:	460b      	mov	r3, r1
 80145e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	32ae      	adds	r2, #174	; 0xae
 80145f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d101      	bne.n	8014600 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80145fc:	2303      	movs	r3, #3
 80145fe:	e01c      	b.n	801463a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b03      	cmp	r3, #3
 801460a:	d115      	bne.n	8014638 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	32ae      	adds	r2, #174	; 0xae
 8014616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801461a:	6a1b      	ldr	r3, [r3, #32]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d00b      	beq.n	8014638 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	32ae      	adds	r2, #174	; 0xae
 801462a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801462e:	6a1b      	ldr	r3, [r3, #32]
 8014630:	78fa      	ldrb	r2, [r7, #3]
 8014632:	4611      	mov	r1, r2
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014638:	2300      	movs	r3, #0
}
 801463a:	4618      	mov	r0, r3
 801463c:	3708      	adds	r7, #8
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}

08014642 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014642:	b580      	push	{r7, lr}
 8014644:	b082      	sub	sp, #8
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
 801464a:	460b      	mov	r3, r1
 801464c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	32ae      	adds	r2, #174	; 0xae
 8014658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014660:	2303      	movs	r3, #3
 8014662:	e01c      	b.n	801469e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801466a:	b2db      	uxtb	r3, r3
 801466c:	2b03      	cmp	r3, #3
 801466e:	d115      	bne.n	801469c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	32ae      	adds	r2, #174	; 0xae
 801467a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014680:	2b00      	cmp	r3, #0
 8014682:	d00b      	beq.n	801469c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	32ae      	adds	r2, #174	; 0xae
 801468e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014694:	78fa      	ldrb	r2, [r7, #3]
 8014696:	4611      	mov	r1, r2
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3708      	adds	r7, #8
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80146a6:	b480      	push	{r7}
 80146a8:	b083      	sub	sp, #12
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80146ae:	2300      	movs	r3, #0
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	370c      	adds	r7, #12
 80146b4:	46bd      	mov	sp, r7
 80146b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ba:	4770      	bx	lr

080146bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80146c4:	2300      	movs	r3, #0
 80146c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2201      	movs	r2, #1
 80146cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d00e      	beq.n	80146f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146e0:	685b      	ldr	r3, [r3, #4]
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	6852      	ldr	r2, [r2, #4]
 80146e6:	b2d2      	uxtb	r2, r2
 80146e8:	4611      	mov	r1, r2
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	4798      	blx	r3
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d001      	beq.n	80146f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80146f4:	2303      	movs	r3, #3
 80146f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80146f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3710      	adds	r7, #16
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}

08014702 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014702:	b480      	push	{r7}
 8014704:	b083      	sub	sp, #12
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
 801470a:	460b      	mov	r3, r1
 801470c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801470e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014710:	4618      	mov	r0, r3
 8014712:	370c      	adds	r7, #12
 8014714:	46bd      	mov	sp, r7
 8014716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471a:	4770      	bx	lr

0801471c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801471c:	b480      	push	{r7}
 801471e:	b083      	sub	sp, #12
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	460b      	mov	r3, r1
 8014726:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014728:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801472a:	4618      	mov	r0, r3
 801472c:	370c      	adds	r7, #12
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr

08014736 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014736:	b580      	push	{r7, lr}
 8014738:	b086      	sub	sp, #24
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
 801473e:	460b      	mov	r3, r1
 8014740:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801474a:	2300      	movs	r3, #0
 801474c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	885b      	ldrh	r3, [r3, #2]
 8014752:	b29a      	uxth	r2, r3
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	b29b      	uxth	r3, r3
 801475a:	429a      	cmp	r2, r3
 801475c:	d920      	bls.n	80147a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	b29b      	uxth	r3, r3
 8014764:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014766:	e013      	b.n	8014790 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014768:	f107 030a 	add.w	r3, r7, #10
 801476c:	4619      	mov	r1, r3
 801476e:	6978      	ldr	r0, [r7, #20]
 8014770:	f000 f81b 	bl	80147aa <USBD_GetNextDesc>
 8014774:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	785b      	ldrb	r3, [r3, #1]
 801477a:	2b05      	cmp	r3, #5
 801477c:	d108      	bne.n	8014790 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	789b      	ldrb	r3, [r3, #2]
 8014786:	78fa      	ldrb	r2, [r7, #3]
 8014788:	429a      	cmp	r2, r3
 801478a:	d008      	beq.n	801479e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801478c:	2300      	movs	r3, #0
 801478e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	885b      	ldrh	r3, [r3, #2]
 8014794:	b29a      	uxth	r2, r3
 8014796:	897b      	ldrh	r3, [r7, #10]
 8014798:	429a      	cmp	r2, r3
 801479a:	d8e5      	bhi.n	8014768 <USBD_GetEpDesc+0x32>
 801479c:	e000      	b.n	80147a0 <USBD_GetEpDesc+0x6a>
          break;
 801479e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80147a0:	693b      	ldr	r3, [r7, #16]
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3718      	adds	r7, #24
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80147aa:	b480      	push	{r7}
 80147ac:	b085      	sub	sp, #20
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
 80147b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	881a      	ldrh	r2, [r3, #0]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	4413      	add	r3, r2
 80147c4:	b29a      	uxth	r2, r3
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	461a      	mov	r2, r3
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	4413      	add	r3, r2
 80147d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80147d6:	68fb      	ldr	r3, [r7, #12]
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3714      	adds	r7, #20
 80147dc:	46bd      	mov	sp, r7
 80147de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e2:	4770      	bx	lr

080147e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b087      	sub	sp, #28
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	3301      	adds	r3, #1
 80147fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014802:	8a3b      	ldrh	r3, [r7, #16]
 8014804:	021b      	lsls	r3, r3, #8
 8014806:	b21a      	sxth	r2, r3
 8014808:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801480c:	4313      	orrs	r3, r2
 801480e:	b21b      	sxth	r3, r3
 8014810:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014812:	89fb      	ldrh	r3, [r7, #14]
}
 8014814:	4618      	mov	r0, r3
 8014816:	371c      	adds	r7, #28
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr

08014820 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
 8014828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801482a:	2300      	movs	r3, #0
 801482c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014836:	2b40      	cmp	r3, #64	; 0x40
 8014838:	d005      	beq.n	8014846 <USBD_StdDevReq+0x26>
 801483a:	2b40      	cmp	r3, #64	; 0x40
 801483c:	d857      	bhi.n	80148ee <USBD_StdDevReq+0xce>
 801483e:	2b00      	cmp	r3, #0
 8014840:	d00f      	beq.n	8014862 <USBD_StdDevReq+0x42>
 8014842:	2b20      	cmp	r3, #32
 8014844:	d153      	bne.n	80148ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	32ae      	adds	r2, #174	; 0xae
 8014850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	6839      	ldr	r1, [r7, #0]
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	4798      	blx	r3
 801485c:	4603      	mov	r3, r0
 801485e:	73fb      	strb	r3, [r7, #15]
      break;
 8014860:	e04a      	b.n	80148f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	785b      	ldrb	r3, [r3, #1]
 8014866:	2b09      	cmp	r3, #9
 8014868:	d83b      	bhi.n	80148e2 <USBD_StdDevReq+0xc2>
 801486a:	a201      	add	r2, pc, #4	; (adr r2, 8014870 <USBD_StdDevReq+0x50>)
 801486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014870:	080148c5 	.word	0x080148c5
 8014874:	080148d9 	.word	0x080148d9
 8014878:	080148e3 	.word	0x080148e3
 801487c:	080148cf 	.word	0x080148cf
 8014880:	080148e3 	.word	0x080148e3
 8014884:	080148a3 	.word	0x080148a3
 8014888:	08014899 	.word	0x08014899
 801488c:	080148e3 	.word	0x080148e3
 8014890:	080148bb 	.word	0x080148bb
 8014894:	080148ad 	.word	0x080148ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014898:	6839      	ldr	r1, [r7, #0]
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 fa3c 	bl	8014d18 <USBD_GetDescriptor>
          break;
 80148a0:	e024      	b.n	80148ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80148a2:	6839      	ldr	r1, [r7, #0]
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f000 fba1 	bl	8014fec <USBD_SetAddress>
          break;
 80148aa:	e01f      	b.n	80148ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 fbe0 	bl	8015074 <USBD_SetConfig>
 80148b4:	4603      	mov	r3, r0
 80148b6:	73fb      	strb	r3, [r7, #15]
          break;
 80148b8:	e018      	b.n	80148ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80148ba:	6839      	ldr	r1, [r7, #0]
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f000 fc83 	bl	80151c8 <USBD_GetConfig>
          break;
 80148c2:	e013      	b.n	80148ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80148c4:	6839      	ldr	r1, [r7, #0]
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 fcb4 	bl	8015234 <USBD_GetStatus>
          break;
 80148cc:	e00e      	b.n	80148ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80148ce:	6839      	ldr	r1, [r7, #0]
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 fce3 	bl	801529c <USBD_SetFeature>
          break;
 80148d6:	e009      	b.n	80148ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 fd07 	bl	80152ee <USBD_ClrFeature>
          break;
 80148e0:	e004      	b.n	80148ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80148e2:	6839      	ldr	r1, [r7, #0]
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 fd5e 	bl	80153a6 <USBD_CtlError>
          break;
 80148ea:	bf00      	nop
      }
      break;
 80148ec:	e004      	b.n	80148f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80148ee:	6839      	ldr	r1, [r7, #0]
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 fd58 	bl	80153a6 <USBD_CtlError>
      break;
 80148f6:	bf00      	nop
  }

  return ret;
 80148f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3710      	adds	r7, #16
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop

08014904 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801490e:	2300      	movs	r3, #0
 8014910:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801491a:	2b40      	cmp	r3, #64	; 0x40
 801491c:	d005      	beq.n	801492a <USBD_StdItfReq+0x26>
 801491e:	2b40      	cmp	r3, #64	; 0x40
 8014920:	d852      	bhi.n	80149c8 <USBD_StdItfReq+0xc4>
 8014922:	2b00      	cmp	r3, #0
 8014924:	d001      	beq.n	801492a <USBD_StdItfReq+0x26>
 8014926:	2b20      	cmp	r3, #32
 8014928:	d14e      	bne.n	80149c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014930:	b2db      	uxtb	r3, r3
 8014932:	3b01      	subs	r3, #1
 8014934:	2b02      	cmp	r3, #2
 8014936:	d840      	bhi.n	80149ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	889b      	ldrh	r3, [r3, #4]
 801493c:	b2db      	uxtb	r3, r3
 801493e:	2b01      	cmp	r3, #1
 8014940:	d836      	bhi.n	80149b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	889b      	ldrh	r3, [r3, #4]
 8014946:	b2db      	uxtb	r3, r3
 8014948:	4619      	mov	r1, r3
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7ff fed9 	bl	8014702 <USBD_CoreFindIF>
 8014950:	4603      	mov	r3, r0
 8014952:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014954:	7bbb      	ldrb	r3, [r7, #14]
 8014956:	2bff      	cmp	r3, #255	; 0xff
 8014958:	d01d      	beq.n	8014996 <USBD_StdItfReq+0x92>
 801495a:	7bbb      	ldrb	r3, [r7, #14]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d11a      	bne.n	8014996 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014960:	7bba      	ldrb	r2, [r7, #14]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	32ae      	adds	r2, #174	; 0xae
 8014966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801496a:	689b      	ldr	r3, [r3, #8]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d00f      	beq.n	8014990 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014970:	7bba      	ldrb	r2, [r7, #14]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014978:	7bba      	ldrb	r2, [r7, #14]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	32ae      	adds	r2, #174	; 0xae
 801497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014982:	689b      	ldr	r3, [r3, #8]
 8014984:	6839      	ldr	r1, [r7, #0]
 8014986:	6878      	ldr	r0, [r7, #4]
 8014988:	4798      	blx	r3
 801498a:	4603      	mov	r3, r0
 801498c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801498e:	e004      	b.n	801499a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014990:	2303      	movs	r3, #3
 8014992:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014994:	e001      	b.n	801499a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014996:	2303      	movs	r3, #3
 8014998:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	88db      	ldrh	r3, [r3, #6]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d110      	bne.n	80149c4 <USBD_StdItfReq+0xc0>
 80149a2:	7bfb      	ldrb	r3, [r7, #15]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d10d      	bne.n	80149c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f000 fdc7 	bl	801553c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80149ae:	e009      	b.n	80149c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80149b0:	6839      	ldr	r1, [r7, #0]
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 fcf7 	bl	80153a6 <USBD_CtlError>
          break;
 80149b8:	e004      	b.n	80149c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80149ba:	6839      	ldr	r1, [r7, #0]
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f000 fcf2 	bl	80153a6 <USBD_CtlError>
          break;
 80149c2:	e000      	b.n	80149c6 <USBD_StdItfReq+0xc2>
          break;
 80149c4:	bf00      	nop
      }
      break;
 80149c6:	e004      	b.n	80149d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 fceb 	bl	80153a6 <USBD_CtlError>
      break;
 80149d0:	bf00      	nop
  }

  return ret;
 80149d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3710      	adds	r7, #16
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80149e6:	2300      	movs	r3, #0
 80149e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	889b      	ldrh	r3, [r3, #4]
 80149ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80149f8:	2b40      	cmp	r3, #64	; 0x40
 80149fa:	d007      	beq.n	8014a0c <USBD_StdEPReq+0x30>
 80149fc:	2b40      	cmp	r3, #64	; 0x40
 80149fe:	f200 817f 	bhi.w	8014d00 <USBD_StdEPReq+0x324>
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d02a      	beq.n	8014a5c <USBD_StdEPReq+0x80>
 8014a06:	2b20      	cmp	r3, #32
 8014a08:	f040 817a 	bne.w	8014d00 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014a0c:	7bbb      	ldrb	r3, [r7, #14]
 8014a0e:	4619      	mov	r1, r3
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7ff fe83 	bl	801471c <USBD_CoreFindEP>
 8014a16:	4603      	mov	r3, r0
 8014a18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014a1a:	7b7b      	ldrb	r3, [r7, #13]
 8014a1c:	2bff      	cmp	r3, #255	; 0xff
 8014a1e:	f000 8174 	beq.w	8014d0a <USBD_StdEPReq+0x32e>
 8014a22:	7b7b      	ldrb	r3, [r7, #13]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	f040 8170 	bne.w	8014d0a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014a2a:	7b7a      	ldrb	r2, [r7, #13]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014a32:	7b7a      	ldrb	r2, [r7, #13]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	32ae      	adds	r2, #174	; 0xae
 8014a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a3c:	689b      	ldr	r3, [r3, #8]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	f000 8163 	beq.w	8014d0a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014a44:	7b7a      	ldrb	r2, [r7, #13]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	32ae      	adds	r2, #174	; 0xae
 8014a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a4e:	689b      	ldr	r3, [r3, #8]
 8014a50:	6839      	ldr	r1, [r7, #0]
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	4798      	blx	r3
 8014a56:	4603      	mov	r3, r0
 8014a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014a5a:	e156      	b.n	8014d0a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	785b      	ldrb	r3, [r3, #1]
 8014a60:	2b03      	cmp	r3, #3
 8014a62:	d008      	beq.n	8014a76 <USBD_StdEPReq+0x9a>
 8014a64:	2b03      	cmp	r3, #3
 8014a66:	f300 8145 	bgt.w	8014cf4 <USBD_StdEPReq+0x318>
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	f000 809b 	beq.w	8014ba6 <USBD_StdEPReq+0x1ca>
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d03c      	beq.n	8014aee <USBD_StdEPReq+0x112>
 8014a74:	e13e      	b.n	8014cf4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	2b02      	cmp	r3, #2
 8014a80:	d002      	beq.n	8014a88 <USBD_StdEPReq+0xac>
 8014a82:	2b03      	cmp	r3, #3
 8014a84:	d016      	beq.n	8014ab4 <USBD_StdEPReq+0xd8>
 8014a86:	e02c      	b.n	8014ae2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a88:	7bbb      	ldrb	r3, [r7, #14]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d00d      	beq.n	8014aaa <USBD_StdEPReq+0xce>
 8014a8e:	7bbb      	ldrb	r3, [r7, #14]
 8014a90:	2b80      	cmp	r3, #128	; 0x80
 8014a92:	d00a      	beq.n	8014aaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a94:	7bbb      	ldrb	r3, [r7, #14]
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f001 f97b 	bl	8015d94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a9e:	2180      	movs	r1, #128	; 0x80
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f001 f977 	bl	8015d94 <USBD_LL_StallEP>
 8014aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014aa8:	e020      	b.n	8014aec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014aaa:	6839      	ldr	r1, [r7, #0]
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f000 fc7a 	bl	80153a6 <USBD_CtlError>
              break;
 8014ab2:	e01b      	b.n	8014aec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	885b      	ldrh	r3, [r3, #2]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d10e      	bne.n	8014ada <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014abc:	7bbb      	ldrb	r3, [r7, #14]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d00b      	beq.n	8014ada <USBD_StdEPReq+0xfe>
 8014ac2:	7bbb      	ldrb	r3, [r7, #14]
 8014ac4:	2b80      	cmp	r3, #128	; 0x80
 8014ac6:	d008      	beq.n	8014ada <USBD_StdEPReq+0xfe>
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	88db      	ldrh	r3, [r3, #6]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d104      	bne.n	8014ada <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014ad0:	7bbb      	ldrb	r3, [r7, #14]
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f001 f95d 	bl	8015d94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 fd2e 	bl	801553c <USBD_CtlSendStatus>

              break;
 8014ae0:	e004      	b.n	8014aec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014ae2:	6839      	ldr	r1, [r7, #0]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f000 fc5e 	bl	80153a6 <USBD_CtlError>
              break;
 8014aea:	bf00      	nop
          }
          break;
 8014aec:	e107      	b.n	8014cfe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	2b02      	cmp	r3, #2
 8014af8:	d002      	beq.n	8014b00 <USBD_StdEPReq+0x124>
 8014afa:	2b03      	cmp	r3, #3
 8014afc:	d016      	beq.n	8014b2c <USBD_StdEPReq+0x150>
 8014afe:	e04b      	b.n	8014b98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b00:	7bbb      	ldrb	r3, [r7, #14]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d00d      	beq.n	8014b22 <USBD_StdEPReq+0x146>
 8014b06:	7bbb      	ldrb	r3, [r7, #14]
 8014b08:	2b80      	cmp	r3, #128	; 0x80
 8014b0a:	d00a      	beq.n	8014b22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b0c:	7bbb      	ldrb	r3, [r7, #14]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f001 f93f 	bl	8015d94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b16:	2180      	movs	r1, #128	; 0x80
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f001 f93b 	bl	8015d94 <USBD_LL_StallEP>
 8014b1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014b20:	e040      	b.n	8014ba4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014b22:	6839      	ldr	r1, [r7, #0]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f000 fc3e 	bl	80153a6 <USBD_CtlError>
              break;
 8014b2a:	e03b      	b.n	8014ba4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	885b      	ldrh	r3, [r3, #2]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d136      	bne.n	8014ba2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014b34:	7bbb      	ldrb	r3, [r7, #14]
 8014b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d004      	beq.n	8014b48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014b3e:	7bbb      	ldrb	r3, [r7, #14]
 8014b40:	4619      	mov	r1, r3
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f001 f945 	bl	8015dd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f000 fcf7 	bl	801553c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014b4e:	7bbb      	ldrb	r3, [r7, #14]
 8014b50:	4619      	mov	r1, r3
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7ff fde2 	bl	801471c <USBD_CoreFindEP>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014b5c:	7b7b      	ldrb	r3, [r7, #13]
 8014b5e:	2bff      	cmp	r3, #255	; 0xff
 8014b60:	d01f      	beq.n	8014ba2 <USBD_StdEPReq+0x1c6>
 8014b62:	7b7b      	ldrb	r3, [r7, #13]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d11c      	bne.n	8014ba2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014b68:	7b7a      	ldrb	r2, [r7, #13]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014b70:	7b7a      	ldrb	r2, [r7, #13]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	32ae      	adds	r2, #174	; 0xae
 8014b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b7a:	689b      	ldr	r3, [r3, #8]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d010      	beq.n	8014ba2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014b80:	7b7a      	ldrb	r2, [r7, #13]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	32ae      	adds	r2, #174	; 0xae
 8014b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b8a:	689b      	ldr	r3, [r3, #8]
 8014b8c:	6839      	ldr	r1, [r7, #0]
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	4798      	blx	r3
 8014b92:	4603      	mov	r3, r0
 8014b94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014b96:	e004      	b.n	8014ba2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014b98:	6839      	ldr	r1, [r7, #0]
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f000 fc03 	bl	80153a6 <USBD_CtlError>
              break;
 8014ba0:	e000      	b.n	8014ba4 <USBD_StdEPReq+0x1c8>
              break;
 8014ba2:	bf00      	nop
          }
          break;
 8014ba4:	e0ab      	b.n	8014cfe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	2b02      	cmp	r3, #2
 8014bb0:	d002      	beq.n	8014bb8 <USBD_StdEPReq+0x1dc>
 8014bb2:	2b03      	cmp	r3, #3
 8014bb4:	d032      	beq.n	8014c1c <USBD_StdEPReq+0x240>
 8014bb6:	e097      	b.n	8014ce8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014bb8:	7bbb      	ldrb	r3, [r7, #14]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d007      	beq.n	8014bce <USBD_StdEPReq+0x1f2>
 8014bbe:	7bbb      	ldrb	r3, [r7, #14]
 8014bc0:	2b80      	cmp	r3, #128	; 0x80
 8014bc2:	d004      	beq.n	8014bce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014bc4:	6839      	ldr	r1, [r7, #0]
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f000 fbed 	bl	80153a6 <USBD_CtlError>
                break;
 8014bcc:	e091      	b.n	8014cf2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	da0b      	bge.n	8014bee <USBD_StdEPReq+0x212>
 8014bd6:	7bbb      	ldrb	r3, [r7, #14]
 8014bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014bdc:	4613      	mov	r3, r2
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	3310      	adds	r3, #16
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	4413      	add	r3, r2
 8014bea:	3304      	adds	r3, #4
 8014bec:	e00b      	b.n	8014c06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014bee:	7bbb      	ldrb	r3, [r7, #14]
 8014bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	4413      	add	r3, r2
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	4413      	add	r3, r2
 8014c04:	3304      	adds	r3, #4
 8014c06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	2202      	movs	r2, #2
 8014c12:	4619      	mov	r1, r3
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f000 fc37 	bl	8015488 <USBD_CtlSendData>
              break;
 8014c1a:	e06a      	b.n	8014cf2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	da11      	bge.n	8014c48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c24:	7bbb      	ldrb	r3, [r7, #14]
 8014c26:	f003 020f 	and.w	r2, r3, #15
 8014c2a:	6879      	ldr	r1, [r7, #4]
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	4413      	add	r3, r2
 8014c32:	009b      	lsls	r3, r3, #2
 8014c34:	440b      	add	r3, r1
 8014c36:	3324      	adds	r3, #36	; 0x24
 8014c38:	881b      	ldrh	r3, [r3, #0]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d117      	bne.n	8014c6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014c3e:	6839      	ldr	r1, [r7, #0]
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f000 fbb0 	bl	80153a6 <USBD_CtlError>
                  break;
 8014c46:	e054      	b.n	8014cf2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014c48:	7bbb      	ldrb	r3, [r7, #14]
 8014c4a:	f003 020f 	and.w	r2, r3, #15
 8014c4e:	6879      	ldr	r1, [r7, #4]
 8014c50:	4613      	mov	r3, r2
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4413      	add	r3, r2
 8014c56:	009b      	lsls	r3, r3, #2
 8014c58:	440b      	add	r3, r1
 8014c5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014c5e:	881b      	ldrh	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d104      	bne.n	8014c6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014c64:	6839      	ldr	r1, [r7, #0]
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 fb9d 	bl	80153a6 <USBD_CtlError>
                  break;
 8014c6c:	e041      	b.n	8014cf2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	da0b      	bge.n	8014c8e <USBD_StdEPReq+0x2b2>
 8014c76:	7bbb      	ldrb	r3, [r7, #14]
 8014c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	009b      	lsls	r3, r3, #2
 8014c80:	4413      	add	r3, r2
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	3310      	adds	r3, #16
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	4413      	add	r3, r2
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	e00b      	b.n	8014ca6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014c8e:	7bbb      	ldrb	r3, [r7, #14]
 8014c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c94:	4613      	mov	r3, r2
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	4413      	add	r3, r2
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	3304      	adds	r3, #4
 8014ca6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014ca8:	7bbb      	ldrb	r3, [r7, #14]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d002      	beq.n	8014cb4 <USBD_StdEPReq+0x2d8>
 8014cae:	7bbb      	ldrb	r3, [r7, #14]
 8014cb0:	2b80      	cmp	r3, #128	; 0x80
 8014cb2:	d103      	bne.n	8014cbc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	601a      	str	r2, [r3, #0]
 8014cba:	e00e      	b.n	8014cda <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014cbc:	7bbb      	ldrb	r3, [r7, #14]
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f001 f8a5 	bl	8015e10 <USBD_LL_IsStallEP>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d003      	beq.n	8014cd4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	2201      	movs	r2, #1
 8014cd0:	601a      	str	r2, [r3, #0]
 8014cd2:	e002      	b.n	8014cda <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	2202      	movs	r2, #2
 8014cde:	4619      	mov	r1, r3
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 fbd1 	bl	8015488 <USBD_CtlSendData>
              break;
 8014ce6:	e004      	b.n	8014cf2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014ce8:	6839      	ldr	r1, [r7, #0]
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f000 fb5b 	bl	80153a6 <USBD_CtlError>
              break;
 8014cf0:	bf00      	nop
          }
          break;
 8014cf2:	e004      	b.n	8014cfe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014cf4:	6839      	ldr	r1, [r7, #0]
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 fb55 	bl	80153a6 <USBD_CtlError>
          break;
 8014cfc:	bf00      	nop
      }
      break;
 8014cfe:	e005      	b.n	8014d0c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014d00:	6839      	ldr	r1, [r7, #0]
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 fb4f 	bl	80153a6 <USBD_CtlError>
      break;
 8014d08:	e000      	b.n	8014d0c <USBD_StdEPReq+0x330>
      break;
 8014d0a:	bf00      	nop
  }

  return ret;
 8014d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3710      	adds	r7, #16
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
	...

08014d18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014d22:	2300      	movs	r3, #0
 8014d24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014d26:	2300      	movs	r3, #0
 8014d28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	885b      	ldrh	r3, [r3, #2]
 8014d32:	0a1b      	lsrs	r3, r3, #8
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	3b01      	subs	r3, #1
 8014d38:	2b06      	cmp	r3, #6
 8014d3a:	f200 8128 	bhi.w	8014f8e <USBD_GetDescriptor+0x276>
 8014d3e:	a201      	add	r2, pc, #4	; (adr r2, 8014d44 <USBD_GetDescriptor+0x2c>)
 8014d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d44:	08014d61 	.word	0x08014d61
 8014d48:	08014d79 	.word	0x08014d79
 8014d4c:	08014db9 	.word	0x08014db9
 8014d50:	08014f8f 	.word	0x08014f8f
 8014d54:	08014f8f 	.word	0x08014f8f
 8014d58:	08014f2f 	.word	0x08014f2f
 8014d5c:	08014f5b 	.word	0x08014f5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	687a      	ldr	r2, [r7, #4]
 8014d6a:	7c12      	ldrb	r2, [r2, #16]
 8014d6c:	f107 0108 	add.w	r1, r7, #8
 8014d70:	4610      	mov	r0, r2
 8014d72:	4798      	blx	r3
 8014d74:	60f8      	str	r0, [r7, #12]
      break;
 8014d76:	e112      	b.n	8014f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	7c1b      	ldrb	r3, [r3, #16]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d10d      	bne.n	8014d9c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d88:	f107 0208 	add.w	r2, r7, #8
 8014d8c:	4610      	mov	r0, r2
 8014d8e:	4798      	blx	r3
 8014d90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	3301      	adds	r3, #1
 8014d96:	2202      	movs	r2, #2
 8014d98:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014d9a:	e100      	b.n	8014f9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014da4:	f107 0208 	add.w	r2, r7, #8
 8014da8:	4610      	mov	r0, r2
 8014daa:	4798      	blx	r3
 8014dac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	3301      	adds	r3, #1
 8014db2:	2202      	movs	r2, #2
 8014db4:	701a      	strb	r2, [r3, #0]
      break;
 8014db6:	e0f2      	b.n	8014f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	885b      	ldrh	r3, [r3, #2]
 8014dbc:	b2db      	uxtb	r3, r3
 8014dbe:	2b05      	cmp	r3, #5
 8014dc0:	f200 80ac 	bhi.w	8014f1c <USBD_GetDescriptor+0x204>
 8014dc4:	a201      	add	r2, pc, #4	; (adr r2, 8014dcc <USBD_GetDescriptor+0xb4>)
 8014dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dca:	bf00      	nop
 8014dcc:	08014de5 	.word	0x08014de5
 8014dd0:	08014e19 	.word	0x08014e19
 8014dd4:	08014e4d 	.word	0x08014e4d
 8014dd8:	08014e81 	.word	0x08014e81
 8014ddc:	08014eb5 	.word	0x08014eb5
 8014de0:	08014ee9 	.word	0x08014ee9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d00b      	beq.n	8014e08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	7c12      	ldrb	r2, [r2, #16]
 8014dfc:	f107 0108 	add.w	r1, r7, #8
 8014e00:	4610      	mov	r0, r2
 8014e02:	4798      	blx	r3
 8014e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e06:	e091      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014e08:	6839      	ldr	r1, [r7, #0]
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f000 facb 	bl	80153a6 <USBD_CtlError>
            err++;
 8014e10:	7afb      	ldrb	r3, [r7, #11]
 8014e12:	3301      	adds	r3, #1
 8014e14:	72fb      	strb	r3, [r7, #11]
          break;
 8014e16:	e089      	b.n	8014f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e1e:	689b      	ldr	r3, [r3, #8]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d00b      	beq.n	8014e3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e2a:	689b      	ldr	r3, [r3, #8]
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	7c12      	ldrb	r2, [r2, #16]
 8014e30:	f107 0108 	add.w	r1, r7, #8
 8014e34:	4610      	mov	r0, r2
 8014e36:	4798      	blx	r3
 8014e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e3a:	e077      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014e3c:	6839      	ldr	r1, [r7, #0]
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f000 fab1 	bl	80153a6 <USBD_CtlError>
            err++;
 8014e44:	7afb      	ldrb	r3, [r7, #11]
 8014e46:	3301      	adds	r3, #1
 8014e48:	72fb      	strb	r3, [r7, #11]
          break;
 8014e4a:	e06f      	b.n	8014f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e52:	68db      	ldr	r3, [r3, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00b      	beq.n	8014e70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	687a      	ldr	r2, [r7, #4]
 8014e62:	7c12      	ldrb	r2, [r2, #16]
 8014e64:	f107 0108 	add.w	r1, r7, #8
 8014e68:	4610      	mov	r0, r2
 8014e6a:	4798      	blx	r3
 8014e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e6e:	e05d      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014e70:	6839      	ldr	r1, [r7, #0]
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f000 fa97 	bl	80153a6 <USBD_CtlError>
            err++;
 8014e78:	7afb      	ldrb	r3, [r7, #11]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8014e7e:	e055      	b.n	8014f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e86:	691b      	ldr	r3, [r3, #16]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d00b      	beq.n	8014ea4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e92:	691b      	ldr	r3, [r3, #16]
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	7c12      	ldrb	r2, [r2, #16]
 8014e98:	f107 0108 	add.w	r1, r7, #8
 8014e9c:	4610      	mov	r0, r2
 8014e9e:	4798      	blx	r3
 8014ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ea2:	e043      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ea4:	6839      	ldr	r1, [r7, #0]
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f000 fa7d 	bl	80153a6 <USBD_CtlError>
            err++;
 8014eac:	7afb      	ldrb	r3, [r7, #11]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8014eb2:	e03b      	b.n	8014f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eba:	695b      	ldr	r3, [r3, #20]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00b      	beq.n	8014ed8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ec6:	695b      	ldr	r3, [r3, #20]
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	7c12      	ldrb	r2, [r2, #16]
 8014ecc:	f107 0108 	add.w	r1, r7, #8
 8014ed0:	4610      	mov	r0, r2
 8014ed2:	4798      	blx	r3
 8014ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ed6:	e029      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014ed8:	6839      	ldr	r1, [r7, #0]
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f000 fa63 	bl	80153a6 <USBD_CtlError>
            err++;
 8014ee0:	7afb      	ldrb	r3, [r7, #11]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8014ee6:	e021      	b.n	8014f2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eee:	699b      	ldr	r3, [r3, #24]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d00b      	beq.n	8014f0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014efa:	699b      	ldr	r3, [r3, #24]
 8014efc:	687a      	ldr	r2, [r7, #4]
 8014efe:	7c12      	ldrb	r2, [r2, #16]
 8014f00:	f107 0108 	add.w	r1, r7, #8
 8014f04:	4610      	mov	r0, r2
 8014f06:	4798      	blx	r3
 8014f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f0a:	e00f      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f0c:	6839      	ldr	r1, [r7, #0]
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 fa49 	bl	80153a6 <USBD_CtlError>
            err++;
 8014f14:	7afb      	ldrb	r3, [r7, #11]
 8014f16:	3301      	adds	r3, #1
 8014f18:	72fb      	strb	r3, [r7, #11]
          break;
 8014f1a:	e007      	b.n	8014f2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f000 fa41 	bl	80153a6 <USBD_CtlError>
          err++;
 8014f24:	7afb      	ldrb	r3, [r7, #11]
 8014f26:	3301      	adds	r3, #1
 8014f28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014f2a:	bf00      	nop
      }
      break;
 8014f2c:	e037      	b.n	8014f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	7c1b      	ldrb	r3, [r3, #16]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d109      	bne.n	8014f4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f3e:	f107 0208 	add.w	r2, r7, #8
 8014f42:	4610      	mov	r0, r2
 8014f44:	4798      	blx	r3
 8014f46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f48:	e029      	b.n	8014f9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014f4a:	6839      	ldr	r1, [r7, #0]
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f000 fa2a 	bl	80153a6 <USBD_CtlError>
        err++;
 8014f52:	7afb      	ldrb	r3, [r7, #11]
 8014f54:	3301      	adds	r3, #1
 8014f56:	72fb      	strb	r3, [r7, #11]
      break;
 8014f58:	e021      	b.n	8014f9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	7c1b      	ldrb	r3, [r3, #16]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d10d      	bne.n	8014f7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f6a:	f107 0208 	add.w	r2, r7, #8
 8014f6e:	4610      	mov	r0, r2
 8014f70:	4798      	blx	r3
 8014f72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	3301      	adds	r3, #1
 8014f78:	2207      	movs	r2, #7
 8014f7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f7c:	e00f      	b.n	8014f9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014f7e:	6839      	ldr	r1, [r7, #0]
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f000 fa10 	bl	80153a6 <USBD_CtlError>
        err++;
 8014f86:	7afb      	ldrb	r3, [r7, #11]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8014f8c:	e007      	b.n	8014f9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014f8e:	6839      	ldr	r1, [r7, #0]
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f000 fa08 	bl	80153a6 <USBD_CtlError>
      err++;
 8014f96:	7afb      	ldrb	r3, [r7, #11]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	72fb      	strb	r3, [r7, #11]
      break;
 8014f9c:	bf00      	nop
  }

  if (err != 0U)
 8014f9e:	7afb      	ldrb	r3, [r7, #11]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d11e      	bne.n	8014fe2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	88db      	ldrh	r3, [r3, #6]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d016      	beq.n	8014fda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014fac:	893b      	ldrh	r3, [r7, #8]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d00e      	beq.n	8014fd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	88da      	ldrh	r2, [r3, #6]
 8014fb6:	893b      	ldrh	r3, [r7, #8]
 8014fb8:	4293      	cmp	r3, r2
 8014fba:	bf28      	it	cs
 8014fbc:	4613      	movcs	r3, r2
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014fc2:	893b      	ldrh	r3, [r7, #8]
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	68f9      	ldr	r1, [r7, #12]
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f000 fa5d 	bl	8015488 <USBD_CtlSendData>
 8014fce:	e009      	b.n	8014fe4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014fd0:	6839      	ldr	r1, [r7, #0]
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f000 f9e7 	bl	80153a6 <USBD_CtlError>
 8014fd8:	e004      	b.n	8014fe4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f000 faae 	bl	801553c <USBD_CtlSendStatus>
 8014fe0:	e000      	b.n	8014fe4 <USBD_GetDescriptor+0x2cc>
    return;
 8014fe2:	bf00      	nop
  }
}
 8014fe4:	3710      	adds	r7, #16
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop

08014fec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	889b      	ldrh	r3, [r3, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d131      	bne.n	8015062 <USBD_SetAddress+0x76>
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	88db      	ldrh	r3, [r3, #6]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d12d      	bne.n	8015062 <USBD_SetAddress+0x76>
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	885b      	ldrh	r3, [r3, #2]
 801500a:	2b7f      	cmp	r3, #127	; 0x7f
 801500c:	d829      	bhi.n	8015062 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	885b      	ldrh	r3, [r3, #2]
 8015012:	b2db      	uxtb	r3, r3
 8015014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015018:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015020:	b2db      	uxtb	r3, r3
 8015022:	2b03      	cmp	r3, #3
 8015024:	d104      	bne.n	8015030 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015026:	6839      	ldr	r1, [r7, #0]
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f000 f9bc 	bl	80153a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801502e:	e01d      	b.n	801506c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	7bfa      	ldrb	r2, [r7, #15]
 8015034:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015038:	7bfb      	ldrb	r3, [r7, #15]
 801503a:	4619      	mov	r1, r3
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f000 ff13 	bl	8015e68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f000 fa7a 	bl	801553c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015048:	7bfb      	ldrb	r3, [r7, #15]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d004      	beq.n	8015058 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2202      	movs	r2, #2
 8015052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015056:	e009      	b.n	801506c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015060:	e004      	b.n	801506c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015062:	6839      	ldr	r1, [r7, #0]
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f000 f99e 	bl	80153a6 <USBD_CtlError>
  }
}
 801506a:	bf00      	nop
 801506c:	bf00      	nop
 801506e:	3710      	adds	r7, #16
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801507e:	2300      	movs	r3, #0
 8015080:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	885b      	ldrh	r3, [r3, #2]
 8015086:	b2da      	uxtb	r2, r3
 8015088:	4b4e      	ldr	r3, [pc, #312]	; (80151c4 <USBD_SetConfig+0x150>)
 801508a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801508c:	4b4d      	ldr	r3, [pc, #308]	; (80151c4 <USBD_SetConfig+0x150>)
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	2b01      	cmp	r3, #1
 8015092:	d905      	bls.n	80150a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015094:	6839      	ldr	r1, [r7, #0]
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f000 f985 	bl	80153a6 <USBD_CtlError>
    return USBD_FAIL;
 801509c:	2303      	movs	r3, #3
 801509e:	e08c      	b.n	80151ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	2b02      	cmp	r3, #2
 80150aa:	d002      	beq.n	80150b2 <USBD_SetConfig+0x3e>
 80150ac:	2b03      	cmp	r3, #3
 80150ae:	d029      	beq.n	8015104 <USBD_SetConfig+0x90>
 80150b0:	e075      	b.n	801519e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80150b2:	4b44      	ldr	r3, [pc, #272]	; (80151c4 <USBD_SetConfig+0x150>)
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d020      	beq.n	80150fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80150ba:	4b42      	ldr	r3, [pc, #264]	; (80151c4 <USBD_SetConfig+0x150>)
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	461a      	mov	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80150c4:	4b3f      	ldr	r3, [pc, #252]	; (80151c4 <USBD_SetConfig+0x150>)
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	4619      	mov	r1, r3
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7fe ffe7 	bl	801409e <USBD_SetClassConfig>
 80150d0:	4603      	mov	r3, r0
 80150d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80150d4:	7bfb      	ldrb	r3, [r7, #15]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d008      	beq.n	80150ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80150da:	6839      	ldr	r1, [r7, #0]
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 f962 	bl	80153a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2202      	movs	r2, #2
 80150e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80150ea:	e065      	b.n	80151b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f000 fa25 	bl	801553c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2203      	movs	r2, #3
 80150f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80150fa:	e05d      	b.n	80151b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 fa1d 	bl	801553c <USBD_CtlSendStatus>
      break;
 8015102:	e059      	b.n	80151b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015104:	4b2f      	ldr	r3, [pc, #188]	; (80151c4 <USBD_SetConfig+0x150>)
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d112      	bne.n	8015132 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2202      	movs	r2, #2
 8015110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015114:	4b2b      	ldr	r3, [pc, #172]	; (80151c4 <USBD_SetConfig+0x150>)
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	461a      	mov	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801511e:	4b29      	ldr	r3, [pc, #164]	; (80151c4 <USBD_SetConfig+0x150>)
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	4619      	mov	r1, r3
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f7fe ffd6 	bl	80140d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f000 fa06 	bl	801553c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015130:	e042      	b.n	80151b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015132:	4b24      	ldr	r3, [pc, #144]	; (80151c4 <USBD_SetConfig+0x150>)
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	461a      	mov	r2, r3
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	429a      	cmp	r2, r3
 801513e:	d02a      	beq.n	8015196 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	685b      	ldr	r3, [r3, #4]
 8015144:	b2db      	uxtb	r3, r3
 8015146:	4619      	mov	r1, r3
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f7fe ffc4 	bl	80140d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801514e:	4b1d      	ldr	r3, [pc, #116]	; (80151c4 <USBD_SetConfig+0x150>)
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	461a      	mov	r2, r3
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015158:	4b1a      	ldr	r3, [pc, #104]	; (80151c4 <USBD_SetConfig+0x150>)
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	4619      	mov	r1, r3
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7fe ff9d 	bl	801409e <USBD_SetClassConfig>
 8015164:	4603      	mov	r3, r0
 8015166:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015168:	7bfb      	ldrb	r3, [r7, #15]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d00f      	beq.n	801518e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801516e:	6839      	ldr	r1, [r7, #0]
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 f918 	bl	80153a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	b2db      	uxtb	r3, r3
 801517c:	4619      	mov	r1, r3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7fe ffa9 	bl	80140d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2202      	movs	r2, #2
 8015188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801518c:	e014      	b.n	80151b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 f9d4 	bl	801553c <USBD_CtlSendStatus>
      break;
 8015194:	e010      	b.n	80151b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f000 f9d0 	bl	801553c <USBD_CtlSendStatus>
      break;
 801519c:	e00c      	b.n	80151b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801519e:	6839      	ldr	r1, [r7, #0]
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f000 f900 	bl	80153a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151a6:	4b07      	ldr	r3, [pc, #28]	; (80151c4 <USBD_SetConfig+0x150>)
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	4619      	mov	r1, r3
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f7fe ff92 	bl	80140d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80151b2:	2303      	movs	r3, #3
 80151b4:	73fb      	strb	r3, [r7, #15]
      break;
 80151b6:	bf00      	nop
  }

  return ret;
 80151b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80151ba:	4618      	mov	r0, r3
 80151bc:	3710      	adds	r7, #16
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}
 80151c2:	bf00      	nop
 80151c4:	20001134 	.word	0x20001134

080151c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	88db      	ldrh	r3, [r3, #6]
 80151d6:	2b01      	cmp	r3, #1
 80151d8:	d004      	beq.n	80151e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80151da:	6839      	ldr	r1, [r7, #0]
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 f8e2 	bl	80153a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80151e2:	e023      	b.n	801522c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	2b02      	cmp	r3, #2
 80151ee:	dc02      	bgt.n	80151f6 <USBD_GetConfig+0x2e>
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dc03      	bgt.n	80151fc <USBD_GetConfig+0x34>
 80151f4:	e015      	b.n	8015222 <USBD_GetConfig+0x5a>
 80151f6:	2b03      	cmp	r3, #3
 80151f8:	d00b      	beq.n	8015212 <USBD_GetConfig+0x4a>
 80151fa:	e012      	b.n	8015222 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	2200      	movs	r2, #0
 8015200:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	3308      	adds	r3, #8
 8015206:	2201      	movs	r2, #1
 8015208:	4619      	mov	r1, r3
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f000 f93c 	bl	8015488 <USBD_CtlSendData>
        break;
 8015210:	e00c      	b.n	801522c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	3304      	adds	r3, #4
 8015216:	2201      	movs	r2, #1
 8015218:	4619      	mov	r1, r3
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f000 f934 	bl	8015488 <USBD_CtlSendData>
        break;
 8015220:	e004      	b.n	801522c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f000 f8be 	bl	80153a6 <USBD_CtlError>
        break;
 801522a:	bf00      	nop
}
 801522c:	bf00      	nop
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015244:	b2db      	uxtb	r3, r3
 8015246:	3b01      	subs	r3, #1
 8015248:	2b02      	cmp	r3, #2
 801524a:	d81e      	bhi.n	801528a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	88db      	ldrh	r3, [r3, #6]
 8015250:	2b02      	cmp	r3, #2
 8015252:	d004      	beq.n	801525e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015254:	6839      	ldr	r1, [r7, #0]
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	f000 f8a5 	bl	80153a6 <USBD_CtlError>
        break;
 801525c:	e01a      	b.n	8015294 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	2201      	movs	r2, #1
 8015262:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801526a:	2b00      	cmp	r3, #0
 801526c:	d005      	beq.n	801527a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	68db      	ldr	r3, [r3, #12]
 8015272:	f043 0202 	orr.w	r2, r3, #2
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	330c      	adds	r3, #12
 801527e:	2202      	movs	r2, #2
 8015280:	4619      	mov	r1, r3
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f000 f900 	bl	8015488 <USBD_CtlSendData>
      break;
 8015288:	e004      	b.n	8015294 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801528a:	6839      	ldr	r1, [r7, #0]
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f000 f88a 	bl	80153a6 <USBD_CtlError>
      break;
 8015292:	bf00      	nop
  }
}
 8015294:	bf00      	nop
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	885b      	ldrh	r3, [r3, #2]
 80152aa:	2b01      	cmp	r3, #1
 80152ac:	d107      	bne.n	80152be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	2201      	movs	r2, #1
 80152b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f000 f940 	bl	801553c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80152bc:	e013      	b.n	80152e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	885b      	ldrh	r3, [r3, #2]
 80152c2:	2b02      	cmp	r3, #2
 80152c4:	d10b      	bne.n	80152de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	889b      	ldrh	r3, [r3, #4]
 80152ca:	0a1b      	lsrs	r3, r3, #8
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	b2da      	uxtb	r2, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 f930 	bl	801553c <USBD_CtlSendStatus>
}
 80152dc:	e003      	b.n	80152e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80152de:	6839      	ldr	r1, [r7, #0]
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f000 f860 	bl	80153a6 <USBD_CtlError>
}
 80152e6:	bf00      	nop
 80152e8:	3708      	adds	r7, #8
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b082      	sub	sp, #8
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	6078      	str	r0, [r7, #4]
 80152f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152fe:	b2db      	uxtb	r3, r3
 8015300:	3b01      	subs	r3, #1
 8015302:	2b02      	cmp	r3, #2
 8015304:	d80b      	bhi.n	801531e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	885b      	ldrh	r3, [r3, #2]
 801530a:	2b01      	cmp	r3, #1
 801530c:	d10c      	bne.n	8015328 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	2200      	movs	r2, #0
 8015312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f000 f910 	bl	801553c <USBD_CtlSendStatus>
      }
      break;
 801531c:	e004      	b.n	8015328 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801531e:	6839      	ldr	r1, [r7, #0]
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f000 f840 	bl	80153a6 <USBD_CtlError>
      break;
 8015326:	e000      	b.n	801532a <USBD_ClrFeature+0x3c>
      break;
 8015328:	bf00      	nop
  }
}
 801532a:	bf00      	nop
 801532c:	3708      	adds	r7, #8
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}

08015332 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015332:	b580      	push	{r7, lr}
 8015334:	b084      	sub	sp, #16
 8015336:	af00      	add	r7, sp, #0
 8015338:	6078      	str	r0, [r7, #4]
 801533a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	781a      	ldrb	r2, [r3, #0]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	3301      	adds	r3, #1
 801534c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	781a      	ldrb	r2, [r3, #0]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	3301      	adds	r3, #1
 801535a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f7ff fa41 	bl	80147e4 <SWAPBYTE>
 8015362:	4603      	mov	r3, r0
 8015364:	461a      	mov	r2, r3
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	3301      	adds	r3, #1
 801536e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	3301      	adds	r3, #1
 8015374:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015376:	68f8      	ldr	r0, [r7, #12]
 8015378:	f7ff fa34 	bl	80147e4 <SWAPBYTE>
 801537c:	4603      	mov	r3, r0
 801537e:	461a      	mov	r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	3301      	adds	r3, #1
 8015388:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	3301      	adds	r3, #1
 801538e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015390:	68f8      	ldr	r0, [r7, #12]
 8015392:	f7ff fa27 	bl	80147e4 <SWAPBYTE>
 8015396:	4603      	mov	r3, r0
 8015398:	461a      	mov	r2, r3
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	80da      	strh	r2, [r3, #6]
}
 801539e:	bf00      	nop
 80153a0:	3710      	adds	r7, #16
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b082      	sub	sp, #8
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	6078      	str	r0, [r7, #4]
 80153ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80153b0:	2180      	movs	r1, #128	; 0x80
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 fcee 	bl	8015d94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80153b8:	2100      	movs	r1, #0
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f000 fcea 	bl	8015d94 <USBD_LL_StallEP>
}
 80153c0:	bf00      	nop
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b086      	sub	sp, #24
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	60f8      	str	r0, [r7, #12]
 80153d0:	60b9      	str	r1, [r7, #8]
 80153d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80153d4:	2300      	movs	r3, #0
 80153d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d036      	beq.n	801544c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80153e2:	6938      	ldr	r0, [r7, #16]
 80153e4:	f000 f836 	bl	8015454 <USBD_GetLen>
 80153e8:	4603      	mov	r3, r0
 80153ea:	3301      	adds	r3, #1
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	005b      	lsls	r3, r3, #1
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80153f6:	7dfb      	ldrb	r3, [r7, #23]
 80153f8:	68ba      	ldr	r2, [r7, #8]
 80153fa:	4413      	add	r3, r2
 80153fc:	687a      	ldr	r2, [r7, #4]
 80153fe:	7812      	ldrb	r2, [r2, #0]
 8015400:	701a      	strb	r2, [r3, #0]
  idx++;
 8015402:	7dfb      	ldrb	r3, [r7, #23]
 8015404:	3301      	adds	r3, #1
 8015406:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015408:	7dfb      	ldrb	r3, [r7, #23]
 801540a:	68ba      	ldr	r2, [r7, #8]
 801540c:	4413      	add	r3, r2
 801540e:	2203      	movs	r2, #3
 8015410:	701a      	strb	r2, [r3, #0]
  idx++;
 8015412:	7dfb      	ldrb	r3, [r7, #23]
 8015414:	3301      	adds	r3, #1
 8015416:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015418:	e013      	b.n	8015442 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801541a:	7dfb      	ldrb	r3, [r7, #23]
 801541c:	68ba      	ldr	r2, [r7, #8]
 801541e:	4413      	add	r3, r2
 8015420:	693a      	ldr	r2, [r7, #16]
 8015422:	7812      	ldrb	r2, [r2, #0]
 8015424:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	3301      	adds	r3, #1
 801542a:	613b      	str	r3, [r7, #16]
    idx++;
 801542c:	7dfb      	ldrb	r3, [r7, #23]
 801542e:	3301      	adds	r3, #1
 8015430:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015432:	7dfb      	ldrb	r3, [r7, #23]
 8015434:	68ba      	ldr	r2, [r7, #8]
 8015436:	4413      	add	r3, r2
 8015438:	2200      	movs	r2, #0
 801543a:	701a      	strb	r2, [r3, #0]
    idx++;
 801543c:	7dfb      	ldrb	r3, [r7, #23]
 801543e:	3301      	adds	r3, #1
 8015440:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015442:	693b      	ldr	r3, [r7, #16]
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d1e7      	bne.n	801541a <USBD_GetString+0x52>
 801544a:	e000      	b.n	801544e <USBD_GetString+0x86>
    return;
 801544c:	bf00      	nop
  }
}
 801544e:	3718      	adds	r7, #24
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}

08015454 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015454:	b480      	push	{r7}
 8015456:	b085      	sub	sp, #20
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801545c:	2300      	movs	r3, #0
 801545e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015464:	e005      	b.n	8015472 <USBD_GetLen+0x1e>
  {
    len++;
 8015466:	7bfb      	ldrb	r3, [r7, #15]
 8015468:	3301      	adds	r3, #1
 801546a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	3301      	adds	r3, #1
 8015470:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d1f5      	bne.n	8015466 <USBD_GetLen+0x12>
  }

  return len;
 801547a:	7bfb      	ldrb	r3, [r7, #15]
}
 801547c:	4618      	mov	r0, r3
 801547e:	3714      	adds	r7, #20
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr

08015488 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	60f8      	str	r0, [r7, #12]
 8015490:	60b9      	str	r1, [r7, #8]
 8015492:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2202      	movs	r2, #2
 8015498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	68ba      	ldr	r2, [r7, #8]
 80154ac:	2100      	movs	r1, #0
 80154ae:	68f8      	ldr	r0, [r7, #12]
 80154b0:	f000 fcf9 	bl	8015ea6 <USBD_LL_Transmit>

  return USBD_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3710      	adds	r7, #16
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b084      	sub	sp, #16
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	60f8      	str	r0, [r7, #12]
 80154c6:	60b9      	str	r1, [r7, #8]
 80154c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	68ba      	ldr	r2, [r7, #8]
 80154ce:	2100      	movs	r1, #0
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	f000 fce8 	bl	8015ea6 <USBD_LL_Transmit>

  return USBD_OK;
 80154d6:	2300      	movs	r3, #0
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3710      	adds	r7, #16
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	2203      	movs	r2, #3
 80154f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	687a      	ldr	r2, [r7, #4]
 8015500:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	68ba      	ldr	r2, [r7, #8]
 8015508:	2100      	movs	r1, #0
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	f000 fcec 	bl	8015ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015510:	2300      	movs	r3, #0
}
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}

0801551a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801551a:	b580      	push	{r7, lr}
 801551c:	b084      	sub	sp, #16
 801551e:	af00      	add	r7, sp, #0
 8015520:	60f8      	str	r0, [r7, #12]
 8015522:	60b9      	str	r1, [r7, #8]
 8015524:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	68ba      	ldr	r2, [r7, #8]
 801552a:	2100      	movs	r1, #0
 801552c:	68f8      	ldr	r0, [r7, #12]
 801552e:	f000 fcdb 	bl	8015ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015532:	2300      	movs	r3, #0
}
 8015534:	4618      	mov	r0, r3
 8015536:	3710      	adds	r7, #16
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2204      	movs	r2, #4
 8015548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801554c:	2300      	movs	r3, #0
 801554e:	2200      	movs	r2, #0
 8015550:	2100      	movs	r1, #0
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f000 fca7 	bl	8015ea6 <USBD_LL_Transmit>

  return USBD_OK;
 8015558:	2300      	movs	r3, #0
}
 801555a:	4618      	mov	r0, r3
 801555c:	3708      	adds	r7, #8
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}

08015562 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015562:	b580      	push	{r7, lr}
 8015564:	b082      	sub	sp, #8
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2205      	movs	r2, #5
 801556e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015572:	2300      	movs	r3, #0
 8015574:	2200      	movs	r2, #0
 8015576:	2100      	movs	r1, #0
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f000 fcb5 	bl	8015ee8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801557e:	2300      	movs	r3, #0
}
 8015580:	4618      	mov	r0, r3
 8015582:	3708      	adds	r7, #8
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801558c:	2200      	movs	r2, #0
 801558e:	4912      	ldr	r1, [pc, #72]	; (80155d8 <MX_USB_DEVICE_Init+0x50>)
 8015590:	4812      	ldr	r0, [pc, #72]	; (80155dc <MX_USB_DEVICE_Init+0x54>)
 8015592:	f7fe fd07 	bl	8013fa4 <USBD_Init>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d001      	beq.n	80155a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801559c:	f7f3 f92c 	bl	80087f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80155a0:	490f      	ldr	r1, [pc, #60]	; (80155e0 <MX_USB_DEVICE_Init+0x58>)
 80155a2:	480e      	ldr	r0, [pc, #56]	; (80155dc <MX_USB_DEVICE_Init+0x54>)
 80155a4:	f7fe fd2e 	bl	8014004 <USBD_RegisterClass>
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d001      	beq.n	80155b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80155ae:	f7f3 f923 	bl	80087f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80155b2:	490c      	ldr	r1, [pc, #48]	; (80155e4 <MX_USB_DEVICE_Init+0x5c>)
 80155b4:	4809      	ldr	r0, [pc, #36]	; (80155dc <MX_USB_DEVICE_Init+0x54>)
 80155b6:	f7fe fc1f 	bl	8013df8 <USBD_CDC_RegisterInterface>
 80155ba:	4603      	mov	r3, r0
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d001      	beq.n	80155c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80155c0:	f7f3 f91a 	bl	80087f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80155c4:	4805      	ldr	r0, [pc, #20]	; (80155dc <MX_USB_DEVICE_Init+0x54>)
 80155c6:	f7fe fd53 	bl	8014070 <USBD_Start>
 80155ca:	4603      	mov	r3, r0
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d001      	beq.n	80155d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80155d0:	f7f3 f912 	bl	80087f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80155d4:	bf00      	nop
 80155d6:	bd80      	pop	{r7, pc}
 80155d8:	200001b8 	.word	0x200001b8
 80155dc:	20001138 	.word	0x20001138
 80155e0:	20000124 	.word	0x20000124
 80155e4:	200001a4 	.word	0x200001a4

080155e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80155ec:	2200      	movs	r2, #0
 80155ee:	4905      	ldr	r1, [pc, #20]	; (8015604 <CDC_Init_FS+0x1c>)
 80155f0:	4805      	ldr	r0, [pc, #20]	; (8015608 <CDC_Init_FS+0x20>)
 80155f2:	f7fe fc1b 	bl	8013e2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80155f6:	4905      	ldr	r1, [pc, #20]	; (801560c <CDC_Init_FS+0x24>)
 80155f8:	4803      	ldr	r0, [pc, #12]	; (8015608 <CDC_Init_FS+0x20>)
 80155fa:	f7fe fc39 	bl	8013e70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80155fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015600:	4618      	mov	r0, r3
 8015602:	bd80      	pop	{r7, pc}
 8015604:	20001c14 	.word	0x20001c14
 8015608:	20001138 	.word	0x20001138
 801560c:	20001414 	.word	0x20001414

08015610 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015610:	b480      	push	{r7}
 8015612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015614:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015616:	4618      	mov	r0, r3
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr

08015620 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015620:	b480      	push	{r7}
 8015622:	b083      	sub	sp, #12
 8015624:	af00      	add	r7, sp, #0
 8015626:	4603      	mov	r3, r0
 8015628:	6039      	str	r1, [r7, #0]
 801562a:	71fb      	strb	r3, [r7, #7]
 801562c:	4613      	mov	r3, r2
 801562e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015630:	79fb      	ldrb	r3, [r7, #7]
 8015632:	2b23      	cmp	r3, #35	; 0x23
 8015634:	d84a      	bhi.n	80156cc <CDC_Control_FS+0xac>
 8015636:	a201      	add	r2, pc, #4	; (adr r2, 801563c <CDC_Control_FS+0x1c>)
 8015638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801563c:	080156cd 	.word	0x080156cd
 8015640:	080156cd 	.word	0x080156cd
 8015644:	080156cd 	.word	0x080156cd
 8015648:	080156cd 	.word	0x080156cd
 801564c:	080156cd 	.word	0x080156cd
 8015650:	080156cd 	.word	0x080156cd
 8015654:	080156cd 	.word	0x080156cd
 8015658:	080156cd 	.word	0x080156cd
 801565c:	080156cd 	.word	0x080156cd
 8015660:	080156cd 	.word	0x080156cd
 8015664:	080156cd 	.word	0x080156cd
 8015668:	080156cd 	.word	0x080156cd
 801566c:	080156cd 	.word	0x080156cd
 8015670:	080156cd 	.word	0x080156cd
 8015674:	080156cd 	.word	0x080156cd
 8015678:	080156cd 	.word	0x080156cd
 801567c:	080156cd 	.word	0x080156cd
 8015680:	080156cd 	.word	0x080156cd
 8015684:	080156cd 	.word	0x080156cd
 8015688:	080156cd 	.word	0x080156cd
 801568c:	080156cd 	.word	0x080156cd
 8015690:	080156cd 	.word	0x080156cd
 8015694:	080156cd 	.word	0x080156cd
 8015698:	080156cd 	.word	0x080156cd
 801569c:	080156cd 	.word	0x080156cd
 80156a0:	080156cd 	.word	0x080156cd
 80156a4:	080156cd 	.word	0x080156cd
 80156a8:	080156cd 	.word	0x080156cd
 80156ac:	080156cd 	.word	0x080156cd
 80156b0:	080156cd 	.word	0x080156cd
 80156b4:	080156cd 	.word	0x080156cd
 80156b8:	080156cd 	.word	0x080156cd
 80156bc:	080156cd 	.word	0x080156cd
 80156c0:	080156cd 	.word	0x080156cd
 80156c4:	080156cd 	.word	0x080156cd
 80156c8:	080156cd 	.word	0x080156cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80156cc:	bf00      	nop
  }

  return (USBD_OK);
 80156ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr

080156dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]

	/*for( uint32_t i = 0; i < *Len; i++ ){

	}*/

	if( system_info.usb_rx_flag == 0 )
 80156e6:	4b10      	ldr	r3, [pc, #64]	; (8015728 <CDC_Receive_FS+0x4c>)
 80156e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156ec:	b2db      	uxtb	r3, r3
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10e      	bne.n	8015710 <CDC_Receive_FS+0x34>
	{
		memcpy((void*)system_info.usb_rx_buf, Buf, *Len);
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	461a      	mov	r2, r3
 80156f8:	6879      	ldr	r1, [r7, #4]
 80156fa:	480c      	ldr	r0, [pc, #48]	; (801572c <CDC_Receive_FS+0x50>)
 80156fc:	f000 fc9e 	bl	801603c <memcpy>
		system_info.usb_rx_flag = 1;
 8015700:	4b09      	ldr	r3, [pc, #36]	; (8015728 <CDC_Receive_FS+0x4c>)
 8015702:	2201      	movs	r2, #1
 8015704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		system_info.usb_rx_len = *Len;
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	4a06      	ldr	r2, [pc, #24]	; (8015728 <CDC_Receive_FS+0x4c>)
 801570e:	6453      	str	r3, [r2, #68]	; 0x44
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015710:	6879      	ldr	r1, [r7, #4]
 8015712:	4807      	ldr	r0, [pc, #28]	; (8015730 <CDC_Receive_FS+0x54>)
 8015714:	f7fe fbac 	bl	8013e70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015718:	4805      	ldr	r0, [pc, #20]	; (8015730 <CDC_Receive_FS+0x54>)
 801571a:	f7fe fc0d 	bl	8013f38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801571e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015720:	4618      	mov	r0, r3
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	200010b8 	.word	0x200010b8
 801572c:	200010bb 	.word	0x200010bb
 8015730:	20001138 	.word	0x20001138

08015734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	460b      	mov	r3, r1
 801573e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015740:	2300      	movs	r3, #0
 8015742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015744:	4b0d      	ldr	r3, [pc, #52]	; (801577c <CDC_Transmit_FS+0x48>)
 8015746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801574a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015752:	2b00      	cmp	r3, #0
 8015754:	d001      	beq.n	801575a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015756:	2301      	movs	r3, #1
 8015758:	e00b      	b.n	8015772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801575a:	887b      	ldrh	r3, [r7, #2]
 801575c:	461a      	mov	r2, r3
 801575e:	6879      	ldr	r1, [r7, #4]
 8015760:	4806      	ldr	r0, [pc, #24]	; (801577c <CDC_Transmit_FS+0x48>)
 8015762:	f7fe fb63 	bl	8013e2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015766:	4805      	ldr	r0, [pc, #20]	; (801577c <CDC_Transmit_FS+0x48>)
 8015768:	f7fe fba0 	bl	8013eac <USBD_CDC_TransmitPacket>
 801576c:	4603      	mov	r3, r0
 801576e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015770:	7bfb      	ldrb	r3, [r7, #15]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3710      	adds	r7, #16
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	20001138 	.word	0x20001138

08015780 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015780:	b480      	push	{r7}
 8015782:	b087      	sub	sp, #28
 8015784:	af00      	add	r7, sp, #0
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	60b9      	str	r1, [r7, #8]
 801578a:	4613      	mov	r3, r2
 801578c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801578e:	2300      	movs	r3, #0
 8015790:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015796:	4618      	mov	r0, r3
 8015798:	371c      	adds	r7, #28
 801579a:	46bd      	mov	sp, r7
 801579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a0:	4770      	bx	lr
	...

080157a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	4603      	mov	r3, r0
 80157ac:	6039      	str	r1, [r7, #0]
 80157ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80157b0:	683b      	ldr	r3, [r7, #0]
 80157b2:	2212      	movs	r2, #18
 80157b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80157b6:	4b03      	ldr	r3, [pc, #12]	; (80157c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	370c      	adds	r7, #12
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr
 80157c4:	200001d4 	.word	0x200001d4

080157c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157c8:	b480      	push	{r7}
 80157ca:	b083      	sub	sp, #12
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	4603      	mov	r3, r0
 80157d0:	6039      	str	r1, [r7, #0]
 80157d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80157d4:	683b      	ldr	r3, [r7, #0]
 80157d6:	2204      	movs	r2, #4
 80157d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80157da:	4b03      	ldr	r3, [pc, #12]	; (80157e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	200001e8 	.word	0x200001e8

080157ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	4603      	mov	r3, r0
 80157f4:	6039      	str	r1, [r7, #0]
 80157f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80157f8:	79fb      	ldrb	r3, [r7, #7]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d105      	bne.n	801580a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80157fe:	683a      	ldr	r2, [r7, #0]
 8015800:	4907      	ldr	r1, [pc, #28]	; (8015820 <USBD_FS_ProductStrDescriptor+0x34>)
 8015802:	4808      	ldr	r0, [pc, #32]	; (8015824 <USBD_FS_ProductStrDescriptor+0x38>)
 8015804:	f7ff fde0 	bl	80153c8 <USBD_GetString>
 8015808:	e004      	b.n	8015814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801580a:	683a      	ldr	r2, [r7, #0]
 801580c:	4904      	ldr	r1, [pc, #16]	; (8015820 <USBD_FS_ProductStrDescriptor+0x34>)
 801580e:	4805      	ldr	r0, [pc, #20]	; (8015824 <USBD_FS_ProductStrDescriptor+0x38>)
 8015810:	f7ff fdda 	bl	80153c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015814:	4b02      	ldr	r3, [pc, #8]	; (8015820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015816:	4618      	mov	r0, r3
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	20002414 	.word	0x20002414
 8015824:	08016b44 	.word	0x08016b44

08015828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	6039      	str	r1, [r7, #0]
 8015832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015834:	683a      	ldr	r2, [r7, #0]
 8015836:	4904      	ldr	r1, [pc, #16]	; (8015848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015838:	4804      	ldr	r0, [pc, #16]	; (801584c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801583a:	f7ff fdc5 	bl	80153c8 <USBD_GetString>
  return USBD_StrDesc;
 801583e:	4b02      	ldr	r3, [pc, #8]	; (8015848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	20002414 	.word	0x20002414
 801584c:	08016b5c 	.word	0x08016b5c

08015850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af00      	add	r7, sp, #0
 8015856:	4603      	mov	r3, r0
 8015858:	6039      	str	r1, [r7, #0]
 801585a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	221a      	movs	r2, #26
 8015860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015862:	f000 f843 	bl	80158ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015866:	4b02      	ldr	r3, [pc, #8]	; (8015870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015868:	4618      	mov	r0, r3
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	200001ec 	.word	0x200001ec

08015874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	4603      	mov	r3, r0
 801587c:	6039      	str	r1, [r7, #0]
 801587e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015880:	79fb      	ldrb	r3, [r7, #7]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d105      	bne.n	8015892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015886:	683a      	ldr	r2, [r7, #0]
 8015888:	4907      	ldr	r1, [pc, #28]	; (80158a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801588a:	4808      	ldr	r0, [pc, #32]	; (80158ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801588c:	f7ff fd9c 	bl	80153c8 <USBD_GetString>
 8015890:	e004      	b.n	801589c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015892:	683a      	ldr	r2, [r7, #0]
 8015894:	4904      	ldr	r1, [pc, #16]	; (80158a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015896:	4805      	ldr	r0, [pc, #20]	; (80158ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8015898:	f7ff fd96 	bl	80153c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801589c:	4b02      	ldr	r3, [pc, #8]	; (80158a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	20002414 	.word	0x20002414
 80158ac:	08016b70 	.word	0x08016b70

080158b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	4603      	mov	r3, r0
 80158b8:	6039      	str	r1, [r7, #0]
 80158ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80158bc:	79fb      	ldrb	r3, [r7, #7]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d105      	bne.n	80158ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80158c2:	683a      	ldr	r2, [r7, #0]
 80158c4:	4907      	ldr	r1, [pc, #28]	; (80158e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80158c6:	4808      	ldr	r0, [pc, #32]	; (80158e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80158c8:	f7ff fd7e 	bl	80153c8 <USBD_GetString>
 80158cc:	e004      	b.n	80158d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80158ce:	683a      	ldr	r2, [r7, #0]
 80158d0:	4904      	ldr	r1, [pc, #16]	; (80158e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80158d2:	4805      	ldr	r0, [pc, #20]	; (80158e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80158d4:	f7ff fd78 	bl	80153c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80158d8:	4b02      	ldr	r3, [pc, #8]	; (80158e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3708      	adds	r7, #8
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	20002414 	.word	0x20002414
 80158e8:	08016b7c 	.word	0x08016b7c

080158ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80158f2:	4b0f      	ldr	r3, [pc, #60]	; (8015930 <Get_SerialNum+0x44>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80158f8:	4b0e      	ldr	r3, [pc, #56]	; (8015934 <Get_SerialNum+0x48>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80158fe:	4b0e      	ldr	r3, [pc, #56]	; (8015938 <Get_SerialNum+0x4c>)
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015904:	68fa      	ldr	r2, [r7, #12]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4413      	add	r3, r2
 801590a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d009      	beq.n	8015926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015912:	2208      	movs	r2, #8
 8015914:	4909      	ldr	r1, [pc, #36]	; (801593c <Get_SerialNum+0x50>)
 8015916:	68f8      	ldr	r0, [r7, #12]
 8015918:	f000 f814 	bl	8015944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801591c:	2204      	movs	r2, #4
 801591e:	4908      	ldr	r1, [pc, #32]	; (8015940 <Get_SerialNum+0x54>)
 8015920:	68b8      	ldr	r0, [r7, #8]
 8015922:	f000 f80f 	bl	8015944 <IntToUnicode>
  }
}
 8015926:	bf00      	nop
 8015928:	3710      	adds	r7, #16
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	1fff7a10 	.word	0x1fff7a10
 8015934:	1fff7a14 	.word	0x1fff7a14
 8015938:	1fff7a18 	.word	0x1fff7a18
 801593c:	200001ee 	.word	0x200001ee
 8015940:	200001fe 	.word	0x200001fe

08015944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015944:	b480      	push	{r7}
 8015946:	b087      	sub	sp, #28
 8015948:	af00      	add	r7, sp, #0
 801594a:	60f8      	str	r0, [r7, #12]
 801594c:	60b9      	str	r1, [r7, #8]
 801594e:	4613      	mov	r3, r2
 8015950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015952:	2300      	movs	r3, #0
 8015954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015956:	2300      	movs	r3, #0
 8015958:	75fb      	strb	r3, [r7, #23]
 801595a:	e027      	b.n	80159ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	0f1b      	lsrs	r3, r3, #28
 8015960:	2b09      	cmp	r3, #9
 8015962:	d80b      	bhi.n	801597c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	0f1b      	lsrs	r3, r3, #28
 8015968:	b2da      	uxtb	r2, r3
 801596a:	7dfb      	ldrb	r3, [r7, #23]
 801596c:	005b      	lsls	r3, r3, #1
 801596e:	4619      	mov	r1, r3
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	440b      	add	r3, r1
 8015974:	3230      	adds	r2, #48	; 0x30
 8015976:	b2d2      	uxtb	r2, r2
 8015978:	701a      	strb	r2, [r3, #0]
 801597a:	e00a      	b.n	8015992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	0f1b      	lsrs	r3, r3, #28
 8015980:	b2da      	uxtb	r2, r3
 8015982:	7dfb      	ldrb	r3, [r7, #23]
 8015984:	005b      	lsls	r3, r3, #1
 8015986:	4619      	mov	r1, r3
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	440b      	add	r3, r1
 801598c:	3237      	adds	r2, #55	; 0x37
 801598e:	b2d2      	uxtb	r2, r2
 8015990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	011b      	lsls	r3, r3, #4
 8015996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015998:	7dfb      	ldrb	r3, [r7, #23]
 801599a:	005b      	lsls	r3, r3, #1
 801599c:	3301      	adds	r3, #1
 801599e:	68ba      	ldr	r2, [r7, #8]
 80159a0:	4413      	add	r3, r2
 80159a2:	2200      	movs	r2, #0
 80159a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80159a6:	7dfb      	ldrb	r3, [r7, #23]
 80159a8:	3301      	adds	r3, #1
 80159aa:	75fb      	strb	r3, [r7, #23]
 80159ac:	7dfa      	ldrb	r2, [r7, #23]
 80159ae:	79fb      	ldrb	r3, [r7, #7]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d3d3      	bcc.n	801595c <IntToUnicode+0x18>
  }
}
 80159b4:	bf00      	nop
 80159b6:	bf00      	nop
 80159b8:	371c      	adds	r7, #28
 80159ba:	46bd      	mov	sp, r7
 80159bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c0:	4770      	bx	lr
	...

080159c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b08a      	sub	sp, #40	; 0x28
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80159cc:	f107 0314 	add.w	r3, r7, #20
 80159d0:	2200      	movs	r2, #0
 80159d2:	601a      	str	r2, [r3, #0]
 80159d4:	605a      	str	r2, [r3, #4]
 80159d6:	609a      	str	r2, [r3, #8]
 80159d8:	60da      	str	r2, [r3, #12]
 80159da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80159e4:	d13a      	bne.n	8015a5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80159e6:	2300      	movs	r3, #0
 80159e8:	613b      	str	r3, [r7, #16]
 80159ea:	4b1e      	ldr	r3, [pc, #120]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 80159ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159ee:	4a1d      	ldr	r2, [pc, #116]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 80159f0:	f043 0301 	orr.w	r3, r3, #1
 80159f4:	6313      	str	r3, [r2, #48]	; 0x30
 80159f6:	4b1b      	ldr	r3, [pc, #108]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 80159f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159fa:	f003 0301 	and.w	r3, r3, #1
 80159fe:	613b      	str	r3, [r7, #16]
 8015a00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015a02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a08:	2302      	movs	r3, #2
 8015a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a10:	2303      	movs	r3, #3
 8015a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015a14:	230a      	movs	r3, #10
 8015a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015a18:	f107 0314 	add.w	r3, r7, #20
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	4812      	ldr	r0, [pc, #72]	; (8015a68 <HAL_PCD_MspInit+0xa4>)
 8015a20:	f7f6 ffb6 	bl	800c990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015a24:	4b0f      	ldr	r3, [pc, #60]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 8015a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a28:	4a0e      	ldr	r2, [pc, #56]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 8015a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a2e:	6353      	str	r3, [r2, #52]	; 0x34
 8015a30:	2300      	movs	r3, #0
 8015a32:	60fb      	str	r3, [r7, #12]
 8015a34:	4b0b      	ldr	r3, [pc, #44]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 8015a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a38:	4a0a      	ldr	r2, [pc, #40]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 8015a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8015a40:	4b08      	ldr	r3, [pc, #32]	; (8015a64 <HAL_PCD_MspInit+0xa0>)
 8015a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015a48:	60fb      	str	r3, [r7, #12]
 8015a4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	2100      	movs	r1, #0
 8015a50:	2043      	movs	r0, #67	; 0x43
 8015a52:	f7f6 fcc5 	bl	800c3e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015a56:	2043      	movs	r0, #67	; 0x43
 8015a58:	f7f6 fcde 	bl	800c418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015a5c:	bf00      	nop
 8015a5e:	3728      	adds	r7, #40	; 0x28
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bd80      	pop	{r7, pc}
 8015a64:	40023800 	.word	0x40023800
 8015a68:	40020000 	.word	0x40020000

08015a6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015a80:	4619      	mov	r1, r3
 8015a82:	4610      	mov	r0, r2
 8015a84:	f7fe fb41 	bl	801410a <USBD_LL_SetupStage>
}
 8015a88:	bf00      	nop
 8015a8a:	3708      	adds	r7, #8
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}

08015a90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	460b      	mov	r3, r1
 8015a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015aa2:	78fa      	ldrb	r2, [r7, #3]
 8015aa4:	6879      	ldr	r1, [r7, #4]
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	00db      	lsls	r3, r3, #3
 8015aaa:	4413      	add	r3, r2
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	440b      	add	r3, r1
 8015ab0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8015ab4:	681a      	ldr	r2, [r3, #0]
 8015ab6:	78fb      	ldrb	r3, [r7, #3]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	f7fe fb7b 	bl	80141b4 <USBD_LL_DataOutStage>
}
 8015abe:	bf00      	nop
 8015ac0:	3708      	adds	r7, #8
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}

08015ac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ac6:	b580      	push	{r7, lr}
 8015ac8:	b082      	sub	sp, #8
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	6078      	str	r0, [r7, #4]
 8015ace:	460b      	mov	r3, r1
 8015ad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015ad8:	78fa      	ldrb	r2, [r7, #3]
 8015ada:	6879      	ldr	r1, [r7, #4]
 8015adc:	4613      	mov	r3, r2
 8015ade:	00db      	lsls	r3, r3, #3
 8015ae0:	4413      	add	r3, r2
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	440b      	add	r3, r1
 8015ae6:	334c      	adds	r3, #76	; 0x4c
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	78fb      	ldrb	r3, [r7, #3]
 8015aec:	4619      	mov	r1, r3
 8015aee:	f7fe fc14 	bl	801431a <USBD_LL_DataInStage>
}
 8015af2:	bf00      	nop
 8015af4:	3708      	adds	r7, #8
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}

08015afa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015afa:	b580      	push	{r7, lr}
 8015afc:	b082      	sub	sp, #8
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7fe fd48 	bl	801459e <USBD_LL_SOF>
}
 8015b0e:	bf00      	nop
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b084      	sub	sp, #16
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015b1e:	2301      	movs	r3, #1
 8015b20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	68db      	ldr	r3, [r3, #12]
 8015b26:	2b02      	cmp	r3, #2
 8015b28:	d001      	beq.n	8015b2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015b2a:	f7f2 fe65 	bl	80087f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b34:	7bfa      	ldrb	r2, [r7, #15]
 8015b36:	4611      	mov	r1, r2
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7fe fcf2 	bl	8014522 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7fe fc9a 	bl	801447e <USBD_LL_Reset>
}
 8015b4a:	bf00      	nop
 8015b4c:	3710      	adds	r7, #16
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}
	...

08015b54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7fe fced 	bl	8014542 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	687a      	ldr	r2, [r7, #4]
 8015b74:	6812      	ldr	r2, [r2, #0]
 8015b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015b7a:	f043 0301 	orr.w	r3, r3, #1
 8015b7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a1b      	ldr	r3, [r3, #32]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d005      	beq.n	8015b94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b88:	4b04      	ldr	r3, [pc, #16]	; (8015b9c <HAL_PCD_SuspendCallback+0x48>)
 8015b8a:	691b      	ldr	r3, [r3, #16]
 8015b8c:	4a03      	ldr	r2, [pc, #12]	; (8015b9c <HAL_PCD_SuspendCallback+0x48>)
 8015b8e:	f043 0306 	orr.w	r3, r3, #6
 8015b92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015b94:	bf00      	nop
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}
 8015b9c:	e000ed00 	.word	0xe000ed00

08015ba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7fe fcdd 	bl	801456e <USBD_LL_Resume>
}
 8015bb4:	bf00      	nop
 8015bb6:	3708      	adds	r7, #8
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd80      	pop	{r7, pc}

08015bbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bce:	78fa      	ldrb	r2, [r7, #3]
 8015bd0:	4611      	mov	r1, r2
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7fe fd35 	bl	8014642 <USBD_LL_IsoOUTIncomplete>
}
 8015bd8:	bf00      	nop
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b082      	sub	sp, #8
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015bf2:	78fa      	ldrb	r2, [r7, #3]
 8015bf4:	4611      	mov	r1, r2
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7fe fcf1 	bl	80145de <USBD_LL_IsoINIncomplete>
}
 8015bfc:	bf00      	nop
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c12:	4618      	mov	r0, r3
 8015c14:	f7fe fd47 	bl	80146a6 <USBD_LL_DevConnected>
}
 8015c18:	bf00      	nop
 8015c1a:	3708      	adds	r7, #8
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7fe fd44 	bl	80146bc <USBD_LL_DevDisconnected>
}
 8015c34:	bf00      	nop
 8015c36:	3708      	adds	r7, #8
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}

08015c3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	781b      	ldrb	r3, [r3, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d13c      	bne.n	8015cc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015c4c:	4a20      	ldr	r2, [pc, #128]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	4a1e      	ldr	r2, [pc, #120]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015c5c:	4b1c      	ldr	r3, [pc, #112]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015c62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015c64:	4b1a      	ldr	r3, [pc, #104]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c66:	2204      	movs	r2, #4
 8015c68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015c6a:	4b19      	ldr	r3, [pc, #100]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c6c:	2202      	movs	r2, #2
 8015c6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015c70:	4b17      	ldr	r3, [pc, #92]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c72:	2200      	movs	r2, #0
 8015c74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015c76:	4b16      	ldr	r3, [pc, #88]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c78:	2202      	movs	r2, #2
 8015c7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015c7c:	4b14      	ldr	r3, [pc, #80]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c7e:	2200      	movs	r2, #0
 8015c80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015c82:	4b13      	ldr	r3, [pc, #76]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c84:	2200      	movs	r2, #0
 8015c86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015c88:	4b11      	ldr	r3, [pc, #68]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015c8e:	4b10      	ldr	r3, [pc, #64]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c90:	2200      	movs	r2, #0
 8015c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015c94:	4b0e      	ldr	r3, [pc, #56]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c96:	2200      	movs	r2, #0
 8015c98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015c9a:	480d      	ldr	r0, [pc, #52]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015c9c:	f7f8 f8d1 	bl	800de42 <HAL_PCD_Init>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d001      	beq.n	8015caa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015ca6:	f7f2 fda7 	bl	80087f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015caa:	2180      	movs	r1, #128	; 0x80
 8015cac:	4808      	ldr	r0, [pc, #32]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015cae:	f7f9 fb28 	bl	800f302 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015cb2:	2240      	movs	r2, #64	; 0x40
 8015cb4:	2100      	movs	r1, #0
 8015cb6:	4806      	ldr	r0, [pc, #24]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015cb8:	f7f9 fadc 	bl	800f274 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015cbc:	2280      	movs	r2, #128	; 0x80
 8015cbe:	2101      	movs	r1, #1
 8015cc0:	4803      	ldr	r0, [pc, #12]	; (8015cd0 <USBD_LL_Init+0x94>)
 8015cc2:	f7f9 fad7 	bl	800f274 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015cc6:	2300      	movs	r3, #0
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3708      	adds	r7, #8
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	20002614 	.word	0x20002614

08015cd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7f8 f9c6 	bl	800e07c <HAL_PCD_Start>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cf4:	7bfb      	ldrb	r3, [r7, #15]
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f000 f942 	bl	8015f80 <USBD_Get_USB_Status>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3710      	adds	r7, #16
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}

08015d0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b084      	sub	sp, #16
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
 8015d12:	4608      	mov	r0, r1
 8015d14:	4611      	mov	r1, r2
 8015d16:	461a      	mov	r2, r3
 8015d18:	4603      	mov	r3, r0
 8015d1a:	70fb      	strb	r3, [r7, #3]
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	70bb      	strb	r3, [r7, #2]
 8015d20:	4613      	mov	r3, r2
 8015d22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d24:	2300      	movs	r3, #0
 8015d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015d32:	78bb      	ldrb	r3, [r7, #2]
 8015d34:	883a      	ldrh	r2, [r7, #0]
 8015d36:	78f9      	ldrb	r1, [r7, #3]
 8015d38:	f7f8 fe97 	bl	800ea6a <HAL_PCD_EP_Open>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d40:	7bfb      	ldrb	r3, [r7, #15]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 f91c 	bl	8015f80 <USBD_Get_USB_Status>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3710      	adds	r7, #16
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}

08015d56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d56:	b580      	push	{r7, lr}
 8015d58:	b084      	sub	sp, #16
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	6078      	str	r0, [r7, #4]
 8015d5e:	460b      	mov	r3, r1
 8015d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d62:	2300      	movs	r3, #0
 8015d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d66:	2300      	movs	r3, #0
 8015d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d70:	78fa      	ldrb	r2, [r7, #3]
 8015d72:	4611      	mov	r1, r2
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7f8 fee0 	bl	800eb3a <HAL_PCD_EP_Close>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d7e:	7bfb      	ldrb	r3, [r7, #15]
 8015d80:	4618      	mov	r0, r3
 8015d82:	f000 f8fd 	bl	8015f80 <USBD_Get_USB_Status>
 8015d86:	4603      	mov	r3, r0
 8015d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015da0:	2300      	movs	r3, #0
 8015da2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015da4:	2300      	movs	r3, #0
 8015da6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015dae:	78fa      	ldrb	r2, [r7, #3]
 8015db0:	4611      	mov	r1, r2
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7f8 ffb8 	bl	800ed28 <HAL_PCD_EP_SetStall>
 8015db8:	4603      	mov	r3, r0
 8015dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dbc:	7bfb      	ldrb	r3, [r7, #15]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f000 f8de 	bl	8015f80 <USBD_Get_USB_Status>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3710      	adds	r7, #16
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}

08015dd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dd2:	b580      	push	{r7, lr}
 8015dd4:	b084      	sub	sp, #16
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	6078      	str	r0, [r7, #4]
 8015dda:	460b      	mov	r3, r1
 8015ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dde:	2300      	movs	r3, #0
 8015de0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015de2:	2300      	movs	r3, #0
 8015de4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015dec:	78fa      	ldrb	r2, [r7, #3]
 8015dee:	4611      	mov	r1, r2
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f8 fffd 	bl	800edf0 <HAL_PCD_EP_ClrStall>
 8015df6:	4603      	mov	r3, r0
 8015df8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dfa:	7bfb      	ldrb	r3, [r7, #15]
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f000 f8bf 	bl	8015f80 <USBD_Get_USB_Status>
 8015e02:	4603      	mov	r3, r0
 8015e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}

08015e10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e10:	b480      	push	{r7}
 8015e12:	b085      	sub	sp, #20
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	da0b      	bge.n	8015e44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015e2c:	78fb      	ldrb	r3, [r7, #3]
 8015e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e32:	68f9      	ldr	r1, [r7, #12]
 8015e34:	4613      	mov	r3, r2
 8015e36:	00db      	lsls	r3, r3, #3
 8015e38:	4413      	add	r3, r2
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	440b      	add	r3, r1
 8015e3e:	333e      	adds	r3, #62	; 0x3e
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	e00b      	b.n	8015e5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015e44:	78fb      	ldrb	r3, [r7, #3]
 8015e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e4a:	68f9      	ldr	r1, [r7, #12]
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	00db      	lsls	r3, r3, #3
 8015e50:	4413      	add	r3, r2
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	440b      	add	r3, r1
 8015e56:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015e5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3714      	adds	r7, #20
 8015e60:	46bd      	mov	sp, r7
 8015e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e66:	4770      	bx	lr

08015e68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	460b      	mov	r3, r1
 8015e72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e74:	2300      	movs	r3, #0
 8015e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e82:	78fa      	ldrb	r2, [r7, #3]
 8015e84:	4611      	mov	r1, r2
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f8 fdca 	bl	800ea20 <HAL_PCD_SetAddress>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e90:	7bfb      	ldrb	r3, [r7, #15]
 8015e92:	4618      	mov	r0, r3
 8015e94:	f000 f874 	bl	8015f80 <USBD_Get_USB_Status>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3710      	adds	r7, #16
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}

08015ea6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ea6:	b580      	push	{r7, lr}
 8015ea8:	b086      	sub	sp, #24
 8015eaa:	af00      	add	r7, sp, #0
 8015eac:	60f8      	str	r0, [r7, #12]
 8015eae:	607a      	str	r2, [r7, #4]
 8015eb0:	603b      	str	r3, [r7, #0]
 8015eb2:	460b      	mov	r3, r1
 8015eb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015ec4:	7af9      	ldrb	r1, [r7, #11]
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	f7f8 fee3 	bl	800ec94 <HAL_PCD_EP_Transmit>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ed2:	7dfb      	ldrb	r3, [r7, #23]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f000 f853 	bl	8015f80 <USBD_Get_USB_Status>
 8015eda:	4603      	mov	r3, r0
 8015edc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ede:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3718      	adds	r7, #24
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b086      	sub	sp, #24
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	607a      	str	r2, [r7, #4]
 8015ef2:	603b      	str	r3, [r7, #0]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015efc:	2300      	movs	r3, #0
 8015efe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015f06:	7af9      	ldrb	r1, [r7, #11]
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	f7f8 fe5f 	bl	800ebce <HAL_PCD_EP_Receive>
 8015f10:	4603      	mov	r3, r0
 8015f12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f14:	7dfb      	ldrb	r3, [r7, #23]
 8015f16:	4618      	mov	r0, r3
 8015f18:	f000 f832 	bl	8015f80 <USBD_Get_USB_Status>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f20:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3718      	adds	r7, #24
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f2a:	b580      	push	{r7, lr}
 8015f2c:	b082      	sub	sp, #8
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
 8015f32:	460b      	mov	r3, r1
 8015f34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f3c:	78fa      	ldrb	r2, [r7, #3]
 8015f3e:	4611      	mov	r1, r2
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f8 fe8f 	bl	800ec64 <HAL_PCD_EP_GetRxCount>
 8015f46:	4603      	mov	r3, r0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3708      	adds	r7, #8
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015f50:	b480      	push	{r7}
 8015f52:	b083      	sub	sp, #12
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015f58:	4b03      	ldr	r3, [pc, #12]	; (8015f68 <USBD_static_malloc+0x18>)
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	370c      	adds	r7, #12
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f64:	4770      	bx	lr
 8015f66:	bf00      	nop
 8015f68:	20002b20 	.word	0x20002b20

08015f6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015f6c:	b480      	push	{r7}
 8015f6e:	b083      	sub	sp, #12
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]

}
 8015f74:	bf00      	nop
 8015f76:	370c      	adds	r7, #12
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7e:	4770      	bx	lr

08015f80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015f80:	b480      	push	{r7}
 8015f82:	b085      	sub	sp, #20
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	4603      	mov	r3, r0
 8015f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015f8e:	79fb      	ldrb	r3, [r7, #7]
 8015f90:	2b03      	cmp	r3, #3
 8015f92:	d817      	bhi.n	8015fc4 <USBD_Get_USB_Status+0x44>
 8015f94:	a201      	add	r2, pc, #4	; (adr r2, 8015f9c <USBD_Get_USB_Status+0x1c>)
 8015f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f9a:	bf00      	nop
 8015f9c:	08015fad 	.word	0x08015fad
 8015fa0:	08015fb3 	.word	0x08015fb3
 8015fa4:	08015fb9 	.word	0x08015fb9
 8015fa8:	08015fbf 	.word	0x08015fbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015fac:	2300      	movs	r3, #0
 8015fae:	73fb      	strb	r3, [r7, #15]
    break;
 8015fb0:	e00b      	b.n	8015fca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015fb2:	2303      	movs	r3, #3
 8015fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8015fb6:	e008      	b.n	8015fca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015fb8:	2301      	movs	r3, #1
 8015fba:	73fb      	strb	r3, [r7, #15]
    break;
 8015fbc:	e005      	b.n	8015fca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015fbe:	2303      	movs	r3, #3
 8015fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8015fc2:	e002      	b.n	8015fca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015fc4:	2303      	movs	r3, #3
 8015fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8015fc8:	bf00      	nop
  }
  return usb_status;
 8015fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fcc:	4618      	mov	r0, r3
 8015fce:	3714      	adds	r7, #20
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd6:	4770      	bx	lr

08015fd8 <memset>:
 8015fd8:	4402      	add	r2, r0
 8015fda:	4603      	mov	r3, r0
 8015fdc:	4293      	cmp	r3, r2
 8015fde:	d100      	bne.n	8015fe2 <memset+0xa>
 8015fe0:	4770      	bx	lr
 8015fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8015fe6:	e7f9      	b.n	8015fdc <memset+0x4>

08015fe8 <__errno>:
 8015fe8:	4b01      	ldr	r3, [pc, #4]	; (8015ff0 <__errno+0x8>)
 8015fea:	6818      	ldr	r0, [r3, #0]
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	20000254 	.word	0x20000254

08015ff4 <__libc_init_array>:
 8015ff4:	b570      	push	{r4, r5, r6, lr}
 8015ff6:	4d0d      	ldr	r5, [pc, #52]	; (801602c <__libc_init_array+0x38>)
 8015ff8:	4c0d      	ldr	r4, [pc, #52]	; (8016030 <__libc_init_array+0x3c>)
 8015ffa:	1b64      	subs	r4, r4, r5
 8015ffc:	10a4      	asrs	r4, r4, #2
 8015ffe:	2600      	movs	r6, #0
 8016000:	42a6      	cmp	r6, r4
 8016002:	d109      	bne.n	8016018 <__libc_init_array+0x24>
 8016004:	4d0b      	ldr	r5, [pc, #44]	; (8016034 <__libc_init_array+0x40>)
 8016006:	4c0c      	ldr	r4, [pc, #48]	; (8016038 <__libc_init_array+0x44>)
 8016008:	f000 fba0 	bl	801674c <_init>
 801600c:	1b64      	subs	r4, r4, r5
 801600e:	10a4      	asrs	r4, r4, #2
 8016010:	2600      	movs	r6, #0
 8016012:	42a6      	cmp	r6, r4
 8016014:	d105      	bne.n	8016022 <__libc_init_array+0x2e>
 8016016:	bd70      	pop	{r4, r5, r6, pc}
 8016018:	f855 3b04 	ldr.w	r3, [r5], #4
 801601c:	4798      	blx	r3
 801601e:	3601      	adds	r6, #1
 8016020:	e7ee      	b.n	8016000 <__libc_init_array+0xc>
 8016022:	f855 3b04 	ldr.w	r3, [r5], #4
 8016026:	4798      	blx	r3
 8016028:	3601      	adds	r6, #1
 801602a:	e7f2      	b.n	8016012 <__libc_init_array+0x1e>
 801602c:	08017220 	.word	0x08017220
 8016030:	08017220 	.word	0x08017220
 8016034:	08017220 	.word	0x08017220
 8016038:	08017224 	.word	0x08017224

0801603c <memcpy>:
 801603c:	440a      	add	r2, r1
 801603e:	4291      	cmp	r1, r2
 8016040:	f100 33ff 	add.w	r3, r0, #4294967295
 8016044:	d100      	bne.n	8016048 <memcpy+0xc>
 8016046:	4770      	bx	lr
 8016048:	b510      	push	{r4, lr}
 801604a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801604e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016052:	4291      	cmp	r1, r2
 8016054:	d1f9      	bne.n	801604a <memcpy+0xe>
 8016056:	bd10      	pop	{r4, pc}

08016058 <atan2>:
 8016058:	f000 b906 	b.w	8016268 <__ieee754_atan2>

0801605c <sqrt>:
 801605c:	b538      	push	{r3, r4, r5, lr}
 801605e:	ed2d 8b02 	vpush	{d8}
 8016062:	ec55 4b10 	vmov	r4, r5, d0
 8016066:	f000 f825 	bl	80160b4 <__ieee754_sqrt>
 801606a:	4622      	mov	r2, r4
 801606c:	462b      	mov	r3, r5
 801606e:	4620      	mov	r0, r4
 8016070:	4629      	mov	r1, r5
 8016072:	eeb0 8a40 	vmov.f32	s16, s0
 8016076:	eef0 8a60 	vmov.f32	s17, s1
 801607a:	f7ea fd0b 	bl	8000a94 <__aeabi_dcmpun>
 801607e:	b990      	cbnz	r0, 80160a6 <sqrt+0x4a>
 8016080:	2200      	movs	r2, #0
 8016082:	2300      	movs	r3, #0
 8016084:	4620      	mov	r0, r4
 8016086:	4629      	mov	r1, r5
 8016088:	f7ea fcdc 	bl	8000a44 <__aeabi_dcmplt>
 801608c:	b158      	cbz	r0, 80160a6 <sqrt+0x4a>
 801608e:	f7ff ffab 	bl	8015fe8 <__errno>
 8016092:	2321      	movs	r3, #33	; 0x21
 8016094:	6003      	str	r3, [r0, #0]
 8016096:	2200      	movs	r2, #0
 8016098:	2300      	movs	r3, #0
 801609a:	4610      	mov	r0, r2
 801609c:	4619      	mov	r1, r3
 801609e:	f7ea fb89 	bl	80007b4 <__aeabi_ddiv>
 80160a2:	ec41 0b18 	vmov	d8, r0, r1
 80160a6:	eeb0 0a48 	vmov.f32	s0, s16
 80160aa:	eef0 0a68 	vmov.f32	s1, s17
 80160ae:	ecbd 8b02 	vpop	{d8}
 80160b2:	bd38      	pop	{r3, r4, r5, pc}

080160b4 <__ieee754_sqrt>:
 80160b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b8:	ec55 4b10 	vmov	r4, r5, d0
 80160bc:	4e67      	ldr	r6, [pc, #412]	; (801625c <__ieee754_sqrt+0x1a8>)
 80160be:	43ae      	bics	r6, r5
 80160c0:	ee10 0a10 	vmov	r0, s0
 80160c4:	ee10 2a10 	vmov	r2, s0
 80160c8:	4629      	mov	r1, r5
 80160ca:	462b      	mov	r3, r5
 80160cc:	d10d      	bne.n	80160ea <__ieee754_sqrt+0x36>
 80160ce:	f7ea fa47 	bl	8000560 <__aeabi_dmul>
 80160d2:	4602      	mov	r2, r0
 80160d4:	460b      	mov	r3, r1
 80160d6:	4620      	mov	r0, r4
 80160d8:	4629      	mov	r1, r5
 80160da:	f7ea f88b 	bl	80001f4 <__adddf3>
 80160de:	4604      	mov	r4, r0
 80160e0:	460d      	mov	r5, r1
 80160e2:	ec45 4b10 	vmov	d0, r4, r5
 80160e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ea:	2d00      	cmp	r5, #0
 80160ec:	dc0b      	bgt.n	8016106 <__ieee754_sqrt+0x52>
 80160ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80160f2:	4326      	orrs	r6, r4
 80160f4:	d0f5      	beq.n	80160e2 <__ieee754_sqrt+0x2e>
 80160f6:	b135      	cbz	r5, 8016106 <__ieee754_sqrt+0x52>
 80160f8:	f7ea f87a 	bl	80001f0 <__aeabi_dsub>
 80160fc:	4602      	mov	r2, r0
 80160fe:	460b      	mov	r3, r1
 8016100:	f7ea fb58 	bl	80007b4 <__aeabi_ddiv>
 8016104:	e7eb      	b.n	80160de <__ieee754_sqrt+0x2a>
 8016106:	1509      	asrs	r1, r1, #20
 8016108:	f000 808d 	beq.w	8016226 <__ieee754_sqrt+0x172>
 801610c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016110:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8016114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016118:	07c9      	lsls	r1, r1, #31
 801611a:	bf5c      	itt	pl
 801611c:	005b      	lslpl	r3, r3, #1
 801611e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8016122:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016126:	bf58      	it	pl
 8016128:	0052      	lslpl	r2, r2, #1
 801612a:	2500      	movs	r5, #0
 801612c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016130:	1076      	asrs	r6, r6, #1
 8016132:	0052      	lsls	r2, r2, #1
 8016134:	f04f 0e16 	mov.w	lr, #22
 8016138:	46ac      	mov	ip, r5
 801613a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801613e:	eb0c 0001 	add.w	r0, ip, r1
 8016142:	4298      	cmp	r0, r3
 8016144:	bfde      	ittt	le
 8016146:	1a1b      	suble	r3, r3, r0
 8016148:	eb00 0c01 	addle.w	ip, r0, r1
 801614c:	186d      	addle	r5, r5, r1
 801614e:	005b      	lsls	r3, r3, #1
 8016150:	f1be 0e01 	subs.w	lr, lr, #1
 8016154:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016158:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801615c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016160:	d1ed      	bne.n	801613e <__ieee754_sqrt+0x8a>
 8016162:	4674      	mov	r4, lr
 8016164:	2720      	movs	r7, #32
 8016166:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801616a:	4563      	cmp	r3, ip
 801616c:	eb01 000e 	add.w	r0, r1, lr
 8016170:	dc02      	bgt.n	8016178 <__ieee754_sqrt+0xc4>
 8016172:	d113      	bne.n	801619c <__ieee754_sqrt+0xe8>
 8016174:	4290      	cmp	r0, r2
 8016176:	d811      	bhi.n	801619c <__ieee754_sqrt+0xe8>
 8016178:	2800      	cmp	r0, #0
 801617a:	eb00 0e01 	add.w	lr, r0, r1
 801617e:	da57      	bge.n	8016230 <__ieee754_sqrt+0x17c>
 8016180:	f1be 0f00 	cmp.w	lr, #0
 8016184:	db54      	blt.n	8016230 <__ieee754_sqrt+0x17c>
 8016186:	f10c 0801 	add.w	r8, ip, #1
 801618a:	eba3 030c 	sub.w	r3, r3, ip
 801618e:	4290      	cmp	r0, r2
 8016190:	bf88      	it	hi
 8016192:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016196:	1a12      	subs	r2, r2, r0
 8016198:	440c      	add	r4, r1
 801619a:	46c4      	mov	ip, r8
 801619c:	005b      	lsls	r3, r3, #1
 801619e:	3f01      	subs	r7, #1
 80161a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80161a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80161a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80161ac:	d1dd      	bne.n	801616a <__ieee754_sqrt+0xb6>
 80161ae:	4313      	orrs	r3, r2
 80161b0:	d01b      	beq.n	80161ea <__ieee754_sqrt+0x136>
 80161b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8016260 <__ieee754_sqrt+0x1ac>
 80161b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8016264 <__ieee754_sqrt+0x1b0>
 80161ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80161be:	e9db 2300 	ldrd	r2, r3, [fp]
 80161c2:	f7ea f815 	bl	80001f0 <__aeabi_dsub>
 80161c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80161ca:	4602      	mov	r2, r0
 80161cc:	460b      	mov	r3, r1
 80161ce:	4640      	mov	r0, r8
 80161d0:	4649      	mov	r1, r9
 80161d2:	f7ea fc41 	bl	8000a58 <__aeabi_dcmple>
 80161d6:	b140      	cbz	r0, 80161ea <__ieee754_sqrt+0x136>
 80161d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80161dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80161e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80161e4:	d126      	bne.n	8016234 <__ieee754_sqrt+0x180>
 80161e6:	3501      	adds	r5, #1
 80161e8:	463c      	mov	r4, r7
 80161ea:	106a      	asrs	r2, r5, #1
 80161ec:	0863      	lsrs	r3, r4, #1
 80161ee:	07e9      	lsls	r1, r5, #31
 80161f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80161f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80161f8:	bf48      	it	mi
 80161fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80161fe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8016202:	461c      	mov	r4, r3
 8016204:	e76d      	b.n	80160e2 <__ieee754_sqrt+0x2e>
 8016206:	0ad3      	lsrs	r3, r2, #11
 8016208:	3815      	subs	r0, #21
 801620a:	0552      	lsls	r2, r2, #21
 801620c:	2b00      	cmp	r3, #0
 801620e:	d0fa      	beq.n	8016206 <__ieee754_sqrt+0x152>
 8016210:	02dc      	lsls	r4, r3, #11
 8016212:	d50a      	bpl.n	801622a <__ieee754_sqrt+0x176>
 8016214:	f1c1 0420 	rsb	r4, r1, #32
 8016218:	fa22 f404 	lsr.w	r4, r2, r4
 801621c:	1e4d      	subs	r5, r1, #1
 801621e:	408a      	lsls	r2, r1
 8016220:	4323      	orrs	r3, r4
 8016222:	1b41      	subs	r1, r0, r5
 8016224:	e772      	b.n	801610c <__ieee754_sqrt+0x58>
 8016226:	4608      	mov	r0, r1
 8016228:	e7f0      	b.n	801620c <__ieee754_sqrt+0x158>
 801622a:	005b      	lsls	r3, r3, #1
 801622c:	3101      	adds	r1, #1
 801622e:	e7ef      	b.n	8016210 <__ieee754_sqrt+0x15c>
 8016230:	46e0      	mov	r8, ip
 8016232:	e7aa      	b.n	801618a <__ieee754_sqrt+0xd6>
 8016234:	f7e9 ffde 	bl	80001f4 <__adddf3>
 8016238:	e9da 8900 	ldrd	r8, r9, [sl]
 801623c:	4602      	mov	r2, r0
 801623e:	460b      	mov	r3, r1
 8016240:	4640      	mov	r0, r8
 8016242:	4649      	mov	r1, r9
 8016244:	f7ea fbfe 	bl	8000a44 <__aeabi_dcmplt>
 8016248:	b120      	cbz	r0, 8016254 <__ieee754_sqrt+0x1a0>
 801624a:	1ca0      	adds	r0, r4, #2
 801624c:	bf08      	it	eq
 801624e:	3501      	addeq	r5, #1
 8016250:	3402      	adds	r4, #2
 8016252:	e7ca      	b.n	80161ea <__ieee754_sqrt+0x136>
 8016254:	3401      	adds	r4, #1
 8016256:	f024 0401 	bic.w	r4, r4, #1
 801625a:	e7c6      	b.n	80161ea <__ieee754_sqrt+0x136>
 801625c:	7ff00000 	.word	0x7ff00000
 8016260:	20000258 	.word	0x20000258
 8016264:	20000260 	.word	0x20000260

08016268 <__ieee754_atan2>:
 8016268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801626c:	ec57 6b11 	vmov	r6, r7, d1
 8016270:	4273      	negs	r3, r6
 8016272:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80163f0 <__ieee754_atan2+0x188>
 8016276:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801627a:	4333      	orrs	r3, r6
 801627c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016280:	4543      	cmp	r3, r8
 8016282:	ec51 0b10 	vmov	r0, r1, d0
 8016286:	ee11 5a10 	vmov	r5, s2
 801628a:	d80a      	bhi.n	80162a2 <__ieee754_atan2+0x3a>
 801628c:	4244      	negs	r4, r0
 801628e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016292:	4304      	orrs	r4, r0
 8016294:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016298:	4544      	cmp	r4, r8
 801629a:	ee10 9a10 	vmov	r9, s0
 801629e:	468e      	mov	lr, r1
 80162a0:	d907      	bls.n	80162b2 <__ieee754_atan2+0x4a>
 80162a2:	4632      	mov	r2, r6
 80162a4:	463b      	mov	r3, r7
 80162a6:	f7e9 ffa5 	bl	80001f4 <__adddf3>
 80162aa:	ec41 0b10 	vmov	d0, r0, r1
 80162ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80162b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80162ba:	4334      	orrs	r4, r6
 80162bc:	d103      	bne.n	80162c6 <__ieee754_atan2+0x5e>
 80162be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c2:	f000 b899 	b.w	80163f8 <atan>
 80162c6:	17bc      	asrs	r4, r7, #30
 80162c8:	f004 0402 	and.w	r4, r4, #2
 80162cc:	ea53 0909 	orrs.w	r9, r3, r9
 80162d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80162d4:	d107      	bne.n	80162e6 <__ieee754_atan2+0x7e>
 80162d6:	2c02      	cmp	r4, #2
 80162d8:	d05f      	beq.n	801639a <__ieee754_atan2+0x132>
 80162da:	2c03      	cmp	r4, #3
 80162dc:	d1e5      	bne.n	80162aa <__ieee754_atan2+0x42>
 80162de:	a140      	add	r1, pc, #256	; (adr r1, 80163e0 <__ieee754_atan2+0x178>)
 80162e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162e4:	e7e1      	b.n	80162aa <__ieee754_atan2+0x42>
 80162e6:	4315      	orrs	r5, r2
 80162e8:	d106      	bne.n	80162f8 <__ieee754_atan2+0x90>
 80162ea:	f1be 0f00 	cmp.w	lr, #0
 80162ee:	da5f      	bge.n	80163b0 <__ieee754_atan2+0x148>
 80162f0:	a13d      	add	r1, pc, #244	; (adr r1, 80163e8 <__ieee754_atan2+0x180>)
 80162f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162f6:	e7d8      	b.n	80162aa <__ieee754_atan2+0x42>
 80162f8:	4542      	cmp	r2, r8
 80162fa:	d10f      	bne.n	801631c <__ieee754_atan2+0xb4>
 80162fc:	4293      	cmp	r3, r2
 80162fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8016302:	d107      	bne.n	8016314 <__ieee754_atan2+0xac>
 8016304:	2c02      	cmp	r4, #2
 8016306:	d84c      	bhi.n	80163a2 <__ieee754_atan2+0x13a>
 8016308:	4b33      	ldr	r3, [pc, #204]	; (80163d8 <__ieee754_atan2+0x170>)
 801630a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801630e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016312:	e7ca      	b.n	80162aa <__ieee754_atan2+0x42>
 8016314:	2c02      	cmp	r4, #2
 8016316:	d848      	bhi.n	80163aa <__ieee754_atan2+0x142>
 8016318:	4b30      	ldr	r3, [pc, #192]	; (80163dc <__ieee754_atan2+0x174>)
 801631a:	e7f6      	b.n	801630a <__ieee754_atan2+0xa2>
 801631c:	4543      	cmp	r3, r8
 801631e:	d0e4      	beq.n	80162ea <__ieee754_atan2+0x82>
 8016320:	1a9b      	subs	r3, r3, r2
 8016322:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8016326:	ea4f 5223 	mov.w	r2, r3, asr #20
 801632a:	da1e      	bge.n	801636a <__ieee754_atan2+0x102>
 801632c:	2f00      	cmp	r7, #0
 801632e:	da01      	bge.n	8016334 <__ieee754_atan2+0xcc>
 8016330:	323c      	adds	r2, #60	; 0x3c
 8016332:	db1e      	blt.n	8016372 <__ieee754_atan2+0x10a>
 8016334:	4632      	mov	r2, r6
 8016336:	463b      	mov	r3, r7
 8016338:	f7ea fa3c 	bl	80007b4 <__aeabi_ddiv>
 801633c:	ec41 0b10 	vmov	d0, r0, r1
 8016340:	f000 f9fa 	bl	8016738 <fabs>
 8016344:	f000 f858 	bl	80163f8 <atan>
 8016348:	ec51 0b10 	vmov	r0, r1, d0
 801634c:	2c01      	cmp	r4, #1
 801634e:	d013      	beq.n	8016378 <__ieee754_atan2+0x110>
 8016350:	2c02      	cmp	r4, #2
 8016352:	d015      	beq.n	8016380 <__ieee754_atan2+0x118>
 8016354:	2c00      	cmp	r4, #0
 8016356:	d0a8      	beq.n	80162aa <__ieee754_atan2+0x42>
 8016358:	a317      	add	r3, pc, #92	; (adr r3, 80163b8 <__ieee754_atan2+0x150>)
 801635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635e:	f7e9 ff47 	bl	80001f0 <__aeabi_dsub>
 8016362:	a317      	add	r3, pc, #92	; (adr r3, 80163c0 <__ieee754_atan2+0x158>)
 8016364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016368:	e014      	b.n	8016394 <__ieee754_atan2+0x12c>
 801636a:	a117      	add	r1, pc, #92	; (adr r1, 80163c8 <__ieee754_atan2+0x160>)
 801636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016370:	e7ec      	b.n	801634c <__ieee754_atan2+0xe4>
 8016372:	2000      	movs	r0, #0
 8016374:	2100      	movs	r1, #0
 8016376:	e7e9      	b.n	801634c <__ieee754_atan2+0xe4>
 8016378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801637c:	4619      	mov	r1, r3
 801637e:	e794      	b.n	80162aa <__ieee754_atan2+0x42>
 8016380:	a30d      	add	r3, pc, #52	; (adr r3, 80163b8 <__ieee754_atan2+0x150>)
 8016382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016386:	f7e9 ff33 	bl	80001f0 <__aeabi_dsub>
 801638a:	4602      	mov	r2, r0
 801638c:	460b      	mov	r3, r1
 801638e:	a10c      	add	r1, pc, #48	; (adr r1, 80163c0 <__ieee754_atan2+0x158>)
 8016390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016394:	f7e9 ff2c 	bl	80001f0 <__aeabi_dsub>
 8016398:	e787      	b.n	80162aa <__ieee754_atan2+0x42>
 801639a:	a109      	add	r1, pc, #36	; (adr r1, 80163c0 <__ieee754_atan2+0x158>)
 801639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163a0:	e783      	b.n	80162aa <__ieee754_atan2+0x42>
 80163a2:	a10b      	add	r1, pc, #44	; (adr r1, 80163d0 <__ieee754_atan2+0x168>)
 80163a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163a8:	e77f      	b.n	80162aa <__ieee754_atan2+0x42>
 80163aa:	2000      	movs	r0, #0
 80163ac:	2100      	movs	r1, #0
 80163ae:	e77c      	b.n	80162aa <__ieee754_atan2+0x42>
 80163b0:	a105      	add	r1, pc, #20	; (adr r1, 80163c8 <__ieee754_atan2+0x160>)
 80163b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163b6:	e778      	b.n	80162aa <__ieee754_atan2+0x42>
 80163b8:	33145c07 	.word	0x33145c07
 80163bc:	3ca1a626 	.word	0x3ca1a626
 80163c0:	54442d18 	.word	0x54442d18
 80163c4:	400921fb 	.word	0x400921fb
 80163c8:	54442d18 	.word	0x54442d18
 80163cc:	3ff921fb 	.word	0x3ff921fb
 80163d0:	54442d18 	.word	0x54442d18
 80163d4:	3fe921fb 	.word	0x3fe921fb
 80163d8:	080171a8 	.word	0x080171a8
 80163dc:	080171c0 	.word	0x080171c0
 80163e0:	54442d18 	.word	0x54442d18
 80163e4:	c00921fb 	.word	0xc00921fb
 80163e8:	54442d18 	.word	0x54442d18
 80163ec:	bff921fb 	.word	0xbff921fb
 80163f0:	7ff00000 	.word	0x7ff00000
 80163f4:	00000000 	.word	0x00000000

080163f8 <atan>:
 80163f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163fc:	ec55 4b10 	vmov	r4, r5, d0
 8016400:	4bc3      	ldr	r3, [pc, #780]	; (8016710 <atan+0x318>)
 8016402:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016406:	429e      	cmp	r6, r3
 8016408:	46ab      	mov	fp, r5
 801640a:	dd18      	ble.n	801643e <atan+0x46>
 801640c:	4bc1      	ldr	r3, [pc, #772]	; (8016714 <atan+0x31c>)
 801640e:	429e      	cmp	r6, r3
 8016410:	dc01      	bgt.n	8016416 <atan+0x1e>
 8016412:	d109      	bne.n	8016428 <atan+0x30>
 8016414:	b144      	cbz	r4, 8016428 <atan+0x30>
 8016416:	4622      	mov	r2, r4
 8016418:	462b      	mov	r3, r5
 801641a:	4620      	mov	r0, r4
 801641c:	4629      	mov	r1, r5
 801641e:	f7e9 fee9 	bl	80001f4 <__adddf3>
 8016422:	4604      	mov	r4, r0
 8016424:	460d      	mov	r5, r1
 8016426:	e006      	b.n	8016436 <atan+0x3e>
 8016428:	f1bb 0f00 	cmp.w	fp, #0
 801642c:	f300 8131 	bgt.w	8016692 <atan+0x29a>
 8016430:	a59b      	add	r5, pc, #620	; (adr r5, 80166a0 <atan+0x2a8>)
 8016432:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016436:	ec45 4b10 	vmov	d0, r4, r5
 801643a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801643e:	4bb6      	ldr	r3, [pc, #728]	; (8016718 <atan+0x320>)
 8016440:	429e      	cmp	r6, r3
 8016442:	dc14      	bgt.n	801646e <atan+0x76>
 8016444:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016448:	429e      	cmp	r6, r3
 801644a:	dc0d      	bgt.n	8016468 <atan+0x70>
 801644c:	a396      	add	r3, pc, #600	; (adr r3, 80166a8 <atan+0x2b0>)
 801644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016452:	ee10 0a10 	vmov	r0, s0
 8016456:	4629      	mov	r1, r5
 8016458:	f7e9 fecc 	bl	80001f4 <__adddf3>
 801645c:	4baf      	ldr	r3, [pc, #700]	; (801671c <atan+0x324>)
 801645e:	2200      	movs	r2, #0
 8016460:	f7ea fb0e 	bl	8000a80 <__aeabi_dcmpgt>
 8016464:	2800      	cmp	r0, #0
 8016466:	d1e6      	bne.n	8016436 <atan+0x3e>
 8016468:	f04f 3aff 	mov.w	sl, #4294967295
 801646c:	e02b      	b.n	80164c6 <atan+0xce>
 801646e:	f000 f963 	bl	8016738 <fabs>
 8016472:	4bab      	ldr	r3, [pc, #684]	; (8016720 <atan+0x328>)
 8016474:	429e      	cmp	r6, r3
 8016476:	ec55 4b10 	vmov	r4, r5, d0
 801647a:	f300 80bf 	bgt.w	80165fc <atan+0x204>
 801647e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016482:	429e      	cmp	r6, r3
 8016484:	f300 80a0 	bgt.w	80165c8 <atan+0x1d0>
 8016488:	ee10 2a10 	vmov	r2, s0
 801648c:	ee10 0a10 	vmov	r0, s0
 8016490:	462b      	mov	r3, r5
 8016492:	4629      	mov	r1, r5
 8016494:	f7e9 feae 	bl	80001f4 <__adddf3>
 8016498:	4ba0      	ldr	r3, [pc, #640]	; (801671c <atan+0x324>)
 801649a:	2200      	movs	r2, #0
 801649c:	f7e9 fea8 	bl	80001f0 <__aeabi_dsub>
 80164a0:	2200      	movs	r2, #0
 80164a2:	4606      	mov	r6, r0
 80164a4:	460f      	mov	r7, r1
 80164a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80164aa:	4620      	mov	r0, r4
 80164ac:	4629      	mov	r1, r5
 80164ae:	f7e9 fea1 	bl	80001f4 <__adddf3>
 80164b2:	4602      	mov	r2, r0
 80164b4:	460b      	mov	r3, r1
 80164b6:	4630      	mov	r0, r6
 80164b8:	4639      	mov	r1, r7
 80164ba:	f7ea f97b 	bl	80007b4 <__aeabi_ddiv>
 80164be:	f04f 0a00 	mov.w	sl, #0
 80164c2:	4604      	mov	r4, r0
 80164c4:	460d      	mov	r5, r1
 80164c6:	4622      	mov	r2, r4
 80164c8:	462b      	mov	r3, r5
 80164ca:	4620      	mov	r0, r4
 80164cc:	4629      	mov	r1, r5
 80164ce:	f7ea f847 	bl	8000560 <__aeabi_dmul>
 80164d2:	4602      	mov	r2, r0
 80164d4:	460b      	mov	r3, r1
 80164d6:	4680      	mov	r8, r0
 80164d8:	4689      	mov	r9, r1
 80164da:	f7ea f841 	bl	8000560 <__aeabi_dmul>
 80164de:	a374      	add	r3, pc, #464	; (adr r3, 80166b0 <atan+0x2b8>)
 80164e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e4:	4606      	mov	r6, r0
 80164e6:	460f      	mov	r7, r1
 80164e8:	f7ea f83a 	bl	8000560 <__aeabi_dmul>
 80164ec:	a372      	add	r3, pc, #456	; (adr r3, 80166b8 <atan+0x2c0>)
 80164ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f2:	f7e9 fe7f 	bl	80001f4 <__adddf3>
 80164f6:	4632      	mov	r2, r6
 80164f8:	463b      	mov	r3, r7
 80164fa:	f7ea f831 	bl	8000560 <__aeabi_dmul>
 80164fe:	a370      	add	r3, pc, #448	; (adr r3, 80166c0 <atan+0x2c8>)
 8016500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016504:	f7e9 fe76 	bl	80001f4 <__adddf3>
 8016508:	4632      	mov	r2, r6
 801650a:	463b      	mov	r3, r7
 801650c:	f7ea f828 	bl	8000560 <__aeabi_dmul>
 8016510:	a36d      	add	r3, pc, #436	; (adr r3, 80166c8 <atan+0x2d0>)
 8016512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016516:	f7e9 fe6d 	bl	80001f4 <__adddf3>
 801651a:	4632      	mov	r2, r6
 801651c:	463b      	mov	r3, r7
 801651e:	f7ea f81f 	bl	8000560 <__aeabi_dmul>
 8016522:	a36b      	add	r3, pc, #428	; (adr r3, 80166d0 <atan+0x2d8>)
 8016524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016528:	f7e9 fe64 	bl	80001f4 <__adddf3>
 801652c:	4632      	mov	r2, r6
 801652e:	463b      	mov	r3, r7
 8016530:	f7ea f816 	bl	8000560 <__aeabi_dmul>
 8016534:	a368      	add	r3, pc, #416	; (adr r3, 80166d8 <atan+0x2e0>)
 8016536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653a:	f7e9 fe5b 	bl	80001f4 <__adddf3>
 801653e:	4642      	mov	r2, r8
 8016540:	464b      	mov	r3, r9
 8016542:	f7ea f80d 	bl	8000560 <__aeabi_dmul>
 8016546:	a366      	add	r3, pc, #408	; (adr r3, 80166e0 <atan+0x2e8>)
 8016548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801654c:	4680      	mov	r8, r0
 801654e:	4689      	mov	r9, r1
 8016550:	4630      	mov	r0, r6
 8016552:	4639      	mov	r1, r7
 8016554:	f7ea f804 	bl	8000560 <__aeabi_dmul>
 8016558:	a363      	add	r3, pc, #396	; (adr r3, 80166e8 <atan+0x2f0>)
 801655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655e:	f7e9 fe47 	bl	80001f0 <__aeabi_dsub>
 8016562:	4632      	mov	r2, r6
 8016564:	463b      	mov	r3, r7
 8016566:	f7e9 fffb 	bl	8000560 <__aeabi_dmul>
 801656a:	a361      	add	r3, pc, #388	; (adr r3, 80166f0 <atan+0x2f8>)
 801656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016570:	f7e9 fe3e 	bl	80001f0 <__aeabi_dsub>
 8016574:	4632      	mov	r2, r6
 8016576:	463b      	mov	r3, r7
 8016578:	f7e9 fff2 	bl	8000560 <__aeabi_dmul>
 801657c:	a35e      	add	r3, pc, #376	; (adr r3, 80166f8 <atan+0x300>)
 801657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016582:	f7e9 fe35 	bl	80001f0 <__aeabi_dsub>
 8016586:	4632      	mov	r2, r6
 8016588:	463b      	mov	r3, r7
 801658a:	f7e9 ffe9 	bl	8000560 <__aeabi_dmul>
 801658e:	a35c      	add	r3, pc, #368	; (adr r3, 8016700 <atan+0x308>)
 8016590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016594:	f7e9 fe2c 	bl	80001f0 <__aeabi_dsub>
 8016598:	4632      	mov	r2, r6
 801659a:	463b      	mov	r3, r7
 801659c:	f7e9 ffe0 	bl	8000560 <__aeabi_dmul>
 80165a0:	4602      	mov	r2, r0
 80165a2:	460b      	mov	r3, r1
 80165a4:	4640      	mov	r0, r8
 80165a6:	4649      	mov	r1, r9
 80165a8:	f7e9 fe24 	bl	80001f4 <__adddf3>
 80165ac:	4622      	mov	r2, r4
 80165ae:	462b      	mov	r3, r5
 80165b0:	f7e9 ffd6 	bl	8000560 <__aeabi_dmul>
 80165b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80165b8:	4602      	mov	r2, r0
 80165ba:	460b      	mov	r3, r1
 80165bc:	d14b      	bne.n	8016656 <atan+0x25e>
 80165be:	4620      	mov	r0, r4
 80165c0:	4629      	mov	r1, r5
 80165c2:	f7e9 fe15 	bl	80001f0 <__aeabi_dsub>
 80165c6:	e72c      	b.n	8016422 <atan+0x2a>
 80165c8:	ee10 0a10 	vmov	r0, s0
 80165cc:	4b53      	ldr	r3, [pc, #332]	; (801671c <atan+0x324>)
 80165ce:	2200      	movs	r2, #0
 80165d0:	4629      	mov	r1, r5
 80165d2:	f7e9 fe0d 	bl	80001f0 <__aeabi_dsub>
 80165d6:	4b51      	ldr	r3, [pc, #324]	; (801671c <atan+0x324>)
 80165d8:	4606      	mov	r6, r0
 80165da:	460f      	mov	r7, r1
 80165dc:	2200      	movs	r2, #0
 80165de:	4620      	mov	r0, r4
 80165e0:	4629      	mov	r1, r5
 80165e2:	f7e9 fe07 	bl	80001f4 <__adddf3>
 80165e6:	4602      	mov	r2, r0
 80165e8:	460b      	mov	r3, r1
 80165ea:	4630      	mov	r0, r6
 80165ec:	4639      	mov	r1, r7
 80165ee:	f7ea f8e1 	bl	80007b4 <__aeabi_ddiv>
 80165f2:	f04f 0a01 	mov.w	sl, #1
 80165f6:	4604      	mov	r4, r0
 80165f8:	460d      	mov	r5, r1
 80165fa:	e764      	b.n	80164c6 <atan+0xce>
 80165fc:	4b49      	ldr	r3, [pc, #292]	; (8016724 <atan+0x32c>)
 80165fe:	429e      	cmp	r6, r3
 8016600:	da1d      	bge.n	801663e <atan+0x246>
 8016602:	ee10 0a10 	vmov	r0, s0
 8016606:	4b48      	ldr	r3, [pc, #288]	; (8016728 <atan+0x330>)
 8016608:	2200      	movs	r2, #0
 801660a:	4629      	mov	r1, r5
 801660c:	f7e9 fdf0 	bl	80001f0 <__aeabi_dsub>
 8016610:	4b45      	ldr	r3, [pc, #276]	; (8016728 <atan+0x330>)
 8016612:	4606      	mov	r6, r0
 8016614:	460f      	mov	r7, r1
 8016616:	2200      	movs	r2, #0
 8016618:	4620      	mov	r0, r4
 801661a:	4629      	mov	r1, r5
 801661c:	f7e9 ffa0 	bl	8000560 <__aeabi_dmul>
 8016620:	4b3e      	ldr	r3, [pc, #248]	; (801671c <atan+0x324>)
 8016622:	2200      	movs	r2, #0
 8016624:	f7e9 fde6 	bl	80001f4 <__adddf3>
 8016628:	4602      	mov	r2, r0
 801662a:	460b      	mov	r3, r1
 801662c:	4630      	mov	r0, r6
 801662e:	4639      	mov	r1, r7
 8016630:	f7ea f8c0 	bl	80007b4 <__aeabi_ddiv>
 8016634:	f04f 0a02 	mov.w	sl, #2
 8016638:	4604      	mov	r4, r0
 801663a:	460d      	mov	r5, r1
 801663c:	e743      	b.n	80164c6 <atan+0xce>
 801663e:	462b      	mov	r3, r5
 8016640:	ee10 2a10 	vmov	r2, s0
 8016644:	4939      	ldr	r1, [pc, #228]	; (801672c <atan+0x334>)
 8016646:	2000      	movs	r0, #0
 8016648:	f7ea f8b4 	bl	80007b4 <__aeabi_ddiv>
 801664c:	f04f 0a03 	mov.w	sl, #3
 8016650:	4604      	mov	r4, r0
 8016652:	460d      	mov	r5, r1
 8016654:	e737      	b.n	80164c6 <atan+0xce>
 8016656:	4b36      	ldr	r3, [pc, #216]	; (8016730 <atan+0x338>)
 8016658:	4e36      	ldr	r6, [pc, #216]	; (8016734 <atan+0x33c>)
 801665a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016662:	f7e9 fdc5 	bl	80001f0 <__aeabi_dsub>
 8016666:	4622      	mov	r2, r4
 8016668:	462b      	mov	r3, r5
 801666a:	f7e9 fdc1 	bl	80001f0 <__aeabi_dsub>
 801666e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8016672:	4602      	mov	r2, r0
 8016674:	460b      	mov	r3, r1
 8016676:	e9d6 0100 	ldrd	r0, r1, [r6]
 801667a:	f7e9 fdb9 	bl	80001f0 <__aeabi_dsub>
 801667e:	f1bb 0f00 	cmp.w	fp, #0
 8016682:	4604      	mov	r4, r0
 8016684:	460d      	mov	r5, r1
 8016686:	f6bf aed6 	bge.w	8016436 <atan+0x3e>
 801668a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801668e:	461d      	mov	r5, r3
 8016690:	e6d1      	b.n	8016436 <atan+0x3e>
 8016692:	a51d      	add	r5, pc, #116	; (adr r5, 8016708 <atan+0x310>)
 8016694:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016698:	e6cd      	b.n	8016436 <atan+0x3e>
 801669a:	bf00      	nop
 801669c:	f3af 8000 	nop.w
 80166a0:	54442d18 	.word	0x54442d18
 80166a4:	bff921fb 	.word	0xbff921fb
 80166a8:	8800759c 	.word	0x8800759c
 80166ac:	7e37e43c 	.word	0x7e37e43c
 80166b0:	e322da11 	.word	0xe322da11
 80166b4:	3f90ad3a 	.word	0x3f90ad3a
 80166b8:	24760deb 	.word	0x24760deb
 80166bc:	3fa97b4b 	.word	0x3fa97b4b
 80166c0:	a0d03d51 	.word	0xa0d03d51
 80166c4:	3fb10d66 	.word	0x3fb10d66
 80166c8:	c54c206e 	.word	0xc54c206e
 80166cc:	3fb745cd 	.word	0x3fb745cd
 80166d0:	920083ff 	.word	0x920083ff
 80166d4:	3fc24924 	.word	0x3fc24924
 80166d8:	5555550d 	.word	0x5555550d
 80166dc:	3fd55555 	.word	0x3fd55555
 80166e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80166e4:	bfa2b444 	.word	0xbfa2b444
 80166e8:	52defd9a 	.word	0x52defd9a
 80166ec:	3fadde2d 	.word	0x3fadde2d
 80166f0:	af749a6d 	.word	0xaf749a6d
 80166f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80166f8:	fe231671 	.word	0xfe231671
 80166fc:	3fbc71c6 	.word	0x3fbc71c6
 8016700:	9998ebc4 	.word	0x9998ebc4
 8016704:	3fc99999 	.word	0x3fc99999
 8016708:	54442d18 	.word	0x54442d18
 801670c:	3ff921fb 	.word	0x3ff921fb
 8016710:	440fffff 	.word	0x440fffff
 8016714:	7ff00000 	.word	0x7ff00000
 8016718:	3fdbffff 	.word	0x3fdbffff
 801671c:	3ff00000 	.word	0x3ff00000
 8016720:	3ff2ffff 	.word	0x3ff2ffff
 8016724:	40038000 	.word	0x40038000
 8016728:	3ff80000 	.word	0x3ff80000
 801672c:	bff00000 	.word	0xbff00000
 8016730:	080171f8 	.word	0x080171f8
 8016734:	080171d8 	.word	0x080171d8

08016738 <fabs>:
 8016738:	ec51 0b10 	vmov	r0, r1, d0
 801673c:	ee10 2a10 	vmov	r2, s0
 8016740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016744:	ec43 2b10 	vmov	d0, r2, r3
 8016748:	4770      	bx	lr
	...

0801674c <_init>:
 801674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801674e:	bf00      	nop
 8016750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016752:	bc08      	pop	{r3}
 8016754:	469e      	mov	lr, r3
 8016756:	4770      	bx	lr

08016758 <_fini>:
 8016758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801675a:	bf00      	nop
 801675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801675e:	bc08      	pop	{r3}
 8016760:	469e      	mov	lr, r3
 8016762:	4770      	bx	lr
 8016764:	0000      	movs	r0, r0
	...

08016768 <__system_Reset_veneer>:
 8016768:	f85f f000 	ldr.w	pc, [pc]	; 801676c <__system_Reset_veneer+0x4>
 801676c:	20000269 	.word	0x20000269

Disassembly of section .data:

20000000 <_battery_perc_lut>:
20000000:	00010bb8 000a0ce4 00320e10 003c0e74     ..........2.t.<.
20000010:	00460ea6 004b0ece 00500ef6 00550f1e     ..F...K...P...U.
20000020:	005a0f50 005f0f82 00611004 00641068     P.Z..._...a.h.d.

20000030 <cfg_NodeList>:
20000030:	00010001 00000004 0800282d 0800289d     ........-(...(..
20000040:	08002759 00010065 00000030 080026c5     Y'..e...0....&..
20000050:	08002709 08002649 00010066 00000000     .'..I&..f.......
	...
2000006c:	006627d9 0000000e 0800b2a1 0800b3dd     .'f.............
2000007c:	0800b0c9 006627da 00000006 080099a1     .....'f.........
2000008c:	08009a45 08009899 006627db 0000000a     E........'f.....
2000009c:	0800a021 0800a11d 08009eb1 006627dc     !............'f.
200000ac:	00000003 08002421 08002489 08002371     ....!$...$..q#..
200000bc:	006627dd 0000000d 0800a9ad 0800aaa5     .'f.............
200000cc:	0800a7ed 00010067 00000006 08001c3d     ....g.......=...
200000dc:	08001cd1 08001b35 0067283d 00000005     ....5...=(g.....
200000ec:	08001e3d 08001eb9 08001d4d 0067283e     =.......M...>(g.
200000fc:	00000005 08002005 08002081 08001f15     ..... ... ......

2000010c <SystemCoreClock>:
2000010c:	00f42400                                .$..

20000110 <uwTickPrio>:
20000110:	00000010                                ....

20000114 <uwTickFreq>:
20000114:	00000001                                ....

20000118 <USBD_CDC_DeviceQualifierDesc>:
20000118:	0200060a 40000000 00000001              .......@....

20000124 <USBD_CDC>:
20000124:	080135f9 080137e9 080138ed 00000000     .5...7...8......
20000134:	08013c13 08013aa5 08013ba3 00000000     .<...:...;......
	...
2000014c:	08013cf9 08013c89 08013d69 08013dd9     .<...<..i=...=..

2000015c <USBD_CDC_CfgDesc>:
2000015c:	00430209 c0000102 00040932 02020100     ..C.....2.......
2000016c:	24050001 05011000 01000124 02022404     ...$....$....$..
2000017c:	00062405 82050701 10000803 00010409     .$..............
2000018c:	00000a02 01050700 00004002 02810507     .........@......
2000019c:	                                         @..

2000019f <CDCInEpAdd>:
2000019f:	                                         .

200001a0 <CDCOutEpAdd>:
200001a0:	                                         .

200001a1 <CDCCmdEpAdd>:
200001a1:	                                         ...

200001a4 <USBD_Interface_fops_FS>:
200001a4:	080155e9 08015611 08015621 080156dd     .U...V..!V...V..
200001b4:	08015781                                .W..

200001b8 <FS_Desc>:
200001b8:	080157a5 080157c9 08015829 080157ed     .W...W..)X...W..
200001c8:	08015851 08015875 080158b1              QX..uX...X..

200001d4 <USBD_FS_DeviceDesc>:
200001d4:	02000112 40000202 57400483 02010200     .......@..@W....
200001e4:	00000103                                ....

200001e8 <USBD_LangIDDesc>:
200001e8:	04090304                                ....

200001ec <USBD_StringSerial>:
200001ec:	0000031a 00000000 00000000 00000000     ................
	...

20000208 <_impure_data>:
20000208:	00000000 20002d40 20002da8 20002e10     ....@-. .-. ... 
	...

20000254 <_impure_ptr>:
20000254:	20000208                                ... 

20000258 <one>:
20000258:	00000000 3ff00000                       .......?

20000260 <tiny>:
20000260:	c2f8f359 01a56e1f                       Y....n..

20000268 <system_Reset>:

__ramfunc void system_Reset()
{
20000268:	b480      	push	{r7}
2000026a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
2000026c:	b672      	cpsid	i
}
2000026e:	bf00      	nop
	__disable_irq();
	SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20000270:	4b05      	ldr	r3, [pc, #20]	; (20000288 <system_Reset+0x20>)
20000272:	68db      	ldr	r3, [r3, #12]
20000274:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20000278:	4903      	ldr	r1, [pc, #12]	; (20000288 <system_Reset+0x20>)
2000027a:	4b04      	ldr	r3, [pc, #16]	; (2000028c <system_Reset+0x24>)
2000027c:	4313      	orrs	r3, r2
2000027e:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20000280:	f3bf 8f4f 	dsb	sy
}
20000284:	bf00      	nop
	SCB_AIRCR_SYSRESETREQ_Msk); 																/* Keep priority group unchanged *//* Ensure completion of memory access */
	__DSB();                                                                             		// Ensure completion of memory access
	while(1);
20000286:	e7fe      	b.n	20000286 <system_Reset+0x1e>
20000288:	e000ed00 	.word	0xe000ed00
2000028c:	05fa0004 	.word	0x05fa0004
